<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why does AI responsibility matter</title>
      <author>Mage</author>
      <pubDate>Fri, 03 Dec 2021 21:57:46 +0000</pubDate>
      <link>https://dev.to/mage_ai/why-does-ai-responsibility-matter-34jl</link>
      <guid>https://dev.to/mage_ai/why-does-ai-responsibility-matter-34jl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;A machine learning (ML) model is only as good as its input data. In a world of inequity, developers must ensure they build responsible models void of bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;What is algorithmic bias?&lt;/li&gt;
&lt;li&gt;Societal harm&lt;/li&gt;
&lt;li&gt;Closing thoughts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As artificial intelligence (AI) begins to integrate itself into daily life, it’s essential that the technology be created for equitable and ethical use. Creating a responsible product is essential and failure to do so can have very real consequences. While neutral in theory, algorithms are at risk to become as biased as the world they were created from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-algorithmic-bias"&gt;
  &lt;/a&gt;
  What is algorithmic bias?
&lt;/h2&gt;

&lt;p&gt;Algorithmic bias occurs when computers make systematically biased and unfair decisions based on the data they're given. AI has the power to be a tool for the implementation of diversity and inclusion in many facets of life — increase workplace diversity, better access to healthcare, etc.&lt;/p&gt;

&lt;p&gt;When looking to create more inclusive AI, we must look to who is creating the algorithms. According to &lt;a href="https://www.zippia.com/software-engineer-jobs/demographics/"&gt;Zippia&lt;/a&gt;, only 25% of software developers in the US identify as female. Furthermore, over half of the 57% male developers are white. Even while well intentioned, a lack of diversity amongst programmers increases the chances that the algorithms created don’t reflect the experiences of the entire population.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rViIQ25i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st2u9dp1b23k7lyinro0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rViIQ25i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st2u9dp1b23k7lyinro0.png" alt="Image description" width="880" height="220"&gt;&lt;/a&gt;&lt;em&gt;“SOFTWARE ENGINEER STATISTICS BY GENDER” via Zippia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating AI models, developers either curate or choose from an existing training set that will be fed into the algorithm. Problems can arise when input data goes against the established norm of the dataset or when it’s curated on biased data. Developers cannot address problems that they aren’t aware of. And with a very homogenous group of people creating these models, many biases go unnoticed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#societal-harm"&gt;
  &lt;/a&gt;
  Societal harm
&lt;/h2&gt;

&lt;p&gt;Can an algorithm be prejudice? While algorithms are a neutral force, data and developer’s biases often appear in the final product. This can have very real implications for those who use or are affected by AI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apple-credit-card"&gt;
  &lt;/a&gt;
  Apple Credit Card
&lt;/h3&gt;

&lt;p&gt;In partnership with Goldman Sachs, Apple launched their first credit card in 2019. Problems arose when David Heinemeier Hansson &lt;a href="https://twitter.com/stevewoz/status/1193422616016519168?ref_src=twsrc%5Etfw"&gt;tweeted&lt;/a&gt; that when applying for the Apple credit card, it gave him a 20x higher limit than his wife. This was echoed many times over, including by Apple co-founder Steve Wozniak.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NovfJudh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqhy1r2l8lgk2d4aif36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NovfJudh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqhy1r2l8lgk2d4aif36.png" alt="Image description" width="880" height="384"&gt;&lt;/a&gt; &lt;br&gt;
Goldman Sachs issued a statement explaining that gender wasn’t an input variable when determining credit limits. Experts have said that this could be a part of the problem as omitting a variable could leave developers unaware of any problems. Will Knight with &lt;a href="https://www.wired.com/story/the-apple-card-didnt-see-genderand-thats-the-problem/"&gt;Wired&lt;/a&gt; explained “a gender-blind algorithm could end up biased against women as long as it’s drawing on any input or inputs that happen to correlate with gender.” As companies like Apple continue to make business decisions based on algorithms, rigorous testing, and trials must be done to ensure that human bias doesn’t make its way into machines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overpolicing"&gt;
  &lt;/a&gt;
  Over-policing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUdrT1pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71fpwzm3qkdmbkm9gq6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUdrT1pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71fpwzm3qkdmbkm9gq6k.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;em&gt;Example of PredPol’s predictive policing software via &lt;a href="https://www.wabe.org/concerns-arise-over-new-predictive-policing-program/"&gt;Wabe&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AI is currently being used for law enforcement and policing. Some worry that technology could exacerbate biases and racial stereotypes. &lt;a href="https://www.predpol.com/"&gt;PredPol&lt;/a&gt; is one company using algorithms to predict where crimes are most likely to happen and is currently being deployed in police stations around the world.&lt;/p&gt;

&lt;p&gt;PredPol and other AI policing technologies have left many concerned that the technology will only perpetuate existing racial bias. Racial disparities in criminal justice laws and the over-policing of certain neighborhoods could be factors in the data that would direct police back to these same neighborhoods. With a greater police presence, a vicious cycle of over-policing could continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1ZPydAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd9cyxdll911uuthl4tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1ZPydAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd9cyxdll911uuthl4tf.png" alt="Image description" width="880" height="584"&gt;&lt;/a&gt;&lt;em&gt;PredPol looks for patterns to dispatch police in neighborhoods&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PredPol’s CEO, &lt;a href="https://www.linkedin.com/in/brianmacd/"&gt;Brian MacDonald&lt;/a&gt;, has claimed that data is a much more reliable source for making decisions than human judgement. Policing software tools have the power to make determinations about people’s lives. Some use cases from police officers have backed up its claims. While algorithms can make life easier, we should be confident that they are free from biased data of the past before using them to make future decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;The rapid rate of development for AI has led to great innovation. It’s essential that ethical practices are integrated into technology to ensure equitable use. Next week’s blog covers responsible AI in practice and how to check for algorithmic bias.&lt;/p&gt;

&lt;p&gt;Interested in reducing social biases in AI? See how &lt;a href="https://www.mage.ai/"&gt;Mage&lt;/a&gt; can give you a display of bias and suggestions on how to lower them. Sign up for &lt;a href="https://share.hsforms.com/1LjMsA01RSoqu8qKomb_x8gcddw7"&gt;Early Access&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>mage</category>
      <category>machinelearning</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Form Validation with CSS</title>
      <author>Enes Kılıç</author>
      <pubDate>Fri, 03 Dec 2021 21:51:27 +0000</pubDate>
      <link>https://dev.to/enesskilic/form-validation-with-css-2hc4</link>
      <guid>https://dev.to/enesskilic/form-validation-with-css-2hc4</guid>
      <description>&lt;p&gt;In this post, I will show you how to validation the required form fields with CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to see full version of this project or all HTML-CSS projects look this &lt;a href="https://github.com/enesskilic/html-css-projects#login-page"&gt;Repository&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Create HTML&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!--==== Add required attribute to input tag  ====--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Login &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;My output with some styles&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/eneskilic/embed/rNGOMze?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started with Azure Load Testing</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Fri, 03 Dec 2021 21:33:13 +0000</pubDate>
      <link>https://dev.to/qainsights/getting-started-with-azure-load-testing-1n24</link>
      <guid>https://dev.to/qainsights/getting-started-with-azure-load-testing-1n24</guid>
      <description>&lt;p&gt;A new sheriff in town. Microsoft launched the fully managed Azure service for performance test engineers and developers to perform high scale load testing called Azure Load Testing, currently in preview mode. It is quite a big announcement for performance engineers. Let us see whether Azure Load Testing fulfills our needs or not in this blog post.&lt;/p&gt;

&lt;h2&gt;What is Azure Load Testing?&lt;/h2&gt;

&lt;p&gt;As foretold, aptly put, Azure Load Testing is an offering for the customers who are in the Azure ecosystem. Even if you are not in Azure, you can still spin up the load test resource for performance testing. But the catch is, PRICING. We can discuss the pricing in another blog post. Let us focus on the features, how to get started and more.&lt;/p&gt;

&lt;p&gt;Azure Load Testing is backed up by none other than Apache JMeter and Azure infrastructure. Here is a meme I created after the announcement was made.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/Azure-JMeter.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpSqEIwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/Azure-JMeter.jpg" alt="Azure Load Testing Meme" width="500" height="666"&gt;&lt;/a&gt;Azure Load Testing Meme&lt;/p&gt;

&lt;h2&gt;Azure Services&lt;/h2&gt;

&lt;p&gt;In Azure Load Testing, the core component is the latest version of Apache JMeter 5.4.1 and the Open JDK 64-bit 15.0.5. Microsoft has its own flavor of &lt;a href="https://docs.microsoft.com/en-us/java/openjdk/download" rel="noreferrer noopener"&gt;JDK&lt;/a&gt;. But I am not sure whether Azure Load Testing uses Microsoft distribution or other flavors. &lt;/p&gt;

&lt;p&gt;Tests will be executed on Linux AMD instance with 4 cores and 16 GB RAM.&lt;/p&gt;

&lt;p&gt;Apart from JMeter and JDK, following are the dependencies which will be created for performance testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Service&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Application Insights&lt;/li&gt;
&lt;li&gt;Virtual Machine&lt;/li&gt;
&lt;li&gt;Azure SQL Server&lt;/li&gt;
&lt;li&gt;Storage account&lt;/li&gt;
&lt;li&gt;Azure Monitor (for monitoring)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the sample dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/QAInsights-12-2-2021-10.39.46-PM-000000.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXVQ8zGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/QAInsights-12-2-2021-10.39.46-PM-000000-1024x450.png" alt="Azure Monitor" width="880" height="387"&gt;&lt;/a&gt;Azure Monitor&lt;/p&gt;

&lt;h2&gt;Getting Started with Azure Load Testing&lt;/h2&gt;

&lt;p&gt;To get started with Azure Load Testing, the following are the prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure account with active subscription&lt;/li&gt;
&lt;li&gt;JMeter script and its dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creating an &lt;a href="https://azure.microsoft.com/en-us/free/" rel="noreferrer noopener"&gt;Azure account&lt;/a&gt; is simple and free. If you are new to Azure, you will get a $200 credit for 30 days.&lt;/p&gt;

&lt;h3&gt;Assigning roles&lt;/h3&gt;

&lt;p&gt;Before creating Azure Load Testing resources, let us create a Management Group and assign a valid role to spin up the resource.&lt;/p&gt;

&lt;p&gt;In the Azure portal, search for &lt;strong&gt;Management Groups&lt;/strong&gt;. In &lt;strong&gt;Management Groups&lt;/strong&gt;, click on &lt;strong&gt;Create &lt;/strong&gt;and enter the valid &lt;strong&gt;Management group ID&lt;/strong&gt; and then click on &lt;strong&gt;Submit&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Management Groups&lt;/strong&gt; help to organize the various entities such as policies, compliance and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XcIICQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-1024x644.png" alt="Management Groups" width="880" height="553"&gt;&lt;/a&gt;Management Groups&lt;/p&gt;

&lt;p&gt;Inside the created management group, it is important to add an active subscription. Click on &lt;strong&gt;Add Subcription&lt;/strong&gt; and select the &lt;strong&gt;active subscription&lt;/strong&gt; and then click on &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MYqhmcZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-2-1024x516.png" alt="Active Subscription" width="880" height="443"&gt;&lt;/a&gt;Active Subscription&lt;/p&gt;

&lt;p&gt;To spin up the resources, it is critical to have valid roles assigned. To assign a &lt;strong&gt;Load Test Owner&lt;/strong&gt; role, click on &lt;strong&gt;Access Control (IAM) &lt;/strong&gt;and then click on the &lt;strong&gt;Add role assignment&lt;/strong&gt; button as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUUvXVEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-3-1024x446.png" alt="Add a Role" width="880" height="383"&gt;&lt;/a&gt;Add a Role&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Add role assignment&lt;/strong&gt; window, search for "&lt;em&gt;load&lt;/em&gt;" and then select the appropriate role. In this example, I selected &lt;strong&gt;Load Test Owner&lt;/strong&gt;. Click on the &lt;strong&gt;Next &lt;/strong&gt;button to add the members.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkmAcaDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-5-1024x570.png" alt="Role Assignment" width="880" height="490"&gt;&lt;/a&gt;Role Assignment&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Select Members&lt;/strong&gt; and then add the valid members. Click on &lt;strong&gt;Next &lt;/strong&gt;to &lt;strong&gt;Review and Assign&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKezI4dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-4-1024x503.png" alt="Select Members" width="880" height="432"&gt;&lt;/a&gt;Select Members&lt;/p&gt;



&lt;h3&gt;Create a new Azure Load Testing resource&lt;/h3&gt;

&lt;p&gt;To begin with the performance testing, the first step is to create a new &lt;strong&gt;Azure Load Testing&lt;/strong&gt; resource. Go to the home page of Azure portal, and enter &lt;em&gt;Load Test &lt;/em&gt;in the search text bar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiftuOCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-6.png" alt="Getting Started with Azure Load Testing" width="421" height="311"&gt;&lt;/a&gt;Getting Started with Azure Load Testing&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Azure Load Testing&lt;/strong&gt; under &lt;strong&gt;Services&lt;/strong&gt; as shown above.&lt;/p&gt;

&lt;p&gt;On the Azure Load Testing page, click on &lt;strong&gt;Create &lt;/strong&gt;to create a new Load Test Resource. Under the &lt;strong&gt;Basics &lt;/strong&gt;tab, fill in the mandatory fields as shown below. Then, click on the &lt;strong&gt;Review + create&lt;/strong&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VL2Uz6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-7-1024x881.png" alt="Create Load Test Resource" width="880" height="757"&gt;&lt;/a&gt;Create Load Test Resource&lt;/p&gt;

&lt;p&gt;After validation is successful, click on &lt;strong&gt;Create&lt;/strong&gt;. This will initialize the deployment and, once it is successfully completed, you will get the status.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbEdYGnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-8-1024x386.png" alt="Deployment Status" width="880" height="332"&gt;&lt;/a&gt;Deployment Status&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Go to resource&lt;/strong&gt; button to view the landing page of Azure Load Testing. Welcome home :) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-9.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8gNOb3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-9-1024x370.png" alt="Home page of Azure Load Testing" width="880" height="318"&gt;&lt;/a&gt;Home page of Azure Load Testing&lt;/p&gt;

&lt;h3&gt;Create a new test&lt;/h3&gt;

&lt;p&gt;Click on the &lt;strong&gt;Create &lt;/strong&gt;button to start a new test for performance testing. It is a 7 - step easy process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-10.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saS-_sKv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-10.png" alt="Create a new test" width="716" height="339"&gt;&lt;/a&gt;Create a new test&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Basics &lt;/strong&gt;tab, enter the test name and description.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Test plan&lt;/strong&gt;, upload the JMeter test plan and its dependencies. Only one test plan is allowed. &lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Parameters&lt;/strong&gt;, enter sensitive information like API keys, Passwords and more.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Load&lt;/strong&gt;, configure the number of engines you need for your test. 1 engine will spin up 250 threads.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Test criteria&lt;/strong&gt;, configure the SLAs&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Monitoring&lt;/strong&gt;, you can link the resources to monitor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Click on &lt;strong&gt;Review + create&lt;/strong&gt; and then click on &lt;strong&gt;Create&lt;/strong&gt;, which will spin up the test.&lt;/p&gt;

&lt;p&gt;After the validation success, the test will start. A few moments later, you will see the dashboard as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-12.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1uW5T88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-12-1024x517.png" alt="Runtime Dashboard" width="880" height="444"&gt;&lt;/a&gt;Runtime Dashboard&lt;/p&gt;

&lt;p&gt;During the test, you can stop the test, refresh the dashboard, share the dashboard, and download the input file.&lt;/p&gt;

&lt;p&gt;After the test is done, you can rerun the test, compare the test, download the logs and results and delete the run.&lt;/p&gt;

&lt;h3&gt;Delete the Azure Load Test resource&lt;/h3&gt;

&lt;p&gt;Once the test is done, please make sure that you are deleting the resource. Before deleting it, download all the artifacts.&lt;/p&gt;

&lt;p&gt;To delete, go to the &lt;strong&gt;Azure Load Test&lt;/strong&gt; resource, click on &lt;strong&gt;Delete&lt;/strong&gt;, type &lt;strong&gt;yes&lt;/strong&gt;, select the reason and then click on the &lt;strong&gt;Delete &lt;/strong&gt;button as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-14.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fclZTb7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-14-1024x503.png" alt="Delete Azure Load Testing resource" width="880" height="432"&gt;&lt;/a&gt;Delete Azure Load Testing resource&lt;/p&gt;

&lt;h2&gt;Limitations and Cons&lt;/h2&gt;

&lt;p&gt;Every solution will have its own limitations. Azure Load Test comes with the following limitations from my exploration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Only one JMeter test plan is allowed to upload&lt;/li&gt;
&lt;li&gt;a limited number of regions.&lt;/li&gt;
&lt;li&gt;A maximum of 25,000 virtual users is supported.&lt;/li&gt;
&lt;li&gt;A maximum of 3 hours duration is supported. If you want to run endurance testing, you cannot trigger.&lt;/li&gt;
&lt;li&gt;Dashboard update is flaky. &lt;/li&gt;
&lt;li&gt;Expensive solution&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Azure Load Test offering is a great solution if you are into Azure ecosystem and your performance test requirements aren't crazy. The intuitive user interface and fluid workflow makes it easy to trigger the test. &lt;/p&gt;

&lt;p&gt;The essential features such as creating tests, dashboards, compare, download logs/results and more have been implemented. But features such as network virtualization, multiple tests support, more virtual users, more duration, split the load across multiple engines or regions, built-in JMeter plugins support, custom snippet support and more are missing.&lt;/p&gt;

&lt;p&gt;Give the Azure Load Test a shot, you may like it. &lt;/p&gt;

</description>
      <category>performance</category>
      <category>azure</category>
      <category>testing</category>
      <category>webperf</category>
    </item>
    <item>
      <title>Open Source Runtime Exploitability Management with ThreatMapper</title>
      <author>Deepfence</author>
      <pubDate>Fri, 03 Dec 2021 21:03:39 +0000</pubDate>
      <link>https://dev.to/deepfence/open-source-runtime-exploitability-management-with-threatmapper-3iel</link>
      <guid>https://dev.to/deepfence/open-source-runtime-exploitability-management-with-threatmapper-3iel</guid>
      <description>&lt;p&gt;CNCF Webinar - Move from mere vulnerability management to exploitability management with ThreatMapper&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=S-sNUuLDhz0"&gt;https://www.youtube.com/watch?v=S-sNUuLDhz0&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>security</category>
      <category>cloudnative</category>
      <category>devops</category>
    </item>
    <item>
      <title>Flutter User Authentication Part 1: Models and API</title>
      <author>gardnerapp</author>
      <pubDate>Fri, 03 Dec 2021 20:38:23 +0000</pubDate>
      <link>https://dev.to/coreyscorner/flutter-user-authentication-part-1-models-and-api-eb</link>
      <guid>https://dev.to/coreyscorner/flutter-user-authentication-part-1-models-and-api-eb</guid>
      <description>&lt;p&gt;Signing user up, in and out are nearly universal features for every type of app. In this series I’ll teach you how to build a simple authentication system. Part 1 will cover the basics of API calls and models. In part 2 I’ll teach you how to store authenticated users inside your app with the Cubit package and in part 3 we’ll be learning how to maintain sign-in after our app closes by using the shared preferences package.&lt;/p&gt;

&lt;p&gt;Podcast: &lt;a href="https://podcasts.apple.com/us/podcast/coreys-corner/id1479097455"&gt;https://podcasts.apple.com/us/podcast/coreys-corner/id1479097455&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn to code: &lt;a href="https://www.youtube.com/channel/UCfd8A1xfzqk7veapUhe8hLQ"&gt;https://www.youtube.com/channel/UCfd8A1xfzqk7veapUhe8hLQ&lt;/a&gt;&lt;br&gt;
Creating a Base API class:&lt;/p&gt;

&lt;p&gt;Our first step is to build a BaseAPI class to hold all of the URL’s of our API. In my How To Make Flutter API Calls Easy I taught you how to use class inheritance as a means of simplifying and organizing your API calls. This class isn’t to complex it just stores the routes we will be requesting, check out the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Class BaseAPI{    static String base = "http://localhost:3000"; 
    static var api = base + "/api/v1";
    var customersPath = api + "/customers";
    var authPath = api + "/auth"; 
   // more routes   Map&amp;lt;String,String&amp;gt; headers = {                           
       "Content-Type": "application/json; charset=UTF-8" };                                      

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ultimately creating our Base class makes it easier for us to manage our API endpoints.&lt;br&gt;
Creating A Customer API Class&lt;/p&gt;

&lt;p&gt;Next we’re going to create a class to store all of the API calls for customer authentication.&lt;/p&gt;

&lt;p&gt;We’ll make request using darts HTTP library, any data we send will be encoded in JSON format. Each request will return a Future of type HTTP response. Inside of our widgets we’ll be using the Response’s statusCode attribute to determine if our calls were successful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'dart:convert';

import 'package:resteraunt_starter/api/BaseAPI.dart';
import 'package:http/http.dart' as http;

class AuthAPI extends BaseAPI {  Future&amp;lt;http.Response&amp;gt; signUp(String name, String email, String phone,
      String password, String passwordConfirmation) async {
    var body = jsonEncode({
      'customer': {
        'name': name,
        'email': email,
        'phone': phone,
        'password': password,
        'password_confirmation': passwordConfirmation
      }
    });

    http.Response response =
        await http.post(super.customersPath, headers: super.headers, body: body);
    return response;
  }

  Future&amp;lt;http.Response&amp;gt; login(String email, String password) async {
    var body = jsonEncode({'email': email, 'password': password});

    http.Response response =
        await http.post(super.authPath, headers: super.headers, body: body);

    return response;
  }


  Future&amp;lt;http.Response&amp;gt; logout(int id, String token) async {
    var body = jsonEncode({'id': id, 'token': token});

    http.Response response = await http.post(super.logoutPath,
        headers: super.headers, body: body);

    return response;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it’s time to create our Customer class!&lt;br&gt;
Creating a Customer Object&lt;/p&gt;

&lt;p&gt;When we create an object we are creating our own data type, we’re creating a blue print that outlines all the properties that each of our customers will have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'dart:convert';

class Customer{
  int id;
  String email;
  String phone;
  String name;
  String token;

  User({this.id, this.email, this.phone, this.name, this.token});

  factory Customer.fromReqBody(String body) {
    Map&amp;lt;String, dynamic&amp;gt; json = jsonDecode(body);

    return Customer(
      id: json['id'],
      email: json['email'],
      name: json['name'],
      phone: json['phone'],
      token: json['token'],
    );

  }

  void printAttributes() {
    print("id: ${this.id}\n");
    print("email: ${this.email}\n");
    print("phone: ${this.phone}\n");
    print("name: ${this.name}\n");
    print("token: ${this.token}\n");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we did was create class constructors to initialize new instances of our Customer objects. We use the factory constructor because there might be a time when we don’t need to create an entirely new instance of our class. Our factory method will receive a JSON object, from our API call request body, which we will decode into a Map of type(s) String &amp;amp; dynamic. From their it’s only a matter of setting our Customer attributes to their corresponding keys in the map. Lastly the printAttributes() helper method will print out all of the attributes and their values, this is very useful for debugging.&lt;br&gt;
In Our Widgets&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;../authentication/auth.dart

class Auth extends StatefulWidget {
  @override
  _AuthState createState() =&amp;gt; _AuthState();
}

class _AuthState extends State&amp;lt;Auth&amp;gt; {
  bool showSignUp = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
            title: Text(
              "Corey's Corner",
            ),
          elevation: 16.0,
          actions: [
            IconButton(
                icon: Icon(Icons.swap_horiz),
                onPressed: () {
                  setState(() {                    showSignUp = !showSignUp;
                  });
                })
          ],
        ),
        // ternary operator 
      body: Container(child: showSignUp ? SignUp() : SignIn()));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this widget we are setting up a container to hold both our Signup() &amp;amp; SignIn() widgets. We use a boolean to toggle back and forth between the different pages, this prevents use from having to write push functions to get to different pages.&lt;br&gt;
../authentication/sign_in.dart&lt;/p&gt;

&lt;p&gt;For the sake of brevity I’m going to leave all form, text and button styling out of the picture and this tutorial will only cover the signIn page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class SignIn extends StatefulWidget {

  @override
  _SignInState createState() =&amp;gt; _SignInState();
}

class _SignInState extends State&amp;lt;SignIn&amp;gt; {
  AuthAPI _authAPI = AuthAPI();
  final _key =  GlobalKey&amp;lt;FormState&amp;gt;();
  String email;
  String password;
  @override
  Widget build(BuildContext context) {

    return  Container(
        padding: EdgeInsets.symmetric(vertical: 20.0, horizontal: 25.0),
        child: Form(
            key: _key,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: &amp;lt;Widget&amp;gt;[
                SizedBox(height: 70),
                Text("Sign In", style: formTitleStyle(),),
                SizedBox(height: 30),
                Container(
                    width: 400,
                    child: TextFormField(
                      decoration: textInputDecoration("Email", context),
             onChanged: (val) =&amp;gt; setState(() =&amp;gt; email = val),
                    )
                ),
                SizedBox(height: 30),
                Container(
                  width: 400,
                  child: TextFormField(
                    obscureText: true,
                    decoration: textInputDecoration("Password", context),
                    onChanged: (val) =&amp;gt; setState(() =&amp;gt; password = val),
                  ),
                ),
                SizedBox(height: 25),
                GestureDetector(
                  child: Text("Forgot Password ?", style: TextStyle(
                      fontSize: 18.0,
                      decoration: TextDecoration.underline
                  ),),
                  onTap: (){
                  // todo 
                  },
                ),
                SizedBox(height: 25),
                Container(
                    width: 400,
                    child: customRaisedIconButton("Sign In !", Icons.send, context, () async {
                      if(_key.currentState.validate()){
                        try{
                          var req = await 
                       _authAPI.login(email,  password);
                          if(req.statusCode == 200){print(req.body);
var customer = 
                              Customer.fromReqBody(req.body);customer.printAttributes();
                        Navigator.push(context, MaterialPageRoute(
                         builder: (context) =&amp;gt; MyHomePage(customer:                 customer)));
                          } else {
                            pushError(context);
                          }
                        } on Exception catch (e){
                        print(e.toString());
                        pushError(context);
                        }
                      }
                    })
                )
              ],
            )
        )
    );
  }
void PushError(){
    Navigator.push(context, MaterialPageRoute(
        builder: (context) =&amp;gt; Error()
    ));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we do is create to Strings email &amp;amp; password within state. In side of our text forms we call setState to set the stateful fields to the values our customer types in. Before our API call we’ll use validators to ensure that our email and password aren’t bank so we don’t make any necessary API calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AuthAPI _authAPI = AuthAPI();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this line of code we initialized an instance of our AuthAPI object and store it in a variable.&lt;/p&gt;

&lt;p&gt;Our API call is asynchronous because we have to wait for our data. We use the await statement to wait for our request. Asynchronous programming allows our code to execute non-linearly. We wrap our call in a try statement to catch any errors and we call our login function and pass it the objects stored in state with line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var req = await _authAPI.login(email,  password);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we receive our request we use its statusCode attribute to decide what to do next. If our code reads 200 we pass the request body attribute, which is of type JSON to the factory constructor of our Customer model. From there we print out our users new attributes, the request body and push to home. If we don’t receive the proper statusCode or we catch an exception we push to an error page.&lt;/p&gt;

&lt;p&gt;Thanks for reading! in the next post we’ll discuss how to use Cubits to store our customer in our app making it available to all of our widgets.&lt;/p&gt;

&lt;p&gt;Be sure to checkout Part II and III !&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>mvc</category>
      <category>api</category>
    </item>
    <item>
      <title>Rethinking Teamwork with Range</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 03 Dec 2021 20:04:53 +0000</pubDate>
      <link>https://dev.to/linearb/rethinking-teamwork-with-range-4on1</link>
      <guid>https://dev.to/linearb/rethinking-teamwork-with-range-4on1</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6hNM8sVOjSuew4iCn3AAQG"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;"&lt;em&gt;Where&lt;/em&gt; is the future of work" is almost as important a question as, "&lt;em&gt;What&lt;/em&gt; is the future of work?"&lt;/p&gt;

&lt;p&gt;That's why the minds behind &lt;a href="https://www.range.co/"&gt;Range&lt;/a&gt; are on a mission to keep teams connected, focused and productive no matter where they're working.&lt;/p&gt;

&lt;p&gt;Dan Pupius, CEO and co-founder of Range, joins us this week to discuss the need for better, more collaborative tools as work becomes increasingly team and project based. Dan believes software development was the vanguard to the 21st century work model: when a distinction between 'normal' work and hybrid work will no longer exist because all work will be hybrid work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why current management models are designed around factories&lt;/li&gt;
&lt;li&gt;What is &lt;a href="https://linearb.io/blog/asynchronous-development/"&gt;hybrid&lt;/a&gt; work and is it the future?&lt;/li&gt;
&lt;li&gt;Hybrid work best practices&lt;/li&gt;
&lt;li&gt;How a sense of belonging helps teams move faster&lt;/li&gt;
&lt;li&gt;The reasons work has become increasingly team-based&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfrPoujB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fly50ko28731rxpffgyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfrPoujB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fly50ko28731rxpffgyw.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>podcast</category>
      <category>management</category>
      <category>devops</category>
    </item>
    <item>
      <title>You don't need "if"</title>
      <author>LUKESHIRU</author>
      <pubDate>Fri, 03 Dec 2021 19:36:21 +0000</pubDate>
      <link>https://dev.to/vangware/you-dont-need-if-37f1</link>
      <guid>https://dev.to/vangware/you-dont-need-if-37f1</guid>
      <description>&lt;p&gt;It was the first day in my last year of tech high school. The new programming teacher arrived and stood silent for a second, and then he started the lesson:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This year we will create a state machine with persistence using C++. This state machine will be a light-bulb that can be turned on, or off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We all just look at each other thinking "ok, that will be easy"... and then he dropped the bomb:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There's a catch: You'll not be allowed to use &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the class was clearly confused. Flow control is one of the first things we all learn as programmers. The main objective of that teacher was to teach us that we need to stop thinking conditions as &lt;code&gt;if&lt;/code&gt;, repetitions as &lt;code&gt;for&lt;/code&gt;, and so on, and instead be more abstract with the logic on our code. In JavaScript we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;if/else&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;for/of/in&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;while&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;do/while&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;switch/case&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;try/catch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will go through that list and learn about the cleaner and safer alternatives we have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditions-ifswitch"&gt;
  &lt;/a&gt;
  Conditions (if/switch)
&lt;/h2&gt;

&lt;p&gt;Let's take this simple example as a starting point:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, administrator!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have a function &lt;code&gt;welcomeMessage&lt;/code&gt; which takes a user object and returns a message which depends on the user role. Now, because this if is quite simple, we might spot already that this has an issue, but JavaScript itself doesn't give us any kind of error. We don't have a default value for that message, so we need to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, administrator!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Or&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, administrator!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I said in the introduction, we don't need &lt;code&gt;if&lt;/code&gt; for this, we can use a ternary instead. A ternary has this shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;boolean ? valueForTrue : valueForFalse
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can change &lt;code&gt;welcomeMessage&lt;/code&gt; to be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, administrator!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Or&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;administrator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ternaries have 3 advantages over ifs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They force us to cover all the logic branches (we are forced to have "else in all our ifs").&lt;/li&gt;
&lt;li&gt;They reduce the amount of code drastically (we just use a &lt;code&gt;?&lt;/code&gt; and a &lt;code&gt;:&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;They force us to use conditional values instead of conditional blocks, which results in us moving logic from if blocks to their own functions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The main argument against ternaries is that they become hard to read if we have several levels of nested &lt;code&gt;if&lt;/code&gt;s (&lt;code&gt;if&lt;/code&gt;s inside an &lt;code&gt;if&lt;/code&gt;s), and that's true, but I see that as yet another advantage. If you need to nest logic, that means that you need to move that logic away. So, let's have yet another example for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;canMod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
        &lt;span class="nx"&gt;canMod&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ADMIN&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;administrator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moderator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That became hard to read quite easily, but that means that we need to move some logic away from &lt;code&gt;welcomeMessage&lt;/code&gt;, so we need to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;roleText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ADMIN&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;administrator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moderator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;canMod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;canMod&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;roleText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We covered &lt;code&gt;if&lt;/code&gt; already, but what about &lt;code&gt;switch&lt;/code&gt;? We can use a combination of plain objects and the &lt;code&gt;??&lt;/code&gt; operator, so we go from this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, administrator!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;MOD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, moderator!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome, user!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;roleToText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ADMIN&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;administrator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;MOD&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moderator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;roleToText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those not familiar with the &lt;code&gt;??&lt;/code&gt; operator, it works like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;possiblyNullishValue ?? defaultValue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;possiblyNullishValue&lt;/code&gt; can be either a value or "nullish" (&lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;). If it is nullish, then we use &lt;code&gt;defaultValue&lt;/code&gt;, if it isn't nullish then we use the value itself. Previous to this, we used to use &lt;code&gt;||&lt;/code&gt;, but that goes to the default for all falsy values (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0n&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;""&lt;/code&gt;), and we don't want that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-handling-trycatch"&gt;
  &lt;/a&gt;
  Error handling (try/catch).
&lt;/h2&gt;

&lt;p&gt;When we want to run something that might throw an error, we wrap it with a &lt;code&gt;try/catch&lt;/code&gt;, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;safeJSONParse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Leave `parsed` `undefined` if parsing fails&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;works&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeJSONParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeJSONParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;..&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we can get rid of that as well, using Promises. When you throw inside a promise, it goes to the &lt;code&gt;catch&lt;/code&gt; handler automatically, so we can replace the code above with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;safeJSONParse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="c1"&gt;// If it fails, just return undefined&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;safeJSONParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;works&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="cm"&gt;/* {} */&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;safeJSONParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;..&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fails&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="cm"&gt;/* undefined */&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can just use &lt;code&gt;async/await&lt;/code&gt; and...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;works&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;safeJSONParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;safeJSONParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;..&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#loops-forwhile"&gt;
  &lt;/a&gt;
  Loops (for/while)
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; statements are used to loop over a "list" of things, but nowadays we have way better ways of doing that with the methods that come with some of those lists (arrays) or other functions that help us keep the same type of looping for objects as well. So let's start with the easiest, which is arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gandalf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="nx"&gt;_000&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Just logging&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The age of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Calculating average&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The average age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Generating new array from previous&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersNextYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;usersNextYear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of using &lt;code&gt;for&lt;/code&gt; for this, you can just use the &lt;code&gt;Array.prototype.forEach&lt;/code&gt; for the logs, &lt;code&gt;Array.prototype.reduce&lt;/code&gt; for the average and &lt;code&gt;Array.prototype.map&lt;/code&gt; for creating a new array from the previous one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Just logging&lt;/span&gt;
&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The age of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Calculating average&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`The average age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Generating new array from previous&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersNextYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is an array method for pretty much everything you want to do with an array. Now, the "problems" start when we want to loop over objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Luke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Gandalf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="nx"&gt;_000&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Just logging&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The age of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Calculating average&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ageCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;ageCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The average age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;ageCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Generating new object from previous&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;agesNextYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;agesNextYear&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I put the word "problem" between quotes because it was a problem before, but now we have great functions in &lt;code&gt;Object&lt;/code&gt;: &lt;code&gt;Object.entries&lt;/code&gt; and &lt;code&gt;Object.fromEntries&lt;/code&gt;. &lt;code&gt;Object.entries&lt;/code&gt; turns an object into an array of tuples, with the format &lt;code&gt;[key, value]&lt;/code&gt;, and &lt;code&gt;Object.fromEntries&lt;/code&gt; takes an array of tuples with that format, and returns a new object. So we can use all the same methods we would use with arrays, but with objects, and then get an object back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Just logging&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The age of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Calculating average&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`The average age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Generating new object from previous&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;agesNextYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most common argument about this approaches for loops is not against &lt;code&gt;Array.prototype.map&lt;/code&gt; or &lt;code&gt;Array.prototype.forEach&lt;/code&gt; (because we all agree those are better), but mainly against &lt;code&gt;Array.prototype.reduce&lt;/code&gt;. I made a &lt;a href="https://dev.to/lukeshiru/reduce-or-for-of-1lg"&gt;post&lt;/a&gt; on the topic in the past, but the short version would be: Just use whatever makes the code more readable for you and your teammates. If the reduce approach ends up being too verbose, you can also just do a similar approach to the one with &lt;code&gt;for&lt;/code&gt;, but using &lt;code&gt;Array.prototype.forEach&lt;/code&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The average age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ageTotal&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;I want to emphasize something that usually gets lost in this series of articles I'm doing: The keyword in the title is &lt;strong&gt;NEED&lt;/strong&gt;. I'm not saying you shouldn't use &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt; and so on, I'm just saying that you might not &lt;strong&gt;need&lt;/strong&gt; them, that you can code without them, and in some scenarios is even simpler (the majority of scenarios from my point of view). One of the names I considered for this series was "re-evaluating our defaults", because what I'm looking for is not to change 100% of your coding style, but actually to make you wonder:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do I really &lt;strong&gt;NEED&lt;/strong&gt; to do this, or is there a simpler way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, as usual, my final question for you is: Do you think you &lt;strong&gt;need&lt;/strong&gt; &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and so on? Don't you think there might be a better way of solving that same issue with a simpler approach?&lt;/p&gt;

&lt;p&gt;Thanks for reading this and if you disagree with something said in this post, just leave a comment and we can discuss it further.&lt;/p&gt;

&lt;p&gt;See you in the next post of this series!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codequality</category>
      <category>functional</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 3rd December 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 03 Dec 2021 19:15:48 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-3rd-december-2021-12f5</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-3rd-december-2021-12f5</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-open-props"&gt;
  &lt;/a&gt;
  1. Open Props
&lt;/h3&gt;

&lt;p&gt;CSS custom properties to help accelerate adaptive and consistent design. Useful in any framework&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/argyleink"&gt;
        argyleink
      &lt;/a&gt; / &lt;a href="https://github.com/argyleink/open-props"&gt;
        open-props
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      CSS custom properties to help accelerate adaptive and consistent design.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1134620/141246730-7df4cf2a-6249-42ca-a01b-494c3ccddabe.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgczIvib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1134620/141246730-7df4cf2a-6249-42ca-a01b-494c3ccddabe.png" alt="Frame 2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Open Source CSS Variables&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gradients&lt;/code&gt; &lt;code&gt;animations&lt;/code&gt; &lt;code&gt;sizes&lt;/code&gt; &lt;code&gt;easings&lt;/code&gt; &lt;code&gt;colors&lt;/code&gt; &lt;code&gt;shadows&lt;/code&gt; &lt;code&gt;aspect-ratios&lt;/code&gt; &lt;code&gt;z-indexes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/argyleink/open-props/actions/workflows/tests.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gP2nbRWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/argyleink/open-props/actions/workflows/tests.yml/badge.svg%3Fbranch%3Dmain" alt="Tests"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3&gt;
Need help?   👉   &lt;a href="https://discord.gg/AqA4fU886r" rel="nofollow"&gt;Discord&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h4&gt;
CDN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unpkg.com/open-props" rel="nofollow"&gt;https://unpkg.com/open-props&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
CLI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm run gen:op&lt;/code&gt; - runs through &lt;code&gt;src/&lt;/code&gt; js files and creates the PostCSS files in &lt;code&gt;src/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run gen:nowhere&lt;/code&gt;  - creates a version of Open Props without the use of &lt;code&gt;:where()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run gen:prefixed&lt;/code&gt; - creates a version of Open Props with each prop prefixed with &lt;code&gt;op&lt;/code&gt;, like &lt;code&gt;--op-font-size-1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run bundle&lt;/code&gt; - creates all the various minified bundles of props&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run lib:js&lt;/code&gt; - builds the JS modules for NPM&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/argyleink/open-props"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#2-pollyjs"&gt;
  &lt;/a&gt;
  2. Polly.JS
&lt;/h3&gt;

&lt;p&gt;Record, Replay, and Stub HTTP Interactions. A standalone, framework-agnostic JavaScript library that enables recording, replaying, and stubbing of HTTP interactions.  &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Netflix"&gt;
        Netflix
      &lt;/a&gt; / &lt;a href="https://github.com/Netflix/pollyjs"&gt;
        pollyjs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Record, Replay, and Stub HTTP Interactions.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/265fae5d3f6c389cde92b01a2a25ffd3ca81e3830f5a52275119e878e7783aa3/68747470733a2f2f6e6574666c69782e6769746875622e696f2f706f6c6c796a732f6173736574732f696d616765732f776f72646d61726b2d6c6f676f2d616c742e706e67"&gt;&lt;img alt="Polly.JS" width="400px" src="https://camo.githubusercontent.com/265fae5d3f6c389cde92b01a2a25ffd3ca81e3830f5a52275119e878e7783aa3/68747470733a2f2f6e6574666c69782e6769746875622e696f2f706f6c6c796a732f6173736574732f696d616765732f776f72646d61726b2d6c6f676f2d616c742e706e67"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Record, Replay, and Stub HTTP Interactions&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://travis-ci.com/Netflix/pollyjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a806184d550045b6edce9ec7bb7bd9e2002b4800125ab24978346e39a4d99a4c/68747470733a2f2f7472617669732d63692e636f6d2f4e6574666c69782f706f6c6c796a732e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="http://www.apache.org/licenses/LICENSE-2.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/09f8ccb66f9ad5e1961259747f2ae4e2acfaa0e107d59d61f17ef9fa7e7a5d1e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4e6574666c69782f706f6c6c796a732e737667" alt="license"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polly.JS is a standalone, framework-agnostic JavaScript library that enables recording, replaying, and stubbing of HTTP interactions. By tapping into multiple request APIs across both Node &amp;amp; the browser, Polly.JS is able to mock requests and responses with little to no configuration while giving you the ability to take full control of each request with a simple, powerful, and intuitive API.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interested in contributing or just seeing Polly in action? Head over to &lt;a href="https://github.com/Netflix/pollyjsCONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; to learn how to spin up the project!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Why Polly?&lt;/h2&gt;
&lt;p&gt;Keeping fixtures and factories in parity with your APIs can be a time consuming process
Polly alleviates this process by recording and maintaining actual server responses while also staying flexible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Record your test suite's HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests.&lt;/li&gt;
&lt;li&gt;Use Polly's client-side server to modify or intercept requests and responses to simulate…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Netflix/pollyjs"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-awesome-advent-of-code"&gt;
  &lt;/a&gt;
  3. Awesome Advent of Code
&lt;/h3&gt;

&lt;p&gt;A collection of awesome resources related to the yearly Advent of Code challenge.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Bogdanp"&gt;
        Bogdanp
      &lt;/a&gt; / &lt;a href="https://github.com/Bogdanp/awesome-advent-of-code"&gt;
        awesome-advent-of-code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of awesome resources related to the yearly Advent of Code challenge.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Awesome Advent of Code&lt;/h1&gt;
&lt;p&gt;This is a collection of awesome resources related to the yearly
&lt;a href="https://adventofcode.com/" rel="nofollow"&gt;Advent of Code&lt;/a&gt; challenge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/" rel="nofollow"&gt;The Official AoC Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/adventofcode/" rel="nofollow"&gt;The AoC Subreddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#project-templates"&gt;Project Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#tools-and-utilities"&gt;Tools and Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#other-advent-calendars"&gt;Other Advent Calendars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code/2018.md"&gt;2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code/2019.md"&gt;2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code/2020.md"&gt;2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#2021"&gt;2021&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#solutions"&gt;Solutions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#ada"&gt;Ada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#assembly"&gt;Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#awk"&gt;AWK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#Bash"&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#c"&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#c-1"&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#c-2"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#clojure"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#common-lisp"&gt;Common Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#crystal"&gt;Crystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#d"&gt;D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#dart"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#elixir"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#elm"&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#erlang"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#excel"&gt;Excel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#f"&gt;F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#go"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#groovy"&gt;Groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#hamler"&gt;Hamler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#haskell"&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#haxe"&gt;Haxe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#idris"&gt;Idris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#J"&gt;J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#jq"&gt;jq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#julia"&gt;Julia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#kotlin"&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#ldpl"&gt;LDPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#lua"&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#matlab"&gt;MATLAB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#nim"&gt;Nim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#objc"&gt;Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#ocaml"&gt;OCaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#php"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#perl"&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#pony"&gt;Pony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#powershell"&gt;PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#prolog"&gt;Prolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#r"&gt;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#racket"&gt;Racket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#raku"&gt;Raku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#reasonml"&gt;ReasonML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#red"&gt;Red&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#rust"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#smalltalk"&gt;Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#scala"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#scheme"&gt;Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#solidity"&gt;Solidity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#spectx"&gt;SpectX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#sql"&gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#swift"&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#typescript"&gt;TypeScript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#deno"&gt;Deno&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#unison"&gt;Unison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#vbnet"&gt;VB.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#whitespace"&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#zig"&gt;Zig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Bogdanp/awesome-advent-of-code#live-streams"&gt;Live Streams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Project Templates&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Templates, cookiecutters and skeletons for quickly setting up projects
in your favourite language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ManasJayanth/reason-aoc-starter"&gt;Reason Starter kit for Advent of Code&lt;/a&gt; &lt;em&gt;(Reason and OCaml)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dave-burke/advent-of-code-java-starter"&gt;dave-burke/advent-of-code-java-starter&lt;/a&gt; &lt;em&gt;(Java)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gobanos/cargo-aoc"&gt;gobanos/cargo-aoc&lt;/a&gt; &lt;em&gt;(Rust)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nickyvanurk/advent-of-code-rust-template"&gt;nickyvanurk/advent-of-code-rust-template&lt;/a&gt; &lt;em&gt;(Rust)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hughjdavey/aoc-kotlin-starter"&gt;hughjdavey/aoc-kotlin-starter&lt;/a&gt; &lt;em&gt;(Kotlin)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kindermoumoute/adventofcode/tree/master/template"&gt;kindermoumoute/adventofcode&lt;/a&gt; &lt;em&gt;(Go)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/staylorwr/elixir_aoc"&gt;staylorwr/elixir_aoc&lt;/a&gt; &lt;em&gt;(Elixir)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mhanberg/advent-of-code-elixir-starter"&gt;mhanberg/advent-of-code-elixir-starter&lt;/a&gt; &lt;em&gt;(Elixir)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AlexeSimon/adventofcode"&gt;AlexeSimon/adventofcode&lt;/a&gt; &lt;em&gt;(Python)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/UncleCJ/advent-of-code"&gt;UncleCJ/advent-of-code&lt;/a&gt; &lt;em&gt;(Jupyter Python Notebooks)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindrekjr/AdventOfCodeBase"&gt;sindrekjr/AdventOfCodeBase&lt;/a&gt; &lt;em&gt;(C#)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Bogdanp/awesome-advent-of-code"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-posthog"&gt;
  &lt;/a&gt;
  4. PostHog
&lt;/h3&gt;

&lt;p&gt;PostHog is an open-source product analytics suite, built for developers. Automate the collection of every event on your website or app, with no need to send data to third-parties.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/PostHog"&gt;
        PostHog
      &lt;/a&gt; / &lt;a href="https://github.com/PostHog/posthog"&gt;
        posthog
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🦔 PostHog provides open-source product analytics that you can self-host. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65415371/124739522-d8393d00-df11-11eb-9741-820955887d21.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3zeLgJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65415371/124739522-d8393d00-df11-11eb-9741-820955887d21.png" width="1000px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://posthog.com/contributors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dd7848408adb5010ee29e995455255edb1ce558a93e6b886a644d3d4f4b8b514/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d3139302d6f72616e67652e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;p&gt;PostHog is an open-source product analytics suite, built for developers. Automate the collection of every event on your website or app, with no need to send data to third-parties.&lt;/p&gt;
&lt;p&gt;You can deploy on your own infrastructure, and PostHog plays nicely with data warehouses through plugins for import, transformation, and export.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65415371/124739629-f43cde80-df11-11eb-9033-c5d1d7194f03.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tP8FLHKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65415371/124739629-f43cde80-df11-11eb-9033-c5d1d7194f03.png" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Quick start&lt;/h2&gt;
&lt;p&gt;It's easy and free to get started.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://posthog.com/docs/self-host/overview#deploy" rel="nofollow"&gt;Deploy PostHog Self-Hosted&lt;/a&gt; in your existing infrastructure.&lt;/p&gt;
&lt;p&gt;... or use &lt;a href="https://app.posthog.com/signup" rel="nofollow"&gt;PostHog Cloud&lt;/a&gt; if you don't need to self-host.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65415371/124739888-2cdcb800-df12-11eb-8952-5be64764a7aa.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajWBwkTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65415371/124739888-2cdcb800-df12-11eb-8952-5be64764a7aa.png" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Event-based&lt;/strong&gt; analytics at a user level - capture your product's usage data to see which users are doing what in your application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Product data visualizations&lt;/strong&gt;: &lt;a href="https://posthog.com/docs/features/trends" rel="nofollow"&gt;graphs&lt;/a&gt;, &lt;a href="https://posthog.com/docs/features/funnels" rel="nofollow"&gt;funnels&lt;/a&gt;, &lt;a href="https://posthog.com/docs/features/cohorts" rel="nofollow"&gt;user cohorts&lt;/a&gt;, &lt;a href="https://posthog.com/docs/features/paths" rel="nofollow"&gt;user paths&lt;/a&gt;, &lt;a href="https://posthog.com/docs/features/retention" rel="nofollow"&gt;retention tables&lt;/a&gt;, and &lt;a href="https://posthog.com/docs/features/dashboards" rel="nofollow"&gt;dashboards&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Complete control&lt;/strong&gt; over your data - &lt;a href="https://posthog.com/docs/self-host/overview#deploy" rel="nofollow"&gt;host it yourself&lt;/a&gt; in any infrastructure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Session recording&lt;/strong&gt; to &lt;a href="https://posthog.com/docs/features/session-recording" rel="nofollow"&gt;watch videos&lt;/a&gt; of your users' behavior, with fine-grained privacy controls.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automatically capture&lt;/strong&gt; &lt;a href="https://posthog.com/docs/features/actions" rel="nofollow"&gt;clicks and pageviews&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/PostHog/posthog"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-markdownit"&gt;
  &lt;/a&gt;
  5. markdown-it
&lt;/h3&gt;

&lt;p&gt;Markdown parser, done right. 100% CommonMark support, extensions, syntax plugins &amp;amp; high speed&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/markdown-it"&gt;
        markdown-it
      &lt;/a&gt; / &lt;a href="https://github.com/markdown-it/markdown-it"&gt;
        markdown-it
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Markdown parser, done right. 100% CommonMark support, extensions, syntax plugins &amp;amp; high speed
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
markdown-it &lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/markdown-it/markdown-it/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKtX86pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markdown-it/markdown-it/workflows/CI/badge.svg" alt="CI"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.org/package/markdown-it" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/399fafd115abfdcd085097ca2974f95951909294d22f2babef8f4633e95cedf5/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d61726b646f776e2d69742e7376673f7374796c653d666c6174" alt="NPM version"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/markdown-it/markdown-it?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c90ad86d6172fb930cdbbf2ec719a8f96a6ff564d2218ab636c5b25aae920c94/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d61726b646f776e2d69742f6d61726b646f776e2d69742f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/markdown-it/markdown-it" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Gitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown parser done right. Fast and easy to extend.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://markdown-it.github.io" rel="nofollow"&gt;Live demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follows the &lt;strong&gt;&lt;a href="http://spec.commonmark.org/" rel="nofollow"&gt;CommonMark spec&lt;/a&gt;&lt;/strong&gt; + adds syntax extensions &amp;amp; sugar (URL autolinking, typographer).&lt;/li&gt;
&lt;li&gt;Configurable syntax! You can add new rules and even replace existing ones.&lt;/li&gt;
&lt;li&gt;High speed.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markdown-it/markdown-it/tree/master/docs/security.md"&gt;Safe&lt;/a&gt; by default.&lt;/li&gt;
&lt;li&gt;Community-written &lt;strong&gt;&lt;a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin" rel="nofollow"&gt;plugins&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://www.npmjs.org/browse/keyword/markdown-it" rel="nofollow"&gt;other packages&lt;/a&gt; on npm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Table of content&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#install"&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markdown-it/markdown-it#usage-examples"&gt;Usage examples&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#simple"&gt;Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#init-with-presets-and-options"&gt;Init with presets and options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#plugins-load"&gt;Plugins load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#syntax-highlighting"&gt;Syntax highlighting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#linkify"&gt;Linkify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#api"&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markdown-it/markdown-it#syntax-extensions"&gt;Syntax extensions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#manage-rules"&gt;Manage rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#benchmark"&gt;Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#markdown-it-for-enterprise"&gt;markdown-it for enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#authors"&gt;Authors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markdown-it/markdown-it#references--thanks"&gt;References / Thanks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;node.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install markdown-it --save&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;browser (CDN):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jsdelivr.com/#!markdown-it" title="jsDelivr CDN" rel="nofollow"&gt;jsDeliver CDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cdnjs.com/libraries/markdown-it" title="cdnjs.com" rel="nofollow"&gt;cdnjs.com CDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage examples&lt;/h2&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://markdown-it.github.io/markdown-it/" rel="nofollow"&gt;API documentation&lt;/a&gt;&lt;/strong&gt; - for more
info and examples.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markdown-it/markdown-it/tree/master/docs"&gt;Development info&lt;/a&gt; -
for plugins writers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Simple&lt;/h3&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// node.js, "classic" way:&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-v"&gt;MarkdownIt&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'markdown-it'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-s1"&gt;md&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;MarkdownIt&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;result&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;md&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;render&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'# markdown-it rulezz!'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// node.js, the same, but with sugar:&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/markdown-it/markdown-it"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-twojs"&gt;
  &lt;/a&gt;
  6. Two.js
&lt;/h3&gt;

&lt;p&gt;A two-dimensional drawing api meant for modern browsers. It is renderer agnostic enabling the same api to render in multiple contexts: webgl, canvas2d, and svg.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jonobr1"&gt;
        jonobr1
      &lt;/a&gt; / &lt;a href="https://github.com/jonobr1/two.js"&gt;
        two.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A renderer agnostic two-dimensional drawing api for the web.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Two.js&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/two.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/901fe719b63c7e568c2518ee24e63d6181e898a85bf1b41eddf83925c29e6866/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f74776f2e6a73" alt="NPM Package"&gt;&lt;/a&gt;
&lt;a href="https://bundlephobia.com/result?p=two.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/48224e3bee5107d52a17ffdb91e29d783cffc5bb5e4beefae2a66746f32ef762/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f74776f2e6a73" alt="Build Size"&gt;&lt;/a&gt;
&lt;a href="https://www.npmtrends.com/two.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e4066fcba2e97ee3b781df36803fba4e8d787586ff2f5a1ff64b066671fe0555/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74776f2e6a73" alt="NPM Downloads"&gt;&lt;/a&gt;
&lt;a href="https://lgtm.com/projects/g/jonobr1/two.js/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4eeb0020d056b713a911c3a1b9c3464930cc6fbe18cc7d3e25b8e90db7748ef8/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f6a6f6e6f6272312f74776f2e6a73" alt="Language Grade"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A two-dimensional drawing api meant for modern browsers. It is renderer agnostic enabling the same api to render in multiple contexts: webgl, canvas2d, and svg.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://two.js.org" rel="nofollow"&gt;Home&lt;/a&gt; • &lt;a href="https://github.com/jonobr1/two.js/releases"&gt;Releases&lt;/a&gt; • &lt;a href="http://two.js.org/#examples" rel="nofollow"&gt;Examples&lt;/a&gt; • &lt;a href="http://two.js.org/docs/" rel="nofollow"&gt;Documentation&lt;/a&gt; • &lt;a href="https://github.com/jonobr1/two.js/tree/dev/wiki/change-log"&gt;Change Log&lt;/a&gt; • &lt;a href="https://github.com/jonobr1/two.js/issues/new/choose"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Download the latest &lt;a href="https://raw.github.com/jonobr1/two.js/dev/build/two.min.js"&gt;minified library&lt;/a&gt; and include it in your html.&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;js/two.min.js&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;It can also be installed via &lt;a href="https://www.npmjs.com/package/two.js" rel="nofollow"&gt;npm&lt;/a&gt;, Node Package Manager:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;npm&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt; &lt;span class="pl-c1"&gt;--&lt;/span&gt;&lt;span class="pl-s1"&gt;save&lt;/span&gt; &lt;span class="pl-s1"&gt;two&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;js&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Alternatively see &lt;a href="https://github.com/jonobr1/two.js#custom-build"&gt;how to build the library yourself&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is boilerplate html in order to draw a spinning rectangle in two.js:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;&amp;lt;!doctype html&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;html&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;meta&lt;/span&gt; &lt;span class="pl-c1"&gt;charset&lt;/span&gt;="&lt;span class="pl-s"&gt;utf-8&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;js/two.min.js&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;body&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;two&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;Two&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
        &lt;span class="pl-c1"&gt;fullscreen&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
        &lt;span class="pl-c1"&gt;autostart&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;
      &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jonobr1/two.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-awesome-zsh-plugins"&gt;
  &lt;/a&gt;
  7. Awesome ZSH plugins
&lt;/h3&gt;

&lt;p&gt;A collection of ZSH frameworks, plugins, themes and tutorials.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/unixorn"&gt;
        unixorn
      &lt;/a&gt; / &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;
        awesome-zsh-plugins
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of ZSH frameworks, plugins, themes and tutorials.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
awesome-zsh-plugins&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Status&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://opensource.org/licenses/BSD-3-Clause" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5f38dbcdd0eda2680d3b67b921fa302618eccc52775ea3d275fd4cc8b07fc8b7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732e737667" alt="License"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/unixorn/awesome-zsh-plugins/actions/workflows/awesomebot.yml/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wgbTkwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/unixorn/awesome-zsh-plugins/actions/workflows/awesomebot.yml/badge.svg" alt="Awesomebot"&gt;&lt;/a&gt;
&lt;a href="https://github.com/unixorn/awesome-zsh-plugins/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/aaf6ee1f3ab4e8009dcb2265f7fcb516ba0ccf72e0cba51e7f989ec6bd273efe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732e737667" alt="GitHub stars"&gt;&lt;/a&gt;
&lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;&lt;img src="https://camo.githubusercontent.com/3ccbfcc632d4fe5344ce28bc9b0d40de63b2713a007b51a7dd1b7da06b77b614/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732f6d61696e2e737667" alt="GitHub last commit (branch)"&gt;&lt;/a&gt;
&lt;a href="https://www.trackawesomelist.com/unixorn/awesome-zsh-plugins/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a3a46cf6e9b86345756f800e47a3d24ba217ba4004dd2164a6d4c5168e0c00c9/68747470733a2f2f7777772e747261636b617765736f6d656c6973742e636f6d2f62616467652e737667" alt="Track Awesome List"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A collection of ZSH frameworks, plugins, tutorials &amp;amp; themes inspired by the various awesome list collections out there.&lt;/p&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#frameworks"&gt;Frameworks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#ansible-role-zsh"&gt;ansible-role-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#ant-zsh"&gt;ant-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#antibody"&gt;antibody&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#antigen-hs"&gt;antigen-hs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#antigen"&gt;antigen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#ax-zsh"&gt;ax-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#dotzsh"&gt;dotzsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#fresh"&gt;fresh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#miniplug"&gt;miniplug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#mzpm"&gt;mzpm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#pms"&gt;PMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#prezto"&gt;prezto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#pumice"&gt;pumice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#pz"&gt;pz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#sheldon"&gt;sheldon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#toasty"&gt;Toasty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#tzpm"&gt;tzpm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#uz"&gt;uz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#yazt"&gt;yazt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zapack"&gt;zapack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zcomet"&gt;zcomet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zeesh"&gt;zeesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zgem"&gt;zgem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zgen"&gt;zgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zgenom"&gt;zgenom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zilsh"&gt;zilsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zim"&gt;zim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zinit"&gt;Zinit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zit"&gt;zit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#znap"&gt;znap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zoppo"&gt;zoppo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zpacker"&gt;zpacker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zpico"&gt;zpico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zplug"&gt;zplug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zpm"&gt;zpm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zr"&gt;zr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zshing"&gt;zshing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#ztanesh"&gt;ztanesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#ztheme"&gt;ztheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#ztupide"&gt;ztupide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zulu"&gt;zulu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#setups"&gt;Setups&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zgenom-1"&gt;zgenom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zinit"&gt;zinit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#tutorials"&gt;Tutorials&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#generic-zsh"&gt;Generic ZSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#antigen"&gt;Antigen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#oh-my-zsh"&gt;Oh-My-Zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#prezto"&gt;Prezto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zgen"&gt;Zgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zinit-n%C3%A9-zplugin"&gt;Zinit (né zplugin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zsh-on-windows"&gt;ZSH on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#completions"&gt;Completions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#themes"&gt;Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#fonts"&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#installation"&gt;Installation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#antigen-1"&gt;Antigen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#dotzsh-1"&gt;dotzsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#oh-my-zsh-1"&gt;Oh-My-Zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#prezto-1"&gt;Prezto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zgen-1"&gt;Zgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zgenom"&gt;Zgenom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zplug-1"&gt;zplug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zpm-1"&gt;zpm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#writing-new-plugins"&gt;Writing New Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#other-resources"&gt;Other Resources&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#zsh-tools"&gt;ZSH Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#other-useful-lists"&gt;Other Useful Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unixorn/awesome-zsh-plugins#other-references"&gt;Other References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Please read the &lt;a href="https://github.com/unixorn/awesome-zsh-pluginsContributing.md"&gt;Contributing Guidelines&lt;/a&gt; before contributing.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Frameworks&lt;/h2&gt;
&lt;p&gt;These frameworks make customizing your ZSH setup easier.&lt;/p&gt;
&lt;p&gt;You can find some interesting performance timing comparisons of various frameworks in the following locations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rossmacarthur/zsh-plugin-manager-benchmark"&gt;rossmacarthur/zsh-plugin-manager-benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/z-shell/pm-perf-test"&gt;pm-perf-test&lt;/a&gt; - Tooling for running performance tests on multiple ZSH frameworks.&lt;/li&gt;
&lt;/ul&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/unixorn/awesome-zsh-plugins"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-flags"&gt;
  &lt;/a&gt;
  8. Flags
&lt;/h3&gt;

&lt;p&gt;Add Feature Flags to your Next.js application with a single React Hook. This package integrates your Next.js application with HappyKit Flags.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/happykit"&gt;
        happykit
      &lt;/a&gt; / &lt;a href="https://github.com/happykit/flags"&gt;
        flags
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ⛳️ Feature Flags for Next.js
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;a id="user-content-nav" href="https://github.com/happykit/flags"&gt;
  &lt;img src="https://camo.githubusercontent.com/8005774e8fc74a06b908a871b835d89774029dc063de1ac2f09310d77413eb46/68747470733a2f2f692e696d6775722e636f6d2f4d533247746b6a2e706e67" width="100%"&gt;
&lt;/a&gt;
&lt;div&gt;
  &lt;a href="https://github.com/happykit/flags/tree/master/package"&gt;Documentation&lt;/a&gt;
  &lt;span&gt; • &lt;/span&gt;
  &lt;a href="https://flags.happykit.dev/" rel="nofollow"&gt;Examples&lt;/a&gt;
  &lt;span&gt; • &lt;/span&gt;
  &lt;a href="https://medium.com/frontend-digest/using-feature-flags-in-next-js-c5c8d0795a2?source=friends_link&amp;amp;sk=d846a29f376acf9cfa41e926883923ab" rel="nofollow"&gt;Full Tutorial&lt;/a&gt;
  &lt;span&gt; • &lt;/span&gt;
  &lt;a href="https://happykit.dev/solutions/flags" rel="nofollow"&gt;happykit.dev&lt;/a&gt;
  &lt;span&gt; • &lt;/span&gt;
  &lt;a href="https://twitter.**com**/happykitdev" rel="nofollow"&gt;@happykitdev&lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Add Feature Flags to your Next.js application with a single React Hook. This package integrates your Next.js application with HappyKit Flags. Create a free &lt;a href="https://happykit.dev/signup" rel="nofollow"&gt;happykit.dev&lt;/a&gt; account to get started.&lt;/p&gt;
&lt;h2&gt;
Key Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;written for Next.js&lt;/li&gt;
&lt;li&gt;integrate using a simple &lt;code&gt;useFlags()&lt;/code&gt; hook&lt;/li&gt;
&lt;li&gt;only 5 kB in size&lt;/li&gt;
&lt;li&gt;extremely fast flag responses (~50ms)&lt;/li&gt;
&lt;li&gt;supports &lt;em&gt;user targeting&lt;/em&gt;, &lt;em&gt;custom rules&lt;/em&gt; and &lt;em&gt;rollouts&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;support &lt;em&gt;server-side rendering&lt;/em&gt; and &lt;em&gt;static site generation&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

  &lt;b&gt;Want to see a demo?&lt;/b&gt;
  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1765075/94278500-90819000-ff53-11ea-912a-a59cfb491406.gif"&gt;&lt;img alt="HappyKit Flags Demo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tGxtr0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/1765075/94278500-90819000-ff53-11ea-912a-a59cfb491406.gif"&gt;&lt;/a&gt;
  &lt;br&gt;&lt;br&gt;

&lt;br&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;See the &lt;a href="https://github.com/happykit/flags/tree/master/package"&gt;full documentation&lt;/a&gt; for setup instructions and usage guides.&lt;/p&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;This is roughly what the usage of feature flags looks like once you're up and running.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// pages/index.js&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;useFlags&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"@happykit/flags/client"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;export&lt;/span&gt; &lt;span class="pl-k"&gt;default&lt;/span&gt; &lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;IndexPage&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;props&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; flags &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useFlags&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s1"&gt;flags&lt;/span&gt;&lt;span class="pl-kos"&gt;?.&lt;/span&gt;&lt;span class="pl-c1"&gt;xzibit&lt;/span&gt; ? &lt;span class="pl-s"&gt;'Yo dawg'&lt;/span&gt; : &lt;span class="pl-s"&gt;'Hello'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The self documenting examples at…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/happykit/flags"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-every-programmer-should-know"&gt;
  &lt;/a&gt;
  9. Every Programmer Should Know
&lt;/h3&gt;

&lt;p&gt;A collection of (mostly) technical things every software developer should know about&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mtdvio"&gt;
        mtdvio
      &lt;/a&gt; / &lt;a href="https://github.com/mtdvio/every-programmer-should-know"&gt;
        every-programmer-should-know
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of (mostly) technical things every software developer should know about
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://metadevelopment.io/" rel="nofollow"&gt;Join our community&lt;/a&gt;&lt;/em&gt; for professional Software Developers and get more control over your life and career!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
Every Programmer Should Know 🤔
&lt;/h1&gt;
&lt;p&gt;A collection of (mostly) technical things every software developer should know.&lt;/p&gt;
&lt;p&gt;☝️ &lt;em&gt;These are resources I can recommend to every programmer regardless of their skill level or tech stack&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Highly opinionated 💣. Not backed by science
Comes in no particular order ♻️&lt;/p&gt;
&lt;p&gt;U like it? ⭐ it and &lt;a href="https://twitter.com/mr_mig_by/status/900735231552098306" rel="nofollow"&gt;share&lt;/a&gt; with a friendly developer
U don't like it? &lt;a href="https://twitter.com/RespectfulMemes/status/900147758845308930" rel="nofollow"&gt;Watch the doggo&lt;/a&gt; 🐶&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.S. You &lt;a href="https://xkcd.com/1050/" rel="nofollow"&gt;don't need to know&lt;/a&gt; all of that by heart to be a programmer
But knowing the stuff will help you become better! 💪&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.P.S. &lt;a href="https://github.com/mtdvio/every-programmer-should-knowCONTRIBUTING.md"&gt;Contributions&lt;/a&gt; are welcome!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
Introduction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
🎥 &lt;a href="https://www.youtube.com/watch?v=SzJ46YA_RaA" rel="nofollow"&gt;Map of Computer Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🎥 &lt;a href="http://carlcheo.com/compsci" rel="nofollow"&gt;40 Key Computer Science Concepts Explained In Layman’s Terms&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Falsehoods&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kdeldycke/awesome-falsehood"&gt;Awesome Falsehoods&lt;/a&gt;
💊 Curated list of falsehoods programmers believe in
Check for things you do not know about Strings, Addresses, Names,…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mtdvio/every-programmer-should-know"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-the-art-of-command-line"&gt;
  &lt;/a&gt;
  10. The Art of Command Line
&lt;/h3&gt;

&lt;p&gt;Master the command line, in one page&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jlevy"&gt;
        jlevy
      &lt;/a&gt; / &lt;a href="https://github.com/jlevy/the-art-of-command-line"&gt;
        the-art-of-command-line
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Master the command line, in one page
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;🌍
&lt;em&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-cs.md"&gt;Čeština&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-de.md"&gt;Deutsch&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-el.md"&gt;Ελληνικά&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME.md"&gt;English&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-es.md"&gt;Español&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-fr.md"&gt;Français&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-id.md"&gt;Indonesia&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-it.md"&gt;Italiano&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-ja.md"&gt;日本語&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-ko.md"&gt;한국어&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-pl.md"&gt;polski&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-pt.md"&gt;Português&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-ro.md"&gt;Română&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-ru.md"&gt;Русский&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-sl.md"&gt;Slovenščina&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-uk.md"&gt;Українська&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-zh.md"&gt;简体中文&lt;/a&gt; ∙ &lt;a href="https://github.com/jlevy/the-art-of-command-lineREADME-zh-Hant.md"&gt;繁體中文&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
The Art of Command Line&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –&lt;a href="https://github.com/jlevy"&gt;jlevy&lt;/a&gt;, &lt;a href="https://www.holloway.com" rel="nofollow"&gt;Holloway&lt;/a&gt;. Thank you!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#meta"&gt;Meta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#basics"&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#everyday-use"&gt;Everyday use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#processing-files-and-data"&gt;Processing files and data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#system-debugging"&gt;System debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#one-liners"&gt;One-liners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#obscure-but-useful"&gt;Obscure but useful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#macos-only"&gt;macOS only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#windows-only"&gt;Windows only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#more-resources"&gt;More resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line#disclaimer"&gt;Disclaimer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/jlevy/the-art-of-command-linecowsay.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLg2OPD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jlevy/the-art-of-command-linecowsay.png" alt="curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '\w+' | tr -d '`' | cowsay -W50"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jlevy/the-art-of-command-line"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +1,673 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +1,672 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mtdvio/every-programmer-should-know"&gt;Every Programmer Should Know&lt;/a&gt; +1,644 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/remix-run/remix"&gt;Remix&lt;/a&gt; +1,586 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jesseduffield/lazygit"&gt;Lazy Git&lt;/a&gt; +1,460 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/eBay/nice-modal-react"&gt;Nice Modal React&lt;/a&gt; +42%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/remix-run/remix"&gt;Remix&lt;/a&gt; +27%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; +25%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NetanelBasal/helpful-decorators"&gt;Helpful Decorators&lt;/a&gt; +17%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/figment-networks/learn-web3-dapp"&gt;Learn Web3 dapp&lt;/a&gt; +16%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +3,911 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for beginner&lt;/a&gt; +3,683 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +3,413 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; +3,202 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +2,996 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/teafuljs/teaful"&gt;Fragstore&lt;/a&gt; +268%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antfu/unocss"&gt;unocss&lt;/a&gt; +93%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/estruyf/vscode-front-matter"&gt;vsCode Frontmatter&lt;/a&gt; +61%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eBay/nice-modal-react"&gt;Nice Modal React&lt;/a&gt; +27%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;NextJS Boilerplate&lt;/a&gt; +48%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Year in review: Academic Research with the Twitter API v2</title>
      <author>Suhem Parack</author>
      <pubDate>Fri, 03 Dec 2021 18:58:39 +0000</pubDate>
      <link>https://dev.to/suhemparack/year-in-review-academic-research-with-the-twitter-api-v2-52mm</link>
      <guid>https://dev.to/suhemparack/year-in-review-academic-research-with-the-twitter-api-v2-52mm</guid>
      <description>&lt;p&gt;In 2021, we launched product improvements and various community initiatives to help the academic research community succeed in their research studies with Twitter data. In this post, I present a recap of all the API launches and programs - from Twitter as well as the academic research community - that has made it easier for researchers to do research with Twitter data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improvements-for-academics-amp-students-with-the-twitter-api-v2"&gt;
  &lt;/a&gt;
  Improvements for academics &amp;amp; students with the Twitter API v2
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#academic-research-product-track"&gt;
  &lt;/a&gt;
  Academic Research Product Track
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twittercommunity.com/t/introducing-the-new-academic-research-product-track/148632"&gt;Launched in January 2021&lt;/a&gt;, the &lt;a href="https://twitter.com/TwitterDev/status/1376612438313852930"&gt;academic research product track&lt;/a&gt; is one of the biggest updates to the Twitter API v2 for the academic research community. It provides qualified academic researchers free access to the full-archive of public Tweets (previously, academics had to use the paid premium API to get Tweets older than 7 days). In addition to access to the full-archive search functionality, academics get 10 million Tweets per month. This is higher than the other access levels - the essential access provides 500K Tweets per month and the Elevated access provides 2 Million Tweets per month. The academic research track also lets academics further refine their search queries by supporting search operators for geo-filtering.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_cXa6g0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9p4spaoinzdrh2deqjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cXa6g0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9p4spaoinzdrh2deqjw.png" alt="Academic Product Track" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tweet-counts-endpoints"&gt;
  &lt;/a&gt;
  Tweet counts endpoints
&lt;/h3&gt;

&lt;p&gt;In June 2021, we &lt;a href="https://twitter.com/suhemparack/status/1408139121118175232"&gt;launched the Tweet counts endpoints&lt;/a&gt; that give the volume of Tweets over a period of time for any search query. The Full-archive Tweet counts endpoint is currently available only for academics, so you can get the Tweet counts from the entire archive of public Tweets. This is particularly helpful for visualization use-cases and to identify trends and pattterns for topics over a period of time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_DKsy1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um9ip9r9z0lbrhdwgf9k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_DKsy1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um9ip9r9z0lbrhdwgf9k.gif" alt="Tweet Counts" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#batch-compliance-endpoints"&gt;
  &lt;/a&gt;
  Batch compliance endpoints
&lt;/h3&gt;

&lt;p&gt;In August 2021, we launched the &lt;a href="https://twitter.com/TwitterDev/status/1430587523919536129"&gt;batch compliance endpoints&lt;/a&gt; that let developers and researchers upload large number of Tweet or User IDs and get the current status of those Tweets or Users (whether they are deleted, suspended etc). This lets developers and researchers keep their datasets compliant with &lt;a href="https://developer.twitter.com/en/developer-terms/policy"&gt;Twitter's developer policy&lt;/a&gt;. In the past, developers had to use the Tweet lookup endpoints to do this, which was quite slow and supported maximum 100 IDs per request, so this new solution is very helpful for researchers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#essential-access"&gt;
  &lt;/a&gt;
  Essential access
&lt;/h3&gt;

&lt;p&gt;In November 2021, the &lt;a href="https://twittercommunity.com/t/ushering-in-a-new-era-for-the-twitter-developer-platform-with-the-twitter-api-v2/162087"&gt;essential access was added to the Twitter API v2&lt;/a&gt;. With essential access, anyone can get access to basic functionality in the Twitter API just by signing up - without applying for a developer use-case review. This gives you instant access to the Twitter API v2 and is thus a good option for teaching use-cases. Professors can just ask their students to sign up for essential access ahead of class, if they want to use Twitter data in their classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V3kXK0d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqq19y4xuz7pnyk4kcw0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V3kXK0d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqq19y4xuz7pnyk4kcw0.jpg" alt="Essential Access" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#livestreams-and-virtual-events-for-academic-research-with-the-twitter-api"&gt;
  &lt;/a&gt;
  Livestreams and virtual events for academic research with the Twitter API
&lt;/h2&gt;

&lt;p&gt;We hosted livestreams and virtual events with various guests from the academic community to showcase how researchers can use the Twitter API v2 to get data for their research studies. Below is a list of livestreams and virtual events we did in 2021:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;February 25th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1364275610764201984"&gt;Introduction to the academic research product track&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;March 18th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1371363033352638467"&gt;Deep-dive into the full-archive search with the Twitter API v2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;April 22nd 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1382745061910138880"&gt;Getting started with the Twitter API v2 in Python using Twarc2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;May 20th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1392887366507970561"&gt;Getting started with the Twitter API v2 in R using academictwitteR&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;June 23rd 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1405586027088007170"&gt;Exploratory data analysis in R with the Twitter API v2 with Dr. Maria Rodriguez&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;July 9th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1411028983366361088"&gt;Building visualizations with the Tweet counts endpoints in the Twitter API v2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;August 7th 2021 - &lt;a href="https://twitter.com/getpostman/status/1419326709837533186"&gt;Postman Student Summit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3AnFGkP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3bv5y9uyfmo3dputs3e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3AnFGkP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3bv5y9uyfmo3dputs3e.jpeg" alt="Postman Student Summit" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;August 26th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1427691817600884737"&gt;Back to school event - how PhD &amp;amp; Postdocs use the Twitter API in their research studies&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;September 3rd 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1432380245806497792"&gt;Getting started with the Twitter API v2 in Python using OSoMeTweet package&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;September 30th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1441432845902221335"&gt;Academic Research with the Twitter API v2 with Dr. Ernesto Calvo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;October 5th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1445436032485244929"&gt;Academic Research with the Twitter API v2 with CSMaP NYU&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Octover 29th 2021 - &lt;a href="https://twitter.com/TwitterDev/status/1451609611455242241"&gt;Academic Research with the Twitter API v2 with Dr. Deen Freelon&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;November 12th 2021 - &lt;a href="https://twitter.com/suhemparack/status/1458857902559547393"&gt;Twitter API in the classroom&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#office-hours"&gt;
  &lt;/a&gt;
  Office hours
&lt;/h2&gt;

&lt;p&gt;In March 2021, we &lt;a href="https://twitter.com/TwitterDev/status/1372627771717869568"&gt;announced monthly office hours&lt;/a&gt; for academics that need help with their usage of the Twitter API v2 and the academic research product track. During these office hours, researchers can get 1:1 technical help and get their questions about the Twitter API v2 answered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-the-twitter-api-v2-course"&gt;
  &lt;/a&gt;
  Getting started with the Twitter API v2 course
&lt;/h2&gt;

&lt;p&gt;In June, we &lt;a href="https://twitter.com/TwitterDev/status/1409931481552543749"&gt;launched a comprehensive course&lt;/a&gt; on getting started with the Twitter API v2 for academic research. &lt;a href="https://github.com/twitterdev/getting-started-with-the-twitter-api-v2-for-academic-research"&gt;This course&lt;/a&gt; is available for free and contains content, cheatsheets and code samples in Python and R to help academics learn how to get the Twitter data for research studies using the Twitter API. Since its launch, this course has been adopted as a prerequisite model by various professors who teach courses on computational social sciences, text mining etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#academic-advisory-board"&gt;
  &lt;/a&gt;
  Academic advisory board
&lt;/h2&gt;

&lt;p&gt;In August 2021, we announced our &lt;a href="https://twitter.com/TwitterDev/status/1431360374155010049"&gt;inaugural Academic Research Advisory Board&lt;/a&gt; aimed at creating regular and frequent dialogue between members of the academic community and our Developer Platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-your-research-with-twitter"&gt;
  &lt;/a&gt;
  Sharing your research with Twitter
&lt;/h2&gt;

&lt;p&gt;In August 2021, we also provided researchers with a way to &lt;a href="https://twitter.com/TwitterDev/status/1422952458393776131"&gt;share their research&lt;/a&gt; (done with the Twitter API) with us so that we can better learn how researchers use the Twitter API and how we can better serve their needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sample-apps-videos-blogs-and-code-samples"&gt;
  &lt;/a&gt;
  Sample apps, videos, blogs and code samples
&lt;/h2&gt;

&lt;p&gt;In 2021, we shared various code samples, videos, blogs and sample apps for researchers to learn how to work with the Twitter API v2. Below is a list of these.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tutorials-and-guides"&gt;
  &lt;/a&gt;
  Tutorials and guides
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/twitterdev/getting-historical-tweets-using-the-full-archive-search-endpoint-1agp"&gt;Getting historical Tweets using the full-archive search endpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/tutorials/building-high-quality-filters"&gt;Building high-quality filters for getting Twitter data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/twitterdev/building-visualizations-with-tweet-counts-from-the-twitter-api-v2-in-python-1nb0"&gt;Building visualizations with Tweet counts from the Twitter API v2 in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/twitterdev/translating-tweets-from-the-twitter-api-v2-using-aws-amazon-translate-in-python-1nj0"&gt;Translating Tweets from the Twitter API v2 using AWS Amazon Translate in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/twitterdev/a-comprehensive-guide-for-using-the-twitter-api-v2-using-tweepy-in-python-15d9"&gt;A comprehensive guide for using the Twitter API v2 with Tweepy in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TwitterDev/status/1366832168333234177"&gt;Understanding the Tweet Payload in the Twitter API v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TwitterDev/status/1376612438313852930"&gt;Introduction to the academic research product track&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TwitterDev/status/1409931481552543749"&gt;Introducing the getting started with Twitter API v2 for academic research course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sample-apps"&gt;
  &lt;/a&gt;
  Sample apps
&lt;/h3&gt;

&lt;p&gt;Below are some some sample apps, for educational purposes that we built in 2021 to showcase different use-cases pertaining to research with the Twitter API v2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://v2-timeline-explorer.glitch.me/"&gt;Twitter Timeline Explorer&lt;/a&gt; - a sample app that shows the common topics that an account Tweets about&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwDD3luc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujmnrvq5gno6ng5v3cww.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwDD3luc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujmnrvq5gno6ng5v3cww.gif" alt="Timeline Explorer" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://whats-in-this-image.glitch.me/"&gt;What's in this image&lt;/a&gt; - a demo app to show how you can use AWS Rekognition to extract text from images&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gR7Xxut_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbucdpceh8lsne06n4z0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gR7Xxut_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbucdpceh8lsne06n4z0.gif" alt="Image analyzer" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tweet-tone-analyzer.glitch.me/"&gt;Tweet tone analyzer&lt;/a&gt; - a sample app that uses IBM Tone Analyzer and Perpective APIs toxicity measurement functionality&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKE8TZnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yglx82y14pojdby60i9z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKE8TZnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yglx82y14pojdby60i9z.gif" alt="Tone Analyzer" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tweet-entity-extractor.glitch.me/"&gt;Tweet entity extractor&lt;/a&gt; - a sample app that shows how to use the Twitter API v2's Tweet annotations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dvQ5Relc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sluss1msozusua91l7s5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvQ5Relc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sluss1msozusua91l7s5.gif" alt="Entity Extractor" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#from-the-community"&gt;
  &lt;/a&gt;
  From the community
&lt;/h2&gt;

&lt;p&gt;In 2021, we saw some amazing updates and resources from the academic community that make it easy for researchers to work with the Twitter API for their research studies. Below is a list of some of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Document The Now project launched the &lt;a href="https://twitter.com/documentnow/status/1380119640567844865"&gt;twarc2 library&lt;/a&gt; in Python (with command line option) that supports the Twitter API v2 and the academic research product track&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/cbarrie/status/1387744422729748486"&gt;academictwitteR&lt;/a&gt; - a new package in R from Chris Barrie and Justin Ho was launched that supports the Twitter API v2 and the academic product track in R.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/ryanjgallag/status/1442478038806003717"&gt;focalevents&lt;/a&gt; - open source codebase from Ryan Gallagher with tools to work with Twitter data for research&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/osome-iu/osometweet"&gt;OSoMeTweets&lt;/a&gt; - a package in Python to work with the Twitter API&lt;/li&gt;
&lt;li&gt;A course on &lt;a href="https://twitter.com/mellymeldubs/status/1346050153237663744"&gt;cultural analytics in Python&lt;/a&gt; from Melanie Walsh that uses the Twitter API v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a great year for academics that work with the Twitter API for research. If you want to share with the community how you work with the Twitter API for academic research use-cases or have any feedback on our community programs, please feel free to reach out to me &lt;a href="https://twitter.com/suhemparack"&gt;@suhemparack&lt;/a&gt;&lt;/p&gt;

</description>
      <category>api</category>
      <category>twitter</category>
    </item>
    <item>
      <title>Last Chance to Join the 2021 GitHub Actions Hackathon on DEV!</title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 03 Dec 2021 18:43:00 +0000</pubDate>
      <link>https://dev.to/devteam/last-chance-to-join-the-2021-github-actions-hackathon-on-dev-1aje</link>
      <guid>https://dev.to/devteam/last-chance-to-join-the-2021-github-actions-hackathon-on-dev-1aje</guid>
      <description>&lt;h4&gt;
  &lt;a href="#this-is-your-final-reminder-that-the-2021-github-actions-hackathon-on-dev-closes-on-wednesday-december-8th-2021-1159-pm-pt-8-am-utc-the-following-day"&gt;
  &lt;/a&gt;
  &lt;strong&gt;This is your final reminder that the 2021 GitHub Actions Hackathon on DEV closes on Wednesday, December 8th, 2021 @ 11:59 PM PT&lt;/strong&gt; &lt;em&gt;(8 AM UTC the following day)&lt;/em&gt;
&lt;/h4&gt;




&lt;p&gt;The 2021 GitHub Actions Hackathon is nearing an end and we've already seen so many incredible submissions from the community (seriously — go check them out &lt;a href="https://dev.to/t/actionshackathon21"&gt;here&lt;/a&gt;). With that said, we know that early submissions aren't everyone's style and some of you are more of the last minute types 😉 So consider this your official nudge to get that GitHub Actions Hackathon project in while you can! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a reminder, all participants with a valid submission will receive a limited edition profile badge and a sticker pack. 10 runners up will win all of that plus $250 USD cash (or the equivalent value in your local currency) and a $150 USD gift code to the &lt;a href="https://shop.dev.to/"&gt;DEV shop&lt;/a&gt;. Five lucky grand prize winners will receive a sticker pack, a limited-edition profile badge, $1,500 USD in cash, and $300 USD at the DEV shop! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;&amp;gt;&amp;gt; Click here to find out how to participate&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Want to share an update on your project or connect with other participants? Check out the &lt;a href="https://dev.to/devteam/share-your-github-actions-hackathon-2021-updates-57k"&gt;community update thread&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Need help with your submission? Have a question about the hackathon rules or GitHub Actions? Head over to the &lt;a href="https://dev.to/devteam/github-actions-hackathon-2021-help-thread-1lk0"&gt;help thread&lt;/a&gt; to connect with the DEV and GitHub teams directly. &lt;/p&gt;

&lt;p&gt;Good luck, all our participants! We can't wait to announce the winners later this month 🎉 &lt;/p&gt;




&lt;p&gt;&lt;em&gt;Click &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;here&lt;/a&gt; to read the hackathon rules and get started.&lt;/em&gt; ✨ &lt;/p&gt;

</description>
      <category>meta</category>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Automating Terraform With Github Actions</title>
      <author>Mariam Adedeji</author>
      <pubDate>Fri, 03 Dec 2021 18:35:36 +0000</pubDate>
      <link>https://dev.to/mariehposa/automating-terraform-with-github-actions-1hc3</link>
      <guid>https://dev.to/mariehposa/automating-terraform-with-github-actions-1hc3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;A project to demonstrate how to automate terraform workflow with Github Actions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login to your AWS account and generate &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After that, login to your Terraform Cloud account. Create a new workspace and select &lt;strong&gt;API-driven workflow&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Then navigate to the &lt;strong&gt;Variables&lt;/strong&gt; tab and click on &lt;strong&gt;Add variable&lt;/strong&gt;. Add &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; with their respective values.&lt;/li&gt;
&lt;li&gt;From your Terraform Cloud User Settings, click on &lt;strong&gt;Tokens&lt;/strong&gt; and generate an API token named &lt;code&gt;GitHub Actions&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the token to your Github repository as a secret. Name the secret &lt;code&gt;TF_API_TOKEN&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone and open your Github repo on your code editor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checkout to a new branch with &lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add your changes with &lt;code&gt;git add .&lt;/code&gt; and commit the changes with a message using &lt;code&gt;git commit -m "&amp;lt;commit-message&amp;gt;"&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then push your changes with &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to the Github repository and generate a pull request from the new branch. You can view the status of the job through the pull request created, Actions tab or the Terraform Cloud workspace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then merge the pull request.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mariehposa"&gt;
        mariehposa
      &lt;/a&gt; / &lt;a href="https://github.com/mariehposa/terraform-automation"&gt;
        terraform-automation
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Terraform Automation&lt;/h1&gt;
&lt;p&gt;A project to demonstrate how to automate terraform workflow with Github Actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Github Actions after creating a pull request
&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/33374159/143871982-d2972a02-f2fa-458e-8d79-3cde681cc7ed.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lCvzku1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/143871982-d2972a02-f2fa-458e-8d79-3cde681cc7ed.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github Actions after Merging to &lt;strong&gt;main&lt;/strong&gt; branch
&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/33374159/143872424-59e53e0e-6475-4b81-a853-c5c147ec645f.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p2vUiL33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/143872424-59e53e0e-6475-4b81-a853-c5c147ec645f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development purpose.&lt;/p&gt;
&lt;h2&gt;
Prerequisites&lt;/h2&gt;
&lt;p&gt;To get started with this project you need a basic knowledge of the following.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;Version Control (Git)
Terraform
AWS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Automating Terraform with Github Actions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Login to your AWS account and generate &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After that, login to your Terraform Cloud account. Create a new workspace and select &lt;strong&gt;API-driven workflow&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then navigate to the &lt;strong&gt;Variables&lt;/strong&gt; tab and click on &lt;strong&gt;Add variable&lt;/strong&gt;. Add &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; with their respective values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From your Terraform Cloud User Settings, click on &lt;strong&gt;Tokens&lt;/strong&gt; and generate an API token named &lt;code&gt;GitHub Actions&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the token to your Github repository as a…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mariehposa/terraform-automation"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>actionshackathon21</category>
      <category>actions</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 03 Dec 2021 18:29:27 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-4l7b</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-4l7b</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Embarking on a new creative challenge... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your accomplishments this week! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/sgFDIjII6GtmE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/sgFDIjII6GtmE/giphy.gif" alt="Woman and puppet dancing saying &amp;quot;we're number one!&amp;quot;" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
  </channel>
</rss>
