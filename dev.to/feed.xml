<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Typescript Interface vs Class With Practical Examples</title>
      <author>Raj Sekhar</author>
      <pubDate>Thu, 05 Aug 2021 20:25:10 +0000</pubDate>
      <link>https://dev.to/raj_sekhar/typescript-interface-vs-class-5f6l</link>
      <guid>https://dev.to/raj_sekhar/typescript-interface-vs-class-5f6l</guid>
      <description>&lt;p&gt;Typescript, oh I love it. Take &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages"&gt;stackoverflow survey&lt;/a&gt;, or ask any developer, most of them do. All major UI libraries/frameworks are &lt;em&gt;(following Angular way)&lt;/em&gt; adding Typescript support now. Need to write a little extra boilerplate &lt;em&gt;(use &lt;a href="https://marketplace.visualstudio.com/items?itemName=MariusAlchimavicius.json-to-ts"&gt;json to ts&lt;/a&gt; extension)&lt;/em&gt;, but the benefits of type checking, intellisense and instant visual feedback outweigh the extra work.&lt;/p&gt;

&lt;p&gt;I had this confusion where &lt;strong&gt;both interface and class gets the work done, but which one to use and when?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Use interface, avoid class unless there is any special requirement that cannot be done with interface.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Classes add to js file size, after compiling &lt;code&gt;.ts&lt;/code&gt; to &lt;code&gt;.js&lt;/code&gt;, while interfaces do not&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#classes-take-extra-lines"&gt;
  &lt;/a&gt;
  Classes take extra lines
&lt;/h2&gt;

&lt;p&gt;Lets take scenario, where we want to give structure to a pizza object. I can use interface or an object. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pizza-interface"&gt;
  &lt;/a&gt;
  Pizza Interface
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;pizza-interface.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myPizza&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxican green wave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myPizza&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;pizza-interface.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myPizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxican green wave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myPizza&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pizza-class"&gt;
  &lt;/a&gt;
  Pizza Class
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;pizza-class.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extraCheese&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;takeAway&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myPizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxican green wave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myPizza&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;pizza-class.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/** @class */&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extraCheese&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extraCheese&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;takeAway&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;takeAway&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}());&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myPizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxican green wave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myPizza&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;More the lines in your &lt;code&gt;.js&lt;/code&gt;, more is its size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#usecase-for-class"&gt;
  &lt;/a&gt;
  Usecase for class
&lt;/h2&gt;

&lt;p&gt;Lets take a scenario of employee salary, where HRA, PF contribution is dependent on the basic amount. So if I want to provide structure for salary object with least effort, I might go with class instead of interface here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;salary.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SalaryComponents&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;hra&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;professionalTax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;professionalTax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getProfessionalTax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;getProfessionalTax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stateName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// dummy value&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emp1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SalaryComponents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tamil Nadu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emp1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="cm"&gt;/** Output
    {
        basic: 1000,
        hra: 500,
        pf: 120,
        professionalTax: 2000
    }
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With just 2 inputs, i could create an object. Pretty neat huh!!&lt;/p&gt;

&lt;p&gt;This is the only scenario is could think of, where class is more effective. Hope it was helpful. I am open for any constructive criticism/feedback.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#ps-i-am-looking-for-new-opportunities-in-angular-if-you-have-any-openings-i-am-just-a-message-away-krj2033gmailcom-linkedin"&gt;
  &lt;/a&gt;
  PS: I am looking for new opportunities in Angular. If you have any openings, I am just a message away. (&lt;a href="mailto:krj2033@gmail.com"&gt;krj2033@gmail.com&lt;/a&gt;) (&lt;a href="https://www.linkedin.com/in/raj-sekhar-3b437782"&gt;linkedin&lt;/a&gt;)
&lt;/h6&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>Do Developers Still Use PHP (and why that’s the wrong question to ask)</title>
      <author>Nočnica Fee</author>
      <pubDate>Thu, 05 Aug 2021 20:13:32 +0000</pubDate>
      <link>https://dev.to/run-x/do-developers-still-use-php-and-why-that-s-the-wrong-question-to-ask-3n04</link>
      <guid>https://dev.to/run-x/do-developers-still-use-php-and-why-that-s-the-wrong-question-to-ask-3n04</guid>
      <description>&lt;p&gt;&lt;em&gt;image by Camilo Sanchez, sharable via 9Creative Commons Attribution 3.0 Unported License](&lt;a href="https://creativecommons.org/licenses/by/3.0/legalcode"&gt;https://creativecommons.org/licenses/by/3.0/legalcode&lt;/a&gt;).&lt;/em&gt;&lt;br&gt;
People love to ask variations on the question “is PHP dead?” And for added fun, they like to ask it of people who still use it for their jobs, as &lt;a href="https://dev.to/actuallymab/is-php-dead-discussion-3230"&gt;this article&lt;/a&gt; points out. PHP remains extremely popular; something like 79% of websites whose server-side programming language is known use PHP. So to me, the interesting question is not “Do developers still use PHP?”, but “Why do people keep asking if developers still use PHP?”&lt;/p&gt;

&lt;p&gt;Part of the PHP hate may come from its origins back in the early days of the web. PHP was developed out of C by Rasmus Lerdorf in 1994, who said it was never intended to be a programming language--he just needed better tools to do stuff with the web that nobody was yet doing in 1994. As a result it’s been derided for its inconsistent syntax, which makes sense if you remember that it was built by one guy trying to figure out how to get his website to communicate with databases. It’s a language of necessity, not careful design, and it’s old. Those facts alone might be enough to turn away some developers.&lt;/p&gt;

&lt;p&gt;There are some good reasons to believe that PHP might be on its (very long) way out, in the same way that Rome was “falling” from the moment it stopped expanding. Promising new alternatives like Node for Javascript have been cropping up in the last few years. And in fact, that 79% is actually 79.1% as of this month, whereas back in April, it was 79.2%. So for a developer who already knows Javascript (or Python, or ASP.net), it might be tempting to say that PHP is holding the industry back.  It might also make someone ask a developer who uses PHP on the regular whether it isn’t “dead yet”, when the very fact that that developer uses PHP at work means that by definition it is not. People are asking “Is PHP dead yet” because they wish it was.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTiWXY9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E6p2J8nWYAELKyP.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KBflxm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1187013286073700357/H7gqKPWs_normal.jpg" alt="Dev Memes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dev Memes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @programemes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Is PHP dead?&lt;br&gt;&lt;br&gt;Source: &lt;a href="https://t.co/XgFvEOk3N5"&gt;reddit.com/r/ProgrammerHu…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:52 AM - 19 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1417074948015902727" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1417074948015902727" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1417074948015902727" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;People who work in tech sometimes assume that the thing that does a job most efficiently in a vacuum will be the thing people automatically switch to using, and that any failure to do so immediately is a bad choice. However, existing infrastructure matters to making decisions about what to do next. If someone invented a new paving material that was easier to make than asphalt, it wouldn’t be feasible to instantly replace all existing roads with NewAsphalt, or to stop maintaining those existing roads. The proliferation of PHP means that it’s likely to persist for a while. After all, there are people who still code in “outdated” programming languages like COBOL in order to work on older digital infrastructure.&lt;/p&gt;

&lt;p&gt;Additionally, company culture and experienced senior developers all play a role in which languages get used. Many big players in the web use PHP for back-end stuff, which means they’ll expect their employees to work with PHP, which means that there will be highly skilled people working at desirable companies who use PHP, which means PHP will--well, you get the idea.&lt;/p&gt;

&lt;p&gt;So the real question on the table is: with these new alternatives in play, if you want to do server-side web development, do you need to know PHP?&lt;/p&gt;

&lt;p&gt;Not necessarily. While a number of companies use PHP, some of those, &lt;a href="https://trio.dev/blog/companies-using-php"&gt;like Wordpress and Facebook&lt;/a&gt;, account for a huge amount of web infrastructure (which is probably driving up that 79% of websites number). If you’re seeking work with a web juggernaut that is known to rely on PHP, it’s certainly worth considering. However, it’s certainly not the prerequisite that it might have been even a few years ago, and very few developers use it exclusively. &lt;/p&gt;

&lt;p&gt;However: anecdotal evidence suggests that knowing a less-used programming language can be very valuable to the right employer. Those engineers who can still write in COBOL? They can effectively set their price. PHP might someday be similarly valuable if the infrastructure persists but the knowledge on how to maintain it does not.&lt;/p&gt;

&lt;p&gt;I’m curious, though--how often do you encounter the “is x dead yet” question? What kinds of things do you do on the regular that make people ask “oh, are people still doing that?” Let me know in the comments.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Refactoring and Trust</title>
      <author>Omer van Kloeten</author>
      <pubDate>Thu, 05 Aug 2021 19:35:47 +0000</pubDate>
      <link>https://dev.to/omervk/refactoring-and-trust-282d</link>
      <guid>https://dev.to/omervk/refactoring-and-trust-282d</guid>
      <description>&lt;p&gt;Refactoring has many faces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When you start out,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;a fresh-faced developer, your only goal is to make your code Do The Thing. You forgot that semicolon or that loop was off-by-one and it took you the whole day to wade through those error messages to figure that stuff out and you’re on top of the world because you Fixed The Code and what do you mean change the code it WORKS NOW.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some years pass,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;you’re now more confident in your work and start thinking about the patterns you start seeing emerge. You start practicing DRY and understanding the usefulness of design patterns. You’re slowly exposed to the practice of refactoring - changing the code’s structure without changing its external interfaces - extracting a method here, an interface there, moving methods up the hierarchy, … You’re no longer designing your code, you’re redesigning it as both you and it change.&lt;/p&gt;

&lt;p&gt;Most people do it out of either fun, pedantry or both. Fun, because you’re curious and it’s experience and the code just never quite looks right but the journey is interesting and you don’t have to worry about those pesky new product requirements while you’re fiddling around. Pedantry, because the two beasts of That’s Not The Way I Would Have Done It and It Must Be Done Right rear their heads. It’s Your Code and you can’t do anything until it’s Right. IT HAUNTS YOU!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O8YvgjEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fszhjp7hdz30xpvct60.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O8YvgjEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fszhjp7hdz30xpvct60.jpg" alt="It Haunts Us by CommitStrip"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(&lt;strong&gt;&lt;a href="https://www.commitstrip.com/en/2021/06/22/it-haunts-us/"&gt;It Haunts Us by CommitStrip&lt;/a&gt;&lt;/strong&gt;, the reason this blogpost was written in the first place)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your Engineering Manager and your Product Manager? They just don’t understand you. They don’t understand that it NEEDS to happen. But you can FEEL it! They don’t own the code, they don’t write it, they don’t understand how terrible it is and how wonderful it would be once you’re done refactoring...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some more years pass,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;you’ve been programming for quite a bit of time now, and have been in a few teams, working on a few different projects and products. You no longer see the code you write as an artifact that could ever be complete. No, it’s all about forward motion and tradeoffs, what you can design relatively well and what you can’t, for now.&lt;/p&gt;

&lt;p&gt;This understanding helps you more easily explain why not refactoring would be detrimental to this forward motion. You’ve learned to stand your ground when you understand the returns outweigh the investment, but also to accept when it’s not the right time. Refactoring is still fun and you’re still just as pedantic as you were, but you’ve gained PERSPECTIVE.&lt;/p&gt;

&lt;p&gt;Your Engineering Manager and your Product Manager? Yeah, they still don’t understand refactoring. Their ears prick up when they hear that word. There’s always the next feature that needs to happen yesterday and the refactoring always takes a long time and I mean Those Pesky Developers Always Want To Refactor Everything. Oh, and worst of all, there’s never any result that can be measured. I mean, you can’t build the next feature, then go back to the old version of the code and build the feature again and show that it would have taken longer, right? Right? I meaaaaan… no, no, that’s just cutting off your nose to spite your face.&lt;/p&gt;

&lt;p&gt;There are lots of reasons for this mindset from EMs and PMs, but I’d like to propose one of them -&lt;/p&gt;

&lt;p&gt;Trust.&lt;/p&gt;

&lt;p&gt;Sure, they trust you to do your job, churning out features, hunting down bugs and handling outages, but do they trust you as a Professional? To them, a Professional would not waste time on frivolous activities, like tinkering with the code just to see if it looks nicer or changing it just because it Doesn’t Feel Right. But wait, that was you just a few years back. Oh crap, maybe that’s the kind of behavior that was imprinted on them by their past experience with developers? I mean, these Past Yous aren’t wrong - they’re just learning - like you did.&lt;/p&gt;

&lt;p&gt;How can you build that kind of trust? Well, that’s beyond the scope of this post. Maybe at a later time.&lt;/p&gt;

&lt;p&gt;One last thing - I don’t know if that’s the pain your specific EM and PM are feeling. It might be. You should probably ask them. It’s a great start.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Your dev team lead is not controlling enough </title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 05 Aug 2021 19:32:28 +0000</pubDate>
      <link>https://dev.to/conorbronsdon/your-dev-team-lead-is-not-controlling-enough-3l4g</link>
      <guid>https://dev.to/conorbronsdon/your-dev-team-lead-is-not-controlling-enough-3l4g</guid>
      <description>&lt;p&gt;Awesome piece below was written by my VP Rocco Seyboth and I just had to share. Let me know your thoughts in the comments!&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Every morning, I see the unfiltered thoughts of 1400+ engineering leaders as one of the community moderators in the &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Dev Interrupted Discord server &lt;/a&gt;. We start every day with a Daily Interruption topic about how to make agile work in real life; scaling teams, building culture, hiring, continuous improvement, metrics — fun stuff like that.&lt;/p&gt;

&lt;p&gt;Recently this Daily Interruption popped up and stopped me in my tracks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEceRnyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2598/0%2AMsqWEwHxJQuEftit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEceRnyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2598/0%2AMsqWEwHxJQuEftit.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-much-control-is-the-right-amount-of-control"&gt;
  &lt;/a&gt;
  How much control is the right amount of control?
&lt;/h2&gt;

&lt;p&gt;Nick might as well have asked, “what is the meaning of life?” You can see my immediate reaction was bewildered introspection. 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-eMIbOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AZSn_pK5CGNnWtKzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-eMIbOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AZSn_pK5CGNnWtKzw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A bit of context…&lt;/p&gt;

&lt;p&gt;I was born with a default control setting of 10 (out of 10). I believe your strength is your weakness. At least in my case, this has proven to be true. Like many controlling people, I take ownership, obsess over little details and get the job done. Also, like many controlling people, sometimes I have a hard time working with others. I’m putting it mildly. 😄&lt;/p&gt;

&lt;p&gt;So what do you think happened when I got my first job working at a software start-up?&lt;/p&gt;

&lt;p&gt;As an individual contributor, I crushed. My super controlling nature propelled me to dominate every task that was assigned to me. I overachieved.&lt;/p&gt;

&lt;p&gt;Then I got promoted. And just like my friend Dan Lines said about being &lt;a href="https://linearb.io/blog/promoted-from-dev-to-team-lead-8-things-they-didnt-tell-me/"&gt;promoted from dev to team lead &lt;/a&gt;, “a freight train hit me.”&lt;/p&gt;

&lt;p&gt;Since then I’ve been on a journey to figure out how much control is the right amount of control when it comes to leading software teams. I’ve been managing people for sixteen years now and I can break that time into three distinct phases:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-three-phases-of-controllingness"&gt;
  &lt;/a&gt;
  My three phases of controllingness
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#phase-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Phase 1&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;When I first got promoted to team lead I was &lt;strong&gt;&lt;em&gt;highly&lt;/em&gt;&lt;/strong&gt; controlling. I literally did most of my team’s work for them. I worked seventeen hours a day six days a week to ensure every single task was completed to my exact specification. The people that worked for me were unhappy (some actively disliked me personally) but we got results that the CEO cared about so it went unnoticed.&lt;/p&gt;

&lt;p&gt;And I was good at managing up, so I actually got promoted for this behavior! I was in my early twenties and motivated by the wrong things (power, money, and, of course, control). I look back on the period with embarrassment and I’ve actually apologized to many of the people who worked for me back then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m a person of extremes so when I realized micro-management was wrong, I naturally swung the pendulum in the exact opposite direction. I told myself I was hiring smart people and I should leave them alone. I’m good at hiring so it kind of worked. But, again, the people who worked for me suffered — this time in a way that they noticed much less. Good people actually want feedback! It’s not good for their work to go unchallenged because then it’s harder to improve. My teams in Phase 2 all had a lot of fun and liked each other but we were a bit chaotic in how we got work done and we were not living up to our potential.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I like to think I’m currently in Phase 3 which is more of a happy medium. I try to do four things to attempt to strike the right balance:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write super clear job descriptions and goals so every person knows which areas they own and which outcomes they are responsible for driving for the business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide extremely honest feedback… sparingly. You have to pick your battles. I find a lot of feedback is good upfront for new employees. And then, over time, you have to give people room to make their own choices or make mistakes. I find my people actually prove me wrong a lot of times when I think they are going to make mistakes anyway which is a good reminder to keep my mouth shut.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Occasionally I decide I’m going to personally own something that needs to be handled my exact way — like when an important new project needs to be bootstrapped with care and skill. In those cases, I let my control freak flag fly and I just do it my way. It’s ok to do this very rarely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I warn everyone upfront I am a recovering controlling jerk and apologize constantly for when I step over the line which I still do all of the time. 😁&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#phase-2-is-just-as-bad-as-phase-1"&gt;
  &lt;/a&gt;
  Phase 2 is just as bad as Phase 1
&lt;/h2&gt;

&lt;p&gt;Managers in phase 1 get all of the credit for being the worst but we should not underestimate the damage that can be caused by phase 2 controlling managers — ones who do not “control” enough.&lt;/p&gt;

&lt;p&gt;I found this response from drdwilcox (a VP of Engineering) fascinating.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNF3wdVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2608/0%2AjnO1-Bwn8UNKEo8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNF3wdVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2608/0%2AjnO1-Bwn8UNKEo8b.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I reflect back on my time in Phase 2, I realized it was my own insecurity that stopped me from communicating and coaching more. Once I put my imposter syndrome aside and realized I just needed to do my best for everyone on my team, I was able to strike a balance between too much input and too little feedback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#engineering-metrics-a-tool-for-good-and-evil"&gt;
  &lt;/a&gt;
  Engineering metrics — a tool for good and evil
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Communicating expanding expectations that come from growth is such an important part of what I do with my leaders.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Engineering metrics are probably the most common topic in the Dev Interrupted Discord as well as on &lt;a href="https://open.spotify.com/show/7icMkauSvLflWCpQrfafIv"&gt;our podcast (with the same name) &lt;/a&gt;. Everyone has ideas about which metrics are good and bad and everyone has a story about a time that a bad manager used metrics to control their team in a negative way.&lt;/p&gt;

&lt;p&gt;Phase 1 managers often use bad metrics to stack rank engineers and pit them against one another or just force them to work harder. Phase 2 managers don’t share enough data and miss an opportunity to use good metrics to unite the team.&lt;/p&gt;

&lt;p&gt;If you’re trying to become a Phase 3 manager, our community has tons of resources about how to use metrics to help your people improve and increase quality and efficiency among your teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-nonmanagers-think-about-all-this"&gt;
  &lt;/a&gt;
  What do non-managers think about all this?
&lt;/h2&gt;

&lt;p&gt;Scott, a “never-ever-a-manager”, has insightful and hilarious things like this to say almost every day in the Dev Interrupted Discord 😆&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcXjvrLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2626/0%2AvWNwL5_K_fuzQ7IM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcXjvrLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2626/0%2AvWNwL5_K_fuzQ7IM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All are welcome in the Discord so &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;please join us &lt;/a&gt;and share your thoughts and controlling manager stories!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BD8Pxc65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s16fivna2blazlvdlt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BD8Pxc65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s16fivna2blazlvdlt7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And please consider joining our newest event: Interact, the community driven conference for engineering team leads, managers, VPs and CTOs looking to improve themselves and their teams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GsGd1t-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zr8czj37s7cr0mv2m0dw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GsGd1t-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zr8czj37s7cr0mv2m0dw.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/your-dev-team-lead-is-not-controlling-enough/"&gt;https://devinterrupted.com&lt;/a&gt; on June 30, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>managementtechniques</category>
      <category>discuss</category>
      <category>culture</category>
    </item>
    <item>
      <title>Why I use Laravel as a Rails aficionado</title>
      <author>Martin Vandersteen</author>
      <pubDate>Thu, 05 Aug 2021 19:26:05 +0000</pubDate>
      <link>https://dev.to/vdsmartin/why-i-use-laravel-as-a-rails-aficionado-4ea2</link>
      <guid>https://dev.to/vdsmartin/why-i-use-laravel-as-a-rails-aficionado-4ea2</guid>
      <description>&lt;p&gt;I've been building web products professionnally and for fun for more than 7 years now. Despite being a complete Ruby on Rails fan (my first love) and having first experienced Laravel in the worst ways possible (taking over a legacy SaaS that was a complete mess), I still decided to use Laravel for my next major projects.&lt;/p&gt;

&lt;p&gt;Both present similar MVC structures and similar functionalities, but they have quite different ecosystems. To me, being a good developer means choosing the right tool for the job, here are some reasons why I chose Laravel over Rails for those applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-ecosystem"&gt;
  &lt;/a&gt;
  The ecosystem
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u4pc3r7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9a2dyy84jm7qe8ipn9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4pc3r7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9a2dyy84jm7qe8ipn9o.png" alt="The Laravel Ecosystem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Tailor Otwell and others, there are a lot of VERY powerful satellite packages and tools that'll make you win precious time when building web products. Here are some of the ones that drove my decision :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-sail"&gt;
  &lt;/a&gt;
  Laravel Sail
&lt;/h3&gt;

&lt;p&gt;Super easy development environment : &lt;code&gt;$ sail up&lt;/code&gt; and you're good to go ! It spins up a web server, database, redis server and even mailhog to monitor your emails. All through Docker🐋 so you don't pollute your computer with useless servers that will clash with your other development projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-breeze-amp-jetstream"&gt;
  &lt;/a&gt;
  Laravel Breeze &amp;amp; Jetstream
&lt;/h3&gt;

&lt;p&gt;Thanks to those, you can start your application with all the boring authentication part pre-made for you. This includes signup, login, profile settings, dashboard, email verification &amp;amp; forgot password, password change, 2FA, .. Such a huge timesaver !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-nova"&gt;
  &lt;/a&gt;
  Laravel Nova
&lt;/h3&gt;

&lt;p&gt;Powerful, beautiful &amp;amp; customizable admin ! Quite easy to install and to extend, with a lot of very useful plugins that'll make your life way easier. Building admins for web apps is a big part of the development time and any time saved is a big money saver, as long as the quality remains.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-vapor"&gt;
  &lt;/a&gt;
  Laravel Vapor
&lt;/h3&gt;

&lt;p&gt;Vapor turns your app into a Serverless app that autoscales in a hearthbeat. It manages your AWS ressources for you and allows you to change things in your Cloud with simple commands. It will save you weeks of handling your servers, I really think it has a crazy good Return On Investment for small to mid-sized applications. Focus on building your app and not on fiddling in AWS !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#statamic"&gt;
  &lt;/a&gt;
  Statamic
&lt;/h3&gt;

&lt;p&gt;Statamic is a pretty powerful and modern CMS that'll get you out of your Wordpress nightmares. Simple and efficient ! It recently saved me when I needed to build a BIG application that was a mix of a Website, CMS, CRM and E-commerce. Statamic made it possible for my client to edit pages &amp;amp; products in an efficient way while giving me the whole power of Laravel to meet requirements for the CRM aspect of things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-spark"&gt;
  &lt;/a&gt;
  Laravel Spark
&lt;/h3&gt;

&lt;p&gt;I personally never used it but it seems to be the Laravel Jetstream of SaaS products ! (It actually plays along well with Jetstream &amp;amp; Breeze) It handles subscriptions, payment providers &amp;amp; invoices for you so you can focus on the actual value your app brings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-community"&gt;
  &lt;/a&gt;
  The community
&lt;/h1&gt;

&lt;p&gt;Pretty simple and straightforward but as there are more people using Laravel, it's easier to find answers to your problem on the web as well as finding help !&lt;/p&gt;

&lt;p&gt;But that was not the deciding factor for me as, in my opinion, Rails is often easier to understand and more logical than Laravel. The main reason why the community is so important to me is that I'm making it easy for my clients to find new developers later on, as they will need someone to maintain and improve on the application that I built someday. There are a lot more people that use PHP in the world than Ruby and it's important to keep that in mind when you build an application that will be the epicenter of someone's business.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I'm still in love with Rails ! And I love that it keeps growing so well and evolving (can't wait to try Hotwire and compare it with Livewire), and it still is one of my favourite tools. &lt;/p&gt;

&lt;p&gt;I just think it's important to be flexible and to be able to avoid getting stuck with one framework the becomes a Bible you franctically shake in front of everybody that uses something else! &lt;/p&gt;

&lt;p&gt;Be curious and open to new things, give it a look and objectively assess if it's for you, or not, and if it actually brings new value to the programming world. There are tons of frameworks popping up everyday and while a lot are probably good, only a few will really fit you and make your work more efficient.&lt;/p&gt;

&lt;p&gt;What's your take on this ? How do you position yourself in this world of frameworks ? 😜&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>rails</category>
      <category>php</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to make a qr-code generator with JavaScript</title>
      <author>The Vik</author>
      <pubDate>Thu, 05 Aug 2021 19:11:00 +0000</pubDate>
      <link>https://dev.to/heheprogrammer/how-to-make-a-qr-code-generator-in-javascript-2pma</link>
      <guid>https://dev.to/heheprogrammer/how-to-make-a-qr-code-generator-in-javascript-2pma</guid>
      <description>&lt;p&gt;Making a qr-code generator is pretty simple tbh because of the existing stuff available on the internet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thevik/qrcode"&gt;Source Code Of This Blog&lt;/a&gt;&lt;br&gt;
&lt;a href="https://thevik.github.io/qrcode/"&gt;Try Out The QRCODE Generator We Are Going To Make In This Blog&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"generateQR()"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; 
    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Place Your Url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"makeQR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Generate QR Code
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"qrcode.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;makeQr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;makeQR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeQr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay so thats all of the code you got to understand to make this.&lt;/p&gt;

&lt;p&gt;First of all you have to &lt;a href="https://github.com/davidshimjs/qrcodejs/zipball/master"&gt;download this&lt;/a&gt; from &lt;a href="https://davidshimjs.github.io/qrcodejs/"&gt;https://davidshimjs.github.io/qrcodejs/&lt;/a&gt; this is nesecarry to be downloaded because the base code isnt mine its this guy who made it.&lt;/p&gt;

&lt;p&gt;Okay so now first we are gonna make the html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"generateQR()"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; 
    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Place Your Url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"makeQR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Generate QR Code
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"qrcode.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we are making a input box and giving it onchange="generateOR()" which is a function we are making in main.js also we giving it a ID.&lt;br&gt;
then we making a button and giving it a ID too.&lt;br&gt;
Now we making a &lt;/p&gt; it is necessary because the qr code is going to be shown here only, and in last we importing the script.( main.js is the code we are making and qrcode.min.js is the base code)&lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;makeQr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;makeQR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeQr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Okay in the first three lines we are just importing all of the ids we gave in our html by using document.getElementById.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;in this line we are making a new QRCode and it is important because there is something in qrcode.min.js so if we write new QRCode when import out div then it is going to automatically find that this is the div it is going to show the generated qr.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we are making the generateOR function ( used in html ) and making a const named data and getting qrdata.value ( the value of that input box ) at last we are adding qrcode.makeCode(data) ( qrcode is that div ) and makeCode means generate QR Code and (data) menas qrdata.value ( value of input box )&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-code-should-now-also-work-if-we-write-the-link-and-press-enter-but-if-you-want-that-the-qrcode-also-shows-when-we-click-on-the-button-then"&gt;
  &lt;/a&gt;
  this code should now also work if we write the link and press enter but if you want that the qrcode also shows when we click on the button then
&lt;/h4&gt;



&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeQr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;here we arent doing much just adding a event listener 'click' and passing generateOR() function in it&lt;/p&gt;

&lt;p&gt;Thanks for reading till the ending you can &lt;a href="https://github.com/thevik"&gt; follow me on github &lt;/a&gt; and &lt;a href="https://github.com/thevik/qrcode"&gt; star this repo &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>help</category>
    </item>
    <item>
      <title>typing-test: monkeytype clone in ReactJS</title>
      <author>Salman Shaikh</author>
      <pubDate>Thu, 05 Aug 2021 19:08:44 +0000</pubDate>
      <link>https://dev.to/salmannotkhan/typing-test-monkeytype-clone-in-reactjs-bd</link>
      <guid>https://dev.to/salmannotkhan/typing-test-monkeytype-clone-in-reactjs-bd</guid>
      <description>&lt;p&gt;Hello all,&lt;/p&gt;

&lt;p&gt;I wanted to make a typing test website with ReactJS and JavaScript. So I looked around for good typing test website and one website came to mind monkeytype. it's quite popular for the minimal look. So I thought why not make clone of it.&lt;/p&gt;

&lt;p&gt;After adding features and polishing the logic I thought about switching to TypeScript from JavaScript for experiment. &lt;/p&gt;

&lt;p&gt;First I kept tsconfig.json settings to very loose and then tried tightening them step by step.&lt;/p&gt;

&lt;p&gt;It was smooth three phase process for converting existing JS codebase to TS.&lt;/p&gt;

&lt;p&gt;After month of writing and refactoring typing-test is ready to use for everyone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Colorful multiple themes support

&lt;ul&gt;
&lt;li&gt;default&lt;/li&gt;
&lt;li&gt;mkbhd&lt;/li&gt;
&lt;li&gt;coral&lt;/li&gt;
&lt;li&gt;azure&lt;/li&gt;
&lt;li&gt;ocean&lt;/li&gt;
&lt;li&gt;forest&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;4 time limits (15, 30, 45, 60)&lt;/li&gt;
&lt;li&gt;Smooth cursor&lt;/li&gt;
&lt;li&gt;Instant Tab restart&lt;/li&gt;
&lt;li&gt;Previous word correction&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5fWx-QoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp6aje5tpqodn23wac2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fWx-QoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp6aje5tpqodn23wac2y.png" alt="typing-test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://salmannotkhan.github.io/typing-test"&gt;Visit Site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.github.com/salmannotkhan/typing-test"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Starting with sorting algorithms</title>
      <author>Ricardo Borges</author>
      <pubDate>Thu, 05 Aug 2021 18:27:05 +0000</pubDate>
      <link>https://dev.to/ricardo_borges/starting-with-sorting-algorithms-1e5m</link>
      <guid>https://dev.to/ricardo_borges/starting-with-sorting-algorithms-1e5m</guid>
      <description>&lt;p&gt;A sorting algorithm is an algorithm that sorts elements in a list into an order, among other uses, sorting can be applied to prepare a set of data for another algorithm, for example, Binary Search.&lt;/p&gt;

&lt;p&gt;In this post, I'll describe three sorting algorithms that, although not the most efficient, are easy to understand and are in-place algorithms, meaning that they don't require auxiliary data structures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bubble-sort"&gt;
  &lt;/a&gt;
  Bubble Sort
&lt;/h3&gt;

&lt;p&gt;Bubble sort starts at the beginning of the list, comparing each pair of adjacent elements, if the first is greater than the second, it swaps them. Then it starts again at the beginning of the list and repeats this process until no swap occurred on the last pass.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIDOT29c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/bubble-sort_az17q6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIDOT29c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/bubble-sort_az17q6.gif" alt="bubble sort"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;swapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;swapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;swapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;bubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since its complexity is Ο(n^2) on average and worst cases, this algorithm is more suitable for small or nearly ordered data sets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selection-sort"&gt;
  &lt;/a&gt;
  Selection Sort
&lt;/h3&gt;

&lt;p&gt;The list is divided into a sorted part at the left and an unsorted part at the right in this algorithm. Initially, the sorted sublist is empty and the unsorted one is all the list. Then it searches for the smallest element in the unsorted sublist and swaps it with the leftmost sorted element, moving the sublist boundaries one element to the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQwNquIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/selection-sort_limbbw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQwNquIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/selection-sort_limbbw.gif" alt="selection sort"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectionSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like Bubble Sort, this algorithm has a quadratic complexity Ο(n^2), so it is also more suitable for small or nearly ordered data sets. However, Selection Sort performs fewer swaps than Bubble Sort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insertion-sort"&gt;
  &lt;/a&gt;
  Insertion Sort
&lt;/h3&gt;

&lt;p&gt;Insertion Sort keeps a sorted sublist at the beginning of the list, and for each element from the list, it searches for the right position in that sublist to &lt;em&gt;insert&lt;/em&gt; that element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIKh5kg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/Insertion-sort_txmv8m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIKh5kg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/Insertion-sort_txmv8m.gif" alt="insertion sort"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;insertionSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Insertion sort has a quadratic complexity for average and worst cases too, however, it's the fastest sorting algorithm for small lists.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>sorting</category>
      <category>typescript</category>
    </item>
    <item>
      <title>My Journey Of Building pascaline  🧮</title>
      <author>Ritesh Kumar</author>
      <pubDate>Thu, 05 Aug 2021 18:16:32 +0000</pubDate>
      <link>https://dev.to/wordssaysalot/my-journey-of-building-pascaline-5017</link>
      <guid>https://dev.to/wordssaysalot/my-journey-of-building-pascaline-5017</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-everyone-hope-you-all-are-doing-well"&gt;
  &lt;/a&gt;
  Hi Everyone 👋, hope you all are doing well. 🚀
&lt;/h3&gt;

&lt;p&gt;In this article, I'll tell you how the notion of pascaline came to me.&lt;/p&gt;

&lt;p&gt;Last week, I took part in the week-long  IBD WFH tool building challenge hosted by crio.do.&lt;br&gt;
In this challenge, We were instructed to build useful open-source apps or extensions that would help us work more efficiently and increase productivity.&lt;/p&gt;

&lt;p&gt;So I began thinking about what I could build and decided to work on an issue I found a few days ago.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;a while ago while filling out a form and had to answer some questions about my budget, so I think of quickly installed an extension to help me out. As soon as I opened the chrome store and explored some extensions, I found that all of them had a really unpleasant UI, they were working perfectly fine but the experience I found was not that pleasant. After that, I looked into some articles on how to build an extension and found the  &lt;a href="https://developer.chrome.com/docs/extensions/"&gt;Chrome documentation&lt;/a&gt; &amp;amp;  &lt;a href="https://www.freecodecamp.org/news/how-to-implement-a-chrome-extension-3802d63b5376/"&gt;this article &lt;/a&gt; to be really informative and useful.&lt;/p&gt;

&lt;p&gt;So I decided to build a new one because we all know from personal experience that a good User Interface is important in the sense that it allows everyone to clearly see and use the products. also, It was an excellent opportunity for me to implement the stack that I've recently learned.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Good design is like a refrigerator—when it works, no one notices, but when it doesn’t, it sure stinks.” –Irene Au&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h2&gt;

&lt;p&gt;I've been going deeper into the world of UI/UX for a few months now, and I'm loving the procss.&lt;br&gt;
Now, I started with a sketch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTUZkhYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628051986433/qKKbLBcQ0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTUZkhYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628051986433/qKKbLBcQ0.png" alt="Frame 38.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, I began creating the Design in FIGMA,&lt;br&gt;
screenshot of my untidy artboard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeiCPXnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627905202902/65k6OXC_pd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeiCPXnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627905202902/65k6OXC_pd.png" alt="image 26.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h2&gt;

&lt;p&gt;Basically, Extensions are software programs, built on web technologies that enable users to customize the browsing experience.&lt;br&gt;
First, let's talk about the &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Tech Stack I used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Library I used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mathjs.org/"&gt;math.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, &lt;strong&gt;Phases of Development&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extension Interface&lt;/li&gt;
&lt;li&gt;Manifest File&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will explain each phase of development with relevant screenshots and code for better understanding.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-extension-interface"&gt;
  &lt;/a&gt;
  1. Extension Interface
&lt;/h2&gt;

&lt;p&gt;To build the extension interface, we should have a fundamental knowledge of HTML, CSS, and JavaScript. HTML (index.html) is used to build the skeleton body of our extension and we style the components and button using CSS (style.css). We use JavaScript (script.js) to giving it life, i.e, make it work to solve the equations. &lt;/p&gt;

&lt;p&gt;So let’s dive into the first Part: The structure and design of our calculator.&lt;br&gt;
In the HTML skeleton Inside Body, I’m defining a new div with a class named “button”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="button"&amp;gt; &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I place one more div, inside this div and there will be text that our button should hold is placed between these two tags. Along with the tag, I’ll be giving them an id. This id will help at the time of back-end programming. See example below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="button"&amp;gt;
&amp;lt;div class="inner-button"&amp;gt;
0
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp;, I’ve coded the same div approx 20 times to make the basic structure of the calculator.&lt;br&gt;
You can find the whole HTML code below&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/Wordssaysalot/k3hceavx/embedded/html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let’s jump to the CSS section. &lt;/p&gt;

&lt;p&gt;I primarily worked on these properties in order to make the calculator look nice.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;background-color
&lt;/li&gt;
&lt;li&gt;Padding
&lt;/li&gt;
&lt;li&gt;Width
&lt;/li&gt;
&lt;li&gt;Text alignment
&lt;/li&gt;
&lt;li&gt;Font size
&lt;/li&gt;
&lt;li&gt;BORDER RADIUS
&lt;/li&gt;
&lt;li&gt;Box- Shadow

complete CSS code for this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/Wordssaysalot/k3hceavx/3//embedded/css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, We will be coming to the javascript part &lt;br&gt;&lt;br&gt;
Until now the calculator is lifeless. We have to give it life.&lt;br&gt;
So let’s dive into the backend section and make the calculator solve our problems.&lt;br&gt;
Now we have to define a function, that can perform different tasks and for the calculation part I used  Math.js i.e an extensive math library for JavaScript, It features real and complex numbers, units, matrices, a large set of mathematical functions, and a flexible expression parser.&lt;br&gt;&lt;br&gt;
Below is the complete script.js :&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/Wordssaysalot/k3hceavx/5//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-manifest-file"&gt;
  &lt;/a&gt;
  2. Manifest File
&lt;/h2&gt;



&lt;p&gt;We have now reached the second phase in our extension development and it involves creating a manifest.json file. The manifest.json file is the only file that every extension using WebExtension APIs must contain. Using manifest.json, we specify basic metadata about your extension such as the name and version, and can also specify aspects of your extension's functionality (such as background scripts, content scripts, and browser actions). We also add icons to our extension and test them in the browser to connect everything.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
We set our extension name in the name attribute. We define a version number and type out a description which the users can see after loading the extension. We set our background script in place. We use a 128px icon and a default icon to be displayed on the extension bar, both designed in Figma. Whenever the user opens a new tab we want our extension page to be loaded there. This is possible because of chrome_url_overrides which overrides the default new tab layout and loads our extension home index.html. We lastly add manifest version and security policies.&lt;br&gt;&lt;br&gt;
Below is the complete manifest.json code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5VbppZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnk6e1h7z5kwpij8njy0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5VbppZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnk6e1h7z5kwpij8njy0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-testing"&gt;
  &lt;/a&gt;
  3. Testing
&lt;/h2&gt;

&lt;p&gt;Loading and Testing the extension &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We open the Chrome web browser. On the top right corner customize button is represented by three vertical dots. Go to &lt;strong&gt;More tools -&amp;gt; Extensions&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Enable Developer Mode&lt;/strong&gt; on the top left after opening the Extensions page. Then Click on Load unpacked and select the parent directory of the built extension.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sky_SG5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009741532/rnsKldviD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sky_SG5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009741532/rnsKldviD.png" alt="1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fact: While loading an unpacked extension, Chrome always looks for the manifest.json file and loads the extension using that file as a parent. Know we know the importance of manifest.json.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt; 3.  Once loaded, on the extension page, we can see our extension with the icon and description as below. Click on Details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VqcMrN0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009754217/zAsVohw2_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqcMrN0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009754217/zAsVohw2_.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt; 4. Here, we can see each and every detail about our extension which we put in our manifest.json file and the directory from which it was loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_rQKs8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009791902/kILPZGi9F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_rQKs8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009791902/kILPZGi9F.png" alt="Frame 37.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt; 5. Enable the extension and open a new tab. Voila! You should be able to see the extension up and running.&lt;/p&gt;

&lt;p&gt;You can now see the Pascaline logo in the browser's extension bar on the top right, from which you can also launch the extension.&lt;/p&gt;

&lt;p&gt;This brings us to the end of our development, and it was a great learning experience for me because I had never built an extension before.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to star ⭐️ the project if you found it useful -&lt;br&gt;
&lt;a href="https://github.com/wordssaysalot/Pascaline"&gt;https://github.com/wordssaysalot/Pascaline&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;Let me know your thoughts and feedback in the comments section.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>How I Think About React (A Mental Model For Beginners) | Part 3: Managing Data</title>
      <author>Michael Mangialardi</author>
      <pubDate>Thu, 05 Aug 2021 17:56:56 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-3-managing-data-1983</link>
      <guid>https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-3-managing-data-1983</guid>
      <description>&lt;p&gt;In a &lt;a href="https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-2-component-hierarchy-1g4p"&gt;previous article&lt;/a&gt;, I summarized React as a means to render a collection of elements to a web page using &lt;em&gt;components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Components are ultimately functions that render elements to a web page.&lt;/p&gt;

&lt;p&gt;Since elements have a hierarchical structure, and components are just a means to rendering elements, components are also organized in a hierarchical structure.&lt;/p&gt;

&lt;p&gt;By using functions to render elements (instead of typing things directly into an HTML file), React components can dynamically display and render different things to the user based on the flow of data.&lt;/p&gt;

&lt;p&gt;Today, I'll be diving into my mental model for understanding React's "flow of data" between components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h2&gt;

&lt;p&gt;Data sounds like a technical term, but it's quite simple. Data is simply information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VuQU0V9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1532619675605-1ede6c2ed2b0%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VuQU0V9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1532619675605-1ede6c2ed2b0%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any web application needs information to guide the user to an end goal.&lt;/p&gt;

&lt;p&gt;For example, Twitter needs to know your username and password (data/information) in order to log you into the application. It also needs to know recent tweets from your followers (data/information) based on the current date (data/information).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sources-of-data"&gt;
  &lt;/a&gt;
  Sources of Data
&lt;/h3&gt;

&lt;p&gt;Since a web application needs data/information to guide the user to an end goal, we'll need to think about what &lt;em&gt;sources&lt;/em&gt; of data exist in a web application.&lt;/p&gt;

&lt;p&gt;Knowing the different sources of data, we'll be able to clarify how React handles these sources of data for dynamically rendering elements to a web page.&lt;/p&gt;

&lt;p&gt;I tend to think that there are 3 potential sources of data in a web application:&lt;/p&gt;

&lt;p&gt;1) Data stored &lt;em&gt;locally&lt;/em&gt; in your code or on your computer&lt;br&gt;
2) Data that must be &lt;em&gt;fetched/retrieved&lt;/em&gt; from another computer&lt;br&gt;
3) Data that is collected from the &lt;em&gt;end user's interactions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FUHc8uX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1597852074816-d933c7d2b988%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FUHc8uX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1597852074816-d933c7d2b988%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="data"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#local-data"&gt;
  &lt;/a&gt;
  Local Data
&lt;/h4&gt;

&lt;p&gt;A React project might initially receive data from another file in the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File A&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;someFileWithData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./someFileWithData.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// File B (someFileWithData.js)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perhaps, it could "hardcode" the data directly in the file that needs it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File A&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#data-from-another-computer"&gt;
  &lt;/a&gt;
  Data From Another Computer
&lt;/h4&gt;

&lt;p&gt;A React project might initially receive data from another computer.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h5&gt;

&lt;p&gt;First off, why would there be data on another computer when you can store data locally as we just saw?&lt;/p&gt;

&lt;p&gt;Storing data locally works fine here and there, but typically, the bulk of the data that "runs" a web application is better stored in a &lt;em&gt;database&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A database is essentially storage room for data on a computer. It allows you to store data in an organized way.&lt;/p&gt;

&lt;p&gt;Storing data in a database has several advantages:&lt;/p&gt;

&lt;p&gt;1) It is optimized for storing large volumes of data. If your data was stored all in your project, it could slow things down.&lt;br&gt;
2) It can be "sourced" by multiple applications. If you needed to share data between two web applications that are different but similar in a company, for example, then a database would have you covered.&lt;br&gt;
3) Databases are optimized for being searched and sorted. Meaning, you need to do less thinking and coding to organize, search, and sort your data since databases.&lt;br&gt;
4) Databases are safer places to store personal information about users (i.e. emails and passwords).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aSUPgy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1582139329536-e7284fece509%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D800%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aSUPgy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1582139329536-e7284fece509%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D800%26q%3D80" alt="data"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#servers"&gt;
  &lt;/a&gt;
  Servers
&lt;/h5&gt;

&lt;p&gt;These databases need to be stored on another computer so that multiple web applications can retrieve the data.&lt;/p&gt;

&lt;p&gt;So, we need a computer that will always be running. Another name for a computer that is always running is a server.&lt;/p&gt;

&lt;p&gt;Still to this day, the word "server" makes me cringe a little because it seems like such a technical, loaded term. I think of dark closet with a bunch of complex wires.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEsaMnVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1558494949-ef010cbdcc31%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1491%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEsaMnVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1558494949-ef010cbdcc31%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1491%26q%3D80" alt="server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, it's quite simple. Again, it is just a computer that is meant to always running.&lt;/p&gt;

&lt;p&gt;A server is meant to always be running so that it can "serve," that is make accessible to other computers, applications and databases.&lt;/p&gt;

&lt;p&gt;So, data that is initially needed for a React project might be retrieved from a database that is accessible via a server (another computer that is always running).&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#apis"&gt;
  &lt;/a&gt;
  APIs
&lt;/h5&gt;

&lt;p&gt;Ok, so how does a React project retrieve data from a database that is accessible via a server?&lt;/p&gt;

&lt;p&gt;The answer is that you retrieve data from a server using &lt;em&gt;APIs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;"API" stands for &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface.&lt;/p&gt;

&lt;p&gt;This is just one of those acronyms that you'll have to get used to hearing...&lt;/p&gt;

&lt;p&gt;Basically, it's an API is any &lt;em&gt;interface&lt;/em&gt;, or means of communication, with another application.&lt;/p&gt;

&lt;p&gt;Specifically in our case, we're interested in APIs, means of communication, that interact with a database "served" by an application on a server.&lt;/p&gt;

&lt;p&gt;APIs for this specific context are called &lt;em&gt;REST&lt;/em&gt; APIs. "REST" stands for "&lt;strong&gt;re&lt;/strong&gt;presentational &lt;strong&gt;s&lt;/strong&gt;tate &lt;strong&gt;t&lt;/strong&gt;ransfer." "Representational state transfer" could be put in plainer words: "organized data transfer," referring to structured/organized data being transferred from a database to an application. "State" is essentially just another word for "data" used by an application.&lt;/p&gt;

&lt;p&gt;A REST API, therefore, is the type of API used to by web application to get data from a database running on another server.&lt;/p&gt;

&lt;p&gt;A REST API is the middleman. Our application can say "here's what I need from that database over yonder." The REST API says, "sure thing, boss. Here you go!"&lt;/p&gt;

&lt;p&gt;Now, like a human conversation, we need to speak to a REST API in a way it will understand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mu3pMu1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1523908511403-7fc7b25592f4%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mu3pMu1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1523908511403-7fc7b25592f4%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="conversation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't be diving into that in this article, you can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;dig more into it&lt;/a&gt; on your own if you'd like.&lt;/p&gt;

&lt;p&gt;All you need to know, for the purpose of forming a foundation mental model, is that a React project may get data from another computer (server) via an API.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#data-collected-from-user-interactions"&gt;
  &lt;/a&gt;
  Data Collected From User Interactions
&lt;/h4&gt;

&lt;p&gt;Third and finally, data can be initially retrieved from a React project by collecting user interactions.&lt;/p&gt;

&lt;p&gt;For every element on a web page, you can write instructions (code) on how to handle interactions.&lt;/p&gt;

&lt;p&gt;In technical terms, an interaction is called an &lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;event&lt;/a&gt;&lt;/em&gt;."&lt;/p&gt;

&lt;p&gt;In other words, web elements comes with ways to handle events; you can code &lt;em&gt;event handlers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, let's say that you want to write code to handle if a user clicks on an element (triggering a "click" event).&lt;/p&gt;

&lt;p&gt;Here's how you would write the code in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a user clicks the &lt;code&gt;div&lt;/code&gt; element, an alert will be triggered.&lt;/p&gt;

&lt;p&gt;In that code, we are handling a user's interaction, but that interaction is not providing us data.&lt;/p&gt;

&lt;p&gt;Nevertheless, we can &lt;em&gt;derive&lt;/em&gt; data based on a user's interactions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// hasClicked --&amp;gt; false&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// hasClicked --&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry about this React code yet, as I've not yet given a mental model to explain those specifics.&lt;/p&gt;

&lt;p&gt;The point is that React has a way to "derive" data/state from a user's interactions.&lt;/p&gt;

&lt;p&gt;Now, some web elements allow us to not merely derive data, but to get data as inputted from a user (i.e. username and password).&lt;/p&gt;

&lt;p&gt;Data that must be explicitly collected from a user requires an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/*...*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is some React code for handling the event that a user should type text into an input field.&lt;/p&gt;

&lt;p&gt;This is what happens when you log into a web application, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_sX6vhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/162622/facebook-login-office-laptop-business-162622.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_sX6vhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/162622/facebook-login-office-laptop-business-162622.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" alt="login"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To sum things up so far, we've learned that a React project can get data from another file on the same computer, data from a database on a server via an API, or from user interactions via event handlers on a web element.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-state-and-props"&gt;
  &lt;/a&gt;
  React State and Props
&lt;/h2&gt;

&lt;p&gt;As I've mentioned before, React is a framework that offers a shorthand way to render web elements and dynamically change them based on the data that can be "sourced" from a variety of sources in a project, as we have just seen.&lt;/p&gt;

&lt;p&gt;Let's dive into the React specifics a bit more.&lt;/p&gt;

&lt;p&gt;Again, React components are just functions that render a web element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Button&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component is a function that returns a &lt;code&gt;button&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;Easy enough.&lt;/p&gt;

&lt;p&gt;Now, let's say we want to make this dynamic based on changes in data.&lt;/p&gt;

&lt;p&gt;This doesn't usually happen, but for the sake of illustration, let's say we wanted to change the button's text if the user has hovered it.&lt;/p&gt;

&lt;p&gt;We want to derive data (whether the user has hovered a button) based on an event (the user hovers).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h3&gt;

&lt;p&gt;In React, all data that could impact what is rendered by a component needs to be explicitly "stored" as &lt;em&gt;state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I mentioned before that state, generally speaking, is just data used by an application.&lt;/p&gt;

&lt;p&gt;"State", in the React sense, is data that React uses to determine whether refresh/re-render the element returned by a component. If data is stored as React state, then if the data changes, React knows to re-render the element.&lt;/p&gt;

&lt;p&gt;Usually, React state is the data that is derived or explicitly provided by the user via event handlers, and data that is retrieved from any API.&lt;/p&gt;

&lt;p&gt;Data that is hardcoded/unchanging/static in the same file as the component (or another file) doesn't need to be stored as React state since it will never change. Hence, it will never cause a need for the component to re-render.&lt;/p&gt;

&lt;p&gt;On the other hand, data derived from a user's interactions is dynamic (can change while the user is accessing the web application), so it needs to be stored as React state.&lt;/p&gt;

&lt;p&gt;Data that is retrieved from a database can change if a user's interaction requires re-fetching/re-retrieving the data from the database. So, it needs to also be stored as React state.&lt;/p&gt;

&lt;p&gt;React exposes a function called &lt;code&gt;useState&lt;/code&gt; for you so that you can tell it to store data as state and update the state based on a user's interactions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; initially called with the "initial state."&lt;/p&gt;

&lt;p&gt;It returns 1) the state (&lt;code&gt;hasClicked&lt;/code&gt;) and 2) a function for changing the state (&lt;code&gt;setHasClicked&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;When the state is changed, React knows to re-render the returned element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h3&gt;

&lt;p&gt;Given that React components are just functions for rendering elements to a web page, and elements have a hierarchy, components also have a hierarchy.&lt;/p&gt;

&lt;p&gt;Following the City Model discussed in the &lt;a href="https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-2-component-hierarchy-1g4p"&gt;previous article&lt;/a&gt;, we will have city, neighborhood, block, and house components (and hence, elements).&lt;/p&gt;

&lt;p&gt;Data can be retrieved at any layer in the city hierarchy. Given that there are 3 layers besides the house (the bottom layer), it is common to have to "pass down" the React state from one higher/parent component to a lower/child component.&lt;/p&gt;

&lt;p&gt;React calls data that is passed down to a child component a &lt;em&gt;prop&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ParentComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="na"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These "props," or properties are read-only. Meaning, you only change them by calling the function to set new state that is returned by &lt;code&gt;useState&lt;/code&gt; as we saw in a previous example.&lt;/p&gt;

&lt;p&gt;So, it's also common to pass down the function that can update state. That way, a child component can trigger a change. in state.&lt;/p&gt;

&lt;p&gt;React knows that if state initialized in a parent component is passed down to children component(s) as props, and that state is updated, then the component that initialized the state and the components that "consumed" that state via props should be refreshed/re-rendered.&lt;/p&gt;




&lt;p&gt;In future articles, we'll look into the specifics of React's syntax as well as React's concepts of component lifecycles.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I made a script in Rust that will change your mac app's icon from a png</title>
      <author>Kunal Bagaria</author>
      <pubDate>Thu, 05 Aug 2021 17:43:37 +0000</pubDate>
      <link>https://dev.to/kb24x7/i-made-a-script-in-rust-that-will-change-your-mac-app-s-icon-from-a-png-5g2m</link>
      <guid>https://dev.to/kb24x7/i-made-a-script-in-rust-that-will-change-your-mac-app-s-icon-from-a-png-5g2m</guid>
      <description>&lt;p&gt;Thumbnail credit: &lt;a href="https://dribbble.com/shots/13810933-Big-Sur-Mac-Icons"&gt;Eric Hoffman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, how do I use it?&lt;/p&gt;

&lt;p&gt;Firstly, you'll need to install the Rust's package manager.&lt;/p&gt;

&lt;p&gt;Install it here: &lt;a href="https://doc.rust-lang.org/cargo/getting-started/installation.html"&gt;Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing the package manager, clone the &lt;a href="https://github.com/kb24x7/mac-icon-from-png"&gt;GitHub Repository&lt;/a&gt; using Git CLI, GitHub Desktop or &lt;a href="https://github.com/kb24x7/mac-icon-from-png/archive/refs/heads/main.zip"&gt;Download Zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in you terminal, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll prompt you to drag your PNG file. (The file should have a large resolution and should be square.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--appoZAke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vhdyf9psn5z8vrlmq3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--appoZAke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vhdyf9psn5z8vrlmq3h.png" alt="Screen Shot 2021-08-05 at 11.10.25 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding the PNG file, it'll prompt you to drag the application you want to replace the icon of.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iR9UohWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj6qrei1qe4a1uoifxd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iR9UohWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj6qrei1qe4a1uoifxd.png" alt="Screen Shot 2021-08-05 at 11.11.16 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you do that, you can sit back and relax while the script does its thing.&lt;/p&gt;

&lt;p&gt;(This is the first time I've ever coded in Rust, so you might see some ugly scripting if you want to check the source)&lt;/p&gt;

&lt;p&gt;If you liked this content, hit this post a like and follow me on &lt;a href="https://twitter.com/kb24x7"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Will see you the next time I create something :)&lt;/p&gt;

</description>
      <category>rust</category>
      <category>dock</category>
      <category>macos</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Why is everyone so excited about PolyWork? First impressions aren't good!</title>
      <author>InHuOfficial</author>
      <pubDate>Thu, 05 Aug 2021 17:22:14 +0000</pubDate>
      <link>https://dev.to/inhuofficial/why-is-everyone-so-excited-about-polywork-first-impressions-aren-t-good-37d1</link>
      <guid>https://dev.to/inhuofficial/why-is-everyone-so-excited-about-polywork-first-impressions-aren-t-good-37d1</guid>
      <description>&lt;p&gt;Hi, just wondered what I was missing (as I am sure there is something!).&lt;/p&gt;

&lt;p&gt;Just signed up to &lt;a href="https://www.polywork.com/"&gt;PolyWork&lt;/a&gt; with a VIP code and I just don't get it?&lt;/p&gt;

&lt;p&gt;I spent ages scrolling through the never ending list of tags to add to my profile (which had repeated tags all over the place), weird but I get the concept. &lt;/p&gt;

&lt;p&gt;Anyway got it all set up and...now what? I added a link to a post (the editor is not great...and you can't add &lt;code&gt;alt&lt;/code&gt; descriptions so I had to improvise...so that immediately puts a big nail in the coffin for me anyway) - great, now what?&lt;/p&gt;

&lt;p&gt;Headed over to the "multiverse" - nothing really makes me want to follow anyone on there as it is just a list of names, went to "space station"...sure maybe I will contact a couple of investors but yet again it seems very basic and limited.&lt;/p&gt;

&lt;p&gt;I have yet to see a feed with articles or anything like that to give me ideas of who I want to follow. &lt;/p&gt;

&lt;p&gt;The whole thing is slow and clunky, having to press a couple of times to get pages to load.&lt;/p&gt;

&lt;p&gt;So please, what am I missing...is it all marketing hype with the "invite codes" rubbish and the pretty graphics, or do they actually have something special and I am just not getting it (and if that is the case, could someone tell me how I am &lt;em&gt;meant&lt;/em&gt; to be using it!).&lt;/p&gt;

&lt;p&gt;Thanks in advance. &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>healthydebate</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
