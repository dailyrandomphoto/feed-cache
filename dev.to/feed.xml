<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üöå How big is the bus factor for Forem's most complicated files?</title>
      <author>Steve Ziegler</author>
      <pubDate>Fri, 18 Jun 2021 19:33:01 +0000</pubDate>
      <link>https://dev.to/stevezieglerva/how-big-is-the-bus-factor-for-forem-s-most-complicated-files-48cm</link>
      <guid>https://dev.to/stevezieglerva/how-big-is-the-bus-factor-for-forem-s-most-complicated-files-48cm</guid>
      <description>&lt;p&gt;Ever since watching Adam Tornhill's excellent talk on &lt;a href="https://www.youtube.com/watch?v=fl4aZ2KXBsQ"&gt;prioritizing technical debt as if time and money matters&lt;/a&gt;, I've wanted a simple way to analyze my own repos. I wanted to replicate Adam's process of identifying code hotspots based on each file's code complexity, change frequency, and recency of the last change. I also wanted to see if I could recreate his "bus factor" analysis to see which files would be most adversely affected if a primary developer was hit by a bus, won the lottery, or just plain quit.&lt;/p&gt;

&lt;p&gt;I was able to create a simplified Python version that generated the hotspot data along with other basic git log metrics. I expected some high bus factor files knowing how many initial file commits Ben made to Forem. Surely there were plenty of complicated files that only he touched!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w4uAxlSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y7cuzi2k17pu6v8e8jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w4uAxlSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y7cuzi2k17pu6v8e8jt.png" alt="Top forem committers over time showing the old timers: Ben, Mac, Molly, Michael, and rhymes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The hotspot list shows some intuitive hotspots for a Rails app like schema.rb and routes.rb which are used to manage the database and url routing. It also shows how user.rb and article.rb are hotspots for Forem which make sense given its focus on content publishing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;üî• Hotspots 
Commits  Comp.   Age    Score  File
  388    63589     1    100.0  db/schema.rb
  427    29318     1     50.7  config/routes.rb
  157    65260     2     41.5  app/javascript/chat/chat.jsx
  359    24357     1     35.4  app/models/user.rb
   98    72604    20     28.8  app/views/admin/configs/show.html.erb
  290    24093     6     28.3  app/models/article.rb
  169    34455     3     23.6  spec/models/user_spec.rb
  154    37107     7     23.2  spec/models/article_spec.rb
   69    48449    59     13.5  spec/requests/api/v0/articles_spec.rb
  177    17235     2     12.4  app/controllers/stories_controller.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So how susceptible are these hotspots to losing a team member? To analyze the bus factor, you can see how many different authors touched the file in the last 365 days.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSDWfP1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlzmrukcee115rub7coy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSDWfP1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlzmrukcee115rub7coy.png" alt="Histogram showing that most hotspots have had lots of authors touch it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luckily, most hotspots have had at least 10 unique authors touch the file. This might be another big benefit of taking Forem open: many people have touched the code and that collective body of knowledge now has 20+ unique authors committing per month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8jqe9no--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjkktcekwsjvviawphlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8jqe9no--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjkktcekwsjvviawphlv.png" alt="Forem has 20+ unique authors committing per month"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that the bus factor with Forem is low and the project should be able to weather changes in contributors. &lt;/p&gt;

&lt;p&gt;If you want to learn more, you can see all of the &lt;a href="http://nerdthoughts.net/git_analysis/forem/output/results.html"&gt;analytics&lt;/a&gt; on the repo and view the &lt;a href="https://github.com/stevezieglerva/git-log-analytics"&gt;source code&lt;/a&gt; on GitHub. &lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Examples of a Good üë©‚Äçüíªüßë‚Äçüíª Developer Portfolio üíº for Your Inspiration ü¶Ñ</title>
      <author>Roden</author>
      <pubDate>Fri, 18 Jun 2021 19:32:50 +0000</pubDate>
      <link>https://dev.to/kerthin/10-examples-of-a-good-developer-portfolio-for-your-inspiration-2f88</link>
      <guid>https://dev.to/kerthin/10-examples-of-a-good-developer-portfolio-for-your-inspiration-2f88</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Hello, Friends. Today, I would like to show you the portfolios that I found on the Internet. You know, I think that a good presentation of yourself is sometimes much more important than your professionalism (within reason, of course). And this also applies to beginners who still have a little development experience and can prove themselves by creating their own website, where they will be able to post their work in the future. In my opinion, this is better than just using github or other services for this. Your own portfolio will give you the opportunity to present yourself and your work the &lt;code&gt;way you want&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Your personal portfolio gives you personality.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also read my post where I created a page for project presentations (I think you might like it) + there is a &lt;code&gt;Demo on CodePen&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/awesome-developer-portfolio-page-for-your-projects-responsive-2npp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;üî•Awesome Developer Portfolio Page for your Projects üì± (responsive)&lt;/h2&gt;
      &lt;h3&gt;Roden „Éª Jun 6 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Well, ladies and Gentlemen, let's get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://brittanychiang.com/#jobs"&gt;&lt;h1&gt;Brittany Chiang&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/ysresYiVgcZd5vVCVs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ysresYiVgcZd5vVCVs/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
I really like the portfolio of this developer, because it is very concise and it seems that there is nothing superfluous in it. It is also very memorable and contains extremely useful and important information. It has a very nice design with a very good color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://riccardozanutta.com/"&gt;&lt;h1&gt;Riccardo Zanutta&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/0B33aNPEAsgYXZeq3n/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/0B33aNPEAsgYXZeq3n/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A good portfolio with a beautiful minimalist style and nice animations.It is definitely worth paying attention to as an example for inspiration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bepatrickdavid.com/"&gt;&lt;h1&gt;Patrick David&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/4M1f8pqzbuIjbjqGFv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4M1f8pqzbuIjbjqGFv/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
An excellent portfolio of an Italian developer and UI / UX designer. The site has an amazing design. The site also has a lot of beautiful animation and a very unusual preloader.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fabianirsara.com/"&gt;&lt;h1&gt;Fabian&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/GZvjfKSvoLzeUCJjGa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GZvjfKSvoLzeUCJjGa/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can say ," What did you find on this site?" Personally, I liked this portfolio for its design focused primarily on the font. This is one of those designs where the font plays a dominant role and sets the rest of the style. Moreover, such a site is not very difficult to create, it can appeal to those who do not really want to bother creating a complex design for their site. &lt;code&gt;But you will have to worry about finding the font&lt;/code&gt; &lt;strong&gt;;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adeolaadeoti.netlify.app/"&gt;&lt;h1&gt;adeola.&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/YExdX9w5vJGi1MoG5R/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/YExdX9w5vJGi1MoG5R/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a Frontend developer from Lagos. A very nice one-page site, which has a beautiful animation. I think many people may like it because of its unusual style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adriengervaix.com/index.html"&gt;&lt;h1&gt;Adrien Gervaix&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/vQ0SPgLpAUVTNlsuQj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vQ0SPgLpAUVTNlsuQj/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a French UI / UX freelance designer. On the site you can see beautiful svg elements and also a number of attractive animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sanjoo.in/"&gt;&lt;h1&gt;SANJOO&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/2dz2GfHf49nVU0QTge/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2dz2GfHf49nVU0QTge/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a freelancer from India. The site is designed in the same style as the &lt;a href="https://fabianirsara.com/"&gt;Fabian&lt;/a&gt; portfolio. Here, too, the design is dominated exclusively by the font.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://findmatthew.com/"&gt;&lt;h1&gt;Matthew Williams&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/KjYlfBmOBMM1cP3Zwa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KjYlfBmOBMM1cP3Zwa/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Quite often found portfolios on the Internet. If you have ever searched the Internet for examples of good portfolios, then perhaps you could come across this example. The portfolio is owned by Matthew Williams, who is a full-stack web developer. A very decent portfolio, but in my opinion slightly outdated in terms of design and site elements. But in general, it can be a good example, especially for beginners.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jacekjeznach.com/"&gt;&lt;h1&gt;Jack.&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Q0AZRlEJphEEdT4nC7/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Q0AZRlEJphEEdT4nC7/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a Polish frontend developer. The site has a beautiful and unusual animation, as well as seamless transitions between the pages of the site. The portfolio has a very minimalistic design, which is very well combined with the selected colors for the site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bruno-simon.com/"&gt;&lt;h1&gt;Bruno Simon&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/k6VW5GNEiAdGa31jPz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/k6VW5GNEiAdGa31jPz/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Amazing portfolio of web developer Bruno Simon, which is made in 3d style with the help of three.js. (and perhaps some other 3d libraries). I'm sure you knew about it, but I think it's a sin not to add this portfolio to your list. It is perfect in everything from the design to the way it provides information (you can even have fun playing bowling or overcoming obstacles on the site). To find out information about the developer, you need to use this car to drive to the appropriate fields with information about the developer himself, as well as about his work. Also on the site there is a physics of elements and characteristic sounds when interacting with them. This is a great portfolio, which in my opinion is extremely difficult to repeat. I think that in this way the author wanted to separate his portfolio from the usual one-page sites, which simply show graphs with developer skills (I never understood why they were needed).&lt;br&gt;
&lt;a href="https://i.giphy.com/media/bkJxx6uKcDtgP9zOsQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bkJxx6uKcDtgP9zOsQ/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Well, that's it, thank you friends, for your time. I hope that this collection will help you and your inspiration to create your beautiful portfolio. (Please just don't use skill charts).&lt;br&gt;
&lt;a href="https://i.giphy.com/media/jwFbMfYthIM6pttfjF/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jwFbMfYthIM6pttfjF/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Portefeuille - a stock-tracker social network app in Ruby on Rails</title>
      <author>EGORIDI</author>
      <pubDate>Fri, 18 Jun 2021 19:32:19 +0000</pubDate>
      <link>https://dev.to/egoridi/portefeuille-a-stock-tracker-social-network-app-in-ruby-on-rails-1ico</link>
      <guid>https://dev.to/egoridi/portefeuille-a-stock-tracker-social-network-app-in-ruby-on-rails-1ico</guid>
      <description>&lt;p&gt;I always thought that developing for finance would require mostly C or other compiled, statically typed language, especially for dealing with the incoming data from the stock market. Nevertheless, I have just accomplished a basic skeleton app (sort of an MVP - a Minimum Viable Product) for a social network of stock tracking using only Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Of course, it required some Javascript (not my thing) for the Ajax forms responses, some HTML for the pages and basic CSS for formatting, yet it was essentially all written in Ruby. And it got pretty fast, I dare to say.&lt;/p&gt;

&lt;p&gt;The first challenge was to have an incoming data flow from stock exchanges. Here the Ruby community shines, for there's always a gem for everything. Using the IEX Cloud Finance API ruby client, as they have a simple way to integrate with my app, provided a plethora of data. They also supply free test data to developers. As all I needed to start was the ticker, company name and last price, while not working with up-to-date data, I got all the tubes connected and working in no time.&lt;/p&gt;

&lt;p&gt;A delicate point was to deal with credentials. Rails 6 provides an elegant way of doing it. There's a master key in your app and all the others, such as AWS and, in this case, IEX, can be safely stored encrypted in the code, without using environmental variables etc.&lt;/p&gt;

&lt;p&gt;From this point on, it was more a matter of choosing a decent layout, creating the necessary entities and table relationships to reflect each user choice of stocks and other users to follow and steal stock ideas from.&lt;/p&gt;

&lt;p&gt;Follow? Did I tell you it is a social network? Yes, and quite an elementary one. But it gave me several ideas regarding the relationship patterns among users. &lt;/p&gt;

&lt;p&gt;For instance: In this case, I chose to allow users to anonymously follow whomever they wanted, without any need of consent (therefore, everything so far is public to the app community) but also without affecting the followed user. And it feels kind of a libertarian thing. People may be interested in you while you may not follow them, even care (or know) about it. This relation is called 'friendship' in the app model. But I may change that, because...&lt;/p&gt;

&lt;p&gt;On the other hand, I plan to create another kind of relationship that should be univocal on both sides, more personal and mutually consensual. More close to people there are already or consider becoming friends. Perhaps even allowing mutual conversation in such a case (integrating a real-time chat app such as my 'Recadin', which unfortunately isn't yet public).&lt;/p&gt;

&lt;p&gt;Anyway, it allowed me to reflect on the various kinds of relationships possible on social networking and how I may be developing these in terms of models and controllers.&lt;/p&gt;

&lt;p&gt;On a side note, the very User model is bound by Devise, the great authentication gem that I used. Looks kind of overkill for this simple app, though, but it performs gracefully and brings all you need just out of the box.&lt;/p&gt;

&lt;p&gt;Also, as I've got some finance and banking experience, I got the chance of thinking about financial assets more on an app way and less on a spreadsheet logic, which is quite interesting. Also gave me the ideas of adding all sort of finance features to the app, starting with asset allocation (weighing your portfolio), betas and various financial measures.&lt;/p&gt;

&lt;p&gt;The code can go better, I may improve it soon, but I already liked the way it already is. Pretty neat, yeah? ;)&lt;/p&gt;

&lt;p&gt;Check it out in my GitHub repo:&lt;br&gt;
&lt;a href="https://github.com/EGORIDI/finance-tracker"&gt;https://github.com/EGORIDI/finance-tracker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And play with it on production if you like:&lt;br&gt;
&lt;a href="https://bearded-goose-39137.herokuapp.com"&gt;https://bearded-goose-39137.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, I only did this app because of the relevant Ruby on Rails Udemy course I am doing now. I highly recommend it:&lt;/p&gt;

&lt;p&gt;The Complete Ruby on Rails Developer Course&lt;br&gt;
&lt;a href="https://www.udemy.com/share/1013z6BEQSdVxbRnw=/"&gt;https://www.udemy.com/share/1013z6BEQSdVxbRnw=/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>heroku</category>
    </item>
    <item>
      <title>Error Handling in JavaScript  (Golang Style)</title>
      <author>Bibek</author>
      <pubDate>Fri, 18 Jun 2021 19:00:16 +0000</pubDate>
      <link>https://dev.to/bibekkakati/error-handling-in-javascript-golang-style-4fj1</link>
      <guid>https://dev.to/bibekkakati/error-handling-in-javascript-golang-style-4fj1</guid>
      <description>&lt;p&gt;In this short article, we are going to see how we can handle error in JavaScript in Golang style.&lt;/p&gt;

&lt;p&gt;I am assuming, you have some experience with JavaScript and you are aware of the issues with error handling like throwing an exception to the parent method from try-catch block or chaining multiple then-blocks and implementing logic inside it. These things can easily mess up with the code making it difficult to read.&lt;/p&gt;

&lt;p&gt;Golang avoids these type of problems by handling errors/exceptions atomically.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-handling-in-golang"&gt;
  &lt;/a&gt;
  Error handling in Golang
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;methodCall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// handle error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// do something with the result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a similar pattern in JavaScript with the help of a &lt;code&gt;try-catch&lt;/code&gt; block like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;methodCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If any error occurs, we are returning the &lt;code&gt;error&lt;/code&gt; in the second position of the array and the &lt;code&gt;result&lt;/code&gt; as &lt;em&gt;null&lt;/em&gt; in the first position.&lt;/p&gt;

&lt;p&gt;If there is no error, we are returning the &lt;code&gt;result&lt;/code&gt; in the first position and &lt;code&gt;error&lt;/code&gt; as &lt;em&gt;null&lt;/em&gt; in the second position.&lt;/p&gt;

&lt;p&gt;Now we can call the &lt;code&gt;getData&lt;/code&gt; method then handle the &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// do something with the result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern of error handling makes it very easy to read and understand the code.&lt;/p&gt;

&lt;p&gt;Let me know what do you think about this pattern.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/error-handling-in-javascript-like-golang"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading üôè&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up üëç&lt;/p&gt;

&lt;p&gt;Feel free to connect üëã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAlyWXzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFF5F5F%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>go</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 18 Jun 2021 18:38:30 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-38dh</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-38dh</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count ‚Äî big or small üéâ&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Catching up with old friends... or whatever else might spark joy ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins this week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/zBhZiVNNQjfTG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/zBhZiVNNQjfTG/giphy.gif" alt='Mae Whitman saying "yassss" in front of Fireworks'&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Python's Collections Module: namedtuple</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 18 Jun 2021 18:26:54 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collections-module-namedtuple-582e</link>
      <guid>https://dev.to/kathanvakharia/python-s-collections-module-namedtuple-582e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As it has &lt;strong&gt;tuple&lt;/strong&gt; in it's name, one thing is clear that it will add some superpowerü¶∏‚Äç‚ôÄÔ∏è to the tuples.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;namedtuple&lt;/code&gt; is a  special type of &lt;code&gt;tuple&lt;/code&gt; that has &lt;em&gt;named&lt;/em&gt; indices. Ofcourse, they also have normal integer indices as they are tuples anway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-namedtuple"&gt;
  &lt;/a&gt;
  Importing namedtuple
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-namedtuple-endraw-creation"&gt;
  &lt;/a&gt;
  &lt;code&gt;namedtuple&lt;/code&gt; creation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Define namedtuple
# 'typename'=&amp;gt; used when printing an obj &amp;amp; low-lvl stuff
# 'fieldnames'=&amp;gt; list of names of indices
&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Student'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                     &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: Create a namedtuple
&lt;/span&gt;
&lt;span class="c1"&gt;# explicitly assigning named indices
&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Shan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Patel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# named indices are inferred
&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Vakharia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
Student(fname='Shan', lname='Patel', age=19)
Student(fname='Kathan', lname='Vakharia', age=19)
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üìë It is important to note that the identifier you use for defining the &lt;code&gt;namedtuple&lt;/code&gt;(&lt;em&gt;Student&lt;/em&gt; here) is the one you have to use while instantiating a &lt;code&gt;namedtuple&lt;/code&gt;. It has nothing to do with the &lt;code&gt;typename&lt;/code&gt; argument-It's just a &lt;em&gt;name&lt;/em&gt; for your custom tuple sub-class. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quoting the python &lt;a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"&gt;documentation&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;collections.namedtuple(typename, field_names,...)&lt;/code&gt;&lt;br&gt;
     - Returns a new tuple subclass named &lt;em&gt;typename&lt;/em&gt;.&lt;br&gt;
We can cross-verify if we want using &lt;code&gt;issubclass&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; issubclass(Student, tuple)
True
&lt;/pre&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# CORRECT WAY
&lt;/span&gt;&lt;span class="n"&gt;s0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"heet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"vakharia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;"""OUTPUT
blah(fname='heet', lname='vakharia')
""""
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# INCORRECT way
&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blah"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"vakharia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;"""OUTPUT
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
NameError: name 'blah' is not defined
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#indexing-namedtuples"&gt;
  &lt;/a&gt;
  Indexing namedtuples
&lt;/h2&gt;

&lt;p&gt;Indexing namedtuple object is very straight-forward. Here's how you do it,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# way1 : using integer indices
# Same like 'plain-tuples'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"First element of s1: {}"&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="c1"&gt;# way 2: using named indices 'NEW'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Element of s2 having named index lname: {}"&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;"""OUTPUT
First element of s1: Shan
Element of s2 having named index lname: Vakharia
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it is a sub-class of &lt;code&gt;tuple&lt;/code&gt;, it inherits all the methods and attributs of &lt;code&gt;tuple&lt;/code&gt;. &lt;br&gt;
However, there are some interesting methods pertaining to &lt;code&gt;namedtuple&lt;/code&gt;. Let's see what are those,&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#classmethod-raw-somenamedtuplemakeiterable-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;classmethod&lt;/em&gt; &lt;code&gt;somenamedtuple._make(iterable)&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
Student(fname='John', lname='Doe', age=34)
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-somenamedtupleasdict-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;somenamedtuple._asdict()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Returns a new &lt;code&gt;dict&lt;/code&gt; which maps field names to their corresponding values,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Student'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;shan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Shan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Patel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kathan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Vakharia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# namedtuple._asdict() 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kathan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
{'fname': 'Shan', 'lname': 'Patel', 'age': 19}
{'fname': 'Kathan', 'lname': 'Vakharia', 'age': 19}
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-somenamedtuplereplacekwargs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;somenamedtuple._replace(**kwargs)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Returns a new instance of the named tuple replacing specified fields with new values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;kathan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Vakharia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# a new tuple will be created with changed fname
&lt;/span&gt;&lt;span class="n"&gt;kathan_v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kathan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Karsh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kathan_v2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Old kathan is still unchanged
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kathan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
Student(fname='Karsh', lname='Vakharia', age=19)
Student(fname='Kathan', lname='Vakharia', age=19)
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that wraps our discussion on &lt;code&gt;namedtuple&lt;/code&gt;. I have intentionally left some minor functionalities because they are too trivial :) However, feel free to check out the &lt;a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._fields"&gt;documentation&lt;/a&gt; for that remaining 5% stuff.&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>Serving static files and creating websites using Python Flask</title>
      <author>Rishabh Tatiraju</author>
      <pubDate>Fri, 18 Jun 2021 17:34:19 +0000</pubDate>
      <link>https://dev.to/rtficial/serving-static-files-and-creating-websites-using-python-flask-41c3</link>
      <guid>https://dev.to/rtficial/serving-static-files-and-creating-websites-using-python-flask-41c3</guid>
      <description>&lt;p&gt;No matter who you are - a business owner or a developer - having a website shall be inevitable at a point in your career. There are a wide variety of options at your disposal - from no-code, dropdown website builders to hardcore web development using JavaScript frameworks like React. &lt;/p&gt;

&lt;p&gt;In this article, we'll talk about another option to build a basic, static website using Python Flask and HTML/CSS + JavaScript, which falls somewhere in between this spectrum of web development choices. This is also a demonstration of how versatile the Flask microframework is!&lt;/p&gt;

&lt;p&gt;Additionally, we'll see how we can publish our website online using Heroku.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can refer to my &lt;a href="https://dev.to/rtficial/building-your-first-restful-api-with-python-flask-1lmc"&gt;previous article&lt;/a&gt; to understand how to setup Flask to make simple API calls. It will also serve as a good base for this tutorial.&lt;/p&gt;

&lt;p&gt;Source code for this tutorial can be found on my &lt;a href="https://github.com/tatirajurishabh/flask-static-tutorial"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;If you haven't already, install Flask with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder structure
&lt;/h2&gt;

&lt;p&gt;Create a folder in a location of your choice and open it using your favorite code editor. This will be our workspace folder.&lt;/p&gt;

&lt;p&gt;In this workspace folder, create a file called &lt;code&gt;main.py&lt;/code&gt;. This file will hold our Flask code with all the routes and configurations.&lt;/p&gt;

&lt;p&gt;Within the same folder, create another folder called &lt;code&gt;static&lt;/code&gt;. Leave it empty for the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask-setup"&gt;
  &lt;/a&gt;
  Flask setup
&lt;/h2&gt;

&lt;p&gt;Open the created &lt;code&gt;main.py&lt;/code&gt; file and import the Flask module in the first line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we initialize the Flask object as usual. However, we pass in two more parameters to the constructor - &lt;code&gt;static_folder&lt;/code&gt; as &lt;code&gt;static&lt;/code&gt; (which is our static directory name) and &lt;code&gt;static_url_path&lt;/code&gt;, which we'll leave as blank.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_url_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-our-webpage"&gt;
  &lt;/a&gt;
  Building our webpage
&lt;/h2&gt;

&lt;p&gt;In order to serve a static webpage, we need to make an HTML file that will hold our webpage content. Create a file within the &lt;code&gt;static&lt;/code&gt; directory called &lt;code&gt;galaxy.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can put any valid HTML code in this file. I have included a basic webpage with some styling below, feel free to edit this code as it suits you!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Galaxy&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Hubble2005-01-barred-spiral-galaxy-NGC1300.jpg/2560px-Hubble2005-01-barred-spiral-galaxy-NGC1300.jpg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;NGC 1300&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Barred spiral galaxy&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#serving-our-webpage"&gt;
  &lt;/a&gt;
  Serving our webpage
&lt;/h2&gt;

&lt;p&gt;Now lets serve this static webpage we just created. In the &lt;code&gt;main.py&lt;/code&gt; file, we'll add a new &lt;code&gt;GET&lt;/code&gt; request with route &lt;code&gt;/galaxy&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/galaxy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will then add the magic code that will automatically serve this static webpage as a route. The Flask object contains a function called &lt;code&gt;send_static_file&lt;/code&gt;, which accepts the name of the file located in your static directory as the parameter, and returns it back as a valid HTML response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/galaxy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_static_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'galaxy.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we'll add the code to execute our Flask server at the bottom of the &lt;code&gt;main.py&lt;/code&gt; file. We'll pass in &lt;code&gt;threaded&lt;/code&gt; as &lt;code&gt;True&lt;/code&gt; to allow multithreaded operations, and set &lt;code&gt;port&lt;/code&gt; to &lt;code&gt;5000&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threaded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end, the entire &lt;code&gt;main.py&lt;/code&gt; file looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_url_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/galaxy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_static_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'galaxy.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threaded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the code by executing the command &lt;code&gt;python main.py&lt;/code&gt;, and navigate to &lt;code&gt;http://localhost:5000/galaxy&lt;/code&gt; or &lt;code&gt;http://127.0.0.1/galaxy&lt;/code&gt; to see the magic!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WHg0yFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/MKf3ZwVx/flask-static-file-galaxy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WHg0yFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/MKf3ZwVx/flask-static-file-galaxy.jpg" alt="Flask Static File Example - Galaxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can similarly add more routes and serve other static HTML files to build a complete website!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-online"&gt;
  &lt;/a&gt;
  Deploying online
&lt;/h2&gt;

&lt;p&gt;Now that you have finished building your pages and added the relevant Flask code, its time to publish your website on the internet for everyone to see. To deploy your website online, we will use a combination of GitHub and Heroku.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-your-code-to-github"&gt;
  &lt;/a&gt;
  Uploading your code to GitHub.
&lt;/h3&gt;

&lt;p&gt;Log in to your GitHub account (or create a new one) and create a new repository. Name it as you wish. Once done, with the working directory set as your workspace folder, run the following commands one after the other.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: make sure you replace &lt;code&gt;&amp;lt;YOUR_USERNAME&amp;gt;&lt;/code&gt; with your GitHub Username and &lt;code&gt;&amp;lt;YOUR_REPOSITORY_NAME&amp;gt;&lt;/code&gt; with the repository name you just created.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
git remote add origin https://github.com/&amp;lt;YOUR_USERNAME&amp;gt;/&amp;lt;YOUR_REPOSITORY_NAME&amp;gt;.git
git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Initial commit"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-heroku"&gt;
  &lt;/a&gt;
  Setting up Heroku
&lt;/h3&gt;

&lt;p&gt;Heroku is a cloud platform that allows us to operate applications in the cloud. We will use Heroku to deploy and publish our website on the web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Publishing to Heroku is free for simple websites with low traffic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a Heroku account on heroku.com and confirm your email address. Once done, go ahead and create a new team and call it anything you wish.&lt;/p&gt;

&lt;p&gt;Within that new team, you will find the &lt;code&gt;New&lt;/code&gt; button. Click on it and select &lt;code&gt;Create New App&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the following page, you will be asked to name your new app and choose a region. Name your website appropriately and select any region. Click &lt;code&gt;Create App&lt;/code&gt; to continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbXYt3Kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Y2v4q6zc/heroku-create.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbXYt3Kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Y2v4q6zc/heroku-create.png" alt="Creating an app on Heroku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subsequently, you will be shown a page where you will find an option to select a deployment method. Select &lt;code&gt;GitHub&lt;/code&gt;. This will reveal an option to connect your Heroku account with your GitHub account. Follow the steps as instructed.&lt;/p&gt;

&lt;p&gt;Once connected, a search bar will appear. Enter your repository name and hit search, and select your repository when it appears in the search results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v82dc8----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/cLS6mVyZ/heroku-github-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v82dc8----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/cLS6mVyZ/heroku-github-1.png" alt="Heroku GitHub search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After linking your repository, you will be shown a section titled &lt;code&gt;Automatic Deploys&lt;/code&gt;. Select the branch (&lt;code&gt;main&lt;/code&gt; by default) where your website code resides, and click &lt;code&gt;Enable Automatic Deploys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-HQ5w1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/zfdBqvLX/heroku-github-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-HQ5w1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/zfdBqvLX/heroku-github-2.png" alt="Heroku Auto Deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This completes our Heroku setup. Moving along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-your-website"&gt;
  &lt;/a&gt;
  Deploying your website
&lt;/h3&gt;

&lt;p&gt;Before deploying your website, Heroku must know in which programming language is the website being served, for which it requires a file called &lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;Procfile&lt;/code&gt; (no extension) in the root of the workspace directory. Include the following line in the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: gunicorn main:app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Gunicorn is an HTTP web server for Python&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We must also create a file called &lt;code&gt;requirements.txt&lt;/code&gt;, that tells Heroku what dependencies to install before running our Flask server. Create this file in the root of the workspace directory, and add the following content in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Flask
gunicorn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, push these changes to GitHub using the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Added Procfile and Requirements"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we enabled Automatic Deploys, Heroku will automatically deploy your website to &lt;code&gt;https://&amp;lt;YOUR_HEROKU_APP_NAME&amp;gt;.herokuapp.com/&lt;/code&gt; in a few minutes. Once done, you can visit that link and see your website live on the internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ending-notes"&gt;
  &lt;/a&gt;
  Ending Notes
&lt;/h2&gt;

&lt;p&gt;We just saw a simple way to serve static webpages using Flask. We also saw how to easily deploy the same online using Heroku. This method is not only limited to HTML webpages, but also any type of file as long as it exists in the &lt;code&gt;static&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;In the upcoming articles of the series, we‚Äôll look at advanced features that we can build using Flask, including authentication (login/signup), and data storage.&lt;/p&gt;

&lt;p&gt;Let me know in the comments section if you have any feedback or queries, and as always, keep coding!&lt;/p&gt;

</description>
      <category>python</category>
      <category>html</category>
      <category>heroku</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python's Collections Module: defaultdict</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 18 Jun 2021 16:46:33 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collections-module-defaultdict-52ol</link>
      <guid>https://dev.to/kathanvakharia/python-s-collections-module-defaultdict-52ol</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It won't surprise you if I tell you it is also a &lt;code&gt;dict&lt;/code&gt; subclass :) &lt;/p&gt;

&lt;p&gt;&lt;code&gt;defaultdict&lt;/code&gt; container type eliminates the chances to get &lt;em&gt;KeyErrors&lt;/em&gt; in case of normal dictionaries while accessing non existent keys.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1Oob5Ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9xtcoi8yko4i6u7jkr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1Oob5Ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9xtcoi8yko4i6u7jkr3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how &lt;code&gt;defaultdict&lt;/code&gt; works,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-defaultdict"&gt;
  &lt;/a&gt;
  Importing defaultdict
&lt;/h3&gt;

&lt;p&gt;Importing &lt;code&gt;defaultdict&lt;/code&gt; is same as in case of &lt;code&gt;Counter&lt;/code&gt; , just make sure about the capitalization.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqox7krv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxkupqv681ujvilz0wd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqox7krv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxkupqv681ujvilz0wd9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before, we move ahead don't forget it is a dictionary internally so we can leverage all the methods of built-in &lt;code&gt;dict&lt;/code&gt; class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-defaultdict-endraw-to-provide-default-values-for-nonexistent-keys"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;defaultdict&lt;/code&gt; to provide default values for non-existent keys
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMCC7Rd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikkipc2wwj8xiq0g0hkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMCC7Rd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikkipc2wwj8xiq0g0hkc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
We can simplify the above process using a &lt;strong&gt;lambda&lt;/strong&gt; function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wMVaYT19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6fdlbmheftviz9slktz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMVaYT19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6fdlbmheftviz9slktz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ü¶ú Moreover, we can also pass the &lt;em&gt;builtin&lt;/em&gt; constructor functions as &lt;code&gt;default_factory&lt;/code&gt; argument.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, I have passed &lt;code&gt;list&lt;/code&gt; which means the default value for any key will be output of &lt;code&gt;list()&lt;/code&gt; ‚û°Ô∏è empty list&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDn7uPuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kndccl8lr662z3fewoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDn7uPuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kndccl8lr662z3fewoa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's all for the &lt;code&gt;defaultdict&lt;/code&gt; container. I hope you are enjoying the series :) If so, leave a like and please comment down below if I've commited any mistake(s)!&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>Tracking Infrastructure Costs for Startups</title>
      <author>Ben Schaechter</author>
      <pubDate>Fri, 18 Jun 2021 16:35:09 +0000</pubDate>
      <link>https://dev.to/bensign/tracking-infrastructure-costs-for-startups-pi1</link>
      <guid>https://dev.to/bensign/tracking-infrastructure-costs-for-startups-pi1</guid>
      <description>&lt;p&gt;As cloud infrastructure service offerings have grown from a small set of services like virtual machines, object storage and networking primitives to an √† la carte menu of hundreds of services, maintaining visibility into what services you're using and paying for can be a job in and of itself. As a startup you are rightfully focused on finding product market fit. However very soon after you achieve product market fit, margins start to become important. The sooner you start tending to cloud costs the easier it will be to get under control when the time comes. This post is meant to give a quick overview of how to think about cloud costs when you're just getting up and running as a startup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost-metrics-should-be-a-company-kpi"&gt;
  &lt;/a&gt;
  Cost Metrics Should be a Company KPI
&lt;/h2&gt;

&lt;p&gt;As you're navigating to finding product market fit you're typically tracking metrics that are customer focused. Depending on the nature of the company, you may be looking at the number of new user registrations, active user engagement metrics or revenue being generated. Typically, companies will also take a look at technical KPIs like performance of the application and the number of bugs/exceptions that are being raised.&lt;/p&gt;

&lt;p&gt;However, one often-forgotten metric that startups fail to track is cloud costs. This is primarily because usage-based infrastructure providers make this information particularly hard to find and track. Startups are usually granted credits from providers like AWS, GCP, Azure and DigitalOcean and forget about them until they expire and are suddenly faced with frantically unpacking their surprise bill. By tracking cost metrics from day 1, you can avoid these scenarios and always know how your infrastructure spend is trending.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-using-cost-allocation-tags-early"&gt;
  &lt;/a&gt;
  Start Using Cost Allocation Tags Early
&lt;/h2&gt;

&lt;p&gt;Instituting certain early behaviors in your organization can save you a lot of time and effort down the line and probably the easiest one to do is leveraging cost allocation tags. Using tags allows you to group infrastructure together by function (i.e. front-end vs back-end), environment (i.e. staging vs production) or even developer (i.e. Molly vs Brian) on your team. By applying tags to your infrastructure, you can see not only how much your infrastructure is trending in aggregate but also see how it is trending by each tag you apply.&lt;/p&gt;

&lt;p&gt;Cost Allocation Tags cost nothing and are usually pretty easy to apply. In the same way you think about writing unit tests, you should consider applying cost allocation tags as a general best-practice behavior. Just like with unit test, the earlier you get started with cost allocation tags the easier it becomes to manage over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-infrastructure-guardrails"&gt;
  &lt;/a&gt;
  Implement Infrastructure Guardrails
&lt;/h2&gt;

&lt;p&gt;Infrastructure providers typically make it incredibly easy for you to provision resources: you can create some new virtual machines in a few clicks on consoles, create backups for storage volumes with the flip of a switch and easily push new files to an object storage as often as you'd like. What we've found from looking at aggregated, anonymized data is that the vast majority of customers have not put into place very basic guardrails that could keep costs in check - mostly from just not knowing these exist.&lt;/p&gt;

&lt;p&gt;Some easy guardrail examples to implement include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementing lifecycle policies on ECR repos to prevent a backlog of unused legacy images.&lt;/li&gt;
&lt;li&gt;Using intelligent tiering on S3 Buckets to pay less money for assets which are no longer accessed.&lt;/li&gt;
&lt;li&gt;Purchasing Savings Plans and Reserved Instances for instances you know will be used consistently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These guardrails typically take very little time for customers to enable but most people don't think about them. They also can have major consequences for saving money that adds up every single month.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outsource-your-cost-monitoring"&gt;
  &lt;/a&gt;
  Outsource your cost monitoring
&lt;/h2&gt;

&lt;p&gt;When you're a startup, your focus should be on your business. Spending time having to learn AWS cost APIs and getting them implemented in the manner you want can easily be an entire engineer's time. As your startup grows to have finance and management counterparts who are curious about costs and accounting for them properly, the asks become bespoke and it takes significant engineering time to get cost data organized and delivered to them that's better spent being outsourced.&lt;/p&gt;

&lt;p&gt;In the same way you look to third parties like Sentry for exception handling rather than rolling your own, sourcing cost monitoring solutions is likely your best bet. &lt;a href="https://vantage.sh/"&gt;Vantage&lt;/a&gt; offers a free tier to all startups with less than $2,500 per month in cloud infrastructure costs. You can get up and running in a few minutes and invite team-members to your Vantage account to share reports with others ‚Äî which is a lot better than getting them on the AWS Console itself.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>startup</category>
    </item>
    <item>
      <title>React Interview Questions - Basic</title>
      <author>Sonu Jha</author>
      <pubDate>Fri, 18 Jun 2021 16:19:42 +0000</pubDate>
      <link>https://dev.to/skj4ua/react-interview-questions-basic-1ja1</link>
      <guid>https://dev.to/skj4ua/react-interview-questions-basic-1ja1</guid>
      <description>&lt;p&gt;Lets Begin with some of the basic ReactJs Interview Questions&lt;/p&gt;

&lt;p&gt;1&amp;gt; How does React Work ?&lt;/p&gt;

&lt;p&gt;Ans. React creates a virtual DOM. when there is any state changes in the DOM a diffing Algorithm runs to check what has changed in the in the virtual DOM. Next Reconciliation takes place where the where it udpates the DOM with the Difference.&lt;/p&gt;

&lt;p&gt;2&amp;gt; What is Context ?&lt;/p&gt;

&lt;p&gt;Ans. Context provides a way to pass data through the component tree without having to pass props down manually at the every level.&lt;/p&gt;

&lt;p&gt;3&amp;gt; what is props in react ?&lt;/p&gt;

&lt;p&gt;Ans. Props accept values in the component that are passed down to a child component.&lt;/p&gt;

&lt;p&gt;primary purpose of props in react is to provide following component functionality :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pass custom data to your react component&lt;/li&gt;
&lt;li&gt;Trigger state changes&lt;/li&gt;
&lt;li&gt;use via this.props.reactProp inside Component's render() method.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4&amp;gt; what is the use of refs ?&lt;/p&gt;

&lt;p&gt;Ans. Refs provide a way to access DOM nodes or React elements created in the render method. &lt;br&gt;
They should be avoided in most cases, however, they can be useful when we need direct access to DOM element or an instance of a component.&lt;/p&gt;

&lt;p&gt;Refs are created using React.createRef() and attached to React elements via the ref attribute.&lt;/p&gt;

&lt;p&gt;Ex. class MyComponent extends React.Component {&lt;br&gt;
  constructor(props) {&lt;br&gt;
    super(props);&lt;br&gt;
    this.myRef = React.createRef();  }&lt;br&gt;
  render() {&lt;br&gt;
    return &lt;/p&gt;;  }&lt;br&gt;
}

&lt;p&gt;5&amp;gt; what is JEST ?&lt;/p&gt;

&lt;p&gt;Ans. Jest is a javascript unit testing framework made by facebook based on jasmine and provides automated mock creation and a jsdom environment. It's often used for testing React Components.&lt;/p&gt;

&lt;p&gt;6&amp;gt; what are the advantages of ReactJs ?&lt;/p&gt;

&lt;p&gt;Ans. 1&amp;gt; Increases the applications performanec with Virtual Dom&lt;br&gt;
     2&amp;gt; JSX makes code easy to read and write&lt;br&gt;
     3&amp;gt; it renders both on client and server side&lt;br&gt;
     4&amp;gt; Easy to integrate with other frameworks&lt;br&gt;
     5&amp;gt; Easy to write UI test case and integration with tools   such as JEST.&lt;/p&gt;

&lt;p&gt;7&amp;gt; How would you write an inline style in React ?&lt;/p&gt;

&lt;p&gt;Ans. &lt;/p&gt;

&lt;p&gt;8&amp;gt; What is React ?&lt;/p&gt;

&lt;p&gt;Ans. React is an open source Javascript library created by facebook for building complex, interactive UIs in web and mobile applications. React's core purpose is to build UI components; It is often referred to as just the "V" (view) in&lt;br&gt;
an "MVC" architecture.&lt;/p&gt;

&lt;p&gt;9&amp;gt; What are major features of ReactJs ?&lt;/p&gt;

&lt;p&gt;Ans. The major features of ReactJs are follows,&lt;/p&gt;

&lt;p&gt;. It uses VirtualDOM instead RealDOM considering that RealDOM manipulation are expensive.&lt;br&gt;
. Support server-side rendering.&lt;br&gt;
. Follows Unidirectional data flow or data binding.&lt;br&gt;
. Uses reuseable/composable UI components to develop the view&lt;/p&gt;

&lt;p&gt;10&amp;gt; Where in a React component should you make an AJAX request ?&lt;/p&gt;

&lt;p&gt;Ans. componentDidMount is where an AJAX request should be made in a React component.&lt;/p&gt;

&lt;p&gt;This method will be executed when the component "mounts" (is added to the DOM) for the first time.&lt;/p&gt;

&lt;p&gt;11&amp;gt; what is the difference between state and props?&lt;/p&gt;

&lt;p&gt;Ans. The state is a data structure that starts with a default value when a Component mounts. It may be mutated across time, mostly as a result of user events.&lt;/p&gt;

&lt;p&gt;Props (short for properties) are a component's configuration. They are received from above and immutable as far as the component receiving them is concerned. &lt;/p&gt;

&lt;p&gt;12&amp;gt; What is the difference between a presentational component and a container component ?&lt;/p&gt;

&lt;p&gt;Ans. Presentational components are concerned with how things look.&lt;br&gt;
     Container components are more concerned with how things work.&lt;/p&gt;

&lt;p&gt;Thanks For Reading :)&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>6 JSON Tools to Improve Your Productivity</title>
      <author>Vishnu Chilamakuru</author>
      <pubDate>Fri, 18 Jun 2021 16:02:16 +0000</pubDate>
      <link>https://dev.to/vishnuchilamakuru/6-json-tools-to-improve-your-productivity-1nif</link>
      <guid>https://dev.to/vishnuchilamakuru/6-json-tools-to-improve-your-productivity-1nif</guid>
      <description>&lt;p&gt;&lt;a href="http://json.org"&gt;JSON&lt;/a&gt;  is a data format with a number of data types such as strings,  booleans, lists, numbers, objects, etc... It is one of the popular, easiest, and lightweight and formats used for interaction between services. In this blog post, I will list down 10 JSON tools that help to improve your parse, format, and visualize JSON in a better and easier way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-json-formatter"&gt;
  &lt;/a&gt;
  1. JSON Formatter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://jsonformatter.org/"&gt;JsonFormatter&lt;/a&gt; helps to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Format/ Beautify JSON&lt;/li&gt;
&lt;li&gt;Validate JSON&lt;/li&gt;
&lt;li&gt;Minify JSON&lt;/li&gt;
&lt;li&gt;Convert JSON to XML, YAML, CSV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXcNTFaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624028346960/9v_y9VMfJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXcNTFaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624028346960/9v_y9VMfJ.png" alt="json-formatter-sample.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-jsonlint"&gt;
  &lt;/a&gt;
  2. JSONLint
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://jsonlint.com/"&gt;JSONLint&lt;/a&gt; is a validator and reformatter for JSON. We can copy and paste, or we can also directly type or input a URL in the editor and let JSONLint validate our messy JSON code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ePHsM1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624028666557/lAn_wglhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ePHsM1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624028666557/lAn_wglhn.png" alt="json-lint-sample.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-jsonview-chrome-plugin"&gt;
  &lt;/a&gt;
  3. JSONView Chrome Plugin
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en"&gt;JSONView&lt;/a&gt; is a Chrome Plugin that offers features of JSON support, Syntax highlighting, Collapsible trees, with indent guides, Clickable URLs, Toggle between raw and parsed JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Um5mG4-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/pU1ohvz2jA-ATpgro8SzrQVKH0-2L-MaMUrYU9luikwUeQ4nOK12vFUC1bPD65Oq7p0S7eTKANCmjN35enKNhe_i" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Um5mG4-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/pU1ohvz2jA-ATpgro8SzrQVKH0-2L-MaMUrYU9luikwUeQ4nOK12vFUC1bPD65Oq7p0S7eTKANCmjN35enKNhe_i" alt="jsonview-sample.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-json-to-pojo"&gt;
  &lt;/a&gt;
  4. JSON to POJO
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://json2csharp.com/json-to-pojo"&gt;JSON2CSHARP&lt;/a&gt; is another cool online tool that helps to convert JSON to C# or Java Classes. This tool pretty much saves time for you in generating classes to map and parse JSON fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NvTYh4om--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624029655343/PxLHE8wvL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvTYh4om--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624029655343/PxLHE8wvL.png" alt="json-to-java-pojo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-json-to-pojo-in-any-programming-language"&gt;
  &lt;/a&gt;
  5. JSON to POJO In any Programming Language
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://app.quicktype.io/"&gt;Quicktype&lt;/a&gt; is another great online tool that helps to convert JSON to classes/structs in any one of the following programming languages. It supports&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;li&gt;Objective-C and many more...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nwFPtBpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624030025792/QYsiCQGq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nwFPtBpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624030025792/QYsiCQGq6.png" alt="json-to-golang-struct.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-json-pretty-printer"&gt;
  &lt;/a&gt;
  6. JSON Pretty Printer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/deftek/json_pp"&gt;JSON Pretty Printer&lt;/a&gt; utility prints JSON data in a legible, indented format. It provides the most benefit to people who are used to the command line. This tool is pretty useful for developers building or consuming JSON-based APIs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://api.plos.org/search\?q\=title:%22Drosophila%22%20and%20body:%22RNA%22\&amp;amp;fl\=id\&amp;amp;start\=1\&amp;amp;rows\=3 | json_pp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response Looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   "response" : {
      "numFound" : 1400,
      "docs" : [
         {
            "id" : "10.1371/journal.pone.0188133"
         },
         {
            "id" : "10.1371/journal.pbio.1000320"
         },
         {
            "id" : "10.1371/journal.pbio.0000060"
         }
      ],
      "start" : 1
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you like the article.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h2&gt;

&lt;p&gt;Hope you find these resources useful. If you like what you read and want to see more about system design, microservices, and other technology-related stuff... You can follow me on &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter - &lt;a href="https://twitter.com/vishnuchi?ref_src=twsrc%5Etfw"&gt;Follow @vishnuchi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe to my weekly newsletter &lt;a href="https://www.getrevue.co/profile/vishnuch"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>The 9 AWS Serverless Databases ALL App Developers &amp; Software Engineers Should Know About üë®‚Äçüíªüí≠
</title>
      <author>Brian H. Hough</author>
      <pubDate>Fri, 18 Jun 2021 15:43:54 +0000</pubDate>
      <link>https://dev.to/aws-builders/the-9-aws-serverless-databases-all-app-developers-software-engineers-should-know-about-2i3k</link>
      <guid>https://dev.to/aws-builders/the-9-aws-serverless-databases-all-app-developers-software-engineers-should-know-about-2i3k</guid>
      <description>&lt;p&gt;Here's all you need to know about the 9 different AWS Databases and their use cases that EVERY app developer and software engineer should know about üë®‚Äçüíªüí≠&lt;/p&gt;

&lt;p&gt;Last week on Friday, I was invited by WhizLabs to give a webinar on &lt;strong&gt;&lt;code&gt;"AWS Databases Demystified With Their Use Cases"&lt;/code&gt;&lt;/strong&gt; in the launch of their #100DaysOfCloud. In episode 6 of the Tech Stack Playbook podcast, I'm covering an in-depth overview of the 9 AWS serverless databases developers should know about, architecture diagrams of how they work, how they can be used in production, and 2 live demos of DynamoDB and RDS.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a glance at what you‚Äôll learn in this episode:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=4bukN5cVv14"&gt;00:00&lt;/a&gt; Webinar Primer&lt;br&gt;
&lt;a href="https://youtu.be/4bukN5cVv14?t=378"&gt;06:18&lt;/a&gt; Overview of a Database&lt;br&gt;
&lt;a href="https://youtu.be/4bukN5cVv14?t=457"&gt;07:37&lt;/a&gt; Brief history of serverless Databases&lt;br&gt;
&lt;a href="https://youtu.be/4bukN5cVv14?t=576"&gt;09:36&lt;/a&gt; Walkthrough of 9 AWS Databases and their use cases + how to get started with your own apps&lt;br&gt;
&lt;a href="https://youtu.be/4bukN5cVv14?t=1848"&gt;30:48&lt;/a&gt; How to set up a DynamoDB table and query your data&lt;br&gt;
&lt;a href="https://youtu.be/4bukN5cVv14?t=2162"&gt;36:02&lt;/a&gt; How to spin up an RDS instance in a VPC and manage/update this database with MySQL Workbench&lt;br&gt;
&lt;a href="https://youtu.be/4bukN5cVv14?t=3792"&gt;1:03:12&lt;/a&gt; Q&amp;amp;A + Quiz Time!&lt;br&gt;
&lt;a href="https://youtu.be/4bukN5cVv14?t=4699"&gt;1:18:19&lt;/a&gt; Conclusion&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4bukN5cVv14"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brief-history-of-serverless-databases"&gt;
  &lt;/a&gt;
  Brief History of Serverless Databases
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I see data as the energy flowing through a home while databases are the electrical grid system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So specifically, data can be the users‚Äô information that could be a username, a password, song, title, author, anything. You can create role-based permissions and share certain types of data with specific groups. Data is the mechanism powering user interactions. The databases define what the users can do in their accounts and in other accounts within the system. And then, data can also determine the rules supporting your software system, and this can be back-end logic.&lt;/p&gt;

&lt;p&gt;This can explain how the system shares data with users, how they get recommendations, for example on a platform like Netflix. See how you get recommendations for the movies you watch! So when we think about front-end and back-end data, now everything is moving towards full-stack.&lt;/p&gt;

&lt;p&gt;This trend has been visible all throughout the history of databases, as you will see here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1d-physical-databases"&gt;
  &lt;/a&gt;
  1D: Physical Databases
&lt;/h3&gt;

&lt;p&gt;The history of databases goes way back to the abacus. That‚Äôs a physical database where the limitation was that you‚Äôre limited to the data that the system itself can process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2d-server-databases"&gt;
  &lt;/a&gt;
  2D: Server Databases
&lt;/h3&gt;

&lt;p&gt;In the next data dimension, we see that server databases are limited to specific devices that you have to manage, you have to maintain, and you have to patch it to provide updates. There‚Äôs a lot of effort that has to be put into it, so it is cost-intensive, requires skilled professionals at both hardware and software, and can take time away from the important development work you probably need to be doing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d-serverless-databases"&gt;
  &lt;/a&gt;
  3D: Serverless Databases
&lt;/h3&gt;

&lt;p&gt;This is when we move towards a three-dimensional space of serverless databases. Here, the users can scale their own databases from an operating system and an internet connection. This is the ecosystem AWS has created for developers, for example, a whole ecosystem behind serverless technologies ‚Äì such as, Virtual Private Cloud (VPC) and Elastic Cloud Compute (EC2).&lt;/p&gt;

&lt;p&gt;Now you are able to compute network servers, but you don‚Äôt have to manage them because they‚Äôre managed by other large facilities, managing a ton of different technologies and servers that you‚Äôre using every day. So AWS databases can help you manage and permit your own servers, you can now borrow compute from someone else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4d-datadriven-development"&gt;
  &lt;/a&gt;
  4D: Data-driven Development
&lt;/h3&gt;

&lt;p&gt;The future is moving rapidly towards prioritizing data-driven development, where it‚Äôll not just be enough to make an app or software, but you will also have to create a data model and manage the data amongst your users.&lt;/p&gt;

&lt;p&gt;Artificial intelligence and machine learning technologies like AWS' SageMaker, DeepComposer, and more provide next generation capacities to turn data into predictive engines. This allows software to anticipate patterns, predict risks or irregularities, and "see" into the future based on the data flowing into the system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-walkthrough-of-9-aws-databases-amp-their-use-cases"&gt;
  &lt;/a&gt;
  A Walkthrough of 9 AWS Databases &amp;amp; Their Use Cases
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#relational-database-service-rds"&gt;
  &lt;/a&gt;
  Relational Database Service (RDS)
&lt;/h3&gt;

&lt;p&gt;Relational Database Service (RDS) is quick to create the framework for a relational AWS database, using a number of different engines. The available DB engines are Aurora from Amazon, PostgreSQL, MySQL, MariaDB, Oracle, and SQL Server. They‚Äôre extremely cost-efficient and highly scalable while maintaining top security. So they allow you to offload read traffic, create and connect to the database within seconds. You can run RDS with a VPC, serverless. Brian efficiently taught the attendees how to create a database using MySQL Workbench and gave some amazing tips for beginners. If you wish to learn more, visit xyz.com.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb"&gt;
  &lt;/a&gt;
  DynamoDB
&lt;/h3&gt;

&lt;p&gt;DynamoDB is one of the most popular AWS database use cases that is a really fast, flexible, no SQL database. It lets you use a primary key to index items and have unique identifiers for all the elements in the database. It offers high performance and availability with single-digit latency. Top companies like Lyft, Airbnb, Capital One, Samsung, and Toyota use this AWS database. DynamoDB is accurately designed for application developers who can scale up and down based on their need to create interactive websites, mobile apps, microservices, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elasticache"&gt;
  &lt;/a&gt;
  Elasticache
&lt;/h3&gt;

&lt;p&gt;Elasticache is used for deploying and scaling in-memory data stores. This can happen serverless, using caching rather than just normal, non-performant loading. Caching is really helpful for improving performance and response time ‚Äì operations happening under a millisecond. As an AWS database use case, it offers fully managed Redis and Memcached. As this AWS database is an in-memory data store, it provides low latency and high elasticity for companies like Airbnb, Tinder, or The Pokemon Company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#neptune"&gt;
  &lt;/a&gt;
  Neptune
&lt;/h3&gt;

&lt;p&gt;Neptune is a fully managed service for graph databases. Graph databases are interrelations between users and the data that users generate for our system. This AWS database simply offers the potential to map how users interact, work together, or maybe share information amongst each other. This building of knowledge graphs and identity graphs is very similar to the operating model of Netflix. Let‚Äôs say that you‚Äôre watching a lot of documentaries, maybe about history, then you‚Äôre going to be recommended more documentaries about history, because other people who also watch historical documentaries, might like this specific segment. So using this AWS database use case, you can also create something like identity graphs and start doing pattern detection. Apache Tinkerpop and Gremlin are two services that can work with Neptune, and help you build a graph database architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redshift"&gt;
  &lt;/a&gt;
  Redshift
&lt;/h3&gt;

&lt;p&gt;Redshift is a relational database management system that is lightning fast and can optimize data at a high scale. With this AWB database, you can implement data encryption and compression as well. Redshift leverages three times better price-performance with high-end AWS designed-hardware. With the help of AWS Nitro Systems, data compression can be accelerated. It is the most widely used cloud data warehouse for combining exabytes of semi-structured and structured data. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quantum-ledger-database-qldb"&gt;
  &lt;/a&gt;
  Quantum Ledger Database (QLDB)
&lt;/h3&gt;

&lt;p&gt;One of the most important AWS databases, QLDB is a fully managed serverless database. It has the potential to automatically scale up to support the user‚Äôs demands. As per your own terms, you can also monitor the metrics. It uses PartiQL, a SQL-compatible query language that provides 2-3x faster execution than the common blockchain frameworks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managed-blockchain"&gt;
  &lt;/a&gt;
  Managed Blockchain
&lt;/h3&gt;

&lt;p&gt;In a managed blockchain, data is stored in a fully managed ledger database but it is not centralized and is distributed among the series of nodes. Hyperledger Fabric or Ethereum makes it easier to join public networks or create and manage private networks. Adding new nodes and members is very easy with this AWS database, while it is highly scalable and secure. The security of transactions is maintained through traceability across the blockchain network as it stores changelogs for the entire history of events. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentdb"&gt;
  &lt;/a&gt;
  DocumentDB
&lt;/h3&gt;

&lt;p&gt;If you‚Äôre interested in leveraging MongoDB for high scalability and availability, then DocumentDB is a great AWS database use case for that. It uses JSON-like data to process millions of requests per second and offers 15 low latency read replicas over three availability zones, within seconds or minutes. And you can scale up very quickly and also have very high availability, up to 99.99%. For instance, you have a MongoDB shell setup and it connects to the DocumentDB cluster with a few instances that are happening within a virtual private cloud. And they‚Äôre all happening within an AWS region. This is highly professional and will allow you to leverage MongoDB services, right within AWS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyspaces"&gt;
  &lt;/a&gt;
  Keyspaces
&lt;/h3&gt;

&lt;p&gt;Keyspaces is a serverless database with Apache Cassandra, which is a distributed, wide-column store, no SQL database management system. This AWS database offers a management system for huge amounts of data with no single point of failure. So you never have to worry about servers anymore, or provisioning or patching, that you are usually concerned with while managing servers in-house. Now you can build apps with low latency that can process data incredibly fast. And you can run Cassandra app codes right from AWS, which is almost like a talk-to-type skill.&lt;/p&gt;

&lt;p&gt;Check out the full recording below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4bukN5cVv14"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-user-brianhhough-"&gt;
  &lt;/a&gt;
  &lt;div class="ltag__user ltag__user__id__259541"&gt;
  
    .ltag__user__id__259541 .follow-action-button {
      background-color: #0015b8 !important;
      color: #fdf9f3 !important;
      border-color: #0015b8 !important;
    }
  
    &lt;a href="/brianhhough" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rY9IPqa7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2kYQV_P---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/259541/2f6a1717-f422-4f36-92d2-295d4b0150db.png" alt="brianhhough image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/brianhhough"&gt;Brian H. Hough&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/brianhhough"&gt;I'm a branding strategist, UI/UX designer and software engineer with a passion for innovation. As an AWS Community Builder &amp;amp; 4x Global Hackathon Winner, I love sharing how tech can change the world.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;p&gt;If you got value from this article, please LIKE üëè, COMMENT üìù, and SHARE ‚Ü©Ô∏è this post with your network, as well as FOLLOW üì≤ my &lt;a href="https://twitter.com/brianhhough"&gt;Twitter&lt;/a&gt;, &lt;a href="https://instagram.com/brianhhough"&gt;Instagram&lt;/a&gt; and &lt;a href="https://linkedin.com/in/brianhhough"&gt;LinkedIn&lt;/a&gt; accounts for further insights on technology, innovation, and our digital world.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
      <category>serverless</category>
      <category>cloudskills</category>
    </item>
  </channel>
</rss>
