<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Security.txt and Why Do I Need It?</title>
      <author>Aaron Saray</author>
      <pubDate>Mon, 27 Sep 2021 19:16:29 +0000</pubDate>
      <link>https://dev.to/laravelhacker/what-is-security-txt-and-why-do-i-need-it-2e22</link>
      <guid>https://dev.to/laravelhacker/what-is-security-txt-and-why-do-i-need-it-2e22</guid>
      <description>&lt;p&gt;In this article we discuss what the &lt;code&gt;security.txt&lt;/code&gt; file is, where it goes, and how you should make use of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-securitytxt-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;security.txt&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;The purpose of the &lt;code&gt;security.txt&lt;/code&gt; file is to provide an avenue for cyber security researchers and other good samaritans to report any security concerns they‚Äôve come across. This should include the best contact person and way to contact them in your organization. It will also contain an expiration date to indicate if this information is still accurate or if it has become stale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-this"&gt;
  &lt;/a&gt;
  Why do we need this?
&lt;/h2&gt;

&lt;p&gt;There‚Äôs nothing worse than finding a security hole on a website and not knowing how to report the findings to the owner. Security researchers - or just kind-hearted people who are bored - need to have an easy way to report such concerns - and it‚Äôs not always clear how to do that.&lt;/p&gt;

&lt;p&gt;If you have a customer service group, sometimes that information gets routed to them. They may not understand the severity of the report or the urgency, or might even discard it. Your support personnel are probably not trained in how to handle security-related content and the sensitivity involved.&lt;/p&gt;

&lt;p&gt;Sometimes it can be confusing where to send the report. Think about someone trying to fill out a contact form: do I sent it to support? To sales? To other? And what about sites that don‚Äôt provide easy contact information - where do I try to contact them, then? Twitter?&lt;/p&gt;

&lt;p&gt;A universal system that is recognizable and accepted by all in the community is needed - and that is &lt;code&gt;security.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-one"&gt;
  &lt;/a&gt;
  How do I make one?
&lt;/h2&gt;

&lt;p&gt;The file is a plain text file named &lt;code&gt;security.txt&lt;/code&gt; with a mime type of text/plain. It must be encoded as &lt;code&gt;UTF-8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It should be placed at the root of your website at &lt;code&gt;/.well-known/security.txt&lt;/code&gt; or at &lt;code&gt;/security.txt&lt;/code&gt;. I tend to like the main root, not the &lt;code&gt;.well-known&lt;/code&gt; folder because I also like to supply other text files like &lt;code&gt;robots.txt&lt;/code&gt; and &lt;code&gt;humans.txt&lt;/code&gt; there. So, this means you can find the Laravel Hacker one at &lt;a href="https://laravelhacker.com/security.txt"&gt;https://laravelhacker.com/security.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fields are defined as a single key on each line followed by a colon and an optional space. You &lt;em&gt;must&lt;/em&gt; have the &lt;code&gt;Contact&lt;/code&gt; and &lt;code&gt;Expires&lt;/code&gt; fields. The contact is an URI - which is most often a mailto link. You could use a link to another webpage if you‚Äôre afraid of spam - but pointing to a link is starting to defeat the purpose. Now you need to make sure that page is also always up and available. The expiration date needs to be a ISO8601 date.&lt;/p&gt;

&lt;p&gt;So, for example, you could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Contact: mailto:guy@smiley.com
Expires: 2022-12-31T18:59:00.000Z
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are additional optional fields available for encryption, acknowledgements, canonical references, and more. You can find out more about this at &lt;a href="https://securitytxt.org/"&gt;the official security.txt website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre looking for the official website for this spec, you can check out &lt;a href="https://securitytxt.org"&gt;https://securitytxt.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see Laravel Hacker‚Äôs, you can check out &lt;a href="https://laravelhacker.com/security.txt"&gt;https://laravelhacker.com/security.txt&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What's your favorite JS testing framework?</title>
      <author>Madza</author>
      <pubDate>Mon, 27 Sep 2021 18:52:47 +0000</pubDate>
      <link>https://dev.to/madza/what-s-your-favorite-js-testing-framework-5c2l</link>
      <guid>https://dev.to/madza/what-s-your-favorite-js-testing-framework-5c2l</guid>
      <description>&lt;p&gt;Nowadays, the industry is dominated by agile development and tight deadlines. Manual unit testing can be complex and time-consuming, so it makes sense to rely on automated frameworks.&lt;/p&gt;

&lt;p&gt;Some of the favorites include: &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;, &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;, &lt;a href="https://jasmine.github.io/"&gt;Jasmine&lt;/a&gt;, &lt;a href="https://karma-runner.github.io/latest/index.html"&gt;Karma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you unit test your code and what's your favorite testing framework?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>testing</category>
    </item>
    <item>
      <title>Dynamically Import ESM Modules From A CDN</title>
      <author>David Dal Busco</author>
      <pubDate>Mon, 27 Sep 2021 18:47:46 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/dynamically-import-esm-modules-from-a-cdn-4ao5</link>
      <guid>https://dev.to/daviddalbusco/dynamically-import-esm-modules-from-a-cdn-4ao5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrnhNy2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AhC1zkJeJsjBGN56FMa5mJA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrnhNy2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AhC1zkJeJsjBGN56FMa5mJA.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@danborn?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Daniel Born&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;What if I told you modern browsers can natively import a single, or sets of functions, of a JavaScript library bundles, at runtime and, from a CDN? Wouldn‚Äôt that open up possibilities?&lt;/p&gt;

&lt;p&gt;Well, good news. This is not an hypothesis but, a fact. Nowadays, all modern browsers can dynamically import &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;JavaScript modules&lt;/a&gt; from content delivery networks ü•≥.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;There are a number of libraries and frameworks that enable module usage when developing web frontend applications. Most apps and libraries will have their files ‚Äúbundled‚Äù using tools like &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;, &lt;a href="https://rollupjs.org/"&gt;Rollup&lt;/a&gt; or with more recent bundler such as &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to these tools, the JavaScript code can be analyzed, build and split into smaller chunks.&lt;/p&gt;

&lt;p&gt;While this approach works like a charm, it has for downside that  ES modules are imported regardless if executed or not.&lt;/p&gt;

&lt;p&gt;For example, if you would use an awesome library such as &lt;a href="https://github.com/jakearchibald/idb-keyval"&gt;idb-keyval&lt;/a&gt; to print out a value stored in IndexedDB but, had for goal to reserve the function to administrators only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idb-keyval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the code is build statically, the third party dependency would be added to the ES modules no matter what. As a result, all users, administrators or not, would have to download the related code even if they would never require it.&lt;/p&gt;

&lt;p&gt;This is when dynamic import, part of the &lt;a href="https://github.com/tc39/proposal-dynamic-importhttps://github.com/tc39/proposal-dynamic-import"&gt;official TC39&lt;/a&gt; proposal and which has been standardized with &lt;a href="https://tc39.es/ecma262/2020/"&gt;ECMAScript 2020&lt;/a&gt;, comes into play.&lt;/p&gt;

&lt;p&gt;It tells the browser to load code on demand and only when it is required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idb-keyval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only the administrators would now have to download the code of the third party library.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Dynamic import is not mandatory, your code is all fine. Bundlers and browsers do an incredible job with the dozens of modules of your libraries and applications. It can be helpful in some situations. As in the above example, or when large modules take time to load. It can help improve boot time performance.&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dynamic-import-cdn-but-why"&gt;
  &lt;/a&gt;
  Dynamic Import + CDN ‚Ä¶ But Why?
&lt;/h3&gt;

&lt;p&gt;Imagine now you are developing an application that interact with a backend. Whether you implement your own API or use a third party cloud provider, the code that interact with your data might commonly find place within your frontend app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIEhR7l0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AYQ5N22V_d5PVclZ7Ups0jg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIEhR7l0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AYQ5N22V_d5PVclZ7Ups0jg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we have seen in previous chapter, if you do not take advantages of ‚Äúdynamic import‚Äù, all users might therefore download the code to interact with the backend (displayed in the schema as ‚Äúservices‚Äù) regardless if they use it or not.&lt;/p&gt;

&lt;p&gt;While this is probably often not an issue - after all, if the application uses an API, there is a good chance that all users use it - it can become one over time because such design is tight to a vendor lock-in.&lt;/p&gt;

&lt;p&gt;Some day, you might have to migrate the application to a new backend or another cloud provider and, the complexity of the upgrade might become a problem.&lt;/p&gt;

&lt;p&gt;To prevent such issue, you might extract the ‚ÄúServices‚Äù to libraries, giving you more flexibility foreseen the pitfall.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBHMt-3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AzppU1zdm2fm1va-X3WRWxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBHMt-3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AzppU1zdm2fm1va-X3WRWxw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, without ‚Äúdynamic import‚Äù, all users might still download all the code, what would be particularly unfortunate if you would ship the application with both ‚Äúold‚Äù and ‚Äúnew‚Äù services at some point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2vTlIbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A09yQFPIiesplbZikZN2tEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2vTlIbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A09yQFPIiesplbZikZN2tEA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs imagine again that everything is in now place. The application leverages ‚Äúdynamic import‚Äù, both ‚Äúold‚Äù and ‚Äúnew‚Äù services have been extracted to separate libs.&lt;/p&gt;

&lt;p&gt;Even though everything works for the best, at this point, the frontend application has direct dependencies (think &lt;code&gt;npm i lib --save&lt;/code&gt;) on these libraries.&lt;/p&gt;

&lt;p&gt;If you make any changes in the services, you have to re-build and re-deploy everything, what can quickly become tasky. Especially if you have got not ‚Äújust‚Äù two services but lots of them.&lt;/p&gt;

&lt;p&gt;This is where the combination of ‚Äúdynamic import‚Äù and CDN is finally going to shine.&lt;/p&gt;

&lt;p&gt;These two strategies applied together can transform the frontend application from a monolith to a modular solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUK1j9OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AQ4niQVYzosDUo96OS6jr7Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUK1j9OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AQ4niQVYzosDUo96OS6jr7Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For each user request, upon a certain condition such as an environment configuration, the frontend application can request at runtime only the function(s), piece of code, needed to perform the specific queries.&lt;/p&gt;

&lt;p&gt;Doing so, not just the user is downloading only what is required to perform the queries but, the application also becomes almost independent of the services. Patching these or even adding a new backend can now be developed and deployed without any changes to the application!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#show-me-some-code"&gt;
  &lt;/a&gt;
  Show Me Some Code
&lt;/h3&gt;

&lt;p&gt;That was a long introduction and explanation, I hope you are still here üòÖ. A few code is often worth a thousand words, therefore here is how you can dynamically import function(s) from a CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ComponentInterface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stencil/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-home.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppHome&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ComponentInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;componentDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cdn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.jsdelivr.net/npm/idb-keyval@6/+es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cdn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;esm&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cdn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚ù§Ô∏è&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/mark&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is presented in a &lt;a href="https://stenciljs.com/"&gt;Stencil&lt;/a&gt; web component to highlight the fact that it works in any modern browsers.&lt;/p&gt;

&lt;p&gt;When the component is mounted, it creates a &lt;code&gt;string&lt;/code&gt; variable that point to the ES modules that needs to be loaded.&lt;/p&gt;

&lt;p&gt;The usage of such a temporary &lt;code&gt;string&lt;/code&gt; value is useful with TypeScript. Without it, the compiler throws an error &lt;code&gt;TS2307: Cannot find module 'https://...' or its corresponding type declarations.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The URL of the library on the CDN can then be used to dynamically import, &lt;code&gt;await import(cdn)&lt;/code&gt;, the functions we are interested in and voil√†, that‚Äôs already it ü•≥.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type Safety
&lt;/h3&gt;

&lt;p&gt;Dynamic import is a native feature, therefore supported out of the box in JavaScript. To improve the syntax with TypeScript, I suggest to use interfaces that can be shared by the consumer (the frontend application) and the libraries (the ‚ÄúServices‚Äù).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DESC4KKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZP2hO1-pD2NH0vLPqDvfJg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DESC4KKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZP2hO1-pD2NH0vLPqDvfJg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For example, we can declare an &lt;code&gt;interface&lt;/code&gt; of a function that says ‚Äúhello‚Äù:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SayHello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;library&lt;/code&gt; can implements it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SayHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
               &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; can also uses the types to improve the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cdn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://..../index.esm.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;say&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SayHello&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cdn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, extracting interfaces and types can also ease new development in the future.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This approach, ‚ÄúDynamic Import + CDN‚Äù, is not just words to me. It is the core architecture of the next major release(s) of &lt;a href="https://deckdeckgo.com"&gt;DeckDeckGo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our main application (source &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/studio"&gt;GitHub&lt;/a&gt;), the core, is an offline first editor for slides that has no dependencies to any API.&lt;/p&gt;

&lt;p&gt;It ‚Äúonly‚Äù consumes a library (source &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/utils/editor"&gt;GitHub&lt;/a&gt;) that describes and exposes the interfaces for endpoints that can be use if a backend is configured.&lt;/p&gt;

&lt;p&gt;As we are currently using in production both &lt;a href="https://firebase.google.com/products/firestore"&gt;Google Firestore&lt;/a&gt; (see &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/providers/firebase"&gt;GitHub&lt;/a&gt;) and &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; (see &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/providers/api"&gt;GitHub&lt;/a&gt;), there are two services that are dynamically imported at runtime through a CDN to perform the operations with these cloud providers.&lt;/p&gt;

&lt;p&gt;Meanwhile, we have also developed a (successful) proof of concept to port our web app to the &lt;a href="https://dfinity.org/"&gt;DFINITY&lt;/a&gt;‚Äôs Internet Computer and we are continuing the work towards this direction because, spoiler alert, it is the future. That is why another service interacts with the blockchain network (see &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/providers/ic"&gt;GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Finally, thanks to the modular architecture, we are able to quickly integrate our editor in any networks if some clients are looking to use it on-premises.&lt;/p&gt;

&lt;p&gt;Summarized: we are future-proof üöÄ.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my &lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next slides!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>programming</category>
    </item>
    <item>
      <title>Not Feeling Like Enough When in Tech</title>
      <author>Deepesha Burse</author>
      <pubDate>Mon, 27 Sep 2021 18:23:15 +0000</pubDate>
      <link>https://dev.to/deepeshaburse/not-feeling-like-enough-when-in-tech-234c</link>
      <guid>https://dev.to/deepeshaburse/not-feeling-like-enough-when-in-tech-234c</guid>
      <description>&lt;p&gt;Most of us, if not all, feel as though we‚Äôre not enough at some point in some context. Since I‚Äôve decided to make a career in tech, I have felt so at multiple points and so thought of writing about it. This blog is my point of view, how I deal with the feeling and what I would expect from the other person if I were to express to someone. My sole aim of writing this blog is to start a conversation and not just be more in touch with our feelings but also become more sensitive towards others.&lt;/p&gt;

&lt;p&gt;Social media has definitely made a huge impact on me, and the large number of amazing, supportive tech communities is something that I am so grateful for. Unfortunately, just like everything else, I feel like the presence of so many communities and social media platforms is a huge contributor to this feeling. I‚Äôll feel perfectly fine until I see this one tweet saying someone has learnt some new technology or a post on LinkedIn talking about this exceptional internship, they got a famous company and although I am very happy to read such a news, it starts the ‚ÄòAm I doing enough? Can I achieve that?‚Äô loop. It makes me criticize everything I‚Äôve achieved yet and if I really belong to this field. &lt;/p&gt;

&lt;p&gt;It‚Äôs not a good feeling to say the least! &lt;/p&gt;

&lt;p&gt;Even though I absolutely understand why we feel this way, and it is very tough to think of it in any other way, it is really worth considering what we‚Äôre comparing to and who. Tech is such a vast field. New things are being made/launched every day, we are making progress in leaps and bounds, and we need to be mindful of that. Keeping up with that and expecting ourselves to know everything is honestly, a little unfair to ourselves. As long as we‚Äôre making some sort of progress every day, and that includes breaks every once in a while (especially when we need one!), scrutinizing yourself over every little thing is not a good idea.&lt;/p&gt;

&lt;p&gt;Another little thing I love to remind myself is, that someone will always be better than me and I will always be better than someone. And this is also very contextual, I might be better than someone in one technology and that same person may be so much better than me in some other technology. &lt;/p&gt;

&lt;p&gt;Talking to loved ones or anyone you are close to helps a lot too! They remind you of the efforts you are putting in and that at the end of the day that‚Äôs all that matters. I have been very lucky with the people in my life, they have always been very supportive of me and not just reminded me that I‚Äôm good at what I do but also that I am much more than just my career. It‚Äôs a great reminder that our career is very important, but it is not the only thing that matters. &lt;/p&gt;

&lt;p&gt;Even though we feel this, I think we are not as sensitive to others or, rather considerate that others go through this too. When someone confides in you that they feel this way, the most common reply I‚Äôve seen is ‚ÄòDon‚Äôt worry you‚Äôll get there some day‚Äô and although that‚Äôs a nice thing to say, I don‚Äôt really think that helps. Talking from experience, instead of being told I will probably get there some day, I would love one addition to that sentence: ‚ÄòYou‚Äôre doing great right now, don‚Äôt compare yourself to them, but, if you do wish to achieve what they did, I‚Äôm sure you can and will get there some day.‚Äô When someone is already feeling low, one ‚Äòyou‚Äôre doing great‚Äô can go a long way, especially when they trust you with their feelings. &lt;/p&gt;

&lt;p&gt;And in case no one has told you today, I think you‚Äôre doing great! :))&lt;/p&gt;

&lt;p&gt;I hope this article pushes you to be kinder to yourself and those around you!&lt;/p&gt;

&lt;p&gt;I would love to hear how you all cope with this feeling, please drop a comment and share how you do, it might help someone!&lt;/p&gt;

</description>
      <category>mentalhealth</category>
      <category>career</category>
      <category>productivity</category>
      <category>growth</category>
    </item>
    <item>
      <title>Reactive Forms in Angular The basics</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Mon, 27 Sep 2021 17:35:07 +0000</pubDate>
      <link>https://dev.to/mcube25/reactive-forms-in-angular-the-basics-3jol</link>
      <guid>https://dev.to/mcube25/reactive-forms-in-angular-the-basics-3jol</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;Angular uses reactive methods to process and manage form. It is easy to use reactive forms to capture user inputs events, validate the inputs and create form models in large angular applications. This enables the tracking of data and changes in the form model in all parts of the application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reactive-form-model-setup"&gt;
  &lt;/a&gt;
  Reactive Form model setup
&lt;/h4&gt;

&lt;p&gt;Reactive forms provide a model-driven approach to handling form inputs whose values change over time. It uses an explicit and immutable approach to manage the form at a given point in time and it is built around observable streams.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-a-basic-form-control"&gt;
  &lt;/a&gt;
  Adding a basic form control
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Register the reactive form module in the app module declaration of an angular app. This module declares a reactive form directives needed to use the reactive form&lt;/li&gt;
&lt;li&gt; Generate a new form control instance and save in the component class&lt;/li&gt;
&lt;li&gt;Register the form control in the template. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at how to implement the above. To use the reactive form controls we need to import ReactiveFormsModule from @angular/forms package and add it to the NgModule imports array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
imports:[
ReactiveFormsModule],
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next is to generate a form control. To register a single form control, we import the form control class and create a new instance of FormControl that is saved as a class property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css']
})

export class CartComponent implements OnInit {
  name = new FormControl('');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By creating this control in the component class, immediate access is gotten to listen for, update and validate the state of the form input.&lt;br&gt;
To register the control in the template, we can add a label to the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label&amp;gt;Name:
&amp;lt;input type="text" [formControl]="name"&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Displaying a form control value can be achieved through value changes from observables where changes are listened for in the template using &lt;code&gt;AsyncPipe&lt;/code&gt;  or in the component class using a subscribe method. It can also be achieved with the value property which gives a snapshot of the current value.&lt;br&gt;
Let us take an example of how to display the value using interpolation in the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label&amp;gt;Name:
&amp;lt;input type="text" [formControl]="name"&amp;gt;
&amp;lt;p&amp;gt;
    value: {{name.value}}
&amp;lt;/p&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The displayed value changes as the form control element is updated. Reactive forms have methods they use to change a control value programmatically. This gives flexibility to update the value without user interaction. A form control instance provides a &lt;code&gt;setValue()&lt;/code&gt; method that updates the value of the form control and validates the structure of the value provided against the control structure. To update the name we can use the setValue method as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; upDateName() {
    this.name.setValue('Kings');
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the template  with a button to simulate name update&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label&amp;gt;Name:
&amp;lt;input type="text" [formControl]="name"&amp;gt;
&amp;lt;p&amp;gt;
    value: {{name.value}}
&amp;lt;/p&amp;gt;
&amp;lt;/label&amp;gt;
&amp;lt;button (click)="upDateName()"&amp;gt;Update Name&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The form model is the source of truth for the control. When the button is clicked the value of the input is changed within the component class overriding its current value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#grouping-form-controls"&gt;
  &lt;/a&gt;
  Grouping form controls
&lt;/h4&gt;

&lt;p&gt;Forms typically contain several related controls. Reactive forms provide two ways of grouping multiple related controls into a single input form.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A form group that defines a dynamic form with a fixed set of controls that can be managed together.&lt;/li&gt;
&lt;li&gt;A form array that defines a dynamic form where controls can be added or removed at run time. 
A single form control instance gives control over a single input field while a form group instance tracks the form state of a group of form control instances. let us take a look at this in play. Import the form group class from the angular packages
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormControl, FormGroup } from '@angular/forms';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a form group instance, associate the form group model and view then save the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastname: new FormControl('')
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Associate the form group model and view in the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form [formGroup]="profileForm "&amp;gt;
    &amp;lt;label&amp;gt;First Name:
        &amp;lt;input type="text" formControlName="firstName"&amp;gt;
        &amp;lt;p&amp;gt;
            value: {{name.value}}
        &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Last Name:
            &amp;lt;input type="text" formControlName="lastName"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{name.value}}
            &amp;lt;/p&amp;gt;
            &amp;lt;/label&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save the form data the form group directive listens for the submit event emitted by the form element which can be bind to a callback function. let us add an ngSubmit event listener to the form tag with the &lt;code&gt;onSubmit()&lt;/code&gt; callback method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form [formGroup]="profileForm " (ngSubmit)="onSubmit()"&amp;gt;
    &amp;lt;label&amp;gt;First Name:
        &amp;lt;input type="text" formControlName="firstName"&amp;gt;
        &amp;lt;p&amp;gt;
            value: {{name.value}}
        &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Last Name:
            &amp;lt;input type="text" formControlName="lastName"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{name.value}}
            &amp;lt;/p&amp;gt;
            &amp;lt;/label&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add the method to the class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  onSubmit() {
console.log(this.profileForm.value);

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a button element to add a button to the form to trigger the form submission&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;button type="submit" [disabled]="profileForm.valid"&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-nested-form-groups"&gt;
  &lt;/a&gt;
  Creating nested form groups
&lt;/h4&gt;

&lt;p&gt;Form groups can accept individual form control instances and other form group instances as children. This makes composing complex form models easier to maintain and logically grouped together. Let us create and take a look at a complex form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastname: new FormControl(''),
    address: new FormGroup({
      street: new FormControl(''),
      city: new FormControl(''),
      state: new FormControl(''),
      zip: new FormControl('')
    })
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Group the nested form in a template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div formGroupName="address"&amp;gt;
   &amp;lt;h5&amp;gt;Address&amp;lt;/h5&amp;gt;
        &amp;lt;label&amp;gt;City:
            &amp;lt;input type="text" formControlName="city"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{city.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Street Name:
            &amp;lt;input type="text" formControlName="street"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{street.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;State Name:
            &amp;lt;input type="text" formControlName="state"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{state.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Zip:
            &amp;lt;input type="text" formControlName="zip"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{zip.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;updateProfile()&lt;/code&gt; method can be used to update the firstName and street of the user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;updateProfile() {
    this.profileForm.patchValue({
      firstName: 'jules',
      address: {
        street: '234 jules miles street'
      }
    })
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;simulate an update by adding a button to the user profile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button (click)="updateProfile()"&amp;gt;update profile&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#generating-controls-using-the-formbuilder-service"&gt;
  &lt;/a&gt;
  Generating controls using the formbuilder service
&lt;/h4&gt;

&lt;p&gt;To generate controls using the formbuilder service, we need to import the formbuilder class then inject the formbuilder service and then generate the form contents.&lt;/p&gt;

&lt;p&gt;import the formbuilder class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormBuilder} from '@angular/forms';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;inject the formbuilder service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor( private fb: FormBuilder) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;generate the controls&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;profileForm = this.fb.group({
      id: [''],
      teacherIds: [''],
      studentIds: [''],
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#validating-form-input"&gt;
  &lt;/a&gt;
  Validating form input
&lt;/h4&gt;

&lt;p&gt;Form validation is used to ensure that user input is complete and correct. To achieve this we import a validator function in the form component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Validators} from '@angular/forms'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add logic and validators to the form fields required&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;profileForm = this.fb.group({
      id: ['', validators.required],
      teacherIds: [''],
      studentIds: [''],
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the validator to the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input placeholder="id" formControlName="id" required /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Display current status of form by using interpolation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt; Form status: {{profileForm.status}} &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see from our discussion that building a form using the reactive form approach makes managing immutable form input data at a given point much easy.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>forms</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The 6 Features of C# 10 you need to know¬†NOWü§Ø</title>
      <author>Dotnetsafer</author>
      <pubDate>Mon, 27 Sep 2021 17:27:00 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/the-6-features-of-c-10-you-need-to-know-now-oja</link>
      <guid>https://dev.to/dotnetsafer/the-6-features-of-c-10-you-need-to-know-now-oja</guid>
      <description>&lt;p&gt;With only &lt;strong&gt;two months left&lt;/strong&gt; until the official release of C# 10 and &lt;strong&gt;Microsoft has opened a discussion&lt;/strong&gt; about the new features and functions of the tenth version of its C# language. These enhancements are those announced in C# 10.0 Preview 7.&lt;/p&gt;

&lt;p&gt;The features and improvements that Microsoft is going to implement in the next version of C# 10 are the following üëá&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#record-types-can-seal%C2%A0tostring"&gt;
  &lt;/a&gt;
  üí• Record types can seal¬†ToString
&lt;/h2&gt;

&lt;p&gt;Now in C# 10.0 version, &lt;strong&gt;you have the ability&lt;/strong&gt; to add the sealed modifier when you override ToString in a record type.&lt;/p&gt;

&lt;p&gt;Sealing the ToString method &lt;strong&gt;evade the compiler from synthesizing&lt;/strong&gt; a ToString method for any derived record types. This function &lt;strong&gt;allows you&lt;/strong&gt; to ensure all derived record types use the ToString method defined in a common base record type.&lt;/p&gt;

&lt;p&gt;Microsoft &lt;strong&gt;advises us&lt;/strong&gt; that this feature requires setting the  element in the csproj file to preview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-record-keyword%C2%A0"&gt;
  &lt;/a&gt;
  What is the Record Keyword?¬†ü§î
&lt;/h3&gt;

&lt;p&gt;If you don't know what I'm talking about, this is normally used to &lt;strong&gt;define a reference type&lt;/strong&gt; that provides built-in functionality for encapsulating data.&lt;/p&gt;

&lt;p&gt;A simple example of what can be done with this is that &lt;strong&gt;you can create record types&lt;/strong&gt; with immutable properties using standard property syntax üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And what better way to understand it than with a simple example from Microsoft üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#filescoped-namespace-declaration"&gt;
  &lt;/a&gt;
  üèÖ File-scoped namespace declaration
&lt;/h2&gt;

&lt;p&gt;You can now use &lt;strong&gt;the new namespace declaration&lt;/strong&gt; form to declare that all subsequently declared declarations are members of the declared namespace üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;NamespaceName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This new syntax, which will be implemented in the new version of C# 10, &lt;strong&gt;will save both vertical and horizontal space&lt;/strong&gt; for the most common namespace declarations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-namespace-keyword%C2%A0"&gt;
  &lt;/a&gt;
  What is namespace keyword?¬†ü§î
&lt;/h3&gt;

&lt;p&gt;To clarify this, the namespace keyword &lt;strong&gt;is used to declare a scope&lt;/strong&gt; that contains a set of related objects. You can use a namespace to &lt;strong&gt;organize&lt;/strong&gt; code elements and to &lt;strong&gt;create&lt;/strong&gt; globally unique types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SampleNamespace&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISampleInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SampleEnum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Nested&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And sure, but‚Ä¶&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-filescope-namespace-declarations"&gt;
  &lt;/a&gt;
  What are file-scope namespace declarations? ü§î
&lt;/h3&gt;

&lt;p&gt;These declarations in particular, &lt;strong&gt;allow you to declare all the types of a file&lt;/strong&gt;, which are in a single namespace.&lt;/p&gt;

&lt;p&gt;To go a little deeper, in this version of C# 10.0, the example is similar to the previous one that has been shown by Microsoft, but &lt;strong&gt;uses a file scope namespace&lt;/strong&gt; declaration üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SampleFileScopedNamespace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISampleInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SampleEnum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#constant-interpolated-strings"&gt;
  &lt;/a&gt;
  ‚ú® Constant interpolated strings
&lt;/h2&gt;

&lt;p&gt;To understand the Constant interpolated strings, first we need to understand String Interpolation.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;$&lt;/em&gt; character &lt;strong&gt;identifies a string literal&lt;/strong&gt; as an interpolated string. An interpolated string is a string literal that might contain interpolation expressions.&lt;/p&gt;

&lt;p&gt;When an interpolated string is resolved to a result string, items with interpolation expressions &lt;strong&gt;are replaced by the string representations&lt;/strong&gt; of the expression results.&lt;/p&gt;

&lt;p&gt;Perfect, now my question is‚Ä¶.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-constant-interpolated-strings-have-in-c-10%C2%A0"&gt;
  &lt;/a&gt;
  What Constant interpolated strings have in C# 10?¬†ü§î
&lt;/h3&gt;

&lt;p&gt;Talking about this new feature that C# version 10.0 will bring is const strings, which can be initialized using string interpolation only if the placeholders are themselves constant strings.&lt;/p&gt;

&lt;p&gt;String interpolations can create &lt;strong&gt;more readable const strings&lt;/strong&gt; as the const strings used in the application are constructed. &lt;br&gt;
Placeholder expressions cannot be numeric constants because those constants are &lt;strong&gt;converted to strings at runtime&lt;/strong&gt;. The culture currently in place, could affect the string representation.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#extended-property%C2%A0patterns"&gt;
  &lt;/a&gt;
  üî• Extended Property¬†Patterns
&lt;/h2&gt;

&lt;p&gt;First, I will explain what are the Extended property patterns. These patterns allow you to have property subpatterns refer to nested members, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;MethodCallExpression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MethodName"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;MethodCallExpression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MethodName"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that this has been clarified‚Ä¶&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-extended-property-patterns-have-in-c-10%C2%A0"&gt;
  &lt;/a&gt;
  What Extended Property Patterns have in C# 10?¬†ü§î
&lt;/h3&gt;

&lt;p&gt;The next functionality that Microsoft discusses is that nested fields or properties &lt;strong&gt;could be referenced&lt;/strong&gt; within a property pattern. The example Microsoft gives is a pattern of the form üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Microsoft tells us that &lt;strong&gt;it will be valid in C# 10.0&lt;/strong&gt; and later, and that this is equivalent to üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is valid in C# version 8.0 and all subsequent versions&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaration-and-assignment-in-same-deconstruction"&gt;
  &lt;/a&gt;
  ‚ö° Declaration and assignment in same deconstruction
&lt;/h2&gt;

&lt;p&gt;This new change implemented by the new version, &lt;strong&gt;allows to remove the restriction&lt;/strong&gt; of previous versions of C#. The example that Microsoft gives us in this case is üëá&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚Ä¶Previously, a deconstruction could assign all values to existing variables, or initialize newly declared variables:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Initialization:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// assignment:&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;restriction&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;eliminated&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="m"&gt;10.0&lt;/span&gt; &lt;span class="err"&gt;üëá&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#global-using-directives"&gt;
  &lt;/a&gt;
  üåê Global using directives
&lt;/h2&gt;

&lt;p&gt;You can now use the global modifier to any using directive. With this you can tell the compiler that the directive must be applied to all source files in the compilation.&lt;/p&gt;

&lt;p&gt;Perfect, but as before‚Ä¶&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-using-directive"&gt;
  &lt;/a&gt;
  What is the using directive? ü§î
&lt;/h3&gt;

&lt;p&gt;This directive allows you to use &lt;strong&gt;types defined&lt;/strong&gt; in a namespace without specifying the entire namespace of that type.&lt;/p&gt;

&lt;p&gt;To summarize, the using directive imports all types from a single namespace, as shown in the following example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can apply &lt;strong&gt;two modifiers&lt;/strong&gt; to a using directive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The global modifier has the same effect as adding the same using directive to every source file in your project. This modifier was introduced in C# 10.0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The static modifier imports the static members and nested types from a single type rather than importing all the types in a namespace.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you liked this article, don't forget to FOLLOW US, so that you can be one of the first to read what's new in¬†.NET.&lt;/p&gt;

&lt;p&gt;And if you are reading this, it means that you belong to the &lt;strong&gt;1% of the people&lt;/strong&gt; who read the articles UNTIL THE END, tell me how many coffees ‚òï you need per day to continue programming, if I see many coffees ‚òï I will not feel alone and &lt;strong&gt;you will make my day!!!&lt;/strong&gt; üòÉüëç&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" alt="a"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
    </item>
    <item>
      <title>What's your next career goal?</title>
      <author>Jeffrey Fate</author>
      <pubDate>Mon, 27 Sep 2021 17:16:55 +0000</pubDate>
      <link>https://dev.to/jeffreyfate/what-s-your-next-career-goal-47ni</link>
      <guid>https://dev.to/jeffreyfate/what-s-your-next-career-goal-47ni</guid>
      <description>&lt;p&gt;Do you have a goal?&lt;/p&gt;

&lt;p&gt;Usually, we set these with our managers...quarterly or yearly or something.&lt;/p&gt;

&lt;p&gt;What's one you're working toward that is really important to you?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>I went STACKless. Here's what it feels like:</title>
      <author>Toheeb Ogunbiyi</author>
      <pubDate>Mon, 27 Sep 2021 17:04:23 +0000</pubDate>
      <link>https://dev.to/toheeb/i-went-stackless-here-s-what-it-feels-like-4c3g</link>
      <guid>https://dev.to/toheeb/i-went-stackless-here-s-what-it-feels-like-4c3g</guid>
      <description>&lt;p&gt;I started an adventure - To design my website through the guides I write.&lt;/p&gt;

&lt;p&gt;And if I'm to start from ground zero, I'll have to do without any frameworks or build tools. &lt;/p&gt;

&lt;p&gt;Meaning, I'm only left with just HTML files and the assets it need.&lt;/p&gt;

&lt;p&gt;Funny enough, the experience is not bad. &lt;/p&gt;

&lt;p&gt;Here are the only 2 things I've to deal with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Folder structure&lt;/li&gt;
&lt;li&gt;Folder path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, the second is not a problem as you'll soon find out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h2&gt;

&lt;p&gt;Getting the homepage to work is as we already do:&lt;/p&gt;

&lt;p&gt;Drop an &lt;code&gt;index.html&lt;/code&gt; file at the root folder.&lt;/p&gt;

&lt;p&gt;Boom! And the homepage will load.&lt;/p&gt;

&lt;p&gt;Where the challenge starts from is loading other web pages and assets.&lt;/p&gt;

&lt;p&gt;But the ideology is the same.&lt;/p&gt;

&lt;p&gt;Say you need &lt;code&gt;about-us&lt;/code&gt; page, all you have to do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder titled &lt;code&gt;about-us&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Drop an &lt;code&gt;index.html&lt;/code&gt; file in it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! Done! &lt;/p&gt;

&lt;p&gt;You'll be able to visit the page at &lt;code&gt;example.com/about-us&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And if you need a category on that URL, you'll need to create a folder for each one.&lt;/p&gt;

&lt;p&gt;Here's how my folder structure looks to accommodate the above scenario&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| toheeb.com/
|-- index.html
|-- plays/
|---- coding-ui-1/
|------ index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates two webpages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The homepage - &lt;code&gt;toheeb.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The article &lt;code&gt;coding-ui-1&lt;/code&gt; in  &lt;code&gt;plays&lt;/code&gt; category. The resulting URL will be &lt;code&gt;toheeb.com/plays/coding-ui-1&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create as much pages as you want using this methodology.&lt;/p&gt;

&lt;p&gt;The second weird thing is referencing assets files, you'll need a path&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folder-path"&gt;
  &lt;/a&gt;
  Folder Path
&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;This is where things can become tricky. You need to consider the location of your file in respect to the location of the asset.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;It'll be tricky if you decide to use relative paths. Save yourself the stress and reference your assets from your domain name.&lt;/p&gt;

&lt;p&gt;(Silly me actually mixed things up. Unnecessary headache. I realised while writing now üòÇ)&lt;/p&gt;

&lt;p&gt;In my case, I have &lt;code&gt;images/&lt;/code&gt; and &lt;code&gt;videos/&lt;/code&gt; on the root folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| toheeb.com/
|-- index.html
|-- images/
|-- videos/
|-- plays/
|---- coding-ui-1/
|------ index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To reference any asset, all I have to do is use the absolute path.&lt;/p&gt;

&lt;p&gt;For example: &lt;code&gt;toheeb.com/images/my-image.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With absolute paths, you won't have to worry calculating if you should use &lt;code&gt;../&lt;/code&gt;, &lt;code&gt;../../&lt;/code&gt;, or &lt;code&gt;../../../../../../../../&lt;/code&gt;. You get the gistüòâ&lt;/p&gt;




&lt;p&gt;With that, you can have your website running fine as expected. &lt;/p&gt;

&lt;p&gt;No build time needs to be calculated by providers such as Netlify, or Vercel.&lt;/p&gt;

&lt;p&gt;That's how my site is currently running. No problems so far with the two pages I currently have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The homepage - &lt;a href="//toheeb.com"&gt;toheeb.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;And one article I still have hidden in plain site -&lt;a href="//toheeb.com/plays/coding-ui-1"&gt;How to code an accessible website with HTML, CSS - by example&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Anyways, have you had any experience with going STACKless? &lt;/p&gt;

&lt;p&gt;This seems straightforward for me at the moment. I might even stick to it till I can't cope. Should I?&lt;/p&gt;

&lt;p&gt;Anyways, let me know your view. &lt;/p&gt;

&lt;p&gt;Unto the next adventure - I'm finding interesting using Github for content planning on my blog. Will share details later.&lt;/p&gt;

&lt;p&gt;And you can follow my adventure, live on Twitter &lt;a href="//twitter.com/toheebdotcom"&gt;@toheebdotcom&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding React Props</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 27 Sep 2021 16:57:03 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/understanding-react-props-1b3d</link>
      <guid>https://dev.to/ubahthebuilder/understanding-react-props-1b3d</guid>
      <description>&lt;p&gt;React props allow us pass attributes to from one component to another component. props stand for &lt;strong&gt;properties&lt;/strong&gt;. We can create two identical components are pass them different props. That way, we create two instances from one component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// import child&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-variations-of-the-same-component-using-props"&gt;
  &lt;/a&gt;
  Create variations of the same component using props
&lt;/h3&gt;

&lt;p&gt;We can create two different versions of &lt;code&gt;Child&lt;/code&gt; by simply assigning different props to the two children, thereby creating two instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// import child&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;girl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;girl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The child functional component must always use the 'props' parameter. Without passing this parameter, you can access any props from a parent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-props-with-class-components"&gt;
  &lt;/a&gt;
  Using props with class components
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;props&lt;/code&gt; can also be used in class-based React components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Child component will now receive props from the Parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./child&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;male&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;female&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#supplying-props-from-a-class-method"&gt;
  &lt;/a&gt;
  Supplying props from a class method
&lt;/h4&gt;

&lt;p&gt;You can supply props into a child component by calling a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;getBoy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getGirl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;girl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getGirl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-default-props"&gt;
  &lt;/a&gt;
  Setting default props
&lt;/h3&gt;

&lt;p&gt;Set default value for the props argument. That way if a prop value is omitted from parent, you can use the default value instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// import child&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// omitted&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;male&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;female&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-spread-syntax-with-props"&gt;
  &lt;/a&gt;
  Using spread syntax with props
&lt;/h3&gt;

&lt;p&gt;You can also pass in an object as props to a component using the spread syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;kingsley&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When then access each individual properties using object destructuring&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;React props allow us pass data into React components. React props should only be passed from a reference (such as parent component). Data from props can be accessed by child and then displayed on the view (template).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-my-newsletter"&gt;
  &lt;/a&gt;
  Join my newsletter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utmgX-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632760933679/nCygke_co.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utmgX-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632760933679/nCygke_co.png" alt="testimonial from subscriber"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I release weekly newsletter on how to grow a strong mindset and succeed as a web developer. Subscribe  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GCP as easy as ABC, a low-code platform for Firestore &amp; Cloud Functions</title>
      <author>Harini Janakiraman</author>
      <pubDate>Mon, 27 Sep 2021 16:44:03 +0000</pubDate>
      <link>https://dev.to/harinilabs/gcp-as-easy-as-abc-a-low-code-platform-for-firestore-cloud-functions-deo</link>
      <guid>https://dev.to/harinilabs/gcp-as-easy-as-abc-a-low-code-platform-for-firestore-cloud-functions-deo</guid>
      <description>&lt;p&gt;It is 2021- you should not be limited to cloud console UI for managing your data and tinkering with CLIs on terminals for deploying cloud functions.¬†&lt;/p&gt;

&lt;p&gt;Google Firestore is great for building and launching scalable apps fast on the serverless stack. There is a drawback though - the Firestore UI looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNq6OxjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A0zkpRVZPQgZfkxA8Uc-vHA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNq6OxjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A0zkpRVZPQgZfkxA8Uc-vHA.png" alt="Firebase UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is hard to navigate the nested document store and the UI is not intuitive. I have personally faced this challenge many times when building products on Firebase. Only developers have access to the data and you don't want to waste their time to build yet another internal portal or data download script. This is one of the main reasons why we built &lt;a href="http://rowy.io/"&gt;&lt;strong&gt;Rowy&lt;/strong&gt;&lt;/a&gt; - an open-source platform to manage your data in an intuitive spreadsheet-like UI. Say goodbye to emailing that "vFinalFinal" Excel sheet.&lt;/p&gt;

&lt;p&gt;But that is just the tip of the iceberg. We also questioned why cloud functions need to be built the way they do now. From starting with a boilerplate code on editors to deploying using CLI on terminals to finally looking at the logs on Google Cloud console. Why?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIjs4Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1IQAIhTIkps2bYA9eETjOA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIjs4Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1IQAIhTIkps2bYA9eETjOA.png" alt="Cloud Function Deploy process today"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We wanted to flip the script by making the process of building and deploying cloud functions &lt;strong&gt;effortless, right in the browser and in the view of your data. No Devops, CI/CD, CLIs, reading docs. It just works.&lt;/strong&gt;¬†&lt;/p&gt;

&lt;p&gt;While we are at it, doesn't it also make sense to have pre-built commonly used functions and extensions to connect to your favorite third-party tools? We did just that.¬†&lt;/p&gt;

&lt;p&gt;With a goal to help developers focus on building their product functionality fast, we built Rowy with ‚ù§Ô∏è. &lt;strong&gt;Our code is&lt;/strong&gt; &lt;a href="https://github.com/rowyio/rowy"&gt;&lt;strong&gt;open-source&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;, you fully own your data and your data stays on your own GCP/Firestore project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9LOB9Ebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AqfzH4gp-A6Bswn9cDbIeGA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9LOB9Ebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AqfzH4gp-A6Bswn9cDbIeGA.gif" alt="Introducing Rowy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-how-you-can-build-on-gcp-within%C2%A0minutes"&gt;
  &lt;/a&gt;
  Let's see how you can build on GCP within¬†minutes
&lt;/h3&gt;

&lt;p&gt;First, you can get setup quickly with this link below to deploy Rowy on your Google Cloud/Firebase project.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rowy.app/deploy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdRz3wdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A9kRUsDrC6tI0RiMH0IMM8g.png" alt="One click deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once setup is complete, you should be able to access your Firestore data in a collaborative spreadsheet-like UI and perform any CRUD operations.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xXftZlBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjfzgSG038qzNpYZal1vSJA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXftZlBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjfzgSG038qzNpYZal1vSJA.png" alt="Rowy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just the start. There is so much more you can do here.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-your-data-model%C2%A0visually"&gt;
  &lt;/a&gt;
  Build your data model¬†visually
&lt;/h4&gt;

&lt;p&gt;As a first step in building any product, you can build your Firestore data model visually by simply clicking the "Add Table" and "Add column" buttons. Choose from &lt;a href="https://docs.rowy.io/field-types/supported-fields"&gt;30+ fields&lt;/a&gt; including complex data fields like images, files, richtext, subtables, code, flexible fields like json and more.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_uRzYBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AMh2632MUi8THinBMgg4NxQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_uRzYBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AMh2632MUi8THinBMgg4NxQ.gif" alt="data model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#powerful-and-rich-spreadsheetlike-ui"&gt;
  &lt;/a&gt;
  Powerful and rich spreadsheet-like UI
&lt;/h4&gt;

&lt;p&gt;Manage your data intuitively on a familiar spreadsheet-like UI with all the functionality and features that come with it.&lt;/p&gt;

&lt;p&gt;‚ö°Ô∏è   Bulk import and export data‚Ää-‚Ääcsv, json&lt;br&gt;
‚ö°Ô∏è   Filter and sort data fields&lt;br&gt;
‚ö°Ô∏è   Create your custom flexible views by locking, freezing, hiding columns. Admins have full control over their data views for different user roles, i.e., you can create data portals customized for your operations team, marketing, developers, PMs¬†... or any user really&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzgtG9TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZJWaWXmZcaoQNlFqi1DspA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzgtG9TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZJWaWXmZcaoQNlFqi1DspA.gif" alt="spreadsheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#collaborate-with-your%C2%A0team"&gt;
  &lt;/a&gt;
  Collaborate with your¬†team
&lt;/h4&gt;

&lt;p&gt;Invite your team members to collaborate on the data and give them specific granular CRUD permissions at a table-level and field-level using custom roles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUCh9PRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AE9I-D6IcsbWlEnfEdMy4Bg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUCh9PRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AE9I-D6IcsbWlEnfEdMy4Bg.gif" alt="collaborate with team"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#connect-to-your-favorite-tools"&gt;
  &lt;/a&gt;
  Connect to your favorite tools
&lt;/h4&gt;

&lt;p&gt;With ready-made extensions to Typeform, SendGrid, Algolia, Twilio, Bigquery and more, you can connect to your favorite third-party tools. Also, you have full flexibility to customize these pre-built extensions or build your own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfrZLSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ArRppYgVuJRZibRau0QhCRw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfrZLSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ArRppYgVuJRZibRau0QhCRw.gif" alt="connect to tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multiple-views-for-the-same-data-collection"&gt;
  &lt;/a&gt;
  Multiple views for the same data collection
&lt;/h4&gt;

&lt;p&gt;You can have more than one way to look at the same Firestore collection by using flexible Table views with unique Table IDs. You can build table and column views for your different team members with unique roles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ilYC2uC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A2iZAKFRT-QIpO2QczceZzQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ilYC2uC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A2iZAKFRT-QIpO2QczceZzQ.gif" alt="multiple view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-values-data-validation-required%C2%A0fields"&gt;
  &lt;/a&gt;
  Default values, data validation, required¬†fields
&lt;/h4&gt;

&lt;p&gt;Allowing non-technical users to make changes to production data is scary. To address this, Rowy not only allows permission and access controls at a table-level and field-level but also the ability to validate any field-level CRUD operations with regex checks to ensure critical data is always accurate before updating your Firestore document. You can also define default values for fields (static, null, custom) and make fields mandatory for row creation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mvNAeq09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A_ibiuM9La4xBt4JFqEtLng.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvNAeq09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A_ibiuM9La4xBt4JFqEtLng.gif" alt="default values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#write-cloud-functions"&gt;
  &lt;/a&gt;
  Write cloud functions
&lt;/h4&gt;

&lt;p&gt;You can build cloud functions that are triggered on any field-level data changes. Easy deploy, no need for terminals, CLIs and boilerplate code. Import npm packages and use any API. Read full documentation &lt;a href="https://docs.rowy.io/field-types/derivative"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBGviF6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A04CC8pGsy6_L-MRbn-_6Fw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBGviF6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A04CC8pGsy6_L-MRbn-_6Fw.gif" alt="write cloud functions"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like what we are building, give Rowy a quick spin on your Firebase project using the button below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rowy.app/deploy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVLLi5wV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ApuLdUWZHhjKa7-SbEytdWA.png" alt="Quick Deploy Link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This runs RowyRun (an open-source, cloud run instance) that operates exclusively on your GCP project.&lt;/em&gt; &lt;strong&gt;&lt;em&gt;We will never have access to your service account or any of your data&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Alternatively, you can also manually install using the steps detailed&lt;/em&gt; &lt;a href="https://docs.rowy.io/install"&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Join the community of developers building on GCP/Firebase using Rowy&lt;/p&gt;

&lt;p&gt;üòª&lt;a href="https://github.com/rowyio/rowy"&gt;Github&lt;/a&gt; üí¨&lt;a href="https://rowy.io/chat"&gt;Discord&lt;/a&gt; üê¶&lt;a href="https://twitter.com/rowyio"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please give us a star on Github to get the latest updates üåü We would love to hear from you and get feedback üëã&lt;/p&gt;

</description>
      <category>news</category>
      <category>webdev</category>
      <category>database</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Ultimate Alchemy: Turning Sand into a Computer - A Comprehensive Guide To Understand Computer Making for Computer Grad's</title>
      <author>Bharath Muppa</author>
      <pubDate>Mon, 27 Sep 2021 16:41:49 +0000</pubDate>
      <link>https://dev.to/entangledcognition/ultimate-alchemy-turning-sand-into-a-computer-a-comprehensive-guide-to-understand-computer-making-for-computer-grad-s-32e5</link>
      <guid>https://dev.to/entangledcognition/ultimate-alchemy-turning-sand-into-a-computer-a-comprehensive-guide-to-understand-computer-making-for-computer-grad-s-32e5</guid>
      <description>&lt;p&gt;Irrespective you are Computer Grad, Computer Engineer or Computer enthusiast, we ought to understand the elegance of the Computing machine and its making process. Then you will start appreciating the Masterminds behind it and their thought process. I Would like to give you an overview of the lifecycle of Computer making which ignited me to start understanding the beauty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-computer"&gt;
  &lt;/a&gt;
  What is a Computer?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;üì¢ A General-purpose computer is a set of hardware units soldered on a motherboard whose working is orchestrated by a software called an Operating system.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition will open up the following questions &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What are these Hardware units? &lt;/li&gt;
&lt;li&gt;Why these are soldered on the motherboard?&lt;/li&gt;
&lt;li&gt;What is an operating system?&lt;/li&gt;
&lt;li&gt;Ok, What happened when I start my laptop?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-what-are-these-hardware-units"&gt;
  &lt;/a&gt;
  1. What are these Hardware units?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4NOVBxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wkcw6tt5skrxh21u8su1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4NOVBxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wkcw6tt5skrxh21u8su1.png" alt="Extracted From Google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many &lt;a href="https://www.watelectronics.com/major-electrical-electronic-components/"&gt;hardware Units&lt;/a&gt; which you need not understand in detail.&lt;br&gt;
But important ones are &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capacitors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capacitors&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A capacitor is a device that can temporarily store an electric charge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resistors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Resistors&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A resistor is a component that resists the flow of current.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transistors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Transistors&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is the most important invention of the 20th century which happened at Bell Labs. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;üì¢ I strongly recommend you to watch this &lt;a href="https://www.youtube.com/watch?v=U4XknGqr3Bo"&gt;video&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#integrated-circuitsic"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Integrated circuits(IC)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Integrated Circuit is basically anything that is composed of tiny resistors, capacitors, transistors that are fabricated on a silicon wafer. &lt;br&gt;
&lt;strong&gt;Eg:&lt;/strong&gt;  &lt;em&gt;amplifiers, oscillators, timers, counter, RAM, Micro Processors, Micro Controllers and so on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are 3 types of IC &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Analog IC&lt;/li&gt;
&lt;li&gt;Digital IC&lt;/li&gt;
&lt;li&gt;Mixed IC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read this article to understand &lt;a href="https://www.investopedia.com/ask/answers/042115/what-are-main-types-chips-produced-semiconductor-companies.asp"&gt;chip categories&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-why-these-are-soldered-on-the-motherboard"&gt;
  &lt;/a&gt;
  2. Why these are soldered on the motherboard?
&lt;/h2&gt;

&lt;p&gt;Having all the Hardware Components alone doesn't make sense, because they need a way to communicate.&lt;/p&gt;

&lt;p&gt;So, A motherboard is simply a printed circuit board where all the other IC, IO peripherals, slots are soldered to provide a Communication channel between all these units.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üì¢ What about Mother Board standards?&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;ATX form factor is used to regulate the design and layout of most pc nowadays, Please check  List of &lt;a href="https://en.wikipedia.org/wiki/Category:Motherboard_form_factors"&gt;form factors&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpgpP1dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3d3wl0j1m927p103r8tr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpgpP1dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3d3wl0j1m927p103r8tr.PNG" alt="Extracted From Powercert videos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üì¢ Architecture Changes&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;If you already knew about motherboard architecture, There were 2 chipsets on the motherboard called North Bridge and South Bridge. Due to new technology requirements, northbridge was integrated into the CPU die itself, examples are Intel's Sandy Bridge and AMD's Fusion processors both released in 2011. The southbridge became redundant and it was replaced by the Platform Controller Hub (PCH) architecture introduced with the Intel 5 Series chipset in 2008. All southbridge features and the remaining I/O functions are managed by the PCH which is directly connected to the CPU via the Direct Media Interface (DMI).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-what-is-an-operating-system"&gt;
  &lt;/a&gt;
  3. What is an Operating system?
&lt;/h2&gt;

&lt;p&gt;Now we have everything we need to use, but there is a missing piece that can orchestrate all these different electronic units. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoHa-Eo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/95fm8j13kb8rwvan3tly.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoHa-Eo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/95fm8j13kb8rwvan3tly.jpg" alt="Copied from Google Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In simple terms, the operating system is a set of files which can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kernelling - Every OS has kernels that connect hardware to application software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.guru99.com/process-management-pcb.html"&gt;Processes Management&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.guru99.com/cpu-scheduling-algorithms.html"&gt;Algorithms&lt;/a&gt; to schedule CPU&lt;/li&gt;
&lt;li&gt;File Management&lt;/li&gt;
&lt;li&gt;Memory Management&lt;/li&gt;
&lt;li&gt;Default software like our favorite &lt;a href="https://microsoft.fandom.com/wiki/Minesweeper"&gt;Minesweeper&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Many &lt;a href="https://www.geeksforgeeks.org/functions-of-operating-system/"&gt;More&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-what-happened-when-i-start-my-laptop"&gt;
  &lt;/a&gt;
  4. What happened when I start my laptop?
&lt;/h2&gt;

&lt;p&gt;Have you ever wondered what happens when you click your laptop power button? &lt;br&gt;
That process of powering and initializing required components is called as Booting process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The power button activates a power supply through the circuit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.partitionwizard.com/partitionmagic/uefi-vs-bios.html"&gt;BIOS/UEFI&lt;/a&gt; which is a firmware provided by your laptop provider which sits on &lt;a href="https://en.wikipedia.org/wiki/EEPROM"&gt;EEPROM&lt;/a&gt;(a type of ROM) will start execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BIOS/UEFI performs a power-on self-test (POST). The POST is a small computer program within the BIOS that checks for hardware failures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If Everything looks good, it will find and place the boot loader and load onto RAM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;üì¢ With PC BIOS, it simply loads and executes the first sector off the disk it decides to boot from, which typically is the first hard disk detected. By convention, the first sector of a hard disk, called the Master Boot Record, contains a DOS partition table listing the locations of the partitions on the disk, and leaves some space for the boot loader. The boot loader is a small program designed to find and launch the PC's operating system.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then Boot Loader will load the kernel into memory, supplies it with some parameters and gives it control.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then You will see either windows or mac or Linux startup screen. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, I hope we understood how a computer works at a high level. Every step has a lot of algorithms/programs behind it. It's our interest to dig into some specific stage and learn more. &lt;/p&gt;

&lt;p&gt;We had talked about chips, motherboards, IC, operating systems But we left with one Interesting Question. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-base-of-all-these-chips"&gt;
  &lt;/a&gt;
  &lt;strong&gt;what is the base of all these chips?&lt;/strong&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#where-is-it-started"&gt;
  &lt;/a&gt;
  &lt;strong&gt;where is it started?&lt;/strong&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#which-makes-all-these-inventions-possible"&gt;
  &lt;/a&gt;
  &lt;strong&gt;which makes all these inventions possible?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQP7GnyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xda9odlwpbmni43qffdf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQP7GnyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xda9odlwpbmni43qffdf.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alchemy-of-sand"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.yourdictionary.com/alchemy"&gt;Alchemy of SAND&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Sand is composed of silica (also known as silicon dioxide) and is the starting point for making a processor. Sand used in the building industry is often yellow, orange or red due to impurities, but the type chosen in the manufacture of silicon is a purer form known as silica sand, which is usually recovered by quarrying.&lt;/p&gt;

&lt;p&gt;To extract the element silicon from the silica, it must be reduced (in other words, have the oxygen removed from it). This is accomplished by heating a mixture of silica and carbon in an electric arc furnace to a temperature in excess of 2,000¬∞C.&lt;/p&gt;

&lt;p&gt;Then This silicon is formed as silicon ingot and goes through a process called PhotoLithography.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---oazxDTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b328zwg695gvjbrer9y0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---oazxDTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b328zwg695gvjbrer9y0.jpg" alt="ASML Process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;üì¢ Note&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.asml.com/en/technology"&gt;ASML&lt;/a&gt; &lt;em&gt;is a global leader in making photolithography machines which are in the size of a big classroom and most expensive. It is the backbone of all chip manufacturers you heard of like Intel, AMD, Samsung, IBM.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might be wondering why only silicon, though there are more semiconducting materials like germanium suitable for computing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Silicon is highly &lt;a href="https://en.wikipedia.org/wiki/Abundance_of_elements_in_Earth%27s_crust"&gt;abundant&lt;/a&gt; on earth&lt;/li&gt;
&lt;li&gt;There are researches going on silicon photonics.&lt;/li&gt;
&lt;li&gt;New Technologies like EXE, EUV are being developed to reduce the bandwidth to &amp;lt;7nm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would like to end this article here to give you a chance to carry forward the spirit of great &lt;a href="https://en.wikipedia.org/wiki/List_of_pioneers_in_computer_science"&gt;computer scientists, mathematicians, and physicists&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#learned-something-help-others-find-this-article"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Learned something? help others find this article.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Youtube playlist. üì¢ &lt;a href="https://www.youtube.com/playlist?list=PLYBvUPvE7KuuZkmTT4t3h3L96rwm7rkWI"&gt;It's time for popcorn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://theconversation.com/beyond-silicon-the-search-for-new-semiconductors-55795"&gt;Search for other material than silicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hpquartz.com/2009/05/24/how-sand-is-transformed-into-silicon-chips/"&gt;sand to silicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.livescience.com/20718-computer-history.html"&gt;Brief History of computers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>computerscience</category>
      <category>hardware</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Getting Started with MicroEJ </title>
      <author>Oderlan Freire</author>
      <pubDate>Mon, 27 Sep 2021 16:38:05 +0000</pubDate>
      <link>https://dev.to/oderlanfreire/getting-started-with-microej-13k0</link>
      <guid>https://dev.to/oderlanfreire/getting-started-with-microej-13k0</guid>
      <description>&lt;p&gt;Based on my first contact with &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; technology and a little bit of research, I decided to make a short introduction to this interesting technology. I am going to talk a little bit about the history behind it, where it can be used and how to install and run a Hello World example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-microej"&gt;
  &lt;/a&gt;
  Who is MicroEJ?
&lt;/h2&gt;

&lt;p&gt;MicroEJ is a French company who has created a development application kit focused on embedded systems and IoT, using C, Java¬Æ technologies and recently JavaScript¬Æ as a programming language. The main objective of this development kit is to help developers create applications for devices which require a high level of performance, compact size, energy efficiency, while still enjoying all the benefits of a high level language such as, Java¬Æ or JavaScript¬Æ.&lt;/p&gt;

&lt;p&gt;Currently, &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; has three products available:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.microej.com/product/vee/"&gt;MICROEJ VEE&lt;/a&gt;: A virtual machine that can run on devices with very low computing power, including microcontrollers, microprocessors and SoT. It includes free libraries and &lt;a href="https://developer.microej.com/mej32-virtual-software-processor-for-embedded-systems/"&gt;MEJ32&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://www.microej.com/product/sdk/"&gt;MICROEJ SDK&lt;/a&gt;: An application development kit, that involves a complete pack of tools and a library, to develop applications that will run on the MICROEJ VEE virtual machine. As well as  that, it is possible to create embedded systems simulators called Virtual Devices.&lt;br&gt;
&lt;a href="https://www.microej.com/product/forge/"&gt;MICROEJ Forge&lt;/a&gt;: A cloud technology that helps developers and companies to store applications, assets, libraries and more.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History:
&lt;/h2&gt;

&lt;p&gt;MicroEJ was founded in 2004, by &lt;a href="https://www.linkedin.com/in/fredrivard/"&gt;Fred Rivard&lt;/a&gt; PhD. and went by  the name of Industrial Smart Software Technology (IS2T). After a first phase of research and development, the company grew and raised investment with Innovacom at the end of 2011. The company was renamed to &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt;, with the challenge of building a virtualization core that needed to be 1000 times lower than Android, to standardize and viabilize the development of applications to more than 10 billion devices that are fabricated every year, embedded devices and IoT. &lt;/p&gt;

&lt;p&gt;Currently, MicroEJ technology runs on 100 million devices, in various industry sectors across manufacturing, smart home, wearables, retail, healthcare, metering, utilities, industrial, consumer, defense, etc.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-on-windows7-8-81-10"&gt;
  &lt;/a&gt;
  Installation on Windows(7, 8, 8.1, 10):
&lt;/h2&gt;

&lt;p&gt;To start the installation, first you have to go to the &lt;a href="https://developer.microej.com/get-started/"&gt;official MicroEJ download page&lt;/a&gt; and &lt;a href="https://repository.microej.com/packages/SDK/21.03/MicroEJ-SDK-Installer-Win64-21.03.exe"&gt;download&lt;/a&gt; the &lt;a href="https://developer.microej.com/get-started/"&gt;SDK&lt;/a&gt;. The site has all the necessary information for installation, including the necessary requirements and information about what comes installed in the SDK. For the SDK to run on your computer,  you will need to have &lt;a href="https://www.oracle.com/br/java/technologies/javase-jre8-downloads.html"&gt;JRE8&lt;/a&gt; installed on your PC.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRB8ZX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d48htmfjcy4swmajo9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRB8ZX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d48htmfjcy4swmajo9f.png" alt="Get Started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then just follow the standard Windows installation by clicking next, accept the terms of use, and follow the process by clicking next until you complete the steps and the IDE installation is finished.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LlbEZhw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6hf3f2fm8rfmc24cx49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LlbEZhw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6hf3f2fm8rfmc24cx49.png" alt="Step one of the installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKmIA2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8rm4hcgvvxmhs5jbdfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKmIA2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8rm4hcgvvxmhs5jbdfq.png" alt="Step two"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eTqUnKp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2276jwrporqzjr33c1gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eTqUnKp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2276jwrporqzjr33c1gp.png" alt="Step three"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IFuEFJKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22u8wiu5nlzx63h7tkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IFuEFJKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22u8wiu5nlzx63h7tkc.png" alt="Step four"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOk-SiBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg0pztwf9h4zjqbpvuqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOk-SiBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg0pztwf9h4zjqbpvuqe.png" alt="Step five"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXFTfKV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbcdxxa73qqmp8lm4vwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXFTfKV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbcdxxa73qqmp8lm4vwt.png" alt="Step six"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#running-the-basic-hello-world-in-java"&gt;
  &lt;/a&gt;
  Running the basic Hello World in Java:
&lt;/h2&gt;

&lt;p&gt;After starting the IDE, creating a MicroEJ program is quite simple, just go to "File" &amp;gt; "New" &amp;gt; "Standalone Application Project"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6-6UGlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ed777te764bsq4ycmo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6-6UGlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ed777te764bsq4ycmo6.png" alt="creating a project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, give the name of the project and the module name will be filled automatically&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TW87cbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdhhlbuy6uk1ee95qd10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TW87cbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdhhlbuy6uk1ee95qd10.png" alt="building the project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click "Finish", the Main.java class is built&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvXLGorr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pizxdq15qj6wrccvap9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvXLGorr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pizxdq15qj6wrccvap9q.png" alt="Main class built"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since this is a Main class with Hello World, to run it just right-click on the file, "Run As" &amp;gt; "MicroEJ Application".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLi-zRNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60kx3jlu4wm8q6zzvni4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLi-zRNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60kx3jlu4wm8q6zzvni4.png" alt="Run as MicroEJ application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running, the console will display the following message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World!
=============== [ Completed Successfully ] ===============

SUCCESS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world-with-microej-template-and-emulator"&gt;
  &lt;/a&gt;
  Hello World with MicroEJ Template and Emulator
&lt;/h2&gt;

&lt;p&gt;To run the &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; &lt;a href="https://repository.microej.com/packages/blue/2.0.2/applications/blue_firmware_applications_1.0.0.zip"&gt;Hello World template&lt;/a&gt;, first, you need to install one of the virtual device emulators, in this case, I'll use the &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-nxp-om13098-lpcxpresso54628/"&gt;NXP OM13098&lt;/a&gt;. After downloading it, save it in your workspace. Run the MicroEJ IDE, go to "Window" &amp;gt; "Preferences" &amp;gt; "MicroEJ" &amp;gt; "Virtual Device menu".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82aw0axn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sup16knlk8drqpvpxjwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82aw0axn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sup16knlk8drqpvpxjwz.png" alt="Virtual Devices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to import the emulator and select the directory where the emulator is saved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQglZuEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krxn1wo0fo63am4149st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQglZuEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krxn1wo0fo63am4149st.png" alt="Select the directory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ohLMg3aE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u035ivqoptxrwt6egnl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ohLMg3aE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u035ivqoptxrwt6egnl2.png" alt="Directory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After selection, simply accept the terms of use of the emulator, click "finish", wait for the import process to finish and click "apply and close".The emulator will be installed and ready for use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JIff-Eil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amwws4iwu7sruosx6mx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JIff-Eil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amwws4iwu7sruosx6mx6.png" alt="License Agreement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LppOSkN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2k6vr4ffgob3blwiblf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LppOSkN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2k6vr4ffgob3blwiblf.png" alt="Importing the Device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CSyJIk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdefs0qh6j2nleour192.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CSyJIk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdefs0qh6j2nleour192.png" alt="Device ready to use"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To demonstrate the execution of the virtual device, I will use the &lt;a href="https://repository.microej.com/packages/blue/2.0.2/applications/blue_firmware_applications_1.0.0.zip"&gt;Hello World template provided by MicroEJ for download&lt;/a&gt;. The template comes ready to run, you only need to import the file to the IDE after unzipping it. Unlike the HelloWorld in the first example, this one has to be executed by right-clicking on the folder as it contains more than one file. Follow the same steps: ‚ÄúRun As‚Äù &amp;gt; ‚ÄúMicroEJ Application‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkk60W_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk8nauj2xbnpw0zrq80a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkk60W_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk8nauj2xbnpw0zrq80a.png" alt="Run as MicroEJ Application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should be the result in the &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-nxp-om13098-lpcxpresso54628/"&gt;NXP OM13098&lt;/a&gt; virtual device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emROt3yK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw08a3zr9bl8qajcsdu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emROt3yK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw08a3zr9bl8qajcsdu1.png" alt="Result in the NXP OM13098 virtual device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember that &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; supports execution on various types of simulators, such as &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-stmicroelectronics-stm32f746g-disco/"&gt;STM32&lt;/a&gt;, &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-espressif-esp32-wroverkit-v41/"&gt;ESP32&lt;/a&gt; and more.&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;br&gt;
    &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; is a very interesting technology, focused on development for embedded devices, that makes it possible to run Java¬Æ technology on microcontrollers with low computing power and even IoT. It has a very easy installation and setup due to the Java¬Æ programming language used. Also the IDE is well known by software developers as they use Eclipse, and they provide a well-organized &lt;a href="https://forum.microej.com"&gt;forum&lt;/a&gt; and &lt;a href="https://developer.microej.com"&gt;specific site for developers&lt;/a&gt; in addition to its own &lt;a href="https://repository.microej.com"&gt;repository&lt;/a&gt;. This provides a great help for those who are starting out or are just curious to know more about how to create Java¬Æ applications for MCUs.&lt;/p&gt;

&lt;p&gt;I am Oderlan Freire from Ocara, Cear√°. I started working at TotalCross in 2021, a student of Information Systems at the Federal University of Cear√°, and I participated in the SharinAgro project, one of the top projects selected for the Microsoft contest IA for Earth.&lt;/p&gt;

</description>
      <category>poweredbymicroej</category>
    </item>
  </channel>
</rss>
