<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>No More Contacting Employees Off Hours in Portugal, Trojan Source Attacks, Another Apple Settlement, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 18 Nov 2021 19:48:21 +0000</pubDate>
      <link>https://dev.to/devteam/no-more-contacting-employees-off-hours-in-portugal-trojan-source-attacks-another-apple-settlement-more-on-devnews-59i1</link>
      <guid>https://dev.to/devteam/no-more-contacting-employees-off-hours-in-portugal-trojan-source-attacks-another-apple-settlement-more-on-devnews-59i1</guid>
      <description>&lt;p&gt;The DevNews editorial team is back for this week's episode of our show where we investigate and discuss the latest and most important software developer news stories&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E4 - Trojan Source Attacks, Features in .NET 6, Another Apple Settlement, and No More Contacting Employees Off Hours...At Least in Portugal&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
      &lt;img id="episode-profile-image" alt="S6:E4 - Trojan Source Attacks, Features in .NET 6, Another Apple Settlement, and No More Contacting Employees Off Hours...At Least in Portugal" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guests:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@_NickBoucher"&gt;Nicholas Boucher&lt;/a&gt; is a PhD Candidate at the University of Cambridge and a graduate of Harvard University. He performs research on the security of systems ranging from machine learning pipelines to compilers. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/captainsafia"&gt;Safia Abdalla&lt;/a&gt; helps build open source web frameworks at Microsoft and helps build the Nteract Solutions universe.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__37984"&gt;
  
    .ltag__user__id__37984 .follow-action-button {
      background-color: #3498DB !important;
      color: #FFFFFF !important;
      border-color: #3498DB !important;
    }
  
    &lt;a href="/captainsafia" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SdWxbhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZuYLEVYS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37984/46b8bf0f-9fb1-4e3b-bd68-3590ea5737b4.jpeg" alt="captainsafia image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/captainsafia"&gt;Safia Abdalla&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/captainsafia"&gt;I make open source at @nteractio, make software at 
@Microsoft, and write books and blogs. Dream big and follow through even bigger.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In this episode, we talk about a new Apple settlement and a big win for workers in Portugal. Then we speak with Nicholas Boucher, PhD candidate at the University of Cambridge about new research into something they are calling a “Trojan Source” attack. And finally, we chat with Safia Abdalla, senior software engineer at Microsoft about new updates and features in the recently released .NET 6.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/devnews/id1525581923"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/1YVbyTFMCLLuORSISOjxlK"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQ0?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjYtvSU1qL0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal-88390107"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s6e4-trojan-source-attacks-cA3UO4y-Tgj/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/231"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 6 sponsors: &lt;a href="https://www.hackatom.org/"&gt;Cosmos HackAtom&lt;/a&gt; &amp;amp; &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevNewsPodcast_FI2YKJLHvJdZ&amp;amp;ocid=aid3038582"&gt;Microsoft Azure&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the show this week! 📰 &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Create a React App (Video)</title>
      <author>Saleh Mubashar</author>
      <pubDate>Thu, 18 Nov 2021 19:29:55 +0000</pubDate>
      <link>https://dev.to/salehmubashar/create-a-react-app-video-4fcj</link>
      <guid>https://dev.to/salehmubashar/create-a-react-app-video-4fcj</guid>
      <description>&lt;p&gt;Hi guys!&lt;/p&gt;

&lt;p&gt;Ok so in many of my tutorials related to react JS, I have not mentioned how to get started with React JS or how to create a react app.&lt;br&gt;
If you want to learn how to create an application in react js and follow along with my tutorials you can watch the below video in which I tell step-by-step how to create a react app and the commands needed.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zLiMsF0UlpI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands-used-in-terminal"&gt;
  &lt;/a&gt;
  Commands Used in terminal
&lt;/h3&gt;

&lt;p&gt;These are the commands I used in the VS code terminal in the video. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new app (replace appname with any name but make sure it is letters only and does not begin with uppercase)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app appname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Change directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd directoryname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open your app or run it in the browser.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope you all found the video useful.&lt;br&gt;
Check out my other &lt;a href="https://discover.hubpages.com/technology/useRef"&gt;tutorials&lt;/a&gt; on &lt;a href="https://hubpages.com/@salehmubashar"&gt;hubpages&lt;/a&gt;.&lt;br&gt;
Also follow me on &lt;a href="https://twitter.com/SyntaxE85827144"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Like my work? Buy me a coffee!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/salehmubashar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
Cheers :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Rust from the beginning, your first program</title>
      <author>Chris Noring</author>
      <pubDate>Thu, 18 Nov 2021 19:27:55 +0000</pubDate>
      <link>https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp</link>
      <guid>https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is the first part in a series about the Rust programming language. You will learn to write, compile and run your first program in Rust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your first program, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;IO, read and write from the console&lt;/li&gt;
&lt;li&gt;Rust projects with Cargo&lt;/li&gt;
&lt;li&gt;Control flow&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Working with files
Advanced&lt;/li&gt;
&lt;li&gt;Ownership &amp;amp; Borrowing&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-rust-and-where-it-shines"&gt;
  &lt;/a&gt;
  Why Rust and where it shines
&lt;/h2&gt;

&lt;p&gt;If you are considering Rust, you most likely have a few different applications in mind that requires speed and effective usage of memory like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Game engines&lt;/strong&gt;, game engines sure demands both resources and speed. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Websites and tools&lt;/strong&gt;, possibly more the tooling than the websites. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operating systems&lt;/strong&gt;, most operating systems at its core tend to be built in high performance languages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Microcontrollers&lt;/strong&gt;. Close to the hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sales pitch that really sells Rust though is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Low speed and resource usage&lt;/strong&gt;. It combines best-in-class speed with a very low resource usage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nice approach to garbage collection and safety&lt;/strong&gt;. Rust solves problems associated with C/C++ such as garbage collection and safety.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strong typing system means high-safety&lt;/strong&gt;. High safety through its strong type system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ergonomics&lt;/strong&gt;. Rust makes systems programming accessible by combining power with ergonomics.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cargo for packages and managing code projects&lt;/strong&gt;. Great features like Cargo for managing projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing built-in&lt;/strong&gt;. Easy to test your code with no extra libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those all sounds good, but let's dive into it and learn to code in it and see what it has to offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-rust"&gt;
  &lt;/a&gt;
  Install Rust
&lt;/h2&gt;

&lt;p&gt;There's a few different ways to install Rust. The recommended way is to use &lt;a href="https://www.rust-lang.org/tools/install"&gt;rustup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you feel like evaluating the language first, check out the &lt;a href="https://play.rust-lang.org/"&gt;playground&lt;/a&gt; that enables you to write code, compile and run it with no install.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-your-first-rust-program"&gt;
  &lt;/a&gt;
  Exercise - Your first Rust program
&lt;/h2&gt;

&lt;p&gt;Give that you've installed Rust, you will have access to the compiler &lt;code&gt;rustc&lt;/code&gt;, an executable you use via the command line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file &lt;em&gt;main.rs&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give it the following content:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile program with &lt;code&gt;rustc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   rust main.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run program:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   ./main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-code-line-by-line"&gt;
  &lt;/a&gt;
  The code line by line
&lt;/h2&gt;

&lt;p&gt;It wasn't much code, but you know have a working application. So what did you do? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Entrypoint&lt;/strong&gt;, you defined an entry point to the application a method &lt;code&gt;main()&lt;/code&gt;. This is you telling Rust where to start the program execution. You used the keyword &lt;code&gt;fn&lt;/code&gt; to define a function, followed by the function name "main" and curly braces:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Printing to the console&lt;/strong&gt;. You used the print macro, &lt;code&gt;println!&lt;/code&gt; and give it a string literal "Hello world".&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;br&gt;
   fn main()&lt;br&gt;
   {&lt;br&gt;
     &lt;b&gt;println!("Hello world");&lt;/b&gt;&lt;br&gt;
   }&lt;br&gt;
   &lt;/pre&gt;

&lt;p&gt;That's it, that's all you needed for a program in Rust. Next, let's look at using variables.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#variables-and-interpolation"&gt;
  &lt;/a&gt;
  Variables and interpolation
&lt;/h2&gt;

&lt;p&gt;You use variables in Rust to store values that you want to refer later to in code. There are different variable types you can work with, but for now, let's learn how to create a variable and use our &lt;code&gt;println!&lt;/code&gt; macro.&lt;/p&gt;

&lt;p&gt;You create a variable by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Chris"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above creates a variable &lt;code&gt;name&lt;/code&gt; that you can refer later to in code.&lt;/p&gt;

&lt;p&gt;You can now print &lt;code&gt;name&lt;/code&gt; with the &lt;code&gt;println!()&lt;/code&gt; macro like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The curly braces &lt;code&gt;{}&lt;/code&gt; interpolates your variable &lt;code&gt;name&lt;/code&gt; and you end up with "Hi Chris" where you to compile and run the code.&lt;/p&gt;

&lt;p&gt;Let's actually do that next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-modify-your-code"&gt;
  &lt;/a&gt;
  Exercise - modify your code
&lt;/h2&gt;

&lt;p&gt;Now that you learned about defining a variable and printing it, lets modify your existing code. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;em&gt;app.rs&lt;/em&gt; to this code:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Chris"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile the program with &lt;code&gt;rustc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   rustc main.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run the program:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   ./main &lt;span class="c"&gt;# it's an exe file on windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now see "Hello Chris"&lt;/p&gt;

&lt;p&gt;Congratulations, you've now started your journey to become a programmer in Rust, or as it's also called, a &lt;em&gt;Rustacean&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You learned about Rust, why and where to use it. Additionally, you've created a program in it and you're now ready to learn more about Rust. Welcome Rustacean :) &lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Guide to blockchain game development</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 18 Nov 2021 19:07:24 +0000</pubDate>
      <link>https://dev.to/logrocket/guide-to-blockchain-game-development-22ho</link>
      <guid>https://dev.to/logrocket/guide-to-blockchain-game-development-22ho</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ikehakinyemi/"&gt;Ikeh Akinyemi&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Blockchain development has grown and evolved rapidly over the past few years and is now being adopted across various spheres of software development. From decentralized applications (DApps), to decentralized finance (DeFi) software, to NFTs, to DAOs, blockchain technology has infiltrated a wide range of industries and serves many use cases.&lt;/p&gt;

&lt;p&gt;In this tutorial, we’ll explore the emerging trend of blockchain game development. Blockchain-based games are also referred to as chain games. Once you understand the basic structure involved in writing a smart contract and deploying it to a blockchain, you can use the tools available within the crypto space to build games.&lt;/p&gt;

&lt;p&gt;We’ll build a lottery game to demonstrate how game development on blockchain works. We’ll also review the basic structure for implementing transactions within a blockchain game. Then, we’ll deploy it to a testnet network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blockchain"&gt;
  &lt;/a&gt;
  What is blockchain?
&lt;/h2&gt;

&lt;p&gt;The underlying data structure of a blockchain is a chain of linked lists, or unique “blocks.” Each block that is added to the chain is automatically linked to the previous block added, and the previous block as well points to its predecessor.&lt;/p&gt;

&lt;p&gt;This chain of linked list is itself a list of transactions. The process through which these blocks are agreed upon before they are added to the list-of-lists data structure is laid the key innovation that blockchains have given us: a protocol. This protocol helps the network decide how blocks are added to the chain.&lt;/p&gt;

&lt;p&gt;This decision-making process gave birth to the decentralized nature of blockchain. Proof of work (PoW), proof of take (PoS), and proof of authority (PoA) are decentralized mechanisms through which these decisions are made and agreed on before a block gets added to the chain.&lt;/p&gt;

&lt;p&gt;The cryptocurrencies that have emerged through these blockchains are a means to incentivize people to run software that secures the networks around these blockchains.&lt;/p&gt;

&lt;p&gt;Blockchain platforms like &lt;a href="https://near.org/"&gt;NEAR&lt;/a&gt; provide a cryptographically secure platform for storing, updating, and removing data from a blockchain using &lt;a href="https://blog.logrocket.com/smart-contract-programming-languages/"&gt;smart contracts&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web3-game-development"&gt;
  &lt;/a&gt;
  Web3 game development
&lt;/h2&gt;

&lt;p&gt;Web3, in the context of blockchains, refers to decentralized apps that run on the blockchain. These are apps that allow anyone to participate without monetizing their personal data. With good knowledge of a programming language that is supported by any of these blockchains, we can start writing smart contracts to build game applications as DApps on the blockchain.&lt;/p&gt;

&lt;p&gt;As the blockchain ecosystem evolves, new paradigms emerge. Drawing inspiration from the De-Fi ecosystem, the blockchain game ecosystem has also evolved to something known as GameFi. GameFi, also referred to as &lt;a href="https://coinmarketcap.com/view/play-to-earn/"&gt;play to earn&lt;/a&gt;, introduces a new way to game by turning its regular users into a governing force behind major decisions within the gaming industry.&lt;/p&gt;

&lt;p&gt;GameFi facilitates a player-owned economy when it comes to trading valuables as well as generating additional income with tokens and &lt;a href="https://blog.logrocket.com/how-to-create-nfts-with-javascript/"&gt;non-fungible tokens&lt;/a&gt;. This means building communities around a particular game, and the users of these games can earn cryptocurrencies or assets that are valuable within the metaverse of the game (and outside it too).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-smart-contracts-on-the-near-blockchain"&gt;
  &lt;/a&gt;
  Writing smart contracts on the NEAR blockchain
&lt;/h2&gt;

&lt;p&gt;For this tutorial, we’ll demonstrate how to build games on the NEAR blockchain by building a sample game project.&lt;/p&gt;

&lt;p&gt;Within this game, we’ll explore how to set up the codebase structure and the programming languages needed to write smart contracts that run on the Near blockchain. When we’re all done, we’ll test our application on the local environment, then deploy our smart contract to a testnet.&lt;/p&gt;

&lt;p&gt;We’re going to clone a starter kit codebase. This repository provides a basic boilerplate on top of which to write more smart contract code as we build the various features of our game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/IkehAkinyemi/lottery-smart-contract.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the above command is successfully executed, change the directory to the &lt;code&gt;lottery-smart-contract&lt;/code&gt; folder. You can open it in any text editor; for this tutorial, we’ll use Visual Studio Code.&lt;/p&gt;

&lt;p&gt;From the terminal, run the &lt;code&gt;code .&lt;/code&gt; command within the folder directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4DJ2ohPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/folder-structure-starter-kit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DJ2ohPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/folder-structure-starter-kit.png" alt="Folder Structure Starter Kit" width="730" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above picture shows the basic folder structure for a NEAR project using &lt;a href="https://www.assemblyscript.org/"&gt;AssemblyScript&lt;/a&gt; for its smart contract.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;script&lt;/code&gt; folder contains the shell source file to compile and deploy the smart contract to the blockchain. The &lt;code&gt;src&lt;/code&gt; contains the &lt;code&gt;lottery&lt;/code&gt; folder, inside of which we’ll write the necessary code for our smart contract.&lt;/p&gt;

&lt;p&gt;The remaining files are configuration files that AssemblyScript needs to understand some of the types defined on Near. The &lt;code&gt;near-sdk-as&lt;/code&gt; library is a collection of packages used to develop NEAR smart contracts in AssemblyScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-a-lottery-game-on-the-near-blockchain"&gt;
  &lt;/a&gt;
  How to build a lottery game on the NEAR blockchain
&lt;/h2&gt;

&lt;p&gt;With this game, we’ll explore some of the basic concepts of writing smart contracts on the Near blockchain using AssemblyScript.&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; command to install the &lt;code&gt;near-sdk-as&lt;/code&gt; library and any necessary dependencies.&lt;/p&gt;

&lt;p&gt;Next, create a folder called &lt;code&gt;assembly&lt;/code&gt;. Inside this folder, create two files: &lt;code&gt;index.ts&lt;/code&gt; and &lt;code&gt;model.ts&lt;/code&gt;. The &lt;code&gt;model.ts&lt;/code&gt; file contains the different object types we’ll be using throughout our code in the &lt;code&gt;index.ts&lt;/code&gt; file. The &lt;code&gt;model.ts&lt;/code&gt; file contains the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;luckyNum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LO-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we define a &lt;code&gt;Lottery&lt;/code&gt; type. This represents the structure of the lottery game type. We’ll define inside it the different interfaces we want to make available — both the public and private interfaces — just like the private &lt;code&gt;luckyNum&lt;/code&gt; variable that’s an unsigned integer.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;RNG&lt;/code&gt; (random number generator) object, we initialized the &lt;code&gt;this.id&lt;/code&gt; variable of the game to a random number. And in the &lt;code&gt;randGen&lt;/code&gt; variable, we’re just initializing the &lt;code&gt;RNG&lt;/code&gt; object, while with the &lt;code&gt;randGen.next&lt;/code&gt; function, we’re generating a random number using the seed values, &lt;code&gt;&amp;lt;u32&amp;gt;(1, u32.MAX_VALUE)&lt;/code&gt;, that were passed into it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-function-interfaces"&gt;
  &lt;/a&gt;
  Defining function interfaces
&lt;/h3&gt;

&lt;p&gt;Now let’s define the &lt;code&gt;play&lt;/code&gt; feature of our game. This will contain the code snippet responsible for generating a random number within a set range of integers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logging&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You picked: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;pickedNum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickedNum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;luckyNum&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the &lt;code&gt;play&lt;/code&gt; function, any player can call it to generate a random number using the &lt;code&gt;RNG&lt;/code&gt; object. Then, we imported the &lt;code&gt;logging&lt;/code&gt; object, which gives us access to output values on the native console — that’s our local machine terminal.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;play&lt;/code&gt; function returns a &lt;code&gt;bool&lt;/code&gt; value, and this &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value is the result of comparing the &lt;code&gt;pickedNum&lt;/code&gt; against &lt;code&gt;this.luckyNum&lt;/code&gt; to determine whether the guessed number is equal to the &lt;code&gt;luckyNum&lt;/code&gt; defined in the lottery game.&lt;/p&gt;

&lt;p&gt;Next, we’ll define the &lt;code&gt;reset&lt;/code&gt; function. As the name implies, this will enable us to reset the &lt;code&gt;this.luckyNum&lt;/code&gt; to a new random number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;luckyNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rerun this function to generate a new random luckyNum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;luckyNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randNum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The luckyNum has been reset to another number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we generated another new random number. Using the &lt;code&gt;assert&lt;/code&gt; function, we compared it against the current &lt;code&gt;this.luckyNum&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If the comparison evaluates &lt;code&gt;true&lt;/code&gt;, then the rest of the function’s code continues to execute. If not, the function halts at that point and returns the assertion message, &lt;code&gt;Rerun this function to generate a new random luckyNum&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;assert&lt;/code&gt; is true, we assign the variable &lt;code&gt;this.luckyNum&lt;/code&gt; to the newly generated number, &lt;code&gt;randNum&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-the-raw-player-endraw-object"&gt;
  &lt;/a&gt;
  Defining the &lt;code&gt;Player&lt;/code&gt; object
&lt;/h3&gt;

&lt;p&gt;For each player of the lottery game, we’ll define a basic type structure. This structure presents the player within our game.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;model.ts&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PersistentVector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AccountID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AccountId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PersistentVector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PersistorVector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// choose a unique prefix per account&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Player&lt;/code&gt; object type contains two interfaces: the &lt;code&gt;this.id&lt;/code&gt; variable, which is an &lt;code&gt;AccountID&lt;/code&gt; type, and &lt;code&gt;this.guesses&lt;/code&gt;, which is an array of boolean values.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;PersistentVector&lt;/code&gt; data structure is an array datatype. During initialization, we use the &lt;code&gt;Context&lt;/code&gt; object to get the current caller of this smart contract through the &lt;code&gt;Context.sender&lt;/code&gt; function. Then, we assign it to &lt;code&gt;this.id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;this.guesses&lt;/code&gt;, we initialize a new &lt;a href="https://near.github.io/near-sdk-as/modules/_sdk_core_assembly_collections_persistentvector_.html"&gt;&lt;code&gt;PersistentVector&lt;/code&gt;&lt;/a&gt; object and assign it to &lt;code&gt;this.guesses&lt;/code&gt;. Then, using the &lt;code&gt;push&lt;/code&gt; function interface available on &lt;code&gt;PersistorVector&lt;/code&gt;, we append a new boolean value, &lt;code&gt;isRight&lt;/code&gt;, into the &lt;code&gt;this.guesses&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Let’s define other types and variables that we’ll use while defining the core functions in the next section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;exsport&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;500000000000000000000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WinningPrize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100000000000000000000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Gas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PersistentMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AccountID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#defining-core-game-functions"&gt;
  &lt;/a&gt;
  Defining core game functions
&lt;/h3&gt;

&lt;p&gt;Create an &lt;code&gt;index.ts&lt;/code&gt; file inside the &lt;code&gt;assembly&lt;/code&gt; folder. This is where we’ll define the core functions of our lottery game.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;index.ts&lt;/code&gt; file, define a &lt;code&gt;pickANum&lt;/code&gt; function, as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./model&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pickANum&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;verifyDeposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachedDeposit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;verifyDeposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deposit&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You need 0.5 NEAR tokens to pick a number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above function, we’re verifying a deposit of 0.5 NEAR tokens before any player of the lottery game can invoke any call to play a game on the smart contract. This way, our players are paying a certain amount of money before playing the game. Also, once a player plays, we update the profile of that player in the players data structure.&lt;/p&gt;

&lt;p&gt;Next, let’s define the function that will handle paying a winning player by randomly generating the right number that’s equal to the &lt;code&gt;luckyNum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Gas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WinningPrize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./model&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ContractPromiseBatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logging&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;on_payout_complete&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This winner has successfully been paid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;payout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;to_winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ContractPromiseBatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contractName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;to_winner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WinningPrize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;to_winner&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;function_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on_payout_complete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Gas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above functions help us make transfer transactions to the winners of the lottery game. With the &lt;code&gt;ContractPromiseBatch&lt;/code&gt; object, we create and set up a transfer transaction to the address we passed in as the argument to the &lt;code&gt;create&lt;/code&gt; method. Then, with the &lt;code&gt;transfer&lt;/code&gt; function, we make a transaction worth of the token, &lt;code&gt;WinningPrize&lt;/code&gt;, that was passed into it.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;function_call&lt;/code&gt; function, we then schedule a function call for when the transaction has been successfully sent. For this game, the function we intend to call on a successful transaction is the &lt;code&gt;on_payout_complete&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;For the purpose of this tutorial, we won’t focus on setting up a &lt;a href="https://docs.near.org/docs/concepts/networks#testnet"&gt;NEAR Testnet&lt;/a&gt; or &lt;a href="https://wallet.testnet.near.org/"&gt;Testnet wallet&lt;/a&gt;, but I would encourage you to check out the links to learn more about the various networks that exists in the NEAR ecosystem.&lt;/p&gt;

&lt;p&gt;For this demonstration, we’ll build our lottery game to generate the binary format &lt;code&gt;.wasm&lt;/code&gt; file, then use the &lt;code&gt;near dev-deploy&lt;/code&gt; command to deploy the smart contract.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-and-deploying-smart-contracts"&gt;
  &lt;/a&gt;
  Building and deploying smart contracts
&lt;/h3&gt;

&lt;p&gt;We’ll first build the smart contract using the &lt;code&gt;asb&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn asb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an alias command for the &lt;code&gt;yarn asb&lt;/code&gt; &lt;code&gt;--verbose&lt;/code&gt; &lt;code&gt;--nologo&lt;/code&gt; command, as defined in the &lt;code&gt;package.json&lt;/code&gt; file located in the root directory.&lt;/p&gt;

&lt;p&gt;After we’ve successfully generated a &lt;code&gt;build&lt;/code&gt; folder that contains a &lt;code&gt;lottery.wasm&lt;/code&gt; file inside the &lt;code&gt;build/release/&lt;/code&gt; folder, we can run the following command to deploy it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;near dev-deploy ./build/release/lottery.wasm 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will deploy the smart contract and provide us with the contract name or ID, which we can use to interact with it on the frontend or through a shell file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;near&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;                 
&lt;span class="nx"&gt;Starting&lt;/span&gt; &lt;span class="nx"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1635968803538&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;35727285470528&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: ./lottery.wasm&lt;/span&gt;
&lt;span class="nx"&gt;Transaction&lt;/span&gt; &lt;span class="nx"&gt;Id&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;TWTTnLEx7hpPsVMfK31DDX3gVmG4dsqoMy7sA7ypHdo&lt;/span&gt;
&lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="nx"&gt;explorer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;please&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;
&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//explorer.testnet.near.org/transactions/4TWTTnLEx7hpPsVMfK31DDX3gVmG4dsqoMy7sA7ypHdo&lt;/span&gt;
&lt;span class="nx"&gt;Done&lt;/span&gt; &lt;span class="nx"&gt;deploying&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1635968803538&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;35727285470528&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-blockchain-game"&gt;
  &lt;/a&gt;
  Testing our blockchain game
&lt;/h2&gt;

&lt;p&gt;I’ve written two unit tests to confirm that our application is actually functional. These two simple tests will create a lottery game and as well reset the &lt;code&gt;luckyNum&lt;/code&gt; variable to a new random number.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/src/lottery/__test__&lt;/code&gt; folder contains the test file. Run the test suite using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn &lt;span class="nb"&gt;test&lt;/span&gt;:unit
&lt;span class="o"&gt;[&lt;/span&gt;Describe]: Checks &lt;span class="k"&gt;for &lt;/span&gt;creating account

 &lt;span class="o"&gt;[&lt;/span&gt;Success]: ✔ creates a new game
 &lt;span class="o"&gt;[&lt;/span&gt;Success]: ✔ create and reset the luckyNum of a new game

    &lt;span class="o"&gt;[&lt;/span&gt;File]: src/lottery/__tests__/index.unit.spec.ts
  &lt;span class="o"&gt;[&lt;/span&gt;Groups]: 2 pass, 2 total
  &lt;span class="o"&gt;[&lt;/span&gt;Result]: ✔ PASS
&lt;span class="o"&gt;[&lt;/span&gt;Snapshot]: 0 total, 0 added, 0 removed, 0 different
 &lt;span class="o"&gt;[&lt;/span&gt;Summary]: 2 pass,  0 fail, 2 total
    &lt;span class="o"&gt;[&lt;/span&gt;Time]: 19.905ms
  &lt;span class="o"&gt;[&lt;/span&gt;Result]: ✔ PASS
   &lt;span class="o"&gt;[&lt;/span&gt;Files]: 1 total
  &lt;span class="o"&gt;[&lt;/span&gt;Groups]: 2 count, 2 pass
   &lt;span class="o"&gt;[&lt;/span&gt;Tests]: 2 pass, 0 fail, 2 total
    &lt;span class="o"&gt;[&lt;/span&gt;Time]: 13907.01ms
Done &lt;span class="k"&gt;in &lt;/span&gt;14.90s.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we demonstrated how to create game applications on blockchain platforms. Blockchain-based games can be played either as multiplayer games or solo.&lt;/p&gt;

&lt;p&gt;You can also extend the concept of blockchain games to include a metaverse — a digital world — around your game. The metaverse is a world where players can team up, create a governance, and even create currencies as a means for value exchange. You can mint NFTs or form DAO within a digital game world.&lt;/p&gt;

&lt;p&gt;Check out the NEAR docs to see how to build a frontend to consume the game’s smart contract created in this tutorial. The full codebase of the smart contract is available on &lt;a href="https://github.com/IkehAkinyemi/lottery-smart-contract"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>gamedev</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Free programming Mock Interviews</title>
      <author>Daniel</author>
      <pubDate>Thu, 18 Nov 2021 18:55:02 +0000</pubDate>
      <link>https://dev.to/dannyhabibs/free-programming-mock-interviews-3g3</link>
      <guid>https://dev.to/dannyhabibs/free-programming-mock-interviews-3g3</guid>
      <description>&lt;p&gt;Sign up &lt;a href="https://fangprep.notion.site/Mock-Programming-Interviews-Signup-39660a704be84d8a879d4be7533c00b5"&gt;here&lt;/a&gt; if interested and I'll match your with someone within 24 hrs!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>interview</category>
      <category>motivation</category>
    </item>
    <item>
      <title>🎉 Launching Fig</title>
      <author>Brendan Falk</author>
      <pubDate>Thu, 18 Nov 2021 18:51:41 +0000</pubDate>
      <link>https://dev.to/withfig/launching-fig-da6</link>
      <guid>https://dev.to/withfig/launching-fig-da6</guid>
      <description>&lt;p&gt;I am excited to announce that as of today, &lt;a href="https://fig.io"&gt;Fig&lt;/a&gt; is generally available to the public for download. &lt;/p&gt;

&lt;p&gt;With our public launch, I'd like to share a little more about Fig's mission: who are we, what we're doing, and what's to come. &lt;/p&gt;

&lt;p&gt;The terminal has barely changed since the 1970s and yet is still used every day by tens of millons of developers. Our bet is the terminal isn't going away any time soon. We are excited for Fig to play a part in its evolution. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-fig"&gt;
  &lt;/a&gt;
  🚀 What is Fig?
&lt;/h3&gt;

&lt;p&gt;Fig makes the terminal easier for beginners, more productive for advanced engineers, and more collaborative for teams.&lt;/p&gt;

&lt;p&gt;To do this we are creating the &lt;strong&gt;app ecosystem for the terminal&lt;/strong&gt;. We've built out a simple Javacript API (Fig.js) that makes it easy to extend your local terminal &amp;amp; shell with visual apps and shortcuts.&lt;/p&gt;

&lt;p&gt;The first app built on top of the Fig platform is &lt;a href="https://github.com/withfig/autocomplete"&gt;autocomplete&lt;/a&gt;. We are launching autocomplete today, but soon, we will open up our API so anyone can create their own apps. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-first-app-autocomplete"&gt;
  &lt;/a&gt;
  🔥 Our First App: Autocomplete
&lt;/h3&gt;

&lt;p&gt;Our first app, &lt;strong&gt;autocomplete&lt;/strong&gt;, is a modern intellisense for your interactive shell. We support inline completions for subcommands, options, and arguments for 200+ CLI tools. &lt;/p&gt;

&lt;p&gt;We make it ridculously easy to build completions. We've defined a declarative standard that makes building completions for things like  &lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt; or &lt;code&gt;npm install &amp;lt;package&amp;gt;&lt;/code&gt;  around 10 lines of Javascript. All of our completions are open source in our public GitHub repo (&lt;a href="https://github.com/withfig/autocomplete"&gt;withfig/autocomplete&lt;/a&gt;) and have been built by 120+ contributors!&lt;/p&gt;

&lt;p&gt;Autocomplete is built to be &lt;em&gt;extensible&lt;/em&gt;. You can add your own personal shortcuts, add project-specific shortcuts,  customize descriptions for package.json scripts, and even build completions for your team's internal CLI tool. You can build all this and more by checking out our &lt;a href="https://fig.io/docs"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's what autocomplete looks like in action.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wel5bMZtFLA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-figjs-api"&gt;
  &lt;/a&gt;
  🎉 The Fig.js API
&lt;/h3&gt;

&lt;p&gt;Fig isn't &lt;em&gt;just&lt;/em&gt; autocomplete. Fig's backbone is the Fig.js, an API that enables building web apps that seamlessly integrate with the terminal.&lt;/p&gt;

&lt;p&gt;Very soon, we will open up access to the Fig API, so that anyone can build their own apps. You can use our API to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Receive events from the shell (e.g. when a new process is executed or when the working directory changes)&lt;/li&gt;
&lt;li&gt;Run local shell commands&lt;/li&gt;
&lt;li&gt;Position the Fig window in various locations around the user's terminal&lt;/li&gt;
&lt;li&gt;Insert text into the active terminal session&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will discuss Fig.js in more depth when we're ready for &lt;strong&gt;you&lt;/strong&gt; to start building apps with it. In the meantime, you can see the early prototypes we built to get a sense of what's possible:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/90T5ePnROZk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-apps"&gt;
  &lt;/a&gt;
  ☁️ Future Apps
&lt;/h3&gt;

&lt;p&gt;What workflows do you do every day in the terminal that could be improved? Are any of these workflows shared across your team? &lt;/p&gt;

&lt;p&gt;As you might expect, engineers do &lt;strong&gt;a lot&lt;/strong&gt; of different things in their terminal. Here are a few Fig apps that will make common terminal workflows faster and easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared terminal configuration (scripts, functions, aliases, snippets, CLIs, and dotfiles) across a teams&lt;/li&gt;
&lt;li&gt;Interactive jupyter notebook style "runbooks" for dev ops/SREs&lt;/li&gt;
&lt;li&gt;Shared environment variables, secrets, certificates, and keys&lt;/li&gt;
&lt;li&gt;Live terminal sharing and session recording&lt;/li&gt;
&lt;li&gt;2FA for SSHing into remote machines&lt;/li&gt;
&lt;li&gt;"Fig cloud" for hosting and deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;What else could you do?&lt;/em&gt; You could have an internal app for your team/company. You could build a keyboard driven git GUI that uses &lt;code&gt;d3.js&lt;/code&gt; to visualise your commit history. You could use Fig onboard new engineers to your team or even users to your public CLI.&lt;/p&gt;

&lt;p&gt;These ideas really barely scratch the surface of what's possible. We're so excited to see what the community will build!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-hasnt-fig-built-its-own-terminal"&gt;
  &lt;/a&gt;
  💾 Why hasn't Fig built its own terminal?
&lt;/h3&gt;

&lt;p&gt;Early on, we decided not built our own terminal and instead integrate with  &lt;em&gt;existing&lt;/em&gt; terminal emulators. &lt;/p&gt;

&lt;p&gt;This is incredibly ambitious, but it has three major advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Teams can use Fig to collaborate but engineers will still be able to use their preferred terminal. &lt;/li&gt;
&lt;li&gt;Fig developers can build for a much larger audience. Since anyone can add Fig to their existing setup, apps built on top of the Fig.js API are &lt;em&gt;not limited&lt;/em&gt; to people who use a specific terminal or shell...&lt;/li&gt;
&lt;li&gt;Fig is backwards compatibile. Your terminal is still your terminal. Fig is a new interface to build upon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fig will work with your standalone terminal (like iTerm2 or Kitty), the terminal embedded in your IDE (like VSCode or JetBrains), and even in the terminal in a browser-based IDE (like GitHub Codespaces). &lt;em&gt;Fig works where you work.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;For instance, here's Fig in VSCode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkN-gzEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fig.io/images/screenshots/vscode-colored-background.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkN-gzEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fig.io/images/screenshots/vscode-colored-background.png" alt="Fig in VSCode" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We imagine a world where your manager uses bash on Windows, your colleague uses Alacritty on Arch Linux, and you use the terminal embedded in VSCode on macOS. Fig works with all of them and lets you seamless collaborate.&lt;/p&gt;

&lt;p&gt;Fig currently work with iTerm2, the native macOS terminal, Hyper, Alacritty, and the terminal embedded in VSCode on macOS. Once we have stablized and launched our API, we will go cross-platform to Linux and Windows. If you'd like to help with this, come chat with us in our &lt;a href="https://fig.io/community"&gt;Discord community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One day, we may build a Fig terminal to provide the best first party experience. For now, our integrations work quite nicely!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-will-fig-make-money"&gt;
  &lt;/a&gt;
  💰 How will Fig make money?
&lt;/h3&gt;

&lt;p&gt;We get asked this question a lot and so as a final note to our launch, I thought it would be good to address it.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;Fig will be always free for individuals&lt;/strong&gt;. We want users to feel confident that even if they sign up to Fig and become the biggest power user, they will never be charged.&lt;/p&gt;

&lt;p&gt;Our pricing model is inspired by GitHub's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For individuals and open-source projects, Fig is completely free.
&lt;/li&gt;
&lt;li&gt;For teams product that require hosting, Fig will charge a small fee per person per month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, our &lt;a href="https://fig.io/teams"&gt;autocomplete for teams&lt;/a&gt; product enables companies to build and share completions for internal CLIs. We think charging for hosting is reasonable as there is a cost incurred by us. We are willing to absorb this cost for individuals but not for teams. &lt;/p&gt;

&lt;p&gt;Finally, Fig will &lt;strong&gt;never&lt;/strong&gt; sell your data. The terminal is an incredibly sensitive environment. Security and privacy is top of mind for everything we do.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%97%A7-whats-next"&gt;
  &lt;/a&gt;
  ◧ What's next?
&lt;/h3&gt;

&lt;p&gt;We are really only just getting started. Fig's platform opens up a whole new world of opportunties for developer tooling. Our public launch of autocomplete today is just our first demonstration of what's possible. Our roadmap for the next several months includes more terminal integrations, launching our Fig.js API, new apps, and maybe even a beta on Linux!&lt;/p&gt;

&lt;p&gt;If you're excited about Fig's vision and mission &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://twitter.com/fig"&gt;@fig&lt;/a&gt; on Twitter.&lt;/li&gt;
&lt;li&gt;Join our &lt;a href="https://fig.io/community"&gt;Discord community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join the team: &lt;a href="https://fig.io/jobs"&gt;fig.io/jobs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Or just email me (brendan [at] fig.io)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-Brendan Falk&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Create a PR to automatically fix code linting errors</title>
      <author>Iacovos Constantinou</author>
      <pubDate>Thu, 18 Nov 2021 18:36:51 +0000</pubDate>
      <link>https://dev.to/iacons/create-a-pr-to-automatically-fix-code-linting-errors-1hf2</link>
      <guid>https://dev.to/iacons/create-a-pr-to-automatically-fix-code-linting-errors-1hf2</guid>
      <description>&lt;p&gt;This Github workflow aims to automatically fix as many lint errors as possible.&lt;/p&gt;

&lt;p&gt;In particular, it executes eslint with &lt;code&gt;--fix&lt;/code&gt; argument, so that we report and fix lint errors. Note that not all lint errors can be fixed automatically.&lt;/p&gt;

&lt;p&gt;If any errors were fixed by &lt;code&gt;eslint&lt;/code&gt;, a new PR is created including the changes made. The base is always the current branch while the assignee is the PR author. &lt;/p&gt;

&lt;p&gt;This allows the PR author to review the changes and if needed merge them into the initial PR.&lt;/p&gt;

&lt;p&gt;On top of that, the PR is marked with the label &lt;code&gt;autofix&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;The repository can be found &lt;a href="https://github.com/softius/actions-auto-improve-code-style/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On purpose there is a lint error in &lt;code&gt;index.js&lt;/code&gt; and you can review the PR created &lt;a href="https://github.com/softius/actions-auto-improve-code-style/pull/5"&gt;here&lt;/a&gt; to fix this. .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/softius"&gt;
        softius
      &lt;/a&gt; / &lt;a href="https://github.com/softius/actions-auto-improve-code-style"&gt;
        actions-auto-improve-code-style
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create a PR automatically to fix code linting errors.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
actions-auto-improve-code-style&lt;/h1&gt;
&lt;p&gt;This GitHub workflow executes eslint with &lt;code&gt;--fix&lt;/code&gt; argument, so that we can not only capture but also automatically fix as many as possible.&lt;/p&gt;
&lt;p&gt;If any errors were fixed by &lt;code&gt;eslint&lt;/code&gt;, a new PR is created including the changes made. The base is always the current branch while the assignee is the PR author.&lt;/p&gt;
&lt;p&gt;This allows the PR author to review the changes and if needed merge them into into the initial PR.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/softius/actions-auto-improve-code-style"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;While this workflow uses eslint, the same approach can be used with phpcs/phpcbf and other linters.&lt;/p&gt;

&lt;p&gt;To customize the workflow further, you can refer to this &lt;a href="https://github.com/peter-evans/create-pull-request"&gt;action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to follow me on &lt;a href="https://dev.to/iacons"&gt;dev.to&lt;/a&gt;, &lt;a href="https://medium.com/@softius"&gt;Medium&lt;/a&gt; or &lt;a href="https://twitter.com/iacons"&gt;Twitter&lt;/a&gt; to read more about PHP, Docker and other dev topics.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@kensuarez?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ken Suarez&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fix?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>GraphQL Helix API Routes with Next.js</title>
      <author>Jamie Barton</author>
      <pubDate>Thu, 18 Nov 2021 18:35:43 +0000</pubDate>
      <link>https://dev.to/graphqlwtf/graphql-helix-api-routes-with-nextjs-2mn</link>
      <guid>https://dev.to/graphqlwtf/graphql-helix-api-routes-with-nextjs-2mn</guid>
      <description>&lt;p&gt;In this video we'll use utility functions from GraphQL Helix to process requests inside our API route made from the Next.js frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphql.wtf/episodes/16-graphql-helix-api-route-with-nextjs"&gt;Watch it now&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>graphql</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to build GitHub Actions in PHP with Minicli and Docker</title>
      <author>Erika Heidi</author>
      <pubDate>Thu, 18 Nov 2021 18:30:36 +0000</pubDate>
      <link>https://dev.to/sourcegraph/how-to-build-github-actions-in-php-with-minicli-and-docker-1k6m</link>
      <guid>https://dev.to/sourcegraph/how-to-build-github-actions-in-php-with-minicli-and-docker-1k6m</guid>
      <description>&lt;p&gt;GitHub Actions facilitates creating CI/CD automated workflows that can be triggered by GitHub events, such as when a pull request is created, a merge is made, or a new comment is posted on an issue. What some people may not know is that you can also run GitHub actions at scheduled times, based on &lt;code&gt;cron&lt;/code&gt; expressions.&lt;/p&gt;

&lt;p&gt;Public repositories get unlimited GitHub Actions for free, which makes this feature a really great tool for open source and personal projects that must run scheduled tasks.&lt;/p&gt;

&lt;p&gt;In this guide, you'll learn how to use GitHub Actions to periodically run a PHP command line application built with &lt;a href="https://docs.minicli.dev"&gt;Minicli&lt;/a&gt;. This application will update a CONTRIBUTORS file in the same repository where the workflow action is set, updating information about top contributors of a project. We'll implement the repository update portion using the &lt;a href="https://github.com/marketplace/actions/update-files-on-github"&gt;update-files-on-github&lt;/a&gt; action, which will generate a commit with the file change to the repository where the workflow is run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" alt="Pull request automatically created by this workflow + action" width="880" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To follow this tutorial you'll need access to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A PHP command line environment (&lt;code&gt;php-cli&lt;/code&gt;, no need for web servers) and Composer installed. The &lt;a href="https://www.php.net/manual/en/curl.requirements.php"&gt;&lt;code&gt;php-curl&lt;/code&gt; extension&lt;/a&gt; is required to connect to the GitHub API. &lt;/li&gt;
&lt;li&gt;An empty GitHub repository where you're going to set up your action. For more info, check &lt;a href="https://docs.github.com/en/articles/creating-a-new-repository"&gt;this documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-bootstrapping-the-application"&gt;
  &lt;/a&gt;
  Step 1: Bootstrapping the application
&lt;/h2&gt;

&lt;p&gt;Start by bootstrapping a new Minicli application. This will be a single-command application, so we don't need to use the &lt;code&gt;minicli/application&lt;/code&gt; template. Create a new folder and require &lt;code&gt;minicli/minicli&lt;/code&gt; to start building your command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~
&lt;span class="nb"&gt;mkdir &lt;/span&gt;action-contributors
&lt;span class="nb"&gt;cd &lt;/span&gt;action-contributors
composer require minicli/minicli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new &lt;code&gt;composer.json&lt;/code&gt; file and download the base &lt;a href="https://github.com/minicli/minicli"&gt;minicli/minicli&lt;/a&gt; package.&lt;br&gt;
Next, you need to create the entry point script that runs your command. Using your code editor of choice, create a new file in the root of the application called &lt;code&gt;minicli&lt;/code&gt; (or another name of your choice):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano minicli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Include the following code, which bootstraps a Minicli application with a single command defined as callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;#!/usr/bin/php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;php_sapi_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;'cli'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Minicli\App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'app_path'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/app/Command'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'update-contributors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Fetching top contributors...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and close the file. Then, run the following command to make this script executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt;+x minicli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can test your command with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./minicli update-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oETrh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5raykzh7l0cz8agijy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oETrh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5raykzh7l0cz8agijy8.png" alt="screenshot showing the output from the command in the terminal" width="880" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next step, you'll update the example command to pull the top contributors of a GitHub project, and generate a markdown file with the list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-pulling-contributors-with-the-github-api"&gt;
  &lt;/a&gt;
  Step 2: Pulling contributors with the GitHub API
&lt;/h2&gt;

&lt;p&gt;To make requests to the GitHub API, we'll use the &lt;a href="https://docs.minicli.dev/en/latest/xtras/extending-minicli/#miniclicurly"&gt;Curly&lt;/a&gt; Minicli extension. You can import it to your project with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require minicli/curly
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obtaining the top contributors for an open source project on GitHub doesn't require an authentication token. You only need to include a couple headers in your request:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Accept: application/vnd.github.v3+json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User-Agent: My user agent v1.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll now edit the &lt;code&gt;update-contributors&lt;/code&gt; command to query the GitHub API and save information about top contributors in the project of your choice.&lt;/p&gt;

&lt;p&gt;Replace the current content in your &lt;code&gt;minicli&lt;/code&gt; script with the following, updated code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;#!/usr/bin/php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;php_sapi_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;'cli'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Minicli\App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Minicli\Curly\Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'app_path'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/app/Command'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'repository'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CONTRIB_REPOSITORY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="s1"&gt;'minicli/minicli'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'output_file'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CONTRIB_OUTPUT_FILE'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="s1"&gt;'CONTRIBUTORS.md'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'update-contributors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Fetching top contributors...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"https://api.github.com/repos/"&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/contributors"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Accept: application/vnd.github.v3+json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'User-Agent: Curly'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"an error occurred: "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"#Contributors&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Shout out to our top contributors!&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"- [&lt;/span&gt;&lt;span class="nv"&gt;$item-&amp;gt;login&lt;/span&gt;&lt;span class="s2"&gt;](&lt;/span&gt;&lt;span class="nv"&gt;$item-&amp;gt;url&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$contrib_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w+'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contrib_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contrib_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"An error occurred while trying to save the contrib file."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Finished updating contrib file."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The updated code defines a couple configuration variables: &lt;code&gt;repository&lt;/code&gt; and &lt;code&gt;output_file&lt;/code&gt;, with default values set to &lt;code&gt;minicli/minicli&lt;/code&gt; and &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; respectively. When building your action workflow, you can overwrite these default values with environment variables named &lt;code&gt;CONTRIB_REPOSITORY&lt;/code&gt; and &lt;code&gt;CONTRIB_OUTPUT_FILE&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;update-contributors&lt;/code&gt; method now uses a &lt;code&gt;Curly/Client&lt;/code&gt; client to query the GitHub API using the endpoint &lt;code&gt;https://api.github.com/repos/owner/repo/contributors&lt;/code&gt;. When the request is successful, the application builds a markdown text with the contributors that are returned as response, and writes it to the file defined by the  &lt;code&gt;output_file&lt;/code&gt; configuration value.&lt;/p&gt;

&lt;p&gt;Now run the application again with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./minicli update-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Fetching top contributors...

Finished updating contrib file.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check your repository files now, you should see a new &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; file in the root of the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;CONTRIBTORS.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Contributors

Shout out to our top contributors!

- [erikaheidi](https://api.github.com/users/erikaheidi)
- [syntaxseed](https://api.github.com/users/syntaxseed)
- [tombenevides](https://api.github.com/users/tombenevides)
- [ScullWM](https://api.github.com/users/ScullWM)
- [wandersonwhcr](https://api.github.com/users/wandersonwhcr)
- [lotfio](https://api.github.com/users/lotfio)
- [flug](https://api.github.com/users/flug)
- [mauriciofauth](https://api.github.com/users/mauriciofauth)
- [mrpc](https://api.github.com/users/mrpc)
- [peter279k](https://api.github.com/users/peter279k)
- [zaghadon](https://api.github.com/users/zaghadon)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application is now ready, but you still need to set up the environment that will execute it on the GitHub runtime. &lt;/p&gt;

&lt;p&gt;In the next step, you'll build a custom Docker image based on PHP 8.0 to install and execute the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-setting-up-the-application-dockerfile"&gt;
  &lt;/a&gt;
  Step 3: Setting up the application Dockerfile
&lt;/h2&gt;

&lt;p&gt;GitHub offers a few different &lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"&gt;runners&lt;/a&gt; to execute code as actions. For PHP applications, you'll need to provide the runner with a custom environment based on a Docker image, capable of executing your application code as a single command.&lt;/p&gt;

&lt;p&gt;Create a new &lt;code&gt;Dockerfile&lt;/code&gt; in the root of your application and copy the following code to the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:8.0-cli&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    git &lt;span class="se"&gt;\
&lt;/span&gt;    curl &lt;span class="se"&gt;\
&lt;/span&gt;    libxml2-dev &lt;span class="se"&gt;\
&lt;/span&gt;    zip &lt;span class="se"&gt;\
&lt;/span&gt;    unzip

&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="c"&gt;# Install Composer and set up application&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=composer:latest /usr/bin/composer /usr/bin/composer&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /application
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /application/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /application &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; composer &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; [ "php", "/application/minicli" ]&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["update-contributors"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file.&lt;/p&gt;

&lt;p&gt;The example  &lt;code&gt;Dockerfile&lt;/code&gt; starts by setting up the base image to PHP &lt;code&gt;8.0-cli&lt;/code&gt;. Then, it will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set up a few required packages;&lt;/li&gt;
&lt;li&gt;install Composer by copying its executable from its official image;&lt;/li&gt;
&lt;li&gt;create a directory for the application inside the container;&lt;/li&gt;
&lt;li&gt;copy the application files from the current directory and into the container;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;composer install&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;set up the container entry point and default command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may want to test if the application runs through Docker with this image. Use the following command to build the image under the tag &lt;code&gt;action-contributors&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; action-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the application in a disposable container using the newly built image, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; action-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be able to see the same output as before. However, the generated &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; file will be confined to the container and won't show up in your application directory on the host machine. When setting up your workflow, you'll need to include an additional GitHub Action to either &lt;a href="https://github.com/marketplace/actions/update-files-on-github"&gt;commit the changes directly to the master branch&lt;/a&gt;, or &lt;a href="https://github.com/marketplace/actions/create-pull-request"&gt;open a pull request with the changes&lt;/a&gt; so that you can review the update before merging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-creating-the-action-file"&gt;
  &lt;/a&gt;
  Step 4: Creating the action file
&lt;/h2&gt;

&lt;p&gt;With the application ready, you'll need to set up a YAML file to define your action. Create a new file called &lt;code&gt;action.yml&lt;/code&gt; on the root of the project, and copy the following content to that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# action.yml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS'&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Updates&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;contributors&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file'&lt;/span&gt;
&lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Output&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;from&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;command'&lt;/span&gt;
&lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;using&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;docker'&lt;/span&gt;
  &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Dockerfile'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file.&lt;/p&gt;

&lt;p&gt;The file starts by defining the name and description of the action. Because our command doesn't require inputs, we don't need to set up an &lt;code&gt;inputs&lt;/code&gt; section for this action. The &lt;code&gt;response&lt;/code&gt; output will be available for logs that might refer to this information for debug purposes. Then, we get to the &lt;code&gt;runs&lt;/code&gt; portion, where we define what the action will do. This action will build and execute the image defined by &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your action is almost ready. You're encouraged to create a &lt;code&gt;README.md&lt;/code&gt; file explaining how to use it, and including an example workflow. For now, you can create a simple README with some basic information about the action. You can use the following template for your README:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# My Action Title&lt;/span&gt;

A paragraph about my action, what it does and how it works.&lt;span class="sb"&gt;


&lt;/span&gt;&lt;span class="gu"&gt;## Example usage&lt;/span&gt;
Include an example of workflow using this action.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you're finished with your README, you'll need to commit and push the files to the GitHub repository you've created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add action.yml composer.json composer.lock minicli Dockerfile README.md
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"My first action is ready"&lt;/span&gt;
git tag &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"My first action release"&lt;/span&gt; v1
git push &lt;span class="nt"&gt;--follow-tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have pushed your code (including the tag), the action is ready to be used by a workflow in any project on GitHub, referenced by &lt;code&gt;your_user_or_org/your_action_repo@v1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the next step, you'll create a workflow to test this action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-setting-up-a-workflow"&gt;
  &lt;/a&gt;
  Step 5: Setting up a workflow
&lt;/h2&gt;

&lt;p&gt;When creating a workflow for a GitHub action, there are quite a few different things to consider: what triggers the action, which other actions are needed and in which order they should run, and what kinds of inputs or environment variables are required for the action to run. &lt;/p&gt;

&lt;p&gt;This action should run on a scheduled basis, without the need for a specific event to trigger it. It doesn't require inputs, but it uses two environment variables to define which repository is being pulled for contributors, and the name of the file that will be created with the list of contributors. &lt;/p&gt;

&lt;p&gt;We'll need to combine this action with another action to either commit the changes directly to the main project's branch, or open a pull request with the changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#committing-the-updated-contributors-file-directly-to-the-main-branch"&gt;
  &lt;/a&gt;
  Committing the updated CONTRIBUTORS file directly to the main branch
&lt;/h3&gt;

&lt;p&gt;The following workflow will run once a month and commit an updated &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; file directly into the default remote branch of the project where this workflow is set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update CONTRIBUTORS file&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minicli/action-contributors@v3&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file"&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;minicli/minicli'&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_OUTPUT_FILE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit changes&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test-room-7/action-update-file@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;file-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
          &lt;span class="na"&gt;commit-msg&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Contributors&lt;/span&gt;
          &lt;span class="na"&gt;github-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember to change the &lt;code&gt;CONTRIB_REPOSITORY&lt;/code&gt; environment variable to the project you want to pull contributors from, using the format &lt;code&gt;owner/repository&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opening-a-pull-request-with-the-updated-contributors-file"&gt;
  &lt;/a&gt;
  Opening a Pull Request with the updated CONTRIBUTORS file
&lt;/h3&gt;

&lt;p&gt;You can also opt to open a pull request instead of committing the changes directly into the main project's branch. For that, you'll need an additional action called &lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt;. This action checks out the repository code to a location inside the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update CONTRIBUTORS file&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minicli/action-contributors@v3&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file"&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;minicli/docs'&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_OUTPUT_FILE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create a PR&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Contributors&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[automated]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Contributors&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;File"&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy your preferred workflow code to the following location, inside the project where you want the keep your CONTRIBUTORS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.github/workflows/contributors.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, commit and push your changes to the repository where the workflow will run. Once you push the workflow file to that location, you'll be able to see the workflow listed in the &lt;strong&gt;Actions&lt;/strong&gt; tab of your GitHub repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06kjj6_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geq1zb198is30hbthgag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06kjj6_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geq1zb198is30hbthgag.png" alt="Running a Github action manually" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, you can manually run the workflow by clicking on the &lt;code&gt;Run workflow&lt;/code&gt; button on the right. &lt;/p&gt;

&lt;p&gt;If you choose to commit the changes directly into the main project's branch, once the workflow has finished running you should find the updated CONTRIBUTORS file in the root of the project. &lt;/p&gt;

&lt;p&gt;If you chose to create a pull request, you should find an open pull request in the "Pull requests" tab of your project's repository,  carrying the updated CONTRIBUTORS file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" alt="Pull request automatically created by this workflow + action" width="880" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-more-example-workflows-using-these-actions"&gt;
  &lt;/a&gt;
  Find more example workflows using these actions
&lt;/h2&gt;

&lt;p&gt;GitHub provides a large library of readily available actions you can integrate into your project, and you can also find user-contributed actions in the marketplace. However, because workflows are so flexible, sometimes it can be difficult to figure out how to combine multiple actions and which inputs or environment variables are required in certain scenarios. &lt;/p&gt;

&lt;p&gt;To find usage examples related to the actions used in this guide, you can use the following Sourcegraph search queries:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-more-examples-of-the-raw-actionscheckout-endraw-action"&gt;
  &lt;/a&gt;
  Find more examples of the &lt;code&gt;actions/checkout&lt;/code&gt; action
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lang:YAML uses: actions/checkout@v2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search URL:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+actions/checkout%40v2&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+actions/checkout%40v2&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#find-more-examples-of-the-raw-testroom7actionupdatefile-endraw-action"&gt;
  &lt;/a&gt;
  Find more examples of the &lt;code&gt;test-room-7/action-update-file&lt;/code&gt; action
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lang:YAML uses: test-room-7/action-update-file@v1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search URL:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+test-room-7/action-update-file%40v1&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+test-room-7/action-update-file%40v1&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#find-more-examples-of-the-raw-peterevanscreatepullrequest-endraw-action"&gt;
  &lt;/a&gt;
  Find more examples of the &lt;code&gt;peter-evans/create-pull-request&lt;/code&gt; action
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lang:YAML uses: peter-evans/create-pull-request@v3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search URL:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+peter-evans/create-pull-request%40v3&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+peter-evans/create-pull-request%40v3&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#search-for-anything-related-to-github-actions"&gt;
  &lt;/a&gt;
  Search for anything related to GitHub actions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search URL&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+github+actions&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+github+actions&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;github actions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this step-by-step tutorial, we've seen how to create a GitHub action to programmatically update a CONTRIBUTORS file for an open source project, using the &lt;a href="https://docs.minicli.dev"&gt;Minicli&lt;/a&gt; framework for command line applications in PHP. If you'd like to use this action in one of your projects and don't want to build it from scratch, you can head over to the &lt;a href="https://github.com/minicli/action-contributors"&gt;minicli/action-contributors&lt;/a&gt; repository on GitHub to set up this action within a workflow on your project. To find more about GitHub actions, you can check the &lt;a href="https://docs.github.com/en/actions"&gt;official documentation&lt;/a&gt;, and you can also search for practical examples of workflows using &lt;a href="https://sourcegraph.com/search"&gt;Sourcegraph code search&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to auto-generate OpenAPI docs for Django, Flask, Spring and Rails apps</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 18 Nov 2021 18:29:20 +0000</pubDate>
      <link>https://dev.to/appland/how-to-auto-generate-openapi-docs-for-django-flask-spring-and-rails-apps-2bco</link>
      <guid>https://dev.to/appland/how-to-auto-generate-openapi-docs-for-django-flask-spring-and-rails-apps-2bco</guid>
      <description>&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/OpenAPI_Specification"&gt;OpenAPI Specification&lt;/a&gt; (also/previously called Swagger) helps developers model, document, implement and test web applications and services APIs. It’s a wonderful thing! And unsurprisingly, it’s embraced by dev teams and documentation communities across the globe. &lt;/p&gt;

&lt;p&gt;The trouble is, keeping OpenAPI documentation accurate and in sync with implementation updates -- particularly for fast-evolving applications and services -- can be really challenging and time consuming. It’s also a never-ending task.&lt;/p&gt;

&lt;p&gt;Because the OpenAPI standard can be such an intimidating format to work with (it takes a true &lt;code&gt;yaml&lt;/code&gt; guru to manage long configuration files quickly and precisely!), API documentation is often inaccurate and outdated. And when API documentation isn’t accurate or up-to-date, devs face frustrating collaboration set-backs, broken applications and integrations, and an overall inefficient use of OpenAPI automation tools.&lt;/p&gt;

&lt;p&gt;To help devs avoid the risks associated with inaccurate and outdated API documentation, we built a &lt;a href="https://appland.com/docs/reference/cli-client.html"&gt;free and open source tool called AppMap&lt;/a&gt; that automatically generates OpenAPI documentation from running code. AppMap ensures your API documentation is always current, accurate and readily available -- no tedious, manual labor required. Huzzah!  &lt;/p&gt;

&lt;p&gt;Here’s how AppMap OpenAPI generation works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An AppMap agent is added to the tool chain of your application as a new build dependency.&lt;/li&gt;
&lt;li&gt;When you run your tests, the AppMap agent records &lt;a href="https://appland.com/products/appmap"&gt;AppMaps&lt;/a&gt;, which are visual, interactive maps of your application’s code. AppMaps include details about all of the web service requests made in your tests.&lt;/li&gt;
&lt;li&gt;The AppMap &lt;code&gt;openapi&lt;/code&gt; tool generates OpenAPI documentation from the recorded AppMaps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can execute this flow in either your local environment or in automated CI/CD pipelines. And you can download AppMap with OpenAPI generation for free for your preferred framework &lt;a href="https://appland.com/docs/quickstart/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is a script summary for the AppMap OpenAPI generation for &lt;strong&gt;Python&lt;/strong&gt; video, in case you prefer to read vs. watch. If you’re working in &lt;strong&gt;Java&lt;/strong&gt; or &lt;strong&gt;Ruby&lt;/strong&gt;, I’ve included videos for those below, too.  We’re putting the finishing touches on &lt;a href="https://github.com/applandinc/appmap-agent-js"&gt;AppMap for JavaScript&lt;/a&gt; right now, so if you’re interested in trying that out let us know &lt;a href="https://discord.com/invite/N9VUap6"&gt;in our Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading and watching!  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-autogenerate-openapi-documentation-for-python-django-and-flask-applications"&gt;
  &lt;/a&gt;
  How to auto-generate OpenAPI documentation for Python Django and Flask applications
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:00&lt;/code&gt; Today I am going to demonstrate how to automatically generate OpenAPI docs for my Python application with AppMap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:10&lt;/code&gt; My application is Misago - a popular forum application written in Python, Django, ES6 and React.js. I already have a Python development environment set up and I am ready to install AppMap and run tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:25&lt;/code&gt; Installing AppMap is easy with the command line installation tool (it requires Node.js). Here's a terminal window with the Misago dev environment active. In the project folder, I'll run:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @appland/appmap
npx appmap install
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The installer asks me to confirm the environment and sets up AppMap automatically. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:46&lt;/code&gt; Now I am ready to record AppMaps. I'll simply run tests with &lt;code&gt;APPMAP=true&lt;/code&gt; in the environment:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APPMAP=true pytest
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;if I used Windows, it would be:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set APPMAP=true
pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:55&lt;/code&gt; When the tests finish, AppMap files will be stored in the &lt;code&gt;tmp/appmap/pytest&lt;/code&gt; subfolder of my project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:05&lt;/code&gt; In the final step, I will run the AppMap &lt;code&gt;openapi&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx appmap openapi --openapi-title "Misago" --openapi-version "0.27.0" -o misago-openapi.yaml --appmap-dir=tmp/appmap/pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:11&lt;/code&gt; And that's it! The &lt;code&gt;misago-openapi.yml&lt;/code&gt; is my generated OpenAPI documentation for my application. If my application consisted of additional microservices, I would generate documentation for each service using the same approach: 1) install AppMap agent, 2) run tests, 3) generate documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:35&lt;/code&gt; I can inspect &lt;code&gt;misago-openapi.yml&lt;/code&gt; in my IDE or in any OpenAPI tool. Let me upload it to &lt;code&gt;swagger.io&lt;/code&gt; now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:48&lt;/code&gt; And here it is, an OpenAPI documentation of the Misago app in &lt;a href="https://swagger.io"&gt;&lt;code&gt;swagger.io&lt;/code&gt;&lt;/a&gt;, generated and imported in minutes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-autogenerate-openapi-documentation-for-java-spring-applications"&gt;
  &lt;/a&gt;
  How to auto-generate OpenAPI documentation for Java Spring applications
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kPsTWA1AxmM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:00&lt;/code&gt;  I am going to demonstrate how to automatically generate OpenAPI docs for my Java Spring application with AppMap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:10&lt;/code&gt; My application is WebGoat - a deliberately insecure application that lets developers test vulnerabilities commonly found in Java-based applications that use common and popular open source components.&lt;/p&gt;

&lt;p&gt;You can find the WebGoat repository used in this demo here: &lt;a href="https://github.com/land-of-apps/WebGoat.git"&gt;https://github.com/land-of-apps/WebGoat.git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:24&lt;/code&gt; I already have a Java environment set up and am ready to install AppMap and run tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:30&lt;/code&gt; Installing AppMap is easy with the command line installation tool (which requires Node.js). In the WebGoat project folder I'll run this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @appland/appmap install
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The installer asks me to confirm the environment and sets up AppMap for the project automatically. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:48&lt;/code&gt; WebGoat uses &lt;code&gt;Maven&lt;/code&gt; and the AppMap installer adds the AppMap Maven plugin to the master &lt;code&gt;pom.xml&lt;/code&gt; file. A similar gradle plugin exists for gradle-built applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:01&lt;/code&gt; Let me quickly review the &lt;code&gt;pom.xml&lt;/code&gt; files of the project, because it’s always recommended to verify the build configuration of complex Java applications. &lt;/p&gt;

&lt;p&gt;The standard &lt;code&gt;surefire&lt;/code&gt; plugin configuration was modified and the change unfortunately breaks all Java agent plugins such as AppMap or &lt;code&gt;jacoco&lt;/code&gt;. To quickly fix this issue, I've modified the surefire configuration:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;forkCount&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/forkCount&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reuseForks&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/reuseForks&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;argLine&amp;gt;&lt;/span&gt;
        @{argLine} --illegal-access=permit
    &lt;span class="nt"&gt;&amp;lt;/argLine&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:15&lt;/code&gt; Now I will run tests to record AppMaps:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./mvnw test
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If I used Windows:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mvnw test
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;When the tests finish, AppMap files will be stored in the &lt;code&gt;target/appmap&lt;/code&gt; subfolders of all sub-modules that have tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:32&lt;/code&gt; In the final step, I will install and run the AppMap &lt;code&gt;openapi&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @appland/appmap
npx appmap openapi --openapi-title "WebGoat" --openapi-version "8.2.0" -o webgoat-openapi.yaml --appmap-dir=.
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:39&lt;/code&gt; And that's it! &lt;code&gt;webgoat-openapi.yml&lt;/code&gt; is my generated OpenAPI documentation. If my application&lt;br&gt;
consisted of additional microservices, I would generate documentation from each service using the same approach: 1) install the AppMap agent, 2) run tests, 3) generate OpenAPI documentation from AppMaps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;02:05&lt;/code&gt; I can inspect &lt;code&gt;webgoat-openapi.yml&lt;/code&gt; in my IDE or in any OpenAPI tool. Let me upload it to &lt;a href="https://swagger.io"&gt;&lt;code&gt;swagger.io&lt;/code&gt;&lt;/a&gt; now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;02:11&lt;/code&gt; And here it is, the OpenAPI documentation of the WebGoat app generated and imported to swagger.io in minutes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-autogenerate-openapi-documentation-for-ruby-on-rails-applications"&gt;
  &lt;/a&gt;
  How to auto-generate OpenAPI documentation for Ruby on Rails applications
&lt;/h2&gt;

&lt;p&gt;Please visit &lt;a href="https://dev.to/appland/how-to-auto-generate-swagger-openapi-doc-for-your-web-services-3npn"&gt;How to auto-generate detailed Swagger/OpenAPI for all your Rails routes&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>java</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>LeetCode - Binary Tree Level Order Traversal</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Thu, 18 Nov 2021 18:28:32 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-binary-tree-level-order-traversal-1d5o</link>
      <guid>https://dev.to/_alkesh26/leetcode-binary-tree-level-order-traversal-1d5o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;Given the &lt;em&gt;root&lt;/em&gt; of a binary tree, return &lt;em&gt;the level order traversal of its nodes'&lt;/em&gt; values. (i.e., from left to right, level by level).&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal"&gt;https://leetcode.com/problems/binary-tree-level-order-traversal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoeZsJCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/tree-level-order-traversal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoeZsJCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/tree-level-order-traversal.png" alt="Container" width="277" height="302"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [3, 9, 20, null, null, 15, 7]
Output: [[3], [9, 20], [15, 7]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1]
Output: [[1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = []
Output: []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- The number of nodes in the tree is in the range [0, 2000]
- -1000 &amp;lt;= Node.val &amp;lt;= 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#recursive-function"&gt;
  &lt;/a&gt;
  Recursive function
&lt;/h4&gt;

&lt;p&gt;With trees, recursion is the most widely used approach as the code is easy to read. But for a few problems, recursion increases the time complexity. For large trees, recursion can result in stack overflow or because of &lt;strong&gt;O(N^2)&lt;/strong&gt; time complexity will take a lot of time.&lt;/p&gt;

&lt;p&gt;For this problem, we can use recursion, but we need to calculate the height of the tree.&lt;/p&gt;

&lt;p&gt;A small C++ snippet of the above approach will look as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printLevelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;printCurrentLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The time complexity of the above approach is &lt;strong&gt;O(N^2)&lt;/strong&gt; for skewed trees. The worst-case space complexity is &lt;strong&gt;O(N)&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#iterative-approach"&gt;
  &lt;/a&gt;
  Iterative approach
&lt;/h4&gt;

&lt;p&gt;We can improve the time complexity by using a queue as a data structure. Let's check the algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- initialize 2D array as vector vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result
- initialize size and i

- return result if root == null

- initialize queue&amp;lt;TreeNode*&amp;gt; q
  - push root to queue : q.push(root)

- initialize TreeNode* node for iterating on the tree

- loop while( !q.empty() ) // queue is not empty
  - initialize vector&amp;lt;int&amp;gt; tmp
  - set size = q.size()

  - loop for i = 0; i &amp;lt; size; i++
    - set node = q.front()

    - if node-&amp;gt;left
      - push in queue: q.push(node-&amp;gt;left)

    - if node-&amp;gt;right
      - push in queue: q.push(node-&amp;gt;right)

    - remove the front node: q.pop()

  - push the tmp to result: result.push_back(tmp)

- return result
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;levelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;levelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;levelOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [3, 9, 20, null, null, 15, 7]

Step 1: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result;
        int size, i;

Step 2: root == null
        [3, 9..] == null
        false

Step 3: queue&amp;lt;TreeNode*&amp;gt; q;
        q.push(root);

        q = [3]

Step 4: loop !q.empty()
        q = [3]
        q.empty() = false
        !false = true

        vector&amp;lt;int&amp;gt; tmp
        size = q.size()
             = 1

        for(i = 0; i &amp;lt; 1; i++)
          - 0 &amp;lt; 1
          - true

          node = q.front()
          node = 3

          if node-&amp;gt;left
            - node-&amp;gt;left = 9
            - q.push(node-&amp;gt;left)
            - q = [3, 9]

          if node-&amp;gt;right
            - node-&amp;gt;right = 20
            - q.push(node-&amp;gt;right)
            - q = [3, 9, 20]


          q.pop()
          q = [9, 20]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(3)

          i++
          i = 1

        for(i &amp;lt; 1)
        1 &amp;lt; 1
        false

        result.push_back(tmp)
        result = [[3]]

Step 5: loop !q.empty()
        q = [9, 20]
        q.empty() = false
        !false = true

        vector&amp;lt;int&amp;gt; tmp
        size = q.size()
             = 2

        for(i = 0; i &amp;lt; 2; i++)
          - 0 &amp;lt; 2
          - true

          node = q.front()
          node = 9

          if node-&amp;gt;left
            - node-&amp;gt;left = nil
            - false

          if node-&amp;gt;right
            - node-&amp;gt;right = nil
            - false

          q.pop()
          q = [20]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(9)

          i++
          i = 1

        for(i &amp;lt; 2)
          - 1 &amp;lt; 2
          - true

          node = q.front()
          node = 20

          if node-&amp;gt;left
            - node-&amp;gt;left = 15
            - q.push(node-&amp;gt;left)
            - q = [20, 15]

          if node-&amp;gt;right
            - node-&amp;gt;left = 7
            - q.push(node-&amp;gt;right)
            - q = [20, 15, 7]

          q.pop()
          q = [15, 7]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(20)
          tmp = [9, 20]

          i++
          i = 2

        for(i &amp;lt; 2)
          - 2 &amp;lt; 2
          - false

        result.push_back(tmp)
        result = [[3], [9, 20]]

Step 6: loop !q.empty()
        q = [15, 7]
        q.empty() = false
        !false = true

        vector&amp;lt;int&amp;gt; tmp
        size = q.size()
             = 2

        for(i = 0; i &amp;lt; 2; i++)
          - 0 &amp;lt; 2
          - true

          node = q.front()
          node = 15

          if node-&amp;gt;left
            - node-&amp;gt;left = nil
            - false

          if node-&amp;gt;right
            - node-&amp;gt;right = nil
            - false

          q.pop()
          q = [7]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(15)

          i++
          i = 1

        for(i &amp;lt; 2)
          - 1 &amp;lt; 2
          - true

          node = q.front()
          node = 7

          if node-&amp;gt;left
            - node-&amp;gt;left = nil
            - false

          if node-&amp;gt;right
            - node-&amp;gt;right = nil
            - false

          q.pop()
          q = []

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(7)
          tmp = [15, 7]

          i++
          i = 2

        for(i &amp;lt; 2)
          - 2 &amp;lt; 2
          - false

        result.push_back(tmp)
        result = [[3], [9, 20], [15, 7]]

Step 7: loop !q.empty()
        q = []
        q.empty() = true
        !true = false

Step 8: return result

So we return the result as [[3], [9, 20], [15, 7]].
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ironhack Full Stack Developer Bootcamp - Week 2 - Calvin Torra</title>
      <author>Calvin T</author>
      <pubDate>Thu, 18 Nov 2021 18:16:37 +0000</pubDate>
      <link>https://dev.to/calvin087/ironhack-full-stack-developer-bootcamp-week-2-calvin-torra-2hol</link>
      <guid>https://dev.to/calvin087/ironhack-full-stack-developer-bootcamp-week-2-calvin-torra-2hol</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BHKzW97_EqU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links Mentioned in Video:&lt;/strong&gt;&lt;br&gt;
&lt;a href="//2-hour-productivity.thinkific.com"&gt;2 Hour Productivity:&lt;/a&gt;&lt;br&gt;
&lt;a href="//youtube.com/c/DrewConley"&gt;Draw Conley JS Games:&lt;/a&gt;&lt;br&gt;
&lt;a href="//zorbi.cards"&gt;Zorbi FlashCards:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Socials&lt;/strong&gt;&lt;br&gt;
🏗️  &lt;a href="//calvintorra.com"&gt;calvintorra.com&lt;/a&gt;&lt;br&gt;
📱  &lt;a href="//twitter.com/Gr8087"&gt;twitter&lt;/a&gt;&lt;br&gt;
📂  &lt;a href="//github.com/Calvin087"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We were actually given the entire curriculum as an online platform that contains all of the documentation for the course in English which is useful for me. If I get lost at all in Spanish I have the online platform as a backup.&lt;/p&gt;

&lt;p&gt;It only occurred to me the other day to skip ahead and see what things need to be done at the end of each module. And For this first section, it's an HTML CSS and JS game.&lt;/p&gt;

&lt;p&gt;All of the lessons for the next few weeks leading up to the building, presentation and submission of a game, which was a bit worrying for me as I've never done that before.&lt;/p&gt;

&lt;p&gt;So that got me pondering on what my game is going to be about?&lt;/p&gt;

&lt;p&gt;Obviously, it shouldn't be too complicated as I'd end up not finishing it, but after doing a little bit of youtube searching to see what is actually possible I'm now a little obsessed.&lt;/p&gt;

&lt;p&gt;For instance, there's this guy Drew Conley who just walks through the mechanics of his javascript game, the graphics look super cute and simple and they remind me of those old Pokémon games on the Gameboy.&lt;/p&gt;

&lt;p&gt;I'd love to make something like this and if I start early enough maybe I can crank out an MVP in time for the end of the module that is not a complete pile of crap.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theme-of-the-game"&gt;
  &lt;/a&gt;
  Theme of the game
&lt;/h1&gt;

&lt;p&gt;I've never read a lot of fiction so my imagination is really crap compared to when I was a kid. All of my books are instructional how-tos or knowledge books.&lt;/p&gt;

&lt;p&gt;However, when I'm super tired I do binge-watch this youtube series called the SCP Foundation. I have no idea how I came across the first video but it sucked me into a massive rabbit hole of never-ending stories.&lt;/p&gt;

&lt;p&gt;The SCP foundation stands for "Secure Contain Protect". It's a community-based wiki that includes elements of many genres such as science fiction, urban fantasy and horror....and I looooove horror.&lt;/p&gt;

&lt;p&gt;I'm thinking maybe the game can be a simple puzzle game, a monster has breached containment, one or two puzzle features, maybe a scare jump and a count down timer until the SCP Monsters catches up with you and does its thing.&lt;/p&gt;

&lt;p&gt;I haven't actually felt excited about a project in a long time, so I feel that If I try to achieve this, I might be able to make something I'm actually proud of.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#style-of-the-game"&gt;
  &lt;/a&gt;
  Style of the game
&lt;/h1&gt;

&lt;p&gt;A work colleague warned me not to make things too complicated........but I'm sure there must be a shortcut I can take somewhere.&lt;/p&gt;

&lt;p&gt;So For example, something that I found fascinating is a sprite sheet. Rather than animated characters you simply rapidly change the X and y position of the sprite sheet and hide the rest. This happens so fast that the player's eyes simply see a moving character. Things like this can probably save me time in development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-in-public"&gt;
  &lt;/a&gt;
  Building in public.
&lt;/h1&gt;

&lt;p&gt;I'm probably going to make a start on this game idea this week and I might document the journey whether I succeed or fail.&lt;/p&gt;

&lt;p&gt;I guess it's more of a form of accountability than anything else as I usually get bored of side projects pretty quickly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems.
&lt;/h1&gt;

&lt;p&gt;Now that I think about it, I don't know if we're supposed to do this in pairs. If we are then I may have to make this game on my own time rather than burden someone with my silly ideas and over-ambitious projects but we'll see.&lt;/p&gt;

&lt;p&gt;Back to the course.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#array-methods"&gt;
  &lt;/a&gt;
  Array methods
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Map, Reduce, Filter, Sort.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's quite interesting how early on they introduced these methods as they aren't easy concepts to get your head around as a beginner.&lt;/p&gt;

&lt;p&gt;We had a brief intro into how they worked and then we got told to crack on with solving some problems.&lt;/p&gt;

&lt;p&gt;Problems that I thought were pretty intense for someone's second week of programming.&lt;/p&gt;

&lt;p&gt;Array.Sort tripped me up quite a bit this time around.&lt;/p&gt;

&lt;p&gt;We had an array of 250 objects that contained dates, titles, director names as properties.&lt;/p&gt;

&lt;p&gt;We had to sort these in ascending order by their date....fine, but if two objects have the same date, those two had to be sorted alphabetically - all in the same sort iteration.&lt;/p&gt;

&lt;p&gt;I've literally never seen this pattern before and even had a hard time finding solutions or examples online.&lt;/p&gt;

&lt;p&gt;Naturally, I came home and spent another hour digging into how Array.Sort actually works under the hood and how to get it working without just copying and pasting a solution found online.&lt;/p&gt;

&lt;p&gt;Now that I've got it, I'll probably make a video for my future self as that will probably come up again at some point.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pair-programming-second-stage"&gt;
  &lt;/a&gt;
  Pair Programming Second Stage
&lt;/h1&gt;

&lt;p&gt;I was looking forward to pair programming again but this time around I paired up with a new person.&lt;/p&gt;

&lt;p&gt;I think this guy was a little bit similar to me in the sense that he just wanted to be in his own headspace and crank out the problems.&lt;/p&gt;

&lt;p&gt;So we exchanged a few words here and there but in the end, we were solving the new challenges in our own way and moving on without waiting for the other to catch up.&lt;/p&gt;

&lt;p&gt;Not ideal, but I guess this is the reality of working with other people on a mentally taxing exercise.&lt;/p&gt;

&lt;p&gt;Some people are going to be more open to collaboration while others just want to crank out the code and get in the zone.&lt;/p&gt;

&lt;p&gt;Not quite sure which one of those I am yet.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#flashcards-app"&gt;
  &lt;/a&gt;
  FlashCards App
&lt;/h1&gt;

&lt;p&gt;I've already moved away from Mochi and found something called Zorbi. It's a free app and I've already loaded it up without 50 new Spanish words to remember. It's already one of my favourite apps just for its ease of use&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>react</category>
    </item>
  </channel>
</rss>
