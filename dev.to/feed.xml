<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I Built My First Template!</title>
      <author>Desmond</author>
      <pubDate>Sat, 06 Nov 2021 23:49:50 +0000</pubDate>
      <link>https://dev.to/nyamador/i-built-my-first-template-4poo</link>
      <guid>https://dev.to/nyamador/i-built-my-first-template-4poo</guid>
      <description>&lt;p&gt;Hello Dev Community!üëãüèΩ&lt;br&gt;
It's been over a year since I posted here but it's high time I joined the community once again!&lt;/p&gt;

&lt;p&gt;I'm committing to developing HTML and React themes every month. To kickstart that, I developed my first HTML Template which can be purchased on Gumroad with the link below. This template was built solely with HTML, CSS (TailwindCSS) and some JavaScript.&lt;/p&gt;

&lt;p&gt;Here are some beautiful shots of my theme:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rCokkUfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/malg6ejqu6ip37fni396.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rCokkUfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/malg6ejqu6ip37fni396.png" alt="Celerity" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YRow2G9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmgznsfs16eyh574inpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YRow2G9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmgznsfs16eyh574inpk.png" alt="Celerity" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n41igKLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9swc6gfqx3gc8ergk68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n41igKLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9swc6gfqx3gc8ergk68.png" alt="Celerity" width="880" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fyp7k0P5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzqs49hfeh4pn3fandep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fyp7k0P5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzqs49hfeh4pn3fandep.png" alt="Celerity" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Support me by purchasing the theme on Gumroad üôè - &lt;a href="https://desmondny.gumroad.com/l/celerity-saas"&gt;https://desmondny.gumroad.com/l/celerity-saas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kindly Follow me on Twitter as well - &lt;a href="https://twitter.com/DesmondNyamador"&gt;https://twitter.com/DesmondNyamador&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I have built a programming language in python.</title>
      <author>RogersTerra</author>
      <pubDate>Sat, 06 Nov 2021 23:16:58 +0000</pubDate>
      <link>https://dev.to/rogersterra/i-have-built-a-programming-language-in-python-2g1k</link>
      <guid>https://dev.to/rogersterra/i-have-built-a-programming-language-in-python-2g1k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-programmed-a-lang-in-python-from-scratch"&gt;
  &lt;/a&gt;
  I have programmed a lang in python from scratch.
&lt;/h3&gt;

&lt;p&gt;I have used no external library.&lt;/p&gt;

&lt;p&gt;for over 2 months or 3 I have been working on this project. It was very interesting in the beginning but the problem comes at the end creating executables and also packaging.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-am-done-with-the-snytax-it-looks-great"&gt;
  &lt;/a&gt;
  I am done with the snytax it looks great.
&lt;/h4&gt;

&lt;p&gt;All I am wishing, is PyInstaller to give me a clue on how it packages python, this will be enough to make the language interactive and show it out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-more-more-information"&gt;
  &lt;/a&gt;
  For more more information,
&lt;/h4&gt;

&lt;p&gt;visit my github, I have made the code very readable so you can pick up easily if you understand Python very well.&lt;br&gt;
&lt;a href="https://github.com/RogersTerra/Terra.git"&gt;github.com/RogersTerra/Terra.git&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-contribute-to-the-projects-code-if-you-have-any-idea-i-will-be-greatful"&gt;
  &lt;/a&gt;
  you can contribute to the project's code if you have any idea, I will be greatful.
&lt;/h3&gt;

</description>
    </item>
    <item>
      <title>Getting Started with Docker üêã</title>
      <author>Josh</author>
      <pubDate>Sat, 06 Nov 2021 22:47:12 +0000</pubDate>
      <link>https://dev.to/jryther/getting-started-with-docker-39h6</link>
      <guid>https://dev.to/jryther/getting-started-with-docker-39h6</guid>
      <description>&lt;p&gt;Hello everyone!  This week I am going to give a brief tutorial on how to get started with Docker.  See my last post for a conceptual breakdown of what containers are and when to use them.  First thing is to make sure you install docker on your computer.  Click the link for instructions for &lt;a href="https://docs.docker.com/desktop/mac/install/"&gt;Mac&lt;/a&gt;, &lt;a href="https://docs.docker.com/desktop/windows/install/"&gt;Windows&lt;/a&gt;, and &lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Linux&lt;/a&gt;.  Once everything is set up, you can run the hello world command to verify everything is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is good to go we will get started with a prebuilt busybox image.  Busybox is an executable software suite that contains many Unix utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull busybox
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next you tell docker to take the image and run it as a container.  It will look like nothing is happening but docker is running the container behind the scenes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run busybox
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the container started but there were no commands passed to the container for busybox to execute so it exited without doing anything.  Lets throw it an echo statement to see what it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run busybox echo ‚ÄúMy name is busybox!‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next feature we are going to look at is the ps command.  This is the tool used to see all of the containers that are currently running.  Currently if we were to use it there would be nothing listed because the busybox container exits once it is done.  If we add the -a option to it then it will all of the containers that have been ran.&lt;/p&gt;

&lt;p&gt;Once you are done with a container you can remove it using the rm command followed by the container ID.  Note: the container ID below is an example.  You will have to look up yours with the ps command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rm 305297d7a235
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Understanding the Docker terminology is important to reading up on the documentation for more complex projects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Images: These are like the blueprints or a snapshot of the application that is going to be put into the container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Containers: Containers are built using the corresponding image and works kind of like a virtual machine in concept.  See my previous post for a more in depth discussion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker Daemon: This is the background service that runs on the host machine.  It manages building, running, and distributing them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker Client: This is the command line tool that allows users to interface with the daemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker Hub: This is a &lt;a href="https://hub.docker.com/search?q=&amp;amp;type=image"&gt;registry&lt;/a&gt; of prebuilt docker images like the busybox one we used.  You can pull prebuilt images of ubuntu, postgres, python, and many more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last thing I am going to discuss before wrapping up this post are Dockerfiles.  Dockerfiles are a text file that is a series of commands that tells the client how to build the container.  Depending on how complex your container is this can be simple.  Below I will show the structure of a Dockerfile for a basic python flask app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM python:3

# set a directory for the app
WORKDIR /usr/src/app

# copy all the files to the container
COPY . .

# install dependencies
RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The order of operations for this is that you first want to specify the image you are pulling FROM which in this case is Python.  Next you specify the working directory and copy all of the files in it to the container.  Once that is done you run pip install in the container to install any needed dependencies.  For networking you expose port 5000 so that it can be accessed outside of the container.  Lastly you run the CMD command to tell the container which command it should run and the file to run the command on.&lt;/p&gt;

&lt;p&gt;From here you run the docker build command on the directory that contains the dockerfile which should be in the root folder of your project.  See the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t yourAppFolder .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well everyone, this was a guide on how to get started with Docker.  There are many more things to learn especially if you want to start working with micro-services and have to orchestrate two or more containers for an application.  I invite you to dig deeper and try building your own containers for an application.  Let me know in the comments if you enjoyed this guide or like this post so that more people check it out.  I hope you all have a great week and happy coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docker-curriculum.com/"&gt;https://docker-curriculum.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/docker/docker_images.htm"&gt;https://www.tutorialspoint.com/docker/docker_images.htm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.docker.com/"&gt;https://docs.docker.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>docker</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why Shoplazza choose Amazon Web Service AWS as primary infrastructural platform - episode#1
</title>
      <author>Luk C</author>
      <pubDate>Sat, 06 Nov 2021 22:01:08 +0000</pubDate>
      <link>https://dev.to/lukchan/why-shoplazza-choose-amazon-web-service-aws-as-primary-infrastructural-platform-episode1-51a</link>
      <guid>https://dev.to/lukchan/why-shoplazza-choose-amazon-web-service-aws-as-primary-infrastructural-platform-episode1-51a</guid>
      <description>&lt;p&gt;November 2021&lt;br&gt;
Estimated reading time: 20 mins&lt;/p&gt;

&lt;p&gt;Shoplazza is a leading global eCommerce Saas platform offering trusted powerful tools for global merchants to start, grow, market and manage their business of any size digitally, in simple terms, bring the brick-and-mortar stores online. Shoplazza commits to make eBusiness simpler, cheaper and better for anyone with its global platform and services that are engineered with Amazon Web Services (AWS) to deliver reliable, safe, seamless online shopping experiences for consumers around the world. Our merchants can effectively and economically leverage their businesses to scale at a global scope in just a few clicks.&lt;/p&gt;

&lt;p&gt;Table of contents:&lt;br&gt;
Episode 1&lt;br&gt;
Shoplazza Software-as-a-Service model&lt;br&gt;
Cloud computing concept&lt;br&gt;
Episode 2&lt;br&gt;
What is AWS and services offered?&lt;br&gt;
Episode 3&lt;br&gt;
Shoplazza eCommerce architecture&lt;br&gt;
Episode 4&lt;br&gt;
Deployment of Shoplazza applications&lt;/p&gt;

&lt;p&gt;Shoplazza SaaS model&lt;/p&gt;

&lt;p&gt;Whether you're a startup entrepreneur with an idea for a revolutionary new product or service, or you are anxiously working hard to expand present business at national or international scope. An online store with fully-operational-cycle functions,  where customers from all over the world can easily find and access your digital eCommerce business, has been a trendy and proven business model for merchants of all sizes. &lt;/p&gt;

&lt;p&gt;Traditionally, merchants either build a website or hire an expert to do that. However, as the rapid advancements in online eCommerce technology, anyone with a willing mind now is empowered and enabled by Shoplazza SaaS (Software-as-a-Service) based products. Okay, enough for the mystical high-tech jargon. &lt;/p&gt;

&lt;p&gt;In plain English, Shoplazza offers an online platform where global merchants can access its unique products and services via monthly or annual subscriptions for building a fully functional online eCommerce store, such as with the implementations of product display, email subscription, traffic redirections, digital ads, shipping trackings, payment gateways and other business features that you need to complete a commerce transaction in any brick and mortar shops. In Shoplazza's case, you as a merchant only need to focus on your most important tasks, such as product design, customer services. On the other hand, Shoplazza, as a store-building-service-provider, will manage, maintain and scale all the online infrastructural systems, such as cyber security, platform stability, global web accessing speed, server side scaling etc. &lt;/p&gt;

&lt;p&gt;This is roughly how Shoplazza serves global merchants, even though there are so much more &lt;br&gt;
Underlying works being carried out behind the scene. Therefore, a clear boundary is drawn here, Shoplazza offers powerful online store building tools and management systems to merchants who are responsible for building, selling, managing any activities concerning their trademarks, products and services. &lt;/p&gt;

&lt;p&gt;Why SaaS?&lt;/p&gt;

&lt;p&gt;We've briefly covered the topic of SaaS and Shoplazza SaaS models. But you may still scratch your head with a big WHY? Why SaaS for eCommerce?&lt;/p&gt;

&lt;p&gt;Let's put ourselves in a simple scenario.  After a successful marketing campaign and concerted sales effort, dozens of customers either subscribe to your services or place dozens of orders for your products. Traditionally, merchants build their own store from scratch, rent servers and purchase storage to allow and maintain a certain acceptable speed for customers to access, browse, order or take other activities. It is expensive, inconvenient and complicated to scale up with your back-end resources. Once hardwares are invested, if the black-friday seasons once passed, traffic and in-bound order related processing workload reduces, it is not an economic way to handle regular business seasonal surges. &lt;/p&gt;

&lt;p&gt;You‚Äôre ecstatic‚Äîuntil you realize you never architected your product for this level of success. You were so busy coding, raising capital, marketing, and selling, buying hardwares and softwares. But you never planned how you could scale your business freely with a Saas product. &lt;/p&gt;

&lt;p&gt;With Shoplazza's one-stop drag-n-drop store-building tools, merchants can enjoy totally worry-free business solutions as Shoplazza handles elastic scaling up-n-down for back-end systems. Also, tons of free-of-charge built-in applications that help merchants to manage all aspects of their digital business are offered in Shoplazza AppStore, which are also deployed through AWS to ensure merchants at any corner of the world have a seamless experience of applying the needed Shoplazza built-in applications to their operations. We will talk about application deployment later at episode 4. &lt;/p&gt;

&lt;p&gt;Benefits of moving your business to Shoplazza cloud&lt;/p&gt;

&lt;p&gt;Go-to-Cloud is a very trendy topic during recent years, as the booming of cloud technologies. In fact, cloud computing includes tools and applications like data storage, servers, databases, networking and software. Rather than owning their own computing infrastructure or data centers, companies can rent access to anything from applications to storage from a cloud service provider. &lt;/p&gt;

&lt;p&gt;Cloud computing transforms IT infrastructure into a utility: It lets you ‚Äòplug into' infrastructure via the internet, and use computing resources without installing and maintaining them on-premises.&lt;/p&gt;

&lt;p&gt;Cloud computing is on-demand access, via the internet, to computing resources‚Äîapplications, servers (physical servers and virtual servers), data storage, development tools, networking capabilities, and more‚Äîhosted at a remote data center managed by a cloud services provider (or CSP). The CSP makes these resources available for a monthly subscription fee or bills them according to usage.&lt;br&gt;
Compared to traditional on-premises IT, and depending on the cloud services you select, cloud computing helps do the following:&lt;br&gt;
Lower IT costs: Cloud lets you offload some or most of the costs and effort of purchasing, installing, configuring, and managing your own on-premises infrastructure. &lt;br&gt;
Improve agility and time-to-value: With cloud, your organization can start using enterprise applications in minutes, instead of waiting weeks or months for IT to respond to a request, purchase and configure supporting hardware, and install software. Cloud also lets you empower certain users‚Äîspecifically developers and data scientists‚Äîto help themselves to software and support infrastructure.&lt;br&gt;
Scale more easily and cost-effectively: Cloud provides elasticity‚Äîinstead of purchasing excess capacity that sits unused during slow periods, you can scale capacity up and down in response to spikes and dips in traffic. You can also take advantage of your cloud provider‚Äôs global network to spread your applications closer to users around the world.&lt;/p&gt;

&lt;p&gt;The term ‚Äòcloud computing‚Äô also refers to the technology that makes cloud work. This includes some form of virtualized IT infrastructure‚Äîservers, operating system software, networking, and other infrastructure that‚Äôs abstracted, using special software, so that it can be pooled and divided irrespective of physical hardware boundaries. For example, a single hardware server can be divided into multiple virtual servers.&lt;/p&gt;

&lt;p&gt;Virtualization enables cloud providers to make maximum use of their data center resources. Not surprisingly, many corporations have adopted the cloud delivery model for their on-premises infrastructure so they can realize maximum utilization and cost savings vs. traditional IT infrastructure and offer the same self-service and agility to their end-users.&lt;/p&gt;

&lt;p&gt;If you use a computer or mobile device at home or at work, you almost certainly use some form of cloud computing every day, whether it‚Äôs a cloud application like Google Gmail or Salesforce, streaming media like Netflix, or cloud file storage like Dropbox. According to a recent survey, 92% of organizations use cloud today (link resides outside IBM), and most of them plan to use it more within the next year.&lt;/p&gt;

&lt;p&gt;Today, we covered a few simple concepts concerning cloud services and Shoplazza SaaS model. Next time, we will talk about AWS services and why Shoplazza chose AWS. &lt;br&gt;
To subscribe to Shoplazza Blog for free learning, click here. &lt;br&gt;
To start your 7-day free trial with Shoplazza store building products, click here. &lt;/p&gt;

</description>
      <category>shoplazza</category>
      <category>aws</category>
      <category>cloud</category>
      <category>saas</category>
    </item>
    <item>
      <title>Creating a CRUD API With Node js - Shoplazza coding camp</title>
      <author>Luk C</author>
      <pubDate>Sat, 06 Nov 2021 21:57:56 +0000</pubDate>
      <link>https://dev.to/lukchan/creating-a-crud-api-with-node-js-57</link>
      <guid>https://dev.to/lukchan/creating-a-crud-api-with-node-js-57</guid>
      <description>&lt;p&gt;As a application developer, are you dazzled by all those cutting age fancy terminologies and jargons? If you are a Javascripter, lucky you, Node.js definitely will help you manage the back-end during your AppDev process. If you are new to eCommerce platform App development domain, it's imperative to understand and get your hands dirty on the construction of API. There are several ways to build API, today I will use Node.js (based on Javascript language) to build a CRUD API.&lt;/p&gt;

&lt;p&gt;Don't worry, let's get to some basic concepts before we hit on the road.&lt;/p&gt;

&lt;p&gt;What is CRUD?&lt;br&gt;
CRUD stands for Create, Read, Update, and Delete.&lt;/p&gt;

&lt;p&gt;Create - To insert any record to the database.&lt;br&gt;
Read - To retrieve records from the database.&lt;br&gt;
Update - To update a record in the database.&lt;br&gt;
Delete - To delete a record in the database.&lt;br&gt;
Express is one of the most popular web frameworks for node.js. It is built on top of node.js http module, and adds support for routing, middleware, view system etc. It is very simple and minimal, unlike other frameworks that try do way to much, thereby reducing the flexibility for developers to have their own design choices.&lt;/p&gt;

&lt;p&gt;Mongoose is an ODM (Object Document Mapping) tool for Node.js and MongoDB. It helps you convert the objects in your code to documents in the database and vice versa.&lt;/p&gt;

&lt;p&gt;Table of contents:&lt;br&gt;
Create a Node project&lt;br&gt;
Create an employee model&lt;br&gt;
Create API&lt;br&gt;
Read API&lt;br&gt;
Update API&lt;br&gt;
Delete API&lt;br&gt;
Deployment (a topic for next time)&lt;br&gt;
Creating a Node Project&lt;br&gt;
To begin with, let's create a simple Node project named crud.&lt;/p&gt;

&lt;p&gt;mkdir crud&lt;br&gt;
cd crud/&lt;br&gt;
npm init -y&lt;br&gt;
touch index.js&lt;br&gt;
package.json&lt;/p&gt;

&lt;p&gt;"scripts": {&lt;br&gt;
  "start":"node index.js",&lt;br&gt;
  "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"&lt;br&gt;
},&lt;br&gt;
After creating it, install all the required packages like express, body-parser, and mongoose.&lt;/p&gt;

&lt;p&gt;express - To structure our web application to handle multiple different HTTP requests.&lt;br&gt;
body-parser - To read the request body and to parse it into JSON format.&lt;br&gt;
mongoose - To connect with MongoDB.&lt;br&gt;
npm install express&lt;br&gt;
npm i body-parser&lt;br&gt;
npm i mongoose&lt;br&gt;
Once done, create the server file. To do that, copy the below code to your index.js file.&lt;/p&gt;

&lt;p&gt;index.js&lt;/p&gt;

&lt;p&gt;const express = require('express')&lt;br&gt;
var app = express()//Route&lt;br&gt;
app.get('/',function(req,res){&lt;br&gt;
res.send('hello world')&lt;br&gt;
})//MongoDB connection&lt;br&gt;
mongoose.connect('mongodb://localhost/test', {useNewUrlParser: true});&lt;br&gt;
mongoose.connection.once('open',function(){&lt;br&gt;
console.log('Database connected Successfully');&lt;br&gt;
}).on('error',function(err){&lt;br&gt;
console.log('Error', err);&lt;br&gt;
})//Server&lt;br&gt;
app.listen(8000,function(){&lt;br&gt;
console.log('Server is Up')&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;Just by starting the server, you should see hello world getting displayed on the browser. (&lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;npm start&lt;/p&gt;

&lt;p&gt;Also, create three other folders named Controller, Routes, and Models. My project structure looks like this.&lt;/p&gt;

&lt;p&gt;project structure&lt;/p&gt;

&lt;p&gt;Creating an Employee Model&lt;br&gt;
To perform any database operation, the first thing we need is a schema. So let‚Äôs create it first.&lt;/p&gt;

&lt;p&gt;Below, I have created an Employee schema with attributes empName, empEmail, and empMobile.&lt;/p&gt;

&lt;p&gt;Models/emp.js&lt;/p&gt;

&lt;p&gt;const mongoose = require('mongoose')const empSchema = new mongoose.Schema({&lt;br&gt;
  empName: {&lt;br&gt;
    type: String,&lt;br&gt;
    required: true&lt;br&gt;
  },&lt;br&gt;
  empEmail: {&lt;br&gt;
    type: String,&lt;br&gt;
    required: true&lt;br&gt;
  },&lt;br&gt;
  empMobile: {&lt;br&gt;
   type: String,&lt;br&gt;
   required: true&lt;br&gt;
  },&lt;br&gt;
})module.exports = mongoose.model('Emp', empSchema)&lt;/p&gt;

&lt;p&gt;Create API&lt;/p&gt;

&lt;p&gt;Now let‚Äôs start creating a restful API. Initially, I am creating a Create API that inserts an employee recorded into our MongoDB database.&lt;/p&gt;

&lt;p&gt;So, to do that, I am creating a routes file named emp.js where we write all our routes for the employee Model.&lt;/p&gt;

&lt;p&gt;Routes/emp.js&lt;/p&gt;

&lt;p&gt;const express = require('express')&lt;br&gt;
var router = express()&lt;br&gt;
const create = require('../controller/emp')&lt;br&gt;
const bodyparser = require('body-parser');router.use(bodyparser.json())&lt;br&gt;
router.post('/create',create.create)module.exports = router&lt;/p&gt;

&lt;p&gt;The below code gets the request and response from the route and it creates an Emp object. Once created, it saves the object to MongoDB. If any error occurs, it is also handled automatically.&lt;/p&gt;

&lt;p&gt;Controller/emp.js&lt;/p&gt;

&lt;p&gt;const Emp = require('../models/emp')&lt;br&gt;
const mongoose = require('mongoose')function create(req,res,next){&lt;br&gt;
let empName = req.body.empName;&lt;br&gt;
let empEmail = req.body.empEmail;&lt;br&gt;
let empMobile = req.body.empMobile;&lt;br&gt;
let emp = new Emp({&lt;br&gt;
empName,&lt;br&gt;
empEmail,&lt;br&gt;
empMobile&lt;br&gt;
})&lt;br&gt;
emp.save().then((data)=&amp;gt;{&lt;br&gt;
res.send(data)&lt;br&gt;
})&lt;br&gt;
}module.exports.create = create&lt;/p&gt;

&lt;p&gt;Once done, call the employee route in the server file with a prefix /emp.&lt;/p&gt;

&lt;p&gt;index.js&lt;/p&gt;

&lt;p&gt;const router = require('./routes/emp')app.use('/emp',router)&lt;/p&gt;

&lt;p&gt;Read API&lt;/p&gt;

&lt;p&gt;Now let‚Äôs retrieve all the data that are stored in the database. To do that, create a new route.&lt;/p&gt;

&lt;p&gt;Routes/emp.js&lt;/p&gt;

&lt;p&gt;const express = require('express')&lt;br&gt;
var router = express()&lt;br&gt;
const create = require('../controller/emp')&lt;br&gt;
const view = require('../controller/emp')&lt;br&gt;
const bodyparser = require('body-parser');router.use(bodyparser.json())&lt;br&gt;
router.post('/create',create.create)&lt;br&gt;
router.get('/',view.view)module.exports = router&lt;/p&gt;

&lt;p&gt;After creating the route, create a new function named view in the employee controller. Just by calling the function find, we can retrieve every record from the collection.&lt;/p&gt;

&lt;p&gt;Controller/emp.js&lt;/p&gt;

&lt;p&gt;const Emp = require('../models/emp')&lt;br&gt;
const mongoose = require('mongoose')function create(req,res,next){&lt;br&gt;
  let empName = req.body.empName;&lt;br&gt;
  let empEmail = req.body.empEmail;&lt;br&gt;
  let empMobile = req.body.empMobile;&lt;br&gt;
  let emp = new Emp({&lt;br&gt;
    empName,&lt;br&gt;
    empEmail,&lt;br&gt;
    empMobile&lt;br&gt;
  })&lt;br&gt;
  emp.save().then((data)=&amp;gt;{&lt;br&gt;
    res.send(data)&lt;br&gt;
  })&lt;br&gt;
}function view(req,res,next){&lt;br&gt;
  Emp.find({}).then((data)=&amp;gt;{&lt;br&gt;
    res.send(data)&lt;br&gt;
  })&lt;br&gt;
}module.exports.create = create&lt;br&gt;
module.exports.view = view&lt;br&gt;
On visiting the URL &lt;a href="http://localhost:8000/emp"&gt;http://localhost:8000/emp&lt;/a&gt;, you will see all the employee values getting displayed.&lt;/p&gt;

&lt;p&gt;Update API&lt;/p&gt;

&lt;p&gt;To create an update API, create another route as done above. To update a record, we make a patch or a put request.&lt;/p&gt;

&lt;p&gt;Routes/emp.js&lt;/p&gt;

&lt;p&gt;const update = require('../controller/emp')router.patch('/:id',update.update)&lt;/p&gt;

&lt;p&gt;Now move towards the employee controller and create a new function named update which will update the employee record.&lt;/p&gt;

&lt;p&gt;To update a record, we should find if the record exists in the database. This can be done by the findByIdAndUpdate method wherein we have to pass the _id of the record and the values, we want to change.&lt;/p&gt;

&lt;p&gt;Controller/emp.js&lt;/p&gt;

&lt;p&gt;function update(req,res,next){&lt;br&gt;
  Emp.findByIdAndUpdate(req.params.id,req.body, (err,emp)=&amp;gt;{&lt;br&gt;
    if (err) {&lt;br&gt;
      return res.status(500).send({error: "Problem with Updating the   Employee recored "})&lt;br&gt;
    };&lt;br&gt;
    res.send({success: "Updation successfull"});&lt;br&gt;
  })&lt;br&gt;
}module.exports.update = update&lt;/p&gt;

&lt;p&gt;Make a Patch request to &lt;a href="http://localhost:8000/emp/"&gt;http://localhost:8000/emp/&lt;/a&gt; with the data to be changed. This will update the employee record.&lt;/p&gt;

&lt;p&gt;Delete API&lt;/p&gt;

&lt;p&gt;Creating a Delete API view is the most simple one out of all. To delete a record from a database, we make adelete request. As we did earlier, create another route for deleting a record. The route should have a parameter id that tells which record should be deleted.&lt;/p&gt;

&lt;p&gt;Routes/emp.js&lt;/p&gt;

&lt;p&gt;const remove = require('../controller/emp')router.delete('/delete/:id',remove.remove)&lt;/p&gt;

&lt;p&gt;Inside the controller, create a function named remove for deleting employee records from the database. Deleting a record can be done using the findByIdAndDelete method which is similar to the findByIdAndUpdate method. It also requires the same _id.&lt;/p&gt;

&lt;p&gt;Controller/emp.js&lt;/p&gt;

&lt;p&gt;function remove(req,res,next){&lt;br&gt;
  Emp.findByIdAndDelete(req.params.id, (err,emp)=&amp;gt;{&lt;br&gt;
    if(err){&lt;br&gt;
      return res.status(500).send({error: "Problem with Deleting the&lt;br&gt;
Employee recored "})&lt;br&gt;
    }&lt;br&gt;
    res.send({success: 'Employee deleted successfully'})&lt;br&gt;
  })&lt;br&gt;
}module.exports.remove = remove&lt;/p&gt;

&lt;p&gt;On making a delete request to the URL &lt;a href="http://localhost:8000/emp/delete"&gt;http://localhost:8000/emp/delete&lt;/a&gt;, you can delete any record from that database.&lt;/p&gt;

&lt;p&gt;There are many choices to deploy your applications, such as Heroku, we will discuss it next time.&lt;/p&gt;

&lt;p&gt;Well, that's about it. Stay tuned with SHOPLAZZA blog!. Happy coding time!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The ultimate collection of production-ready NestJS Boilerplate</title>
      <author>Joey Goksu</author>
      <pubDate>Sat, 06 Nov 2021 20:57:20 +0000</pubDate>
      <link>https://dev.to/joeygoksu/the-ultimate-collection-of-production-ready-nestjs-boilerplate-2d4h</link>
      <guid>https://dev.to/joeygoksu/the-ultimate-collection-of-production-ready-nestjs-boilerplate-2d4h</guid>
      <description>&lt;p&gt;The ultimate collection of production-ready and flexible NestJS Boilerplate.  üöÄ &lt;/p&gt;

&lt;p&gt;NestJS framework boilerplate with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üì± &lt;strong&gt;NestJS&lt;/strong&gt; ‚Äî latest version&lt;/li&gt;
&lt;li&gt;üéâ &lt;strong&gt;TypeScript&lt;/strong&gt; - Type checking&lt;/li&gt;
&lt;li&gt;‚öôÔ∏è &lt;strong&gt;Dotenv&lt;/strong&gt; - Supports environment variables&lt;/li&gt;
&lt;li&gt;üóù &lt;strong&gt;Authentication&lt;/strong&gt; - JWT, RSA256&lt;/li&gt;
&lt;li&gt;üè¨ &lt;strong&gt;Authorization&lt;/strong&gt; - RBAC, CBAC&lt;/li&gt;
&lt;li&gt;üè™ &lt;strong&gt;TypeORM&lt;/strong&gt; - Database ORM&lt;/li&gt;
&lt;li&gt;üè™ &lt;strong&gt;PostgreSQL&lt;/strong&gt; - Open-Source Relational Database&lt;/li&gt;
&lt;li&gt;üß† &lt;strong&gt;Configuration&lt;/strong&gt; - Single config for all&lt;/li&gt;
&lt;li&gt;üìÉ &lt;strong&gt;Swagger&lt;/strong&gt; - API Documentation&lt;/li&gt;
&lt;li&gt;üê≥ &lt;strong&gt;Docker Compose&lt;/strong&gt; - Container Orchestration&lt;/li&gt;
&lt;li&gt;üîê &lt;strong&gt;Helmet&lt;/strong&gt; - secure HTTP headers&lt;/li&gt;
&lt;li&gt;üò¥ &lt;strong&gt;Insomnia&lt;/strong&gt; - Insomnia config for endpoints&lt;/li&gt;
&lt;li&gt;üìè &lt;strong&gt;ESLint&lt;/strong&gt; ‚Äî Pluggable JavaScript linter&lt;/li&gt;
&lt;li&gt;üíñ &lt;strong&gt;Prettier&lt;/strong&gt; - Opinionated Code Formatter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üëâ Let's try: &lt;a href="https://github.com/joeygoksu/prime-nestjs"&gt;https://github.com/joeygoksu/prime-nestjs&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;My other blog posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://joeygoksu.com/software/kubernetes-on-aws-eks-for-beginners-part-1/"&gt;Kubernetes on AWS EKS for Beginners(Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joeygoksu.com/software/apache-nifi-on-aws/"&gt;Apache NiFi on AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joeygoksu.com/software/lottie-and-gatsby/"&gt;Using lottie animations in gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joeygoksu.com/software/coding-criteria/"&gt;Coding Criteria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joeygoksu.com/software/aws-amplify-auth-directives/"&gt;AWS Amplify @auth directives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>nestjs</category>
      <category>boilerplate</category>
      <category>backend</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How I overcame my fear of technical writing and landed a job at freeCodeCamp</title>
      <author>Jessica Wilkins</author>
      <pubDate>Sat, 06 Nov 2021 20:28:04 +0000</pubDate>
      <link>https://dev.to/codergirl1991/how-i-overcame-my-fear-of-technical-writing-and-landed-a-job-at-freecodecamp-37d6</link>
      <guid>https://dev.to/codergirl1991/how-i-overcame-my-fear-of-technical-writing-and-landed-a-job-at-freecodecamp-37d6</guid>
      <description>&lt;p&gt;If you had asked me in June of 2020 if I would become a professional technical writer, I would have never believed you.&lt;/p&gt;

&lt;p&gt;Before the pandemic, I was a professional classical musician spending all of my time performing, recording and teaching. &lt;/p&gt;

&lt;p&gt;But the pandemic introduced me to the world of programming and it has been a great journey so far.&lt;/p&gt;

&lt;p&gt;This life of being a developer and technical writer was a complete surprise to me but an unexpected blessing. &lt;/p&gt;

&lt;p&gt;As of today, I have had 60 articles published on &lt;a href="https://www.freecodecamp.org/news/"&gt;freeCodeCamp News&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But how did I wind up at &lt;a href="https://www.freecodecamp.org/learn/"&gt;freeCodeCamp&lt;/a&gt;?&lt;br&gt;
And why did I initially say no to getting paid to write articles? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-it-all-began"&gt;
  &lt;/a&gt;
  Where it all began
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@mxhpics?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Maxime Horlaville&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/beginning?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2eWLbWqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dszrgwmzydfbxiv3p7q6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2eWLbWqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dszrgwmzydfbxiv3p7q6.jpg" alt="journey is on message" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the pandemic hit in March of 2020, all of my performances, conferences and teaching engagements were cancelled. &lt;/p&gt;

&lt;p&gt;It was really devastating to go from a completely booked calendar to nothing at all. The only thing I had left was my online sheet music business.&lt;/p&gt;

&lt;p&gt;For the next few months, I focused all of my energy on running the business and waiting for the pandemic to blow over.&lt;/p&gt;

&lt;p&gt;But in June of 2020, the United States was struggling and things were getting dangerous. &lt;/p&gt;

&lt;p&gt;The pandemic was in full swing and there were protests all over the country because of George Floyd's murder at the hands of a cop named Derek Chauvin.  &lt;/p&gt;

&lt;p&gt;But there was a little bit of light coming through the darkness. &lt;/p&gt;

&lt;p&gt;Due to all of the protests, a long overdue conversation was starting about the lack of diversity in many industries including mine.&lt;/p&gt;

&lt;p&gt;When this diversity conversation started in the classical world, people were asking me about information on black composers from the past and present.&lt;/p&gt;

&lt;p&gt;That was when I decided to start learning how to code so I could create the &lt;a href="https://black-excellence-music-project.netlify.app/"&gt;Black Excellence Music Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During my first few months of learning, I took a few online courses on HTML and CSS but I wasn't that active in the tech community. &lt;/p&gt;

&lt;p&gt;In September of 2020, I decided to join the &lt;a href="https://forum.freecodecamp.org/"&gt;freeCodeCamp forum&lt;/a&gt; and connect with other beginners like me.&lt;/p&gt;

&lt;p&gt;Within a month of being on the forum, I received a message that changed the course of my learning journey forever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meeting-quincy-larson"&gt;
  &lt;/a&gt;
  Meeting Quincy Larson
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@etiennegirardet?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Etienne Girardet&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/writing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DB3Szdsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztd89fkek6cvrnhxkuv7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DB3Szdsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztd89fkek6cvrnhxkuv7.jpg" alt="what is your story" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/author/quincylarson/"&gt;Quincy&lt;/a&gt; had reached out to me wanting to chat because of my responses on the forum. I was pleasantly surprised to hear from him and agreed to the meeting.&lt;/p&gt;

&lt;p&gt;We spoke for about 45 minutes and each shared our stories into tech. He then asked me if I wanted to be a moderator for the forum and write articles on the news publication.&lt;/p&gt;

&lt;p&gt;At first, I was a little hesitant to agree to write articles because I wasn't sure what to write about. But he explained that I could write about my journey and the lessons I have learned along the way.&lt;/p&gt;

&lt;p&gt;With that bit of encouragement, I decided to submit an application and was accepted as a volunteer contributor author. &lt;/p&gt;

&lt;p&gt;For my first few articles, I talked about the &lt;a href="https://www.freecodecamp.org/news/why-i-love-being-a-beginner-programmer/"&gt;best parts of being a beginner developer&lt;/a&gt; and the &lt;a href="https://www.freecodecamp.org/news/how-my-musical-training-helped-me-learn-how-to-code/"&gt;parallels between music and programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After a few months of writing about my journey, Quincy approached me again with a different proposal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turning-down-quincys-offer"&gt;
  &lt;/a&gt;
  Turning down Quincy's offer
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@nickmorrison?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Nick Morrison&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/writing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hkxTbF65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/re9jt3wshkwzdyt7faut.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hkxTbF65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/re9jt3wshkwzdyt7faut.jpg" alt="writing tools" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quincy approached me in early 2021 to start writing technical articles and I would be paid per article. He created a list of headlines around web development and I could choose the headlines that I felt comfortable working with.&lt;/p&gt;

&lt;p&gt;It was a great offer and I was honored to be asked. &lt;/p&gt;

&lt;p&gt;But I initially said no.&lt;/p&gt;

&lt;p&gt;At the time, I didn't think I could write anything of quality because I hadn't been programming that long. I hadn't even hit the one year mark of learning.&lt;/p&gt;

&lt;p&gt;But Quincy made a very good point.&lt;/p&gt;

&lt;p&gt;He told me that I was a good communicator and knew how to research thoroughly. He also said I didn't need to be an expert to start writing technical articles.&lt;/p&gt;

&lt;p&gt;As long as I could break down the technical aspects in an easy to understand manner, then people would read my articles.&lt;/p&gt;

&lt;p&gt;So with that bit of encouragement, I accepted his offer and was assigned my first article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overcoming-the-fear-of-criticism"&gt;
  &lt;/a&gt;
  Overcoming the fear of criticism
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@helloimnik?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Hello I'm Nik&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/saying-no?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XpPGIB_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8qumcx4cnzoc2votqsf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XpPGIB_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8qumcx4cnzoc2votqsf.jpg" alt="fear t-shirt" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My first few technical articles were on HTML tags and the true semantic meanings behind them.&lt;/p&gt;

&lt;p&gt;I probably read through those early drafts dozens of times to make sure everything was as accurate as it could be.&lt;/p&gt;

&lt;p&gt;Whenever I submitted an article to the freeCodeCamp editor(Abbey), I wasn't sure how she would receive them. &lt;/p&gt;

&lt;p&gt;Was she going to ask for a whole bunch of changes?&lt;br&gt;
Was she going to like it?&lt;br&gt;
Was she going to ask me to rewrite the whole thing?&lt;/p&gt;

&lt;p&gt;It turned out, that she liked them and the revisions she asked for were pretty minor.&lt;/p&gt;

&lt;p&gt;My confidence started to rise, but I was still nervous about how other developers were going to respond.&lt;/p&gt;

&lt;p&gt;Whenever anyone puts themselves out there, there is always the fear of rejection and criticism.&lt;/p&gt;

&lt;p&gt;I worried if I was going to be accepted by the developer community.&lt;/p&gt;

&lt;p&gt;The moment of truth came when my articles started being shared on the freeCodeCamp Twitter and LinkedIn accounts. &lt;/p&gt;

&lt;p&gt;At first, I didn't want to read the comments because I was afraid they were going to be negative. &lt;/p&gt;

&lt;p&gt;But I was pleasantly surprised by the positive reviews. It was really neat to see people retweeting my articles and leaving positive feedback. &lt;/p&gt;

&lt;p&gt;Since then, I have fallen in love with technical writing and have grown a lot in the process. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-the-freecodecamp-team"&gt;
  &lt;/a&gt;
  Joining the freeCodeCamp team
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@windows?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Windows&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/team?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8iUzHdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u43ki4gyogbcq1hy8k5g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8iUzHdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u43ki4gyogbcq1hy8k5g.jpg" alt="team mates" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After months of writing articles, Quincy made me an offer to join the freeCodeCamp staff.&lt;/p&gt;

&lt;p&gt;In August of 2021, I officially started as a staff author for freeCodeCamp. &lt;/p&gt;

&lt;p&gt;Since then, I have written dozens of articles on HTML, CSS, JavaScript, SQL, Python and more. &lt;/p&gt;

&lt;p&gt;I enjoy learning about new technologies and teaching them to others. My writing has also had a positive impact on my developer skills. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-moral-of-story"&gt;
  &lt;/a&gt;
  What is the moral of story?
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@kidcircus?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Kid Circus&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/jump?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yGrE9k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqvpuduxjdjqr8601qqn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yGrE9k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqvpuduxjdjqr8601qqn.jpg" alt="personal jumping" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes life throws you curveballs and you never know what will happen next.&lt;/p&gt;

&lt;p&gt;If it weren't for the pandemic, I don't think I would have ever tried programming.&lt;/p&gt;

&lt;p&gt;If it weren't for me joining the freeCodeCamp forum and actively participating, I never would have met Quincy. &lt;/p&gt;

&lt;p&gt;When a new opportunity presents itself, try to have an open mind about it. It is ok to be scared and reluctant at first to try new things.&lt;/p&gt;

&lt;p&gt;But lean into the fear and go for it anyway. &lt;/p&gt;

&lt;p&gt;It might end up being the best thing that ever happened to you.&lt;/p&gt;

&lt;p&gt;Thank you for reading my post. üòÑ&lt;/p&gt;

&lt;p&gt;If you want to read some of my articles, then check out my &lt;a href="https://www.freecodecamp.org/news/author/jessica-wilkins/"&gt;freeCodeCamp author page&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Awesome react hooks</title>
      <author>dev tips</author>
      <pubDate>Sat, 06 Nov 2021 20:24:21 +0000</pubDate>
      <link>https://dev.to/devtips3/awesome-react-hooks-2kog</link>
      <guid>https://dev.to/devtips3/awesome-react-hooks-2kog</guid>
      <description>&lt;p&gt;awesome-react-hooks&lt;/p&gt;

&lt;p&gt;A curated list of awesome things related to React Hooks&lt;/p&gt;

&lt;p&gt;Github : &lt;a href="https://github.com/saidMounaim/awesome-react-hooks"&gt;https://github.com/saidMounaim/awesome-react-hooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow Me On Github : &lt;a href="https://github.com/saidMounaim/"&gt;https://github.com/saidMounaim/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why I'm studying this? - Web Applications Security, Part 1</title>
      <author>Leonardo Felicissimo</author>
      <pubDate>Sat, 06 Nov 2021 19:57:37 +0000</pubDate>
      <link>https://dev.to/leofelicissimo/why-im-studying-this-web-applications-security-part-1-3el6</link>
      <guid>https://dev.to/leofelicissimo/why-im-studying-this-web-applications-security-part-1-3el6</guid>
      <description>&lt;p&gt;This and the followings texts will be part of my personal study about security for Web Applications. It represents a big challenge for me. For two reasons: First, because english is not my first language and I couldn't imagine to write a text in english at my life. And second, because security is a gap that I have at this exactly moment. And with this and others texts I want to win this two challenges and get enter in a beautiful and new world!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b2oLOUXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp1yv126unmow6lwl190.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2oLOUXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp1yv126unmow6lwl190.png" alt="A scene of the world destroyed. Grays sky, destroyed cars, and empty street" width="800" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just kidding lol, let's move on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-importance-of-security-and-my-shame"&gt;
  &lt;/a&gt;
  The importance of security and my shame
&lt;/h2&gt;

&lt;p&gt;Security is an important them when we are building an information system, because in this kind of application we have private data going from a side to another. Then, it is not without importance (I know that must exists a better term for this) because in case of have our data stolen our users could be prejudiced and all the system would fall.&lt;/p&gt;

&lt;p&gt;But unfortunately when we are building a product not always we are prioritizing build it considering that the best security practices is applied.&lt;/p&gt;

&lt;p&gt;Last days I get interviewed and one of the questions was about security. In that time I see a lack of knowledge that I had in this topic. The question was very simple: "How you will store the password in database with security". And the only response that I gave was: "I could use md5 hash for store" HAHAHAHAHAHAHAHAHAHAHAH Jesus! What a shame!&lt;/p&gt;

&lt;p&gt;This because in all projects that I've contributed the mechanism for security was granted by framework or by other then came before me and built it.&lt;/p&gt;

&lt;p&gt;Then, when I got recovered from my shame feeling and put my self in the path of improving my security skills understanding from zero everything related to how to create secure RESTful APIs. I want to share my study path, bringing examples, sharing code and moving between theory and practice.&lt;/p&gt;

&lt;p&gt;My initial point of study is a good text that I found at &lt;a href="https://restfulapi.net/security-essentials"&gt;restfulapi.net&lt;/a&gt;. In this text the author explore an overview about the topic, sharing Security Design Principles and Best Practices in a very broad vision.&lt;/p&gt;

&lt;p&gt;I would like based on this text, understand better each principle and how to apply as well as show in the practice how to implement the best practices using my preferred languages (I need to decide what first üò∞).&lt;/p&gt;

&lt;p&gt;Then for now, I'm just introducing the method. If you need to have faster more info about the theme. Start reading the restfulapi.net, it seems a very useful introduction! But If you are interested in follow my path, read the text and come back here to follow with me, I will try to start writing the next asap, I swear!&lt;/p&gt;

</description>
      <category>security</category>
      <category>beginners</category>
      <category>network</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Install Go on Ubuntu 20.04</title>
      <author>Maria Yudina</author>
      <pubDate>Sat, 06 Nov 2021 19:52:36 +0000</pubDate>
      <link>https://dev.to/mariayudina/how-to-install-go-on-ubuntu-2004-2mn6</link>
      <guid>https://dev.to/mariayudina/how-to-install-go-on-ubuntu-2004-2mn6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#check-ubuntu-version"&gt;
  &lt;/a&gt;
  Check Ubuntu version
&lt;/h2&gt;

&lt;p&gt;First, run this command to make sure what version of Ubuntu you have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lsb_release -a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 20.04.3 LTS
Release:    20.04
Codename:   focal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-golang"&gt;
  &lt;/a&gt;
  Install GoLang
&lt;/h2&gt;

&lt;p&gt;Download the &lt;a href="https://golang.org/dl/"&gt;latest&lt;/a&gt; GoLang archive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -OL https://golang.org/dl/go1.17.3.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check SHA256 Checksum just in case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sha256sum go1.17.3.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Extract everything to the &lt;code&gt;usr/local&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo tar -C /usr/local -xvf go1.17.3.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;PATH&lt;/code&gt; variable in &lt;code&gt;~/.profile&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano ~/.profile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add new row with &lt;code&gt;export&lt;/code&gt; at the end of the &lt;code&gt;~/.profile&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export PATH=$PATH:/usr/local/go/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the changes and exit &lt;code&gt;nano&lt;/code&gt; editor. Now we have to refresh your profile. Run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.profile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installation and setup is done. Let's check if everything works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-everything-works"&gt;
  &lt;/a&gt;
  Make sure everything works
&lt;/h2&gt;

&lt;p&gt;We will check Go version and create and run a simple program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-the-version"&gt;
  &lt;/a&gt;
  Check the version
&lt;/h3&gt;

&lt;p&gt;Run this command to check Go version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go version go1.17.3 linux/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-and-run-hello-world"&gt;
  &lt;/a&gt;
  Create and run 'Hello, World!'
&lt;/h3&gt;

&lt;p&gt;Let's create a simple Go program and run it.&lt;/p&gt;

&lt;p&gt;Create a directory and switch to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir hello_go
cd hello_go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to create &lt;code&gt;go.mod&lt;/code&gt; file with the &lt;code&gt;go mod init&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init test/hello_go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a file where we'll write the program code in Go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano hello.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy this example code to the file and save changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the changes and exit &lt;code&gt;nano&lt;/code&gt; editor.&lt;/p&gt;

&lt;p&gt;Run the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done!&lt;/p&gt;

</description>
      <category>go</category>
      <category>ubuntu</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Syncing my "htdocs"-folder between two computers?</title>
      <author>fred321f</author>
      <pubDate>Sat, 06 Nov 2021 19:27:28 +0000</pubDate>
      <link>https://dev.to/okayfrederick/syncing-my-htdocs-folder-between-two-computers-kjh</link>
      <guid>https://dev.to/okayfrederick/syncing-my-htdocs-folder-between-two-computers-kjh</guid>
      <description>&lt;p&gt;Hey guys.&lt;/p&gt;

&lt;p&gt;I have an amazing laptop that I bring everywhere I go, in order to be able to jump into the coding whenever I get a fresh new idea.&lt;/p&gt;

&lt;p&gt;I have been having some troubles lately, since I can't seem to find a liable way of syncing my "htdocs"-folder between to computers.&lt;/p&gt;

&lt;p&gt;My Desktop-PC at home uses an Apache-server to host the website while it's in developement, and my laptop uses XAMPP to host the website.&lt;/p&gt;

&lt;p&gt;I have been using a USB-storage device for moving and replacing the htdocs-folder each time I switch computers, but that just feels too wonky and old-school for me.&lt;/p&gt;

&lt;p&gt;DO any of you guys have any experience with solutions for this? I thas to be rather affordable, as I am currently studying and working part-time. It also has to be reliable and easy to use.&lt;br&gt;
I have thought of investing in a NAS-system to host the htdocs-folder on, but that does not seem to be the right thing to do..&lt;/p&gt;

&lt;p&gt;Any input is appreciated.&lt;br&gt;
Thanks!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frederick&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>workflow</category>
    </item>
    <item>
      <title>How to Support Multiple Fonts in an Android App</title>
      <author>Gourav Khunger</author>
      <pubDate>Sat, 06 Nov 2021 19:15:31 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/how-to-support-multiple-font-options-in-an-android-app-1j5e</link>
      <guid>https://dev.to/gouravkhunger/how-to-support-multiple-font-options-in-an-android-app-1j5e</guid>
      <description>&lt;p&gt;You would hardly see any Android app that allows its users to be able to choose from a set of fonts to be used for the whole app, based on the user's preference. The major reason being it is hard to implement!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-bother"&gt;
  &lt;/a&gt;
  Why should you bother?
&lt;/h2&gt;

&lt;p&gt;Accessibility is a major aspect that every app developer should focus on. Imagine an app with an amazing utility but one that is barely usable. You don't want to loose your user base!&lt;/p&gt;

&lt;p&gt;I used to neglect this, but here's why I am writing this post.&lt;/p&gt;

&lt;p&gt;If you follow me on any social media, or here on my blog, you know that &lt;a href="https://genicsblog.com/introducing-jekyllex-android-app"&gt;I built JekyllEx&lt;/a&gt; to be able to manage Jekyll blogs from my Android device.&lt;/p&gt;

&lt;p&gt;Recently, I &lt;a href="https://github.com/jekyllex/jekyllex-android/issues/2"&gt;a person reached out&lt;/a&gt; to discuss about their chronic headaches that are triggered by font and colours that don't go well on their eyes and it would be great if I allowed some settings to be able to customise it based on user preferences. &lt;/p&gt;

&lt;p&gt;I quickly went to have a look at what the Android accessibility guidelines had to say.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.android.com/guide/topics/ui/accessibility"&gt;https://developer.android.com/guide/topics/ui/accessibility&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But to my surprise- I DIDN'T FIND ANYTHING. If you take a look at those guidelines, you'll find Google actually emphasizes developers a lot to take measures and make their app accessible for all kind of users. But such a common problem hasn't been addressed. Believe me, there are many a people with varied levels of such reading problems. &lt;/p&gt;

&lt;p&gt;And I usually don't enable such settings in apps, but I thought it would be a great challenge to overcome, because mostly, all the solutions that already exist are inefficient: most stack overflow answers ask to traverse the &lt;code&gt;ViewGroup&lt;/code&gt;'s children and apply custom typeface as they find Text.&lt;/p&gt;

&lt;p&gt;I had some other thoughts and it was obvious I would be making an Android library that somehow resolves this issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  The Challenge
&lt;/h2&gt;

&lt;p&gt;In broad aspects, an Android app is just a set of &lt;code&gt;View&lt;/code&gt;(s), held together by &lt;code&gt;ViewGroup&lt;/code&gt;(s), that perform certain actions when loaded, clicked, etc. All that together makes the functional app.&lt;/p&gt;

&lt;p&gt;But here's the catch- each view has its own &lt;code&gt;Context&lt;/code&gt;, that gives access to the current state of the view, and that makes it harder to think about how to implement the multiple-font feature, as each view needs separate handling to update its font.&lt;/p&gt;

&lt;p&gt;Here is a typical example of how to update the font of a single &lt;code&gt;TextView&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;typeface&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ResourcesCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source_code_pro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// get font from res/font/ directory&lt;/span&gt;
&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;typeface&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeface&lt;/span&gt; &lt;span class="c1"&gt;// apply the font to the text view&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1oa4MMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636027952199/bY0CrvEb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1oa4MMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636027952199/bY0CrvEb8.png" alt="image.png" width="392" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine you have 20+ text views, or rather a RecyclerView(as in &lt;a href="https://jekyllex.xyz"&gt;JekyllEx&lt;/a&gt;), in which each of the items has a significantly large number of &lt;code&gt;TextView&lt;/code&gt;(s).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--13guXLcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636028456465/fi0vdUzhZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--13guXLcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636028456465/fi0vdUzhZ.png" alt="image.png" width="880" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;a href="https://github.com/jekyllex/jekyllex-android/blob/main/app/src/main/res/layout/other_repository_item.xml"&gt;each RecyclerView item&lt;/a&gt; actually has 8 TextViews! Imagine updating the font manually for each view, one-by-one. It would be really inconvenient!&lt;/p&gt;

&lt;p&gt;I had a look to some stack overflow questions and as told earlier, most of them were old and in-efficient.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;From the very beginning I knew I would store the default font in a &lt;code&gt;SharedPreference&lt;/code&gt;. For those who don't know about it, it is Android's way to allow apps to store simple key-value paired data that the app can use without write access to the disk. For most of the cases, it suffices to use &lt;code&gt;SharedPreference&lt;/code&gt; instead of writing to disk and it was super handy in this case.&lt;/p&gt;

&lt;p&gt;I would store the resource id, an integer identifier that is given to all types of resources in any app, in &lt;code&gt;SharedPreference&lt;/code&gt;, and retrieve that value to apply the font when the view is inflated (rendered on screen).&lt;/p&gt;

&lt;p&gt;This was the most efficient way I could come up with, because &lt;code&gt;SharedPreference&lt;/code&gt; is really optimised. The values are cached and retrieving multiple values within a short time doesn't affect performance much.&lt;/p&gt;

&lt;p&gt;There exists another way, by changing the &lt;code&gt;themes.xml&lt;/code&gt; values at runtime and applying font directly from the styles itself, but it requires minimum API level 23 (Android 6.0). So it wouldn''t be backward compatible and make the app crash on lower Android versions. I didn't want to do so.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The Result
&lt;/h2&gt;

&lt;p&gt;Here's the library that I built:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gouravkhunger"&gt;
        gouravkhunger
      &lt;/a&gt; / &lt;a href="https://github.com/gouravkhunger/Fontize"&gt;
        Fontize
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fontize is an Android library that enables multi-font selection functionality to beautify your app.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;h1&gt;
Fontize Android Library&lt;/h1&gt;
&lt;a href="https://android-arsenal.com/api?level=16" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/0d5e6876261d372564c364129cad39375617ba6cf33a3a558d79f97a761e78f4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4150492d31362532422d627269676874677265656e2e7376673f7374796c653d666c6174" alt="Fontize Android Library Licence"&gt;
&lt;/a&gt;
&lt;a href="https://jitpack.io/#GouravKhunger/Fontize" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/6672949e776b1327a4bc302e5a02ed09b9fbe72df39c41fed7a25178865f39d8/68747470733a2f2f6a69747061636b2e696f2f762f476f757261764b68756e6765722f466f6e74697a652e737667" alt="Fontize Android Library Licence"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/gouravkhunger/Fontize/blob/main/LICENSE"&gt;
    &lt;img src="https://camo.githubusercontent.com/7a59874358f0f90673141f797033ed3990dd41919b27a3b1aa3cf6bf1191816a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f676f757261766b68756e6765722f466f6e74697a65" alt="Fontize Android Library Licence"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/gouravkhunger/Fontize/stargazers"&gt;
    &lt;img src="https://camo.githubusercontent.com/7a650af33d3fa81deadfa8c72cb8cdc2fa5397e083db13dcf48a5598bd304c0c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f676f757261766b68756e6765722f466f6e74697a65" alt="Fontize Android Library Stars"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/gouravkhunger/Fontize/fork"&gt;
    &lt;img src="https://camo.githubusercontent.com/27f4049cff016b9213b1c56f5bc57a7263dd65f915d83da2e5184b3632765611/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f676f757261766b68756e6765722f466f6e74697a65" alt="Fontize Android Library Forks"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/gouravkhunger/Fontize/issues"&gt;
    &lt;img src="https://camo.githubusercontent.com/96c27e76859250abcd1cb98529469b9ce92b2a5f50b7d5e7a2f1c85afb2436c4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f676f757261766b68756e6765722f466f6e74697a65" alt="Fontize Android Library Issues"&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
    Built with ‚ù§Ô∏é by
        &lt;a href="https://github.com/gouravkhunger"&gt;Gourav Khunger&lt;/a&gt;
    
&lt;/div&gt;



&lt;p&gt;Fontize is an Android library, written in kotlin, that enables your android app have multiple fonts for your &lt;code&gt;TextView&lt;/code&gt;s
and switch  between them in a jiffy!&lt;/p&gt;
&lt;p&gt;A quick demo:&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/gouravkhunger/Fontize/main/media/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkjSsrbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/gouravkhunger/Fontize/main/media/demo.gif" alt="Fontize Android Library Demo GIF"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Adding Fontize to your project&lt;/h2&gt;
&lt;p&gt;Include jitpack in your root &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy-gradle position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-en"&gt;allprojects&lt;/span&gt; {
    repositories {
        &lt;span class="pl-k"&gt;..&lt;/span&gt;
        maven { url &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://jitpack.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }
    }
}&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And add it's dependency to your app level &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-groovy-gradle position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-en"&gt;dependencies&lt;/span&gt; {
    implementation &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;com.github.gouravkhunger:Fontize:1.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sync the project and you'll have imported Fontize successfully.&lt;/p&gt;
&lt;h2&gt;
Start using Fontize&lt;/h2&gt;
&lt;p&gt;Make sure you have all your fonts in the &lt;code&gt;res/font/&lt;/code&gt; directory. Support for font files in the &lt;code&gt;assets&lt;/code&gt; folder will ship soon!&lt;/p&gt;
&lt;p&gt;Rename all the &lt;code&gt;TextView&lt;/code&gt;s or &lt;code&gt;AppCompatTextView&lt;/code&gt;s in your project to &lt;code&gt;com.github.gouravkhunger.fontize.FontizeTextView&lt;/code&gt; - You don't have to change anything else, and the view would still perform the same :)&lt;/p&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;div class="highlight highlight-text-xml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&amp;lt;&lt;span class="pl-ent"&gt;TextView&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gouravkhunger/Fontize"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Once you add &lt;a href="https://github.com/gouravkhunger/Fontize"&gt;fontize&lt;/a&gt; to your project, you need to follow certain steps mentioned in the repositorie's README and your project will migrate to use intelligent &lt;code&gt;Fontize&lt;/code&gt; views that can work united and can change fonts in a snap.&lt;/p&gt;

&lt;p&gt;Here's a demo of what you can Achieve with Fontize:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge40gQjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636224247599/d04oZY7Pf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge40gQjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636224247599/d04oZY7Pf.gif" alt="Fontize Android library demo" width="540" height="960"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To set the default font for the app, you just have to add this line of code just below &lt;code&gt;onCreate()&lt;/code&gt; function in your app's launcher activity (the one that is triggered when app icon is clicked) only once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Fontize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;setDefaultFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exo_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// replace with the font you desire&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Internally, this function creates a &lt;code&gt;SharedPreference&lt;/code&gt; value if it doesn't already exist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setDefaultFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sharedPref&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PreferenceManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fontId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sharedPref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fontFamily"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ResourcesCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ID_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontId&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;ResourcesCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ID_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sharedPref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;putInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fontFamily"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To update the font for the entire app, you just need to run this code and Fontize will handle it automatically for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Fontize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;updateFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zen_old_mincho&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// updates fontFamily throughout app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the interesting part, this function just updates the &lt;code&gt;fontFamily&lt;/code&gt; value stored in &lt;code&gt;SharedPreference&lt;/code&gt; for the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sharedPref&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PreferenceManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sharedPref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;putInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fontFamily"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The actual work happens in the view classes. Let's take the example of &lt;code&gt;FontizeTextView&lt;/code&gt;, or any similar class. It just extends the parent View and applies the font by picking its value from &lt;code&gt;SharedPreference&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FontizeTextView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AttributeSet&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatTextView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;prefs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PreferenceManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fontId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fontFamily"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ResourcesCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ID_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontId&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="nc"&gt;ResourcesCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ID_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;typeface&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ResourcesCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;typeface&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeface&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All this code does is, to override the default view to apply the font family as soon as it inflates. Similar classes for views that support texts within them, like workarounds for &lt;code&gt;MenuItem&lt;/code&gt;(s) and &lt;code&gt;Toolbar&lt;/code&gt;(s),  will be shipped soon.&lt;/p&gt;

&lt;p&gt;If you need to look at a live project that uses Fontize in production- &lt;a href="https://github.com/jekyllex/jekyllex-android"&gt;checkout JekyllEx app on GitHub&lt;/a&gt;. It doesn't use the initial version that was published on Jitpack, but it uses a custom fork as per its needs and requirements, but Fontize will soon evolve and be able to do a lot more than just &lt;code&gt;TextViews&lt;/code&gt; üòÑ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Believe me or not, starting this project, to finishing the base version with a working &lt;code&gt;FontizeTextView&lt;/code&gt;, to publishing it on jitpack- all just finished within 2 hours! &lt;a href="https://github.com/gouravkhunger/Fontize"&gt;Fontize&lt;/a&gt; deserves a star for that effort üòé.&lt;/p&gt;

&lt;p&gt;I hope you learnt something new out of this post. If you want to keep reading quality Android development content, consider joining my newsletter @ &lt;a href="https://genicsblog.com"&gt;Genics Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do comment and let me know what topic should I pick to publish an article next week. All kinds of feedbacks are appreciated :)&lt;/p&gt;

&lt;p&gt;Thanks and happy coding!&lt;/p&gt;

</description>
      <category>android</category>
      <category>a11y</category>
      <category>library</category>
    </item>
  </channel>
</rss>
