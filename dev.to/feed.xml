<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create Mirrored Cursor Movement with CSS and JavaScript</title>
      <author>Diana Le</author>
      <pubDate>Sun, 03 Oct 2021 17:54:43 +0000</pubDate>
      <link>https://dev.to/dianale_dev/create-mirrored-cursor-movement-with-css-and-javascript-249i</link>
      <guid>https://dev.to/dianale_dev/create-mirrored-cursor-movement-with-css-and-javascript-249i</guid>
      <description>&lt;p&gt;This week's Codepen Challenge was &lt;strong&gt;"Reflections"&lt;/strong&gt; so I created a pen where a light follows your cursor and is reflected on the opposite side:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/LYLveKE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-light-and-its-reflection-in-the-html"&gt;
  &lt;/a&gt;
  Set up the light and its reflection in the HTML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"flashlight"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"flashlight-reflection"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Super simple: we have a container, the flashlight and the flashlight's reflection as separate divs:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-css-and-position-the-lights"&gt;
  &lt;/a&gt;
  Set up the CSS and Position the Lights
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#flashlight&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#flashlight-reflection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.95&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#flashlight-reflection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="m"&gt;#EB7347&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also pretty simple. The container contains the background color and the boundary line down the middle. The cursor's flashlight and its reflection are styled almost exactly the same except for the colors and most importantly, the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; properties for the absolutely-positioned lights. The cursor has a &lt;code&gt;left&lt;/code&gt; property, but for the reflection we're going to use the &lt;code&gt;right&lt;/code&gt; property instead. This will make the JavaScript simpler later on:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamically-move-the-lights-with-javascript"&gt;
  &lt;/a&gt;
  Dynamically Move the Lights with JavaScript
&lt;/h2&gt;

&lt;p&gt;Let's walk through the more complicated parts of the JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// set boundary of coordinates to parent div&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Move the cursor light and reflection on the mousemove event&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveFlashlight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get mouse coordinates relative to parent&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// move the light with the cursor and put the cursor in the center&lt;/span&gt;
  &lt;span class="nx"&gt;flashlight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;flashlight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// move the reflection based on the cursor's position&lt;/span&gt;
  &lt;span class="nx"&gt;flashlightReflection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flashlight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;flashlightReflection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flashlight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-the-x-and-y-positions-of-the-cursor-with-raw-eventclientx-endraw-and-raw-eventclienty-endraw-"&gt;
  &lt;/a&gt;
  Find the X and Y Positions of the Cursor with &lt;code&gt;event.ClientX&lt;/code&gt; and &lt;code&gt;event.ClientY&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This was actually easier than I expected. Because the lights are absolutely positioned, if we can find the X and Y coordinates of the mouse cursor, we can dynamically update the CSS position with JavaScript to follow the cursor with the &lt;code&gt;mousemove&lt;/code&gt; event. This article explains how to &lt;a href="https://www.gavsblog.com/blog/get-the-current-position-of-the-mouse-from-a-javascript-event"&gt;console.log the position of the cursor&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-the-boundary-to-be-the-parent-container"&gt;
  &lt;/a&gt;
  Set the Boundary to be the Parent Container
&lt;/h3&gt;

&lt;p&gt;But in this scenario, our lights are divs within a parent container, and if your container is not the full-width of the screen, you're going to get inconsistent X and Y values based on the browser width. So we'll need to set the &lt;a href="https://stackoverflow.com/questions/16154857/how-can-i-get-the-mouse-coordinates-relative-to-a-parent-div-javascript"&gt;boundaries for these values to be the parent&lt;/a&gt; to make it easier. This will always make the top left corner (0, 0).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-the-lights-css-the-cursor"&gt;
  &lt;/a&gt;
  Update the Light's CSS (the Cursor)
&lt;/h3&gt;

&lt;p&gt;Now that we have the X and Y coordinates we can move the flashlight to follow the cursor by changing the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; values. You'll notice I'm subtracting 20px from both the X and Y; this is because the light is 40px wide and 40px high and I want the cursor to be in the center.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-the-lights-reflection"&gt;
  &lt;/a&gt;
  Update the Light's Reflection
&lt;/h3&gt;

&lt;p&gt;Since we're mirroring on the Y-axis, in terms of moving up and down, the reflection's location will always match the cursor's Y-coordinates, so we set these equal to each other.&lt;/p&gt;

&lt;p&gt;For the X-axis, this is more complicated. As the cursor moves closer to the center or reflection line (to the right), the reflection should move closer (to the left). Conversely if the cursor moves farther away or to the left, the reflection should move to the right. I originally created a global variable to store the previous value of X, then check if the movement is increasing and if so, then to add or subtract the position of the reflection's X-position as needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Unnecessary code&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;xFlashlight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;flashlightReflection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;flashlightReflection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I realized this code was completely unnecessary because of the CSS. Remember the cursor light is using the &lt;code&gt;left&lt;/code&gt; property and the reflection is using the &lt;code&gt;right&lt;/code&gt; property, and they are set to the same value for their respective properties when initialized. Therefore the actual numeric values will always be the same, so we can take the reflection's &lt;code&gt;right&lt;/code&gt; value and set it equal to the cursor's &lt;code&gt;left&lt;/code&gt; value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a fun and difficult challenge since I had never tried anything similar, but you can see how it's relatively simple to mimic and follow cursor movement with CSS and JavaScript.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codepen</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Interior Designing courses in Kolkata</title>
      <author>giftdesignacademy</author>
      <pubDate>Sun, 03 Oct 2021 17:53:10 +0000</pubDate>
      <link>https://dev.to/giftdesignacademy/interior-designing-courses-in-kolkata-86o</link>
      <guid>https://dev.to/giftdesignacademy/interior-designing-courses-in-kolkata-86o</guid>
      <description>&lt;p&gt;Interior Designing Course in Kolkata&lt;br&gt;
Interior Design is nothing but artistic planning of a property’s interior. It is all about providing a creative solution to a space. Interior Designing is a perfect reconciliation between art and practical functionality.&lt;/p&gt;

&lt;p&gt;For all those who have an interest in designing the interiors, come forward and join our interior designing course in Kolkata at GIFT Design Academy.&lt;/p&gt;

&lt;p&gt;Our interior designing course in Kolkata helps in a clear understanding of colors, space planning and construction materials. Our course is equally suitable for existing professionals and newcomers. You get to learn under an experienced team of interior professionals. It is sure that by the end of the course, you as an interior designer will be able to carve out magic out of normal spaces.&lt;/p&gt;

&lt;p&gt;We have a huge array of interior designing courses in Kolkata and the course fees entirely depends upon the course you go for. Some of the courses available are:&lt;br&gt;
1) 3 years professional interior designing course and management studies&lt;/p&gt;

&lt;p&gt;2) 2 years Professional Interior Designing course&lt;/p&gt;

&lt;p&gt;3) 1 year Professional Interior Designing course&lt;/p&gt;

&lt;p&gt;Any one who has passed graduation can apply for our interior designing courses in Kolkata. Minimum age requirement is 16 years. Basic knowledge of English will be an added advantage.&lt;/p&gt;

&lt;p&gt;Our interior designing course in Kolkata asks, thinks, crafts and iterates to create products that achieve results. Our interior designing institute in Kolkata provides a clear understanding of the following topics:&lt;/p&gt;

&lt;p&gt;1) Interior Design Fundamentals&lt;br&gt;
2) Design Principles&lt;br&gt;
3) Human Comfort&lt;br&gt;
4) Ergonomics&lt;br&gt;
5) Color Theory&lt;br&gt;
6) Materials&lt;br&gt;
7) Application&lt;br&gt;
8) Space Planning&lt;br&gt;
9) Aesthetic&lt;/p&gt;

&lt;p&gt;This interior design course is all about thinking innovatively, designing for a better social impact and all this comes with practical and project based learning. We encourage the students to develop solutions pertaining to current times and keeping sustainability in mind.&lt;br&gt;
visit us - &lt;a href="https://giftdesignacademy.com/"&gt;https://giftdesignacademy.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>startup</category>
      <category>gatsby</category>
      <category>mobile</category>
    </item>
    <item>
      <title>How to implement a Blockchain Solution</title>
      <author>CyprianTinasheAarons</author>
      <pubDate>Sun, 03 Oct 2021 16:54:07 +0000</pubDate>
      <link>https://dev.to/cypriantinasheaarons/how-to-implement-a-blockchain-solution-1ija</link>
      <guid>https://dev.to/cypriantinasheaarons/how-to-implement-a-blockchain-solution-1ija</guid>
      <description>&lt;h2&gt;
  &lt;a href="#key-steps-for-implementing-a-blockchain-solution"&gt;
  &lt;/a&gt;
  Key Steps for implementing a Blockchain solution
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; Identify the business requirements of the project&lt;/li&gt;
&lt;li&gt; Evaluate if your project can be implemented with centralized databases or digital signatures&lt;/li&gt;
&lt;li&gt; Form a mental picture of the benefits of implementing blockchain technology in your project&lt;/li&gt;
&lt;li&gt; Identify legacy technologies or practices that need to be replaced or augmented&lt;/li&gt;
&lt;li&gt; Do a cost-benefit analysis of introducing this new technology&lt;/li&gt;
&lt;li&gt; Identify the key stakeholders and participants of the blockchain system&lt;/li&gt;
&lt;li&gt; Agree on the governance framework of the operating network and build in accountability from the participants&lt;/li&gt;
&lt;li&gt; Agree on an implementation methodology&lt;/li&gt;
&lt;li&gt; Choose a blockchain platform based on your requirements &lt;/li&gt;
&lt;li&gt; Identify essential enterprise tools that need to be built to successfully operate the blockchain solution.   For example identity service&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#kool-implementation-strategies"&gt;
  &lt;/a&gt;
  Kool Implementation Strategies
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Have Stakeholders own and maintain a node on the blockchain network.&lt;/li&gt;
&lt;li&gt;Make use of Blockchain as a Service(Baas) cloud platforms.&lt;/li&gt;
&lt;li&gt;Access a public permissionless blockchain to record data. ( For example a public Bitcoin or Ethereum network )&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#popular-platforms-you-can-use-for-financial-applications"&gt;
  &lt;/a&gt;
  Popular platforms you can use for financial applications
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ethereum - is a blockchain platform with its own cryptocurrency, called Ether (ETH) or Ethereum, and its own programming language, called Solidity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hyberledger Fabric - is an open-source, permissioned blockchain framework, started in 2015 by The Linux Foundation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stellar - is a blockchain-based distribution ledger network, Lumens is the cryptocurrency made specifically for that network, and XLM is the coin's symbol.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have executed the above steps properly you can proceed to build your blockchain solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thank you for reading. 😀 🙏 Follow me on &lt;a href="https://twitter.com/CyprianAarons"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout my &lt;a href="//cyprianaarons.co.zw"&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/cyprianaarons"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>blockchain</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Create Beautiful Gradients with CSS</title>
      <author>Mahesh </author>
      <pubDate>Sun, 03 Oct 2021 16:52:02 +0000</pubDate>
      <link>https://dev.to/ali6nx404/how-to-create-beautiful-gradients-with-css-2pjm</link>
      <guid>https://dev.to/ali6nx404/how-to-create-beautiful-gradients-with-css-2pjm</guid>
      <description>&lt;p&gt;Let's start this blog with a confession, I wrote this detailed thread for Twitter then I decided to turn it into the blog and upload it here too.&lt;/p&gt;

&lt;p&gt;I'm writing this blog because I found learning gradient a little bit difficult in my early days. there are different types of gradients available and we mostly end up using a basic linear-gradient, but the gradient is far more powerful than you think. &lt;/p&gt;

&lt;p&gt;In this, I'm going to cover all the basics and most important concepts of the gradient.&lt;/p&gt;

&lt;p&gt;in the next blog, I will share some real-world examples and more advanced usage of gradients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-gradient"&gt;
  &lt;/a&gt;
  What is the gradient?
&lt;/h2&gt;

&lt;p&gt;CSS gradient allows you to create a smooth gradient between two colors, right up to impressive mixing and multiple gradients.&lt;/p&gt;

&lt;p&gt;Gradient makes the background more attractive than a solid color.&lt;/p&gt;

&lt;p&gt;We all know about Instagram but did you notice that the Instagram logo is also a gradient.&lt;/p&gt;

&lt;p&gt;The genius is in its simplicity.✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SV1fiSgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633173434812/y9zp75pwMt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SV1fiSgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633173434812/y9zp75pwMt.jpeg" alt="logo.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-gradients"&gt;
  &lt;/a&gt;
  Types of gradients?
&lt;/h2&gt;

&lt;p&gt;There is three gradient function in CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linear Gradient&lt;/li&gt;
&lt;li&gt;Radial gradient
&lt;/li&gt;
&lt;li&gt;Conic gradient &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's talk about each type in more detail.✨&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-gradient-"&gt;
  &lt;/a&gt;
  Linear Gradient -
&lt;/h2&gt;

&lt;p&gt;A linear gradient starts at one point and changes along a straight line to the endpoint. &lt;/p&gt;

&lt;p&gt;The direction of the linear gradient can be up/down, left/right, or diagonal.&lt;/p&gt;

&lt;p&gt;To create a linear gradient you must define at least two-color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0HxmYgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633173951806/wpsVBpMtB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0HxmYgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633173951806/wpsVBpMtB.png" alt="condition gradient fg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-linear-gradient-"&gt;
  &lt;/a&gt;
  Basic linear gradient -
&lt;/h3&gt;

&lt;p&gt;To create the most basic gradient you just need to specify two-color. Two colors are the minimum required but you can have color as much as you want.&lt;/p&gt;

&lt;p&gt;Without specifying angle will consider top-to-bottom.&lt;/p&gt;

&lt;p&gt;Example👇&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ali6nx404/embed/eYRadJG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-direction-of-gradient-"&gt;
  &lt;/a&gt;
  Changing the direction of Gradient -
&lt;/h3&gt;

&lt;p&gt;The values are "to top", "to bottom", "to left", and "to right" used to change direction.&lt;/p&gt;

&lt;p&gt;even we're free to use both the horizontal side (left or right), and the vertical side (top or bottom) after "to".&lt;/p&gt;

&lt;p&gt;Example 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IoTYLSlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277597829/ZQ2amrxwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IoTYLSlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277597829/ZQ2amrxwm.png" alt="Gradient-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angle-for-changing-direction-"&gt;
  &lt;/a&gt;
  Angle for changing direction -
&lt;/h3&gt;

&lt;p&gt;We Are free to use an angle unit to specify the direction of the gradient.&lt;/p&gt;

&lt;p&gt;The values are equivalent -&lt;/p&gt;

&lt;p&gt;to top - 0deg,&lt;br&gt;
to bottom - 180deg,&lt;br&gt;
to left - 270deg,&lt;br&gt;
to right - 90deg.&lt;/p&gt;

&lt;p&gt;you can also use other angle units.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHWDfvVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277779121/NQVA3RKvx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHWDfvVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277779121/NQVA3RKvx.png" alt="Gradient-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#color-stop-"&gt;
  &lt;/a&gt;
  Color stop -
&lt;/h3&gt;

&lt;p&gt;One thing we didn't talk about as of now is "color-stop". Color stops are the colors you want to render smooth transitions among. &lt;/p&gt;

&lt;p&gt;A color-stop value, followed by one or two optional stop positions. in percentage or in length.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9bFbzNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277860497/MbbXIUxFr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9bFbzNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277860497/MbbXIUxFr.png" alt="Gradient-5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#radial-gradient-"&gt;
  &lt;/a&gt;
  Radial gradient -
&lt;/h2&gt;

&lt;p&gt;A radial gradient starts from a central point and radiates outwards towards the outer endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgAgGC4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277986621/YZN8o--R3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgAgGC4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633277986621/YZN8o--R3.png" alt="radial gradient.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#before-we-move-further-lets-discuss-some-key-terms-"&gt;
  &lt;/a&gt;
  Before we move further let's discuss some key terms -
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Shape&lt;/li&gt;
&lt;li&gt;Position&lt;/li&gt;
&lt;li&gt;color-stop ( Same as linear one )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's dive deeper 👇&lt;/p&gt;

&lt;p&gt;✔ size - &lt;/p&gt;

&lt;p&gt;The size influences the ending shape of the gradient by taking the shape value you determined and instructing the gradient where to end.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;closest-side&lt;/li&gt;
&lt;li&gt;closest-corner&lt;/li&gt;
&lt;li&gt;farthest-side&lt;/li&gt;
&lt;li&gt;farthest-corner ( default one )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detailed explanation 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LIRUCVSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278025777/NyT-ns_k5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LIRUCVSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278025777/NyT-ns_k5.png" alt="size.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✔ Shape - &lt;/p&gt;

&lt;p&gt;This determines the shape of the gradient, and because we’re talking about radial gradients, &lt;/p&gt;

&lt;p&gt;they’re limited to being circular in nature. our shapes will be between an ellipse or a circle. &lt;/p&gt;

&lt;p&gt;✔ Position - &lt;/p&gt;

&lt;p&gt;This works the same way it does on background-position, So, keywords like “top,” “right,” “left,” and “center” will work here.  You can even use a combination like, “top center.” &lt;/p&gt;

&lt;p&gt;We can also specify an exact position using a numeric value, including the percentage. Default is center center.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-radial-gradient-"&gt;
  &lt;/a&gt;
  Basic Radial gradient -
&lt;/h3&gt;

&lt;p&gt;To create the most basic gradient you just need to specify two-color. Two colors are the minimum required but you can have color as much as you want.&lt;/p&gt;

&lt;p&gt;All others are default values because we are just specifying colors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8kK_ubKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278082925/-c3LLJslR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kK_ubKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278082925/-c3LLJslR.png" alt="radial basic.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shaping-of-radial-gradient-"&gt;
  &lt;/a&gt;
  shaping of radial gradient -
&lt;/h3&gt;

&lt;p&gt;we already discussed shape and we have 2 values an ellipse or a circle.&lt;/p&gt;

&lt;p&gt;Let's see an example of both 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KgB1BadY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278125069/0HRkSL9YT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KgB1BadY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278125069/0HRkSL9YT.png" alt="shape fg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sizing-of-radial-gradients-"&gt;
  &lt;/a&gt;
  Sizing of radial gradients -
&lt;/h3&gt;

&lt;p&gt;we already discussed all the sizing values, let's see one or two values in the example.&lt;/p&gt;

&lt;p&gt;for better understanding play with all values.&lt;/p&gt;

&lt;p&gt;example 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nu0mcs-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278151729/PHbcuJUFK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nu0mcs-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278151729/PHbcuJUFK.png" alt="sizing radial.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-position-"&gt;
  &lt;/a&gt;
  Changing Position  -
&lt;/h3&gt;

&lt;p&gt;We already talked about the positioning of the gradient.&lt;/p&gt;

&lt;p&gt;A radial gradient doesn’t have to start at the default center. It can specify a certain point.&lt;/p&gt;

&lt;p&gt;example 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDy3pEmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278184827/TJd2waDkQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDy3pEmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278184827/TJd2waDkQ.png" alt="position radial.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conic-gradient-"&gt;
  &lt;/a&gt;
  Conic gradient -
&lt;/h2&gt;

&lt;p&gt;A conic gradient has a center point in your box and starts from the top and goes around in a 360-degree circle.&lt;/p&gt;

&lt;p&gt;The conic-gradient function accepts the position and angle arguments. By default, the angle is 0 degrees which starts at the top, in the center&lt;/p&gt;

&lt;p&gt;Above we already talked about position or angle, so let's see some examples. &lt;/p&gt;

&lt;p&gt;👇👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-conic-gradient-"&gt;
  &lt;/a&gt;
  basic conic gradient -
&lt;/h3&gt;

&lt;p&gt;As like linear and radial gradients, all we need to create a conic gradient are two colors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdvhSpD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278397599/bHiAFCKlj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdvhSpD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278397599/bHiAFCKlj.png" alt="basic conic fg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#positioning-"&gt;
  &lt;/a&gt;
  Positioning -
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7HaVoVfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278411536/apATwITOT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HaVoVfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633278411536/apATwITOT.png" alt="position conic fg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#easy-gradient-generators"&gt;
  &lt;/a&gt;
  Easy gradient generators 👇
&lt;/h2&gt;

&lt;p&gt;⚡ &lt;a href="https://gradientgenerator.com"&gt;https://gradientgenerator.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://cssgradient.io"&gt;https://cssgradient.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://colordesigner.io/gradient-generator"&gt;https://colordesigner.io/gradient-generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first blog post and I would like to read your feedback as well as criticism.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>What’s new in Nuxt 3?</title>
      <author>Elise Patrikainen</author>
      <pubDate>Sun, 03 Oct 2021 16:31:04 +0000</pubDate>
      <link>https://dev.to/this-is-learning/what-s-new-in-nuxt-3-37lg</link>
      <guid>https://dev.to/this-is-learning/what-s-new-in-nuxt-3-37lg</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@alexxingplus?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Alex Sherstnev&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Directly inspired by Sebastien Chopin’s talks on Nuxt Nations (which shall be soon available on Youtube) and &lt;a href="https://www.youtube.com/watch?v=ApUPE8b-m04"&gt;Daniel Roe’s talk at Vue.js Amsterdam 2021&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nuxt 3 is going to be released very soon and brings a lot of entirely new things. It is not a simple upgrade to Vue 3, but &lt;strong&gt;a complete rewrite&lt;/strong&gt; of Nuxt 2, with a &lt;strong&gt;new rendering server&lt;/strong&gt; and, I believe, a &lt;strong&gt;new philosophy&lt;/strong&gt;. The definition of Nuxt itself has changed (cf &lt;a href="//nuxtjs.org"&gt;the official Nuxt website&lt;/a&gt;), it is not “a progressive meta-framework based on Vue.js” anymore but “an open-source framework making web development simple and powerful”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: this is an article written right after the NuxtNation conference, where Nuxt 3 updates have been announced, and before the Nuxt 3 official release (on the 12th of October), so I apologize in advance for the lack of details on each point. The goal here is really to give a view at the macro-scale of Nuxt evolution. I will of course add more information as details are made available.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-bit-of-context"&gt;
  &lt;/a&gt;
  A bit of context:
&lt;/h2&gt;

&lt;p&gt;~&lt;/p&gt;

&lt;p&gt;Before diving into the changes, let’s have a quick overview of the context in which these evolutions are made. And, on this point, I found the introduction of &lt;a href="https://www.youtube.com/watch?v=ApUPE8b-m04"&gt;Daniel Roe’s talk&lt;/a&gt; extremely enlightening. He points out that some new trends are emerging in the JavaScript scene (and, more widely, in web development): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;serverless architecture&lt;/strong&gt; and &lt;strong&gt;JAMstack:&lt;/strong&gt; 
which enhance faster, more secure, and loosely coupled web applications. Indeed, the serverless architecture enables abstracting some part of logic from an application to a distant infrastructure. On the other hand, Jamstack fosters pre-rendering of front-end clients and the use of microservice APIs.&lt;/li&gt;
&lt;li&gt;the apparition of &lt;strong&gt;new targets&lt;/strong&gt;:
&lt;strong&gt;Deno&lt;/strong&gt;, and &lt;strong&gt;‘workers’&lt;/strong&gt;, especially in serverless architecture (in that sense, this point is a consequence of the previous point).&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;transition&lt;/strong&gt; to &lt;strong&gt;TypeScript&lt;/strong&gt; and &lt;strong&gt;ES modules&lt;/strong&gt; (enhanced by the apparition of new generation dev tools bases on ES modules, such as Snowpack or Vite)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, as far as I understand, Nuxt 3 primarily aims to adapt to these global trends.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-in-nuxt-3"&gt;
  &lt;/a&gt;
  What's in Nuxt 3?
&lt;/h2&gt;

&lt;p&gt;~&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-the-support"&gt;
  &lt;/a&gt;
  1. The support:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Enhanced TypeScript: Nuxt 3 has been rewritten in TypeScript, and, apparently, the support seems outstanding, with more information and links to documentation than in a standard TypeScript project&lt;/li&gt;
&lt;li&gt;Vue 3 (obviously): including composables and the experimental Suspense API&lt;/li&gt;
&lt;li&gt;Webpack 5 support&lt;/li&gt;
&lt;li&gt;Vite.js: for development and production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;~&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-the-very-new-and-exciting-things"&gt;
  &lt;/a&gt;
  2. The very &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;exciting&lt;/strong&gt; things:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The brand-new rendering engine, &lt;strong&gt;Nitro&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;Build for &lt;strong&gt;serverless&lt;/strong&gt; (see below):

&lt;ul&gt;
&lt;li&gt;Cold start extremely fast (5 ms)&lt;/li&gt;
&lt;li&gt;Universal: it can run on Node.js, Deno, serverless platforms (including cloudflare workers), and experimentally on web workers &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid approach&lt;/strong&gt;: Nitro enables mixing SSR and SSG in the same application&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API routes&lt;/strong&gt;: Nitro preconfigures the integration of API endpoints (with apparently a similar routing system with the one provided for pages)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nuxt &lt;strong&gt;CLI&lt;/strong&gt;, which, bring many new possibilities&lt;/li&gt;
&lt;li&gt;Nuxt &lt;strong&gt;dev tools&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Global &lt;strong&gt;auto imports&lt;/strong&gt;: to avoid the local import of very common functions (for example, “toRef” from the composition API)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;~&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-the-tools-to-make-migrations-and-crossversion-developments-easy"&gt;
  &lt;/a&gt;
  3. The tools to make &lt;strong&gt;migrations&lt;/strong&gt; and &lt;strong&gt;cross-version&lt;/strong&gt; developments easy:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Nuxt &lt;strong&gt;bridge&lt;/strong&gt; package, which gives support to most of Nuxt 3 features (excepted Vue 3) to Nuxt 2 projects&lt;/li&gt;
&lt;li&gt;Nuxt &lt;strong&gt;kit&lt;/strong&gt;, which takes care of &lt;strong&gt;modules compatibility&lt;/strong&gt; between Nuxt 2 and Nuxt 3&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#built-for-serverless-"&gt;
  &lt;/a&gt;
  Built for serverless :
&lt;/h2&gt;

&lt;p&gt;~&lt;/p&gt;

&lt;p&gt;To me, the most impressive breakthrough is &lt;strong&gt;Nitro&lt;/strong&gt;, the new server that powers Nuxt 3. This is a subjective feeling after the conference, though, and maybe my mind will change when the repo is open (apparently, the new CLI would also bring many exciting new possibilities).&lt;br&gt;
~&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cold-start"&gt;
  &lt;/a&gt;
  Cold start:
&lt;/h4&gt;

&lt;p&gt;Nitro is &lt;strong&gt;75 times faster on start&lt;/strong&gt; than Nuxt 2 engine, and only needs 5ms on cold start (and less in Cloudflare workers). &lt;br&gt;
To handle this, Nitro works differently from traditional servers. Common servers would, on start, enable all their functionalities, whereas Nitro only starts the functionalities which are relevant to the incoming request. For this, it &lt;strong&gt;tracks&lt;/strong&gt; which files are necessary for each request (with the &lt;a href="https://github.com/vercel/nft"&gt;nft&lt;/a&gt;, or Node File Trace, package from Vercel) and, according to that, &lt;strong&gt;cleverly code splits&lt;/strong&gt; the server bundle. Then, on the incoming request, a &lt;strong&gt;minimalist "orchestrator"&lt;/strong&gt; (which is based on the &lt;strong&gt;h3 framework&lt;/strong&gt;, "built for high performance and portability" by the Nuxt core team and available on &lt;a href="https://github.com/unjs"&gt;the unjs repo&lt;/a&gt;, cf below) decides which part of code to start.&lt;br&gt;
~&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#universal"&gt;
  &lt;/a&gt;
  Universal:
&lt;/h4&gt;

&lt;p&gt;Nitro can run on &lt;strong&gt;Deno&lt;/strong&gt; and on &lt;strong&gt;any JS environment&lt;/strong&gt; (Node.js and workers). In particular, the worker environment support enables Nitro to be run on &lt;strong&gt;serverless platforms&lt;/strong&gt; and, experimentally, on &lt;strong&gt;browser workers&lt;/strong&gt;. &lt;br&gt;
To achieve this, the Nuxt team built themselves the set of libraries on which Nitro is based, which are available on &lt;a href="https://github.com/unjs"&gt;the unjs repo&lt;/a&gt;. A key point of unjs (which stands for Universal JavaScript Solutions) is to provide libraries that can run on any environment of the JavaScript ecosystem. &lt;br&gt;
Therefore, Nitro can build &lt;strong&gt;cross-platform outputs&lt;/strong&gt; (for example, it auto-mocks Node.js builtins with polyfills in builds addressed to non-Node environments). Another interesting feature is that Nitro can &lt;strong&gt;auto-detect the platform&lt;/strong&gt; on which it is deployed (Vercel, Netlify, Firebase, Cloudfare…) and adapt its build accordingly. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;~&lt;/p&gt;

&lt;p&gt;Nuxt definitely seems to have taken a &lt;strong&gt;turning point&lt;/strong&gt; with this third version. I was personally &lt;strong&gt;astonished&lt;/strong&gt; by this release announcement by the amount of updates and evolutions it brings. I really felt that Nuxt aims to provide &lt;strong&gt;innovations&lt;/strong&gt; that exceed the goal of being “the Vue.js meta-framework”.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>nuxt</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Heart Diseases Prediction using Machine Learning </title>
      <author>vidhi-sareen</author>
      <pubDate>Sun, 03 Oct 2021 16:08:50 +0000</pubDate>
      <link>https://dev.to/vidhisareen/heart-diseases-prediction-using-machine-learning-3o7k</link>
      <guid>https://dev.to/vidhisareen/heart-diseases-prediction-using-machine-learning-3o7k</guid>
      <description>&lt;p&gt;Machine Learning is applied in a variety of fields all over the world. There is no exception in the healthcare industry. Machine Learning can help forecast the existence or absence of motor problems, heart ailments, and other diseases. Such information, if predicted in advance, can provide valuable insights to clinicians, allowing them to tailor their diagnosis and treatment to each individual patient.&lt;/p&gt;

&lt;p&gt;As a result, preventing heart disease has become more important than ever. Good data-driven systems for predicting cardiac illnesses can help to improve the overall research and preventive process, allowing more individuals to live a healthy lifestyle. This is where Machine Learning enters the picture. Machine Learning aids in the prognosis of heart illnesses, and the results are precise.&lt;/p&gt;

&lt;p&gt;The project included data processing and analysis of a heart disease patient dataset. Then, using various techniques, several models were trained, and predictions were made. KNN, Decision Tree, Random Forest, SVM, and Logistic Regression are just a few examples.&lt;/p&gt;

&lt;p&gt;To forecast the presence of cardiac disease in a patient, I employed a range of Machine Learning methods built in Python. This is a classification problem with a range of input features as parameters and a binary target variable for predicting whether heart disease is present or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nl0O9lo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03se0wq2gph2sbrq3rm5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nl0O9lo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03se0wq2gph2sbrq3rm5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-import-libraries"&gt;
  &lt;/a&gt;
  STEP 1- IMPORT LIBRARIES
&lt;/h3&gt;

&lt;p&gt;There are many libraries available in python. I have included:&lt;br&gt;
&lt;strong&gt;numpy&lt;/strong&gt;: To work with arrays&lt;br&gt;
&lt;strong&gt;pandas&lt;/strong&gt;: To work with csv files and data frames&lt;br&gt;
&lt;strong&gt;matplotlib&lt;/strong&gt;: To create charts using pyplot.&lt;br&gt;
&lt;strong&gt;train_test_split&lt;/strong&gt;: To split the dataset into training and testing data&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-import-dataset"&gt;
  &lt;/a&gt;
  STEP 2- IMPORT DATASET
&lt;/h3&gt;

&lt;p&gt;Since I am using dataset which is already present on Kaggle. So, I have downloaded it &lt;a href="https://www.kaggle.com/faressayah/predicting-heart-disease-using-machine-learning/data"&gt;Link&lt;/a&gt;. There are many datasets available online you can use that also. Next, I have use &lt;em&gt;&lt;code&gt;read_csv ()&lt;/code&gt;&lt;/em&gt; to read dataset and save it to some variable (I have used “set” variable) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YtI2Ic7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jx8wrurz5ing3d4lmqm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YtI2Ic7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jx8wrurz5ing3d4lmqm4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before any analysis its good to take all information of what your whole dataset consists off to have an optimal model. So, I have used the &lt;em&gt;&lt;code&gt;info ()&lt;/code&gt;&lt;/em&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJH-Kpqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/217jvz8j0b5u5166jxfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJH-Kpqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/217jvz8j0b5u5166jxfa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the output above, there are a total of 13 features and 1 target variable, as well as no missing values, so there are no null values to worry about... LUCKY!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-understanding-the-data"&gt;
  &lt;/a&gt;
  STEP 3- UNDERSTANDING THE DATA
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Correlational Matrix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Its very important to understand your data. So, to begin with, let’s start by looking at the feature correlation matrix and attempting to analyze it. &lt;code&gt;rcParams&lt;/code&gt; is used to set the figure size .The correlation matrix was then visualized using &lt;code&gt;pyplot&lt;/code&gt;. I've added names to the correlation matrix using &lt;code&gt;xticks&lt;/code&gt; and &lt;code&gt;yticks&lt;/code&gt;. &lt;em&gt;&lt;code&gt;.colorbar()&lt;/code&gt;&lt;/em&gt; displays the matrix's &lt;code&gt;colorbar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bj6Weljg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n67uqhcpfgagtq3229qd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bj6Weljg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n67uqhcpfgagtq3229qd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By looking that this it's clear that no single feature has a particularly strong relationship with our desired value. In addition, some traits have a negative association with the goal value, while others have a positive correlation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Histogram&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The nicest aspect about this type of plot is that it only requires one command to generate the plots and it returns a wealth of information. Simply type &lt;em&gt;&lt;code&gt;variable.hist()&lt;/code&gt;&lt;/em&gt; into your command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_u4dmNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cem9svbjrf1v7cw5vrbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_u4dmNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cem9svbjrf1v7cw5vrbg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Graphical Representation of relation between Attributes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_hTQKa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1i0diqqe8mezcyinajo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_hTQKa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1i0diqqe8mezcyinajo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We observed that there are 207 men and 96 women data provided in the dataset.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1tZMXkRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl452dvuvfu7g6kdqedu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1tZMXkRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl452dvuvfu7g6kdqedu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We notice that females are more likely to have heart problems than males.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XnIan2gB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx5i2c8evsk4vztwrzgu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XnIan2gB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx5i2c8evsk4vztwrzgu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We notice ,that chest pain of '0', i.e. the ones with typical angina are much less likely to have heart problems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYMO62dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjtqrx8rqamm3xgcf1nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYMO62dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjtqrx8rqamm3xgcf1nf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We realize that people with restecg '1' and '0' are much more likely to have a heart disease than with restecg '2'.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PddhU39z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxn4obmbpb8mg7bx4rnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PddhU39z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxn4obmbpb8mg7bx4rnp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;People with exang=1 i.e. Exercise induced angina are much less likely to have heart problems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hvCXQtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m2kgsiupj9phd5gawt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hvCXQtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m2kgsiupj9phd5gawt1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We observe that Slope '2' causes heart pain much more than Slope '0' and '1'.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4use-machine-learning-algorithms"&gt;
  &lt;/a&gt;
  STEP 4-USE MACHINE LEARNING ALGORITHMS
&lt;/h3&gt;

&lt;p&gt;In this project, I picked four algorithms and experimented with their various settings before comparing the results. I divided the dataset into two parts: training data and testing data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Logistic Regression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Logistic regression is a statistical analysis approach for predicting a data value based on previous data set measurements. In the field of machine learning, logistic regression has become an important technique. The method enables a machine learning application to classify incoming data using an algorithm based on historical data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--erdb4Urn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5bf62dh5jfbmo8fy9xk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--erdb4Urn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5bf62dh5jfbmo8fy9xk.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG9Vzvh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7jg9t0g2z2kmvsjigla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG9Vzvh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7jg9t0g2z2kmvsjigla.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGbDIpda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9nlatlhdwlxtgo9xh01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGbDIpda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9nlatlhdwlxtgo9xh01.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, my training accuracy is 86.79% and testing accuracy 86.81%&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.K-nearest neighbors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This classifier searches for the classes of a data point's K closest neighbors and assigns a class to that data point based on the majority class. The number of neighbors, on the other hand, can be modified. I varied the number of neighbors from one to twenty and calculated the test score in each case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lSkiqtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq1fcr4rg38x07jl842z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lSkiqtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq1fcr4rg38x07jl842z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tlJa09nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/noep4bw1z9djwcl7d93r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tlJa09nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/noep4bw1z9djwcl7d93r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HI3hN14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw7cwp6zohn76ry20l7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HI3hN14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw7cwp6zohn76ry20l7x.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you can see, my training accuracy is 86.79% and testing accuracy is 86.81% same as of logistic regression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Support Vector machine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By altering the distance between the data points and the hyperplane, this classifier seeks to construct a hyperplane that can divide the classes as much as feasible. The hyperplane is determined depending on several kernels.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfWsBmUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05fduz9jw414qgu3cz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfWsBmUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05fduz9jw414qgu3cz4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oVMy4ypl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtiyp7w822dyf2bu8vfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oVMy4ypl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtiyp7w822dyf2bu8vfh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qudwmh9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b98yz7zzm5bvw0uloncq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qudwmh9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b98yz7zzm5bvw0uloncq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see my training accuracy is 93.40% and testing accuracy is 87.91%&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 5-CONCLUSION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project involved analysis of the heart disease patient dataset with proper data processing. Then, 3 models were trained and tested with maximum scores as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qudwmh9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b98yz7zzm5bvw0uloncq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qudwmh9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b98yz7zzm5bvw0uloncq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Form the comparison study; it is observed that the Support Vector Machine model turned out to be best classifier for heart disease prediction.&lt;/p&gt;

&lt;p&gt;Thank you for reading!! Feel free to share your thoughts and ideas.😄✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--32-iOSDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgxuazt3028nx4uyh8i8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--32-iOSDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgxuazt3028nx4uyh8i8.png" alt="Asset 1@2x-8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hack-this-fall-20"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HACK THIS FALL 2.0&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Hi FOLKS!!!✨🎊&lt;/p&gt;

&lt;p&gt;I'm ecstatic to share the news that I've been accepted as a "Hackathon Evangelist" for Hack This Fall 2.0!✨🎉 &lt;/p&gt;

&lt;p&gt;I'm so pumped to make a difference and contribute meaningfully to the hacker community with my amazing ML hacks!!! If you also want to make &lt;em&gt;#InnovateForGood&lt;/em&gt; then do register now for &lt;em&gt;Hack This Fall 2.0&lt;/em&gt; today itself.🎇&lt;/p&gt;

&lt;p&gt;Do register at: &lt;a href="https://hackthisfall.tech/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use this special code &lt;em&gt;“HTFHE066”&lt;/em&gt; to earn amazing and super exclusive goodies just for you.🤩🤩🤩&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>hackthisfall</category>
      <category>innovateforgood</category>
    </item>
    <item>
      <title>AnitaB.org Open Source profile README on GitHub</title>
      <author>Isabel Costa</author>
      <pubDate>Sun, 03 Oct 2021 16:01:51 +0000</pubDate>
      <link>https://dev.to/isabelcmdcosta/anitab-org-open-source-profile-readme-on-github-3829</link>
      <guid>https://dev.to/isabelcmdcosta/anitab-org-open-source-profile-readme-on-github-3829</guid>
      <description>&lt;p&gt;GitHub &lt;a href="https://twitter.com/github/status/1438276928696463372"&gt;announced&lt;/a&gt; the other day, that Organizations can now have their own README.&lt;/p&gt;

&lt;p&gt;I love this feature! So when I had the chance I created one for &lt;a href="https://github.com/anitab-org"&gt;AnitaB.org Open Source&lt;/a&gt; community.&lt;/p&gt;

&lt;p&gt;One thing I’ve learned from being involved with Open Source is that not all communities work the same way. Each one has its mission, way of working, and contribution processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Welcoming every type of contribution is one of our core values&lt;/strong&gt;, as is &lt;a href="https://opensource.com/article/21/8/beginner-open-source-community"&gt;being beginner-friendly&lt;/a&gt;. Having a &lt;strong&gt;README allows us to inform contributors of how we operate and how they can help us&lt;/strong&gt;. Now we can show what the community is about right when a contributor finds our organization page on GitHub. &lt;/p&gt;

&lt;p&gt;The first impression we want to pass to newcomers and our community is that they can contribute in multiple ways other than code if they want. So the first draft of our profile README aims to let our contributors know they can join us on &lt;a href="https://anitab-org.zulipchat.com/"&gt;Zulip&lt;/a&gt; and contribute to our community in various ways such as reviewing code, implementing features, testing our apps, reporting bugs, suggesting design improvements, blogging for our publication, etc... &lt;/p&gt;

&lt;p&gt;Here’s our profile README 🎉 which you can check out at &lt;a href="https://github.com/anitab-org"&gt;github.com/anitab-org&lt;/a&gt; (&lt;a href="https://github.com/anitab-org/.github/blob/main/profile/README.md"&gt;source code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaT85_7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6svf5abxumfonjkypx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaT85_7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6svf5abxumfonjkypx3.png" alt="anitab.org profile readme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have an organization on GitHub and would like to add this feature you can read about it here: &lt;a href="https://github.blog/changelog/2021-09-14-readmes-for-organization-profiles/"&gt;https://github.blog/changelog/2021-09-14-readmes-for-organization-profiles/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>The upside and downside of lodash</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Sun, 03 Oct 2021 15:49:17 +0000</pubDate>
      <link>https://dev.to/mcube25/the-upside-and-downside-of-lodash-540d</link>
      <guid>https://dev.to/mcube25/the-upside-and-downside-of-lodash-540d</guid>
      <description>&lt;p&gt;Lodash is a modern javaScript utility library that delivers modularity, performance and other task.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#upside"&gt;
  &lt;/a&gt;
  Upside
&lt;/h4&gt;

&lt;p&gt;Lodash provides tools for making code cleaner and more functional. It supports modern browsing environments and helps in building modular applications. It makes working with arrays, numbers, objects and strings more easier. Lodash is also excellent for iterating arays, objects and strings as well as manipulating and testing values. Let us take a look at some lodash functions and how they improve functionality. We are going to compare them to the vanilla javaScript equivalent.&lt;br&gt;
 The aim is to understand how this functionalities are achieved under the hood.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#sortby"&gt;
  &lt;/a&gt;
  sortBy
&lt;/h4&gt;

&lt;p&gt;It creates an array of elements sorted in ascending order by the results of running each element in a collection through each iteratee. This method performs a stable sort. It also preserves the original sort order of equal elements. the iteratees are invoked with a single argument: (value). It returns the new sorted array.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#lodash"&gt;
  &lt;/a&gt;
  Lodash
&lt;/h5&gt;

&lt;p&gt;First we import the function from lodash&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; import {sortBy} from 'lodash';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create an array of users&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const users = [
  { 'user': 'fred', 'age': 48 },
  { 'user': 'brand', 'age': 36 },
  { 'user': 'fred', 'age': 40 },
  { 'user': 'brand', 'age': 34 }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now apply the the lodash sortBy function to the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_.sortBy(users, function(o) { return o.user; });
// =&amp;gt; objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]

_.sortBy(users, ['user', 'age']);
// =&amp;gt; objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]

_.sortBy(users, 'user', function(o) {
  return Math.floor(o.age / 10);
});
// =&amp;gt; objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get the above result.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#vanilla-javascript"&gt;
  &lt;/a&gt;
  Vanilla javaScript
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const users = [
  { 'user': 'fred', 'age': 48 },
  { 'user': 'brand', 'age': 36 },
  { 'user': 'fred', 'age': 40 },
  { 'user': 'brand', 'age': 34 }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sortBy = (key) =&amp;gt; {
  return (a, b) =&amp;gt; (a[key] &amp;gt; b[key]) ? 1
   : ((b[key] &amp;gt; a[key]) ? -1 : 0);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now use the native sort to modify the array in place. We also use the &lt;code&gt;concat()&lt;/code&gt; method to copy the array before sorting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;users.concat().sort(sortBy('user'));
// =&amp;gt; objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]];

users.concat().sort(sortBy('user', 'age'));
// =&amp;gt; objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#curry"&gt;
  &lt;/a&gt;
  Curry
&lt;/h4&gt;

&lt;p&gt;Creates a function that accepts arguments of &lt;code&gt;func&lt;/code&gt; and either invokes &lt;code&gt;func&lt;/code&gt; returning its result if at least the number of arguments is specified or returns a &lt;code&gt;function&lt;/code&gt; that accepts the remaining &lt;code&gt;func&lt;/code&gt; arguments. The arguments of the &lt;code&gt;func&lt;/code&gt; maybe specified if &lt;code&gt;func.length&lt;/code&gt; is not sufficient&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lodash"&gt;
  &lt;/a&gt;
  Lodash
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { curry } from 'lodash';
const abc = (a, b, c) =&amp;gt; [a, b, c];
const curried = curry(abc);
curried(3)(4)(5);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the code solution above check&lt;br&gt;
&lt;a href="https://dev.to/mcube25/javascript-advanced-functions-for-dummies-4i6g:"&gt;https://dev.to/mcube25/javascript-advanced-functions-for-dummies-4i6g:&lt;/a&gt; &lt;br&gt;
&lt;a href="https://dev.to/mcube25/javascript-advanced-functions-for-dummies-4i6g"&gt;check for more info on currying&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#vanilla-javascript"&gt;
  &lt;/a&gt;
  Vanilla javaScript
&lt;/h5&gt;

&lt;p&gt;First we define the number of expected arguments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const curry = func =&amp;gt; {
  const expectedArgs = func.length;
  const curried = (...args) =&amp;gt; {

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If enough arguments have been passed, we return the result of the function execution or else we continue adding to the list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const curry = func =&amp;gt; {
  const expectedArgs = func.length;
  const curried = (...args) =&amp;gt; {
    return args.length &amp;gt;= expectedArgs
      ? func(...args)
      : (...args2) =&amp;gt; curried(...args.concat(args2))
  }
  return curried
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the code solution above check&lt;br&gt;
&lt;a href="https://dev.to/mcube25/javascript-advanced-functions-for-dummies-4i6g:"&gt;https://dev.to/mcube25/javascript-advanced-functions-for-dummies-4i6g:&lt;/a&gt; &lt;br&gt;
&lt;a href="https://dev.to/mcube25/javascript-advanced-functions-for-dummies-4i6g"&gt;check for more info on currying&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#chunk"&gt;
  &lt;/a&gt;
  Chunk
&lt;/h4&gt;

&lt;p&gt;It creates an array of elements split into groups the length of the size. The size will be the second argument provided to the function.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#lodash"&gt;
  &lt;/a&gt;
  Lodash
&lt;/h5&gt;

&lt;p&gt;Import chunk from lodash&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { chunk } from 'lodash';
chunk(['boy', 'girl', 'brother', 'sister', 'uncle', 'aunt'], 2);
//=&amp;gt;[['boy', 'girl'], ['brother', 'sister'], [uncle', 'aunt']];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If collection can’t be split evenly, the final chunk will be the remaining elements.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chunk(['boy', 'girl', 'brother', 'sister', 'uncle', 'aunt', 'father'], 2);
//=&amp;gt;[['boy', 'girl'], ['brother', 'sister'], [uncle', 'aunt'], [father]];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#vanilla-javascript"&gt;
  &lt;/a&gt;
  Vanilla javaScript
&lt;/h5&gt;

&lt;p&gt;Using plain javaScript the lodash example can be written as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const chunk = (arr, arrSize, cache = []) =&amp;gt; {
  const temp = [...arr]
  if (arrSize &amp;lt;= 0) { return cache }
  while (temp.length) {
    cache.push(temp.splice(0, arrSize))
    return cache
  }
}
chunk(['boy', 'girl', 'brother', 'sister', 'uncle', 'aunt'], 2);
//=&amp;gt;[['boy', 'girl'], ['brother', 'sister'], [uncle', 'aunt']];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pullat"&gt;
  &lt;/a&gt;
  pullAt
&lt;/h4&gt;

&lt;p&gt;This function removes elements from an array corresponding to indexes and returns an array of removed elements. This method mutates the array&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lodash"&gt;
  &lt;/a&gt;
  Lodash
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { pullAt } from 'lodash';
const array = ['2', '3', '4', '5', '6'];
pullAt(array, [2, 4]);
//=&amp;gt;[4, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#vanilla-javascript"&gt;
  &lt;/a&gt;
  Vanilla javaScript
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pullAt = (arr, idxs) =&amp;gt; {
  idxs.reverse().map(
    idx =&amp;gt; arr.splice(idx, 1)[0]
  ).reverse()
};

pullAt(array, [2, 4]);
//=&amp;gt;[4, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#remove"&gt;
  &lt;/a&gt;
  Remove
&lt;/h4&gt;

&lt;p&gt;This function removes all elements from an array that affirms or denies the subject in the proposition logic. It returns truthy for the array. It also returns an array of the removed elements. It is invoked with three arguments which are &lt;code&gt;(value, index, array)&lt;/code&gt;. It mutates the array&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lodash"&gt;
  &lt;/a&gt;
  Lodash
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { remove } from 'lodash';
const array = [1, 2, 3, 4, 5];
const even = remove(array, n =&amp;gt; {
  return n % 2 === 0
});

// the array //=&amp;gt;[1, 3, 5];
// even //=&amp;gt; [2, 4];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#vanilla-javascript"&gt;
  &lt;/a&gt;
  Vanilla javaScript
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const remove = (array, ix) =&amp;gt; {
  const toRemove = [];
  const result = array.filter((item, i) =&amp;gt;
    ix(item) &amp;amp;&amp;amp; toRemove.push(i)
  )
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to not mutate the original array until the very end, we want to cache the indexes while preparing the result to return in the code above. Just before returning, we can remove the items making sure to start from the higher indexes to prevent them shifting at each removal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const remove = (array, ix) =&amp;gt; {
  const toRemove = [];
  const result = array.filter((item, i) =&amp;gt;
    ix(item) &amp;amp;&amp;amp; toRemove.push(i)
  )
  toRemove.reverse().forEach(i =&amp;gt; array.splice(i, 1))
  return result
}
const array = [1, 2, 3, 4, 5];
const even = remove(array, n =&amp;gt; {
  return n % 2 === 0
});

// the array //=&amp;gt;[1, 3, 5];
// even //=&amp;gt; [2, 4];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h4&gt;

&lt;p&gt;This function reduces a collection to a value that is the accumulated result of running each element in the collection through an iteratee. Each successive invocation is supplied the return value of the previous. If the accumulator is not given, then the first element of the collection is used as the initial value. The iteratee is invoked with four arguments: &lt;code&gt;(accumulator, value, index, collection)&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lodash"&gt;
  &lt;/a&gt;
  Lodash
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { reduce } from 'lodash';

reduce([3, 4], (sum, n) =&amp;gt; sum + n, 0);
//=&amp;gt;7 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#vanilla-javascript"&gt;
  &lt;/a&gt;
  Vanilla javaScript
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;array = [3, 4];
array.reduce((sum, n) =&amp;gt; sum + n, 0);
//=&amp;gt;7 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h4&gt;

&lt;p&gt;It creates a function that invokes a &lt;code&gt;func&lt;/code&gt; with the &lt;code&gt;this&lt;/code&gt; binding and arguments of the created function while it is called less than &lt;code&gt;n&lt;/code&gt; times. Subsequent calls to the created function returns the result of the last &lt;code&gt;func&lt;/code&gt; invocation&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lodash"&gt;
  &lt;/a&gt;
  Lodash
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { before } from 'lodash';

(t, fn) =&amp;gt; before(t, fn);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#vanilla-javascript"&gt;
  &lt;/a&gt;
  Vanilla javaScript
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const before = (t, fn) =&amp;gt; {
  let counter = 0;
  let res;
  return (...args) =&amp;gt; {
    counter++;
    if (counter &amp;lt;= t) {
      res = fn(...args);
      return res
    } else {
      return res
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#downside"&gt;
  &lt;/a&gt;
  Downside
&lt;/h4&gt;

&lt;p&gt;As can be seen, the amount of code written when using lodash is minimal compared to using plain javaScript. But the downside of using lodash in an application is that it increases the size of the application which in turn affects the performance of such applications.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Don't Use Create React App Until You Know This</title>
      <author>Jordan Burroughs</author>
      <pubDate>Sun, 03 Oct 2021 15:10:36 +0000</pubDate>
      <link>https://dev.to/jburroughs/don-t-use-create-react-app-until-you-know-this-1a2d</link>
      <guid>https://dev.to/jburroughs/don-t-use-create-react-app-until-you-know-this-1a2d</guid>
      <description>&lt;p&gt;The other day a co-worker noticed something interesting about our production code: You could view our original, perfectly formatted code in the browser. At first I was like, "But I built it for production, and therefore it &lt;em&gt;should&lt;/em&gt; be minified and unreadable, right?"&lt;/p&gt;

&lt;p&gt;I always thought &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; (CRA) handled that for me. Have I been lied to the entire time?&lt;/p&gt;

&lt;p&gt;Source maps.&lt;/p&gt;

&lt;p&gt;Yes, source maps were the reason. So I learned about them and thought it would be nice to shed some light on them so others, like myself, become aware of them and make more informed decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-source-maps"&gt;
  &lt;/a&gt;
  What are source maps?
&lt;/h2&gt;

&lt;p&gt;When building React apps with CRA, you are basically using webpack and babel to transpile, minify, and bundle the JavaScript/TypeScript code you wrote for deployment. During this process your files are manipulated in a way that they need a mapping to be put back together in the original form. That's where source maps come into play.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source maps are just JSON files that essentially rebuild what the bundlers and transpilers changed. Their main purpose is to help debug your built, optimized code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It makes sense that if you have a bug and view the stack trace, you want to see &lt;em&gt;your&lt;/em&gt; code and not the gibberish that webpack and babel spit out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-the-browser-show-everything"&gt;
  &lt;/a&gt;
  Why Does The Browser Show Everything?
&lt;/h2&gt;

&lt;p&gt;The environment variable &lt;code&gt;GENERATE_SOURCEMAP=true&lt;/code&gt; by default in CRA. That means once you build, the generated folder there will be extra ".map" files generated. It will look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLhfDIju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umy47vb64q3o08g0vlhr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLhfDIju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umy47vb64q3o08g0vlhr.png" alt="Build folder with .map files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The browser can then use the .map files to reconstruct the original code, and become viewable in browser dev tools.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;GENERATE_SOURCEMAP=false&lt;/code&gt;, the same code would look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udAavIrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6psrp816kuts4pgkofgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udAavIrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6psrp816kuts4pgkofgi.png" alt="Build folder without .map files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's what the CRA docs say: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EHl-Xhsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gslwov09z5wao5lk223j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHl-Xhsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gslwov09z5wao5lk223j.png" alt="Create React App documentation on GENERATE_SOURCEMAP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-generate-the-source-maps"&gt;
  &lt;/a&gt;
  Should I Generate The Source Maps?
&lt;/h2&gt;

&lt;p&gt;In the end, what am I going to do? Leave the source maps in or take them out. &lt;/p&gt;

&lt;p&gt;Personally, I believe it depends on your requirements, but mostly yes. I think CRA has it correct (as in by default, they are generated, &lt;strong&gt;but&lt;/strong&gt; can be overwritten).&lt;/p&gt;

&lt;p&gt;Below I've identified some points about generating source maps to help make your choice: &lt;/p&gt;

&lt;p&gt;For not having them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A savvy user could see your source code 😬&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For having them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;So what if they see your code? What are &lt;em&gt;they&lt;/em&gt; gonna do with it? 🤷🏽‍♂️&lt;/li&gt;
&lt;li&gt;It helps debug in production.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yep, that's basically it. It seems to come down to whether you care if users see your source code and if you want to have the ability to debug in production.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Note: If you generate source maps, there are going to be extra .map files created. Although, these do **not&lt;/em&gt;* add to the bundle size because these files are only requested by the client when dev tools are open 😏*&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Let me know how you feel about generating source maps for production. Do you disable them, or leave them be?&lt;/p&gt;

&lt;p&gt;Also, if you want to fact check me, I'm all ears to understand more about source maps.&lt;/p&gt;

&lt;p&gt;Check out these resources I used to get learn about source maps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/oyetoket/is-it-safe-to-ship-javascript-source-maps-to-production-34p8"&gt;Dev.to post by Oyetoke Toby (see the comments too)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/"&gt;General info about source maps by Ryan Seddon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/sourcemaps/"&gt;Sentry.io docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#thanks-for-reading-if-you-want-more-tech-tips-software-stuff-and-bussin-blogs-you-can-throw-me-a-follow-on-twitter"&gt;
  &lt;/a&gt;
  Thanks for reading! If you want more tech tips, software stuff, and bussin' blogs, you can throw me a follow on &lt;a href="https://www.twitter.com/JBurroughsTech"&gt;Twitter&lt;/a&gt;🔥🤘🏽🐶
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>webpack</category>
      <category>react</category>
    </item>
    <item>
      <title>AWS Lambda powered up by AWS Graviton2</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 03 Oct 2021 14:57:44 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/aws-lambda-powered-up-by-aws-graviton2-3237</link>
      <guid>https://dev.to/awscommunity-asean/aws-lambda-powered-up-by-aws-graviton2-3237</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; recently announced the launch of &lt;a href="https://aws.amazon.com/ec2/graviton/"&gt;AWS Graviton2 processor&lt;/a&gt; (arm64 architecture) for Lambda functions which would not only make your Lambda function to execute faster but also optimizes the cost for execution. Graviton2 is an AWS built and owned processor.&lt;/p&gt;

&lt;p&gt;You can read more about it from the &lt;a href="https://aws.amazon.com/blogs/aws/aws-lambda-functions-powered-by-aws-graviton2-processor-run-your-functions-on-arm-and-get-up-to-34-better-price-performance/"&gt;announcement blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlJnlKzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAfDYztWQAIzvNM.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0CXygd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1399770499199254532/zn_-38Hw_normal.jpg" alt="Amazon Web Services profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amazon Web Services
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @awscloud
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Get up to 34% better price performance with AWS Lambda functions &lt;a href="https://twitter.com/hashtag/poweredbyAWS"&gt;#poweredbyAWS&lt;/a&gt; Graviton2 processors. Try it out for your &lt;a href="https://twitter.com/hashtag/serverless"&gt;#serverless&lt;/a&gt; web and mobile backends, &lt;a href="https://twitter.com/hashtag/microservices"&gt;#microservices&lt;/a&gt;, or &lt;a href="https://twitter.com/hashtag/dataprocessing"&gt;#dataprocessing&lt;/a&gt; workloads. Go build. &lt;a href="https://t.co/DhEVaIlfBW"&gt;go.aws/3F6ToZi&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:09 PM - 29 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443337084786331652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443337084786331652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443337084786331652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Lambda functions which are executing with Amazon Linux 2 runtime, now supports two architectures -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;arm64 - 64-bit ARM architecture, for the AWS Graviton2 processor.&lt;/li&gt;
&lt;li&gt;x86_64 – 64-bit x86 architecture, for x86-based processors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the existing Lambda functions would be running on &lt;strong&gt;x86_64 architecture&lt;/strong&gt; and this architecture is the default architecture for any new Lambda function. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#graviton2"&gt;Graviton2 (arm64) for Lambda functions.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-arm64"&gt;Setting up Graviton2 (arm64) powered Lambda functions.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arm64-vs-x86_64"&gt;Performance with arm64 vs x86_64 architecture.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#graviton2-arm64-for-lambda-functions"&gt;
  &lt;/a&gt;
  Graviton2 (arm64) for Lambda functions &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The Gaviton2 based arm64 architecture makes the computation faster which results in faster execution of the Lambda function and in turn the cost for Lambda is also optimized. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS Lambda functions running on Graviton2, using an Arm-based processor architecture designed by AWS, deliver up to 34% better price performance compared to functions running on x86 processors. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;arm64 architecture&lt;/strong&gt; for Lambda functions is currently available in selected AWS Regions - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;US East (N. Virginia) us-east-1&lt;/li&gt;
&lt;li&gt;US East (Ohio) us-east-2&lt;/li&gt;
&lt;li&gt;US West (Oregon) us-west-2&lt;/li&gt;
&lt;li&gt;Asia Pacific (Mumbai) ap-south-1&lt;/li&gt;
&lt;li&gt;Asia Pacific (Singapore) ap-southeast-1&lt;/li&gt;
&lt;li&gt;Asia Pacific (Sydney) ap-southeast-2&lt;/li&gt;
&lt;li&gt;Asia Pacific (Tokyo) ap-northeast-1&lt;/li&gt;
&lt;li&gt;EU (Frankfurt) eu-central-1&lt;/li&gt;
&lt;li&gt;EU (Ireland) eu-west-1&lt;/li&gt;
&lt;li&gt;EU (London) eu-west-2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The supported runtimes based on Amazon Linux 2 are -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS 12.x and 14.x&lt;/li&gt;
&lt;li&gt;Python 3.8 and 3.9&lt;/li&gt;
&lt;li&gt;Java 8 (&lt;code&gt;java8.al2&lt;/code&gt;) and 11&lt;/li&gt;
&lt;li&gt;.NET Core 3.1&lt;/li&gt;
&lt;li&gt;Ruby 2.7&lt;/li&gt;
&lt;li&gt;Custom runtime (&lt;code&gt;provided.al2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graviton2 processor is well suited for Lambda functions which are processing heavy high-performance computations, video encoding, simulation workloads.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-graviton2-arm64-powered-lambda-function"&gt;
  &lt;/a&gt;
  Setting up Graviton2 (arm64) powered Lambda function &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;When creating a new Lambda function from the web-console, you can select one of the architecture options - &lt;strong&gt;x86_84&lt;/strong&gt; (default) or &lt;strong&gt;arm64&lt;/strong&gt; (Graviton2 Processor).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q18NvgoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slx6hvfng691exk4fzfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q18NvgoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slx6hvfng691exk4fzfb.png" alt="New Lambda Function"&gt;&lt;/a&gt;&lt;br&gt;
If you want to change the architecture for the existing Lambda function, navigate to the &lt;em&gt;Runtime settings&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v54yC0pH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnxhv87h9por4n8dl46r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v54yC0pH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnxhv87h9por4n8dl46r.png" alt="Runtime settings"&gt;&lt;/a&gt;&lt;br&gt;
Click on &lt;em&gt;Edit&lt;/em&gt; to change the settings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOOsxGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5rykvtsoixu1xgjn8vq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOOsxGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5rykvtsoixu1xgjn8vq.png" alt="Edit runtime settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are trying to change an existing Lambda function from x86_64 to arm64 architecture, ensure to check the &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html#foundation-arch-considerations"&gt;function code compatibility with arm64 architecture&lt;/a&gt; and also &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html#foundation-arch-steps"&gt;suggested migration steps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Setting up Lambda with Graviton2 arm processor with &lt;a href="https://aws.amazon.com/serverless/sam/"&gt;AWS SAM&lt;/a&gt; and &lt;a href="https://aws.amazon.com/cdk/"&gt;AWS CDK&lt;/a&gt; would also be available.&lt;/p&gt;

&lt;p&gt;Running Lambda functions with arm64 architecture on x86_64 machine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--privileged&lt;/span&gt; multiarch/qemu-user-static &lt;span class="nt"&gt;--reset&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="nb"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#performance-with-arm64-vs-x8664-architecture"&gt;
  &lt;/a&gt;
  Performance with arm64 vs x86_64 architecture &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;For determining the performance I would be reusing the DynamoDB operation performance SAM template from my previous blog post.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/awscommunity-asean" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4t9gaU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XXMquOAk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3974/95700370-548c-431b-8ed5-cce70f477aed.png" alt="AWS Community ASEAN"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/awscommunity-asean/dynamodb-operations-scan-vs-query-with-cloudwatch-custom-metrics-2mik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;DynamoDB Operations Scan vs Query with CloudWatch Custom Metrics&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community ASEAN ・ Aug 22 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dynamodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#monitoring&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
With some modifications - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the number of &lt;code&gt;StepFunctionIndex&lt;/code&gt; to 10.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;LambdaMemory&lt;/code&gt; and &lt;code&gt;LambdaProcessor&lt;/code&gt; parameters to the CloudWatch Custom Metrics. &lt;code&gt;LambdaMemory&lt;/code&gt; is taken from Lambda's environment variable and &lt;code&gt;LambdaProcessor&lt;/code&gt; is a value set explicitly as environment variable.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cloudwatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putMetricData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MetricData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MetricName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaProcessorMeteric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dimensions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OPERATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;metric&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaMemory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_LAMBDA_FUNCTION_MEMORY_SIZE&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaProcessor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambda_fn_arch&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Milliseconds&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Namespace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LambdaProcessMetrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;arm64 architecture duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pP4Llvpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zo7pvf5zvm26qysvzce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pP4Llvpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zo7pvf5zvm26qysvzce.png" alt="Duration"&gt;&lt;/a&gt;&lt;br&gt;
arm64 architecture average duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QM4cmcPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r66pyj689tkg9py7xcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QM4cmcPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r66pyj689tkg9py7xcd.png" alt="Average duration"&gt;&lt;/a&gt;&lt;br&gt;
Duration graph&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-6LJ9S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq5ldzrxmonr0g5apk84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-6LJ9S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq5ldzrxmonr0g5apk84.png" alt="Duration graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;x86_64 architecture duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ho9vWy0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66ug82kceeuo5v43vd96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ho9vWy0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66ug82kceeuo5v43vd96.png" alt="Duration"&gt;&lt;/a&gt;&lt;br&gt;
x86_64 architecture average duration of several Lambda function invocations&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzqYxEr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfalmuwsmrpocxruywp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzqYxEr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfalmuwsmrpocxruywp4.png" alt="Average duration"&gt;&lt;/a&gt;&lt;br&gt;
Duration graph&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a09W_Z1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8ti6lfs0o38h3yp6d05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a09W_Z1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8ti6lfs0o38h3yp6d05.png" alt="Duration graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;query&lt;/code&gt; operations with x86_64 and arm64 with 128MB and 256MB Memory&lt;br&gt;
Average &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXs8O_X0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6a5b2pm1aj22vbu8pyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXs8O_X0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6a5b2pm1aj22vbu8pyq.png" alt="All query operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Minimum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MVqyrg1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9j1cxc6ccufn4qu1g3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVqyrg1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9j1cxc6ccufn4qu1g3h.png" alt="All query operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;
Maximum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWAgVyH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc35az1lypdny4lj7r0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWAgVyH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc35az1lypdny4lj7r0b.png" alt="All query operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;All &lt;code&gt;scan&lt;/code&gt; operations with x86_64 and arm64 with 128MB and 256MB Memory&lt;br&gt;
Average &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9nY54j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6vwf0bbufr01pid46sv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9nY54j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6vwf0bbufr01pid46sv.png" alt="All scan operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;
Minimum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCYb-UyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5164ac6f674sifcdl4k5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCYb-UyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5164ac6f674sifcdl4k5.png" alt="All scan operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt;&lt;br&gt;
Maximum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08tlnXlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4wshevpx3qtdohxqzqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08tlnXlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4wshevpx3qtdohxqzqh.png" alt="All scan operations with x86_64 and arm64 with 128MB and 256MB Memory"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;All operations &lt;br&gt;
Average &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvm5tvPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lq5gxiqzpgt3f5w4t4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvm5tvPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lq5gxiqzpgt3f5w4t4r.png" alt="All operations"&gt;&lt;/a&gt;&lt;br&gt;
Minimum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---daE6eLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jokzll9hvra0w7qaj54c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---daE6eLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jokzll9hvra0w7qaj54c.png" alt="All operations"&gt;&lt;/a&gt; &lt;br&gt;
Maximum &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dD67uIw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sx6wcrsi0v4twcqj87g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dD67uIw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sx6wcrsi0v4twcqj87g.png" alt="All operations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Lambda function with &lt;strong&gt;arm64 architecture&lt;/strong&gt; is cheaper than the &lt;strong&gt;x86_64 architecture&lt;/strong&gt;. And also both the architectures are included under the 1M free requests per month and 400,000 GB-seconds of compute time per month, usable for functions powered by both x86, and Graviton2 processors, in aggregate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-J2yst3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0ia44uoum9i1fkibsn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-J2yst3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0ia44uoum9i1fkibsn7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You can know more about &lt;a href="https://aws.amazon.com/lambda/pricing/"&gt;Lambda pricing&lt;/a&gt;.&lt;br&gt;
For this demo, the complete execution cycle with Lambda functions invocations and StepFunction executions along with CloudWatch dashboards were all part of the &lt;strong&gt;Free Tier limit&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;The operational and execution time with &lt;strong&gt;x86_64&lt;/strong&gt; and &lt;strong&gt;arm&lt;/strong&gt; has significant difference, the DynamoDB operations &lt;code&gt;Scan&lt;/code&gt; and &lt;code&gt;Query&lt;/code&gt; have different variations of execution time but the Lambda function as a whole, the time of duration is dropped which in-turn affects the billed execution time thus making the cost of Lambda function of &lt;strong&gt;arm64&lt;/strong&gt; significantly lower than &lt;strong&gt;x86_64&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambdafunctions</category>
      <category>graviton2</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Terraform - Complex Variable Types</title>
      <author>Marcel.L</author>
      <pubDate>Sun, 03 Oct 2021 14:55:03 +0000</pubDate>
      <link>https://dev.to/pwd9000/terraform-complex-variable-types-173e</link>
      <guid>https://dev.to/pwd9000/terraform-complex-variable-types-173e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#terraform-variables"&gt;
  &lt;/a&gt;
  Terraform Variables
&lt;/h2&gt;

&lt;p&gt;When creating a terraform configuration, you have to configure and declare &lt;a href="https://www.terraform.io/docs/language/values/variables.html"&gt;Input Variables&lt;/a&gt;. Input variables serve as parameters for a Terraform module and resources, allowing aspects of the module to be customized without altering the module's own source code, and allowing modules to be shared between different configurations.  &lt;/p&gt;

&lt;p&gt;The Terraform language uses the following types for its values:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;string&lt;/code&gt;: a sequence of Unicode characters representing some text, like "hello".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;number&lt;/code&gt;: a numeric value. The number type can represent both whole numbers like 15 and fractional values like 6.283185.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bool&lt;/code&gt;: a boolean value, either true or false. bool values can be used in conditional logic.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;list&lt;/code&gt; (or &lt;code&gt;tuple&lt;/code&gt;): a sequence of values, like &lt;code&gt;["one", "two"]&lt;/code&gt;. Elements in a list or tuple are identified by consecutive whole numbers, starting with zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map&lt;/code&gt; (or &lt;code&gt;object&lt;/code&gt;): a group of values identified by named labels, like &lt;code&gt;{name = "Mabel", age = 52}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strings, numbers, and bools are sometimes called &lt;em&gt;primitive&lt;/em&gt; types. Lists/tuples and maps/objects are sometimes called &lt;em&gt;complex&lt;/em&gt; types, &lt;em&gt;structural&lt;/em&gt; types, or &lt;em&gt;collection&lt;/em&gt; types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-primitive-variable-types"&gt;
  &lt;/a&gt;
  Using Primitive Variable Types
&lt;/h2&gt;

&lt;p&gt;In the following example we create a basic Azure Resource Group and we declare each resource argument with it's own separate variable using &lt;em&gt;Primitive&lt;/em&gt; types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#main.tf&lt;/span&gt;
&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"azurerm_resource_group"&lt;/span&gt; &lt;span class="s2"&gt;"demo_rg"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Each variable is declared separately:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#variables.tf&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"create_rg"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
    &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Default-RG-Name"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"location"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"uksouth"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see from the above example each resource argument is declared using a &lt;em&gt;primitive&lt;/em&gt; variable type.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-complex-variable-types"&gt;
  &lt;/a&gt;
  Using Complex Variable Types
&lt;/h2&gt;

&lt;p&gt;In the following example we create an Azure Resource Group and two storage accounts, but instead of declaring each variable individually using &lt;em&gt;primitive&lt;/em&gt; types we will use &lt;strong&gt;Collections&lt;/strong&gt; using &lt;em&gt;complex&lt;/em&gt; types. We will create our Resource Group by using a single complex variable called &lt;code&gt;rg_config&lt;/code&gt; and we will create our storage account/s using a single complex variable list of objects called &lt;code&gt;storage_config&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;As you can see from the following variable declaration, we are only declaring each resources values using a &lt;em&gt;complex&lt;/em&gt; variable type of &lt;strong&gt;Object&lt;/strong&gt; (Resource Group config) and &lt;strong&gt;List Object&lt;/strong&gt; (List of Storage Account configs):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#// code/variables.tf#L1-L20&lt;/span&gt;
&lt;span class="c1"&gt;#Resource Group Config - Object&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"rg_config"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;location&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Storage Account Config - List of Objects (Each object represents a storage config)&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"storage_config"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
    &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Because we are using variable objects we can just reference and lookup each key of the relevant object passed in to obtain the corresponding configuration value e.g. &lt;code&gt;var.config.key&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#// code/resources.tf#L6-L32&lt;/span&gt;
&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"azurerm_resource_group"&lt;/span&gt; &lt;span class="s2"&gt;"demo_rg"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rg_config&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rg_config&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rg_config&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;
  &lt;span class="nx"&gt;tags&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Purpose&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Demo-RG"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Automation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"azurerm_storage_account"&lt;/span&gt; &lt;span class="s2"&gt;"sas"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;#Implicit dependency from previous resource&lt;/span&gt;
  &lt;span class="nx"&gt;resource_group_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;azurerm_resource_group&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demo_rg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;azurerm_resource_group&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demo_rg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;

  &lt;span class="c1"&gt;#values from variable config object&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account_kind&lt;/span&gt;
  &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account_tier&lt;/span&gt;
  &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account_replication_type&lt;/span&gt;
  &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access_tier&lt;/span&gt;
  &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt;
  &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min_tls_version&lt;/span&gt;
  &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage_config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;

  &lt;span class="c1"&gt;#Apply tags&lt;/span&gt;
  &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Purpose&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Demo-sa-${count.index + 1}"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Automation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Because we are now using a &lt;strong&gt;list of objects&lt;/strong&gt; as the variable for storage accounts, each storage account we want to create can be configured on our &lt;strong&gt;TFVARS&lt;/strong&gt; file as an object inside its own block, and so we can simply add additional object blocks into our &lt;strong&gt;TFVARS&lt;/strong&gt; to build &lt;code&gt;one&lt;/code&gt; or &lt;code&gt;many&lt;/code&gt; storage accounts, each with different configs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#// code/common.auto.tfvars.tf#L1-L30&lt;/span&gt;
&lt;span class="c1"&gt;#Resource Group Config - Object Values&lt;/span&gt;
&lt;span class="nx"&gt;rg_config&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;create_rg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Demo-Terraform-RG"&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"uksouth"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Storage Account Configs - List of Objects Values&lt;/span&gt;
&lt;span class="nx"&gt;storage_config&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="c1"&gt;#Storage Account 1 (Object1): StorageV2&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pwd9000v2sa001"&lt;/span&gt;
    &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"StorageV2"&lt;/span&gt;
    &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Standard"&lt;/span&gt;
    &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"LRS"&lt;/span&gt;
    &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TLS1_2"&lt;/span&gt;
    &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Cool"&lt;/span&gt;
    &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;#Storage Account 2 (object2): Azure Data Lake Storage V2 (ADLS2)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;                      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pwd9000adls2sa001"&lt;/span&gt;
    &lt;span class="nx"&gt;account_kind&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"BlockBlobStorage"&lt;/span&gt;
    &lt;span class="nx"&gt;account_tier&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Premium"&lt;/span&gt;
    &lt;span class="nx"&gt;account_replication_type&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ZRS"&lt;/span&gt;
    &lt;span class="nx"&gt;min_tls_version&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TLS1_2"&lt;/span&gt;
    &lt;span class="nx"&gt;enable_https_traffic_only&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="nx"&gt;access_tier&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hot"&lt;/span&gt;
    &lt;span class="nx"&gt;is_hns_enabled&lt;/span&gt;            &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see from the last example, using complex variable types and making our configurations more object oriented can offer much greater flexibility and granularity in terraform deployments.  &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/DevOps-Terraform-Complex-Vars/code"&gt;Github&lt;/a&gt; page. ❤️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions &amp;amp; DevOps Architect.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>my current work on my game</title>
      <author>scoopydevy</author>
      <pubDate>Sun, 03 Oct 2021 14:41:26 +0000</pubDate>
      <link>https://dev.to/scoopydevy/my-current-work-on-my-game-1cl6</link>
      <guid>https://dev.to/scoopydevy/my-current-work-on-my-game-1cl6</guid>
      <description>&lt;p&gt;got basic rendering done using SDL_image which is way better than using OpenGL cuz sdl2 is so "bare-bone" but i feel really proud that ive got an image moving on the screen my next big approach would be to get some physics into the game like gravity, tile collision etc.Till then... Cheers! #gamedev #cpp &lt;a href="https://twitter.com/scoopydevy/status/1441387905096683532"&gt;https://twitter.com/scoopydevy/status/1441387905096683532&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>cpp</category>
    </item>
  </channel>
</rss>
