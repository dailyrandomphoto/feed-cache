<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build APIs without code </title>
      <author>Vasanth</author>
      <pubDate>Fri, 07 May 2021 16:55:29 +0000</pubDate>
      <link>https://dev.to/vasanth7781/build-apis-without-code-4g2j</link>
      <guid>https://dev.to/vasanth7781/build-apis-without-code-4g2j</guid>
      <description>&lt;p&gt;I have been involving in building no code API builder platform &lt;a href="https://fireapis.com/"&gt;Fireapis&lt;/a&gt; where now APIs can be built within minutes and can be consumed easily.No need to worry about deployment, scalability, availability, etc..,&lt;br&gt;
Another thing is we can create different APIs resources for different environments (stage, prod, dev, or any, etc..,)&lt;/p&gt;

&lt;p&gt;Now, I'll show you how to make an example (we say Plan) API without any code and consume our Plan API &lt;/p&gt;

&lt;p&gt;First, enter into &lt;a href="https://fireapis.com/"&gt;https://fireapis.com/&lt;/a&gt; and signup, its free account&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First step:&lt;/strong&gt;&lt;br&gt;
You will be landed on the Dashboard page after signup or login, go to the &lt;strong&gt;Environments tab&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing is we have to create an environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDh7ZYjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n467waowvz3qgchdgnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDh7ZYjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n467waowvz3qgchdgnj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlOoXoqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2tqvbm8m2z0x36bl68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlOoXoqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2tqvbm8m2z0x36bl68.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter our environment &lt;strong&gt;name, domain URL,&lt;/strong&gt; and a short &lt;strong&gt;description&lt;/strong&gt; about the environment, then &lt;strong&gt;click Add&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have &lt;strong&gt;created our environment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next thing, we have to go to the &lt;strong&gt;API tab&lt;/strong&gt; section, &lt;strong&gt;Click Add new API&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlbxak8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16xlt82rscopkgv1dq4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlbxak8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16xlt82rscopkgv1dq4s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;strong&gt;name and URL&lt;/strong&gt; of our endpoint and &lt;strong&gt;select the environment&lt;/strong&gt; for which API has to be built&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4CjEbKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpkkqp5b6cc4gzs98283.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4CjEbKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpkkqp5b6cc4gzs98283.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we are going to &lt;strong&gt;add fields&lt;/strong&gt; for our API. Here for eg, I have added name as string type, amount as a numeric type,is_active as boolean, description as a string that can accept null and blank values. For primary key leaving a blank as it will auto add field id as primary key, if not added custom primary key&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlnTCdiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsracbhp0g34gm87tjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlnTCdiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsracbhp0g34gm87tjm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7CE_9yc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1ioojapm6ud0ve23lbm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7CE_9yc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1ioojapm6ud0ve23lbm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;adding all fields, click Add.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now successfully we have &lt;strong&gt;created Plan API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Step:&lt;/strong&gt;&lt;br&gt;
Now we are &lt;strong&gt;going to test our Plan API&lt;/strong&gt; endpoint by using the&lt;br&gt;
autogenerated curl command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D45R1B-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79b54bbqr63paneeo3e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D45R1B-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79b54bbqr63paneeo3e1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going to test different request by using the &lt;strong&gt;auto-generated curl command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yedsi2XY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwp183zcxw3oe1c0zpi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yedsi2XY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwp183zcxw3oe1c0zpi3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have got success response after making a POST request for Plan API&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;we going to make GET request for the primary key using curl command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r22___9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgs8yz2m2cc84baf9cp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r22___9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgs8yz2m2cc84baf9cp0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2RLkV7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzk14g5qr3yv9daksknk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2RLkV7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzk14g5qr3yv9daksknk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have got a response for GET request using the primary key&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can &lt;strong&gt;check our logs&lt;/strong&gt;, now we enter into the &lt;strong&gt;Logs tab&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSMVMxwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceckjplex0pris37zndb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSMVMxwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceckjplex0pris37zndb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcHAaxq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckxlnbdobn9s9tetvbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcHAaxq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckxlnbdobn9s9tetvbz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcJGZXZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5usabj7spdr9y93zontc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcJGZXZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5usabj7spdr9y93zontc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can see a detailed log report for different requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Now we have created an API that can do CRUD operation in few minutes&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fireapis"&gt;
  &lt;/a&gt;
  Fireapis?
&lt;/h1&gt;

&lt;p&gt;Solving the development time and difficulties in coding, scaling, and storage of data using API within few minutes.&lt;/p&gt;

&lt;p&gt;Fireapis also provides Logs for all the request coming in and out for your different set of environments &lt;/p&gt;

&lt;p&gt;We hope you liked this write up and got the gist of fireapis on how it can be used in your projects&lt;/p&gt;

&lt;p&gt;Feel free to reach out to us by Email(&lt;a href="mailto:vasanth@fireapis.com"&gt;vasanth@fireapis.com&lt;/a&gt;) if you would like to know more about Fireapis.&lt;/p&gt;

&lt;p&gt;I’d love to hear what you think of Fireapis and if there is anything we can improve.&lt;/p&gt;

&lt;p&gt;Catch you in the next one 👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>database</category>
      <category>aws</category>
      <category>python</category>
    </item>
    <item>
      <title>Transforming Media With Java Code </title>
      <author>Rebeccca Peltz</author>
      <pubDate>Fri, 07 May 2021 16:45:38 +0000</pubDate>
      <link>https://dev.to/rebeccapeltz/transforming-media-with-java-code-4863</link>
      <guid>https://dev.to/rebeccapeltz/transforming-media-with-java-code-4863</guid>
      <description>&lt;h1&gt;
  &lt;a href="#transforming-media-with-java"&gt;
  &lt;/a&gt;
  Transforming Media With Java
&lt;/h1&gt;

&lt;p&gt;Transforming media on Cloudinary in Java is fun because of the fluent interface. Cloudinary transformations are used to produce optimized media as well as aesthetic effects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fluent-interface"&gt;
  &lt;/a&gt;
  Fluent Interface
&lt;/h2&gt;

&lt;p&gt;In 2005, Martin Fowler created an API design pattern called the &lt;a href="https://martinfowler.com/bliki/FluentInterface.html"&gt;fluent interface, which makes use of &lt;/a&gt;method chaining and a domain-specific language and&lt;a href="https://martinfowler.com/bliki/FluentInterface.html"&gt; which has been adopted &lt;/a&gt;in many popular APIs, such as .NET’s SQL API &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/linq/"&gt;Linq. &lt;/a&gt;With Linq, .NET programmers can write code that generates SQL.&lt;/p&gt;

&lt;p&gt;Since then, Fowler has introduced many &lt;a href="https://martinfowler.com/eaaCatalog/"&gt;design patterns&lt;/a&gt; for object-oriented programming that have been embraced by OO developers for building APIs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-chaining"&gt;
  &lt;/a&gt;
  Method Chaining
&lt;/h3&gt;

&lt;p&gt;Method chaining refers to a method that returns an instance of the object that encapsulates it,  as in this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Hello {
    private string name;
    Hello()
    {
        System.out.println("Calling The Constructor");
    }
    public Hello setName(String name)
    {
        this.name = name;
        return this;
    }
    void say()
    {
        System.out.println("Hello " + name);
    }
}

public class Hello {
    public static void main(String[] args)
    {
        // "method chaining".
        new Hello().setName("Martin").say();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt;  The popular jQuery library, which leverages method chaining, was developed around the time Martin Fowler launched the fluent interface.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domainspecific-language"&gt;
  &lt;/a&gt;
  Domain-Specific Language
&lt;/h3&gt;

&lt;p&gt;Since the fluent interface comprises both object chaining and a domain-specific language, the code flows and is easy to read.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fluent-interface-for-transformations"&gt;
  &lt;/a&gt;
  Fluent Interface for Transformations
&lt;/h3&gt;

&lt;p&gt;We're going to see here how to use the Cloudinary Java SDK's fluent interface to code fun and useful transformations.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cropping-of-media"&gt;
  &lt;/a&gt;
  Cropping of Media
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scale"&gt;
  &lt;/a&gt;
  Scale
&lt;/h3&gt;

&lt;p&gt;Cloudinary performs simple cropping transformations with a fluent interface. An example is to apply a single dimension to an image or video and then scale the media item to maintain the aspect ratio, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).crop("scale")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s an example of single-dimension scaling:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/image/upload/w_300,c_scale/dog.jpg"&gt;https://res.cloudinary.com/cloudinary-training/image/upload/w_300,c_scale/dog.jpg&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;Original: 2519 x 2501
   &lt;/td&gt;
   &lt;td&gt;Scaled: 300 x 298
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;




&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9z-Wp88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog1.jpg" alt="dog original photo" title="dog original photo"&gt;

   &lt;/td&gt;
   &lt;td&gt;




&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlV7f6Vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog2.jpg" alt="dog scaled photo" title="dog scaled photo"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The transformed image adjusts the unspecified dimension (in this case, the height) so that the aspect ratio stays the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fit"&gt;
  &lt;/a&gt;
  Fit
&lt;/h3&gt;

&lt;p&gt;To create a media item, say, an image, with a certain width and height, specify them and maintain the aspect ratio with the &lt;code&gt;crop&lt;/code&gt; type &lt;code&gt;fit&lt;/code&gt;. Cloudinary then changes the dimensions and maintains aspect ration, but the image remains within the bounding box based on the two specified dimensions. See the example below.&lt;br&gt;
dim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("fit")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

Fit: 201 x 200
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;



&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSKAmUaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog3.jpg" alt="resize with fit " title="resize with fit"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The transformed image might not have the exact dimensions as specified but will not exceed them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pad"&gt;
  &lt;/a&gt;
  Pad
&lt;/h3&gt;

&lt;p&gt;You can set exact dimensions with the &lt;code&gt;crop&lt;/code&gt; type &lt;code&gt;pad&lt;/code&gt;. To maintain the aspect ratio, &lt;code&gt;pad&lt;/code&gt; scales the image to fit within the specified dimensions and creates a padding for any dimension that must be made smaller than the value specified. The color of the pad will default to white. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("pad")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

Pad: 300 x 300
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;



&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTK_6e9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog4.jpg" alt="resize with pad" title="resize with pad"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To change the color of the padding, just chain the &lt;code&gt;background&lt;/code&gt; parameter to the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("pad").background("red")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;
Red Padding: 300 x 200
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;



&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9YyhB5iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog5.jpg" alt="resize with red padding" title="resize with red padding"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To have Cloudinary determine the most used color in the media item and then apply that color to the padding, set &lt;code&gt;background&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("pad").background("auto")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

Auto Padding: 300 x 200
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;




&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQKQLsGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog6.jpg" alt="resize with auto pad" title="resize with auto pad"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There are many more cropping transformations and you can learn about them &lt;a href="https://cloudinary.com/documentation/transformation_reference"&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fun-with-transformations"&gt;
  &lt;/a&gt;
  Fun With Transformations
&lt;/h2&gt;

&lt;p&gt;Once you have uploaded your media to Cloudinary, you can write Java code to create URLs, image tags, and video tags that contain transformation parameters. Below are a few fun video examples in which we create URLs with transformations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boomerang-effect-with-video"&gt;
  &lt;/a&gt;
  Boomerang Effect With Video
&lt;/h3&gt;

&lt;p&gt;Consider a time-lapse video of an hourglass. How would the hourglass run if time moves backwards? To find out, apply the &lt;strong&gt;boomerang&lt;/strong&gt; effect on the video as a transformation, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cloudinary.url().transformation(new Transformation().effect("boomerang"))
.resourceType("video").generate("purple-hourglass.mp4")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click this link to play the video in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/video/upload/e_boomerang/purple-hourglass.mp4"&gt;https://res.cloudinary.com/cloudinary-training/video/upload/e_boomerang/purple-hourglass.mp4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kN1UUwRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/hourglass.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kN1UUwRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/hourglass.jpg" alt="boomerang effect" title="boomerang effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concatenation-of-videos"&gt;
  &lt;/a&gt;
  Concatenation of Videos
&lt;/h3&gt;

&lt;p&gt;To play two videos in sequence, try this concatenation technique:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cloudinary.url().resourceType("video")
.transformation(new Transformation().width(300).height(200).crop("filt").chain()
.overlay(
new Layer().publicId("video:purple-hourglass"))
.flags("splice").width(300).height(200).crop("fit"))
.generate("3-o-clock.mp4")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click this link to play the concatenated video in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/video/upload/c_fit,h_200,w_300/c_fit,fl_splice,h_200,l_video:purple-hourglass,w_300/3-o-clock.mp4"&gt;https://res.cloudinary.com/cloudinary-training/video/upload/c_fit,h_200,w_300/c_fit,fl_splice,h_200,l_video:purple-hourglass,w_300/3-o-clock.mp4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CoRGLnD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/clock.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoRGLnD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/clock.jpg" alt="video concatenation" title="video concatenation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progress-indicator"&gt;
  &lt;/a&gt;
  Progress Indicator
&lt;/h3&gt;

&lt;p&gt;How about creating a visual indicator that shows how much time is left in your video? Simply add a progress bar, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cloudinary.url().transformation(new Transformation().effect("progressbar:frame:FF0000:12"))                     .resourceType("video").generate("purple-hourglass.mp4")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click this link to play the video with a progress bar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/video/upload/e_progressbar:frame:FF0000:12/purple-hourglass.mp4"&gt;https://res.cloudinary.com/cloudinary-training/video/upload/e_progressbar:frame:FF0000:12/purple-hourglass.mp4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8X8kKYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/progress-bar-video.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8X8kKYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/progress-bar-video.jpg" alt="progress bar" title="progress bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The design of the Cloudinary Java SDK makes it easy to code in Java. As you learn more about the many ways in which you can transform media with Cloudinary, you’ll become more creative and fluent with the process. Have fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Hourglass-timer video by &lt;a href="https://www.pexels.com/@samerdaboul?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Samer Daboul&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/close-up-view-of-a-sand-timer-1196530/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Clock video by &lt;a href="https://www.pexels.com/@jason-h-austin-544053?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Jason H. Austin&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/round-wall-clock-1509518/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://chrome.google.com/webstore/detail/cloudinary-media-inspecto/ehnkhkglbafecknplfmjklnnjimokpkg"&gt;Cloudinary Media Inspector Extension&lt;/a&gt; for insight on images&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cloudinary</category>
      <category>java</category>
      <category>transformations</category>
    </item>
    <item>
      <title>My second impression of Rust and why I think it's the best general-purpose language!</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Fri, 07 May 2021 16:42:49 +0000</pubDate>
      <link>https://dev.to/deepu105/my-second-impression-of-rust-and-why-i-think-it-s-the-best-general-purpose-language-31jh</link>
      <guid>https://dev.to/deepu105/my-second-impression-of-rust-and-why-i-think-it-s-the-best-general-purpose-language-31jh</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://deepu.tech/my-second-impression-of-rust/"&gt;deepu.tech&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; for updates and let me know what can be improved in the post.&lt;/p&gt;




&lt;p&gt;I wrote about &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;my first impression of Rust&lt;/a&gt; in November 2019. After that, I dabbled with it few times, but mostly on very simple code, and while I liked using Rust I wasn't too amazed. On the surface, it kind of felt more or less like many other languages I have dabbled with.&lt;/p&gt;

&lt;p&gt;All that changed last month when I finally decided to build a realistic use case with Rust. Since I was quite invested in cloud computing and containers, I decided to build a terminal UI to monitor Kubernetes clusters with Rust. I know it was quite ambitious for a Rust newbie. But looking back, it was absolutely worth it and I have &lt;a href="https://github.com/kdash-rs/kdash"&gt;KDash&lt;/a&gt; to show for it.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rs6duE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/EzF29bZXMAE0pv0.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkDzhPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1278304200947089416/XocBIsMa_normal.jpg" alt="Deepu K Sasidharan ( ദീപു, தீபு, दीपू ) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Deepu K Sasidharan ( ദീപു, தீபு, दीपू )
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/deepu105"&gt;@deepu105&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Introducing KDash - A simple &lt;a href="https://twitter.com/kubernetesio"&gt;@kubernetesio&lt;/a&gt; terminal dashboard built with &lt;a href="https://twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; &lt;br&gt;&lt;br&gt;Still a WIP but here is an MVP I built over the last few weeks. Please try it out and provide me feedback also any contribution is welcome&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/rust"&gt;#rust&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Kubernetes"&gt;#Kubernetes&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/oss"&gt;#oss&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/ws9qfc9ie8"&gt;github.com/kdash-rs/kdash&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:20 AM - 16 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1383017556546584578" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1383017556546584578" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1383017556546584578" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;So it's a pretty UI on the terminal that shows different resource data and utilization metrics for Kubernetes clusters. Kind of inspired by &lt;a href="https://github.com/kdash-rs/kdash#how-does-this-compare-to-k9s"&gt;K9s&lt;/a&gt;, which is built with Go. The focus for KDash was speed and UX. With Rust, I knew that I didn't have to worry about the speed part.&lt;/p&gt;

&lt;p&gt;The architecture was quite complex. It's fully event-driven, concurrent, and asynchronous with different threads to handle drawing of the UI, doing network requests, streaming logs, and running commands. I used channels to pass events across threads and the application state was shared using an &lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"&gt;ARC&lt;/a&gt; smart pointer and a &lt;a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"&gt;Mutex&lt;/a&gt; lock. I'll write another blog with more details about the architecture choices and inspirations.&lt;/p&gt;

&lt;p&gt;While, I have implemented similar architectures in Go, Java, and JavaScript, doing it in Rust was quite challenging. I struggled the first few days to put together a basic structure and was constantly battling the compiler thanks to my habits from other languages I work with. But I started getting better at thinking in the Rust way and within a week I was having fewer compiler errors and Clippy warnings. After few weeks, I rarely get compiler errors for new code (also thanks to &lt;a href="https://rust-analyzer.github.io/"&gt;rust-analyzer&lt;/a&gt;) and I have started to polish existing code to make it better or to write better abstractions.&lt;/p&gt;

&lt;p&gt;So now that I have set the context, I feel it's time to revisit points from my first impression and see if they still hold true. Along the way, I'll share my thoughts on why I think Rust is the future for general-purpose languages and how it is taking over the software engineering world. I'll try not to be biased as much as possible and wear my polyglot hat for comparisons. If you haven't read my previous &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;post&lt;/a&gt; on the topic, I encourage you to read it for better context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-love-about-rust"&gt;
  &lt;/a&gt;
  What I love about Rust
&lt;/h2&gt;

&lt;p&gt;Ok, let's get this out of the way first. So I love everything I originally liked about Rust. Some of them even more so after using Rust full-fledged and gaining more experience in it. So here, I'll touch upon some important high-level stuff that I didn't mention in the &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rust throws around some buzz words in its docs, but they are not just marketing buzz, they actually mean it with full sincerity and they actually matter a lot and are indeed the biggest selling points of Rust.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#safety"&gt;
  &lt;/a&gt;
  Safety
&lt;/h3&gt;

&lt;p&gt;What does being safe mean for a language? or rather what does unsafe mean? Let's set the context first so that we can appreciate what Rust offers. Safety can be categorized into three (or four if you count null safety)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;About 70% of all CVEs at Microsoft are memory safety issues.&lt;br&gt;
Two-thirds of Linux kernel vulnerabilities come from memory safety issues&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#memory-safety"&gt;
  &lt;/a&gt;
  Memory safety
&lt;/h5&gt;

&lt;p&gt;This means when you access a variable or an item in an array, you can be sure that you are indeed accessing what you meant to or are allowed to access. In other words, you will not be reading/writing into the memory of another variable or pointer by mistake regardless of what you do in your program.&lt;/p&gt;

&lt;p&gt;Why is this a big deal? Doesn't all major programming languages ensure this?&lt;/p&gt;

&lt;p&gt;Yes, to varying extent. But some languages are unsafe by default. In C or C++, you can access the memory of another variable by mistake or you can free a pointer twice (double-free error). Such behavior is categorized as undefined behavior as they are unpredictable and hence can be abused by a hacker to take control of the program or to leak privileged information. In memory-safe languages, if you try to access an array element out of its bound, you will just crash the program with a panic/error, which is predictable behavior.&lt;/p&gt;

&lt;p&gt;This is why memory-related bugs in C/C++ systems often result in &lt;a href="https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"&gt;CVEs&lt;/a&gt; and emergency patches. There are other memory-unsafe behaviors in C or C++; accessing pointers to stack frames that have been popped, a memory that has been de-allocated, iterator invalidation, and so on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Null safety&lt;/strong&gt;: I list this separately under memory safety, as I come from a Java/JS background and we are so used to the concept of null (infamous for being the worst invention in programming). Garbage collected languages kind of need a concept of nothing so that a pointer can be freed. But it also leads to issues and pain. NPE anyone? Technically this falls under memory safety but most memory-safe languages still let you use null as a value leading to null pointer errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type safety
&lt;/h5&gt;

&lt;p&gt;This means when you access a variable you access it as the correct type of data it is stored as. This gives us the confidence to work on data without having to manually check for the data type during runtime. Memory safety is required for a language to be type-safe.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thread-safety"&gt;
  &lt;/a&gt;
  Thread safety
&lt;/h5&gt;

&lt;p&gt;This means you can access/modify the same memory from multiple threads at the same time without worrying about data races. This is generally achieved by using mutual exclusion locks (Mutex) or thread synchronization. Thread safety is required for optimal memory and type safety so generally languages that are memory and type-safe tend to be thread-safe as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now let's see how Rust offers safety in these aspects.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#memory-safety"&gt;
  &lt;/a&gt;
  Memory safety
&lt;/h5&gt;

&lt;p&gt;Rust ensures memory safety at compile time using its innovative ownership mechanism and the borrow checker built into the compiler. The compiler just does not allow memory unsafe code unless it's explicitly marked as &lt;code&gt;unsafe&lt;/code&gt; in an unsafe block or function. This static compile-time analysis eliminates many types of memory bugs and with some more runtime checks, Rust guarantees memory safety.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Null safety&lt;/strong&gt;: There is no concept of null at the language level. Instead, Rust provides the Option enum which can be used to mark the presence or absence of a value making the resulting code null safe and much easier to deal with and you will never encounter null pointer exceptions in Rust.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type safety
&lt;/h5&gt;

&lt;p&gt;Rust is statically typed and it guarantees type safety by strict compile-time type checks and by guaranteeing memory safety. This is not special as most modern languages are statically typed. Rust also allows some level of dynamic typing with the &lt;code&gt;dyn&lt;/code&gt; keyword and &lt;code&gt;Any&lt;/code&gt; type when required. But the powerful type inference and the compiler ensure type safety even in that case.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thread-safety"&gt;
  &lt;/a&gt;
  Thread safety
&lt;/h5&gt;

&lt;p&gt;Rust guarantees thread safety using similar concepts it uses for memory safety along with providing standard library features like channels, Mutex, and ARC. The compiler makes it impossible to cause accidental data race from a shared state. This makes us confident to focus on code and let the compiler worry about shared data between threads.&lt;/p&gt;

&lt;p&gt;Now, don't be mistaken, you will see crashes and errors in a Rust application, even array index out of bound errors, and so on. Rust is not claiming safety against errors or is going to catch wrong logic, as no compiler can guarantee against human error. It just makes errors predictable so when errors do happen you are sure that there is no security issue associated with it like in a C/C++ application.&lt;/p&gt;

&lt;p&gt;Rust also lets you write unsafe code when required by explicitly declaring &lt;code&gt;unsafe&lt;/code&gt; blocks. This gives the flexibility when needed as there are certain low-level systems use cases that would need unsafe memory access. Rust cannot guarantee any of the above safety in &lt;code&gt;unsafe&lt;/code&gt; code blocks as it's for people who are sure of what they are doing and don't want the compiler to interfere.&lt;/p&gt;

&lt;p&gt;Now, most statically typed high-level languages like Java, Go or C# also offers all of the above to varying extend, none of them provide null safety though. But they do it with the cost of having a runtime and a garbage collector.&lt;/p&gt;

&lt;p&gt;This is why Rust is special as it offers better safety than any high-level language without a runtime or memory management (garbage collection, reference counting, and so on) overhead. At the same time, it offers speed and performance, &lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust.html"&gt;sometimes better than&lt;/a&gt;, of a low-level language like C/C++&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zero-cost-abstractions"&gt;
  &lt;/a&gt;
  Zero cost abstractions
&lt;/h3&gt;

&lt;p&gt;A zero-cost abstraction means that how you write your program does not affect its performance, for example, you can choose to create or use any number of abstractions to structure your program, you could use loops or iterators, you could do functional or imperative programming and the result remains the same. The compiler will produce the best possible implementation of the machine code for the use case regardless of the flavor of code you choose.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://en.wikipedia.org/wiki/Bjarne_Stroustrup"&gt;Bjarne Stroustrup&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only very few programming languages offer this. C++ is popular for offering zero-overhead abstractions but &lt;a href="https://www.youtube.com/watch?v=rHIkrotSwcc"&gt;they are not always zero cost if you consider the compile-time cost&lt;/a&gt;. Rust compiler, however, seems to be smarter and offers zero-cost abstractions in most cases with better developer experience which is an important factor. There could still be negligible overheads like array bound checks and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A zero-cost abstraction, like all abstractions, must actually offer a better experience than the alternative.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://twitter.com/withoutboats"&gt;Saoirse&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's see a small example to understand and appreciate the importance of this. We will compare a high-level language like Java to Rust for this. But you could technically take any other high-level language for the comparison and the results can be similar.&lt;/p&gt;

&lt;p&gt;Let's take the below Java program. Running &lt;a href="https://github.com/openjdk/jmh"&gt;JMH&lt;/a&gt; benchmark on it gives the performance numbers for each function and its added as comments inline&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Average  10.059 ns/op&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;factorialForLoop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Average  20.689  ns/op&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;factorialRecursive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorialRecursive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Average  23.457 ns/op&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;factorialStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;LongStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rangeClosed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
# Run complete. Total time: 00:02:30 (JDK 11)

Benchmark                  Mode  Cnt   Score    Error  Units
MyBenchMark.forLoop        avgt    3  10.059 ±  1.229  ns/op
MyBenchMark.recursive      avgt    3  20.689 ±  4.465  ns/op
MyBenchMark.stream         avgt    3  23.457 ± 32.424  ns/op
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, even though all three functions does the same job, they don't have similar performance. The one with the most abstractions, stream iterations, suffers the most. Now let's try the same three functions in Rust and run benchmarks using &lt;a href="https://github.com/bheisler/criterion.rs"&gt;Criterion&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Average  8.5858 ns/op&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;factorial_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Average  8.6150 ns/op&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;factorial_recursion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;factorial_recursion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Average 6.6387 ns/op&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;factorial_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
Benchmark                time:   [min       avg       max      ]
factorial_loop           time:   [8.4579 ns 8.5732 ns 8.7105 ns]
factorial_recursion      time:   [8.4394 ns 8.5074 ns 8.5829 ns]
factorial_iterator       time:   [6.4240 ns 6.4742 ns 6.5338 ns]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the performance is identical for iterative and recursive approach and it's even better for inbuilt abstractions (due to internal iterator optimizations and stuff).&lt;/p&gt;

&lt;p&gt;So in the case of Rust, it's even fair to say that abstractions provide better performance than hand-optimized code in many cases and at worst they provide the same performance at zero cost. If you look &lt;a href="https://godbolt.org/z/v593nhKoh"&gt;into the assembly code generated&lt;/a&gt; by different flavors, in many cases, you can see the compiler produces the same assembly code.&lt;/p&gt;

&lt;p&gt;This gives us the power not to think about writing the most optimal code and instead focus on writing the most readable and reusable code. This doesn't mean that anything in Rust is zero-cost abstractions. You can always end up writing code that does unnecessary computations and such which adds to the cost but at least it will be obvious.&lt;/p&gt;

&lt;p&gt;Some of the most notable zero-cost abstractions in Rust are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ownership and borrowing&lt;/li&gt;
&lt;li&gt;Iterator and closure APIs&lt;/li&gt;
&lt;li&gt;Async/await and Futures&lt;/li&gt;
&lt;li&gt;Unsafe and the module boundary&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fearless-concurrency"&gt;
  &lt;/a&gt;
  Fearless concurrency
&lt;/h3&gt;

&lt;p&gt;We already saw that Rust is thread-safe so technically you can do all sorts of &lt;a href="https://deepu.tech/concurrency-in-modern-languages-rust/"&gt;concurrency implementations&lt;/a&gt; in Rust without worries. Rust supports multithreading, green threads, parallel computing, and asynchronous programming either as first-class citizens or via crates like Tokio or Futures.&lt;/p&gt;

&lt;p&gt;The first realistic &lt;a href="https://github.com/kdash-rs/kdash"&gt;app I built&lt;/a&gt; in Rust is extremely concurrent and asynchronous and I'm yet to encounter any issues related to concurrency and Rust promises that I'll never encounter data race issues even though I share state between multiple threads doing asynchronous operations. Honestly, I won't be comfortable doing the same in any other language that I'm used to, maybe to an extend in Go as it's &lt;a href="https://deepu.tech/concurrency-in-modern-languages-go/"&gt;quite good when it comes to concurrency&lt;/a&gt; as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-tooling-amp-ecosystem"&gt;
  &lt;/a&gt;
  Community, Tooling &amp;amp; Ecosystem
&lt;/h3&gt;

&lt;p&gt;Rust has hands down, one of the best &lt;a href="https://www.rust-lang.org/community"&gt;communities&lt;/a&gt; around, in my opinion. It doesn't have the politics of Java or the bloat of JavaScript (yet 😉). Rust didn't shy away from copying good things from other languages like package management from JavaScript, language features from Haskell, OCaml, Ruby, JavaScript, and so on.&lt;/p&gt;

&lt;p&gt;That diversity is visible in the community as well. You can see people with all sorts of backgrounds and an extremely welcoming and friendly community. Strangely the &lt;a href="https://users.rust-lang.org/"&gt;Rust community forum&lt;/a&gt; is more active than its stack overflow community and that says a lot. You will find people helping you and guiding you rather than being gatekeepers.&lt;/p&gt;

&lt;p&gt;Rust also guarantees backward compatibility while still improving the language constantly and has a tooling and library ecosystem that keeps up. The Rust library ecosystem feels similar to that of JavaScript and gives you the NPM vibes.&lt;/p&gt;

&lt;p&gt;The tooling is just amazing, rustc, rustup, and cargo are standard and there are tons of plugins like Clippy, rustfmt, and so on. Cargo acts as the build runner, package manager, plugin manager, and so on. It all feels well integrated and results in a great developer experience. There are some rough edges from time to time but is still way ahead of many other languages with an even longer history.&lt;/p&gt;

&lt;p&gt;Rust also provides one of the best documentation around. It is even included in the standard toolchain via the &lt;code&gt;rustup docs&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Many other smaller things in Rust is awesome, I'm just skipping them for high-level stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-still-dont-like-about-rust"&gt;
  &lt;/a&gt;
  What I still don't like about Rust
&lt;/h2&gt;

&lt;p&gt;These were the things I originally didn't like about Rust and while I haven't changed my mind on how I feel about many of these, some of these make more sense to me now. But that doesn't mean I have to like them right. Read my &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;original post&lt;/a&gt; if you want more context on these.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h3&gt;

&lt;p&gt;It seems like the complexity of the language only keeps on increasing at one end, with new language features, while some things are being simplified at the other end and I'm a bit torn about this, to be honest.&lt;br&gt;
I do like many features it provides and my issue about having many ways to do the same thing doesn't seem like a big deal now that I understand the zero-cost abstractions in Rust. But once you step into advanced generics, traits, lifetimes and so on it quickly becomes mind-boggling and I can relate to newcomers as there is a steep learning curve.&lt;/p&gt;

&lt;p&gt;While I understand that this complexity is required and most of the time worth it, given the benefits of ownership, it's hard not to yearn for a bit more simplicity. Hopefully, future versions will evolve to simplify a lot of these 🤞&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shadowing-of-variables-in-the-same-context"&gt;
  &lt;/a&gt;
  Shadowing of variables in the same context
&lt;/h3&gt;

&lt;p&gt;This makes more sense to me now and I end up using this a lot. With the ownership mechanism, you often have to rebind, create temporary intermediates or get value from option or transforms value so this is useful but my point about this being abused is quite true as well.&lt;br&gt;
There were few instances where I ended up using the same name for different content with the same type in the same context giving me an unexpected result. It didn't cause any major issues but did affect readability and logic sometimes. So probably it would have been fine without this feature as well. However, with &lt;a href="https://rust-lang.github.io/rust-clippy/rust-1.51.0/index.html#shadow_reuse"&gt;Clippy&lt;/a&gt;, it's possible to add a lint rule to disallow this so it's good enough I guess.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions-are-not-firstclass-citizens"&gt;
  &lt;/a&gt;
  Functions are not first-class citizens
&lt;/h3&gt;

&lt;p&gt;Well, turns out they are first-class citizens but it's just that functions in Rust are very complex. I understand the whys and hows and they make sense. But I would still prefer if this was more streamlined at least with some syntax sugars. But it's not a big deal and is more of a nitpick now&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-implementation-of-traits"&gt;
  &lt;/a&gt;
  Implicit implementation of traits
&lt;/h3&gt;

&lt;p&gt;After using Rust this makes sense and I like the way Rust does it much more than Go, for example. So this is no longer an issue for me 😸&lt;/p&gt;

&lt;p&gt;Also, the nitpicks I had in my original post no longer bothers me 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rust-is-the-future"&gt;
  &lt;/a&gt;
  Rust is the future
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Rust, not Firefox, is Mozilla's greatest industry contribution&lt;/p&gt;

&lt;p&gt;TechRepublic&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, first of all, let me say I'm falling in love with the language. So maybe my opinions have a small bias. I haven't had this much fun programming in years. There is a weird feeling of satisfaction that you get when writing code in Rust. Now I understand why Rust is the most loved language for 5 years in a row from the &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;Stack Overflow developer survey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don't get me wrong. Rust is not a silver bullet as there are issues like the steep learning curve and complexity and so on. But it's the closest thing to a silver bullet in my opinion. That doesn't mean I'll just start using Rust for everything. I still enjoy being a polyglot developer and I'm still invested in Java, JS/TS, and Go among others. But if the use case requires speed and or concurrency or building system tools or CLIs, then I will be giving Rust the first preference, and maybe Go will take a backseat as there isn't any advantage that Go brings over Rust for similar use cases.&lt;/p&gt;

&lt;p&gt;Normally a language would offer a choice between safety, speed, and high-level abstractions. At the very best you can pick two of those. For example with Java/C#/Go you get the safety and high-level abstractions at the cost of a runtime overhead whereas C++ gives you speed and abstractions at the cost of safety. But Rust offers all three and a good developer experience as a bonus.&lt;/p&gt;

&lt;p&gt;As our IT landscape is getting more complex and resource-hungry this combination matters a lot. Rust looks and feels like a general-purpose high-level language yet offers performance and memory efficiency of a low-level systems language. So this could be the &lt;a href="https://www.rust-lang.org/what/"&gt;general purpose language&lt;/a&gt; that doesn't make compromises and doesn't require a runtime and is cross-platform and is not as hard as C/C++. What is not to love here?&lt;/p&gt;

&lt;p&gt;Due to these unique characteristics, Rust is getting a foothold not just in systems programming but also in areas currently dominated by high-level languages like web applications, microservices, and CLI tools. It's also getting more and more popular as a web-assembly language due to its light footprint and great &lt;a href="https://www.rust-lang.org/what/wasm"&gt;WASM support&lt;/a&gt;. It has also made its way into the &lt;a href="https://www.rust-lang.org/what/embedded"&gt;embedded/IoT&lt;/a&gt; world. There are many more use cases like serverless, &lt;a href="https://deno.land/"&gt;JS runtime&lt;/a&gt;, game engines, game dev, Operating Systems, and even &lt;a href="https://threatpost.com/buer-malware-loader-rewritten-rust/165782/"&gt;malwares&lt;/a&gt; 🤦&lt;/p&gt;

&lt;p&gt;Rust is rapidly gaining popularity. That's impressive given its just 5 years old. Big names like Microsoft, Google, Apple, Amazon, and Facebook are already &lt;a href="https://foundation.rust-lang.org/members/"&gt;invested&lt;/a&gt; in Rust and are making plans to replace C/C++ code with Rust. It will not be overnight but slowly Rust is going to replace a lot of those codes. Even Linux, the poster child of C, recently &lt;a href="https://www.zdnet.com/article/linus-torvalds-on-where-rust-will-fit-into-linux/"&gt;approved the use of Rust in some parts of the kernel&lt;/a&gt;, like driver code and so on.&lt;/p&gt;

&lt;p&gt;Unlike many general-purpose languages, which are not appropriate for some use cases due to the tradeoffs they make, Rust is uniquely positioned to work across the spectrum without any major disadvantage and be the general-purpose language for any use case, from client-side to systems programming.&lt;/p&gt;

&lt;p&gt;C/C++ and Go might be the ones to be displaced most in the short term by Rust in my opinion. I think Java/JS/TS/Python etc are safe for a long while due to their massive presence in large-scale applications and due to the migration cost.&lt;/p&gt;

&lt;p&gt;I would finish off by saying this: You won't appreciate Rust unless you spend few weeks building something in it. The initial steep learning curve could be frustrating or challenging depending on how you see it, but once past that it's hard not to love it. It's a toddler with superpowers after all 💗&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://engineering.fb.com/2021/04/29/developer-tools/rust/"&gt;engineering.fb.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.techrepublic.com/article/rust-not-firefox-is-mozillas-greatest-industry-contribution/"&gt;www.techrepublic.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://threatpost.com/buer-malware-loader-rewritten-rust/165782/"&gt;threatpost.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.gartner.com/manjunath-bhat/2021/01/03/why-2021-will-be-a-rusty-year-for-system-programmers/"&gt;blogs.gartner.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust.html"&gt;benchmarksgame-team.pages.debian.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepu.tech/concurrency-in-modern-languages/"&gt;deepu.tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/linus-torvalds-on-where-rust-will-fit-into-linux/"&gt;www.zdnet.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/programming-language-rust-5-years-on-from-v1-0-heres-the-good-and-the-bad-news/"&gt;www.zdnet.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/zero-cost-abstractions/"&gt;boats.gitlab.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/ingeniouslysimple/rust-zero-cost-abstraction-in-action-9e4e2f8bf5a"&gt;medium.com/ingeniouslysimple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/deepu05/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>languages</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>Increase Developer Velocity by Removing Environment Bottlenecks</title>
      <author>Sam Allen</author>
      <pubDate>Fri, 07 May 2021 15:48:13 +0000</pubDate>
      <link>https://dev.to/allensam88/increase-developer-velocity-by-removing-environment-bottlenecks-48f7</link>
      <guid>https://dev.to/allensam88/increase-developer-velocity-by-removing-environment-bottlenecks-48f7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#remove-environment-bottlenecks"&gt;
  &lt;/a&gt;
  Remove Environment Bottlenecks
&lt;/h3&gt;

&lt;p&gt;We’ve all heard the phrase “time is money” and we intuitively know this statement to be true, but understanding just how much money is spent on labor can be a tricky thing to estimate. This is especially true with complex operations like software development.  Before I learned how to write code in React/Node JS, I was an industrial engineer for many years and spent time studying this topic at university.&lt;/p&gt;

&lt;p&gt;Industrial engineering is a systems-thinking discipline that is obsessed with figuring out how to optimize resources and improve processes to get the most out of a system. It borrows from other fields like economics, project management, mechanical engineering, and statistics, to name a few, and lies at the intersection between business operations and engineering.  Quality, Cost, Schedule, and Safety can all be measured and quantified with incremental improvements made across each category.&lt;/p&gt;

&lt;p&gt;These topics can be easy to grapple with when dealing with a consistent, repeatable process like a manufacturing assembly line, hospital queue, or restaurant. However, wrestling with non-standard operations like software development can be nebulous, abstract, and difficult to shove into a one-type-fits-all solution. But that doesn’t mean that we shouldn’t attempt to understand it.  Any attempt at understanding and gathering data is still incrementally better than remaining ignorant and relying on gut-intuition alone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;As I started to learn how to write software applications a couple years ago, I had high hopes of perhaps crossing my industrial engineering and project management skills into the realm of software.  Gradually, as I began to understand the Agile/Scrum approach, I realized it is challenging to estimate computer programming labor resources and it’s not a very good planning approach, especially in a start-up culture.&lt;/p&gt;

&lt;p&gt;You don’t have a blueprint, there are no bills of materials, there is no work breakdown structure or sequence of operations.  Instead, it’s better to deal with chunks of hazy ranges, like “well, it could take a day or two, but less than a week” and then iterate toward a solution, biting off smaller chunks at a time.  Precedence is still knowable in many cases and you can break the problem into smaller pieces, but estimating how long it will take is not really worth figuring out because it doesn’t help you gain any ground toward solving the problem. Time estimation is purely an administrative task that will need to be repeated ad infinitum because no two tickets are ever the same.&lt;/p&gt;

&lt;p&gt;Software development can have many unknowns which further complicates any attempts at labor estimation.  The ‘Johari Window’ is a method for identifying known or unknown knowledge that a person and their surrounding organization may possess. Some things fall into the ‘known-unknown’ category which means you need to research something that you don’t know yet. But even worse, the ‘unknown-unknown’ realm often crops up, which is to say that you have no idea what is going on until you dive in and start to uncover hidden things.&lt;/p&gt;

&lt;p&gt;In software development, especially when trying something new and novel—like in a startup—there are many unknowns.  Pioneering into uncharted areas takes an extra amount of time and effort when building a greenfield product, fixing bugs, doing user research, discovering go-to-market fit, and so on.  As a company matures, some software development and ticket refinement might approach a stable steady-state, but in many cases, if the company continues to innovate, there will always be many unknowns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;So what are we supposed to do?  We know that software development labor is costly, and in fact, is often the top operating cost for a tech company. It’s important to investigate and attempt to understand how labor is allocated so we can begin to feel more confident about what we are willing to build or not.  There are important decisions that many managers face: should we build something in-house using our own labor resources?  Or can we get something off-the-shelf that can be customized to fit our needs?  It would also be good to know whether a manager’s most precious resource is blocked with bottlenecks and being under- or over-utilized.  Having a rough understanding of your labor resources can help make this type of decision much easier.&lt;/p&gt;

&lt;p&gt;One of the best ways to understand a complex system is to model it.  We see this all the time when we watch the weather report on the news when the reporter stands in front of a weather map and gives a rough forecast using a computer simulation.  Statistical modeling is now used in a variety of complex industries to make planning forecasts with many different input variables.&lt;/p&gt;

&lt;p&gt;It’s important to know that a model is just that: a simulation, a mock-up, an imaginary scenario.  It’s not real, just ask Morpheus in the Matrix.  Every statistical model relies heavily upon baseline assumptions and measured, knowable, controlled inputs that can be adjusted for a range of possible outcomes.  The more data you have, the more reliable the model becomes, but it has to start somewhere with a simplified version of reality broken up into discrete events built upon statistical averages.  &lt;/p&gt;

&lt;p&gt;So what are some of the safe assumptions we can make about a typical tech startup?  First, we would want to add boundaries to our system.  We can fix the number of employees and their typical working hours.  Tickets tend to vary widely, but it is possible to make different ticket types broken down into difficulty levels.  Let’s say the easy ones are half a day, while the tougher ones might take a week.  We also know the number of environments we have available for testing our code.  These might be custom built, maybe there are 2 or 3.&lt;/p&gt;

&lt;p&gt;Some other knowable assumptions might be how long it takes to deploy our code to production and whether a certain amount of tickets will need rework after QA testing, let’s say 25%.  It’s rather arbitrary, but in the absence of solid data, we can plug in some intuitive anecdotal numbers to start with.  If you hold all things consistent, but only adjust one variable at a time, then you can begin to compare the results to uncover any major bottlenecks in the system.  Models are a simplified version of reality, so we start really simply.  To use a crude example, we could simulate 5 farmers working 8 hrs/day in a 500 acre field using 3 tractors, record what happens, then run it again with only 2 tractors instead for comparison.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simulation-results"&gt;
  &lt;/a&gt;
  Simulation Results
&lt;/h3&gt;

&lt;p&gt;In this blog post, we will share the end results of our analysis. For a full detail of the simulation setup and results, you can download our free &lt;a href="https://releasehub.com/whitepaper"&gt;whitepaper&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Key takeaway: If we increase the number of available environments to 5 while keeping all other variables consistent, we saw the simulated throughput went up to 132 tickets, a 35% increase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After running the baseline setup with only a single staging environment, we can see the team can complete 98 tickets, but more importantly, we can identify a major bottleneck as 32 tickets are piled up waiting for a test environment resource. If we increase the number of available environments to 5 while keeping all other variables consistent, we saw the simulated throughput went up to 132 tickets, a 35% increase. The bottleneck has also been eliminated and there are even a few surplus environments available.&lt;/p&gt;

&lt;p&gt;Again, to read the full results and analysis, be sure to download the free &lt;a href="https://releasehub.com/whitepaper"&gt;whitepaper&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>agile</category>
    </item>
    <item>
      <title>5 Reasons Tailwind might not be the right choice. (WDS #1)</title>
      <author>Blake Campbell</author>
      <pubDate>Fri, 07 May 2021 15:47:33 +0000</pubDate>
      <link>https://dev.to/blaketweeted/5-reasons-tailwind-might-not-be-the-right-choice-wds-1-26hc</link>
      <guid>https://dev.to/blaketweeted/5-reasons-tailwind-might-not-be-the-right-choice-wds-1-26hc</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer this is 100% satire. For fun on a Friday (Web Dev Satire #1)&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-the-license-is-too-controlling"&gt;
  &lt;/a&gt;
  1) The license is too controlling
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz367i4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brvprqg1kddu4vs9ub2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz367i4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brvprqg1kddu4vs9ub2v.png" alt="Screen Shot 2021-05-07 at 11.16.35 AM"&gt;&lt;/a&gt;&lt;br&gt;
  The fact I have to sign a blood contract to use Tailwind is baffling. I'm hoping this is fixed in a future release. Until then, I'm trying to skate by, but Adam Wathan keeps calling me.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-readability"&gt;
  &lt;/a&gt;
  2) Readability
&lt;/h1&gt;

&lt;p&gt;My vision is pretty good with my glasses, but Tailwind's docs' most recent update recommends not looking at your code. Instead, you need to feel your code through your fingertips. I keep trying, but every time I look up, my code is a mess. It's not my fault. It's Tailwinds.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#3-not-enough-support"&gt;
  &lt;/a&gt;
  3) Not enough Support
&lt;/h1&gt;

&lt;p&gt;The TailwindUI team is not putting out too enough content. Components for React &amp;amp; Vue. What about components for AngularJS 1.X? Not to mention it doesn't support currently support Netscape browser, the largest browser of 1996. There are no plans to support Netscape in the future. It's disappointing.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-tailwind-is-forcing-me-to-use-it"&gt;
  &lt;/a&gt;
  4) Tailwind is forcing me to use it
&lt;/h1&gt;

&lt;p&gt;Despite how much I &lt;strong&gt;hate&lt;/strong&gt; Tailwind. I have to use it; there are no alternatives out there. If only some way I could use some other sort of styling. I'd name it CSS, Cascading Style Sheets; it would be revolutionary. Alas, there is nothing else I can use. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#5-there-arent-enough-articles-bashing-tailwind"&gt;
  &lt;/a&gt;
  5) There aren't enough articles bashing Tailwind.
&lt;/h1&gt;

&lt;p&gt;Every article I see about Tailwind is by people who completely understand it and love it. Where are all the naysayers? Its clear Tailwind is brainwashing developers. They won't get me and my tinfoil hat anytime soon.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;In case it isn't clear by now, this is satire! Web Dev has gotten so full of uninformed opinions, I thought I'd poke some fun. To the Tailwind team, you're great. To the people who hate Tailwind, cool. Happy Friday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 10</title>
      <author>David Tetreau</author>
      <pubDate>Fri, 07 May 2021 15:04:40 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-10-546c</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-10-546c</guid>
      <description>&lt;p&gt;For Part 10, we are going to learn about loops. Loops are extremely important because they can make code run as many times as you need them to, and they allow you to set conditions to make this happen. There are several types of loops. We will be discussing them all over the next several posts. Like functions, there is a lot to them. Open up your repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  For Loop
&lt;/h2&gt;

&lt;p&gt;"For loops" generally use three expressions that determine how many times they will run. However, these expressions are optional. Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;looped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the loop ran&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;looped&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the string with each iteration&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The terms we give those expressions in the parenthesis are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice in the first example that we did the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;initialized a variable called "looped" and assigned a string to it.&lt;/li&gt;
&lt;li&gt;used a "for loop" with three expressions in it.&lt;/li&gt;
&lt;li&gt;wrote the three expressions inside of the parenthesis which consisted of a variable named "i" equal to 0 (initialization), a condition which determines how many times the loop runs (condition), an expression which increments the variable. (post-expression).&lt;/li&gt;
&lt;li&gt;logged the value saved to the "looped" variable to the console every time the code block runs. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Try to change the three statements inside the parenthesis in the "for loop" and see what happens. Try to use different data types other than strings. Now, try the accumulator pattern like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern adds every number from 1 to 100 and accumulates the total in the variable. The loop runs while the variable "i" is less than or equal to 100. &lt;/p&gt;

&lt;p&gt;You can also use a for loop to iterate over an array. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;primeNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This logs the values in the array individually every time the loop runs. This happens inside the code block when primeNumbers[i] is logged every time the loop runs. The value of "i" changes every time the loop runs because "i" is incremented. It is like logging the value located at the indexes primeNumbers[0], primeNumbers[1], primeNumbers[2], primeNumbers[3], etc. The expression in the middle of the parenthesis (the second expression) determines how long the loop will run. In this particular instance, the loop will run while the variable "i" is less than the length of the array (primeNumbers.length). Every time the loop runs, the third expression increases "i" by one. If you want to see this in action look below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//logs 0, 1, 2, 3, 4&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happened in this example is that the value assigned to "i" increased every time the loop ran. When the code inside the brackets ran, it logged the current value of "i". Since the condition is at the beginning of the loop, as long as the condition is true before the loop runs, it will run again until the second expression is no longer true. Notice that the numbers that were logged started with 0. This is because as soon as the loop got to the point that the condition was true, it ran again. Take some time to do some variations of all of these examples of "for loops" and come up with some of your own. &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easily sort imports and remove unused declarations on each save in VS Code</title>
      <author>Damir Drempetić</author>
      <pubDate>Fri, 07 May 2021 15:03:55 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/easily-sort-imports-and-remove-unused-declarations-on-each-save-in-vs-code-35k1</link>
      <guid>https://dev.to/bornfightcompany/easily-sort-imports-and-remove-unused-declarations-on-each-save-in-vs-code-35k1</guid>
      <description>&lt;p&gt;All this time I was using VSCode formatting on save which triggers the selected default formatter (&lt;code&gt;Prettier&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Also I was organizing and sorting my imports manually all the time. Or in other words, I didn’t. So foolish… &lt;/p&gt;

&lt;p&gt;Because it couldn’t be more simpler to enable it without installation of any additional &lt;code&gt;ESLint&lt;/code&gt; or &lt;code&gt;Prettier&lt;/code&gt; plugins. Of course, I’m assuming you already have &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; VS Code extensions because they are a must have for any JavaScript project.&lt;/p&gt;

&lt;p&gt;Just add the following to your VS Code settings.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.fixAll"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.organizeImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.sortMembers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;fixAll&lt;/code&gt; is not necessary for this case but could be useful too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fixAll property turns on Auto Fix for all providers including ESLint, docs: &lt;a href="https://github.com/microsoft/vscode-docs/blob/efa17ec71d755cf14c4722c7d05d10c538cb0e97/release-notes/v1_41.md#eslint"&gt;https://github.com/microsoft/vscode-docs/blob/efa17ec71d755cf14c4722c7d05d10c538cb0e97/release-notes/v1_41.md#eslint&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🚀 Voilà, while having all these enabled in your settings, VS Code will &lt;strong&gt;automatically&lt;/strong&gt; on each file save:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run code formatting with default formatter&lt;/li&gt;
&lt;li&gt;sort imports&lt;/li&gt;
&lt;li&gt;remove all unused declarations&lt;/li&gt;
&lt;li&gt;run ESLint auto fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's always nice when you don't need to take care of these things manually, right? 😎 🤖&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>eslint</category>
      <category>prettier</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Resumo: Código Limpo - Capítulo 1: Código Limpo</title>
      <author>Jessica Valeska da Silva</author>
      <pubDate>Fri, 07 May 2021 14:52:56 +0000</pubDate>
      <link>https://dev.to/jvaleskasilva/resumo-codigo-limpo-capitulo-1-codigo-limpo-g8j</link>
      <guid>https://dev.to/jvaleskasilva/resumo-codigo-limpo-capitulo-1-codigo-limpo-g8j</guid>
      <description>&lt;p&gt;O &lt;em&gt;"Código Limpo - Habilidades Práticas do Agile Software"&lt;/em&gt; é um livro escrito por Robert C. Martin, também conhecido como Uncle Bob, onde nos oferece muitas ferramentas e técnicas que auxiliam na criação de nossos projetos.&lt;/p&gt;

&lt;p&gt;Então resolvi criar essa série de breves resumos sobre os capítulos dessa leitura tão importante para nós, pessoas desenvolvedoras.&lt;/p&gt;

&lt;p&gt;Começaremos, obviamente, pelo primeiro capítulo denominado &lt;strong&gt;Código Limpo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O código sempre existirá, é com ele que expressamos de maneira detalhada as especificações dos requisitos para que o projeto ganhe vida (olha que forte!).&lt;/p&gt;

&lt;p&gt;Ótimo, nos expressamos através dos códigos, mas qual é a ideia passada nesse capítulo? Para entender precisamos saber o que é um código ruim (porque sim, podemos nos expressar mal).&lt;/p&gt;

&lt;p&gt;Um código ruim é aquele que quando você abre o fonte e a única coisa que passa pela sua cabeça é: DESESPERO!&lt;/p&gt;

&lt;p&gt;Sabe aquele código todo bagunçado, mal indentado, desorganizado? Então, é esse mesmo. Pensa só como seria difícil e custoso dar manutenção nisso, ou pior, mover ou apagar uma linha e o sistema todo não funcionar mais.&lt;/p&gt;

&lt;p&gt;O meu código confuso pode te atrasar e vice-versa. A rapidez se constrói com bons códigos para que a manutenção seja mais rápida e menos custosa.&lt;/p&gt;

&lt;p&gt;Tá, podemos culpar a pressa, mas e a nossa culpa? Sim, Tio Bob falou que a culpa é toda nossa, e é mesmo, porque somos detentores do conhecimento e precisamos fazer com que os requisitos se encaixem no sistema da melhor maneira possível. Ele enfatiza:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A &lt;em&gt;única&lt;/em&gt; maneira de isso não acontecer - a única maneira de ir rápido - é sempre manter o código limpo"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nossa maior responsabilidade como pessoas desenvolvedoras é saber nos comunicarmos de maneira fácil com os nossos leitores (sim, somos autores) através dos nossos códigos bem escritos (a escrita tem que ser fácil também) e com as manutenções, deixá-lo o mais limpo do que antes. A ideia é o código estar em constante evolução. &lt;/p&gt;

&lt;p&gt;É isso, esse é o primeiro resumo desse livro que vai mudar muito com a nossa maneira de pensar sobre código, em breve teremos novos artigos dos próximos capítulos.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Without JSX</title>
      <author>mrwolferinc</author>
      <pubDate>Fri, 07 May 2021 14:50:36 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/react-without-jsx-350i</link>
      <guid>https://dev.to/mrwolferinc/react-without-jsx-350i</guid>
      <description>&lt;p&gt;&lt;strong&gt;JSX is not a requirement for using React.&lt;/strong&gt; Using React without JSX is especially convenient for when you don't want to set up compilation in your build environment.&lt;/p&gt;

&lt;p&gt;This tutorial will show you how to use React without JSX. It will also show you how code written in JSX is converted to plain JavaScript.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-is-jsx"&gt;
  &lt;/a&gt;
  What is JSX?
&lt;/h1&gt;

&lt;p&gt;Consider the following variable declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This strange tag syntax is neither a string nor HTML.&lt;/p&gt;

&lt;p&gt;It is JSX, and it is a syntax extension to JavaScript. It is recommended to use it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#converting-to-javascript"&gt;
  &lt;/a&gt;
  Converting to JavaScript
&lt;/h1&gt;

&lt;p&gt;Each JSX element is just syntactic steroids for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;. This means that any code written in JSX can also be written in plain JavaScript.&lt;/p&gt;

&lt;p&gt;For example, this code is written in JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, $&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWhat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Hello&lt;/span&gt; &lt;span class="na"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be compiled to this code that does not use JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are curious to see more examples of how JSX is converted to JavaScript, you can try out the &lt;a href="https://babeljs.io/repl/#?presets=react&amp;amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA"&gt;online Babel compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The component can either be provided as a string, as a subclass of &lt;code&gt;React.Component&lt;/code&gt;, or a plain function.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#shorthands"&gt;
  &lt;/a&gt;
  Shorthands
&lt;/h1&gt;

&lt;p&gt;If you get tired of typing &lt;code&gt;React.createElement&lt;/code&gt; so much, one common pattern is to assign a shorthand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use a shorthand form for &lt;code&gt;React.createElement&lt;/code&gt;, it can almost be as convenient to use React without JSX.&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>RECT basics</title>
      <author>Emran H Khan</author>
      <pubDate>Fri, 07 May 2021 14:46:29 +0000</pubDate>
      <link>https://dev.to/emranhkhan/rect-basics-510l</link>
      <guid>https://dev.to/emranhkhan/rect-basics-510l</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is React:&lt;/strong&gt; React is JavaScript library created by Facebook. It is tool for building UI components. React doesn't manipulate the browser's DOM directly, instead it creates copy of the DOM and save it in memory. This copied DOM is generally known as the 'VIRTUAL DOM'. React then finds out what changes have been made, and changes only that part in the DOM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills to learn React:&lt;/strong&gt;&lt;br&gt;
    1. HTML &amp;amp; CSS&lt;br&gt;
    2. JSX&lt;br&gt;
    3. Fundamental of JavaScript and ES6&lt;br&gt;
    4. Package manager (Node+Npm)&lt;br&gt;
    5. Git and CLI &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Render Function:&lt;/strong&gt; React renders HTML to web page by using a function called ReactDOM.render(). This function takes two arguments, HTML code and HTML element. The purpose of this function is to display the specified HTML code inside the specified element.&lt;/p&gt;

&lt;p&gt;Display a span inside the 'root' element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.render(&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is displayed in the &lt;code&gt;&amp;lt;div id='root'&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;div id='root'&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML code here uses JSX which allows you to write HTML tags inside the JavaScript code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSX:&lt;/strong&gt; JSX stands for JavaScript XML. It allows us to write HTML in React. JSX converts the HTML into react elemts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With JSX:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement: &amp;lt;h1&amp;gt;Learning JSX!&amp;lt;/h1&amp;gt;
ReactDOM.render(newElement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Without JSX:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement = React.createElement('h1', {}, 'Not using JSX');
ReactDOM.render(newElement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is clearly seen from the above example, it is far more easier to write JSX which eventually transpile our HTML to JavaScript at runtime.&lt;/p&gt;

&lt;p&gt;Expression can be written in JSX using the curly braces {}.&lt;br&gt;
And to write multiple HTML lines you have to put parentheses around the HTML and wrap everything in a single Top level element.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement = (
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;I am a header.&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt; I am a paragraph.&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component:&lt;/strong&gt; A component is an independent, reusable code block which divides the UI into smaller pieces. A functional component is basically a JavaScript/ES6 function that returns a React element(JSX). It needs to exported to be used later in somewhere else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Welcome = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;
}

export default Welcome;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to use it we need to import it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Welcome from './Welcome';

const App = () =&amp;gt; {
  return(
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Welcome /&amp;gt;
    &amp;lt;div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Props:&lt;/strong&gt; Props is short for properties ant they are used to pass data between React components. React's data flow between components is uni-directional (from parent to child only);&lt;br&gt;
For example, if you want to pass something from app to component you have to pass it like an attribute with suitable name.&lt;br&gt;
Here, I am passing 'name' from the App component to Welcome component. If you need to pass data dynamically just use the curly braces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Welcome from './Welcome';

const App = () =&amp;gt; {
  return(
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Welcome name="Justin" /&amp;gt;
    &amp;lt;div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in the Welcome component we will get the data in the 'props'.&lt;br&gt;
And we can use it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Welcome = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;Hello {props.name}!&amp;lt;/h1&amp;gt;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;State:&lt;/strong&gt; React has another special built-in object called state, which allows components to create and manage their own data. So unlike props, components cannot pass data with state, but they can create and manage it internally.&lt;br&gt;
React components are rendered (with state) based on the data in the state. State holds the initial information. So, when state changes, React gets informed and immediately re-renders the part of the DOM which actually needs to be changed. There is method called 'setState' which triggers the re-rendering process for the updated parts. React gets informed, knows which parts to change, and does it quickly without re-rendering the whole DOM.&lt;br&gt;
In functional components, with the help of React Hooks we can use this 'state'.&lt;br&gt;
We will implement a simple counter using React's useState hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

function Counter() {
  // Set the initial count state to zero, 0
  const [count, setCount] = useState(0);

  // Create handleIncrement event handler
  const handleIncrement = () =&amp;gt; {
    setCount(prevCount =&amp;gt; prevCount + 1);
  };

  //Create handleDecrement event handler
  const handleDecrement = () =&amp;gt; {
    setCount(prevCount =&amp;gt; prevCount - 1);
  };
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;h5&amp;gt;Count is {count}&amp;lt;/h5&amp;gt;
        &amp;lt;button onClick={handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(0)}&amp;gt;Reset&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default Counter;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use this component is the App.js like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import Counter from "../Counter";

export default function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Counter/&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;useEffect:&lt;/strong&gt; A functional React component uses props and/or state to calculate the output. If the functional component makes calculations that don’t target the output value, then these calculations are named side-effects.&lt;/p&gt;

&lt;p&gt;useEffect() hook accepts 2 arguments:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useEffect(callback[, dependencies])&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;callback is the callback function containing side-effect logic. &lt;code&gt;useEffect()&lt;/code&gt; executes the callback function after React has committed the changes to the screen.&lt;/p&gt;

&lt;p&gt;dependencies is an optional array of dependencies. &lt;code&gt;useEffect()&lt;/code&gt; executes callback only if the dependencies have changed between renderings.&lt;br&gt;
Put your side-effect logic into the callback function, then use the dependencies argument to control when you want the side-effect to run. That’s the sole purpose of &lt;code&gt;useEffect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Events:&lt;/strong&gt; Just like HTML, React can perform actions based on user events. Reach has the same events as HTML: click, change, mouserover etc.&lt;br&gt;
React events are written in camelCase sytax: &lt;code&gt;onClick&lt;/code&gt; instead of &lt;code&gt;onclick&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

function shoot() {
  alert("Great Shot!");
}

const myelement = (
  &amp;lt;button onClick={shoot}&amp;gt;Take the shot!&amp;lt;/button&amp;gt;
);

ReactDOM.render(myelement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to pass an argument in the event handler, then you have to wrap the handler into an anonymous arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

function shoot(condition) {
  if (condition) {
    alert("Great Shot!");
  }
  alert("Keep going on");
}

const myelement = (
  &amp;lt;button onClick={() =&amp;gt; shoot(true)}&amp;gt;Take the shot!&amp;lt;/button&amp;gt;
);

ReactDOM.render(myelement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;React CSS:&lt;/strong&gt; To style an element with the inline style attribute, the value must be a JavaScript object. Properties with two name, like &lt;code&gt;background-color&lt;/code&gt;, must be written in camel case syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyHeader = () =&amp;gt; {
  return (
      &amp;lt;div&amp;gt;
      &amp;lt;h1 style={{color: "white", backgroundColor: 'black'}}&amp;gt;Hello Style!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Add a little style!&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also create an object with styling information, and refer it in the style attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myStyle = {
  color: "white", 
  backgroundColor: 'black'
}

const MyHeader = () =&amp;gt; {
  return (
      &amp;lt;div&amp;gt;
      &amp;lt;h1 style={myStyle}&amp;gt;Hello Style!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Add a little style!&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Glassmorphism Login Form With HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 07 May 2021 14:24:43 +0000</pubDate>
      <link>https://dev.to/nikhil27b/glassmorphism-login-form-with-html-css-2k0l</link>
      <guid>https://dev.to/nikhil27b/glassmorphism-login-form-with-html-css-2k0l</guid>
      <description>&lt;p&gt;Today I created a Glassmorphism Login form with HTML &amp;amp; CSS. this login form is very simple but looks good I use the Glassmorphism effect to create this login form. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/MWpYEzj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introducing... My New Site! ✨</title>
      <author>George Francis</author>
      <pubDate>Fri, 07 May 2021 14:20:04 +0000</pubDate>
      <link>https://dev.to/georgedoescode/introducing-my-new-site-5g8g</link>
      <guid>https://dev.to/georgedoescode/introducing-my-new-site-5g8g</guid>
      <description>&lt;p&gt;Check out the site here! &lt;a href="https://georgefrancis.dev/"&gt;https://georgefrancis.dev/&lt;/a&gt; 👀&lt;/p&gt;




&lt;p&gt;Hey! How's it going? I've been a little quiet on DEV recently, but... I'm very happy to finally share why! 🎉&lt;/p&gt;

&lt;p&gt;Well, as you might have noticed from the big ol' title/URL above, I have launched my very own site! As much as I love DEV 💛, and think it's a fantastic place to publish, I have found myself wanting a singular home for all of my CodePens, articles, and other bits and pieces — so I decided to build one. &lt;/p&gt;

&lt;p&gt;The site is built with &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;, hosted on &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, and is finished off with a healthy scoop of generative magic ✨ It features all of my past writing from DEV, and will be the best place to catch any new content from me going forward. &lt;/p&gt;

&lt;p&gt;Honestly, I could chat forever about the design process, tech stack, etc, &lt;em&gt;(and maybe I will someday)&lt;/em&gt; but for now, I'd just like to share the site with y'all! If you do have any specific questions, though, please do give me a shout. I'm always happy to chat.&lt;/p&gt;

&lt;p&gt;Anyway, now that the site is launched, I am starting to rattle through my ever-growing Trello list of article ideas, so expect some fresh new creative coding/generative art content from me soon 🎨&lt;/p&gt;

&lt;p&gt;In case you missed it up there ^ &lt;a href="https://www.georgefrancis.dev"&gt;here's a link to the site.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers! &lt;/p&gt;

&lt;p&gt;George 👀&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>css</category>
      <category>news</category>
    </item>
  </channel>
</rss>
