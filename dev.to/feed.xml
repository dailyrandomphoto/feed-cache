<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>21 Tax write offs for freelance web developers in Canada</title>
      <author>Sotariye</author>
      <pubDate>Mon, 10 Jan 2022 20:43:57 +0000</pubDate>
      <link>https://dev.to/sotariye/21-tax-write-offs-for-freelance-web-developers-in-canada-4p17</link>
      <guid>https://dev.to/sotariye/21-tax-write-offs-for-freelance-web-developers-in-canada-4p17</guid>
      <description>&lt;p&gt;You’ve put in hours of your time, done all the hard work — you’ve learned to code! Now you’re ready to reap the rewards and set off on your own as a freelance developer.&lt;/p&gt;

&lt;p&gt;There are major benefits to working freelance. You get to choose your working hours, clients, and your rate of pay. You can work all morning (or all night for that matter) or maybe only part-time. The world is your oyster. &lt;/p&gt;

&lt;p&gt;However, working freelance can make your tax situation a little complicated, to say the least. That’s why I created this list of tax-deductible expenses that you need to track if you want to keep more of the money you make. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gear and Equipment&lt;/strong&gt;&lt;br&gt;
You don’t need to splurge on super-expensive equipment, but the costs can still add up. Good thing your computer, keyboard, mouse, monitors and any other equipment you purchase are all tax-deductible expenses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Website Expense&lt;/strong&gt;&lt;br&gt;
How you brand yourself as a freelance developer can help you stand out from the crowd and an online portfolio website is a good place to start. Plus, you can write-off your website hosting and domain registration fees. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;&lt;br&gt;
From mock-up tools to project management software, there are a number of tools out there that can help you run your business more efficiently. If you decide to upgrade to the paid versions, you can write-off those monthly subscription fees. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Professional Services&lt;/strong&gt;&lt;br&gt;
Need to bring on a junior developer to support your client’s work? Any fees you pay to other professionals for advice or services related to your business can be written off. &lt;br&gt;
Payment Processing Fee&lt;br&gt;
Getting paid is great, but those pesky processing fees? Not so much. Fortunately, they’re also tax-deductible. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Professional Development&lt;/strong&gt;&lt;br&gt;
Whether you want to learn a new programming language or framework or develop a new skill, it’s important to invest in your professional development. Coding workshops, programming seminars, online courses and certifications, books and magazines that contribute to your education and development are all tax-deductible expenses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketing&lt;/strong&gt;&lt;br&gt;
From business cards to SEO website upgrades, even the best developers need to invest some funds into marketing their services. You can write off these costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Networking Event&lt;/strong&gt;&lt;br&gt;
Networking can get a bad rap but it’s still one of the best ways to connect with other professionals and meet with potential clients. If there’s a tech conference or meetup you’ve been dying to attend, remember that these expenses are tax-deductible!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#work-from-home"&gt;
  &lt;/a&gt;
  Work from home?
&lt;/h2&gt;

&lt;p&gt;As long as you have a good computer and solid internet connection, you can work from anywhere as a freelance developer—including your own home.&lt;/p&gt;

&lt;p&gt;If you do decide to work from home, there are quite a few deductions that you can take advantage of. Contrary to popular belief, you don’t need to have a full home office to claim these write-offs. Even if you only have space for a dedicated desk, you can claim business-use-of-home deductions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Utilities&lt;/strong&gt;&lt;br&gt;
Heating bills. Hydro bills. Water bills. We all gotta pay them, but if you work from home, you can write off a portion of your utility costs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internet&lt;/strong&gt;&lt;br&gt;
It’d be pretty tough to work as a freelance developer without the internet. That’s why you can write off a portion of these fees as well. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rent or Mortgage&lt;/strong&gt;&lt;br&gt;
While you can’t deduct all of your rent or mortgage payment, you can write-off a percentage of these expenses depending on how much of your home is used for your business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Property Taxes&lt;/strong&gt;&lt;br&gt;
Owning a home in Canada can be very expensive and very rewarding at the same time. Fortunately, if you work from home, you can claim a portion of your property tax bill as a write-off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Insurance&lt;/strong&gt;&lt;br&gt;
Do you pay for rental or homeowner insurance? You can write off a portion of these costs as home office write-offs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;&lt;br&gt;
Cleaning expenses, home repairs, snow removal... these are all tax-deductible expenses if you work from home. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phone&lt;/strong&gt;&lt;br&gt;
Do you use your phone for work? You can write off a portion of this monthly bill as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Home Office Expense&lt;/strong&gt;&lt;br&gt;
Most web developers sit at their desks for long periods of time, so creating an ergonomic workspace is pretty key. Office fixtures like a desk, office chair, and second desktop monitor are all tax-deductible purchases.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#meeting-with-clients"&gt;
  &lt;/a&gt;
  Meeting with clients?
&lt;/h2&gt;

&lt;p&gt;Imagine this scenario: a potential client is impressed with your website and has enjoyed chatting with you over the phone, and now they want to meet in person. You’re one step closer to winning their business. &lt;/p&gt;

&lt;p&gt;First impressions really count. While you’ll want to make sure you do your research beforehand, you also need to think about where you’ll be meeting them. Depending on your relationship with this client, you may not want to meet this person at your house or a neighbourhood coffee shop. &lt;/p&gt;

&lt;p&gt;Fortunately, there are a number of options you could explore. For instance, you could meet them at a local coworking space, book a meeting room for the day, or take them out for a meal at a nice restaurant. Whichever option you go with, remember that these expenses are also tax-deductible. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Office Rental&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Co-working space memberships, day passes and room booking fees are all expenses that can be written off. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Food and Drink&lt;/strong&gt;&lt;br&gt;
If you discuss work with a coworker, client, or even a friend at a restaurant, it's a write-off!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#travel-for-work"&gt;
  &lt;/a&gt;
  Travel for work?
&lt;/h2&gt;

&lt;p&gt;Think you don’t need to travel for work as a freelance developer? Think again. While developers can do the majority of their work from home or an office space, there will likely be times where you’ll need to meet with a client in person or attend a conference. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transportation&lt;/strong&gt;&lt;br&gt;
If you drive to meet with a client or coworker, or to attend a conference or out-of-town meet-up—you can claim car-related write-offs. These include expenses like gas, car maintenance, insurance and registration, parking, tolls, and the annual depreciation of your car.&lt;/p&gt;

&lt;p&gt;If you’re travelling out of the city or out of the country, airfare, train tickets and rental car fees can also be written off. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accommodations&lt;/strong&gt;&lt;br&gt;
When you travel for work, lodging expenses such as hotel rooms or Airbnb bookings are write-offs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Food and Drink&lt;/strong&gt; &lt;br&gt;
When you're travelling for work, all meals are tax-deductible. Even takeout.&lt;/p&gt;




&lt;p&gt;If you enjoyed reading this article, I write about all things business finance in Canada and you can find more more resources here. &lt;br&gt;
&lt;a href="https://www.betterwithbenji.com/"&gt;https://www.betterwithbenji.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>writing</category>
      <category>productivity</category>
    </item>
    <item>
      <title>WeakMap and WeakSet: Understanding JavaScript weak references</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 10 Jan 2022 20:39:50 +0000</pubDate>
      <link>https://dev.to/logrocket/weakmap-and-weakset-understanding-javascript-weak-references-1lo1</link>
      <guid>https://dev.to/logrocket/weakmap-and-weakset-understanding-javascript-weak-references-1lo1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/conermurphy/"&gt;Coner Murphy&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Weak references are not often used in JavaScript due to how the language is designed. However, in certain circumstances, they can prove vital, such as when developers must store additional data and need to automatically manage the memory usage.&lt;/p&gt;

&lt;p&gt;In this post, we’ll learn about these weak references in JavaScript and how we can use them by utilizing two objects within the language: &lt;code&gt;WeakMap&lt;/code&gt; and &lt;code&gt;WeakSet&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-strong-references"&gt;
  &lt;/a&gt;
  Understanding strong references
&lt;/h2&gt;

&lt;p&gt;Let’s start by taking a look at what a normal, or strong, reference is in JavaScript. In its simplest definition, a strong reference is a reference that keeps an object in memory. Let’s take a look at this in practice to understand what we are talking about:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;badger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [{ name: "badger" }]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By creating a variable as an object, we can place the object into an array and remove the reference to the original object from the variable we created by setting its value to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although we can’t access the object via the &lt;code&gt;dog&lt;/code&gt; variable anymore because there is a strong reference between the &lt;code&gt;pets&lt;/code&gt; array and the object, the object is kept in memory and can be accessed via &lt;code&gt;pets[0]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In other words, the strong reference prevents removing the object from memory via garbage collection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-weak-references"&gt;
  &lt;/a&gt;
  Understanding weak references
&lt;/h2&gt;

&lt;p&gt;Simply put a weak reference is a reference to an object that doesn’t prevent garbage collection if it is the only reference to the object in the memory.&lt;/p&gt;

&lt;p&gt;A normal reference (considered strong), would prevent the garbage collection of an object even if it is the only object referencing it; this isn’t the case for a weak reference.&lt;/p&gt;

&lt;p&gt;Let’s take this theory and put it into practice with the previous example of a strong reference and putting it into the context of a weak reference. Ignore the use of &lt;code&gt;WeakMap&lt;/code&gt; right now; we will explain this in more depth later in the article. For now, let’s see weak reference behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;badger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;okay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// WeakMap{ {...} -&amp;gt; "Okay" } &amp;lt;= dog set to the WeakMap&lt;/span&gt;

&lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Overwrite the reference to the object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// WeakMap(0) &amp;lt;= dog has been garbage collected.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By utilizing &lt;code&gt;WeakMap&lt;/code&gt; and the weak references that come with it, we can see the differences between the two types of references in action. While the strong (normal) reference to the original &lt;code&gt;dog&lt;/code&gt; object still exists, the &lt;code&gt;dog&lt;/code&gt; object persists in the &lt;code&gt;WeakMap&lt;/code&gt;, and we can access it with no issues.&lt;/p&gt;

&lt;p&gt;But, when we overwrite the reference to the original &lt;code&gt;dog&lt;/code&gt; object by reassigning the variable to &lt;code&gt;null&lt;/code&gt;, the only reference to the original object in memory is the weak reference coming from the &lt;code&gt;WeakMap&lt;/code&gt; we created.&lt;/p&gt;

&lt;p&gt;Because it’s a weak reference, it won’t prevent garbage collection from occurring. This means when &lt;a href="https://blog.logrocket.com/tag/vanilla-javascript/"&gt;the JavaScript engine&lt;/a&gt; runs a garbage collection process again, the &lt;code&gt;dog&lt;/code&gt; object will be removed from memory and from the &lt;code&gt;WeakMap&lt;/code&gt; we assigned it to.&lt;/p&gt;

&lt;p&gt;The key difference to note is that a strong reference prevents an object from garbage collection while a weak one will not.&lt;/p&gt;

&lt;p&gt;By default, JavaScript uses strong references for all of its references and the only way to use weak references is to use either a &lt;code&gt;WeakMap&lt;/code&gt; or a &lt;code&gt;WeakSet&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-garbage-collection"&gt;
  &lt;/a&gt;
  What is garbage collection?
&lt;/h2&gt;

&lt;p&gt;While garbage collection is a detailed and complicated subject, it is important to understand when discussing references.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/javascript-garbage-collection-browser-vs-server/"&gt;Garage collection is an automated process controlled by the JavaScript engine&lt;/a&gt;. When a value is reachable, it is guaranteed to be stored in memory and not garbage collected, and there are two ways a value is considered reachable.&lt;/p&gt;

&lt;p&gt;This first is that they are part of the base set of reachable values like global variables, the current executing function and its local variables/parameters, and more internal values.&lt;/p&gt;

&lt;p&gt;The other is reaching any value from the root by reference or a chain of references. For instance, imagine we create an object in a global variable; this is reachable by the global space, thus considered reachable.&lt;/p&gt;

&lt;p&gt;Now, if we create another object and reference it off the global object we created, it is also reachable because it’s referenced via the global object.&lt;/p&gt;

&lt;p&gt;However, if we remove the global object by setting it to &lt;code&gt;null&lt;/code&gt;, suddenly the one we could reach by reference isn’t reachable, so it would be garbage collected.&lt;/p&gt;

&lt;p&gt;This is specifically referencing strong references because they are the default in JavaScript. But, the same does apply to weak references, the only exception being if the only reference to an object is weak, it does not prevent garbage collection, and the object is removed.&lt;/p&gt;

&lt;p&gt;That is a high-level overview of how garbage collection works; essentially, if something isn’t reachable, it is removed from memory so the memory can be used in other locations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-sets-endraw-vs-raw-weaksets-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Sets&lt;/code&gt; vs. &lt;code&gt;WeakSets&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;Per MDN&lt;/a&gt;, “&lt;code&gt;Set&lt;/code&gt; objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the &lt;code&gt;Set&lt;/code&gt; may only occur once; it is unique in the &lt;code&gt;Set&lt;/code&gt;'s collection.”&lt;/p&gt;

&lt;p&gt;Simply put, a &lt;code&gt;Set&lt;/code&gt; is like an array that can only contain unique values but we can still iterate through it like an array using methods like for loops and &lt;code&gt;.forEach&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similar to a &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;WeakSet&lt;/code&gt; is a collection of objects that are unique from each other but differs because &lt;code&gt;WeakSet&lt;/code&gt; can only store objects and cannot contain arbitrary values of any type like strings or numbers.&lt;/p&gt;

&lt;p&gt;Ultimately, as the name suggests, &lt;code&gt;WeakSets&lt;/code&gt; are indeed weak, meaning they use weak references.&lt;/p&gt;

&lt;p&gt;It is also worth noting an interesting side effect of using weak references is that &lt;code&gt;WeakSet&lt;/code&gt; is not enumerable. This means there is no way to loop over the items contained within it because there is no list of current objects stored in the collection; they are weakly referenced and may be removed at any point.&lt;/p&gt;

&lt;p&gt;Here is an example of &lt;code&gt;WeakSet&lt;/code&gt; in use and the methods we can call on it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakSet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fluffy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;badger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// removes cat from the set&lt;/span&gt;
&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// false, cat has been removed&lt;/span&gt;
&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// true, dog is retained&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-maps-endraw-vs-raw-weakmap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Maps&lt;/code&gt; vs. &lt;code&gt;WeakMap&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;According to MDN&lt;/a&gt;, “The &lt;code&gt;Map&lt;/code&gt; object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.”&lt;/p&gt;

&lt;p&gt;This means a &lt;code&gt;Map&lt;/code&gt; is like an object where we can store key-value pairs and access the values contained within the &lt;code&gt;Map&lt;/code&gt; through the key. Unlike &lt;a href="https://blog.logrocket.com/storing-retrieving-javascript-objects-localstorage/"&gt;a standard object in JavaScript&lt;/a&gt;, however, we must use the &lt;code&gt;.get()&lt;/code&gt; method to access the values.&lt;/p&gt;

&lt;p&gt;In comparison to a &lt;code&gt;Map&lt;/code&gt;, a &lt;code&gt;WeakMap&lt;/code&gt; is very much the same but the references it holds are weak references, meaning it won’t prevent garbage collection from removing values it references if they are not strongly referenced elsewhere.&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;WeakMap&lt;/code&gt; has the same side effect of not being enumerable due to the weak references.&lt;/p&gt;

&lt;p&gt;Finally, we must use objects as the keys, but the values can be any arbitrary value like a string or number. Here is an example of &lt;code&gt;WeakMaps&lt;/code&gt; used and the methods we can use on it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wm1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wm2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;wm2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// You can set the value to be anything including an object or function&lt;/span&gt;
&lt;span class="nx"&gt;wm2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Or, undefined&lt;/span&gt;
&lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wm2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Or, even a WeakMap itself&lt;/span&gt;

&lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;

&lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;wm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Before closing out, let’s consider a potential use case for weak references and the two objects we covered in this article.&lt;/p&gt;

&lt;p&gt;If you need to store additional data temporarily and don’t want to worry about cleaning up the memory or how the objects are removed, then using weak references is an absolute lifesaver.&lt;/p&gt;

&lt;p&gt;But, it’s not likely that you will regularly need to use &lt;code&gt;WeakMaps&lt;/code&gt;, &lt;code&gt;WeakSets&lt;/code&gt;, or even weak references regularly in JavaScript.&lt;/p&gt;

&lt;p&gt;They are handy to know for the occasional situation and great to have base knowledge about, but in the majority of situations, use normal (strong) references.&lt;/p&gt;

&lt;p&gt;I hope you found this article on weak references in JavaScript helpful, if you did, &lt;a href="https://twitter.com/MrConerMurphy"&gt;please consider following me over on Twitter&lt;/a&gt;, where I post helpful and actionable tips and content on the JavaScript ecosystem.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-debug-javascript-errors-more-easily-by-understanding-the-context"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Debug JavaScript errors more easily by understanding the context
&lt;/h2&gt;

&lt;p&gt;Debugging code is always a tedious task. But the more you understand your errors the easier it is to fix them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; allows you to understand these errors in new and unique ways. Our frontend monitoring solution tracks user engagement with your JavaScript frontends to give you the ability to find out exactly what the user did that led to an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD6-0SwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner" width="800" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LogRocket records console logs, page load times, stacktraces, slow network requests/responses with headers + bodies, browser metadata, and custom logs. Understanding the impact of your JavaScript code will never be easier!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Chat App</title>
      <author>ErenKarakaya</author>
      <pubDate>Mon, 10 Jan 2022 20:38:55 +0000</pubDate>
      <link>https://dev.to/erenkarakaya01/chat-app-18b9</link>
      <guid>https://dev.to/erenkarakaya01/chat-app-18b9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#instructions"&gt;
  &lt;/a&gt;
  Instructions
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h2&gt;

&lt;p&gt;Hi, I'm Eren and I study at Eskisehir Technical University as a Computer Science 2. grade student. I made a realtime chat app called SprinkaiChat with MERN Stack. I made this site to improve my coding skills. I used MongoDB technologies and MongoDB Atlas. To use my app just create an acount, log in, join a room and chat with other people!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#choose-your-own-adventure"&gt;
  &lt;/a&gt;
  &lt;em&gt;Choose Your Own Adventure&lt;/em&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ErenKarakaya01/RealtimeChatApp-MERN"&gt;https://github.com/ErenKarakaya01/RealtimeChatApp-MERN&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://sprinkaichat.herokuapp.com"&gt;https://sprinkaichat.herokuapp.com&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WY_bKK0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmzjqldg8ocxbh3wpeii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WY_bKK0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmzjqldg8ocxbh3wpeii.png" alt="Image description" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2E_7YlEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d391dkaitb8pqo6rmq7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2E_7YlEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d391dkaitb8pqo6rmq7t.png" alt="Image description" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>DevSecOps and Shift Left Security: A Guide</title>
      <author>Geoff Stevens</author>
      <pubDate>Mon, 10 Jan 2022 20:35:46 +0000</pubDate>
      <link>https://dev.to/softwaredotcom/devsecops-and-shift-left-security-a-guide-3dfh</link>
      <guid>https://dev.to/softwaredotcom/devsecops-and-shift-left-security-a-guide-3dfh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-devsecops-methodology"&gt;
  &lt;/a&gt;
  What is DevSecOps methodology?
&lt;/h2&gt;

&lt;p&gt;DevSecOps—short for development, security, and operations—adds security-first thinking into every phase of the software development pipeline, helping engineering teams deliver secure software with speed and at scale. &lt;/p&gt;

&lt;p&gt;Previously, development teams performed security testing after the development cycle, meaning they handed work over to separate QA and security teams for final inspection. As software development teams adopted DevOps practices, particularly continuous integration and deployment, security reviews created costly bottlenecks by backloading important work at the final stages of the delivery pipelines. Teams only uncovered issues after features had been built, meaning they were costlier and more difficult to debug and fix. &lt;/p&gt;

&lt;p&gt;DevSecOps integrates security into every stage of the development pipeline, providing teams with tools and resources at each phase to create safe and secure code. As a result, DevSecOps helps teams address security issues earlier and faster without slowing their organization's software delivery. &lt;/p&gt;

&lt;p&gt;By adopting principles of DevSecOps, teams can benefit from: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Faster and more efficient software delivery&lt;/li&gt;
&lt;li&gt;  More secure codebase and proactive security&lt;/li&gt;
&lt;li&gt;  Continuous feedback and faster security vulnerability patching&lt;/li&gt;
&lt;li&gt;  Highly automated, standardized, and predictable security practices &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-shiftleft-security-fit-into-devsecops"&gt;
  &lt;/a&gt;
  How does shift-left security fit into DevSecOps?
&lt;/h2&gt;

&lt;p&gt;Before DevSecOps, engineering teams structured their development cycles to be highly sequential, which meant completing all testing and security reviews after the planning, implementation, and integration phases. &lt;/p&gt;

&lt;p&gt;Once changes reach the end of the development cycle, they are often more complex to debug, forcing teams to disentangle several factors all at once, such as performance, integration, and more. As a result, uncovering significant issues late in the cycle requires large amounts of rework for development teams. After receiving a long list of complex defects from testers, developers need to design and apply multiple fixes all at once and across thousands of lines of code. &lt;/p&gt;

&lt;p&gt;Security testing late in the development life cycle creates especially painful bottlenecks throughout the delivery pipeline: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Insufficient resource planning&lt;/strong&gt;. By failing to include testers early in the planning phases, teams may not properly allocate resources later in the development cycle. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Less time and more debt&lt;/strong&gt;. Cramming testing at the end of the cycle increases the likelihood of teams skipping testing altogether, increasing technical debt, and deferring problems to later versions. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Wasted development time&lt;/strong&gt;. Engineers may continue to work on defective features or changes before receiving any feedback, leading to wasted energy and effort. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Complex debugging&lt;/strong&gt;. Systems become more complex later in the development cycle, making testing more challenging and burdensome. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shifting left means performing testing earlier in the development cycle. In other words, testing is moved to the left on the project timeline. &lt;/p&gt;

&lt;p&gt;Importantly, the goal is not to shift security to the left &lt;em&gt;as a discrete phase&lt;/em&gt;; instead, teams should integrate security into every phase of development—design, implementation, verification, and so on. Many of these improvements can be introduced by automating security tests, particularly as a part of the continuous integration and deployment pipeline. &lt;/p&gt;

&lt;p&gt;According to W. Edwards Deming, an American engineer famous for his key principles on transforming business effectiveness, engineering teams should design more secure products from the moment they start building:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cease dependence on inspection to achieve quality. Eliminate the need for inspection on a mass basis by building quality into the product in the first place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-shift-left"&gt;
  &lt;/a&gt;
  Why shift left?
&lt;/h3&gt;

&lt;p&gt;The benefits of earlier intervention include faster development speed and improved security throughout the organization's DevOps capabilities. Ultimately, the goal of shift-left security and DevSecOps should be to avoid critical bugs and security defects during the deployment phase, while preserving the fast flow of work.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#greater-transparency"&gt;
  &lt;/a&gt;
  Greater transparency
&lt;/h4&gt;

&lt;p&gt;Implementing security measures throughout the value stream improves visibility into security coverage, including the number of defects discovered and any potential security blind spots. &lt;/p&gt;

&lt;p&gt;The consistent monitoring of threats in the delivery pipeline also introduces a high degree of traceability and auditability, which helps teams iterate and improve their security controls after incidents. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more-secure-codebase"&gt;
  &lt;/a&gt;
  More secure codebase
&lt;/h4&gt;

&lt;p&gt;Shift-left security increases test coverage by encouraging more security testing during the development phase. Additionally, shift-left security enables distributed security, where more team members involved in the development process are responsible for building secure software. &lt;/p&gt;

&lt;p&gt;Shift-left security also inspires better software design, instead of a culture of patching and hotfixes, by making teams more aware of security requirements. Teams can code with security in mind from the outset of a project, avoiding ad-hoc and clumsy fixes in the later stages of development. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lower-production-costs"&gt;
  &lt;/a&gt;
  Lower production costs
&lt;/h4&gt;

&lt;p&gt;Shift-left security reduces the cost of development by resolving issues before introducing additional dependencies. According to &lt;a href="https://www.researchgate.net/figure/IBM-System-Science-Institute-Relative-Cost-of-Fixing-Defects_fig1_255965523"&gt;IBM researchers&lt;/a&gt;, fixing defects is 15 times more expensive to fix during the testing phase than during the design phase. Worse, that number jumps to 100 times more expensive when defects are fixed during the maintenance phase. &lt;/p&gt;

&lt;p&gt;Fixing security issues earlier requires less effort and rework than if teams wait until after implementation. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#organizational-learning"&gt;
  &lt;/a&gt;
  Organizational learning
&lt;/h4&gt;

&lt;p&gt;Shift-left security introduces key security practices to development teams and equips them with tools that provide fast feedback on their work. These insights help spread knowledge about security best practices throughout the organization, creating a more security-conscious culture. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#improved-response-time"&gt;
  &lt;/a&gt;
  Improved response time
&lt;/h4&gt;

&lt;p&gt;Better collaboration between development and security means issues can be discovered faster and fixed sooner. When coupled with continuous integration, shift-left security helps teams patch newly identified security vulnerabilities in faster release cycles, decreasing the time threat actors can take advantage of them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#standardization-and-automation"&gt;
  &lt;/a&gt;
  Standardization and automation
&lt;/h4&gt;

&lt;p&gt;DevSecOps encourages teams to adopt highly repeatable and predictable security workflows. They can apply security controls consistently across environments, including containers, databases, serverless functions, and more. Such standardization prevents security issues from accidentally slipping through security controls due to human error. &lt;/p&gt;

&lt;p&gt;Shift-left security also introduces a high degree of automation into the software development life cycle, shortening feedback loops and eliminating handoffs. Teams can continuously decrease the workload of manual testers by iteratively and incrementally offloading routine testing to automated tooling.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#decreased-time-to-market"&gt;
  &lt;/a&gt;
  Decreased time to market
&lt;/h4&gt;

&lt;p&gt;Overall, shift-left security can increase &lt;a href="https://www.software.com/devops-guides/delivery-velocity-score"&gt;delivery speed&lt;/a&gt;. Optimized security workflows and automation mean less wait time for developers and fewer bottlenecks when shipping new features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-shift-left-in-devsecops"&gt;
  &lt;/a&gt;
  How to shift left in DevSecOps
&lt;/h2&gt;

&lt;p&gt;Adopting shift-left security is not a linear, binary outcome with a strict timeline; instead, it is a continuous process of security improvements over the long-term. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-a-strategy"&gt;
  &lt;/a&gt;
  Define a strategy
&lt;/h3&gt;

&lt;p&gt;Before changing any security workflows, engineering and security teams must first agree on standards and expectations for their shift-left initiatives. It's important they decide what shift-left security looks like at their organization, creating a roadmap of iterative, long-term improvements. &lt;/p&gt;

&lt;p&gt;They can also perform a risk-based analysis to decide where to start implementing testing and tooling, balancing potential risk to the organization's security and resources required to implement new workflows. Incident history and can provide a list of high-priority and high-impact areas for improvement. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understand-the-flow-of-work-in-your-organization"&gt;
  &lt;/a&gt;
  Understand the flow of work in your organization
&lt;/h3&gt;

&lt;p&gt;Next, teams need to understand the flow of work through the software delivery pipeline. The goal is to provide context to security teams about the tools and environments used by developers. They can then create a unified test strategy outlining the tests, tools, and data required for each new security requirement. &lt;/p&gt;

&lt;p&gt;They can also identify opportunities to improve existing workflows so they are more compatible with shift-left security. For example, teams can adopt &lt;a href="https://www.software.com/devops-guides/trunk-based-development-guide"&gt;trunk-based development&lt;/a&gt; to streamline automated security tests. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implement-security-guardrails"&gt;
  &lt;/a&gt;
  Implement security guardrails
&lt;/h3&gt;

&lt;p&gt;When adding security guardrails, the goal is to make security a seamless part of daily work. Teams can introduce these changes into the development pipeline by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  De-emphasizing acceptance and system level testing, while refocusing on unit testing and integration testing.&lt;/li&gt;
&lt;li&gt;  Reducing toolchain complexity with pre-approved tools.&lt;/li&gt;
&lt;li&gt;  Introducing &lt;a href="https://www.software.com/devops-guides/test-automation-guide"&gt;testing automation&lt;/a&gt;, including security workflows directly into continuous integration pipelines.&lt;/li&gt;
&lt;li&gt;  Hardening continuous integration systems with checklists to ensure teams follow best practices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#continuously-train-and-improve"&gt;
  &lt;/a&gt;
  Continuously train and improve
&lt;/h3&gt;

&lt;p&gt;Shift-left security requires continuous improvement to respond to the ever-changing needs of development and security teams. As part of the ongoing shift left, security teams can be more involved in the early phases of design, reviewing implementation details to advise on potential testing requirements, architecture considerations, and security considerations. &lt;/p&gt;

&lt;p&gt;Development teams can also be kept up to date on the OWASP Top 10, testing best practices, and other security trends. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shift-left-security-best-practices"&gt;
  &lt;/a&gt;
  Shift left security best practices
&lt;/h2&gt;

&lt;p&gt;Shift-left security needs to be implemented with careful consideration for its impact on the development process. Like all DevOps capabilities, it works best when combined with visibility, monitoring, and continuous improvement. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimize-test-environments"&gt;
  &lt;/a&gt;
  Optimize test environments
&lt;/h3&gt;

&lt;p&gt;Security testing should also follow the &lt;a href="https://www.software.com/devops-guides/test-automation-guide"&gt;test pyramid&lt;/a&gt; to provide the most valuable feedback to developers at the right time. It's important to implement smaller, faster tests earlier, such as static code analysis, unit tests, and smoke tests. By starting with these smaller tests, developers avoid the need to create full builds to reveal certain security issues. &lt;/p&gt;

&lt;p&gt;Teams should run more comprehensive test suites—such as API, integration, and cross-browser testing—later in the development pipeline. These test suites should be designed to fail fast, stopping builds early if they uncover catastrophic issues. &lt;/p&gt;

&lt;p&gt;Teams should also consider using short-lived testing environments. Long-running environments can quickly become obsolete or require significant upkeep, while temporary environments avoid maintenance costs and outdated data. For example, containers for smoking tests can be created and destroyed quickly according to predefined configurations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitor-pipeline-performance"&gt;
  &lt;/a&gt;
  Monitor pipeline performance
&lt;/h3&gt;

&lt;p&gt;Shift-left security should be highly automated, with tools and tests added directly to the build process. Teams will need to maintain security tests and plan for their upkeep each development cycle. &lt;/p&gt;

&lt;p&gt;As a result, an important part of shift-left security is consistently monitoring pipeline performance. Teams should highlight slow pipelines and jobs, as well as their success rates. The goal is to fine tune their configuration to eliminate false positives, increase speed, or flag outdated tests. They can also identify recurring security weaknesses that require additional tooling earlier in the development cycle. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-teams-involved-in-design"&gt;
  &lt;/a&gt;
  Security teams involved in design
&lt;/h3&gt;

&lt;p&gt;Requesting feedback from security teams during the design phase helps teams flag potential issues and highlight areas of focus during implementation. Security teams can help teams prevent complex security issues before developers have a chance to build them into the codebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#increase-preapproved-tools"&gt;
  &lt;/a&gt;
  Increase pre-approved tools
&lt;/h3&gt;

&lt;p&gt;Standardization and pre-approval for dependencies, packages, toolchains, libraries encourages their use and avoids rework. Overall, it decreases the surface area for security issues by eliminating vulnerable toolchains before they're added into the codebase. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#develop-a-culture-of-visibility"&gt;
  &lt;/a&gt;
  Develop a culture of visibility
&lt;/h3&gt;

&lt;p&gt;Above all, teams should improve visibility into their organization's shift-left security practices. They should make it easy for all team members to understand their organization's security posture, including its strengths and areas for improvements. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#measuring-shift-left-security"&gt;
  &lt;/a&gt;
  Measuring shift left security
&lt;/h2&gt;

&lt;p&gt;To measure the effectiveness of shift-left security, teams should improve visibility into: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Security review time&lt;/strong&gt;. The goal should be to decrease the time required for security reviews so they do not slow the development process. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Percentage of security requirements integrated into automated testing&lt;/strong&gt;. Teams should increase the coverage of security requirements performed as part of test automation, which provide faster feedback to developers. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Percentage of development tools in use that have been pre-approved&lt;/strong&gt;. Teams should increase their approval coverage until most or all tools used by development teams have been pre-approved by security teams. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#shift-left-security-tools"&gt;
  &lt;/a&gt;
  Shift left security tools
&lt;/h2&gt;

&lt;p&gt;Organizations can implement several different types of tools to help developers shift security to the left. The four main security testing methods include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Static Application System Testing (SAST) involves scanning source code for vulnerabilities. It's typically fast and cheap because it does not require code to compile or run. &lt;/li&gt;
&lt;li&gt;  Dynamic Application Security Testing (DAST) involves black-boxing testing, exposing an application to common attacks. &lt;/li&gt;
&lt;li&gt;  Interactive Application Security Testing (IAST), a hybrid of SAST and DAST, analyzes running applications and watches behaviors initiated by both manual and automated tests. &lt;/li&gt;
&lt;li&gt;  Runtime Application Self Protection (RASP) integrates with an application to prevent attacks during runtime, blocking or preventing execution based on traffic and user behavior. Two popular tools include OpenRASP and Sqreen. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teams can also implement security practices to further secure the software supply chain: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Secrets detection: Teams can use tools to scan code for secrets, like API keys, encryption keys, and credentials, to prevent accidental exposure. &lt;/li&gt;
&lt;li&gt;  Dependency scanning: Tools like WhiteSource and FOSSA scan dependencies and open source projects for security issues or identify outdated packages. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#start-small-start-today"&gt;
  &lt;/a&gt;
  Start small, start today
&lt;/h2&gt;

&lt;p&gt;As teams work in increasingly complex development environments—relying on more dependencies, tools, and open source technology—security is more important than ever. With widespread security scares, such as &lt;a href="https://www.zdnet.com/article/log4j-flaw-hunt-shows-how-complicated-the-software-supply-chain-really-is/"&gt;Log4j&lt;/a&gt; and SolarWinds, creating a resilient and security-focused organization can be a daunting task. In 2021 alone, the US-CERT Vulnerability database recorded more than 18,000 vulnerabilities, &lt;a href="https://www.securitymagazine.com/articles/96668-2021-breaks-the-record-for-security-vulnerabilities"&gt;breaking previous records&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In spite of these challenges, DevSecOps and shift-left security testing offers teams a way to confidently and consistently write more secure code and build safer software. With small, continuous improvements, any engineering team can inspire a culture that prioritizes better security.&lt;/p&gt;

</description>
      <category>security</category>
      <category>devops</category>
    </item>
    <item>
      <title>MongoDB Atlas Hackathon</title>
      <author>zaahmed-nisum-com</author>
      <pubDate>Mon, 10 Jan 2022 20:31:59 +0000</pubDate>
      <link>https://dev.to/zaahmednisumcom/mongodb-atlas-hackathon-1jlb</link>
      <guid>https://dev.to/zaahmednisumcom/mongodb-atlas-hackathon-1jlb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;I have create a simple full-text search for products, A user can search a product with right any text on input field and hit search than MongoDB Atlas search do the job for me. User can search on basis of different fields and get the desire recordes.&lt;br&gt;
I also create a simple schedule trigger to get the daily order report which will get all the orders on daily basis and create a single entity for single day and add it in a dailyorderreport schema.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;I have choose E-Commerce Creation &amp;amp; Action Star for my project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Fronend Repo&lt;code&gt;{% github https://github.com/zaahmed-nisum-com/nisum-vuejs-streamingweb %}&lt;/code&gt;&lt;br&gt;
Backend Repo&lt;code&gt;{% github https://github.com/zaahmed-nisum-com/nodeJS-workshop-nisum/tree/master %}&lt;/code&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Did't use any&lt;/p&gt;

&lt;p&gt;[Note:] # Screenshots/demo videos&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fd2Cb1SC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff8yrn2vsdg66aeb53ku.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fd2Cb1SC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff8yrn2vsdg66aeb53ku.gif" alt="full text search" width="600" height="315"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_w5om74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtrgmbmyqbms12rmc8k6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_w5om74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtrgmbmyqbms12rmc8k6.gif" alt="Trigger for daily order " width="500" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;App pages urls&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#full-text-search-page"&gt;
  &lt;/a&gt;
  full text search page
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://watchnowweb.herokuapp.com/search"&gt;https://watchnowweb.herokuapp.com/search&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#today-order-trigger-event"&gt;
  &lt;/a&gt;
  today order trigger event
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://watchnowweb.herokuapp.com/orders/todayorders"&gt;https://watchnowweb.herokuapp.com/orders/todayorders&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Understanding Angular Modules</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Mon, 10 Jan 2022 19:21:25 +0000</pubDate>
      <link>https://dev.to/this-is-angular/understanding-angular-modules-41pb</link>
      <guid>https://dev.to/this-is-angular/understanding-angular-modules-41pb</guid>
      <description>&lt;p&gt;Today we will understand one of the very important topic in Angular - &lt;strong&gt;Angular Modules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In simple term a module is a logical block or container that holds something.&lt;/p&gt;

&lt;p&gt;If we need to describe module in terms of Angular we can say its a logical block containing &lt;a href="https://dev.to/anubhab5/understanding-angular-component-2bpa"&gt;components&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://dev.to/this-is-angular/custom-directives-in-angular-2cp5"&gt;custom directives&lt;/a&gt;, &lt;a href="https://dev.to/this-is-angular/creating-custom-pipe-in-angular-2pam"&gt;custom pipes&lt;/a&gt; and services (I will talk in detail very soon).&lt;/p&gt;

&lt;p&gt;Once you create a new Angular project the Angular team provided you with a ready to use module called &lt;code&gt;app.module.ts&lt;/code&gt;. Lets see the different parts of &lt;code&gt;Angular Module&lt;/code&gt; -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now few key take away -&lt;br&gt;
1️⃣ A module is a simple typescript class. &lt;/p&gt;

&lt;p&gt;2️⃣ The module is decorated with &lt;code&gt;@NgModule&lt;/code&gt; decorator.&lt;/p&gt;

&lt;p&gt;3️⃣ The NgModule decorator is a function that takes an object. This object is also called &lt;strong&gt;metadata object&lt;/strong&gt; (you should remember this term)&lt;/p&gt;

&lt;p&gt;4️⃣ The metadata has information/ details which helps Angular how to compile and launch the application.&lt;/p&gt;

&lt;p&gt;In the above example you can see only 4 options but in total there are 9 options available. So lets see each one of them and their use (few are advanced options which will be taken in details later).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;declarations&lt;/code&gt; - &lt;br&gt;
It is an Array of classes. &lt;br&gt;
Holds list of all the custom directives, pipes and components user has created.&lt;br&gt;
All the items (directive, pipe, component) you added in this list are all part of this module.&lt;br&gt;
&lt;strong&gt;Note --- A Very Important One&lt;/strong&gt;&lt;br&gt;
You Can add a component/ directive/ pipe class in only one module's declaration array. If you try to add in more than one place you will get a compile error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;imports&lt;/code&gt; - &lt;br&gt;
It is a list of all modules that this current module is dependent on.&lt;br&gt;
In the above example you can see &lt;code&gt;BrowserModule&lt;/code&gt; added. It means the current module is dependent on the BrowserModule to function correctly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;providers&lt;/code&gt; – &lt;br&gt;
It contains the list of dependency injection providers. (Might be a bit hard to digest at this time so in easy term I can say list of services. I will revisit this part when we talk about services)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exports&lt;/code&gt; - &lt;br&gt;
List of custom components, directives, pipes that the module exposes/ exports so that the other module can use it.&lt;br&gt;
Now try to relate with import... This module will be exporting and some other module will be importing. So the other module should write the name of this module in that module's import array. Easy right???&lt;/p&gt;

&lt;p&gt;&lt;code&gt;entryComponents&lt;/code&gt; - &lt;br&gt;
It is a list of components that should be compiled when this module is defined. &lt;br&gt;
An Angular app always has at least one entry component, root component- &lt;code&gt;AppComponent&lt;/code&gt; by default.&lt;br&gt;
We will learn about dynamic components later. All dynamic components need to be part of EntryComponent list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; –&lt;br&gt;
List of components that are bootstrapped/ during the start and the listed components will be automatically added to entryComponents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;schemas&lt;/code&gt; - &lt;br&gt;
List of elements and properties that are neither Angular components or directives (again will talk about it later. It will be discussed in Advanced topic part).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id&lt;/code&gt; – &lt;br&gt;
The Id used to identify the modules in getModuleFactory. If left undefined, the NgModule will not be registered with getModuleFactory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jit&lt;/code&gt; -&lt;br&gt;
When this is present, the module will be ignored by the AOT compiler. (Again will be covered in the advanced part)&lt;/p&gt;

&lt;p&gt;The main use of module comes to logically group similar items and put all the related items together. &lt;/p&gt;

&lt;p&gt;Suppose you have a feature like dashboard. All the related components will be placed under that module.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading the post.&lt;br&gt;
Coming up next is &lt;strong&gt;Creating custom module in Angular&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you enjoyed reading the post please do like comment subscribe&lt;br&gt;
and share with your friends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>module</category>
    </item>
    <item>
      <title>AtlasHackathon: Explore With Us (A Web App using Django, MongoDB Atlas)</title>
      <author>Nayan Das</author>
      <pubDate>Mon, 10 Jan 2022 19:01:10 +0000</pubDate>
      <link>https://dev.to/mrpalindrome/atlashackathon-explore-with-us-a-web-app-using-django-mongodb-atlas-5bj0</link>
      <guid>https://dev.to/mrpalindrome/atlashackathon-explore-with-us-a-web-app-using-django-mongodb-atlas-5bj0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Explore With Us is a vacation destination catalog website build with Django, Bootstrap and MongoDB Atlas.&lt;br&gt;
I created this webapp to take part in MongoDB Atlas Hackathon.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#technologies-i-used"&gt;
  &lt;/a&gt;
  Technologies I used:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTML, CSS, JavaScript and Bootstrap 4.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Django&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB Atlas&lt;/p&gt;
&lt;ul&gt;

&lt;li&gt;I used MongoDB Atlas to store the database by creating a cluster on  &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;MongoDB&lt;/a&gt; &lt;/li&gt;

&lt;li&gt;I used the Atlas search feature to implement a fast, relevance-based full-text search for the destinations that I have in my database.&lt;/li&gt;

&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#how-i-used-atlas-search-feature"&gt;
  &lt;/a&gt;
  How I used Atlas Search feature:
&lt;/h4&gt;

&lt;p&gt;I used MongoDB Atlas search to implement the autocomplete feature in my "Search Destination" Search Bar.&lt;br&gt;
First I made a search index for my collection "main_destination"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTQdCFmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ograz5f6ousy32oxa6m5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTQdCFmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ograz5f6ousy32oxa6m5.png" alt="All collections in the database Project_data" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Search Index I used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "mappings": {
    "dynamic": false,
    "fields": {
      "name": [
        {
          "foldDiacritics": false,
          "maxGrams": 7,
          "minGrams": 3,
          "tokenization": "edgeGram",
          "type": "autocomplete"
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And then in backend I created Connect.py in main folder to connect with the cluster for searching the index from views.py search action. using pymongo package built for python to connect with MongoDB, as djongo does not support aggregate function.&lt;/p&gt;

&lt;p&gt;So that once the user starts searching particular destination it will suggest them destinations automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fYB6L8UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p26cu97lddozwoapa8q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fYB6L8UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p26cu97lddozwoapa8q.gif" alt="Demo Video to Show implementation of Atlas Search" width="680" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;views.py&amp;gt;search :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDAGCZ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awyquzi6f1upkkcxa4uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDAGCZ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awyquzi6f1upkkcxa4uz.png" alt="Search action in veiws.py" width="404" height="537"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the function looks like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_result = collection.aggregate(
           [
               {
                   "$search": {
                       "autocomplete": {
                           "query": address,
                           "path": "name",
                           "fuzzy": {
                               "maxEdits": 2
                           }
                        }
                   }
               }
           ]
      )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function build a pipeline that searches using the address parameter automatically from the collection as defined in MongoDB Atlas search index as I demoed at the top in my demo video.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#how-you-will-see-this-project"&gt;
  &lt;/a&gt;
  How you will see this project
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 1:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Fork the project repository and clone it using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/mr-palindrome/Explore-With-Us.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Django skeleton is look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYpDpaYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3aigepbu37ztwew1hb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYpDpaYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3aigepbu37ztwew1hb5.png" alt="Django Skeleton" width="252" height="704"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 2:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Install virtualenv then create a virtual environment test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install virtualenv
virtualenv test
source test/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Install all the dependencies using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 3:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Create a Django SECRET_KEY using following command in python3 terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3
&amp;gt;&amp;gt;&amp;gt; from django.core.management.utils import get_random_secret_key  
&amp;gt;&amp;gt;&amp;gt; get_random_secret_key()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create a .env file in explore_with_us folder to store all the environment and secret keys, like Django SECRET_KEY, mongoDB connection string.&lt;/p&gt;

&lt;p&gt;But, for demonstration purpose you don't have to create your own cluster, I have provided my own connection string to access all the data present in my Atlas cluster database(AtlasHackathon&amp;gt;Project_data)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxnW_xCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33u6496w5xufkf63kyiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxnW_xCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33u6496w5xufkf63kyiz.png" alt='My cluster "AtlasHackathon"' width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now store the Django SECRET_KEY and my connection string in .env, it will look like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SECRET_KEY = &amp;lt;django SECRET_KEY&amp;gt;
HOST = mongodb+srv://user_demo:demo123@atlashackathon.nhdkl.mongodb.net/myFirstDatabase?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 4:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Now you can see the website in your localhost:8000 using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manange.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;The category is &lt;strong&gt;"Choose Your Own Adventure"&lt;/strong&gt;. It could be "E-Commerce Creation" but this is not an e-commerce store or any product catalog. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-my-code"&gt;
  &lt;/a&gt;
  Link to my Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mr-palindrome"&gt;
        mr-palindrome
      &lt;/a&gt; / &lt;a href="https://github.com/mr-palindrome/Explore-With-Us"&gt;
        Explore-With-Us
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Explore With Us&lt;/h1&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;Explore With Us is a vacation destination catalog website build with Django, Bootstrap and MongoDB Atlas
I created this website to take part in MongoDB Atlas Hackathon hosted by &lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m" rel="nofollow"&gt;DEV.to&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Tech I used:&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;HTML,CSS,JS and Bootstrap 4&lt;/li&gt;
    &lt;li&gt;Django&lt;/li&gt;
    &lt;li&gt;MongoDB Atlas&lt;ul&gt;
&lt;li&gt;I used MongoDB Atlas to store the database by creating a cluster on  [MongoDB](&lt;a href="https://www.mongodb.com/cloud/atlas/register" rel="nofollow"&gt;https://www.mongodb.com/cloud/atlas/register&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;I used the Atlas search feature to implement a fast, relevance-based full-text search for the destinations that I have in my database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
How I used Atlas Search feature:&lt;/h3&gt;
&lt;p&gt;I used MongoDB Atlas search to implement the autocomplete feature in my "Search Destination" Search Bar
So that users can easily find their suitable destination within few seconds without scrolling
First I made a search index for my collection "main_destination".
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The Search Index I used:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;{
  "mappings": {
    "dynamic": false
    "fields": {
      "name": [
        {
          "foldDiacritics": false,
          "maxGrams": 7,
          "minGrams": 3,
          "tokenization":&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mr-palindrome/Explore-With-Us"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;This was my first time using MongoDB as the database for a website which was a really great experience of using NoSQL specially MongoDB Atlas, I'm also planning to use it in my future projects.&lt;br&gt;
I learned about &lt;a href="https://pymongo.readthedocs.io/en/stable/"&gt;pymongo package&lt;/a&gt; and &lt;a href="https://www.djongomapper.com/"&gt;djongo&lt;/a&gt; availabe for python. I took help from &lt;a href="https://www.mongodb.com/compatibility/mongodb-and-django"&gt;How to Use Django with MongoDB&lt;/a&gt; document.&lt;br&gt;
Initially I started researching about Atlas search and how to use them using the &lt;a href="https://docs.atlas.mongodb.com/atlas-search/"&gt;Atlas Search Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And another resource that help me to build my frontend was &lt;a href="https://getbootstrap.com/docs/4.0/getting-started/introduction/"&gt;Bootstrap 4&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>django</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Lets Save The World!</title>
      <author>Maarten Engels</author>
      <pubDate>Mon, 10 Jan 2022 18:54:38 +0000</pubDate>
      <link>https://dev.to/maartene/lets-save-the-world-4g5g</link>
      <guid>https://dev.to/maartene/lets-save-the-world-4g5g</guid>
      <description>&lt;p&gt;Will you join me to - dare I say it - Save the World?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;In this web based game/simulation you play as a country. You are able to enact, revoke and upgrade policies that influence your country in various ways and by consequence, also the Earth as a whole. &lt;/p&gt;

&lt;p&gt;There is no win/lose condition per se, but perhaps trying to keep global warming under 1.5 degrees above pre-industrial temperature is a nice goal?&lt;/p&gt;

&lt;p&gt;It's multiplayer, so the more people play, the bigger the impact we can all make!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can play the game here: &lt;a href="https://www.letssavetheworld.club/"&gt;https://www.letssavetheworld.club/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;More instructions in the &lt;a href="https://github.com/maartene/STW/blob/main/README.md"&gt;Readme&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#play-example"&gt;
  &lt;/a&gt;
  Play example
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dNGKFGh7IdM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h4&gt;

&lt;p&gt;November 14 I registered a domain name, more or less on a whim: letssavetheworld.club. It was around the time of the Climate Conference in Glasgow and I remember how disappointed I was about the results. Was it really that difficult to actually start doing something? So I decided I'd create a game/simulation to get a sense of the complexity involved. I researched climate change models and the effects of global warming for humanity. &lt;/p&gt;

&lt;p&gt;Then, this hackathon came along, offering the perfect reason to actually create the game and publish it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/maartene"&gt;
        maartene
      &lt;/a&gt; / &lt;a href="https://github.com/maartene/STW"&gt;
        STW
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      MongoDB+Dev hackathon entry: a game where we - dare I say it - Save The World!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
STW&lt;/h1&gt;
&lt;p&gt;MongoDB+Dev hackathon entry: a game where we - dare I say it - Save The World!&lt;/p&gt;
&lt;h2&gt;
You can play a live build at &lt;a href="https://www.letssavetheworld.club" rel="nofollow"&gt;https://www.letssavetheworld.club&lt;/a&gt;
&lt;/h2&gt;
&lt;h2&gt;
Project setup&lt;/h2&gt;
&lt;p&gt;The application consists of two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API backend: written in Swift using the Vapor framework;&lt;/li&gt;
&lt;li&gt;Web frontend: written in JavaScript using the Vue framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Running the API backend&lt;/h3&gt;
&lt;h4&gt;
Pre-requisites&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need the Swift toolchain. If you are on macOS, just make sure you have the latest version of Xcode installed. On Linux, you can download Swift from swift.org.&lt;/li&gt;
&lt;li&gt;You need a MongoDB, either local or on a cloud service like Mongo Atlas. Mongo Atlas has a free tier that works quite well for (testing) this project.&lt;/li&gt;
&lt;li&gt;Setting the environment variable &lt;code&gt;STW_BACKEND_DB_URL&lt;/code&gt; to your MongoDB connection string.&lt;/li&gt;
&lt;li&gt;By default, the API backend listens on port 8000. If you want to change this, you can do so by setting the environment variable: &lt;code&gt;STW_BACKEND_PORT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Linux:&lt;/h4&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/maartene/STW"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#about-the-climate-change-model"&gt;
  &lt;/a&gt;
  About the climate change model
&lt;/h4&gt;

&lt;p&gt;Climate change is a pretty complex concept. The model used in this game is very, VERY basic. It only covers average global temperature and warming based on carbon concentration in the atmosphere. It is not aware of regional differences. The model in itself is flexible though and could be expanded to take more metrics into account.&lt;br&gt;
(exact links to the various data sources for the model can be found in the source code)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-the-tech"&gt;
  &lt;/a&gt;
  About the tech
&lt;/h4&gt;

&lt;p&gt;Lets Save The World is based on two big technologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;backend uses the &lt;a href="https://vapor.codes"&gt;Vapor framework&lt;/a&gt;: a Server Side Swift framework. I like using Swift and feel that in particular for backend work. Its an opinionated language that somehow seems to help me write better code. That Vapor supports MongoDB out of the box also helps;&lt;/li&gt;
&lt;li&gt;front-end uses the &lt;a href="https://v3.vuejs.org"&gt;Vue.js&lt;/a&gt; framework (with Vuex). I'm no Javascript expert, but find it very easy to use Vue to create a usable front-end. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The runtime version of the game is deployed on the &lt;a href="https://www.digitalocean.com/products/app-platform/"&gt;DigitalOcean App platform&lt;/a&gt;. The front-end as a Static Website (using a free plan), the backend as a Docker image (using the cheapest paid plan. The app platform takes care of all the complex stuff, such as creating TLS/SSL certificates for the website, deployments and the networking/domain stuff.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-the-usage-of-mongodb"&gt;
  &lt;/a&gt;
  About the usage of MongoDB
&lt;/h4&gt;

&lt;p&gt;MongoDB tends to be my database backend of choice for Vapor projects. I like the flexibility its schemaless setup offers. And I like that it uses JSON for most interactions, making bridging to data in the Vapor (Swift) world very easy, because Swift has very simple solutions for briding between JSON and actual Swift data structures. &lt;/p&gt;

&lt;p&gt;I also like using MongoDB Atlas as a database provider. Off course, I could run my own MongoDB instance, but having the admin website in Atlas makes it much easier during development to experiment and quickly change stuff. Need to change a value in a document somewhere? The web interface makes this very easy. Need an extra database or drop a table? Just a few clicks. Finally, the larger (paid) Atlas plans provide stuff like backups out of the box. Something that's always a lot of work when you roll your own. &lt;/p&gt;

&lt;p&gt;These two aspects help developer productivity a lot.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#feedbackimprovements"&gt;
  &lt;/a&gt;
  Feedback/improvements
&lt;/h4&gt;

&lt;p&gt;If you have feedback, please let me know in the comments below. Also, if you have ideas from a game design point of view to make it more engaging, please reach out to me. I'm more of a programmer than a game designer, so can always use help to improve the fun and engagement of a game! &lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>How to Create a Button in JavaScript</title>
      <author>Gaël Thomas</author>
      <pubDate>Mon, 10 Jan 2022 18:53:36 +0000</pubDate>
      <link>https://dev.to/herewecode/how-to-create-a-button-in-javascript-378p</link>
      <guid>https://dev.to/herewecode/how-to-create-a-button-in-javascript-378p</guid>
      <description>&lt;p&gt;Learn how to create a button in JavaScript and add it to your HTML page.&lt;/p&gt;




&lt;p&gt;As a web developer, you should probably create buttons and add them to your HTML page programmatically.&lt;/p&gt;

&lt;p&gt;A typical workflow is to validate some data in your JavaScript code before displaying a button in HTML to your users.&lt;/p&gt;

&lt;p&gt;Before starting, let me show you what you will achieve!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Can you click me?&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJFdZ6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3wmdforfzz3du0ju18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJFdZ6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3wmdforfzz3du0ju18.png" alt="HTML button in JS" width="268" height="62"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the button, your JavaScript code will trigger an alert.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwyE6jK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nl6v4nzrnxrpn8o9ejk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwyE6jK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nl6v4nzrnxrpn8o9ejk.png" alt="Button in JavaScript with on click Alert" width="852" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's dive into that tutorial!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-button-using-document-raw-createelement-endraw-"&gt;
  &lt;/a&gt;
  1. Create a button using document &lt;code&gt;createElement&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;To create a button in JavaScript, you must use the &lt;code&gt;createElement&lt;/code&gt; function available by default in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document"&gt;the Document interface&lt;/a&gt; of your web page.&lt;/p&gt;

&lt;p&gt;Then, you will configure the button with a "Can you click me?" text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a button element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Set the button text to 'Can you click me?'&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can you click me?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a side note, you can add a lot of properties to a button when creating it. This tutorial only sets the &lt;code&gt;innerText&lt;/code&gt; because we don't need the other properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-add-an-event-listener-on-your-button"&gt;
  &lt;/a&gt;
  2. Add an event listener on your button
&lt;/h2&gt;

&lt;p&gt;The next step is to create &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener"&gt;an event listener&lt;/a&gt; on your button. It will allow you to detect when a user clicks on it.&lt;/p&gt;

&lt;p&gt;Whenever the "click" event is detected, the arrow function (second parameter) is launched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Attach the "click" event to your button&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// When there is a "click"&lt;/span&gt;
  &lt;span class="c1"&gt;// it shows an alert in the browser&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oh, you clicked me!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-add-your-js-button-to-your-html"&gt;
  &lt;/a&gt;
  3. Add your JS button to your HTML
&lt;/h2&gt;

&lt;p&gt;The last step is to add your button to the HTML body.&lt;/p&gt;

&lt;p&gt;After that, you will have the same result as the beginning example!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add the button to your HTML &amp;lt;body&amp;gt; tag&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-code-to-create-a-button-in-js"&gt;
  &lt;/a&gt;
  Full code to create a button in JS 👇
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Create a Button in JavaScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Empty &amp;lt;body&amp;gt; HTML (the JavaScript code in &amp;lt;script&amp;gt; will generate a button here)--&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// Create a button element&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;// Set the button text to 'Can you click me?'&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can you click me?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mainButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="c1"&gt;// Attach the "click" event to your button&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// When there is a "click"&lt;/span&gt;
        &lt;span class="c1"&gt;// it shows an alert in the browser&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oh, you clicked me!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congrats! 🎉 Now you know how to programmatically create buttons using JavaScript. You can go a bit further by learning &lt;a href="https://herewecode.io/blog/enable-and-disable-button-javascript/"&gt;how to enable and disable a button in JavaScript&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;➡️ I'm starting to tweet more consistently. If you want to get more tips and resources about web development, developer tips, and my journey as a Full-stack Engineer -&amp;gt; &lt;a href="https://twitter.com/gaelgthomas/"&gt;Find me on my Twitter 🐦&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>E-commerce store with search functionality and filters: Using MongoDB Atlas Search.</title>
      <author>Nourdine Labib</author>
      <pubDate>Mon, 10 Jan 2022 18:46:56 +0000</pubDate>
      <link>https://dev.to/niidark/e-commerce-store-with-search-functionality-and-filters-using-mongodb-atlas-search-e0e</link>
      <guid>https://dev.to/niidark/e-commerce-store-with-search-functionality-and-filters-using-mongodb-atlas-search-e0e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;A fully responsible &lt;strong&gt;e-commerce store&lt;/strong&gt;, with filters, sorting, search functionality and autocomplete.&lt;/p&gt;

&lt;p&gt;🔗 &lt;a href="https://product-listing-alpha.vercel.app/shop"&gt;Live demo&lt;/a&gt;&lt;br&gt;
🔗 &lt;a href="https://github.com/Nourdinedev/product-listing/blob/main/README.md"&gt;README.md&lt;/a&gt;&lt;br&gt;
🔗 &lt;a href="https://github.com/Nourdinedev/product-listing/blob/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Nourdinedev"&gt;
        Nourdinedev
      &lt;/a&gt; / &lt;a href="https://github.com/Nourdinedev/product-listing"&gt;
        product-listing
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;h3&gt;
Install all the dependencies:&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Add the MONGODB_URI to .env file:&lt;/h3&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;MONGODB_URI=(Your connection string)&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Run the development server:&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser.&lt;/p&gt;
&lt;h3&gt;
Add products seeds:&lt;/h3&gt;
&lt;p&gt;To add the seeds you only need to go to &lt;a href="http://localhost:3000/api/products/add-seeds" rel="nofollow"&gt;http://localhost:3000/api/products/add-seeds&lt;/a&gt; (/api/products/add-seeds)&lt;/p&gt;
&lt;p&gt;if the insert was successful, you will receive a response with a (success : true) and the data that was inserted.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/5c209ec60c827acda1769c4cb947304ba4357ea7453dc67c5a9dab1b08e28d22/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646165676f6b7469612f696d6167652f75706c6f61642f76313634313833363632352f646174615f70736b73686c2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/5c209ec60c827acda1769c4cb947304ba4357ea7453dc67c5a9dab1b08e28d22/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646165676f6b7469612f696d6167652f75706c6f61642f76313634313833363632352f646174615f70736b73686c2e706e67" alt="the received response"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Setup MongoDB Atlas Search:&lt;/h3&gt;
&lt;h4&gt;
1 - Create the "category_size" search index&lt;/h4&gt;
&lt;p&gt;make sure you name the index "category_size"&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;Index Name &lt;span class="pl-c1"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;category_size&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Set the index using JSON Editor&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;{
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mappings&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dynamic&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: false
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fields&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;category&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      },
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;options&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fields&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;options&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fields&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Nourdinedev/product-listing"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4q5giTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1wbnm1zmv123lt06l0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4q5giTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1wbnm1zmv123lt06l0c.png" alt="Product listing index" width="880" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nt5fpOOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en4sq80mml97qnfpmeyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nt5fpOOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en4sq80mml97qnfpmeyh.png" alt="Product listing search" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TqZTXR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekephl4f8texyhe0nr6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TqZTXR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekephl4f8texyhe0nr6m.png" alt="Product listing Cart Slider" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0jy9bzJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt2zou2x2qz2cy8gxhyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0jy9bzJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt2zou2x2qz2cy8gxhyg.png" alt="Product overview page" width="880" height="840"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technologies"&gt;
  &lt;/a&gt;
  Technologies:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.mongodb.com"&gt;MongoDB&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.atlas.mongodb.com/atlas-search/"&gt;Atlas Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://reactjs.org"&gt;React.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://redux.js.org"&gt;redux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-dependencies"&gt;
  &lt;/a&gt;
  Other dependencies:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://mongoosejs.com"&gt;Mongoose&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://react-redux.js.org"&gt;react-redux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://redux-saga.js.org"&gt;redux-saga&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/rt2zz/redux-persist"&gt;redux-persist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/redux-logger"&gt;redux-logger&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://headlessui.dev"&gt;headlessui/react&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://heroicons.com"&gt;heroicons/react&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/react-image-gallery"&gt;react-image-gallery&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/rc-pagination"&gt;rc-pagination&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/rc-slider"&gt;rc-slider&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>.NET Developer? You're an IoT Developer Too!</title>
      <author>Rob Lauer</author>
      <pubDate>Mon, 10 Jan 2022 18:41:08 +0000</pubDate>
      <link>https://dev.to/blues/net-developer-youre-an-iot-developer-too-3mgn</link>
      <guid>https://dev.to/blues/net-developer-youre-an-iot-developer-too-3mgn</guid>
      <description>&lt;p&gt;Like many software engineers, I cut my proverbial teeth on the web. Showing off cutting edge ASP.NET web apps with the occasional AJAX request and JavaScript &lt;code&gt;mouseover&lt;/code&gt; effect really got heads spinning back in the early `00's!&lt;/p&gt;

&lt;p&gt;Eventually my career took a new path as I found myself in the embedded space, writing firmware with Arduino and CircuitPython to control tiny devices with microcontrollers. While I'm still a complete noob, I've had the pleasure of building everything from a &lt;a href="https://www.hackster.io/rob-lauer/solar-powered-crypto-mining-with-raspberry-pi-64adee"&gt;solar-powered crypto miner&lt;/a&gt;, to a &lt;a href="https://www.hackster.io/rob-lauer/debugging-a-hot-tub-time-series-machine-92e44f"&gt;hot tub water quality monitor&lt;/a&gt;, to a &lt;a href="https://www.hackster.io/rob-lauer/busted-create-an-ml-powered-speed-trap-b1e5d1"&gt;speed trap powered by machine learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I've always lusted after combining my love for C# with the embedded world.&lt;/p&gt;

&lt;p&gt;Lo and behold, I learned about a couple of frameworks geared towards this scenario: &lt;a href="https://www.nanoframework.net/"&gt;.NET nanoFramework&lt;/a&gt; and &lt;a href="https://www.ghielectronics.com/tinyclr/"&gt;TinyCLR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsBqghv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qy0tvkilub7fzg8p32o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsBqghv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qy0tvkilub7fzg8p32o.png" alt="logos for nanoframework and tinyclr os" width="839" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we look more closely at these tiny .NET frameworks, let's take a short step back and better define the concepts of "embedded development" and "IoT".&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-embedded-development-and-the-iot"&gt;What is Embedded Development and the IoT?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tiniest-net-frameworks"&gt;The Tiniest .NET Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tiny-hardware"&gt;The "Tiny" Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started-with-tinyclr-os"&gt;Getting Started with TinyCLR OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-iot-to-the-mix"&gt;Adding IoT to the Mix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-embedded-development-and-the-iot"&gt;
  &lt;/a&gt;
  What is Embedded Development and the IoT?
&lt;/h2&gt;

&lt;p&gt;Embedded programming is the concept of writing code for incredibly small computers (a.k.a. microcontrollers) that communicate with sensors (e.g. temperature, gas, humidity) or power servo motors that in turn control other devices. In the embedded space, we often talk about programming "firmware", which is essentially semi-permanent software loaded into non-volatile memory on a device (it's not &lt;strong&gt;soft&lt;/strong&gt;ware or &lt;strong&gt;hard&lt;/strong&gt;ware, it's &lt;strong&gt;firm&lt;/strong&gt;ware!).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An example programmable microcontroller from Blues Wireless, the Feather-compatible &lt;a href="https://blues.io/products/swan/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Swan&lt;/a&gt;:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--halFjMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpd508xkklclbjalsu3n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--halFjMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpd508xkklclbjalsu3n.jpg" alt="blues wireless feather-compatible swan mcu" width="880" height="615"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common languages used to write firmware for embedded devices are C/C++, Arduino (a simpler form of C), and Python derivatives like &lt;a href="https://micropython.org/"&gt;MicroPython&lt;/a&gt; and &lt;a href="https://circuitpython.org/"&gt;CircuitPython&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Embedded development is directly related to the Internet of Things (IoT) as these "things" we are building often need an Internet connection to upload the data they are gathering or the calculations they are creating.&lt;/p&gt;

&lt;p&gt;For instance a smart...belt?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-8qNt71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6kg0vapnxi36phjqezs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-8qNt71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6kg0vapnxi36phjqezs.png" alt="smart belt" width="700" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting slightly more practical, think about the following common devices, as they are all IoT projects at their core:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Irrigation systems&lt;/strong&gt; that measure rainfall and only turn on when needed;&lt;/li&gt;
&lt;li&gt;Gas/electric &lt;strong&gt;utility meters&lt;/strong&gt; that can relay home energy usage remotely;&lt;/li&gt;
&lt;li&gt;Home health &lt;strong&gt;monitoring devices&lt;/strong&gt; that provide insights previously only available in a hospital setting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what makes the IoT so fascinating: there are countless applications for the IoT to impact our lives in positive ways.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now let's learn how to build something fun with C#!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tiniest-net-frameworks"&gt;
  &lt;/a&gt;
  The Tiniest .NET Frameworks
&lt;/h2&gt;

&lt;p&gt;Both nanoFramework and TinyCLR are free frameworks for building .NET applications meant for deployment on resource-constrained embedded devices. They make it easy (or at least &lt;em&gt;easier&lt;/em&gt;) to use C# instead of Arduino, C/C++, or a Python derivative when programming firmware on microcontrollers.&lt;/p&gt;

&lt;p&gt;For .NET developers, this opens up an entire new world of embedded development. We can use the tools (Visual Studio) and languages (C#) that we've been using for years, all without worrying about the low-level hardware issues that can easily confound even the most dedicated embedded engineer.&lt;/p&gt;

&lt;p&gt;It does come with a catch though. Neither nanoFramework nor TinyCLR provide access to the full .NET Common Language Runtime (CLR), and they only provide a subset of the .NET base class libraries and APIs. This is primarily because of the memory constraints on these microcontrollers. Specifically for TinyCLR, you can find a &lt;a href="https://docs.ghielectronics.com/software/tinyclr/limitations.html"&gt;list of limitations in their docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What about the differences between nanoFramework and TinyCLR? At a high level they boil down down to the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.NET nanoFramework provides:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for a variety of popular ESP32- and STM32-based microcontrollers.&lt;/li&gt;
&lt;li&gt;A fully open source offering.&lt;/li&gt;
&lt;li&gt;Support from the .NET foundation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TinyCLR provides:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tight integration with specific proprietary microcontrollers.&lt;/li&gt;
&lt;li&gt;A superior getting started experience.&lt;/li&gt;
&lt;li&gt;An easier integrated debugging solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I did some experimentation with both platforms, as an IoT and embedded engineer noob, I did find the TinyCLR experience preferable (though I know of plenty of folks who are nanoFramework fans!). Therefore, the rest of this article is going to walk through the experience of getting started with .NET on the TinyCLR OS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tiny-hardware"&gt;
  &lt;/a&gt;
  The "Tiny" Hardware
&lt;/h2&gt;

&lt;p&gt;As just mentioned, TinyCLR OS only runs on microcontrollers (MCUs) provided by GHI Electronics. My MCU of choice is for this exercise is the &lt;a href="https://www.ghielectronics.com/sitcore/sbc/"&gt;FEZ Feather&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bdpd9E9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9webp8rxf2ecglrydabz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bdpd9E9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9webp8rxf2ecglrydabz.png" alt="fez feather mcu" width="650" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;em&gt;Feather&lt;/em&gt; aspect comes from the fact that it is compatible with the &lt;a href="https://learn.adafruit.com/adafruit-feather"&gt;Adafruit Feather specification&lt;/a&gt;. This means you can connect it to virtually any carrier board with header pins meant to accept a Feather-compatible MCU.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-tinyclr-os"&gt;
  &lt;/a&gt;
  Getting Started with TinyCLR OS
&lt;/h2&gt;

&lt;p&gt;Let's walk through some (relatively) simple steps to get the TinyCLR OS loaded onto your FEZ Feather microcontroller and write an embedded program using C#.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-tinyclr-os"&gt;
  &lt;/a&gt;
  Installing the TinyCLR OS
&lt;/h3&gt;

&lt;p&gt;Our first step is to install the latest version of the TinyCLR OS on the device. TinyCLR OS includes the .NET CLR which converts your compiled C# into instructions for the microcontroller. It's also used for interacting with Visual Studio (critical for loading the program onto the device and debugging).&lt;/p&gt;

&lt;p&gt;Connect your FEZ Feather to your Windows PC via a USB-C cable:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3NzCBMNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv64tqhtztajv9mijj1u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3NzCBMNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv64tqhtztajv9mijj1u.jpg" alt="connect fez feather" width="700" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the latest version of &lt;strong&gt;TinyCLR Config&lt;/strong&gt; and &lt;strong&gt;SITCore SC20xxx&lt;/strong&gt; firmware from the &lt;a href="https://docs.ghielectronics.com/software/tinyclr/downloads.html"&gt;GHI electronics download page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;TinyCLR Config&lt;/strong&gt;, choose the connected device in the &lt;strong&gt;Port&lt;/strong&gt; dropdown, and click &lt;strong&gt;Connect&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7-TCi4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5op2bljyhyvjursrfspc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7-TCi4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5op2bljyhyvjursrfspc.png" alt="tinyclr config port" width="496" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update the device firmware, click on the &lt;code&gt;...&lt;/code&gt; button next to the &lt;strong&gt;Update Firmware&lt;/strong&gt; button. A dialog will open allowing you to select the firmware file you previously downloaded and click on &lt;strong&gt;Update Firmware&lt;/strong&gt; to flash your device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jHbFAZj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amgakpwinvtulqgb4wpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHbFAZj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amgakpwinvtulqgb4wpd.png" alt="tinyclr os firmware" width="494" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once it's done, disconnect and reconnect the device and confirm that your firmware was updated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--liMvMeOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skw3qacua58vtf9fixff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--liMvMeOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skw3qacua58vtf9fixff.png" alt="tinyclr confirm firmware" width="497" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-visual-studio"&gt;
  &lt;/a&gt;
  Setting up Visual Studio
&lt;/h3&gt;

&lt;p&gt;You also need to perform a one-time configuration of Visual Studio (these instructions are compatible with both VS 2019 and 2022 community editions).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; Make sure you've already installed the ".NET Desktop Development" requirements in Visual Studio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Within Visual Studio, navigate to &lt;strong&gt;Extensions --&amp;gt; Manage Extensions&lt;/strong&gt;. Search for "tinyclr" to find and install the &lt;strong&gt;TinyCLR OS Project System&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFkA-x2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hga0swxs58zhv7w41cid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFkA-x2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hga0swxs58zhv7w41cid.png" alt="tinyclr visual studio extension" width="661" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Restart Visual Studio to enable the installer to complete the installation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-tiny-net-project"&gt;
  &lt;/a&gt;
  Your First "Tiny" .NET Project
&lt;/h3&gt;

&lt;p&gt;Re-open Visual Studio and create a new project, choosing &lt;strong&gt;TinyCLROS&lt;/strong&gt; from the platform dropdown list and selecting the &lt;strong&gt;C# TinyCLR Application&lt;/strong&gt; template:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYiyZR-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s2lwwy2q0ueu84ls600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYiyZR-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s2lwwy2q0ueu84ls600.png" alt="tinyclr new visual studio project" width="591" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your project will be pre-loaded with some boilerplate code and a &lt;code&gt;Program.cs&lt;/code&gt; file. This will be the starting point of your application.&lt;/p&gt;

&lt;p&gt;Next, we're going to perform the "Hello World!" of embedded programming: blinking an LED!&lt;/p&gt;

&lt;p&gt;Start by replacing &lt;em&gt;everything&lt;/em&gt; in &lt;code&gt;Program.cs&lt;/code&gt; with the following code. Have no fear, we'll walk through what's happening in this code:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using GHIElectronics.TinyCLR.Devices.Gpio;
using GHIElectronics.TinyCLR.Pins;
using System.Threading;

namespace TinyCLRApplication
{
    class Program
    {
        static void Main()
        {
            var LED = GpioController.GetDefault().OpenPin(SC20100.GpioPin.PE11);
            LED.SetDriveMode(GpioPinDriveMode.Output);

            while (true)
            {
                LED.Write(GpioPinValue.High);
                Thread.Sleep(100);

                LED.Write(GpioPinValue.Low);
                Thread.Sleep(100);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;em&gt;So what exactly is happening in this code?&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;code&gt;Main()&lt;/code&gt; method we are creating a reference to the onboard LED.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;LED.SetDriveMode(GpioPinDriveMode.Output)&lt;/code&gt; we are configuring the LED's pin as an &lt;em&gt;output&lt;/em&gt;, meaning it'll be in a state to manage the voltage (i.e. lighting) the LED.&lt;/li&gt;
&lt;li&gt;Next, we get in an infinite loop (don't worry, this is very common in embedded land!) with a &lt;code&gt;while (true)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We set the LED pin to &lt;code&gt;High&lt;/code&gt; (lighting it), wait 100 ms, then set the pin to &lt;code&gt;Low&lt;/code&gt; (turning it off), and waiting another 100ms, forever. This blinks the LED. 💡&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before you deploy the program to your device, you might notice that there are two NuGet packages to be installed first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GHIElectronics.TinyCLR.Devices.Gpio&lt;/li&gt;
&lt;li&gt;GHIElectronics.TinyCLR.Pins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure the device is still plugged into your PC's USB port. Click the &lt;strong&gt;Start&lt;/strong&gt; or &lt;strong&gt;F5&lt;/strong&gt; button in Visual Studio to compile and deploy the program. If everything works (should take 10-20 seconds) an LED on the board will blink until you unplug it or flash a new program:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWSGdmId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yswtb31fefdykp065lx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWSGdmId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yswtb31fefdykp065lx.gif" alt="tinyclr blink" width="216" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; You've literally just used C# code to control a microcontroller. This is huge! 💪&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-iot-to-the-mix"&gt;
  &lt;/a&gt;
  Adding IoT to the Mix
&lt;/h2&gt;

&lt;p&gt;Now that you're (relatively) comfortable with building a simple C# app for deployment on a tiny microcontroller, it's time to take the next step by adding the "I" to your IoT project.&lt;/p&gt;

&lt;p&gt;While some embedded systems can get away with storing data on an SD card for later retrieval, it's far more useful to actively transmit data as it comes in. Wi-Fi, LoRa, and Bluetooth are common technologies used in the IoT, but there is no more ubiquitous global solution for remotely transmitting data than cellular.&lt;/p&gt;

&lt;p&gt;It's also important to consider not only the raw technical ability of communicating over cellular, but also how you then get this data to a cloud endpoint, such as Microsoft Azure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-the-blues-wireless-notecard"&gt;
  &lt;/a&gt;
  Introducing the Blues Wireless Notecard
&lt;/h3&gt;

&lt;p&gt;Cellular has traditionally scared developers due to its archaic AT command syntax (it's an awful developer experience) and likewise businesses have been afraid of the price (per-device monthly plans add up fast). So the key to cellular success lies in a tiny pre-paid device-to-cloud data pump called a &lt;a href="https://blues.io/products/notecard/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urbmLeiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g151zpkr5pqs387k2mg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urbmLeiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g151zpkr5pqs387k2mg7.png" alt="blues wireless cellular notecard" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With both cellular and GPS capabilities (and 10 years + 500 MB of data included) the Notecard is a no-brainer for when you want to start pushing data to the cloud over LTE-M, NB-IoT, or Cat-1 cellular.&lt;/p&gt;

&lt;p&gt;But what about that strange M.2 edge connector at the bottom of the Notecard? How do you use this with the microcontroller we just programmed? The answer comes in the form of the &lt;a href="https://blues.io/products/notecarrier/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecarrier&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f10o4DaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3c6eg8tvv3fvvmw8vak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f10o4DaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3c6eg8tvv3fvvmw8vak.png" alt="blues wireless notecarrier-al" width="600" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Notecarrier acts as a &lt;em&gt;bridge&lt;/em&gt; between your MCU and the Notecard. It includes an embedded antenna, header connectors, and battery ports to allow you to easily connect it to your prototype.&lt;/p&gt;

&lt;p&gt;Here is the FEZ Feather wired up to a Notecard + Notecarrier, ready to send data to the cloud over cellular!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KT3Ls2OX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qw41casvgort1fw5ni9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KT3Ls2OX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qw41casvgort1fw5ni9.jpg" alt="fez feather and notecard" width="800" height="745"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The white board you see is called a breadboard, and is used to quickly create connections between the MCU and the Notecarrier.&lt;/p&gt;

&lt;p&gt;If you're following along at home, here are the connections being made with those jumper wires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supplying power to the Notecarrier from the FEZ via the &lt;code&gt;V+&lt;/code&gt; and &lt;code&gt;GND&lt;/code&gt; pins (the black/blue and orange/red wires).&lt;/li&gt;
&lt;li&gt;Communicating over I2C by connecting the &lt;code&gt;SCL&lt;/code&gt; and &lt;code&gt;SDA&lt;/code&gt; pins (the longer orange and green wires).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#all-json-all-the-time"&gt;
  &lt;/a&gt;
  All JSON, All the Time
&lt;/h3&gt;

&lt;p&gt;To me, the real beauty of the Notecard comes from its developer experience. Every command to (and every request from) the Notecard is JSON.&lt;/p&gt;

&lt;p&gt;For example, here is an API command that will tell you the current GPS location of a Notecard:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"req": "card.location"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And an example response from the Notecard:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "status": "GPS updated (58 sec, 41dB SNR, 9 sats) {gps-active}
            {gps-signal} {gps-sats} {gps}",
  "mode":   "periodic",
  "lat":    42.577600,
  "lon":    -70.871340,
  "time":   1598554399,
  "max":    25
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#adding-wireless-capabilities"&gt;
  &lt;/a&gt;
  Adding Wireless Capabilities
&lt;/h3&gt;

&lt;p&gt;Knowing all of this, let's see how easy it can be to send a small packet of data, over cellular, to the cloud.&lt;/p&gt;

&lt;p&gt;Once again, you can remove everything in your &lt;code&gt;Program.cs&lt;/code&gt; file and replace it with the following:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Bytewizer.TinyCLR.Drivers.Blues.Notecard;
using GHIElectronics.TinyCLR.Devices.I2c;
using GHIElectronics.TinyCLR.Pins;
using System.Diagnostics;

namespace TinyCLRApplication
{
    class Program
    {
        static void Main()
        {
            // setup I2C bus for Fez Feather
            var controller = I2cController.FromName(SC20100.I2cBus.I2c1);
            var notecard = new NotecardController(controller);

            // associate this Notecard with a Notehub.io project
            var request1 = new JsonRequest("hub.set");
            request1.Add("product", "com.blues.me:some_project"); // replace this with your product uid!

            var results1 = notecard.Request(request1);
            if (results1.IsSuccess)
                Debug.WriteLine(results1.Response);

            // create a mock JSON body object
            var body = new JsonObject();
            body.Add("temp", 35.5);
            body.Add("humid", 56.23);

            // create a "note" with the JSON body from above
            var request2 = new JsonRequest("note.add");
            request2.Add("body", body);
            request2.Add("sync", true);

            var results2 = notecard.Request(request2);

            if (results2.IsSuccess)
                Debug.WriteLine(results2.Response);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you look carefully, you can see that to program the Notecard, we are simply building JSON objects that correlate to commands available in the &lt;a href="https://dev.blues.io/reference/notecard-api/introduction/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecard API&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://dev.blues.io/reference/notecard-api/hub-requests/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot#hub-set"&gt;hub.set&lt;/a&gt; request associates the Notecard with a project on Notehub.io (more on &lt;a href="https://blues.io/services/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notehub&lt;/a&gt; in the next section!).&lt;/li&gt;
&lt;li&gt;We are creating a JSON object that stores some mock temperature and humidity data.&lt;/li&gt;
&lt;li&gt;We are sending this data (a &lt;a href="https://dev.blues.io/reference/glossary/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot#note"&gt;Note&lt;/a&gt; in Blues Wireless speak) to the cloud with a &lt;a href="https://dev.blues.io/reference/notecard-api/note-requests/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot#note-add"&gt;note.add&lt;/a&gt; request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before running this program, there is one more NuGet package to include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bytewizer.TinyCLR.Drivers.Blues.Notecard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and click &lt;strong&gt;Start&lt;/strong&gt; or hit &lt;strong&gt;F5&lt;/strong&gt; in VS to build and deploy your cellular-connected IoT project!&lt;/p&gt;

&lt;p&gt;In the debug output, you should see &lt;code&gt;{"total":1}&lt;/code&gt; which is the Notecard telling you that there is a single event being sent to the cloud.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-the-cloud"&gt;
  &lt;/a&gt;
  To the Cloud
&lt;/h3&gt;

&lt;p&gt;Yes, I got ahead of myself. We started pushing data to the cloud without fully understanding &lt;em&gt;where&lt;/em&gt; in the cloud the data was going!&lt;/p&gt;

&lt;p&gt;We first need to understand that a &lt;strong&gt;key benefit of the Notecard is security&lt;/strong&gt;. The device itself lives off of the public Internet. It's a cellular data pump, meaning it needs to connect to &lt;em&gt;secure proxy&lt;/em&gt; to deliver data over the Internet.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href="https://blues.io/services/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notehub&lt;/a&gt; comes into play. Notehub is a thin cloud service that securely receives and syncs data with virtually any cloud (think AWS, Azure, Google Cloud, or even your own custom MQTT or RESTful endpoint).&lt;/p&gt;

&lt;p&gt;To start, we can simply see this mock data appear in Notehub, ready to be routed to its final home on a big cloud ☁️:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5d4T_Ev5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6inym981ws4gmxoslug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5d4T_Ev5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6inym981ws4gmxoslug.png" alt="our mock data in notehub" width="829" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing-data-to-azure"&gt;
  &lt;/a&gt;
  Routing Data to Azure
&lt;/h3&gt;

&lt;p&gt;Since Notehub is not the final resting place of our data, naturally we will want to automatically sync this data with a big cloud such as &lt;a href="https://azure.microsoft.com/"&gt;Azure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7A4ljfst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bf47vxkhka29vr27z8wz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7A4ljfst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bf47vxkhka29vr27z8wz.png" alt="notecard data in microsoft azure" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do so, you can follow the &lt;a href="https://dev.blues.io/guides-and-tutorials/routing-data-to-cloud/azure/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;in-depth routing tutorial for Azure&lt;/a&gt; that walks through building your own cloud-based dashboard using data delivered with the Notecard.&lt;/p&gt;

&lt;p&gt;Finally, while it's outside the scope of this article, as data is being passed to Azure you can &lt;a href="https://dev.blues.io/notecard/notecard-guides/jsonata-1-2-3/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;alter and optimize your JSON payloads with JSONata&lt;/a&gt; on-the-fly. Using JSONata you can write server-side functions that can alter data to conform to whatever structures your endpoint is expecting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;If this has piqued your curiosity, I highly recommend taking the following steps in your C# IoT journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read more about what the &lt;a href="https://www.nanoframework.net/"&gt;.NET nanoFramework&lt;/a&gt; and &lt;a href="https://www.ghielectronics.com/tinyclr/"&gt;TinyCLR&lt;/a&gt; have to offer to .NET developers.&lt;/li&gt;
&lt;li&gt;If you want to follow this tutorial, grab your own &lt;a href="https://www.ghielectronics.com/sitcore/sbc/"&gt;FEZ Feather&lt;/a&gt;, &lt;a href="https://shop.blues.io/collections/notecard/products/note-nbgl-500?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecard&lt;/a&gt;, and &lt;a href="https://shop.blues.io/products/carr-al?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecarrier-AL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you want to tinker with cloud connectivity with Python on a Raspberry Pi or by writing some Arduino, check out the &lt;a href="https://shop.blues.io/collections/development-kits?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Blues Wireless starter kits&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy hacking with C# and the IoT! 👩‍💻&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>iot</category>
      <category>azure</category>
    </item>
    <item>
      <title>MovieFlixer 🚀</title>
      <author>Rohit Dhas</author>
      <pubDate>Mon, 10 Jan 2022 18:34:33 +0000</pubDate>
      <link>https://dev.to/rohitdhas/movieflixer-al0</link>
      <guid>https://dev.to/rohitdhas/movieflixer-al0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;MovieFlixer is a web app where you can search 🔍 for your favorite movies and shows, you can Buy 💲 those movies and also rate ⭐ them out of 10.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rohitdhas"&gt;
        rohitdhas
      &lt;/a&gt; / &lt;a href="https://github.com/rohitdhas/Dev-Hackathon"&gt;
        Dev-Hackathon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      MovieFlixer🚀 - Search🔍, Buy💲 and rate👍🏻 your favorite movies and shows
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
   &lt;br&gt;
   &lt;a href="https://movieflixer.vercel.app/" rel="nofollow"&gt;&lt;img width="150px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqPUjvUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohitdhas/Dev-Hackathon./frontend/public/logo.png"&gt;&lt;/a&gt;
   &lt;/p&gt;
&lt;h3&gt;
Movie Flixer&lt;/h3&gt;
   &lt;p&gt;Search 🔍 and Rate ⭐ your Favorite Movies and shows!&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b7395b00d152dc8f19cec61f582369bd580e31b8ed93d34646ec43aa675baa7c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578742d626c61636b3f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/b7395b00d152dc8f19cec61f582369bd580e31b8ed93d34646ec43aa675baa7c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578742d626c61636b3f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465" alt="Next JS"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e9b080a6541e5355827ea91b6a0302cbbc54af4705b0c6b0f1561a0957ced2fb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5461696c77696e645f4353532d3338423241433f7374796c653d666f722d7468652d6261646765266c6f676f3d7461696c77696e642d637373266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/e9b080a6541e5355827ea91b6a0302cbbc54af4705b0c6b0f1561a0957ced2fb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5461696c77696e645f4353532d3338423241433f7374796c653d666f722d7468652d6261646765266c6f676f3d7461696c77696e642d637373266c6f676f436f6c6f723d7768697465" alt="Tailwind CSS"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8286a45a106e1a3c07489f83a38159981d888518a740b59c807ffc1b7b1e2f7b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f657870726573732e6a732d2532333430346435392e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d65787072657373266c6f676f436f6c6f723d253233363144414642"&gt;&lt;img src="https://camo.githubusercontent.com/8286a45a106e1a3c07489f83a38159981d888518a740b59c807ffc1b7b1e2f7b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f657870726573732e6a732d2532333430346435392e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d65787072657373266c6f676f436f6c6f723d253233363144414642" alt="Express.js"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d7b100e379663ee40a20989e6c61737e6396c1dafc3a7c6d2ada8d4447eb0e4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732d3644413535463f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/7d7b100e379663ee40a20989e6c61737e6396c1dafc3a7c6d2ada8d4447eb0e4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732d3644413535463f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465" alt="NodeJS"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c839570bc71901106b11b8411d9277a6a8356a9431e4a16d6c26db82caab7d62/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6f6e676f44422d2532333465613934622e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/c839570bc71901106b11b8411d9277a6a8356a9431e4a16d6c26db82caab7d62/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6f6e676f44422d2532333465613934622e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465" alt="MongoDB"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/22547aa007860433c23771dfd59d184297d9433adcf3082be8515a28a16cd875/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2d2532333030303030302e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/22547aa007860433c23771dfd59d184297d9433adcf3082be8515a28a16cd875/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2d2532333030303030302e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465" alt="Vercel"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js v14.18.2^&lt;/li&gt;
&lt;li&gt;NPM v6.14.0^&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/rohitdhas/Dev-Hackathon.git

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; frontend
npm install

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; backend
npm install&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
NOTE&lt;/h3&gt;
&lt;p&gt;You'll need a &lt;code&gt;.env&lt;/code&gt; file in the &lt;code&gt;backend&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;It looks like this -&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;PORT = 8080

MONGO_URI = Database connection String

EMAIL = Your Email

PASSWORD = Your Password&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Starting the application&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; frontend

npm run dev&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; backend

node server.js&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/rohitdhas/Dev-Hackathon"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;I built the &lt;code&gt;frontend&lt;/code&gt; of this app with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next JS (TypeScript)&lt;/li&gt;
&lt;li&gt;Tailwind CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the &lt;code&gt;Backend&lt;/code&gt; with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node JS&lt;/li&gt;
&lt;li&gt;Express JS&lt;/li&gt;
&lt;li&gt;Nodemailer&lt;/li&gt;
&lt;li&gt;Stripe&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#how-i-built-this-web-app"&gt;
  &lt;/a&gt;
  How I built this Web App
&lt;/h3&gt;

&lt;p&gt;First of all I created a database and imported some free sample data provided by &lt;code&gt;mongodb&lt;/code&gt; to build my application.&lt;/p&gt;

&lt;p&gt;Then I built an &lt;strong&gt;Express Server&lt;/strong&gt; and created few API routes, so that I can simply make API calls from frontend to perform CRUD operations on the data in the database.&lt;/p&gt;

&lt;p&gt;And lastly, built the frontend with &lt;code&gt;Next JS&lt;/code&gt; and &lt;code&gt;Tailwind CSS&lt;/code&gt; to present data coming from DB neatly to user.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#key-features-of-this-web-app"&gt;
  &lt;/a&gt;
  Key Features of this Web App 💡
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-search-autocomplete"&gt;
  &lt;/a&gt;
  1. Search Autocomplete 🔍
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Implemented using Atlas Search&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w44Yqzpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcmzw6gmyro11s4qkqzl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w44Yqzpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcmzw6gmyro11s4qkqzl.gif" alt="movieflixer autocomplete gif" width="600" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Autocomplete is pretty handy because it predicts whatever you want to type even if you make silly typos 😄 like here I typed &lt;u&gt;&lt;em&gt;kong fu pa&lt;/em&gt;&lt;/u&gt; and it guessed correct movie name.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h5&gt;

&lt;p&gt;Whenever you start typing in the input field it makes a request to an API endpoint along with the input string.&lt;/p&gt;

&lt;p&gt;That API endpoint aggregates data based on input string using an Aggregation Pipeline with &lt;code&gt;search&lt;/code&gt; stage, and then sends the results in response.&lt;/p&gt;

&lt;p&gt;And finally, those search results are being used to render autocomplete list on frontend.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#2-mailing-system"&gt;
  &lt;/a&gt;
  2. Mailing System 📧
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Implemented using Realm Triggers &amp;amp; Function&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this web application you receive an email on rating ⭐ a movie or on successfully purchasing 💲 a movie. For both the cases the logic is almost same.&lt;/p&gt;

&lt;p&gt;To achieve this, I am making use of Database triggers which automatically responds based on certain events.&lt;/p&gt;

&lt;p&gt;So, When you rate a movie it inserts a document in &lt;code&gt;ratings&lt;/code&gt; collection. On this insert operation the trigger fires and executes a &lt;code&gt;Realm Function&lt;/code&gt; which is making an API call telling the server to send an email to the given mail address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hQ05Nhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc81hy5fkv4v79h04tjq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hQ05Nhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc81hy5fkv4v79h04tjq.gif" alt="Rating Gif" width="800" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should receive an email like this after rating a movie&lt;/em&gt; 👇🏻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPjPRaAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95jmti6a9xp7i23uiaoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPjPRaAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95jmti6a9xp7i23uiaoa.png" alt="Email Screenshot" width="573" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, when you click on &lt;strong&gt;&lt;em&gt;Proceed to Purchase&lt;/em&gt;&lt;/strong&gt; button it inserts a document in &lt;code&gt;purchases&lt;/code&gt; collection, and then after your checkout session is successfully completed it updates the corresponding document in DB. Now, on this update operation the trigger fires and executes a &lt;code&gt;Realm Function&lt;/code&gt; which helps the app to send an email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwCWTxjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r9g8tva6w5ot05wlefk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwCWTxjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r9g8tva6w5ot05wlefk.gif" alt="Movie Purchase Gif" width="800" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should receive an email like this after buying a movie&lt;/em&gt; 👇🏻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KK86zdNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipwhkwyb6at3z2980p4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KK86zdNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipwhkwyb6at3z2980p4d.png" alt="Purchase Screenshot" width="880" height="299"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now here's the link to my project. Go ahead and explore rest of the application 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://movieflixer.vercel.app/"&gt;MovieFlixer URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And please let me know your thoughts on it below 👇🏻&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>mongodb</category>
    </item>
  </channel>
</rss>
