<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>4 Ways You Can Organise Your TODOs as a Software Engineer</title>
      <author>Alex Omeyer</author>
      <pubDate>Wed, 26 May 2021 10:26:58 +0000</pubDate>
      <link>https://dev.to/stepsize/4-ways-you-can-organise-your-todos-as-a-software-engineer-57kn</link>
      <guid>https://dev.to/stepsize/4-ways-you-can-organise-your-todos-as-a-software-engineer-57kn</guid>
      <description>&lt;p&gt;TODOs are a tricky subject for developers. Many codebases are guilty of having TODOs linger around while nobody knows who’s responsible for a TODO or even has the required context to tackle it. Yet, should we feel ashamed for our lingering TODOs?&lt;/p&gt;

&lt;p&gt;Many developers have adopted the approach of adding TODOs to their project’s code. However, it’s not necessarily the best approach to manage them. It makes more sense to extract TODOs to a centralised interface that allows you to actively manage them and add metadata such as context, feature descriptions, requirements, or even relevant code snippets.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-article-discusses-the-following-questions-related-to-todos"&gt;
  &lt;/a&gt;
  This article discusses the following questions related to TODOs:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What are the different reasons software engineers use TODOs?&lt;/li&gt;
&lt;li&gt;What are the problems with adding TODOs to your codebase?&lt;/li&gt;
&lt;li&gt;What are the best practices for managing TODOs?&lt;/li&gt;
&lt;li&gt;What’s the best way to manage TODOs?&lt;/li&gt;
&lt;li&gt;Why Developers Use TODOs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are different reasons why software engineers use TODOs in projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reminder&lt;/strong&gt;: Imagine you are developing a new feature, and you come across a snippet of code that needs &lt;a href="https://www.stepsize.com/blog/the-ultimate-engineers-guide-to-refactoring?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;refactoring&lt;/a&gt;. However, the refactoring doesn’t affect the new feature directly so you note it to remind yourself. It’s a great example of quickly noting down a small action as a TODO that needs to be performed at a later point in time. On the other hand, the developer thinks it’s too much overhead to create a new issue or task in a project management tool like JIRA or Asana.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TODOs replace a project management tool&lt;/strong&gt;: I’ve been guilty of this myself. I want to avoid setting up a project board for small projects because it feels like a waste of time. For that reason, many developers add dozens of TODOs to their project’s code to replace the need for a project management tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep pull requests small&lt;/strong&gt;: Some developers prefer small pull requests because they are easier to review. Therefore, they create multiple smaller PRs to tackle a single task. To keep track of the work that needs to be done as part of this task, they include TODOs to their PRs to remind themselves of unfinished work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: Developers often abuse TODOs as tips for the next developer working on the same code. A TODO might describe how to proceed with the code or possible extensions for the code when you’ve just started a new project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;IDE support&lt;/strong&gt;: Many IDEs have adopted functionality to highlight and search TODOs in your codebase. For that reason, more and more developers assume it’s a best practice to add TODOs to their code regularly. For instance, the most popular TODO management extension for &lt;a href="https://www.stepsize.com/blog/how-to-refactor-code-in-visual-studio-code"&gt;Visual Studio Code&lt;/a&gt; is &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;“Todo Tree”&lt;/a&gt; with more than 1.1 million installs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cD2XkzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n4dod7a1xjw163wj79i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cD2XkzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n4dod7a1xjw163wj79i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Source: &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree extension&lt;/a&gt; Visual Studio Code)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-problems-with-adding-todos-to-your-codebase"&gt;
  &lt;/a&gt;
  What Are the Problems With Adding TODOs to Your Codebase?
&lt;/h2&gt;

&lt;p&gt;The most important problem with TODOs is their lack of context. Developers often write short TODOs that don’t give a lot of context to solve them. Therefore, TODOs are often only resolvable by a few people who have a lot of knowledge about the codebase. It’s even possible that only the engineer who wrote the TODO knows what needs to happen.&lt;/p&gt;

&lt;p&gt;Moreover, TODOs don’t have a clear owner except for the creator of the TODO. When you encounter a TODO when working on somebody else’s code, do you remove the TODO or try to resolve it? It’s a tricky question to answer. I remember experiencing TODOs as a college’s personal note that I wasn’t allowed to touch.&lt;/p&gt;

&lt;p&gt;Now let’s think about what happens with TODOs. How often do TODOs end up in the master/main branch without being addressed? Even months after merging the TODO into the project’s code, it remains unaddressed. It mainly occurs because of their lack of ownership and context. &lt;/p&gt;

&lt;p&gt;Lastly, TODOs expire quickly. Code changes rapidly, especially within a large development team. This means that TODOs aren’t valid anymore or don’t make sense in the current codebase. Again, nobody dares to remove them because of their lack of context. To solve this problem, some companies use different &lt;a href="https://www.stepsize.com/blog/tools-to-track-and-manage-technical-debt?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;project management and technical debt&lt;/a&gt; tools that let you set deadlines and add context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-manage-todos-correctly"&gt;
  &lt;/a&gt;
  How To Manage TODOs Correctly?
&lt;/h2&gt;

&lt;p&gt;These guidelines are not an exact rulebook for managing TODOs because it depends on your team’s preferences, size, and management style. Hence, here’s a list of four tips that help you to better manage your team’s TODOs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-todos-for-minor-issues"&gt;
  &lt;/a&gt;
  1. Use TODOs for minor issues
&lt;/h3&gt;

&lt;p&gt;Software engineers should only use TODOs for defining microtasks that any team member can quickly tackle. For instance, you could add a TODO to remind developers about changing the name of a module to a more descriptive name. It’s not a task that requires a separate ticket in a project management tool.&lt;/p&gt;

&lt;p&gt;Bigger issues or tasks require the use of a project management tool. It allows you to define specifications for the issue and plan it as part of a &lt;a href="https://www.atlassian.com/agile/scrum/sprints"&gt;development sprint&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-sufficient-context"&gt;
  &lt;/a&gt;
  2. Add sufficient context
&lt;/h3&gt;

&lt;p&gt;Solely adding TODOs in the codebase is not the best way to raise issues with code. If you’re looking for ways to organise your issues and add context, try out &lt;a href="https://www.stepsize.com/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Stepsize&lt;/a&gt;. It allows engineers to import their TODOs into the platform, to organise them and add context such as linking code, dependencies and add metrics such as hours lost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-use-a-consistent-format-for-todos"&gt;
  &lt;/a&gt;
  3. Use a consistent format for TODOs
&lt;/h3&gt;

&lt;p&gt;A consistent format for your TODOs allows you to better manage them. For instance, you could opt for a format that defines a due date and an owner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@TODO &amp;lt;due date&amp;gt; &amp;lt;owner&amp;gt; &amp;lt;task details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you could define more properties like references to code snippets or relevant files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@TODO &amp;lt;due date&amp;gt; &amp;lt;owner&amp;gt; &amp;lt;task details&amp;gt; &amp;lt;link 1&amp;gt; &amp;lt;link 2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you have a consistent format, it’s much easier to accept TODOs during code reviews that fit the defined format. It prevents your team from ambiguous TODOs ending up in your project. On top of that, a fixed format allows you to search TODOs in your codebase quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-define-rules-for-todos"&gt;
  &lt;/a&gt;
  4. Define rules for TODOs
&lt;/h3&gt;

&lt;p&gt;Sit together with your team to set rules for TODOs. For instance, define for which kind of tasks you allow the usage of TODOs. By clarifying this, it’s much easier to identify a microtask versus a task that requires the assistance of a project management tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-best"&gt;
  &lt;/a&gt;
  What’s Best?
&lt;/h2&gt;

&lt;p&gt;To add my opinion, I’m not a big fan of managing TODOs within the codebase. However, this strategy can work for smaller teams with the right set of rules. Don’t forget to provide context and identify a clear owner.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was written by Michiel Mulders. Michiel is a passionate blockchain developer who loves writing technical content. Besides that, he loves learning about marketing, UX psychology, and entrepreneurship. When he’s not writing, he’s probably enjoying a Belgian beer!&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Also published on: &lt;a href="https://www.stepsize.com/blog/how-to-organise-your-todos-as-a-software-engineer?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Managing Technical Debt&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>programming</category>
      <category>refactorit</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Build Static Blog With Jekyll For Free On Github Pages</title>
      <author>shoaiyb sysa</author>
      <pubDate>Wed, 26 May 2021 10:10:35 +0000</pubDate>
      <link>https://dev.to/shoaiyb/build-static-blog-with-jekyll-for-free-on-github-pages-43o</link>
      <guid>https://dev.to/shoaiyb/build-static-blog-with-jekyll-for-free-on-github-pages-43o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-github"&gt;
  &lt;/a&gt;
  What is Github?
&lt;/h2&gt;

&lt;p&gt;To understand GitHub, you must first have an understanding of Git.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is Git?
&lt;/h3&gt;

&lt;p&gt;Git is an open-source version control system that was started by Linus Torvalds—the same person who created Linux. Git is similar to other version control systems—Subversion, CVS, and Mercurial to name a few.&lt;br&gt;&lt;br&gt;
So, Git is a version control system, but what does that mean? When developers create something (an app, for example), they make constant changes to the code, releasing new versions up to and after the first official (non-beta) release.&lt;br&gt;&lt;br&gt;
Version control systems keep these revisions straight, storing the modifications in a central repository. This allows developers to easily collaborate, as they can download a new version of the software, make changes, and upload the newest revision. Every developer can see these new changes, download them, and contribute&lt;br&gt;&lt;br&gt;
Similarly, people who have nothing to do with the development of a project can still download the files and use them. Most Linux users should be familiar with this process, as using Git, Subversion, or some other similar method is pretty common for downloading needed files—especially in preparation for compiling a program from source code (a rather common practice for Linux geeks).&lt;br&gt;&lt;br&gt;
Git is the preferred version control system of most developers, since it has multiple advantages over the other systems available. It stores file changes more efficiently and ensures file integrity better. If you’re interested in knowing the details, the &lt;a href="http://git-scm.com/book/en/Getting-Started-Git-Basics"&gt;Git Basics page&lt;/a&gt; has a thorough explanation on how Git works.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-hub-in-github"&gt;
  &lt;/a&gt;
  The 'Hub' in Github
&lt;/h3&gt;

&lt;p&gt;We’ve established that Git is a version control system, similar but better than the many alternatives available.&lt;br&gt;&lt;br&gt;
So, what makes GitHub so special? Git is a command-line tool, but the center around which all things involving Git revolve is the hub—GitHub.com where developers store their projects and network with like minded people.&lt;br&gt;&lt;br&gt;
Let’s go over a few of the main reasons that geeks like to use GitHub, and learn some terminology along the way.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h3&gt;

&lt;p&gt;A repository (usually abbreviated to “repo”) is a location where all the files for a particular project are stored.&lt;br&gt;&lt;br&gt;
Each project has its own repo, and you can access it with a unique URL.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forking-a-repo"&gt;
  &lt;/a&gt;
  Forking a Repo
&lt;/h3&gt;

&lt;p&gt;“Forking” is when you create a new project based off of another project that already exists.&lt;br&gt;&lt;br&gt;
This is an amazing feature that vastly encourages the further development of programs and other projects.&lt;br&gt;&lt;br&gt;
If you find a project on GitHub that you’d like to contribute to, you can fork the repo, make the changes you’d like, and release the revised project as a new repo. If the original repository that you forked to create your new project gets updated, you can easily add those updates to your current fork.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull-requests"&gt;
  &lt;/a&gt;
  Pull Requests
&lt;/h3&gt;

&lt;p&gt;You’ve forked a repository, made a great revision to the project, and want it to be recognized by the original developers—maybe even included in the official project/repository. You can do so by creating a pull request. The authors of the original repository can see your work, and then choose whether or not to accept it into the official project.&lt;br&gt;&lt;br&gt;
Whenever you issue a pull request, GitHub provides a perfect medium for you and the main project’s maintainer to communicate.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-networking"&gt;
  &lt;/a&gt;
  Social networking
&lt;/h3&gt;

&lt;p&gt;The social networking aspect of GitHub is probably its most powerful feature, allowing projects to grow more than just about any of the other features offered.&lt;br&gt;&lt;br&gt;
Each user on GitHub has their own profile that acts like a resume of sorts, showing your past work and contributions to other projects via pull requests.&lt;br&gt;&lt;br&gt;
Project revisions can be discussed publicly, so a mass of experts can contribute knowledge and collaborate to advance a project forward. Before the advent of GitHub, developers interested in contributing to a project would usually need to find some means of contacting the authors—probably by email—and then convince them that they can be trusted and their contribution is legit.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changelogs"&gt;
  &lt;/a&gt;
  Changelogs
&lt;/h3&gt;

&lt;p&gt;When multiple people collaborate on a project, it’s hard to keep track revisions—who changed what, when, and where those files are stored.&lt;br&gt;&lt;br&gt;
GitHub takes care of this problem by keeping track of all the changes that have been pushed to the repository.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-isnt-just-for-developers"&gt;
  &lt;/a&gt;
  GitHub Isn’t Just for Developers
&lt;/h3&gt;

&lt;p&gt;All this talk about how GitHub is ideal for programmers may have you believing that they are the only ones who will find it useful. Although it’s a lot less common, you can actually use GitHub for any types of files. If you have a team that is constantly making changes to a word document, for example,  you could use GitHub as your version control system. This practice isn’t common, since there are better alternatives in most cases, but it’s something to keep in mind.&lt;br&gt;&lt;br&gt;
Now that you know what GitHub is all about, and you're ready to get to the next step. and be sure to check out their.     &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-pages"&gt;
  &lt;/a&gt;
  What is Github Pages
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; is a free place to store the files that run a website and host that website for people to visit (it only works for particular types of website, like basic HTML sites or Jekyll sites, and does not host databases).    &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jekyll"&gt;
  &lt;/a&gt;
  What is Jekyll?
&lt;/h2&gt;

&lt;p&gt;Jekyll is a website generator that’s designed for building minimal, static blogs to be hosted on GitHub Pages.&lt;br&gt;&lt;br&gt;
It is a static site generator. It takes text written in your favorite markup language and uses layouts to create a static website. You can tweak the site’s look and feel, URLs, the data displayed on the page, and more.&lt;br&gt;&lt;br&gt;
Jekyll takes your content written in Markdown, passes it through your templates and spits it out as a complete static website, ready to be served. GitHub Pages conveniently serves the website directly from your GitHub repository so that you don’t have to deal with any hosting.&lt;br&gt;&lt;br&gt;
Here are some websites that were created with Jekyll:     &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://sysa.ml/"&gt;shoaiyb sysa&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jekyllrb.com"&gt;Jekyll&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#purpose-of-jekyll"&gt;
  &lt;/a&gt;
  Purpose of Jekyll
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://tom.preston-werner.com"&gt;Tom Preston-Werner&lt;/a&gt; created Jekyll to enable people to blog using a simple static HTML website, with all of the content hosted and version-controlled on Git repository.&lt;br&gt;&lt;br&gt;
The goal was to eliminate the complexity of other blogging platforms by creating a workflow that allows you to blog like a hacker.     &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On Sunday, October 19th, I sat down in my San Francisco apartment with a glass of apple cider and a clear mind. After a period of reflection, I had an idea. While I’m not specifically trained as an author of prose, I am trained as an author of code. What would happen if I approached blogging from a software development perspective? What would that look like?     &lt;/p&gt;

&lt;p&gt;Over the last month I’ve brought these concepts to fruition and I’m pleased to announce &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
-- Tom Preston-Werner       &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reminder"&gt;
  &lt;/a&gt;
  Reminder
&lt;/h2&gt;

&lt;p&gt;Here’s a quick reminder of what you need to know about this option:    &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Price: FREE&lt;/li&gt;
&lt;li&gt;Difficulty: Medium&lt;/li&gt;
&lt;li&gt;Knowledge: Git, Markdown&lt;/li&gt;
&lt;li&gt;Required Tools: GitHub account, Internet Browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Totally Free
&lt;/li&gt;
&lt;li&gt;No database
&lt;/li&gt;
&lt;li&gt;No CMS
&lt;/li&gt;
&lt;li&gt;Security
&lt;/li&gt;
&lt;li&gt;Design control
&lt;/li&gt;
&lt;li&gt;Super fast (only static files)
&lt;/li&gt;
&lt;li&gt;Easy to make changes (edit, commit &amp;amp; push)
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;A bit of tech knowledge is required
&lt;/li&gt;
&lt;li&gt;Need to pay for a domain name (to avoid the url myname.github.io)
&lt;/li&gt;
&lt;li&gt;Have to use Disqus for comments
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>jekyll</category>
      <category>github</category>
      <category>develop</category>
      <category>build</category>
    </item>
    <item>
      <title>Lessons learned: AWS AppSync Subscriptions</title>
      <author>Filip Pýrek</author>
      <pubDate>Wed, 26 May 2021 10:06:32 +0000</pubDate>
      <link>https://dev.to/aws-builders/lessons-learned-aws-appsync-subscriptions-jek</link>
      <guid>https://dev.to/aws-builders/lessons-learned-aws-appsync-subscriptions-jek</guid>
      <description>&lt;h1&gt;
  &lt;a href="#aws-appsync"&gt;
  &lt;/a&gt;
  AWS AppSync
&lt;/h1&gt;

&lt;p&gt;AWS AppSync, simply said API Gateway for GraphQL since it allows you to connect your GraphQL schema to different data sources like RDS, DynamoDB, Lambda, HTTP endpoint etc.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are using AppSync in our Purple Apps to power application APIs.&lt;br&gt;
Learn more in &lt;a href="https://github.com/purple-technology/purple-stack/tree/master/api#readme"&gt;Purple Stack API docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-appsync-subscriptions"&gt;
  &lt;/a&gt;
  The AppSync Subscriptions
&lt;/h1&gt;

&lt;p&gt;First we were excited to see that AppSync supports GraphQL subscriptions. But the excitement went down slightly when we discovered that they are tightly coupled with mutations.&lt;/p&gt;

&lt;p&gt;This feature seems to be nice when working on some super simple CRUD system, but when you start building a bigger application which has a lot of business logic hidden in asynchronous background processes like Step Functions, it starts to fall short.&lt;/p&gt;

&lt;p&gt;We solved that problem by creating dummy mutations with pass-through lambda resolvers which can be &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/security.html#aws-iam-authorization"&gt;invoked only by IAM users&lt;/a&gt;.&lt;br&gt;
Later on we discovered "&lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/tutorial-local-resolvers.html"&gt;local resolvers&lt;/a&gt;" which can do the same job with no need for invoking lambda function.&lt;/p&gt;

&lt;p&gt;Along the way we've stumbled upon some specific AppSync behaviours which are not obvious at first sight and information about them is "hidden" deep down in the documentation within complex sentences.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#1-subscription-arguments-are-matched-against-the-mutation-response-fields-not-against-the-mutation-arguments"&gt;
  &lt;/a&gt;
  1. Subscription arguments are matched against the mutation response fields, not against the mutation arguments.
&lt;/h2&gt;

&lt;p&gt;Nowhere in the documentation is it said how exactly the subscription arguments matching  magic works. It’s unclear whether the matching is done against the mutation arguments or the mutation response fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# filtering by "argA" ❌&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="c"&gt;# filtering by "fieldF" ✅&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-the-subscription-response-must-be-optional"&gt;
  &lt;/a&gt;
  2. The subscription response must be optional
&lt;/h2&gt;

&lt;p&gt;I don't understand exactly why, but the subscription response must be optional. AppSync allows you to successfully save the schema with a required subscription response, but when you try to connect to the subscription from a frontend client, it starts throwing some shallow error which doesn't explicitly tell you that subscription responses must be optional. And then you spend several hours trying to figure out where the problem is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# AddItemResponse is optinal  ✅&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="c"&gt;# AddItemResponse is required ❌&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-a-subscription-message-contains-only-the-fields-which-were-requested-by-the-mutation-other-fields-will-be-null"&gt;
  &lt;/a&gt;
  3. A subscription message contains only the fields which were requested by the mutation - other fields will be null
&lt;/h2&gt;

&lt;p&gt;After some time I've found out that this is explained in three big paragraphs in &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-data.html#using-subscription-arguments"&gt;the docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The point is that even though your lambda resolver is returning values for all the mutation fields, an AppSync subscription is only seeing the mutation fields which were selected in the mutation request. This is probably caused by the fact that resolver doesn't have to return values for fields which are not requested in the mutation request.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#graphql-schema"&gt;
  &lt;/a&gt;
  GraphQL Schema
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#mutation-called-on-backend-in-some-asynchronous-process"&gt;
  &lt;/a&gt;
  Mutation called on backend in some asynchronous process
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#subscription-statement-on-frontend"&gt;
  &lt;/a&gt;
  Subscription statement on frontend
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SubscribeOnAddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#resulting-subscription-message"&gt;
  &lt;/a&gt;
  Resulting subscription message
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;fieldA:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'valueA'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;fieldB:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;was&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;requested&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;fieldC:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-if-the-filtering-field-is-not-specified-in-the-mutation-response-the-subscription-is-not-fired"&gt;
  &lt;/a&gt;
  4. If the filtering field is not specified in the mutation response, the subscription is not fired
&lt;/h2&gt;

&lt;p&gt;This feature could be inferred from the first point, but still it's an important thing to realize.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#graphql-schema"&gt;
  &lt;/a&gt;
  GraphQL Schema
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#mutation-called-on-backend-in-some-asynchronous-process"&gt;
  &lt;/a&gt;
  Mutation called on backend in some asynchronous process
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#subscription-statement-on-frontend"&gt;
  &lt;/a&gt;
  Subscription statement on frontend
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SubscribeOnAddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the subscription doesn't get fired because the mutation is not requesting &lt;code&gt;fieldA&lt;/code&gt; which is used for filtering in the subscription data.&lt;/p&gt;

&lt;p&gt;Even though your lambda resolver also returned a value for &lt;code&gt;fieldA&lt;/code&gt;, it's not going to work because matching happens after selecting the requested fields - not before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-the-subscription-resolver-is-optional-but-it-can-be-used-for-authorization"&gt;
  &lt;/a&gt;
  5. The subscription resolver is optional - but it can be used for authorization
&lt;/h2&gt;

&lt;p&gt;When I was testing subscriptions, I asked myself, "what happens if I create a lambda resolver for the subscription?" So I tried and I discovered that the subscription resolver is called every time before a new subscription connection is established.&lt;/p&gt;

&lt;p&gt;It seems like the subscription resolver is meant for authorization, because it doesn't really matter what you return as an output for the resolver. Only thing that matters is if the resolver function succeeds or fails. If it succeeds, a connection is established; if it fails, an error is sent to the frontend.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#graphql-schema"&gt;
  &lt;/a&gt;
  GraphQL Schema
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#subscription-resolver"&gt;
  &lt;/a&gt;
  Subscription resolver
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access denied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;AppSync is a nice and useful service but it still has some space for improvements and new features which we are definitely looking forward to.&lt;/p&gt;

&lt;p&gt;Hopefully this article made your life easier in case you've been struggling with AppSync and you have a better overview of what you can do with it.&lt;/p&gt;

&lt;p&gt;With ❤️ made in Brno.&lt;/p&gt;

&lt;p&gt;Checkout more of our articles on &lt;a href="https://blog.purple-technology.com/"&gt;Purple Technology blog&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>appsync</category>
      <category>graphql</category>
    </item>
    <item>
      <title>5 most underrated skills of a top developer</title>
      <author>Anubhav Singhal ☃️</author>
      <pubDate>Wed, 26 May 2021 10:01:32 +0000</pubDate>
      <link>https://dev.to/anubhavitis/5-most-underrated-skills-of-a-top-developer-bin</link>
      <guid>https://dev.to/anubhavitis/5-most-underrated-skills-of-a-top-developer-bin</guid>
      <description>&lt;p&gt;You all might have stumbled upon blogs like &lt;strong&gt;"Best books you should read to become a top developer"&lt;/strong&gt;, &lt;strong&gt;"Best frameworks you should learn to become a successful developer"&lt;/strong&gt;, etc. We all aspire to be ninja developers, and so, we try to gain more and more understanding of technical concepts.&lt;/p&gt;

&lt;p&gt;Today, I am going to take you through some of the most basic, yet important skills, that bring a very significant impact upon a developer's life. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#1-touch-typing"&gt;
  &lt;/a&gt;
  #1 Touch typing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jQZ3U2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l59adp4wrtfhig53s4ld.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jQZ3U2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l59adp4wrtfhig53s4ld.gif" alt="giphy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have 10 fingers, and the standard Qwerty keyboard is beautifully designed to use each of our fingers all together, without even looking at the keyboard.&lt;/p&gt;

&lt;p&gt;Still, I've seen plenty of developers who type with 2-3 fingers only. Most of the time they spend is looking at the keyboard and then checking on the screen if they typed correctly.&lt;/p&gt;

&lt;p&gt;We got to learn to use the keyboard, before using a keyboard. Touch typing is one of the best productivity hacks for developers, you save a lot of time and energy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wanna learn touch typing? Checkout &lt;a href="https://www.keybr.com/"&gt;KeyBr&lt;/a&gt;, &lt;a href="https://10fastfingers.com/typing-test/english"&gt;10FastFingers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#2-documentation"&gt;
  &lt;/a&gt;
  #2 Documentation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQxdQvTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzncw6ats1ecw6zug6tk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQxdQvTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzncw6ats1ecw6zug6tk.png" alt="me-when-looking-at-the-code-i-wrote-two-weeks-43114931"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documenting a project is something that we all know is a good practice, but the least of us care to follow. Good documentation is one of the most important part of the Open Source world, includes information for contributors, applied coding conventions, file organizations, comments, naming conventions, programming practices, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Workers spend about 2.5 hours per day, or roughly 30% of the workday, searching for information." &lt;br&gt;
&lt;a href="https://blog.xenit.eu/blog/do-workers-still-waste-time-searching-for-information"&gt;Xenit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you write clear and accurate documentation of your projects, not only it gives an easy way to others when they look at your code, it also works as an easy checkpoint for you while revisiting code after a week/month/year. It might be tiring at the beginning but very effective in the long run.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check this: &lt;a href="https://guides.lib.berkeley.edu/how-to-write-good-documentation"&gt;How to write a good documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#3-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  #3 Data Structures and Algorithms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0i59QzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mlyqjzsqm09c9qqhjy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0i59QzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mlyqjzsqm09c9qqhjy2.png" alt="Today's developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're living in a world where data is more costly than oil/gold. More and more data is getting stored, processed, and slowing down the processing time of the systems, which costs tech companies a fortune. Effective and efficient use of these data is a challenge, and that's where DSA plays a very significant role.&lt;/p&gt;

&lt;p&gt;Under the cloak of all your SQL and Linux commands are algorithms and data structures. Google manages to search plenty of information in a fraction of seconds, all thanks to its &lt;a href="https://en.wikipedia.org/wiki/PageRank"&gt;Page Rank algorithm&lt;/a&gt;. Spotify, compared to it's competitors, consumes least data and gives the best personalized music experience, thanks to its &lt;a href="https://onezero.medium.com/how-spotifys-algorithm-knows-exactly-what-you-want-to-listen-to-4b6991462c5c"&gt;BaRT algorithm&lt;/a&gt; that analyzes every piece of audio to give you the one that Spotify is confident you’ll like.&lt;/p&gt;

&lt;p&gt;Real-world problems that take months can be solved in minutes using the knowledge of DSA. Understanding of data structures and algorithms may not seem relevant in the development of small scale applications, but makes an exceptional difference in large scale applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more interest, check this: &lt;a href="https://medium.com/coderbyte/how-to-get-good-at-algorithms-data-structures-d33d5163353f"&gt;Improving your Algorithms &amp;amp; Data Structure Skills&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#4-coding-standards"&gt;
  &lt;/a&gt;
  #4 Coding standards
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUzDVFCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk33b0twlwt1l8eulo1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUzDVFCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk33b0twlwt1l8eulo1k.png" alt="hqIXH"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following standard coding practices have a very positive impact on the software and growth of the organization, it decreases security concerns and enhances performance very significantly. &lt;/p&gt;

&lt;p&gt;Series of procedures are explicitly defined of each programming language, they can be for various aspects of the program written in that language and are considered as essential attributes of software development.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJMvY0yY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1359595959148138498/L5uqquBN_normal.jpg" alt="Todd Werth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Todd Werth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @twerth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Good professional programmers write boring code. Great professional programmers write really boring code. Clever &amp;amp; obscure code is written by selfish people who would rather entertain themselves than be masters of their craft
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:02 PM - 05 Oct 2018
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1048257153205600256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1048257153205600256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1048257153205600256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;To structure a smoother process of maintaining the code and providing readability to the code, coding standards, and code quality are essential to be managed by every developer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read more: &lt;a href="https://www.multidots.com/importance-of-code-quality-and-coding-standard-in-software-development/"&gt;Importance of Code Quality and Coding Standard in Software Development&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#5-communication-amp-collaboration"&gt;
  &lt;/a&gt;
  #5 Communication &amp;amp; Collaboration
&lt;/h2&gt;

&lt;p&gt;Communication skills are equally as important as technical skills. It's said that failures in software teams result more often from communication issues than from technical problems. Just like every other aspect of life, communication and collaboration play a very crucial role in software development. Being a talented developer won't bring the desired results if there isn't a successful collaboration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oY511N2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4b4t32z55pda67s6dc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oY511N2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4b4t32z55pda67s6dc5.png" alt="my-model-for-business-is-the-beatles"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There are many success stories that I can talk about where effective collaboration led to a smart product. E.g. Twitter, Jack Dorsey was paired up with Biz Stone during a hackathon. He and Biz came up with the idea of Twitter, which today has 150M+ active users worldwide. &lt;/p&gt;

&lt;p&gt;How to connect with fellow developers, and build up strong connections, asking for help, pointing bugs, and all together staying humble and polite is an art that every developer should master.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn more at &lt;a href="https://www.linkedin.com/pulse/communication-key-software-engineering-donnie-flood/"&gt;Communication is Key to Software Engineering&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;These were the 5 most underrated skills of a top developer, in my opinion at least.&lt;/p&gt;

&lt;p&gt;What do you think? Did I miss any? Put it down in the comments.&lt;/p&gt;




&lt;p&gt;Find me on: &lt;a href="https://twitter.com/anubhavitis"&gt;Twitter&lt;/a&gt; | &lt;a href="https://github.com/anubhavitis"&gt;GitHub&lt;/a&gt; | &lt;a href="https://linkedin.com/in/anubhavitis"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding!
&lt;/h4&gt;

</description>
      <category>computerscience</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Promise in Javascript</title>
      <author>Ayush Saini</author>
      <pubDate>Wed, 26 May 2021 09:55:36 +0000</pubDate>
      <link>https://dev.to/ayushcodes/promise-in-javascript-ldg</link>
      <guid>https://dev.to/ayushcodes/promise-in-javascript-ldg</guid>
      <description>&lt;p&gt;In the previous post, we talked about &lt;a href="https://dev.to/ayushcodes/asynchronous-javascript-4a2"&gt;Asynchronous Javascript&lt;/a&gt;. In this article you will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are promises?&lt;/li&gt;
&lt;li&gt;What is fetch API?&lt;/li&gt;
&lt;li&gt;How and why fetch works differently than other web APIs like setTimeout?&lt;/li&gt;
&lt;li&gt;What is Microtask Queue and how it is different from Callback Queue?&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise?
&lt;/h2&gt;

&lt;p&gt;A promise is a special kind of object in javascript that lets asynchronous methods return values like synchronous methods, i.e, it gets returned immediately when we make a call to a web API like &lt;code&gt;fetch&lt;/code&gt; to supply the final value at some point in the future.&lt;/p&gt;

&lt;p&gt;We also attach functionality to the promise object that gets automatically triggered when that value comes back in the javascript from the browser API and that value would also be the input of that function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-fetch-api"&gt;
  &lt;/a&gt;
  What is fetch API?
&lt;/h2&gt;

&lt;p&gt;Suppose you are building a Weather application that displays the weather of a city/country on search. Let's say the UI is done, now comes the main part - the weather data. Here's what you might need -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The app should be able to get the data from a server.&lt;/li&gt;
&lt;li&gt;When the data arrives, the app should display it.&lt;/li&gt;
&lt;li&gt;If the data fails to arrive, you would still want to display something like an error message. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Javascript doesn't know how to interact with the outer world a.k.a Internet. You know from the &lt;a href="https://dev.to/ayushcodes/asynchronous-javascript-4a2"&gt;Asynchronous Javascript&lt;/a&gt; post that this is where Web APIs shine.&lt;/p&gt;

&lt;p&gt;Fetch is a Web API that provides an interface for fetching data. Let's see how fetch works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-fetch-is-different-than-settimeout"&gt;
  &lt;/a&gt;
  Why fetch is different than setTimeout?
&lt;/h2&gt;

&lt;p&gt;Fetch works differently than the web APIs we discussed earlier like &lt;code&gt;setTimeout&lt;/code&gt; because it not only initiates a background browser functionality but also immediately returns a placeholder object known as &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-fetch-works-under-the-hood"&gt;
  &lt;/a&gt;
  How fetch works under the hood?
&lt;/h2&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upcomingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://getWeatherData.com/temp/seattle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;upcomingData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Me first??&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;upcomingData&lt;/code&gt; would be the return value of the &lt;code&gt;fetch('https://getWeatherData.com/temp/seattle')&lt;/code&gt; Fetch returns an object with the initial value &lt;code&gt;undefined&lt;/code&gt; and another &lt;em&gt;hidden&lt;/em&gt; property &lt;code&gt;onFulfilled&lt;/code&gt; that is an empty array. This special object runs all the functions provided inside the &lt;code&gt;onFulfilled&lt;/code&gt; array when the value gets updated.&lt;/p&gt;

&lt;p&gt;Fetch sets up XHR i.e, &lt;em&gt;XMLHttpRequest&lt;/em&gt; in the browser which retrieves the data from the URL. Now while fetch was getting the data from the &lt;code&gt;getWeatherData&lt;/code&gt; servers, javascript continues to execute the next line of code because the task was asynchronous.&lt;/p&gt;

&lt;p&gt;Now on the next line, we have &lt;code&gt;upcomingData.then(display)&lt;/code&gt;, if I were to ask you what this line is doing, you would most probably tell that 'when we get upcomingData, then call display function'. At least this was what I had in my mind before. But this is a wrong explanation.&lt;/p&gt;

&lt;p&gt;Remember earlier I said that there is a &lt;em&gt;hidden&lt;/em&gt; array called &lt;code&gt;onFulfilled&lt;/code&gt;. Well, the method &lt;code&gt;then&lt;/code&gt; will take the argument &lt;code&gt;display&lt;/code&gt; which is a function definition, and push it inside the &lt;code&gt;onFulfilled&lt;/code&gt; array, and on updating the placeholder value of the promise object, all the functions inside the &lt;code&gt;onFulfilled&lt;/code&gt; array will get run automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-doubt-why-use-raw-then-endraw-why-not-raw-onfulfilledpush-endraw-"&gt;
  &lt;/a&gt;
  🤔 Quick doubt - Why use &lt;code&gt;then&lt;/code&gt;, why not &lt;code&gt;onFulfilled.push()&lt;/code&gt; ?
&lt;/h3&gt;

&lt;p&gt;Because it's not a normal array, remember it's a hidden array. That's why you can't use the &lt;code&gt;push()&lt;/code&gt; method on the &lt;code&gt;onFulfilled&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Now on the next line, &lt;code&gt;Me first??&lt;/code&gt; would be logged to the browser console. Now all of our synchronous code, but the fetch was doing its background work to get the temperature of Seattle city from the server. Let's say it comes back with a response with a value of &lt;code&gt;12°C&lt;/code&gt;, which updates the value of upcomingData object to &lt;code&gt;12°C&lt;/code&gt;, which triggers &lt;code&gt;display&lt;/code&gt; function to run with input &lt;code&gt;12°C&lt;/code&gt;. Hence, now &lt;code&gt;12°C&lt;/code&gt; is logged to the console.&lt;/p&gt;

&lt;p&gt;This is how the output would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Me first??
12°C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-if-the-server-fails-to-send-back-the-data"&gt;
  &lt;/a&gt;
  What if the server fails to send back the data?
&lt;/h2&gt;

&lt;p&gt;Just like &lt;code&gt;onFulfilled&lt;/code&gt;, there is &lt;code&gt;onRejected&lt;/code&gt; array also, which auto triggers any function inside it when the promise is not resolved. And you would pass the error handling function inside of &lt;code&gt;onRejected&lt;/code&gt; through another method called &lt;code&gt;catch()&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;upcomingData&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleRejected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is known as promise chaining.&lt;/p&gt;

&lt;p&gt;That's how fetch works under the hood. Now since you know that, let's see one more example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;blockFor300ms&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="c1"&gt;// blocks js thread for 300ms with long for loop&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upcomingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://getWeatherData.com/temp/seattle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;upcomingData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;blockFor300ms&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Me first??&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first 3 blocks of code are 3 function definitions, so javascript will declare the functions and store their entire definition in the memory line by line.&lt;/p&gt;

&lt;p&gt;Now we hit our first obstacle, &lt;code&gt;setTimeout&lt;/code&gt; which starts a timer in the browser for 0 ms, which is completed instantaneously. Hence, at 0ms, the function &lt;code&gt;printHello&lt;/code&gt; is added to Callback Queue and &lt;code&gt;setTimeout&lt;/code&gt;'s work is done, but the Event Loop won't let it run because there is still out global code to run.&lt;/p&gt;

&lt;p&gt;Now, on the next line, we have &lt;code&gt;upcomingData&lt;/code&gt;, so javascript would declare a constant &lt;code&gt;upcomingData&lt;/code&gt; and make it &lt;code&gt;undefined&lt;/code&gt; because its value is not defined yet, i.e, fetch hasn't returned a value yet. Fetch initially returns an empty object a.k.a Promise with the value &lt;code&gt;undefined&lt;/code&gt; and onFulfilled empty array. But its work isn't done yet because it will also do some background browser work of getting the data from the server and when it retrieves the data, it will update the value property on the promise object.&lt;/p&gt;

&lt;p&gt;The data retrieving work was going on in the background while we execute the next line of code, we are calling &lt;code&gt;then()&lt;/code&gt; on &lt;code&gt;upcomingData&lt;/code&gt; and passing in the &lt;code&gt;display&lt;/code&gt; which will pass the &lt;code&gt;display&lt;/code&gt; inside the onFulfilled array and whenever the value of the promise object gets updated, the &lt;code&gt;display&lt;/code&gt; function would be triggered to run. But it isn't called yet.&lt;/p&gt;

&lt;p&gt;Now the next line of code will block the further code execution for 300ms, i.e, it would be pushed on the Call stack for 300ms.&lt;/p&gt;

&lt;p&gt;While it was there, fetch gets back the data from the servers and updates the value of the promise object to &lt;code&gt;12°C&lt;/code&gt; which triggers &lt;code&gt;display&lt;/code&gt; to run. But it is not pushed into the Call Stack directly just like the callback of &lt;code&gt;setTimeout&lt;/code&gt;. It is queued into a Queue. Well, it turns out like there is a &lt;em&gt;Callback Queue&lt;/em&gt; that we use to queue the callback of &lt;code&gt;setTimeout&lt;/code&gt;, there is another queue known as &lt;strong&gt;Microtask Queue&lt;/strong&gt; in which functions triggered by updating the value property of promise object get queued. &lt;/p&gt;

&lt;p&gt;Not after 300ms, the function &lt;code&gt;blockfor300ms&lt;/code&gt; is popped off the Call Stack, and the code on the next line gets executed, which logs &lt;code&gt;Me first??&lt;/code&gt; onto the browser console, and all of our synchronous code is finished executing.&lt;/p&gt;

&lt;p&gt;There are two queues with functions waiting to be executed, now comes the question:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-will-run-first"&gt;
  &lt;/a&gt;
  🥇 Which will run first?
&lt;/h3&gt;

&lt;p&gt;It turns out that Event Loop gives precedence to &lt;strong&gt;Microtask Queue&lt;/strong&gt; over Callback Queue. It sees &lt;code&gt;display&lt;/code&gt; waiting inside the Microtask Queue, hence it is dequeued and pushed into the Call Stack first, and &lt;code&gt;12°C&lt;/code&gt; is logged to the console.&lt;/p&gt;

&lt;p&gt;Now since the Microtask Queue is empty, Event Loop will check the Callback Queue, and then push &lt;code&gt;printHello&lt;/code&gt; into the Call Stack and &lt;code&gt;Hello&lt;/code&gt; is logged to the console window.&lt;/p&gt;

&lt;p&gt;This is how the output of the code would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Me first??
12°C
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's surprising how &lt;code&gt;printHello&lt;/code&gt; gets called at the last even though it was the one waiting from the beginning. And here's an interesting thing you can do, you can never let &lt;code&gt;printHello&lt;/code&gt; run by continuously queuing the Microtask Queue and starve the Callback Queue.&lt;/p&gt;




&lt;p&gt;This is how fetch works under the hood and why is it different from setTimeout. If you understand this, there is pretty much nothing left in the asynchronous javascript.&lt;/p&gt;

&lt;p&gt;If you are still with me, I want to thank you for reading it. Let me know in the comments if there's something you would like to discuss, or reach out to me on Twitter &lt;a href="https://twitter.com/AyushCodes"&gt;@AyushCodes&lt;/a&gt;, my DMs are open for you.&lt;/p&gt;

&lt;p&gt;Happy hacking!!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  📖 Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;MDN Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;MDN Fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/javascript-new-hard-parts"&gt;Javascript: The New Hard Parts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>asynchronous</category>
      <category>web</category>
      <category>api</category>
    </item>
    <item>
      <title>Why do I keep getting this weird error when trying to load an image?</title>
      <author>Calin Baenen</author>
      <pubDate>Wed, 26 May 2021 09:25:29 +0000</pubDate>
      <link>https://dev.to/baenencalin/why-do-i-keep-getting-this-weird-error-when-trying-to-draw-an-image-2bmg</link>
      <guid>https://dev.to/baenencalin/why-do-i-keep-getting-this-weird-error-when-trying-to-draw-an-image-2bmg</guid>
      <description>&lt;p&gt;So I'm trying to make a game in GoLang using &lt;a href="https://github.com/gen2brain/raylib-go"&gt;Raylib Go (Go bindings of a C library with the same name)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm using a temporary variable to test if I can load a texture (I'm only gonna show the one line, as that's the only thing that makes the program crash):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Texture2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadTexture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./rsrc/textures/logo.png"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, the path "&lt;code&gt;./rsrc/textures/logo.png&lt;/code&gt;" exists (relative to the executable's default directory).&lt;br&gt;
After putting that in, I ran two commands in Command Prompt (Windows 10)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\Administrator\Desktop\Projects\Go\games\RuntDeale&amp;gt;go build ./rsrc/code
C:\Users\Administrator\Desktop\Projects\Go\games\RuntDeale&amp;gt;code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
After running that last command, no window appeared, and the program had seemed to have ended.&lt;br&gt;
But I got this lovely jumble of text printed to me:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INFO: FILEIO: [./rsrc/textures/logo.png] File loaded successfully
INFO: IMAGE: [./rsrc/textures/logo.png] Data loaded successfully (76x17)
Exception 0xc0000005 0x8 0x0 0x0
PC=0x0
signal arrived during external code execution

github.com/gen2brain/raylib-go/raylib._Cfunc_LoadTexture(0x14d740b1bb0, 0x0, 0x0, 0xc000000000)
        _cgo_gotypes.go:4223 +0x54
github.com/gen2brain/raylib-go/raylib.LoadTexture(0x972c59, 0x18, 0x0, 0x0, 0x14d00000000)
        C:/Users/Administrator/go/pkg/mod/github.com/gen2brain/raylib-go@v0.0.0-20210227124741-9d258bad6516/raylib/textures.go:69 +0x95
main.main()
        C:/Users/Administrator/Desktop/Projects/Go/games/RuntDeale/rsrc/code/main.go:28 +0xa5
rax     0x700000001
rbx     0x2a527ffaf0
rcx     0xde1
rdi     0x11
rsi     0x4c
rbp     0x7
rsp     0x2a527ff978
r8      0x11
r9      0x7
r10     0x0
r11     0x246
r12     0x1
r13     0x978368
r14     0x37
r15     0xffffffffffffffff
rip     0x0
rflags  0x10246
cs      0x33
fs      0x53
gs      0x2b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It says the file loaded successfully, but then it has some kind of error, and doesn't really make any sense.&lt;/p&gt;

&lt;p&gt;What does this mean, and how can I fix it?&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Thanks!&lt;br&gt;
Cheers!&lt;/p&gt;

</description>
      <category>go</category>
      <category>c</category>
      <category>gamedev</category>
      <category>help</category>
    </item>
    <item>
      <title>5 Reasons why we chose to transpile to SolidJS instead of React</title>
      <author>chris-czopp</author>
      <pubDate>Wed, 26 May 2021 09:02:03 +0000</pubDate>
      <link>https://dev.to/chrisczopp/5-reasons-why-we-chose-to-transpile-to-solidjs-instead-of-react-3pcl</link>
      <guid>https://dev.to/chrisczopp/5-reasons-why-we-chose-to-transpile-to-solidjs-instead-of-react-3pcl</guid>
      <description>&lt;p&gt;Choosing a relatively young framework with a limited support over Facebook's giant may seem like craziness. As a core developer at &lt;a href="https://www.glue.codes"&gt;GlueCodes Studio&lt;/a&gt;, I was the one pushing towards taking the risk. The decision has been mainly driven by &lt;a href="http://solidjs.com/"&gt;Solid's&lt;/a&gt; build-time DOM diffing flavoured with a very simple API. I really believe it's a natural replacement of Virtual DOM. I always believed that taking the compromise of re-rendering the whole tree when the app state changes just for a "developer's convenience" is a matter of time. There was &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; on radar, but I'm rather in favour of JSX, especially because we already provide an abstraction layer for templating using HTML with our meta-framework specific directives. So, I thought it would be awesome to write UIs with this higher level of abstraction and export to more flexible JSX and if you wish, continue development out of our tool. Check out the &lt;a href="https://www.glue.codes/docs-templating-htmlDirectives.html"&gt;docs&lt;/a&gt; for more info.&lt;/p&gt;

&lt;p&gt;Here are the 5 points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It does DOM diffing at build-time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's function-first and it has a very clean API. Much of it is similar to &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It doesn't recursively call the component every time the app state changes. I mean the body of the function which returns JSX is called just once, making local state management simpler and more natural.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is primary made for JSX, but there is also HyperScript available which can be handy if you need DOM diffing at run-time. In our case, it was useful for Live Preview without compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A component returns a DOM element!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;💪 Bonus: It's owned by the community and the core team is very open and responsive.&lt;/p&gt;

&lt;p&gt;Links: &lt;/p&gt;

&lt;p&gt;&lt;a href="http://solidjs.com/"&gt;SolidJS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.glue.codes"&gt;GlueCodes Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know what you think.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>solidjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Display Hostname and IP address using Python</title>
      <author>Nishant Gour</author>
      <pubDate>Wed, 26 May 2021 08:49:36 +0000</pubDate>
      <link>https://dev.to/nishantgour/display-hostname-and-ip-address-using-python-5hng</link>
      <guid>https://dev.to/nishantgour/display-hostname-and-ip-address-using-python-5hng</guid>
      <description>&lt;p&gt;In this article, We are going to see how to Display the hostname and the IP address with the help of the language Python.&lt;/p&gt;

&lt;p&gt;As we all know about IP, IP (Internet Protocol) is a fundamental networking concept that provides address assignation capability in a network. &lt;/p&gt;

&lt;p&gt;How we are going to do it?.  so we will be using the socket module of python&lt;/p&gt;

&lt;p&gt;Python provides gethostname(),gethostbyname() two function.&lt;br&gt;
gethostname() retrives the standard host name for the local machine. gethostbyname() retrives host information corresponding to a host name from a host database.&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import socket
hostname = socket.gethostname()
ip_address = socket.gethostbyname(hostname)
print(f"Hostname: {hostname}")
print(f"IP Address: {ip_address}")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's discuss the above 5 lines of code..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In our first line, we have imported our socket module.&lt;/li&gt;
&lt;li&gt;in second-line we are getting the hostname by socket.gethostname() method.&lt;/li&gt;
&lt;li&gt;The third line we retrives host information corresponding to a hostname from a host database.&lt;/li&gt;
&lt;li&gt;and then the last two lines are for printing them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is a short and sweet article for all of you!&lt;/p&gt;

&lt;p&gt;I hope you liked it!. Let's catch up in the next articles. &lt;/p&gt;

&lt;p&gt;original published on : &lt;a href="https://codingnuts.tech/"&gt;https://codingnuts.tech/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you liked it, Please &lt;strong&gt;Support Me&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nishantgour"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZmDDNkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dnishantgour%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>pythonprogramming</category>
      <category>programming</category>
    </item>
    <item>
      <title>The best time to ask for a Raise</title>
      <author>Dave Sev</author>
      <pubDate>Wed, 26 May 2021 08:30:28 +0000</pubDate>
      <link>https://dev.to/dracount/the-best-time-to-ask-for-a-raise-1co</link>
      <guid>https://dev.to/dracount/the-best-time-to-ask-for-a-raise-1co</guid>
      <description>&lt;p&gt;It had been a grueling eight months of coding into the nights, stressful deadlines, continuous spec changes, bad planning and estimates and bug fixing that was almost impossible to replicate reliably... You know the drill.&lt;/p&gt;

&lt;p&gt;Then the celebrations - Champaign and a company wide barbeque.&lt;/p&gt;

&lt;p&gt;It felt good. The project, despite the delays and hiccups will bring in hundreds of thousands for the company, and the team can finally relax.&lt;/p&gt;

&lt;p&gt;"Now is my chance" I thought, "to get that raise I had been delaying asking for".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yN4KLq7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6pdy4s5wyywsfkyxs2e.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yN4KLq7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6pdy4s5wyywsfkyxs2e.JPG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All to be disappointed by a meagre 5% increase. I was shattered.&lt;/p&gt;

&lt;p&gt;Truth be told, this didn't happen to me exactly like this, but close.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In case you're interested...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are looking for guidance in career development, I help IT developers create their dream jobs through self discovery, career planning and how to make the best out of your job. Contact me if you would like to discuss further.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets dive in.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-in-it-for-me"&gt;
  &lt;/a&gt;
  What's In It For Me?
&lt;/h1&gt;

&lt;p&gt;Companies don't pay after the fact. They have one degree of loyalty - and that's to its shareholders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J69aN9V1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp71am945w2uzh33xdst.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J69aN9V1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp71am945w2uzh33xdst.JPG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When they hire, they spend vast amounts of money, hundreds of thousands... Why? In order to solve a problem.&lt;/p&gt;

&lt;p&gt;Once the problem is solved? You have lost your leverage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtuYMPdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kojaiwr7nh2tz4hhkxd0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtuYMPdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kojaiwr7nh2tz4hhkxd0.JPG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#survival-of-the-fittest"&gt;
  &lt;/a&gt;
  Survival Of The Fittest
&lt;/h1&gt;

&lt;p&gt;Whether you have been working 10 years or 10 months, when the company is downsizing, you both get one months notice and one month's pay.&lt;/p&gt;

&lt;p&gt;So when should you ask for a raise?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When the project is about to start.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is when the company has the most pain, and will pay for that pain to go away. Take advantage of the right time.&lt;/p&gt;

&lt;p&gt;Let me know if you have had similar experiences before?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;In case you're interested...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are looking for guidance in career development, I help IT developers create their dream jobs through self discovery, career planning and how to make the best out of your job. Contact me if you would like to discuss further.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>job</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I made my first app using React.</title>
      <author>jba11er32</author>
      <pubDate>Wed, 26 May 2021 08:20:18 +0000</pubDate>
      <link>https://dev.to/jba11er32/i-made-my-first-app-using-react-7hp</link>
      <guid>https://dev.to/jba11er32/i-made-my-first-app-using-react-7hp</guid>
      <description>&lt;p&gt;The mindset I had when creating this app was whether or not I was able to use it. I constantly have a problem when it comes to my fridge: too many ingredients not being used. Since quarantine has introduced many new activities to the average person, I thought it would also be something others could use as well. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ctwWylb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g8w3l1xpiodgodz82eh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ctwWylb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g8w3l1xpiodgodz82eh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app, Clear Your Fridge, allows one to enter an ingredient into the search bar and it will return 10 recipes using that ingredient. When an ingredient is entered, each result will show an image of the recipe, other ingredients needed for the recipe as well as a link to the full recipe online. &lt;/p&gt;

&lt;p&gt;The most challenging problem I had when creating this app was not creating a infinite fetch request from the API. This would have limited me from fetching from the API and I would not be able to test my app. I learned how that could become a problem and also was able to understand the error for future apps I create. I would say that I am pretty proud of the code that I wrote. Clean code was the goal of this app. &lt;/p&gt;

&lt;p&gt;The app uses a third party API: Edamam. Unfortunately, this API is limited to only searching for recipes one ingredient at a time. I struggle with some CSS styling and want to improve on that aspect of my app. I want to include a video for each recipe or even search for recipes using multiple ingredients. I hope that I can get that working in the future.&lt;/p&gt;

&lt;p&gt;As far as using React, there are a lot of aspects and concepts that I want to familiarize myself with. This was a good introduction to test how my knowledge. I plan to improve on this app and am welcome to critiques, comments, and advice. May this app be of use to anyone who comes by it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>firstpost</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What is a Non-Fungible Token? How to create it</title>
      <author>Robert John</author>
      <pubDate>Wed, 26 May 2021 08:10:43 +0000</pubDate>
      <link>https://dev.to/robertj46122142/what-is-a-non-fungible-token-how-to-create-it-13oc</link>
      <guid>https://dev.to/robertj46122142/what-is-a-non-fungible-token-how-to-create-it-13oc</guid>
      <description>&lt;p&gt;The buzzword in the market is undoubtedly Non-Fungible Tokens (NFTs). The market capitalization of Non-Fungible Token development is now worth a whopping $19.08 billion as per &lt;a href="https://coinmarketcap.com/"&gt;CoinMarketCap&lt;/a&gt;. Investors trade crypto collectibles valued at $2.66 billion. &lt;/p&gt;

&lt;p&gt;Currently, the hot-selling NFTs are artwork, digital horses, gaming assets, memes, music, photos, videos, and virtual property. Non-Fungible Tokens have some special characteristics like indivisibility, interoperability, non-interchangeability, ownership rights, and scarcity. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Who are the biggest creators of Non-Fungible Tokens (NFTs)?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Artists, content creators, fashion designers, game developers, music composers, photographers, publishers, singers, social media users, and videographers are the largest creators of valuable NFTs. They earn millions by selling their digital collectibles in numerous NFT marketplaces.  &lt;/p&gt;

&lt;p&gt;It is a great opportunity for entrepreneurs to boost their crypto venture by kickstarting lucrative Non-Fungible Token development. They will witness a better business performance by partnering with a competent NFT solutions provider in the market. &lt;/p&gt;

&lt;p&gt;Related to know more:&lt;a href="https://www.appdupe.com/non-fungible-token-development"&gt;Non-Fungible Token Development&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nonfungibletoken</category>
      <category>nfts</category>
      <category>news</category>
    </item>
    <item>
      <title>Top 20 Tips that will change your coding skills forever</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Wed, 26 May 2021 08:04:44 +0000</pubDate>
      <link>https://dev.to/line/top-20-tips-that-will-change-your-coding-skills-forever-4cb1</link>
      <guid>https://dev.to/line/top-20-tips-that-will-change-your-coding-skills-forever-4cb1</guid>
      <description>&lt;p&gt;In this small article, I am going to talk about my top 20 tips that can change your coding forever. This article is a summary of all the points, &lt;em&gt;Enjoy&lt;/em&gt;-&lt;/p&gt;

&lt;p&gt;1.Break big pieces of code into small functions, which make it easy for you to improve your code quality.&lt;/p&gt;

&lt;p&gt;2.Do Not Overthink.&lt;/p&gt;

&lt;p&gt;3.Don't take stress of any problem that you were unable to fix.&lt;/p&gt;

&lt;p&gt;4.Make sure to see other people's code and let others see your code.&lt;/p&gt;

&lt;p&gt;5.If you can' solve a problem, just copy-paste with google, its the best way to solve it.&lt;/p&gt;

&lt;p&gt;6.Read documentation of languages.&lt;/p&gt;

&lt;p&gt;7.Take rest regularly, it helps your brain to focus.&lt;/p&gt;

&lt;p&gt;8.Use integration tools and automate as much as you can.&lt;/p&gt;

&lt;p&gt;9.Practice as much as you can, practice makes a man perfect.&lt;/p&gt;

&lt;p&gt;10.Don't shy for asking help.&lt;/p&gt;

&lt;p&gt;11.Be focused on what you do.&lt;/p&gt;

&lt;p&gt;12.Never choose an inefficient shortcut way to save a few minutes.&lt;/p&gt;

&lt;p&gt;13.Users are not technical people. Think about it when you develop your UI/Design.&lt;/p&gt;

&lt;p&gt;14.Log all critical parts rather than to debug it.&lt;/p&gt;

&lt;p&gt;15.Learn as much as you can, Don’t stop learning.&lt;/p&gt;

&lt;p&gt;16.Be Consistent.&lt;/p&gt;

&lt;p&gt;17.Take time to choose you IDE, try to find the best one for you.&lt;/p&gt;

&lt;p&gt;18.Try writing readable code, as you are the only one who will fix it in future.&lt;/p&gt;

&lt;p&gt;19.Don't Remember the code, just learn the logic and you are good to go.&lt;/p&gt;

&lt;p&gt;20.patience and love what you do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*Finally this big topic is over now, Now I would like to talk about my Newsletter -&lt;/p&gt;

&lt;p&gt;I have started a newsletter in which you will get Email twice a week directly from me. I will send you latest tech, coding &amp;amp; Other useful information. I will also be spending a one riddle each time and the first to complete the riddle will get a small gift from me*&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/subscribe?utm_source=menu&amp;amp;simple=true&amp;amp;next=https%3A%2F%2Flinenewsletter.substack.com%2Fp%2Fcoming-soon"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1fXPsb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys8k2zvc8jqdyk51bax0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
      <category>bestofdev</category>
    </item>
  </channel>
</rss>
