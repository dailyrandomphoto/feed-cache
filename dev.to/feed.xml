<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Python- Basic course: Day 12, Basic algorithms</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 08 Jul 2021 05:56:00 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-explore-sequential-search-binary-search-and-bubble-sort-in-python"&gt;
  &lt;/a&gt;
  Today let us explore Sequential search, Binary search and Bubble sort in Python.🚀
&lt;/h2&gt;




&lt;p&gt;Today we will check out sequential search, binary search and bubble sort in Python lists. We will not go into the mathematical details of the complexity and all but just see how the algorithms are implemented. More complicated searching and sorting algorithms, complex data structures will be referenced and covered in the later parts. In case anyone among you are coming across these algorithms for the first time, please do google these terms out. I have also provided Geeksforgeeks references for further reading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sequential-search"&gt;
  &lt;/a&gt;
  Sequential search
&lt;/h3&gt;

&lt;p&gt;The sequential search is the most easy and simple program for searching. We can just traverse through the list or use the inbuilt &lt;code&gt;in&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter the number to be searched "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Method-1
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Method-1 Yes, the number is in the list "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="c1"&gt;#Method-2
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Method-2 Yes, the number is in the list "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter the number to be searched 6
Method-1 Yes, the number is in the list 
Method-2 Yes, the number is in the list 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python provides a shortcut for searching as shown in method 2. This is a sequential search method for searching. It can search not only numbers, but characters or any other data types as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binary-search"&gt;
  &lt;/a&gt;
  Binary search
&lt;/h3&gt;

&lt;p&gt;Binary search is another simple algorithm to search for numbers in a sorted list. In case you are new with Binary search, see &lt;a href="https://www.geeksforgeeks.org/binary-search/"&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="c1"&gt;# If x is greater, ignore left half
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# If x is smaller, ignore right half
&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# means x is present at mid
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a number 6
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bubble-sort"&gt;
  &lt;/a&gt;
  Bubble sort
&lt;/h3&gt;

&lt;p&gt;Bubble sort is a good sorting algorithm, and quite easy comparatively. more about it on &lt;a href="https://www.geeksforgeeks.org/bubble-sort/"&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="c1"&gt;# Traverse through all array elements
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# Last i elements are already in place
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# traverse the array from 0 to n-i-1
&lt;/span&gt;            &lt;span class="c1"&gt;# Swap if the element found is greater
&lt;/span&gt;            &lt;span class="c1"&gt;# than the next element
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#Swapping the two
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sorted array is:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sorted array is: [2, 3, 4, 5, 6, 7, 9, 10, 12]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises-
&lt;/h3&gt;

&lt;p&gt;1) &amp;amp; 2) In the samples above, the programs give no output if the item is not in the list. Modify the programs to include it. Answers - &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%201.py"&gt;Sequential search&lt;/a&gt;, &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%202.py"&gt;binary search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Write a program to bubble sort a list and then search using binary search. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%203.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😎 Your suggestions motivate me, so please please please let me know in the comment section if you this part or not. 🧐 And don't forget to like the post if you did. 😍 Follow me on github and star the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>learningpython</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🍩 Creating an Interactive JS Donut Chart in 4 Steps 🚀</title>
      <author>andreykh1985</author>
      <pubDate>Thu, 08 Jul 2021 05:28:09 +0000</pubDate>
      <link>https://dev.to/andreykh1985/creating-a-js-donut-chart-in-4-steps-592k</link>
      <guid>https://dev.to/andreykh1985/creating-a-js-donut-chart-in-4-steps-592k</guid>
      <description>&lt;p&gt;Wondering how data designers and developers create compelling donut charts using JavaScript? Then you’ve come to the right place at the right time. Follow along and you will learn how to build an interactive JS donut chart with great ease even if you are a beginner!&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be visualizing data about the global market share of the top online music streaming platforms. It is a good example of information that can be nicely represented in a donut chart.&lt;/p&gt;

&lt;p&gt;To make sure we are on the same page, let’s first see what a donut chart is and then get down to charting straight away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-donut-chart"&gt;
  &lt;/a&gt;
  What Is a Donut Chart?
&lt;/h2&gt;

&lt;p&gt;Basically, &lt;a href="https://www.anychart.com/chartopedia/chart-type/donut-chart/"&gt;donut charts&lt;/a&gt; (or doughnut charts) are &lt;a href="https://www.anychart.com/chartopedia/chart-type/pie-chart/"&gt;pie charts&lt;/a&gt; with a cut-out area of the center which can be filled with additional information. They are frequently used as a way to visualize the proportions of categorical data.&lt;/p&gt;

&lt;p&gt;In a donut chart, the size of each slice (or piece) depicts how much of the total each category represents. Consequently, this type of data visualization can help you quickly understand the proportional composition of a variable.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, the number of categories visualized in a donut chart graphic should be limited to a few to keep the representation uncluttered and avoid legibility issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-donut-chart-preview"&gt;
  &lt;/a&gt;
  JS Donut Chart Preview
&lt;/h2&gt;

&lt;p&gt;Take a look at how the JS donut chart will turn out at the end of this tutorial. And it will be interactive!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggqO5okQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d45igagc2uzfps3fkyh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggqO5okQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d45igagc2uzfps3fkyh7.png" alt="Interactive JavaScript-based donut chart which will be created along this tutorial on JS HTML5 data visualization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-basic-javascript-donut-chart"&gt;
  &lt;/a&gt;
  Building a Basic JavaScript Donut Chart
&lt;/h2&gt;

&lt;p&gt;A beautiful JS donut chart can be built in just four easy steps. Isn’t that music to our ears?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an HTML page.&lt;/li&gt;
&lt;li&gt;Include JavaScript files.&lt;/li&gt;
&lt;li&gt;Add the data.&lt;/li&gt;
&lt;li&gt;Write some JS charting code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-create-an-html-page"&gt;
  &lt;/a&gt;
  1. Create an HTML page
&lt;/h3&gt;

&lt;p&gt;The first thing we do is create a basic HTML page with a block element designed to hold the donut chart.&lt;/p&gt;

&lt;p&gt;To identify this &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; later in the code, we give it an id attribute. Let it be just “container” this time.&lt;/p&gt;

&lt;p&gt;We also specify the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; parameters inside the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; block as “100%” so the donut chart fills the whole page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Donut Chart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-include-javascript-files"&gt;
  &lt;/a&gt;
  2. Include JavaScript files
&lt;/h3&gt;

&lt;p&gt;There are many JavaScript charting libraries out there providing ready-made features that are of great help to quickly visualize data in graphs even without a lot of technical skills and experience. Some of them support donut charts out of the box.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are using the &lt;a href="https://www.anychart.com/"&gt;AnyChart JS library&lt;/a&gt;. It is a lightweight, strong, and flexible solution for interactive data visualization. AnyChart is also great for beginners because of extensive and detailed &lt;a href="https://docs.anychart.com/"&gt;documentation&lt;/a&gt; and a whole lot of &lt;a href="https://www.anychart.com/products/anychart/gallery/"&gt;chart examples&lt;/a&gt; with the source code that can be played with on the dedicated &lt;a href="https://playground.anychart.com/"&gt;playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, as step two, let’s include the necessary JavaScript files from the library’s &lt;a href="https://cdn.anychart.com/"&gt;CDN&lt;/a&gt; (or you can download them if you want).&lt;/p&gt;

&lt;p&gt;AnyChart’s JavaScript charting library features a modular system to ensure optimal performance. To create an interactive HTML5 donut chart using it, we need to add two scripts — the &lt;a href="https://docs.anychart.com/Quick_Start/Modules#core"&gt;core module&lt;/a&gt; and the &lt;a href="https://docs.anychart.com/Quick_Start/Modules#pie_and_doughnut"&gt;pie-and-donut module&lt;/a&gt; — to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of the HTML page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Donut Chart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-core.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-pie.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// All the code for the JS donut chart will come here&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-add-the-data"&gt;
  &lt;/a&gt;
  3. Add the data
&lt;/h3&gt;

&lt;p&gt;A donut chart is a simple chart type that requires a straightforward and limited dataset. So, although AnyChart supports &lt;a href="https://docs.anychart.com/Working_with_Data/Supported_Data_Formats"&gt;multiple ways to load data&lt;/a&gt;, we will just pass the data directly in a hassle-free manner.&lt;/p&gt;

&lt;p&gt;For this tutorial, I decided to take data on the market share of the leading music streaming apps, which I collected from the &lt;a href="https://www.businessofapps.com/data/spotify-statistics/"&gt;Business of Apps&lt;/a&gt; website. So, I am just adding it as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spotify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Amazon Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tencent apps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YouTube Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Others&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have everything all set, let’s get ready to see the donut chart shape up by adding some JavaScript code! Basically, this is quite intuitive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-write-the-js-charting-code-for-our-donut-chart"&gt;
  &lt;/a&gt;
  4. Write the JS charting code for our donut chart
&lt;/h3&gt;

&lt;p&gt;The first thing we do is add a function enclosing all the code, which makes sure that the code inside it will only execute once the page is ready.&lt;/p&gt;

&lt;p&gt;Donut charts are very straightforward to create with an appropriate JS library and in this case, it will actually be just a couple of lines of code!&lt;/p&gt;

&lt;p&gt;As we have learned just above, a donut chart is fundamentally a pie chart with a hole, like a ring all in all. So, we simply create a pie chart instance and give it an inner radius value to make it a donut chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a pie chart with the data&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// set the chart radius making a donut chart&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;55%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we give our donut chart a title and set the container id before finally drawing the resulting visualization.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Music Streaming Apps Global Market Share&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it — a fully functional interactive JavaScript-based donut chart is ready! Isn’t this absolutely easy?&lt;/p&gt;

&lt;p&gt;Notice that the legend was created automatically. Also, go ahead and click on its items or any piece to see the cool interactive donut slicing behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79jgac6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obm2sg41xib4n2cgnh0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79jgac6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obm2sg41xib4n2cgnh0t.png" alt="Basic JavaScript Donut Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The initial version of this basic JS donut chart with the full code is available on &lt;a href="https://playground.anychart.com/oGg0sx87/"&gt;AnyChart Playground&lt;/a&gt; and &lt;a href="https://codepen.io/shacheeswadia/pen/eYvJxJQ"&gt;CodePen&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This donut chart distinctly shows that Spotify is the global leader and that Spotify and Apple Music together hold more than half of the market of music streaming apps.&lt;/p&gt;

&lt;p&gt;Now, let’s customize our donut chart to make it look even cooler and communicate the insights in a clearer manner (like shown in the preview at the beginning of the article):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the color palette.&lt;/li&gt;
&lt;li&gt;Add labels.&lt;/li&gt;
&lt;li&gt;Improve the tooltip.&lt;/li&gt;
&lt;li&gt;Add details to the center of the donut.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.anychart.com/blog/2021/07/06/donut-charts-javascript/"&gt;CONTINUE READING HERE&lt;/a&gt; FOR A WALKTHROUGH OF THESE JS DONUT CHART CUSTOMIZATIONS&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Use IndexDB to Manage State in JavaScript</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Thu, 08 Jul 2021 05:03:34 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/how-to-use-indexdb-to-manage-state-in-javascript-4k98</link>
      <guid>https://dev.to/asayerio_techblog/how-to-use-indexdb-to-manage-state-in-javascript-4k98</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/craig-buckler"&gt;Craig Buckler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My previous article, &lt;a href="https://blog.openreplay.com/getting-started-with-indexeddb-for-big-data-storage"&gt;Getting Started with IndexedDB for Big Data Storage&lt;/a&gt;, demonstrated how to use the browser's IndexedDB NoSQL database to store data. IndexedDB has &lt;a href="https://caniuse.com/indexeddb"&gt;good cross-browser support&lt;/a&gt; and offers at least 1GB of storage.&lt;/p&gt;

&lt;p&gt;This article explains how to use IndexedDB to store state in a typical client-side JavaScript application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/craigbuckler/asayer-idbstate"&gt;The code is available from Github&lt;/a&gt;&lt;/strong&gt;. It provides an example to-do app which you can use or adapt for your own projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-we-mean-by-state"&gt;
  &lt;/a&gt;
  What do we mean by "state"?
&lt;/h2&gt;

&lt;p&gt;All applications store state. For a to-do app, it's a list of items. For a game, it's the current score, weapons available, power-up time remaining, etc. Variables store state but these can become unwieldly as complexity increases.&lt;/p&gt;

&lt;p&gt;State management systems such as &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt; and &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; provide centralized data stores. Any JavaScript component can read, update, or delete data. Some systems permit components to &lt;em&gt;subscribe&lt;/em&gt; to change events. For example, when a user toggles light/dark mode, all components update their styles accordingly.&lt;/p&gt;

&lt;p&gt;Most state management systems store values in memory although techniques and plugins are available to transfer data to localStorage, cookies, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-indexeddb-suitable-for-storing-state"&gt;
  &lt;/a&gt;
  Is IndexedDB suitable for storing state?
&lt;/h2&gt;

&lt;p&gt;As always: &lt;em&gt;it depends&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;IndexedDB offers some benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It can typically store 1GB of data which makes it suitable for large objects, files, images etc. Moving these items out of memory can make an application faster and more efficient.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike cookies and Web Storage (&lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;), IndexedDB stores native JavaScript object data. There's no need to serialize into JSON strings or deserialize back again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IndexedDB access is asynchronous so it has minimal impact on the main JavaScript processing thread.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that Web Storage is synchronous: your JavaScript code pauses execution while it accesses data. This can cause performance issues when saving larger datasets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asynchronous data access has some drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The IndexedDB API uses older callback and event methods so a Promise-based wrapper library is practical.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;async&lt;/code&gt; class constructors and &lt;a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;Proxy&lt;/a&gt; get/set handlers are not possible in JavaScript. This poses some challenges for state management systems.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-indexeddbbased-state-management-system"&gt;
  &lt;/a&gt;
  Creating an IndexedDB-based state management system
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://github.com/craigbuckler/asayer-idbstate"&gt;example code below&lt;/a&gt;&lt;/strong&gt; implements a simple &lt;code&gt;State&lt;/code&gt; management system in 35 lines of JavaScript. It offers the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can define a &lt;em&gt;state&lt;/em&gt; with a &lt;code&gt;name&lt;/code&gt; (string) and a &lt;code&gt;value&lt;/code&gt; (primitive, array, object, etc). An IndexedDB object store saves these values using the name as an index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any JavaScript component can &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; a value by its name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a value is &lt;code&gt;set&lt;/code&gt;, the state manager alerts all subscribed components about the change. A component subscribes itself via the &lt;code&gt;State&lt;/code&gt; constructor, or by setting or getting a named value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A to-do list project demonstrates the &lt;code&gt;State&lt;/code&gt; manager. It defines two &lt;a href="https://developer.mozilla.org/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt; which both access the same &lt;code&gt;todolist&lt;/code&gt; array of tasks managed by &lt;code&gt;State&lt;/code&gt; objects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;todo-list.js&lt;/code&gt;: renders the &lt;code&gt;todolist&lt;/code&gt; HTML and removes an item when the user clicks it's 'done' button.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;todo-add.js&lt;/code&gt;: shows an "add new item" form which appends new tasks to the &lt;code&gt;todolist&lt;/code&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: A single todo list component would be more practical, but this demonstrates how two isolated classes can share the same state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-indexeddb-wrapper-class"&gt;
  &lt;/a&gt;
  Creating an IndexedDB wrapper class
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://blog.openreplay.com/getting-started-with-indexeddb-for-big-data-storage"&gt;Getting Started article&lt;/a&gt; provided a Promise-based IndexedDB wrapper. We require a similar class, but it can be simpler because it fetches single records by &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;js/lib/indexeddb.js&lt;/code&gt; script defines an &lt;code&gt;IndexedDB&lt;/code&gt; class with a constructor. It accepts a database name, version, and upgrade function. It returns the instantiated object following a successful connection to the IndexedDB database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IndexedDB wrapper class&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IndexedDB&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// connect to IndexedDB database&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbUpgrade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// connection object&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// no support&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;indexedDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not supported&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// open database&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;indexedDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbUpgrade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// database upgrade event&lt;/span&gt;
        &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onupgradeneeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;dbUpgrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oldVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`IndexedDB error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorCode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The asynchronous &lt;code&gt;set&lt;/code&gt; method stores a &lt;code&gt;value&lt;/code&gt; with the &lt;code&gt;name&lt;/code&gt; identifier in the &lt;code&gt;storeName&lt;/code&gt; object store. IndexedDB handles all operations in a transaction which triggers events that resolve or reject the Promise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// store item&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// new transaction&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt;
        &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readwrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// write record&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oncomplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// success&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// failure&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, the asynchronous &lt;code&gt;get&lt;/code&gt; method retrieves the &lt;code&gt;value&lt;/code&gt; with the &lt;code&gt;name&lt;/code&gt; identifier in the &lt;code&gt;storeName&lt;/code&gt; object store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// get named item&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// new transaction&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt;
        &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readonly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

        &lt;span class="c1"&gt;// read record&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// success&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// failure&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Whether you're using React, Vue or just vanillaJS, debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;br&gt;
It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-state-manager-class"&gt;
  &lt;/a&gt;
  Creating the State manager class
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;js/lib/state.js&lt;/code&gt; script imports &lt;code&gt;IndexedDB&lt;/code&gt; and defines a &lt;code&gt;State&lt;/code&gt; class. It shares five &lt;code&gt;static&lt;/code&gt; property values across all instantiations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;dbName&lt;/code&gt;: the name of the IndexedDB database used for state storage (&lt;code&gt;"stateDB"&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dbVersion&lt;/code&gt;: the database version number (&lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;storeName&lt;/code&gt;: the name of the object store used to store all name/value pairs (&lt;code&gt;"state"&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DB&lt;/code&gt;: a reference to a single &lt;code&gt;IndexedDB&lt;/code&gt; object used to access the database, and&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;target&lt;/code&gt;: an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"&gt;EventTarget() object&lt;/a&gt; which can dispatch and receive events across all &lt;code&gt;State&lt;/code&gt; objects.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// simple state handler&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IndexedDB&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./indexeddb.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;dbName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stateDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;dbVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;storeName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventTarget&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The constructor accepts two optional parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;an array of &lt;code&gt;observed&lt;/code&gt; names, and&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;updateCallback&lt;/code&gt; function. This function receives the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; whenever a state updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A handler listens for &lt;code&gt;set&lt;/code&gt; events called when state changes. It runs the &lt;code&gt;updateCallback&lt;/code&gt; function when the passed &lt;code&gt;name&lt;/code&gt; is being &lt;code&gt;observed&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// object constructor&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// state change callback&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateCallback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// observed properties&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// subscribe to set events&lt;/span&gt;
    &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateCallback&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The class does not connect to the IndexedDB database until it's required. The &lt;code&gt;dbConnect&lt;/code&gt; method establishes a connection and reuses it across all &lt;code&gt;State&lt;/code&gt; objects. On the first run, it creates a new object store named &lt;code&gt;state&lt;/code&gt; (as defined in the static &lt;code&gt;storeName&lt;/code&gt; property):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// connect to IndexedDB database&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IndexedDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// upgrade database&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The asynchronous &lt;code&gt;set&lt;/code&gt; method updates a named value. It adds the &lt;code&gt;name&lt;/code&gt; to the &lt;code&gt;observed&lt;/code&gt; list, connects to the IndexedDB database, sets the new value, and triggers a &lt;code&gt;set&lt;/code&gt; &lt;a href="https://developer.mozilla.org/docs/Web/API/CustomEvent"&gt;CustomEvent&lt;/a&gt; which all &lt;code&gt;State&lt;/code&gt; objects receive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// set value in DB&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// add observed property&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// database update&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// raise event&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The asynchronous &lt;code&gt;get&lt;/code&gt; method returns a named value. It adds the &lt;code&gt;name&lt;/code&gt; to the &lt;code&gt;observed&lt;/code&gt; list, connects to the IndexedDB database, and retrieves the indexed data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// get value from DB&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// add observed property&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// database fetch&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can retrieve and update state values using a new &lt;code&gt;State&lt;/code&gt; object, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./state.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// instantiate&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nx"&gt;stateUpdated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// get latest value and default to zero&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// set a new state value&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myval&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// callback runs when myval updates&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stateUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is now &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other code can receive state update notifications about the same item, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I also see &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is now set to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-statemanaged-todo-list"&gt;
  &lt;/a&gt;
  Creating a state-managed todo list
&lt;/h2&gt;

&lt;p&gt;A simple to-do list app demonstrates the state management system:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRtaFS_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbwwubw4hqztu44px0bm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRtaFS_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbwwubw4hqztu44px0bm.png" alt="todo list app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; file defines two custom elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;IndexedDB state management to-do list&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./css/main.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./js/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;IndexedDB state management to-do list&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;todo-list&amp;gt;&amp;lt;/todo-list&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;todo-add&amp;gt;&amp;lt;/todo-add&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; - the todo list controlled by &lt;code&gt;./js/components/todo-list.js&lt;/code&gt; which updates the list when tasks are added and removed, and&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; - a form to add items to the todo list controlled by &lt;code&gt;./js/components/todo-list.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;./js/main.js&lt;/code&gt; loads both component modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// load components&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/todo-add.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/todo-list.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The scripts define frameworkless &lt;a href="https://developer.mozilla.org/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt; which get and set a shared &lt;code&gt;todolist&lt;/code&gt; state. Web Components are beyond the scope of this article, but the basics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can define a custom HTML element (such as &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt;). The name must contain a dash (&lt;code&gt;-&lt;/code&gt;) to avoid clashes with current or future HTML elements.&lt;/li&gt;
&lt;li&gt;A JavaScript class which &lt;code&gt;extends&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"&gt;HTMLElement&lt;/a&gt; defines the functionality. The constructor must call &lt;code&gt;super()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The browser calls a &lt;code&gt;connectedCallback()&lt;/code&gt; method when it's ready to update the DOM. The method can append content, optionally using an encapsulated &lt;a href="https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt; which is not accessible to other scripts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define"&gt;customElements.define&lt;/a&gt; registers the class with the custom element.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-lttodolistgt-endraw-component"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;./js/components/todo-list.js&lt;/code&gt; defines the &lt;code&gt;TodoList&lt;/code&gt; class for the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component. It shows a list of tasks and handles deletion when the user clicks a 'done' button. The class sets static HTML strings and creates a new &lt;code&gt;State&lt;/code&gt; object. This monitors the a &lt;code&gt;todolist&lt;/code&gt; variable and runs the object's &lt;code&gt;render()&lt;/code&gt; method when its value changes:&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
import { State } from '../lib/state.js';&lt;/p&gt;

&lt;p&gt;class TodoList extends HTMLElement {&lt;/p&gt;

&lt;p&gt;static style = &lt;code&gt;&lt;br&gt;
    &amp;lt;style&amp;gt;&lt;br&gt;
      ol { padding: 0; margin: 1em 0; }&lt;br&gt;
      li { list-style: numeric inside; padding: 0.5em; margin: 0; }&lt;br&gt;
      li:hover, li:focus-within { background-color: #eee; }&lt;br&gt;
      button { width: 4em; float: right; }&lt;br&gt;
    &amp;lt;/style&amp;gt;&lt;br&gt;
&lt;/code&gt;;&lt;br&gt;
  static template = &lt;code&gt;&amp;lt;li&amp;gt;$1 &amp;lt;button type="button" value="$2"&amp;gt;done&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;constructor() {&lt;br&gt;
    super();&lt;br&gt;
    this.state = new State(['todolist'], this.render.bind(this));&lt;br&gt;
  }&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;render()&lt;/code&gt; method receives the updated &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; (only &lt;code&gt;todolist&lt;/code&gt; will arrive). It stores the list as a local object property then appends HTML to the Shadow DOM (created by the &lt;code&gt;connectedCallback()&lt;/code&gt; method):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
  // show todo list&lt;br&gt;
  render(name, value) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// update state
this[name] = value;

// create new list
let list = '';
this.todolist.map((v, i) =&amp;gt; {
  list += TodoList.template.replace('$1', v).replace('$2', i);
});

this.shadow.innerHTML = `${ TodoList.style }&amp;lt;ol&amp;gt;${ list }&amp;lt;/ol&amp;gt;`;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;connectedCallback()&lt;/code&gt; method runs when the DOM is ready. It:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;creates a new Shadow DOM and passes the latest &lt;code&gt;todolist&lt;/code&gt; state to the &lt;code&gt;render()&lt;/code&gt; method, and&lt;/li&gt;
&lt;li&gt;attaches a click event handler which removes an item from the &lt;code&gt;todolist&lt;/code&gt; state. The &lt;code&gt;render()&lt;/code&gt; method will automatically execute because the state changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
  // initialise&lt;br&gt;
  async connectedCallback() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.shadow = this.attachShadow({ mode: 'closed' });
this.render('todolist', await this.state.get('todolist') || []);

// remove item event
this.shadow.addEventListener('click', async e =&amp;gt; {

  if (e.target.nodeName !== 'BUTTON') return;
  this.todolist.splice(e.target.value, 1);
  await this.state.set('todolist', this.todolist);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TodoList&lt;/code&gt; class is then registered for the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// register component&lt;br&gt;
customElements.define( 'todo-list', TodoList );&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-endraw-lttodoaddgt-raw-component"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; component
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;./js/components/todo-add.js&lt;/code&gt; defines the &lt;code&gt;TodoAdd&lt;/code&gt; class for the &lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; component. It shows a form that can append new tasks to the &lt;code&gt;todolist&lt;/code&gt; state. It sets a static HTML string and creates a new &lt;code&gt;State&lt;/code&gt; object. This monitors the &lt;code&gt;todolist&lt;/code&gt; state and retains it as a local object property:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
class TodoAdd extends HTMLElement {&lt;/p&gt;

&lt;p&gt;static template = &lt;code&gt;&lt;br&gt;
    &amp;lt;style&amp;gt;&lt;br&gt;
      form { display: flex; justify-content: space-between; padding: 0.5em; }&lt;br&gt;
      input { flex: 3 1 10em; font-size: 1em; padding: 6px; }&lt;br&gt;
      button { width: 4em; }&lt;br&gt;
    &amp;lt;/style&amp;gt;&lt;br&gt;
    &amp;lt;form method="post"&amp;gt;&lt;br&gt;
    &amp;lt;input type="text" name="add" placeholder="add new item" required /&amp;gt;&lt;br&gt;
    &amp;lt;button&amp;gt;add&amp;lt;/button&amp;gt;&lt;br&gt;
    &amp;lt;/form&amp;gt;&lt;br&gt;
&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;constructor() {&lt;br&gt;
    super();&lt;br&gt;
    this.state = new State(['todolist'], (name, value) =&amp;gt; this[name] = value );&lt;br&gt;
  }&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;connectedCallback()&lt;/code&gt; method runs when the DOM is ready. It:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fetches the latest &lt;code&gt;todolist&lt;/code&gt; state into a local property which defaults to an empty array&lt;/li&gt;
&lt;li&gt;appends the form HTML to a Shadow DOM, and&lt;/li&gt;
&lt;li&gt;attaches a submit event handler which adds an new item to the &lt;code&gt;todolist&lt;/code&gt; state (which, in turn, updates the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component). It then clears the input field so you can add another task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
  // initialise&lt;br&gt;
  async connectedCallback() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// get latest todo list
this.todolist = await this.state.get('todolist') || [];

const shadow = this.attachShadow({ mode: 'closed' });
shadow.innerHTML = TodoAdd.template;

const add = shadow.querySelector('input');

shadow.querySelector('form').addEventListener('submit', async e =&amp;gt; {

  e.preventDefault();

  // add item to list
  await this.state.set('todolist', this.todolist.concat(add.value));

  add.value = '';
  add.focus();

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TodoAdd&lt;/code&gt; class is then registered for the &lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// register component&lt;br&gt;
customElements.define( 'todo-add', TodoAdd );&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Projects often avoid IndexedDB because its API is clunky. It's not an obvious choice for state management, but the indexed database and large storage allocation could make it a good option for complex projects which store significant volumes of data.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Top 5 Advantages of Ai Chatbots for Business</title>
      <author>Chris Fowler</author>
      <pubDate>Thu, 08 Jul 2021 04:31:31 +0000</pubDate>
      <link>https://dev.to/dsvdeveloper88/top-5-advantages-of-ai-chatbots-for-business-1o18</link>
      <guid>https://dev.to/dsvdeveloper88/top-5-advantages-of-ai-chatbots-for-business-1o18</guid>
      <description>&lt;p&gt;Chatbots are based on Machine Learning to gather conversational cadences that allow them to copy human conversations and react to written or spoken requests to deliver a service. They comprehend language, not just commands, since they use AI.&lt;/p&gt;

&lt;p&gt;Chatbots are bringing a new way for businesses to communicate with the world and most importantly with their customers by the help of exploding popularity of messaging apps, the accelerated development of all kinds of sensors and wearables and of course with the rise of emerging technologies and &lt;a href="http://www.designveloper.com/blog/best-ai-chatbot-smartest-ai-chatbot/"&gt;AI chatbots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ-XHjES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dga5qmnu9x4mb1rn3uz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ-XHjES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dga5qmnu9x4mb1rn3uz.jpg" alt="ai chatbots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the top 5 benefits of chatbots, and have a better understanding of how they can contribute to your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cost-savings"&gt;
  &lt;/a&gt;
  1. Cost Savings
&lt;/h2&gt;

&lt;p&gt;Businesses have a variety of options from ready-made softwares developed by Facebook, Microsoft and other big IT companies to choose.&lt;/p&gt;

&lt;p&gt;First of all, implementing a full functioning chatbot, is much cheaper and faster than creating a cross platform app or hiring employees for each task. Since chatbots are automated solutions, they allow organizations to handle many customers at once, and simultaneously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-easier-approach-to-global-markets"&gt;
  &lt;/a&gt;
  2. Easier Approach to Global Markets
&lt;/h2&gt;

&lt;p&gt;Whether you are already an international brand with customers all over the world, or a local brand who is ready for global business, &lt;a href="https://www.designveloper.com/blog/what-is-chatbot-and-how-does-it-work/"&gt;chatbots&lt;/a&gt; can solve your customer care problems in multiple languages and 24/7, 365 days a year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-better-lead-generation-qualification-and-nurturing"&gt;
  &lt;/a&gt;
  3. Better Lead Generation, Qualification and Nurturing
&lt;/h2&gt;

&lt;p&gt;Personalized messaging that assists consumers along “buyer’s journey” is possible with the consumer information that chatbots receive. Besides, a chatbot can also help you to determine the unqualified leads through identified KPIs and prevent you to deal with time-consuming leads.&lt;/p&gt;

&lt;p&gt;Chatbots ensure the flow is in the right direction to get higher conversion rates. Moreover, a bot can ask the necessary and related questions, persuade the user and generate a lead for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-improved-customer-service"&gt;
  &lt;/a&gt;
  4. Improved Customer Service
&lt;/h2&gt;

&lt;p&gt;Chatbots can provide assistance real-time like a sales person in a real store. In addition, along with text and voice, they can present customers rich content with product pages, images, blog entries, tutorial videos based on their responses that can help them through their journey. Moreover, chatbots can offer an interactive communication where they also ask questions to understand the real problem.&lt;/p&gt;

&lt;p&gt;With the help of &lt;a href="https://www.designveloper.com/blog/top-5-best-chatbot-platform/"&gt;chatbot platforms&lt;/a&gt;, organizations can handle more tasks at the same time so that no customer has to wait. This will allow companies to scale up their operations to new markets globally without multiplying incoming requests to be handled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-keeping-up-with-the-trends"&gt;
  &lt;/a&gt;
  5. Keeping Up with the Trends
&lt;/h2&gt;

&lt;p&gt;Since customers’ preferences verge to interact with brands via chat -as it’s easier and faster to use- businesses have now the opportunity to reach more customers via Chatbots while staying trendy for their customers.&lt;/p&gt;

&lt;p&gt;Therefore, integrating your own chatbot into one of the popular platforms that your customers use daily, can be better than building a new app by saving money and time. Furthermore, 65% of smartphone users don’t download any new apps in a month. Since users have their core apps such as Facebook, Instagram, WhatsApp etc., they don’t look for new ones.&lt;/p&gt;

</description>
      <category>analyst</category>
      <category>techtalks</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Difference between API and Web Service</title>
      <author>Chhotu</author>
      <pubDate>Thu, 08 Jul 2021 04:24:10 +0000</pubDate>
      <link>https://dev.to/chhotu05/difference-between-api-and-web-service-3oeb</link>
      <guid>https://dev.to/chhotu05/difference-between-api-and-web-service-3oeb</guid>
      <description>&lt;p&gt;Let's see what definitions says.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API (Application Programming Interface) is a software interface that permits two applications to interact directly with each other without any user intervention.&lt;/li&gt;
&lt;li&gt;Web service is a collection of some open protocols and standards which are used to exchange data between systems or applications.

Now Let's understand the differences between them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web services and APIs are two of these overlapping tech terms that often get confused. you would possibly have even heard these words used interchangeably, but are they even an equivalent thing?&lt;/p&gt;

&lt;p&gt;Here is the answer:&lt;br&gt;
   An API is an interface that permits you to build on the data and functionality of potentially another application, while a web service is a network-based resource that fulfills a specific task.&lt;br&gt;
   Yes, they overlap on each other: all web services are APIs, but not all APIs are web services.&lt;/p&gt;

&lt;p&gt;Contrary to what you would possibly think, APIs and web services aren't mutually exclusive. One is a subset of the other: every web service is an API — since it exposes an application’s data and it's functionality — but not every API is a web service. this is often because the definition of a web service is sort of restrictive when it involves implementation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Web services require a network&lt;/strong&gt;. While APIs can be offline or online, web services must use a network.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;APIs are generally protocol agnostic&lt;/strong&gt;. Web services usually use SOAP (but sometimes REST, UDDI, and XML-RPC), whereas APIs can use any protocols or design styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq-8DEFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2ibhi15ksgsjq8eazr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq-8DEFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2ibhi15ksgsjq8eazr.jpg" alt="API vs WebServices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the key differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API is used for any style of communication, whereas Web service is used for only REST, SOAP and XML-RPC for communication.&lt;/li&gt;
&lt;li&gt;API supports both HTTP and HTTPS protocol, whereas Web service supports only HTTP protocol.&lt;/li&gt;
&lt;li&gt;API supports XML and JSON, whereas Web service only supports XML.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>systems</category>
      <category>architecture</category>
      <category>functional</category>
    </item>
    <item>
      <title>Angular Dev's first React project - Netflix clone</title>
      <author>Ajit Singh</author>
      <pubDate>Thu, 08 Jul 2021 03:36:34 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/angular-dev-s-first-react-project-netflix-clone-fe</link>
      <guid>https://dev.to/ajitsinghkaler/angular-dev-s-first-react-project-netflix-clone-fe</guid>
      <description>&lt;p&gt;I am an angular collaborator and an avid user of Angular this is my first react project a netflix clone using react, styled components, jest tests. It uses firebase firestore as the DB if you want to run it you have to set it up using the seed data already given. To setup follow the instruction in readme and firebase.prod.js. You can also fork my &lt;a href="https://github.com/ajitsinghkaler/netflix"&gt;repo&lt;/a&gt; or set it upto learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#few-of-my-positive-experiences"&gt;
  &lt;/a&gt;
  Few of my positive experiences
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating a component in React.js is a dream components cannot be created easier than this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hooks for state management - Hooks are a really easy paradigm for state management &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#neutral-experiences"&gt;
  &lt;/a&gt;
  Neutral experiences
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Styled components - Suffers from scalability problems writing styles again and again seemed weird but the scoping was great.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#negative-experiences"&gt;
  &lt;/a&gt;
  Negative experiences
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Context was weird Calling use context again and again seemed odd somehow. Maybe I'm not accustomed to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to find right tools for the job you are trying to do. React has so many options which is great but I makes choosing the right tool. That much harder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to scale react could not find good resources on it. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#angular-apparent-short-comings-after-using-react"&gt;
  &lt;/a&gt;
  Angular apparent short comings after using React
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;State Management- It has nothing compared to hooks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component creation is so hard in Angular&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why do we need modules. Why?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular team giving every package has taken its toll on angular innovation. Not much is tried by the community in angular.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#angular-strong-suit"&gt;
  &lt;/a&gt;
  Angular strong suit
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Angular basics will always be same because of the same lib use so easy to work on multiple project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular directives there is nothing like them &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular schematics setting up libs for you is great&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#css-management"&gt;
  &lt;/a&gt;
  CSS Management
&lt;/h2&gt;

&lt;p&gt;I don't know how we got to this place in frontend but there is no great way in Angular or react to manage your CSS is important in frontend but not much attention or tooling is there for managing it&lt;/p&gt;

&lt;p&gt;Let me know in the comments if I'm wrong about something or I nee to study more I'm trying to learn other frameworks so that I know more paradigms in frontend development.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Project 88 of 100 - Lorem Ipsum Generator</title>
      <author>James Hubert</author>
      <pubDate>Thu, 08 Jul 2021 03:10:27 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-88-of-100-lorem-ipsum-generator-4bj0</link>
      <guid>https://dev.to/jwhubert91/project-88-of-100-lorem-ipsum-generator-4bj0</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://100-react-projects-day-88-lorem-ipsum-generator.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-88-lorem-ipsum"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is part 8 of 15 in a series on building React projects by John Smilga, covered in &lt;a href="https://www.youtube.com/watch?v=a_7Z7C_JCyo"&gt;this 10 hour video&lt;/a&gt; on Youtube.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like projects like this and want to stay up to date with more, check out my Twitter &lt;a href="https://twitter.com/jwhubert91"&gt;@jwhubert91&lt;/a&gt;, I follow back! See you tomorrow for another project.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>DEV Protip: Set the Slug of your posts</title>
      <author>Siddharth</author>
      <pubDate>Thu, 08 Jul 2021 02:57:07 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/dev-tip-set-slug-46an</link>
      <guid>https://dev.to/siddharthshyniben/dev-tip-set-slug-46an</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;When creating a post, set it's title to the slug you like and then publish it. You can change the title to the desired one later.&lt;/p&gt;




&lt;p&gt;Check out the slug of this post ^ up there. Do you see it? &lt;/p&gt;

&lt;p&gt;The slug should have been &lt;code&gt;dev-protip-set-the-slug-of-your-posts&lt;/code&gt; or something like that. But instead, it is &lt;code&gt;dev-tip-set-slug&lt;/code&gt;, which is much more readable. Here, I'll show you how to set the slugs of any post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This won't work for published posts. You have to do this when you create a new post or edit a draft.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a Post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXtBL0Rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd327wxordp2wt0yba8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXtBL0Rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd327wxordp2wt0yba8i.png" alt="create-post"&gt;&lt;/a&gt;&lt;/p&gt;
Click on that button at the top right


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set the title of the post as the slug&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVDftz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1762g5raj53vypysbchr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVDftz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1762g5raj53vypysbchr.png" alt="set-slug"&gt;&lt;/a&gt;&lt;/p&gt;
Choose a small, appropriate slug

 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write your content and publish the post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can continue writing your post's contents. Just make sure to not change the title. Once you finish, you can publish the post.&lt;/p&gt;

&lt;p&gt;Now, the slug will be generated from the post title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIbxGTii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh48z2mi2qeoahumfsge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIbxGTii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh48z2mi2qeoahumfsge.png" alt="view-slug"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fix the title&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, you edit the post and set the proper title, then you can click &lt;code&gt;Save Changes&lt;/code&gt;. The trick here is that if you edit the title, the &lt;a href="https://github.com/forem/forem/issues/5653"&gt;slug will not be recalculated&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Done!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can continue making changes to the title, body and tags, but the slug will never change. This is supposed to be a bug, but it can be sort of useful.&lt;/p&gt;

&lt;p&gt;If you want, you can view the post which I showed you in this post &lt;a href="https://dev.to/siddharthshyniben/this-is-the-slug-3079"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>This is the title</title>
      <author>Siddharth</author>
      <pubDate>Thu, 08 Jul 2021 02:51:05 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/this-is-the-slug-3079</link>
      <guid>https://dev.to/siddharthshyniben/this-is-the-slug-3079</guid>
      <description>&lt;p&gt;Testing &lt;a href="https://dev.to/siddharthshyniben/dev-tip-set-slug-46an"&gt;this&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Feeling burnt out or unmotivated? Read this.</title>
      <author>Karina Pichardo</author>
      <pubDate>Thu, 08 Jul 2021 00:03:48 +0000</pubDate>
      <link>https://dev.to/karinapichardo/feeling-burnt-out-or-unmotivated-read-this-4po9</link>
      <guid>https://dev.to/karinapichardo/feeling-burnt-out-or-unmotivated-read-this-4po9</guid>
      <description>&lt;p&gt;Just a few weeks ago I was feeling unmotivated and sort of burnt out?&lt;/p&gt;

&lt;p&gt;I’m finally out of that funk I was in and I realized why I was there in the first place.&lt;/p&gt;

&lt;p&gt;I was working on projects that were all really similar, I would finish up a project and immediately start another one, using the same exact techniques and technologies as the last. &lt;/p&gt;

&lt;p&gt;I thought I was doing myself a favor by practicing repetition and although I still believe that “practice makes perfect”, I think it’s equally important to continue learning and growing, especially as a developer. &lt;/p&gt;

&lt;p&gt;So I did just that, I started learning more about the terminal and also learned Sass (which I’m absolutely obsessed with now). And I'm back to feeling like myself again.&lt;/p&gt;

&lt;p&gt;I’m actually grateful that I experienced those stressful weeks leading up to today because I now understand how to navigate those “burnt out” / “unmotivated” moments. &lt;br&gt;
Learning fuels me. &lt;/p&gt;

&lt;p&gt;Likewise, this situation reminded me why I started learning to code and why I love what I do, because it’s a forever learning experience. The best developers never stop being curious and never stop learning. &lt;/p&gt;

&lt;p&gt;Thought I’d share incase anyone out there is going through something similar.  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>PatchNote DE LA V 1</title>
      <author>CraftTUB</author>
      <pubDate>Wed, 07 Jul 2021 23:21:38 +0000</pubDate>
      <link>https://dev.to/crafttub/patchnote-de-la-v-1-ep0</link>
      <guid>https://dev.to/crafttub/patchnote-de-la-v-1-ep0</guid>
      <description>&lt;p&gt;bonjour aujourd'hui on sort le PatchNote de la v1 de CraftTUB qui sera ouvert à tout le 19 juillet  a 21h sur la chaine YouTube en live de tottoff&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l'hôtel des vente &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pour vendre votre item (hdv /ah sell [ le prix , le quartier)&lt;br&gt;
  pour acheté (hdv /ah , et sélectionnez l'item ) &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le claims &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pose votre coffre dans le zone que vous voler claims un zone va&lt;br&gt;
  se  créé , un fois fini pour le supprimer ( delecteclaims )&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PVP / modée&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;choisissez vote arène pour vous pvp est atender le joueur&lt;/p&gt;

&lt;p&gt;-faction &lt;/p&gt;

&lt;p&gt;seras disponible a la v 1.5.6&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;survie &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sethome (pour crée ton home 🏡 )&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ajout optionnel (les mods )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;le mods craftTUB ajoute (les block/minerait,armure,outil en &lt;br&gt;
  craftTUB&lt;/p&gt;

&lt;p&gt;le mods craftdium ajoute (les block/minerait,armure,outil en &lt;br&gt;
  craftDIUM&lt;/p&gt;

&lt;p&gt;TOUT L'ÉQUIPE DE CraftTUB a hâte de vous voir sur le serveur&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Types of Graph</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 07 Jul 2021 23:07:03 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/types-of-graph-14ei</link>
      <guid>https://dev.to/ayabouchiha/types-of-graph-14ei</guid>
      <description>&lt;p&gt;Hello, today, I'm gonna discuss the famous types of graphs, before reading this post, I suggest you check this &lt;a href="https://dev.to/ayabouchiha/introduction-to-graph-in-data-structure-8mi"&gt;post (&lt;em&gt;introduction to graph in data structure&lt;/em&gt;)&lt;/a&gt; firstly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-graph"&gt;
  &lt;/a&gt;
  Types of Graph
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Directed Graph&lt;/strong&gt; : (&lt;em&gt;also called directed network or digraph&lt;/em&gt;) in this type, every edge is directed from one node to another. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDQSrFcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pjxv0qn4pru4whmgknf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDQSrFcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pjxv0qn4pru4whmgknf.jpg" alt="Directed graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Undirected Graph&lt;/strong&gt;: all the edges can be traversed from both directions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7n3NJn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ot2ykvcoi8jvrc61z6d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7n3NJn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ot2ykvcoi8jvrc61z6d.jpg" alt="Undirected graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Weighted Graph&lt;/strong&gt;: in this one, all edges have a weight which is a numerical value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Q6Op3bB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1p94w58z82ji8ynl5d2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Q6Op3bB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1p94w58z82ji8ynl5d2.jpg" alt="Weighted graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Unweighted Graph&lt;/strong&gt;: the opposite of weighted graph, each edge has not a weight&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Connected Graph&lt;/strong&gt;: a connected graph is a graph that has a path between every pair of nodes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPZC6yHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i46qx4hh6xnrc81fnke.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPZC6yHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i46qx4hh6xnrc81fnke.jpg" alt="Connected graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Disconnected Graph&lt;/strong&gt;: a graph is called disconnect if there is at least two nodes of the graph are not connected by a path. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9aaQR6vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7pww6baykkywo415f8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9aaQR6vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7pww6baykkywo415f8.jpg" alt="Disconnected graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Simple Graph&lt;/strong&gt;: a graph is simple if it has no loops and no multiple edges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-FKIQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s0281h3ihe2gef7plqi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-FKIQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s0281h3ihe2gef7plqi.jpg" alt="Simple graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-and-useful-resources"&gt;
  &lt;/a&gt;
  Reference and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mathinsight.org/definition/directed_graph#:~:text=A%20directed%20graph%20is%20graph,digraph%20or%20a%20directed%20network."&gt;https://mathinsight.org/definition/directed_graph#:~:text=A%20directed%20graph%20is%20graph,digraph%20or%20a%20directed%20network.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathworld.wolfram.com/SimpleGraph.html"&gt;https://mathworld.wolfram.com/SimpleGraph.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathworld.wolfram.com/ConnectedGraph.html#:~:text=A%20connected%20graph%20is%20graph,connected%2C%20while%20empty%20graphs%20on"&gt;https://mathworld.wolfram.com/ConnectedGraph.html#:~:text=A%20connected%20graph%20is%20graph,connected%2C%20while%20empty%20graphs%20on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/connected-vs-disconnected-graphs#:~:text=c%20d-,Disconnected%20Graph,Vertex%201"&gt;https://www.tutorialspoint.com/connected-vs-disconnected-graphs#:~:text=c%20d-,Disconnected%20Graph,Vertex%201&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathworld.wolfram.com/WeightedGraph.html"&gt;https://mathworld.wolfram.com/WeightedGraph.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://homepages.math.uic.edu/~jan/mcs320/mcs320graphs.pdf"&gt;http://homepages.math.uic.edu/~jan/mcs320/mcs320graphs.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if you have any suggestions, you can contact me on &lt;a href="https://t.me/AyaBouchiha"&gt;telegram&lt;/a&gt;, see you next post.&lt;/p&gt;

&lt;p&gt;Have a great day :)&lt;br&gt;
#day_25&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
