<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Polymorphism in Software Development:
</title>
      <author>Leo Barnuevo</author>
      <pubDate>Fri, 15 Oct 2021 20:27:24 +0000</pubDate>
      <link>https://dev.to/leobdev/polymorphism-in-software-development-430b</link>
      <guid>https://dev.to/leobdev/polymorphism-in-software-development-430b</guid>
      <description>&lt;p&gt;If you understand the concept of inheritance and polymorphism, I know that your code is always clean, simple, and optimized to fulfill its function efficiently. If you don't understand it yet, don't worry, I'll tell you what it's about so you can simplify your work.&lt;/p&gt;

&lt;p&gt;Technically speaking, &lt;strong&gt;polymorphism is the capacity that some languages ​​have, that allows them to send syntactically the same messages to objects of different types (but with the same inheritance) and that each one responds in its own way.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Therefore, as its name says and as we can deduce from the small definition that I have given you in the previous paragraph, polymorphism starts from the idea that &lt;strong&gt;a method has many forms and that it responds accurately depending on what class it belongs to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, in a video game, we can have an object called a character, and it can have different classes such as warrior and magician, which respond to the same method called attack. However, as we have said that they must respond correctly depending on their class, the polymorphism would ensure that the warrior's attack is, for example, with a sword and that of the magician with a book and a spell, thus being the character, a polymorphic object.&lt;/p&gt;

&lt;p&gt;In summary, it is a mechanism that allows the same method to be different depending on the class that is using it and avoids the creation of a different function for each class.&lt;/p&gt;

&lt;p&gt;In short, Polymorphism consists of redefining a method of a parent class in a child class, in this way, the key utility of polymorphism is to reduce the maintenance of computer programs to the maximum, through a great advantage, which is to create new types without the need to alter those that we have already done previously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overloading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a compile-time method. It means that there are several methods present in a class but with the same name although different types, orders, or numbers of parameters, that is, independent of each other. In other words, overloading is defining a new method the same as an old one, but changing the type or number of parameters, thus using it for the same function but with different behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overriding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It happens at runtime using the same method, therefore, unlike overloading, it uses the same signature, in two classes that share the same inheritance and connect through it. In this case, the parameter must be the same and is used when a different function must be done.&lt;/p&gt;

&lt;p&gt;Remember that all the concepts related to software development are better understood when they are put into practice, you have the theory now it's up to you to sit down and start applying it in your own projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Based on your experience, how would you simply define polymorphism?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I read you in the comments.&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;Remember that you can also join the conversation through my social networks, you can find me on Twitter as &lt;strong&gt;@BarnuevoLeo&lt;/strong&gt; and find me on LinkedIn as &lt;strong&gt;Leo J. Barnuevo.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>7 Visual Studio 2022 
Features That Will
Change Your Life</title>
      <author>Lauren Del Signore Fazio</author>
      <pubDate>Fri, 15 Oct 2021 19:51:17 +0000</pubDate>
      <link>https://dev.to/grapecity/7-visual-studio-2022-features-that-willchange-your-life-2mcc</link>
      <guid>https://dev.to/grapecity/7-visual-studio-2022-features-that-willchange-your-life-2mcc</guid>
      <description>&lt;p&gt;Visual Studio 2022 Version 17.0 release candidate and preview are here, with the full launch slated for November 8, 2021. &lt;/p&gt;

&lt;p&gt;Let’s review the top features that are going to make a dev’s life so much easier. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-net-6"&gt;
  &lt;/a&gt;
  1. .NET 6
&lt;/h3&gt;

&lt;p&gt;The most exciting feature is the inclusion of .NET 6, which is scheduled for release in early November 2021. .NET 6 enables the creation of multiplatform applications and will incorporate specific frameworks for Android and Mac. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-net-maui"&gt;
  &lt;/a&gt;
  2. .NET MAUI
&lt;/h3&gt;

&lt;p&gt;The Visual Studio 2022 framework is .NET MAUI. MAUI is a cross-platform framework for creating native desktop, mobile, XAML, and C# applications on any operating system. MAUI will replace Xamarin forms. Additional function will allow users to create desktop applications using Blazor. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ChzHsak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20211015-7-visual-studio-2022-features/1-dotnet-maui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ChzHsak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20211015-7-visual-studio-2022-features/1-dotnet-maui.png" alt="dotnet maui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-64bit-application"&gt;
  &lt;/a&gt;
  3. 64-Bit Application
&lt;/h3&gt;

&lt;p&gt;For the first time, Visual Studio 2022 offers a 64-bit application, and no longer has a 4 GB limitation of memory for the primary devenv.exe process. If you want to use a 32-bit application, you can run and debug the application. &lt;/p&gt;

&lt;p&gt;Open, edit, run, and debug the largest and most complex solutions without running out of memory.&lt;/p&gt;

&lt;p&gt;Unrestricted access to all PC memory results in better performance and fewer out-of-memory errors. Microsoft says it makes every part of the workflow faster and more efficient – from loading solutions to debugging F5.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-better-usability"&gt;
  &lt;/a&gt;
  4. Better Usability
&lt;/h3&gt;

&lt;p&gt;The new user interface is refreshed and modernized, and utilizes lighter icons for the light and dark versions of the interface. Users now have hundreds of options to customize with changes - reducing complexity and decreasing the cognitive load.&lt;br&gt;
Look for these additions as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updated icons for better clarity, consistency, readability, and contrast&lt;/li&gt;
&lt;li&gt;Cascadia Code increases readability with a new fixed-width font and improved themes&lt;/li&gt;
&lt;li&gt;Integration with Accessibility Insights detects accessibility issues before the software reaches end-users&lt;/li&gt;
&lt;li&gt;Customizatize the VS experience with IDE settings and the ability to synchronize settings between devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4YL-jZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20211015-7-visual-studio-2022-features/2-usability.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4YL-jZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20211015-7-visual-studio-2022-features/2-usability.jpg" alt="usability"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-hot-reload"&gt;
  &lt;/a&gt;
  5. Hot Reload
&lt;/h3&gt;

&lt;p&gt;The Hot Reload feature allows UI modification while the project debugs, and applies the changes without a restart debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqya4Lgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20211015-7-visual-studio-2022-features/3-hot-reload.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqya4Lgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20211015-7-visual-studio-2022-features/3-hot-reload.png" alt="hot reload"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-intellicode-is-even-better"&gt;
  &lt;/a&gt;
  6. IntelliCode is Even Better
&lt;/h3&gt;

&lt;p&gt;Automatically complete larger code chunks (up to a whole line at a time) with IntelliCode. As Visual Studio states, “Leverage the wisdom of nearly half of million open source repos’ code patterns”. &lt;/p&gt;

&lt;p&gt;We say, “Yes, please.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-enhanced-debugging"&gt;
  &lt;/a&gt;
  7. Enhanced Debugging
&lt;/h3&gt;

&lt;p&gt;Visual Studio 2022 is a friend to the developer, with the new debugging tool that diagnose issues quickly. You can use async visualizations, automatic analyzers, time travel debugging, and more. &lt;/p&gt;

&lt;p&gt;This November, Visual Studio 2022 will be compatible with GrapeCity's .NET products, including Spread.NET v15, ComponentOne, GrapeCity Documents, and ActiveReports.NET. &lt;/p&gt;

</description>
      <category>news</category>
      <category>dotnet</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>What's up with Heavy Duty Builders and Bulldozer.</title>
      <author>Daniel Marin</author>
      <pubDate>Fri, 15 Oct 2021 19:44:40 +0000</pubDate>
      <link>https://dev.to/danmt/whats-up-with-heavy-duty-builders-and-bulldozer-1pfj</link>
      <guid>https://dev.to/danmt/whats-up-with-heavy-duty-builders-and-bulldozer-1pfj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YgU5iBtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyuae27hko30oz8m5haw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YgU5iBtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyuae27hko30oz8m5haw.png" alt="Screenshot of bulldozer in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TLDR;&lt;/p&gt;

&lt;p&gt;Heavy Duty Builders is looking to become a DAO of Solana builders that creates open-source tools. Bulldozer is the first tool, a low-code platform to create Anchor-based programs in Solana.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Building software is hard af. I mean it, it really is. That's why we, as builders too, are committed to creating the dopest power tools so other builders can focus on what matters, their projects.&lt;/p&gt;

&lt;p&gt;Heavy Duty Builders aims to become a DAO, where developers can join and help build the tools of the future. Bulldozer is our first tool, a low-code platform for creating Anchor workspaces in Solana.&lt;/p&gt;

&lt;p&gt;We're not VC funded. Right now, we're just two builders working on Bulldozer. We're still on the first stages, but we have been getting a good response from the community. We've noticed other builders interested in a tool such as Bulldozer.&lt;/p&gt;

&lt;p&gt;We want to stay open source and that's why we want to be a DAO. One of our top priorities is to figure out a way to give rewards for issues and features, maybe an NFT-powered medal system. This way builders can use medals as proof that they are not just any other builder, they are Heavy Duty Builders.&lt;/p&gt;

&lt;p&gt;There's a lot to figure out. But we'll keep y'all posted.&lt;/p&gt;

&lt;p&gt;Now if you're a builder and want to read a bit more about the nitty-gritty details behind Bulldozer, keep reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;The system aims to make it easier for developers to write Solana programs. A program is some code that processes transactions in Solana runtime. For web2 developers, that's like a serverless cloud function. &lt;/p&gt;

&lt;p&gt;This is how I see it, when you configure an instruction in Solana, more specifically with Anchor, you define how this "cloud function" will behave when called. There's way more to it, but that's a simplification I like to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instruction"&gt;
  &lt;/a&gt;
  Instruction
&lt;/h3&gt;

&lt;p&gt;Bulldozer enables builders to configure an instruction through a client. The declarative nature of Anchor made it possible to create this configuration tool in a short time. Instructions take arguments that you can define in Bulldozer, and also, they take Accounts. &lt;/p&gt;

&lt;p&gt;An account is, well, a very important concept you must know, but let's see it as a "file" that lives in Solana. Solana programs are stateless, meaning that when you want to use an account's data inside a program, you need to provide the account to the instruction when calling it.&lt;/p&gt;

&lt;p&gt;But no worries, Bulldozer lets you specify the accounts. &lt;/p&gt;

&lt;p&gt;There's also a very simple code editor that allows you to create the body of your instruction's handler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collection"&gt;
  &lt;/a&gt;
  Collection
&lt;/h3&gt;

&lt;p&gt;Accounts in Solana have data that you have to de-serialize to use. You can think of a collection as the "schema" of your account. Bulldozer allows builders to create collections and add attributes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applications"&gt;
  &lt;/a&gt;
  Applications
&lt;/h3&gt;

&lt;p&gt;An application maps to a Solana program, it consolidates a set of instructions and makes them available to the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workspace"&gt;
  &lt;/a&gt;
  Workspace
&lt;/h3&gt;

&lt;p&gt;It's common to have applications that need to communicate with each other, in that case, it's good if they all live together. A workspace gives builders the chance of grouping their applications.&lt;/p&gt;

&lt;p&gt;All the information is stored on-chain. We want to give builders the ability to collaborate in real-time powered by Solana. Although, this isn't a feature yet, we have an idea of how to approach it with Anchor events and subscriptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;We decided to go for a monorepo because we're planning to keep adding more tools. We chose Nx for managing the monorepo, it's not fully integrated with Rust build system which is kinda PITA, and that's something we're looking forward to fixing.&lt;/p&gt;

&lt;p&gt;Since we're generating Anchor based programs, we went the same road with our code. As of now, there's a single program to do it all, but we're open to the idea of splitting it into multiple subprograms. &lt;/p&gt;

&lt;p&gt;The client is built using Angular. I know it's weird to see a Dapp without React, but who knew, right? It's actually doable! It uses the @solana/wallet-adapter library for connecting to wallets. The @project-serum/anchor TS library powers all the requests to Solana.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#status"&gt;
  &lt;/a&gt;
  Status
&lt;/h2&gt;

&lt;p&gt;There's a CRUD for applications, collections, collection attributes, instructions, instruction arguments, instruction accounts, and instruction relations. The UI can perform all the management operations.&lt;/p&gt;

&lt;p&gt;So far, we covered some Anchor features. We have a list of features we want to add ASAP. Improving the template engine is one of our top priorities, as well, as hiding some gory details when creating attributes and arguments.&lt;/p&gt;

&lt;p&gt;The code is open source, so you can also go there and take a look at it yourself. You can find the &lt;a href="https://github.com/heavy-duty/platform"&gt;code for bulldozer here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;p&gt;We're planning on working full-time in Bulldozer and see how far it can go. We already have a roadmap of what want to achieve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage workspace and allow grouping of applications.&lt;/li&gt;
&lt;li&gt;Improve Anchor integrations.&lt;/li&gt;
&lt;li&gt;Enable real-time updates through events.&lt;/li&gt;
&lt;li&gt;Enhance usability across the whole process.&lt;/li&gt;
&lt;li&gt;Improve template engine.&lt;/li&gt;
&lt;li&gt;Set up continuous integration for internal development.&lt;/li&gt;
&lt;li&gt;Git integration for versioning of workspaces.&lt;/li&gt;
&lt;li&gt;CLI to list, build and deploy workspaces and applications.&lt;/li&gt;
&lt;li&gt;Plugin-support for community utilities.&lt;/li&gt;
&lt;li&gt;Cross program invocation between applications in a workspace.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, if you want to stay tuned, &lt;a href="https://twitter.com/notifications"&gt;follow us on Twitter&lt;/a&gt; or &lt;a href="https://discord.gg/Ej47EUAj4u"&gt;join the Discord&lt;/a&gt;. You can also &lt;a href="https://heavyduty.builders/"&gt;subscribe to our mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Peace.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>solana</category>
      <category>devtools</category>
    </item>
    <item>
      <title>Filter, search, and sort tables with Rails and Turbo Frames</title>
      <author>David Colby</author>
      <pubDate>Fri, 15 Oct 2021 19:34:30 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/filter-search-and-sort-tables-with-rails-and-turbo-frames-1ea2</link>
      <guid>https://dev.to/davidcolbyatx/filter-search-and-sort-tables-with-rails-and-turbo-frames-1ea2</guid>
      <description>&lt;p&gt;Today we are going to build a table that can be sorted, searched, and filtered all at once, using Ruby on Rails, Turbo Frames, a tiny Stimulus controller, and a little bit of Tailwind for styling.&lt;/p&gt;

&lt;p&gt;We will start with a sortable, Turbo Frame-powered table that displays a list of Players from a database. We built this sortable table in a &lt;a href="https://www.colby.so/posts/sortable-table-with-rails-and-turbo-frames"&gt;previous article&lt;/a&gt; — you might find it helpful to start with that article, especially if you are new to Turbo.&lt;/p&gt;

&lt;p&gt;When we are finished, users will be able to search for players by name, filter them by their team, and sort the table. Sorting, searching, and filtering all work together, in any combination, and they each occur without a full page turn. The end result will work like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULha2HzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abgabcu9q2wbxwc0dukx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULha2HzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abgabcu9q2wbxwc0dukx.gif" alt="A screen recording of a user interacting with a table on a website. They click column headers to sort the table, use a drop down menu to filter the table by a specific team, and type in a search box to filter the table by name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article is intended for folks who are comfortable with Ruby and Rails code. You won’t need any prior experience with Turbo Frames or Stimulus.&lt;/p&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h2&gt;

&lt;p&gt;If you want to follow along with this article and you haven’t already completed the &lt;a href="https://www.colby.so/posts/sortable-table-with-rails-and-turbo-frames"&gt;sortable table article&lt;/a&gt; locally, you’ll want to begin by cloning &lt;a href="https://github.com/DavidColby/player_sorting_frames"&gt;this Github repo&lt;/a&gt;. If you have completed the sortable table article, this one picks up exactly where that one ends, so go ahead and work from where that article finished.&lt;/p&gt;

&lt;p&gt;To set up the application after cloning from Github, from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle install
yarn install
rails db:setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the application is ready, checkout the &lt;a href="https://github.com/DavidColby/player_sorting_frames/tree/sortable"&gt;sortable branch&lt;/a&gt;, where this article picks up, and then run &lt;code&gt;bin/dev&lt;/code&gt; to compile assets and start your development server.&lt;/p&gt;

&lt;p&gt;After you start the server, head to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; and see that you have a seeded database of players and that you can sort the table by clicking on each column header.&lt;/p&gt;

&lt;p&gt;If you’re curious how the the sorting works, the sortable tables article goes through the frame-powered sorting mechanism in detail.&lt;/p&gt;

&lt;p&gt;With setup complete, let's start building!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-search-form"&gt;
  &lt;/a&gt;
  Add a search form
&lt;/h2&gt;

&lt;p&gt;We’ll start with a simple search form, added inside the &lt;code&gt;players&lt;/code&gt; turbo frame in  &lt;code&gt;app/views/players/_players.html.erb&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"players"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"shadow overflow-hidden rounded border-b border-gray-200"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-end mb-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_with&lt;/span&gt; &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="n"&gt;list_players_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method: :get&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;placeholder: &lt;/span&gt;&lt;span class="s2"&gt;"Search by name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"border border-blue-500 rounded p-2"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;button&lt;/span&gt; &lt;span class="s2"&gt;"Search"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"bg-blue-500 text-white p-2 rounded-sm"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Snip the table --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a standard-issue Rails search form. When the form is submitted, a GET request is dispatched and &lt;code&gt;PlayersController#list&lt;/code&gt; responds to the request. For now, the form requires the user to click the Search button to submit the search request.&lt;/p&gt;

&lt;p&gt;Next, we’ll update the &lt;code&gt;list&lt;/code&gt; method in &lt;code&gt;app/controllers/players_controller.rb&lt;/code&gt; to filter the list of players when the search form is submitted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;
  &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:team&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name ilike ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
  &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:direction&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'players'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;players: &lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we’ve got a clunky, functional implementation of searching by name — when the &lt;code&gt;name&lt;/code&gt; parameter from the form’s text_field is present, we run a case insensitive query for players in the database with a name that matches the search query.&lt;/p&gt;

&lt;p&gt;With these changes in place, refresh the page, type a query into the search form and submit it. You should see the players list update with the results of your query.&lt;/p&gt;

&lt;p&gt;You’ll notice right away that searching clears any previously applied sorting on the table, and sorting the table clears out any search. So we’ve got a search form, but we have to click to submit the form and doing so clears out the user’s sorting preference.&lt;/p&gt;

&lt;p&gt;We’ll fix both of those issues, starting with remove the submit button and searching as the user types instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-searching"&gt;
  &lt;/a&gt;
  Real-time searching
&lt;/h3&gt;

&lt;p&gt;We’ll use a small Stimulus controller to submit the search form as the user types. First, generate the Stimulus controller with the generator built in to &lt;code&gt;stimulus-rails&lt;/code&gt;. From your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g stimulus search_form
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, fill that controller in with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/javascript/controllers/search_form_controller.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestSubmit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This controller’s &lt;code&gt;search&lt;/code&gt; function calls &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit"&gt;requestSubmit&lt;/a&gt; on a &lt;code&gt;form&lt;/code&gt; target. Since we’ll call this &lt;code&gt;search&lt;/code&gt; function as the user is typing in a text input, we’ve add &lt;code&gt;clearTimeout&lt;/code&gt; and &lt;code&gt;setTimeout&lt;/code&gt; to ensure that the form isn’t submitted every time the user types a new character.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;requestSubmit&lt;/code&gt; needs a &lt;a href="https://github.com/javan/form-request-submit-polyfill"&gt;polyfill&lt;/a&gt; for support on Safari and IE11. As an alternative to &lt;code&gt;requestSubmit&lt;/code&gt;, if you are using &lt;code&gt;Rails/ujs&lt;/code&gt; in your application, &lt;code&gt;Rails.fire(this.formTarget, 'submit')&lt;/code&gt; works without a polyfill.&lt;/p&gt;

&lt;p&gt;With the Stimulus controller ready to go, next we’ll connect that controller the search form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-end mb-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_with&lt;/span&gt; &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="n"&gt;list_players_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method: :get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;controller: &lt;/span&gt;&lt;span class="s2"&gt;"search-form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;search_form_target: &lt;/span&gt;&lt;span class="s2"&gt;"form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;turbo_frame: &lt;/span&gt;&lt;span class="s2"&gt;"players"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;placeholder: &lt;/span&gt;&lt;span class="s2"&gt;"Search by name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"border border-blue-500 rounded p-2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;autocomplete: &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s2"&gt;"input-&amp;gt;search-form#search"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"players"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"shadow overflow-hidden rounded border-b border-gray-200"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Snip table --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we first moved the search form outside of the &lt;code&gt;players&lt;/code&gt; &lt;code&gt;turbo-frame&lt;/code&gt;. This is necessary because if the search form is inside of the turbo frame, the search input will be reset every time the &lt;code&gt;players&lt;/code&gt; frame is rerendered (meaning every time our search form is submitted), like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idbe90EG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99ptawtf1q9kjuqgp718.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idbe90EG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99ptawtf1q9kjuqgp718.gif" alt="A screen recording of a user typing in a search form above a table with a list of players. When they finish typing the table updates based on their query and the search form they were typing is reset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the form is now outside of the frame, we add a &lt;code&gt;data-turbo-frame&lt;/code&gt; to target the &lt;code&gt;players&lt;/code&gt; frame. This &lt;a href="https://turbo.hotwired.dev/handbook/frames#targeting-navigation-into-or-out-of-a-frame"&gt;tells Turbo&lt;/a&gt; to use the response from the form submission to replace the content of the players frame.&lt;/p&gt;

&lt;p&gt;We also added &lt;code&gt;data-controller="search-form"&lt;/code&gt; and &lt;code&gt;data-search_form_target="form"&lt;/code&gt; to the form element. These Stimulus attributes &lt;a href="https://stimulus.hotwired.dev/reference/controllers#identifiers"&gt;connect&lt;/a&gt; the &lt;code&gt;search-form&lt;/code&gt; controller to the DOM and set the &lt;code&gt;form&lt;/code&gt; &lt;a href="https://stimulus.hotwired.dev/reference/targets#attributes-and-names"&gt;target&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we add &lt;code&gt;data-action=“input-&amp;gt;search-form#search”&lt;/code&gt; to the &lt;code&gt;name&lt;/code&gt; field, which tells Stimulus to call the &lt;code&gt;search&lt;/code&gt; function each time the &lt;code&gt;input&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event"&gt;event&lt;/a&gt; is fired on the name field.&lt;/p&gt;

&lt;p&gt;We moved fairly quickly through some core Stimulus concepts here. The &lt;a href="https://stimulus.hotwired.dev/handbook/introduction"&gt;Stimulus handbook&lt;/a&gt; is a great reference point if you need to spend more time with any of these concepts.&lt;/p&gt;

&lt;p&gt;With these changes in place, we can refresh the page and see that search results update as the user types. We still cannot sort and search at the same time though, so let’s tackle that next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorting-and-searching-at-the-same-time"&gt;
  &lt;/a&gt;
  Sorting and searching at the same time
&lt;/h2&gt;

&lt;p&gt;The reason we can’t search and sort at the same time is because the &lt;code&gt;list&lt;/code&gt; method relies on URL parameters to apply search and filter options. Because the search form doesn’t include the sort parameters and sorting doesn’t include the search parameter, &lt;code&gt;list&lt;/code&gt; has no way of retaining sort and search options across requests — every new request to &lt;code&gt;list&lt;/code&gt; starts from scratch.&lt;/p&gt;

&lt;p&gt;There are a variety of ways to address this issue. The most direct is to move from using &lt;code&gt;params&lt;/code&gt; to storing filter options in the &lt;code&gt;session&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our basic approach will be to use &lt;code&gt;params&lt;/code&gt; to update a &lt;code&gt;filters&lt;/code&gt; hash in the &lt;code&gt;session&lt;/code&gt; object. Since &lt;code&gt;session&lt;/code&gt; is maintained across requests, as long as we update the session &lt;code&gt;filters&lt;/code&gt; hash with the search and sort &lt;code&gt;params&lt;/code&gt; on each request, we can persist search and sort options across requests.&lt;/p&gt;

&lt;p&gt;A very ugly implementation of this concept, done directly in the &lt;code&gt;list&lt;/code&gt; method looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;
  &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

  &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:team&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'players.name ilike ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
  &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'column'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'direction'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'players'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;players: &lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kp"&gt;private&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_params&lt;/span&gt;
  &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we ensure that &lt;code&gt;session['filters']&lt;/code&gt; is a hash, update its value by merging in whitelisted &lt;code&gt;filter_params&lt;/code&gt; and then use the the &lt;code&gt;filters&lt;/code&gt; hash to search for players by name and order the list of players, as appropriate.&lt;/p&gt;

&lt;p&gt;This ugly code is fully functional — if you update the &lt;code&gt;list&lt;/code&gt; method and add the &lt;code&gt;filter_params&lt;/code&gt; method to your controller you will be able to search and sort at the same time; however, this code is clunky, difficult to follow, and quickly becomes unmaintainable as your application grows.&lt;/p&gt;

&lt;p&gt;So, if this code is ugly and unmaintainable, why are we looking at it?&lt;/p&gt;

&lt;p&gt;Because we are going to refactor it into something neater and more scalable. Before we do that it is helpful to see what the most direct implementation can be so we can understand what is happening at a basic level.&lt;/p&gt;

&lt;p&gt;When we’re done, we’ll still store &lt;code&gt;params&lt;/code&gt; in a hash in the &lt;code&gt;session&lt;/code&gt; object, and we’ll still use the hash values to query the database based on the user’s preferences. Our code will be nicer, but it’ll still be the same basic concept.&lt;/p&gt;

&lt;p&gt;Let’s refactor this code next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-filterable-concern"&gt;
  &lt;/a&gt;
  Building a Filterable concern
&lt;/h2&gt;

&lt;p&gt;To make our filtering code more scalable and less error prone, we are going to start with a generalized &lt;code&gt;Filterable&lt;/code&gt; &lt;a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveSupport/Concern.html"&gt;concern&lt;/a&gt;. We’ll include &lt;code&gt;Filterable&lt;/code&gt; in the &lt;code&gt;PlayersController&lt;/code&gt; and use it to filter &lt;code&gt;players&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Filterable&lt;/code&gt; won’t know anything about the specifics of querying &lt;code&gt;Players&lt;/code&gt;, instead it will just implement logic to store query parameters in the session. Once the values are stored, they’ll be used to apply filters.&lt;/p&gt;

&lt;p&gt;First, create the filterable concern. From your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch app/controllers/concerns/filterable.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, fill in &lt;code&gt;filterable.rb&lt;/code&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Filterable&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;store_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_filters"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_filters"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_filters"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter_params_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_params_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FILTER_PARAMS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_filters"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s a lot of code here, let’s break it down.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;filter!&lt;/code&gt; method is what we’ll call from the controller to apply filters in response to a request from a user. It takes a &lt;code&gt;resource&lt;/code&gt; argument. &lt;code&gt;resource&lt;/code&gt; will be an ActiveRecord class, like &lt;code&gt;Player&lt;/code&gt;. &lt;code&gt;filter!&lt;/code&gt; simply calls out to two internal methods, &lt;code&gt;store_filters&lt;/code&gt; and &lt;code&gt;apply_filters&lt;/code&gt;, which do the heavy lifting.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;store_filters&lt;/code&gt; ensures that &lt;code&gt;session['class_name_filters']&lt;/code&gt; exists, and then writes whitelisted parameters into the session key, replicating the first two lines of our ugly implementation directly in the &lt;code&gt;list&lt;/code&gt; method in the last section.&lt;/p&gt;

&lt;p&gt;Once the filters are stored, &lt;code&gt;apply_filters&lt;/code&gt; calls a &lt;code&gt;filter&lt;/code&gt; class method from the class we’re interested in which should return a list of ActiveRecord objects.&lt;/p&gt;

&lt;p&gt;You’ll notice here that &lt;code&gt;Filterable&lt;/code&gt; isn’t doing much on its own. Instead, it is relying on methods to exist on the class passed in to &lt;code&gt;filter!&lt;/code&gt;. This is by design — in a real application, we would likely need to build filtering mechanisms for many different ActiveRecord classes, and each will need to be able to filter by a unique set of columns. Trying to build all of that logic into the &lt;code&gt;Filterable&lt;/code&gt; module would quickly become even harder to maintain than tossing everything in the controller.&lt;/p&gt;

&lt;p&gt;Rather than building all of that complexity in to &lt;code&gt;Filterable&lt;/code&gt;, we instead just rely on the target class to define &lt;code&gt;FILTER_PARAMS&lt;/code&gt; and a &lt;code&gt;filter&lt;/code&gt; method in whatever way works for that particular class.&lt;/p&gt;

&lt;p&gt;Let’s see this in action by updating &lt;code&gt;app/models/player.rb&lt;/code&gt; to work with our new &lt;code&gt;Filterable&lt;/code&gt; concern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Player&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:team&lt;/span&gt;

  &lt;span class="no"&gt;FILTER_PARAMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%i[name column direction]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:by_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'players.name ilike ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:team&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'column'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'direction'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we’ve defined the &lt;code&gt;FILTER_PARAMS&lt;/code&gt; constant with the three filtering we support on the players table.&lt;/p&gt;

&lt;p&gt;Next, we added the &lt;code&gt;by_name&lt;/code&gt; scope to handle searching the players table by name.&lt;/p&gt;

&lt;p&gt;Finally, we implement &lt;code&gt;filter&lt;/code&gt;, which replaces the queries that we previously built in &lt;code&gt;PlayersController#list&lt;/code&gt; and makes use of the new &lt;code&gt;by_name&lt;/code&gt; scope to be a bit more readable.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;Player&lt;/code&gt; set up for filtering, we can update &lt;code&gt;PlayersController&lt;/code&gt; to include &lt;code&gt;Filterable&lt;/code&gt; and replace the filtering logic in &lt;code&gt;list&lt;/code&gt; with the new &lt;code&gt;filter!&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlayersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Filterable&lt;/span&gt;
  &lt;span class="c1"&gt;# snip&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;
    &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'players'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;players: &lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we simply include &lt;code&gt;Filterable&lt;/code&gt; in the controller and then set the value of &lt;code&gt;players&lt;/code&gt; using the &lt;code&gt;filter!&lt;/code&gt; method provided by &lt;code&gt;Filterable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Much nicer, right?&lt;/p&gt;

&lt;p&gt;Before moving on, you'll also notice that &lt;code&gt;Filterable&lt;/code&gt; is in the &lt;code&gt;controller/concerns&lt;/code&gt; directory, but it isn't truly a &lt;a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveSupport/Concern.html"&gt;Concern&lt;/a&gt;. In our case, controller concerns is the simplest place for this module to live, but we don't need the full functionality of a true concern. You could just as easily place this module in another place if you prefer.&lt;/p&gt;

&lt;p&gt;Our last step is to update the views to read values from the session instead of params so that we always display the correct set of applied filters to users. &lt;/p&gt;

&lt;p&gt;First, update the table header in &lt;code&gt;_players&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-name"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;sort_indicator&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'column'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;build_order_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;column: &lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-team"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;sort_indicator&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'column'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"teams.name"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;build_order_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;column: &lt;/span&gt;&lt;span class="s2"&gt;"teams.name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"Team"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-seasons"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;sort_indicator&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'column'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"seasons"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;build_order_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;column: &lt;/span&gt;&lt;span class="s2"&gt;"seasons"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"Seasons"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ve replaced references to &lt;code&gt;params&lt;/code&gt; with &lt;code&gt;session.dig&lt;/code&gt; calls with this change. When no filters have been applied, &lt;code&gt;session['player_filters']&lt;/code&gt; won’t exist, so we use &lt;code&gt;dig&lt;/code&gt; to avoid nil errors in those cases.&lt;/p&gt;

&lt;p&gt;Next, update &lt;code&gt;app/heleprs/players_helper.rb&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PlayersHelper&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_order_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'column'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;link_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_players_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;column: &lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;direction: &lt;/span&gt;&lt;span class="n"&gt;next_direction&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;link_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_players_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;column: &lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;direction: &lt;/span&gt;&lt;span class="s1"&gt;'asc'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_direction&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'direction'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'asc'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'desc'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'asc'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort_indicator&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;span&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"sort sort-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'direction'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again we’re just replacing params with the equivalent session values so that sorting works correctly all the time and visual indicators are shown consistently.&lt;/p&gt;

&lt;p&gt;With those changes in place, refresh the page and see that you can search and sort the table at the same time, and the UI always shows the proper sort indicator.&lt;/p&gt;

&lt;p&gt;Nice work making it this far! We spent a good amount of time building a more scalable filtering solution, so let’s wrap up this article by putting that scalable solution to use by adding a filtering option to the table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-filtering-by-team"&gt;
  &lt;/a&gt;
  Add filtering by team
&lt;/h3&gt;

&lt;p&gt;Right now users can search by player name and sort the table, but they can’t filter by team or season. Let’s add filtering by team to the filter options.&lt;/p&gt;

&lt;p&gt;We’re going to use a select input for the Team filter, since &lt;code&gt;team&lt;/code&gt; is a &lt;code&gt;belongs_to&lt;/code&gt; relationship on the &lt;code&gt;Player&lt;/code&gt; class — we’ll have a dropdown menu that displays all available teams by name, each dropdown option will have &lt;code&gt;team_id&lt;/code&gt; as the value sent back to the server.&lt;/p&gt;

&lt;p&gt;Since we’re using a select input, let’s make it look nice by taking a slight detour to install Tailwind’s forms plugin:&lt;/p&gt;

&lt;p&gt;From your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @tailwindcss/forms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then update &lt;code&gt;tailwind.config.js&lt;/code&gt; to include the plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tailwindcss/forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Incredible stuff.&lt;/p&gt;

&lt;p&gt;Back to adding the team filter. We’ll start by adding the team filter to the UI. In the &lt;code&gt;players&lt;/code&gt; partial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_with&lt;/span&gt; &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="n"&gt;list_players_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;method: :get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;controller: &lt;/span&gt;&lt;span class="s2"&gt;"search-form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;search_form_target: &lt;/span&gt;&lt;span class="s2"&gt;"form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;turbo_frame: &lt;/span&gt;&lt;span class="s2"&gt;"players"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="ss"&gt;:team_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;options_for_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="no"&gt;Team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'team_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;include_blank: &lt;/span&gt;&lt;span class="s1"&gt;'All Teams'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"border-blue-500 rounded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s2"&gt;"change-&amp;gt;search-form#search"&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Snip the search input --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a regular Rails &lt;code&gt;select&lt;/code&gt; helper. In it, we build a list of all teams in the database, set the selected value when one is present (&lt;code&gt;session.dig&lt;/code&gt;, again) and fire the &lt;code&gt;search&lt;/code&gt; function of the &lt;code&gt;search-form&lt;/code&gt; controller each time the select input changes.&lt;/p&gt;

&lt;p&gt;Refresh the page, change the team input and see that it doesn't work yet. We haven’t updated &lt;code&gt;Player&lt;/code&gt; to support filtering by team yet.&lt;/p&gt;

&lt;p&gt;Head to &lt;code&gt;app/models/player.rb&lt;/code&gt; and update it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;FILTER_PARAMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%i[name team_id column direction]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:by_team&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;team_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;team_id: &lt;/span&gt;&lt;span class="n"&gt;team_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;team_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:team&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_team&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'team_id'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'column'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'direction'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start to see the benefit of the work we did in the last section. We can add filtering by a new option with just a few simple changes to the model.&lt;/p&gt;

&lt;p&gt;We updated the model to add &lt;code&gt;team_id&lt;/code&gt; to the list of valid &lt;code&gt;FILTER_PARAMS&lt;/code&gt;, added the &lt;code&gt;by_team&lt;/code&gt; scope, and then added &lt;code&gt;by_team&lt;/code&gt; to the &lt;code&gt;filters&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;No need to change our controller or touch the &lt;code&gt;Filterable&lt;/code&gt; module — updating the model is all we need.&lt;/p&gt;

&lt;p&gt;Refresh the page, apply a team filter and see that filtering by team works along with searching by name and sorting. Great work!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBeVhmq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b7qgskgktg5814w0bmo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBeVhmq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b7qgskgktg5814w0bmo.gif" alt="A screen recording of a user interacting with a table on a website. They click column headers to sort the table, use a drop down menu to filter the table by a specific team, and type in a search box to filter the table by name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filtering-the-index-action"&gt;
  &lt;/a&gt;
  Filtering the index action
&lt;/h2&gt;

&lt;p&gt;We’ll wrap up this exercise by make a few more small adjustments to avoid weirdness when a user visits the &lt;code&gt;/players&lt;/code&gt; with filtering values already saved in their session.&lt;/p&gt;

&lt;p&gt;First, now that we have access to the &lt;code&gt;filter!&lt;/code&gt; method, we can update the &lt;code&gt;index&lt;/code&gt; action to use that method instead of always setting the value of &lt;code&gt;players&lt;/code&gt; to all players in the database.&lt;/p&gt;

&lt;p&gt;To do that, update &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;app/controllers/players_controller.rb&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
  &lt;span class="vi"&gt;@players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that change in place, we’ll now filter the list of players properly when a user reloads players page after applying filters in a previous request, making the experience on the index page a bit more consistent.&lt;/p&gt;

&lt;p&gt;Finally, since we’re using the session values to restore previously applied filters, we need to update the &lt;code&gt;name&lt;/code&gt; search field to set its &lt;code&gt;value&lt;/code&gt; from the session. Without this change, when the user applies a name search and then refreshes the page, the list of players will be filtered by name, but the search term won’t be visible in the name field.&lt;/p&gt;

&lt;p&gt;To fix this issue,  update the name field in the &lt;code&gt;players&lt;/code&gt; partial like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;placeholder: &lt;/span&gt;&lt;span class="s2"&gt;"Search by name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'player_filters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"border border-blue-500 rounded p-2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;autocomplete: &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s2"&gt;"input-&amp;gt;search-form#search"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;value&lt;/code&gt; added to the &lt;code&gt;name&lt;/code&gt; field, we’ll always show the correct value to users, even on the initial page load.&lt;/p&gt;

&lt;p&gt;With these small changes in places, we’ve now got consistent filtering experience that persists cleanly across requests and can be extended with new options as our user experience requirements change.&lt;/p&gt;

&lt;p&gt;Nice work making it this far!&lt;/p&gt;

&lt;p&gt;You've reached the end of the tutorial portion of the article, we'll finish up by discussing a few ways we could improve this implementation in a production application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#productiongrade-considerations"&gt;
  &lt;/a&gt;
  Production-grade considerations
&lt;/h2&gt;

&lt;p&gt;While what we built today works fine, there are some things to consider if we were building a real, consumer-facing application.&lt;/p&gt;

&lt;p&gt;Our code works and is pretty easy to maintain, but before we go, let’s touch on a few points to think about for production-grade applications. These are intended simply as things to think about as you build, and we won’t be going through any code here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#session-storage-limitations"&gt;
  &lt;/a&gt;
  Session storage limitations
&lt;/h3&gt;

&lt;p&gt;We are relying on the &lt;code&gt;session&lt;/code&gt; object to store filter options. This is fine for small applications, but as you grow, you may run into the limits of storing options like this in the session.&lt;/p&gt;

&lt;p&gt;By default, Rails stores the session in a cookie which can only be ~4kb before it will start raising errors. You can use a &lt;a href="https://guides.rubyonrails.org/v4.1.4/action_controller_overview.html#session"&gt;different session store&lt;/a&gt; but you may want to consider a more flexible solution for storing filter options.&lt;/p&gt;

&lt;p&gt;One option here is to use &lt;a href="https://github.com/rails/kredis"&gt;Kredis&lt;/a&gt;, a Redis-based solution that provides a nice interface for solving problems like our session persistance problem today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#replace-helper-methods"&gt;
  &lt;/a&gt;
  Replace helper methods
&lt;/h3&gt;

&lt;p&gt;The helper methods we are using to render sorting links and indicators could be implemented as &lt;a href="https://viewcomponent.org/"&gt;ViewComponents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This pattern allows us to write more testable and reusable view code and excels in cases like our example application. As this application grows, we should expect to have multiple tables across our application that all need sort links.&lt;/p&gt;

&lt;p&gt;Rather than implementing them as helpers that are very specific to the players table, we could create them as generic components that can be thoroughly tested and then reused throughout the code base.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expand-filterable-implementation"&gt;
  &lt;/a&gt;
  Expand Filterable implementation
&lt;/h3&gt;

&lt;p&gt;Right now, &lt;code&gt;Filterable&lt;/code&gt; relies on each model to define &lt;code&gt;FILTER_PARAMS&lt;/code&gt; and a &lt;code&gt;filter&lt;/code&gt; method from scratch.&lt;/p&gt;

&lt;p&gt;In the real world, there would likely be enough overlap between the different implementations of &lt;code&gt;filter&lt;/code&gt; in each model that we would benefit from moving &lt;code&gt;filter&lt;/code&gt; out of each model and into a &lt;code&gt;Filter&lt;/code&gt; class that defines some shared logic, like applying &lt;code&gt;order&lt;/code&gt;, which is likely to be the same for every class.&lt;/p&gt;

&lt;p&gt;For a really detailed implementation of a &lt;code&gt;Filterable&lt;/code&gt; pattern, take a look at the &lt;a href="https://www.stimulusreflexpatterns.com/patterns/filterable_reflex/"&gt;filterable_reflex&lt;/a&gt; from StimulusReflex Patterns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Today we built on a Turbo Frame foundation to expand a sortable table view to a table that can be searched, filtered, and sorted without full page turns or lots of custom JavaScript.&lt;/p&gt;

&lt;p&gt;Because frames are so powerful, we were able to easily hook into our existing frame code and add in searching and filtering without thinking too much about the front end implementation. It mostly just worked, once we built the filtering logic on the server.&lt;/p&gt;

&lt;p&gt;This is the power of Turbo Frames — we can build fast, efficient user interfaces without stepping much outside of standard Rails code. The client side code stays light and maintainable, while our server looks and feels familiar to any level of Rails developer.&lt;/p&gt;

&lt;p&gt;To dig deeper into Turbo and building modern Ruby on Rails applications with the Hotwire stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read my articles on &lt;a href="https://www.colby.so/posts/turbo-frames-on-rails"&gt;Turbo Frames&lt;/a&gt; and &lt;a href="https://www.colby.so/posts/turbo-streams-on-rails"&gt;Turbo Streams&lt;/a&gt; on Rails&lt;/li&gt;
&lt;li&gt;Dive into the &lt;a href="https://github.com/hotwired/turbo"&gt;Turbo&lt;/a&gt; and &lt;a href="https://github.com/hotwired/turbo-rails"&gt;turbo-rails&lt;/a&gt; source and follow along with the Github activity for both&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="https://discuss.hotwired.dev/"&gt;hotwire discussion forums&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;(Shameless plug) Sign up for my monthly newsletter, &lt;a href="https://landing.mailerlite.com/webforms/landing/d7z0n0"&gt;Hotwiring Rails&lt;/a&gt;, to stay up to date on the latest developments in Rails-land&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all for today. As always, thanks for reading!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>tutorial</category>
      <category>ruby</category>
      <category>hotwire</category>
    </item>
    <item>
      <title>Hacktoberfest Check-In &amp; Forem Contributor Spotlight ⭐️ </title>
      <author>Christina Gorton</author>
      <pubDate>Fri, 15 Oct 2021 19:28:19 +0000</pubDate>
      <link>https://dev.to/devteam/hacktoberfest-check-in-forem-contributor-spotlight-4l6j</link>
      <guid>https://dev.to/devteam/hacktoberfest-check-in-forem-contributor-spotlight-4l6j</guid>
      <description>&lt;p&gt;Hello, DEV Community!&lt;/p&gt;

&lt;p&gt;For those of you who are participating in &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest 2021&lt;/a&gt; as either a contributor or maintainer, congrats! We're already &lt;em&gt;halfway&lt;/em&gt; through though this annual celebration of open source. &lt;/p&gt;

&lt;p&gt;I wanted to take this opportunity to remind you of all the Hacktoberfest resources available to you right here on DEV...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#discussion-thread"&gt;
  &lt;/a&gt;
  Discussion Thread
&lt;/h3&gt;

&lt;p&gt;A place for you to connect with other participants and discuss your Hacktoberfest journey.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/hacktoberfest-2021-discussion-thread-3o48" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hacktoberfest 2021 Discussion Thread&lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team ・ Oct 1 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#help&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#contributor-thread"&gt;
  &lt;/a&gt;
  Contributor Thread
&lt;/h3&gt;

&lt;p&gt;A place for open source project contributors to solicit Hacktoberfest PRs from participants.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/hacktoberfest-2021-who-s-looking-for-contributors-32k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hacktoberfest 2021 — Who's Looking for Contributors? &lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team ・ Sep 30 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#contributorswanted&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 

&lt;h3&gt;
  &lt;a href="#hacktoberfest-template"&gt;
  &lt;/a&gt;
  Hacktoberfest Template
&lt;/h3&gt;

&lt;p&gt;We'd love to read all about your Hacktoberfest experience right here on DEV. Use &lt;a href="https://dev.to/new/hacktoberfest"&gt;this template&lt;/a&gt; to post your thoughts before the month is over and we'll award you a special DEV profile badge 🌈  &lt;/p&gt;

&lt;p&gt;More about how we're celebrating Hacktoberfest 2021 on DEV in &lt;a href="https://dev.to/devteam/hacktoberfest-2021-is-here-4a3l"&gt;this post&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;I also wanted to take a moment to thank all of the fantastic people who have contributed to Forem for Hacktoberfest 2021 so far. Let's take a look at all of the Hacktoberfest PRs that have been approved since October 1...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smashing bugs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14889"&gt;Fix Prop Types Error&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14969"&gt;Fix PropTypes Error Create New Post Page&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/papuruth"&gt;papuruth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14226"&gt;Subscribe the Newsletter if email_newsletter is Changed&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/takmar"&gt;takmar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14968"&gt;Add a notification on password reset&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/mrmir"&gt;mrmir&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15003"&gt;Fixed followers page html error&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/Blastoise"&gt;Blastoise&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15066"&gt;Fix: no title shown in comment edit page&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/RehmatFalcon"&gt;RehmatFalcon&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14938"&gt;Safari CSS gradient bug&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/valtism"&gt;valtism&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15009"&gt;When a user is blocked from commenting on an article, show correct error message&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/vishaldeepak"&gt;vishaldeepak&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14987"&gt;Fix notifications not deleting because mentions already destroyed&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/lsparlin"&gt;lsparlin&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14895"&gt;Use constants for Permitted params in controller&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/praveen-raghav-ns"&gt;praveen-raghav-ns&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Accessibility improvements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14887"&gt;Make dashboard left side nav an unordered list&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/secondl1ght"&gt;secondl1ght&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14896"&gt;Replace main tag inside another main tag with div&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/luhova"&gt;luhova&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14899"&gt;Use complementary landmarks on Tags page&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/metamoni"&gt;metamoni&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14873"&gt;Use section instead of header in dashboard pages&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/MohamedAsan"&gt;MohamedAsan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14958"&gt;Fix: accessibility issue with feeds comment section&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/pramodrhegde"&gt;pramodrhegde&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15034"&gt;Change div to aside tag and add aria-label to contain campaign banner&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/crisbnp"&gt;crisbnp&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I18n Contributions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14890"&gt;Update some words already translated&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/thomasbnt"&gt;thomasbnt&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14898"&gt;Translate Following users page and loading text in sublist&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14905"&gt;Tokenize settings menu and add French translations&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/metamoni"&gt;metamoni&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14911"&gt;Translate actions in articles view&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15002"&gt;Translate some labels from profile information&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/mtayllan"&gt;mtayllan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14982"&gt;I18nize main_nav's "Home"&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15055"&gt;I18nize nav_menu's list items&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/KrystalJean"&gt;KrystalJean&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14891"&gt;I18n copy on Tags index page&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/lsparlin"&gt;lsparlin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14963"&gt;Translate some texts from Dashboard Page&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/berviantoleo"&gt;berviantoleo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/14960"&gt;Internationalize hardcoded text for videos pages&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/VictorPS"&gt;VictorPS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15018"&gt;Views/onboardings i18n&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/yheuhtozr"&gt;yheuhtozr&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A round of applause for all of these Forem contributors 👏 &lt;/p&gt;

&lt;p&gt;If &lt;em&gt;you'd&lt;/em&gt; like to contribute to the Forem codebase for Hacktoberfest, we'd love to have your involvement. &lt;a href="https://github.com/forem/forem/issues?q=is%3Aissue+is%3Aopen+label%3AHacktoberfest"&gt;Click here&lt;/a&gt; for a full list of available issues. &lt;/p&gt;

&lt;p&gt;Happy Hacktoberfest to all! I look forward to following your journeys throughout the rest of October 🎃 &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>forem</category>
      <category>opensource</category>
    </item>
    <item>
      <title>My first year as Independent Consultant</title>
      <author>Santosh Yadav</author>
      <pubDate>Fri, 15 Oct 2021 19:25:14 +0000</pubDate>
      <link>https://dev.to/this-is-learning/my-first-year-as-independent-consultant-49ij</link>
      <guid>https://dev.to/this-is-learning/my-first-year-as-independent-consultant-49ij</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@callumshaw?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Callum Shaw&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/independent-consulatnt?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last year around August 2020, I decided to leave my full-time job and started looking for a new job and decided to work as a full-time software consultant. This blog covers how I ended up getting the opportunity and what I learned over the last year.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-it-started"&gt;
  &lt;/a&gt;
  How It started
&lt;/h1&gt;

&lt;p&gt;I started looking for a new job in the middle of a pandemic. I was lucky to have a fully remote job just before the pandemic happened, thanks to my friend &lt;a href="https://twitter.com/Bitcollage"&gt;Serkan&lt;/a&gt;, who referred me. But it ended up being a short gig, and I decided to leave and was wondering next. Going as an Independent consultant was not in my mind at that time; looking for a new job is always exhausting, but I did some work I was proud of concisely. &lt;/p&gt;

&lt;p&gt;I decided to know my network on Twitter that I am looking for a full-time remote job.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCacMCGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1321066332951965697/sYaxh5DO_normal.jpg" alt="Santosh Yadav profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Santosh Yadav
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @santoshyadavdev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Ok just want to check, anyone hiring a remote &lt;a href="https://twitter.com/angular"&gt;@angular&lt;/a&gt; developer, I am looking for a full-time opportunity.  I know not the best time to look for a job.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:17 AM - 17 Jul 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1284009382267637761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1284009382267637761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1284009382267637761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I got some initial leads, but many never went after the first call due to salary constraints. That gave me an idea of starting to work as a consultant to ask for hourly pay, work on my own time, and provide enough time for my community work. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-first-client"&gt;
  &lt;/a&gt;
  My first client
&lt;/h1&gt;

&lt;p&gt;Around August, I received a Twitter DM from my friend, whom I met at a conference a few months ago. His team was hiring, and they were looking for someone to guide the developers and help improve the existing framework they built. After our first call, I was pretty excited to impact the team as creating and enhancing a framework was something I had done in the past with Deutsche Bank.&lt;/p&gt;

&lt;p&gt;We had a few more calls to work out on financial and work mode, as this was the first time the team was hiring someone to work as a consultant, and it was also my first time.  But we finally reached the agreement, and I could choose how many hours I wanted to work, max being 40hrs a week.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-week-working-as-a-consultant"&gt;
  &lt;/a&gt;
  First week working as a Consultant
&lt;/h1&gt;

&lt;p&gt;My first week went into doing almost nothing, as I was still waiting for my laptop, but my friend called me, and we discussed a critical issue. Luckily, I went through a similar problem in the past to get the issue sorted. And in the next few months, we worked together to resolve many critical issues and fixing many performance issues the team was working on. I was also able to help the team write better code and adopt &lt;code&gt;rxjs&lt;/code&gt; more.&lt;/p&gt;

&lt;p&gt;I made a good impact on my team and my managers and even got a shout-out for fixing those critical issues. And one great thing I found was that my managers cared about the team, and they wanted every individual to grow into their career. I decided to let my manager know that I appreciated this in my first one-on-one call, and I hope to work with this team for a longer time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#becoming-indias-first-github-star"&gt;
  &lt;/a&gt;
  Becoming Indias First GitHub Star
&lt;/h1&gt;

&lt;p&gt;After joining my first client, within the next 15 days, I became India's First &lt;a href="https://stars.github.com/profiles/santoshyadavdev/"&gt;GitHub Star&lt;/a&gt; and gave me more visibility into the community. I started getting more opportunities, and now rather than reaching out for work, companies wanted to with me. I had to say No to many as dont wanted to take more work and burn out and focus on my first client.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-my-second-client"&gt;
  &lt;/a&gt;
  Getting My Second Client
&lt;/h1&gt;

&lt;p&gt;As I mentioned, I was getting many opportunities, and I was saying no to many, but there was one DM on my Twitter which I couldn't ignore. It was from a CEO of a billion-dollar company growing a lot and had some excellent fundings in the past few months. The opportunity was full-time, but I dont want to miss this, So I asked him if I could work part-time; the location was not an issue, and it was a fully remote opportunity. And to my surprise, he agreed, and within the next four days, we signed the contract, and my journey with a US-based billion-dollar startup started.&lt;/p&gt;

&lt;p&gt;Note: As I am under NDA, I cannot disclose my clients.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-learnings-from-both-client"&gt;
  &lt;/a&gt;
  My learnings from both client
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dont rush to get your first client: I worked for a client for a few hours before getting my first client. It didn't work out; the client was too pushy, and we didn't sign the contract, and there were so many red flags, so I decided not to work with that client and deiced to wait till I got a better opportunity. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Know your worth: While working as a consultant, one crucial thing is not to undersell yourself, do the market research, and know your value before committing to some client. I knew I could make more being a GDE and GitHub star and having a good presence in the community. So whenever I a get a new opportunity I try to quite 50% to my next client than my previous client. I said no to few initial clients where I was undervalued.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trust is everything:  Making your client trust is essential, discuss issues and be open as much as possible. I keep it open if I am struggling with any problem, and I discuss it with my teammate, and sometimes we call to check the problem, which makes bonding stronger. Once, I was struggling to give much time towards my community work as I was doing live stream often, I decided to work for four days a week, as gave this idea to my manager in my one-on-one call, he was supportive of the idea. He said, why not utilize my two paid days first and see if thats enough and if you still think you need to do four days a week, go ahead, and believe me taking those two paid days worked. Such an instance is what makes you trust your team more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take the tasks to finish line: Everyone struggles to make things work, and there are times you want to give up. It happened to me too. There were multiple instances where I started thinking that I didn't know anything, the issues I was working on took a long time, and it was not under my control. I almost broke down in both instances, but I reached out to my Team leads and discussed with them. They appreciated what I was doing as I had taken the lead to get those issues sorted, and even received appreciation when I completed those tasks, and they were happy that I took it to the finish line.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to focus on your strong areas:  When you work on a large enterprise application, there are many things to do, don't try to do everything. You already know your string points; focus on that. After starting with my client, I quickly let them know that CSS is not my strong point, I rarely get those tasks, and cherry on top, my clients, has a CSS expert. I started focusing more on things where I had strong knowledge like perf, bundle optimization, build optimizations. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't take too many clients: When I was planning to start consulting, I had a good discussion with my friend &lt;a href="https://twitter.com/MartinaKraus11"&gt;Martina&lt;/a&gt; even did an episode on my Talkshow &lt;a href="https://www.youtube.com/watch?v=7rugTUTjx9I&amp;amp;t=12s"&gt;Freelancing&lt;/a&gt; I learned so many things on how to work as a consultant, and the important thing was not to take too many clients, as you won't be able to focus on multiple clients. I took two clients and have been working with them for a year now. I have the opportunity to get my contract extended for the following year.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hire a CA for handling your taxes: Taxes are one difficult part as in India, you need to get a GST number. I am thankful to &lt;a href="https://twitter.com/DudeWhoCode"&gt;Neren&lt;/a&gt;, who connected me to a CA who helped me with the entire process and handles my taxes now.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#some-questions-which-i-received-on-twitter"&gt;
  &lt;/a&gt;
  Some questions which I received on Twitter
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How do you find it different than the regular full-time job?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my regular full-time job, I always had some deadlines and had to keep myself away from big refactors. Working as a consultant, I present my idea or improvement for every quarter and make sure they don't block business as usual, as my clients also understand they are not paying me to get involved in BAU (Business As Usual) tasks. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Does it offer better compensation? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes, you can ask for better compensation. I went on to make 2.5x of what I made in salaries a year ago.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Does it offer better learning opportunities?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes, it does. You get to face many perf issues, build optimization, and other challenging tasks that you don't get to focus on early on in a project.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Would you recommend it for devs who are early in their career?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't rush; start when you think you are ready. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Making the switch into full-time consulting requires experience/connections in the industry, right?.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It does require experience in the technology you are using, connection helps, but GitHub is a fantastic place. You can get tons of opportunities by being active on GitHub. I prefer to work with people I know.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next
&lt;/h1&gt;

&lt;p&gt;In the future, I want to work as a Developer Advocate one day for Microsoft; thats my dream job. You are wondering why I want to move from being independent to working for someone?&lt;/p&gt;

&lt;p&gt;I love to teach, do open source; having a full-time job makes it difficult. I even gave up live streaming for few months due to burnout. Being a Developer Advocate allows me to do this all full-time, which aligns with my passion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-microsoft"&gt;
  &lt;/a&gt;
  Why Microsoft?
&lt;/h2&gt;

&lt;p&gt;Thats where my fav Developer Advocates work&lt;br&gt;
&lt;a href="https://twitter.com/John_Papa"&gt;John Papa&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/manekinekko"&gt;Wassim&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-a-developer-advocate"&gt;
  &lt;/a&gt;
  What is a Developer Advocate?
&lt;/h2&gt;

&lt;p&gt;Don't worry if you have this question. Wassim and I did a live stream.  &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9aHPHK3G59o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I had to put my dream job search on hold as there are not enough opportunities in India. But I will be there after two years until I have these contracts to learn and grow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I am delighted with my clients as they appreciate the work I have been doing and have faith and trust in me. I am even more thankful to the amazing teammates, I hope I could tag them, but under NDA, it becomes problematic. I want to work with them as long as I can. The team understood my strong points and tried to utilize me in those specific areas more.&lt;/p&gt;

&lt;p&gt;I love to enjoy giving back to the community, and being independent gives me enough time and money to get involved in the community. Till the time I get my dream job, I will be into consulting. And no one knows what the future holds for you, So if there is anything new, I am sure you will be the first to know; keep an eye on my Twitter handle.&lt;/p&gt;

</description>
      <category>career</category>
      <category>consulting</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hotwire: best practices for stimulus</title>
      <author>Pete Hawkins</author>
      <pubDate>Fri, 15 Oct 2021 19:19:19 +0000</pubDate>
      <link>https://dev.to/phawk/hotwire-best-practices-for-stimulus-40e</link>
      <guid>https://dev.to/phawk/hotwire-best-practices-for-stimulus-40e</guid>
      <description>&lt;p&gt;From my experience building several production apps with Hotwire, Turbo frames and Turbo streams handle the bulk of things you need to build an interactive web application. &lt;/p&gt;

&lt;p&gt;You will however, definitely need a little JavaScript sprinkles from Stimulus. &lt;/p&gt;

&lt;p&gt;I want to run through all of the stimulus controllers included in &lt;a href="https://happi.team"&gt;Happi&lt;/a&gt; and talk about some ‘Best Practices’ from what I have learnt so far.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-first-controller-youll-write"&gt;
  &lt;/a&gt;
  The first controller you’ll write
&lt;/h4&gt;

&lt;p&gt;In every Hotwire app I’ve built so far, the first controller I end up needing is &lt;strong&gt;ToggleController&lt;/strong&gt;. This is usually when I set up my Tailwind UI layout and need to start hiding and showing nav menus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#togglecontroller"&gt;
  &lt;/a&gt;
  ToggleController
&lt;/h2&gt;

&lt;p&gt;As you’ll see below, I am importing useClickOutside from &lt;a href="https://github.com/stimulus-use/stimulus-use"&gt;stimulus-use&lt;/a&gt;, it’s a great library with small, composable helpers, I urge you to check it out!&lt;/p&gt;

&lt;p&gt;The other thing I like to do here is leave some usage comments, it makes it a lot easier to peep into the controller and see how things work and what data attributes I need to add to my HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useClickOutside&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus-use&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add data-controller="toggle" to common ancestor
 *
 * Action (add this to your button):
 * data-action="toggle#toggle"
 *
 * Targets (add this to the item to be shown/hidden):
 * data-toggle-target="toggleable" data-css-class="class-to-toggle"
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggleable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Any clicks outside the controller’s element can &lt;/span&gt;
    &lt;span class="c1"&gt;// be setup to either add a 'hidden' class or &lt;/span&gt;
    &lt;span class="c1"&gt;// remove a 'open' class etc.&lt;/span&gt;
    &lt;span class="nx"&gt;useClickOutside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleableTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;clickOutside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clickOutside&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleableTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clickOutside&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remove&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleableTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The biggest thing I can stress is to make your controllers as generic as possible. I could have made this controller &lt;strong&gt;NavbarController&lt;/strong&gt; and then it would only toggle a navbar. Because this is generic, I have reached for it so many times in my app and been able to reuse it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autosubmitcontroller"&gt;
  &lt;/a&gt;
  AutoSubmitController
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Rails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rails/ujs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add data-controller="auto-submit" to your &amp;lt;form&amp;gt; element
 *
 * Action (add this to a &amp;lt;select&amp;gt; field):
 * data-action="change-&amp;gt;auto-submit#submit"
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is tiny, I needed it to auto submit a form when these dropdowns are changed, to go ahead and save changes. Again, I’ve kept it generic, so it could be reused in other places that require similar behaviour.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kARVIbZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agtc1dr62tw1cab4iuz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kARVIbZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agtc1dr62tw1cab4iuz6.png" alt="Auto submit dropdowns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#displayemptycontroller"&gt;
  &lt;/a&gt;
  DisplayEmptyController
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLC2N-K2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xldlza9hgt6336kx0xia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLC2N-K2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xldlza9hgt6336kx0xia.png" alt="Happi empty state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is super handy, it allows the empty state to work properly with Turbo Streams. Without it, when Turbo streams push new messages onto the screen, the UI showing ‘You don’t have any messages’ would still be visible and everything would look broken. &lt;/p&gt;

&lt;p&gt;It also relies on &lt;a href="https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-mutation.md"&gt;stimulus-use&lt;/a&gt;’s useMutation hook, which means it just works&lt;sup&gt;tm&lt;/sup&gt; with Turbo streams and we don’t need any complex callbacks and still don’t need to reach for custom ActionCable messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus-use&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add data-controller="display-empty" to common ancestor
 *
 * Classes:
 * data-display-empty-hide-class="hidden"
 *
 * Targets:
 * data-display-empty-target="emptyMessage"
 * data-display-empty-target="list"
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emptyMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;childList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;childList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// hide empty state&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emptyMessageTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hideClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// show empty state&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emptyMessageTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hideClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#flashcontroller"&gt;
  &lt;/a&gt;
  FlashController
&lt;/h2&gt;

&lt;p&gt;This one’s not as generic as I would like, maybe I should call is AutoHideController? It’s pretty straightforward, automatically hide after 3 seconds, but can also be dismissed by clicking the 'X'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add data-controller="flash" to flash container
 * p.s. you probably also want data-turbo-cache="false"
 *
 * Action (for close cross):
 * data-action="click-&amp;gt;flash#dismiss"
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hideAlert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hideAlert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hideAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hovercardcontroller"&gt;
  &lt;/a&gt;
  HovercardController
&lt;/h2&gt;

&lt;p&gt;This one loads in a hovercard, similar to hovering a users avatar on Twitter or GitHub. Note: If you are planning on using this, bonus points for making it more configurable and using &lt;a href="https://stimulus.hotwired.dev/reference/css-classes"&gt;Stimulus CSS classes&lt;/a&gt; for the hidden class. &lt;/p&gt;

&lt;p&gt;It might also be smart to use the new &lt;a href="https://github.com/rails/request.js"&gt;Rails Request.js&lt;/a&gt; library rather than directly using fetch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add the following to the hoverable area
 * data-controller="hovercard"
 * data-hovercard-url-value="some-url" # Also make sure to `render layout: false`
 * data-action="mouseenter-&amp;gt;hovercard#show mouseleave-&amp;gt;hovercard#hide"
 *
 * Targets (add to your hovercard that gets loaded in):
 * data-hovercard-target="card"
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasCardTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cardTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRange&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContextualFragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasCardTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cardTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasCardTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cardTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#messagecomposercontroller"&gt;
  &lt;/a&gt;
  MessageComposerController
&lt;/h2&gt;

&lt;p&gt;This controller is really the only app-specific stimulus controller I’ve written so far, which is pretty remarkable, considering I’ve built a full production quality app, with just a handful of lines of JS, this really shows the power of Hotwire and Turbo.&lt;/p&gt;

&lt;p&gt;Happi has canned responses, which help you automate writing common messages. When you click a canned response, this will take its HTML and push it into the action text trix editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add this to the messages form:
 * data-controller="message-composer"
 *
 * Action (add this to your snippets):
 * data-action="click-&amp;gt;message-composer#snippet" data-html="content..."
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trix-editor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;snippet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSelectedRange&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#navigationselectcontroller"&gt;
  &lt;/a&gt;
  NavigationSelectController
&lt;/h2&gt;

&lt;p&gt;Another simple one here, used for responsive navigation on mobile via a select menu. &lt;/p&gt;

&lt;p&gt;This is used within the settings page, on large screens, we have tabs down the side and on mobile collapse these into a dropdown that when changed, navigates to another sub-page within settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Turbo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hotwired/turbo-rails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add data-controller="navigation-select" to common ancestor
 *
 * Action:
 * data-action="change-&amp;gt;navigation-select#change"
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Turbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#slugifycontroller"&gt;
  &lt;/a&gt;
  SlugifyController
&lt;/h2&gt;

&lt;p&gt;This ones used when creating a team on Happi. You have to pick a custom email address that ends in &lt;em&gt;@prioritysupport.net&lt;/em&gt;, to make the UX a bit nicer we want to pre-fill this input with your company name. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cI_SVUkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://pete-uploads.s3.eu-west-1.amazonaws.com/blog/slugify-controller.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cI_SVUkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://pete-uploads.s3.eu-west-1.amazonaws.com/blog/slugify-controller.gif" alt="Slugify in action"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ApplicationController&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./application_controller&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Usage
 * =====
 *
 * add data-controller="slugify" to common ancestor or form tag
 *
 * Action (add to the title input):
 * data-action="slugify#change"
 *
 * Target (add to the slug input):
 * data-slugify-target="slugField"
 *
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ApplicationController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slugField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slugFieldTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;a-z0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That’s it!
&lt;/h2&gt;

&lt;p&gt;Yep, a full application with a rich user-interface, live updates with websockets and only 8 JavaScript files to maintain! &lt;/p&gt;

&lt;p&gt;What’s even better here, is that 7 of the 8 stimulus controllers can be copied and pasted into other apps, I use a lot of these across different projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-the-most-out-of-hotwire"&gt;
  &lt;/a&gt;
  How to get the most out of Hotwire?
&lt;/h2&gt;

&lt;p&gt;As you can probably tell from all my controllers shown above, &lt;strong&gt;my number 1 tip is to keep things generic&lt;/strong&gt;, try to glean the reusable behaviour when you need functionality, rather than creating specific controllers for specific parts of your application. &lt;/p&gt;

&lt;p&gt;Other than that, try to rely on Turbo frames or streams to do the heavy lifting, you should really be avoiding writing stimulus controllers unless absolutely necessary, you can do a lot more with Turbo than you might think. &lt;/p&gt;

&lt;p&gt;Finally, check out &lt;a href="https://www.betterstimulus.com"&gt;Better stimulus&lt;/a&gt; and &lt;a href="https://boringrails.com/tiny-tips"&gt;Boring Rails&lt;/a&gt; for a lot of actionable tips and tricks!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>hotwire</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Two Key Focuses (And a Checklist) For New Engineering Managers</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 15 Oct 2021 19:14:07 +0000</pubDate>
      <link>https://dev.to/linearb/two-key-focuses-and-a-checklist-for-new-engineering-managers-13ab</link>
      <guid>https://dev.to/linearb/two-key-focuses-and-a-checklist-for-new-engineering-managers-13ab</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for devinterrupted.com by Anand Safi&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
There is very little formal guidance for new engineering managers. When I first moved from an individual contributor (IC) to an engineering manager (EM), I found myself struggling to find training resources.&lt;br&gt;
I want to change that — and I hope this article will serve as a small start in that direction. As an engineering leader at Mark43, I do a lot of mentorship and coaching for engineers who aspire to move to engineering management and early-tenure engineering leaders. Here are a couple of initial focus areas that a first time EM can build upon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-area-1-trust-collaboration-and-communication"&gt;
  &lt;/a&gt;
  Focus Area 1: Trust, Collaboration and Communication
&lt;/h2&gt;

&lt;p&gt;As a new engineering manager, your first 90 days are crucial . You quickly realize the need to gain trust while rapidly building relationships and rapport — not only with your colleagues and your direct reports, but also with all the other discipline stakeholders. As an engineer, you spend 80% of your time with your engineering team, focusing on the engineering aspects of your role. But in a management position, you spend perhaps 50% of your time with your fellow engineers. The other 50% of your time is spent with people who are stakeholders representing cross-functional disciplines such as product, design + UX or the QA department if there is one.&lt;/p&gt;

&lt;p&gt;In addition, there are other teams like people ops, recruiting, platform, customer support, customer success and deployments. Hence, you need to build relationships early on because to achieve collective success your team needs each discipline aligned to a common goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-area-2-information-collection-compartmentalization-and-sharing"&gt;
  &lt;/a&gt;
  Focus Area 2: Information collection, compartmentalization and sharing
&lt;/h2&gt;

&lt;p&gt;As an engineering leader, the amount of cross-communication and information that will be made available to you will rise exponentially. Whether that is pre-set routine meetings, ad-hoc situations or some form of change management — there will be a plethora of details that you will hear, will need to act upon or will need to pass around within your team. These new job duties will become your day-to-day reality as an engineering manager.&lt;/p&gt;

&lt;p&gt;To succeed, you should have a structured way to capture all the information that you are going to be exposed to throughout the day. Unlike pre-COVID times when in-person collaboration allowed us to get away with not thinking about some collaborative processes, &lt;a href="https://devinterrupted.com/build-intentional-remote-collaboration-like-gitlab/"&gt;you now need to be intentional about your remote organizational design to drive collaboration and communication&lt;/a&gt;. So for example, if you are in a one-on-one and you hear something of interest, you need to be able to make the connection that maybe this is something that I should bring to the wider group, or this is a follow-up item for me to take action upon later. You need to make sure that you are staying on top of all your conversations.&lt;/p&gt;

&lt;p&gt;The takeaway here is that becoming an active listener is a crucial skill for an engineering manager. Being a good listener is not enough because the role of an EM is to surface key information both from your team and for your team.&lt;/p&gt;

&lt;p&gt;Being situationally aware is also important. This skill will help your future self when you need to recall something a day or week later. There are so many different people and so many different topics of conversation that occur everyday that it can be difficult to keep everything straight. I recommend keeping some sort of documentation or making an immediate action item list. This simple habit will pay dividends with time. There are lots of different note and action item taking systems — find the one that works for you.&lt;/p&gt;

&lt;p&gt;To wrap things up, here is my simple 3-item checklist to improve your first 90 days as an EM:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Observe and adapt vs be rigid and impose&lt;/li&gt;
&lt;li&gt;Build connections and gain trust early on&lt;/li&gt;
&lt;li&gt;Stay technical but do not spend a lot of time implementing technical solutions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you keep this checklist in the front of your mind as well as keeping your eyes and your ears open, you will excel at being an EM. A good EM understands that their measure of personal success is their ability to foster team success — and team success is only possible with trust, collaboration and communication.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1900 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="http://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hf5nE0-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxyazunrkyztvjyak95j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hf5nE0-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxyazunrkyztvjyak95j.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com"&gt;https://devinterrupted.com&lt;/a&gt; on October 15, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>devops</category>
      <category>leadership</category>
      <category>management</category>
    </item>
    <item>
      <title>How to make a good looking button group in Tailwind CSS</title>
      <author>Siddharth Chaudhary</author>
      <pubDate>Fri, 15 Oct 2021 18:22:02 +0000</pubDate>
      <link>https://dev.to/sidcraftscode/how-to-make-a-good-looking-button-group-in-tailwind-css-1fjh</link>
      <guid>https://dev.to/sidcraftscode/how-to-make-a-good-looking-button-group-in-tailwind-css-1fjh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Tailwind CSS is a utility based framework. Which is great in many ways. However, Tailwind CSS does not have a default set of components for you to get started with.&lt;/p&gt;

&lt;p&gt;This is a series that will show you how to build various common UI components with Tailwind CSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, you people showed a lot of interest in my articles that I wrote last week. So today, I created a tutorial on how to make a good looking button group in Tailwind CSS&lt;/p&gt;

&lt;p&gt;Let's start by making 3 buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add some padding to our buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add hover and focus styles to our buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right now, all we have is three decently styles, sad buttons. Let's make them a button group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="flex"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a margin to our button group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="flex m-2"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should add borders to our button&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="flex m-2"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border-t border-b px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's change the text color of our button group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="text-gray-600 flex m-2"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border-t border-b px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oops 😬. Nearly forgot. Let's add rounded corners to our button group.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="text-gray-600 flex m-2"&amp;gt; 
&amp;lt;button type="button" class="rounded-l-lg hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border-t border-b px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="rounded-r-lg hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what our button group should look like 👇 &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/chaudhs769/embed/wvqKyjN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading and I hope you liked the article! 😊 &lt;br&gt;
I'll be adding more articles to this series soon.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>13 reasons why you should use Nextjs</title>
      <author>Anjan Shomooder</author>
      <pubDate>Fri, 15 Oct 2021 18:09:22 +0000</pubDate>
      <link>https://dev.to/thatanjan/13-reasons-why-you-should-use-nextjs-2d40</link>
      <guid>https://dev.to/thatanjan/13-reasons-why-you-should-use-nextjs-2d40</guid>
      <description>&lt;p&gt;Now, why should we use it? Simply because it solves our problems. So let's see the problems that Nextjs solves for us.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SEO: One of the most drawbacks of client-side rendering is poor SEO. Because in CSR you don't have any content on your HTML page. All content is rendered by the javascript. That's why search engines don't give you give search engine optimization. So, we need server side rendering. And Nextjs allow us to do that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server Side Rendering: Client side rendering has a bunch of problems like SEO, huge bundle size, slow initial load, and blank page flickering. Server side rendering doesn't have that problem. And we can use server side rendering with nextjs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static Site Generation: Suppose you have a blogging website. In this type of website the content hardly changes after it gets deployed. So you don't need to fetch any data from the client or server side. Everything is present on the html and CSS. So the browser only needs to parse them and maybe a little bit javascript. This type of website we called static sites. They are super fast because they have fewer tasks to complete. With Nextjs, we can generate out static html on build time and we don't have to worry about it anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Client Side Rendering: Yes, you can also do Client side rendering in nextjs. If you want to have single page application that doesn't refresh, well you can have it here. You combine the 3(CSR, SSR, SSG) rendering systems in Nextjs. You provide your static HTML or fetch data from &lt;code&gt;getStaticProps&lt;/code&gt; which will be treated as static html. So you can have SEO. Then you fetch the necessary server side data from the &lt;code&gt;getServerSide&lt;/code&gt; function. And lastly, you can use any client side data fetching method. And that's how you can have a combination of 3rendering systems.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have already made video about client and server side rendering. You can check them out.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o7FvNQ5RNYw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LuG1KNowti4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Image Optimization: Image is very important for our website. It can make the user experience so much better and also it can make our website super slow. So we need to optimize our images. And Nextjs here is to help us. With Nextjs &lt;code&gt;Image&lt;/code&gt; component, we don't have to worry about optimization. It will do all the work for us. It can make our: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Image size is smaller while keeping the quality good.&lt;/li&gt;
&lt;li&gt;Lazy load our images.&lt;/li&gt;
&lt;li&gt;Responsive images based on the screen width.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Built-in Routing: It has a built-in routing system. You don't need to install any external package. It gives you all of the features out of the box.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Built-in CSS Support: With Nextjs you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;directly import your css files.&lt;/li&gt;
&lt;li&gt;import styles from &lt;code&gt;node_modules&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;use component-level CSS with CSS Modules.&lt;/li&gt;
&lt;li&gt;Use any existing CSS-IN-JS solution.&lt;/li&gt;
&lt;li&gt;Nextjs support Styled-jsx out of the box.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;code with styled-jsx:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;scoped&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
                p {
                    color: blue;
                }
                div {
                    background: red;
                }
                @media (max-width: 600px) {
                    div {
                        background: blue;
                    }
                }
            `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
                body {
                    background: black;
                }
            `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Api Routes: So you need a back-end server for your website. But the work is not too much. Setting up a server for a small amount of work is too much work.  Again Nextjs comes to the rescue. It has a feature called API routes. It will allow you to build your API. You can not only implement REST but also Graphql.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Internationalized Routing: Nextjs has built-in support for internationalized (i18n) routing. Let me explain. Suppose you have a website in English and another language. If someone visits your website from Bangladesh, then you want your website language to be in Bengali. If someone visits Korea, then you want it to be Korean. I hope you are getting my point.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code Splitting: Nextjs has Code splitting feature out of the box. If you don't know what it is then check out this blog ---&amp;gt; &lt;a href="https://www.culescoding.space/blog/what-is-code-splitting"&gt;What is code splitting?&lt;/a&gt; by me. It simply splits the code into separate bundles to make the load faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static Assets: It has a directory called &lt;code&gt;Public&lt;/code&gt; where you can store all of your static files like SVG, image, video, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;File System Routing: It has a file system routing. There is a pages directory where you put all of your page files. Like you are storing HTML files. That makes things easy to handle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Highly Configurable: If you have used create-react-app, then that you can't change the config. You have to either eject the project or apply some methods which are hard to do. But if you know webpack, then with nextjs you can configure your application with a single config file.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is why you should use Nextjs. Nextjs is the most popular framework for React because of its awesome features. And there are more things to explore.&lt;/p&gt;

&lt;p&gt;So, if you are using nextjs, why are you using it?  And if you haven't tried it, then which of its feature is more interesting to you? Are you going to try it?&lt;/p&gt;

&lt;p&gt;Please put your answers in the comment box. I would love to hear from you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to build a carousel postcard with React, Material-UI, and Swiper.js.&lt;br&gt;
If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://insta-carousel-demo.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" alt="Screenshot of Insta Carousel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;If you have any questions, please comment down below.&lt;br&gt;
You can reach out to me on social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.&lt;br&gt;
Stay safe. Goodbye.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://www.facebook.com/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt; Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KYLBb1W1ZBA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Detalhes sobre desenvolvimento de software</title>
      <author>Pedro Kiefer</author>
      <pubDate>Fri, 15 Oct 2021 17:42:03 +0000</pubDate>
      <link>https://dev.to/pedrokiefer/detalhes-sobre-desenvolvimento-de-software-3922</link>
      <guid>https://dev.to/pedrokiefer/detalhes-sobre-desenvolvimento-de-software-3922</guid>
      <description>&lt;p&gt;Vou tentar abordar uma série de tópicos recorrentes na vida de pessoas desenvolvedoras seniors, e que todos podem aplicar no dia a dia indepentemente do cargo/senioridade que possuem. A maioria dos tópicos tratam de sistemas web, mas é fácil fazer um paralelo e aplicar para outras realidades, como software embarcado, dispositivos móveis, software legado, etc.&lt;/p&gt;

&lt;p&gt;Cada tópico será um post separado para facilitar a leitura. Os tópicos são indepentendes entre si, mas a leitura de todos é recomendada.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pedrokiefer/o-basico-ou-nem-tao-basico-assim-3aln"&gt;O básico (ou nem tão básico assim)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Arquitetura escalável&lt;/li&gt;
&lt;li&gt;Cachear ou não cachear, eis a questão&lt;/li&gt;
&lt;li&gt;Métricas - the good, the bad, and the ugly&lt;/li&gt;
&lt;li&gt;Logging, o quê, quando e como?&lt;/li&gt;
&lt;li&gt;Deploy, release the kraken!&lt;/li&gt;
&lt;li&gt;Debugging; Deu ruim, e agora?&lt;/li&gt;
&lt;li&gt;Segurança&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Gostaria de agradecer à todas as pessoas que me incentivaram a escrever e contribuiram com ideias, discussões, feedbacks e revisão do texto: Diego Pereira, Elen Araújo, João Vortmann, John Kliff, Luísa Kiefer, Luiza Hagemann, Rafael Inocêncio, Rodolpho Escobar, Rodrigo Kassick, Wilson Júnior, Yago Nobre.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>architecture</category>
    </item>
    <item>
      <title>O básico (ou nem tão básico assim)</title>
      <author>Pedro Kiefer</author>
      <pubDate>Fri, 15 Oct 2021 17:41:17 +0000</pubDate>
      <link>https://dev.to/pedrokiefer/o-basico-ou-nem-tao-basico-assim-3aln</link>
      <guid>https://dev.to/pedrokiefer/o-basico-ou-nem-tao-basico-assim-3aln</guid>
      <description>&lt;p&gt;Desenvolver sistemas é sobre pessoas.&lt;br&gt;
Eu sei, parece contraditório, afinal passamos o dia na frente de telas e escrevendo. Mas passamos o dia inteiro nos comunicando com colegas, fornecedores, clientes. Seja em reuniões formais, ou nas salas de chat da empresa, pessoas estão sempre envolvidas. Converse com os colegas, troque informações, dê e receba feedback. Trabalhar em TI não é sobre falar com máquinas — por mais que possa parecer.&lt;/p&gt;

&lt;p&gt;Somos pessoas trabalhando com sistemas complexos, atendendo demandas de clientes e do negócio, então quero abordar alguns conceitos técnicos que eu julgo básicos e que ajudam muito no dia a dia dos times. São temas que vejo se repetirem em diversas empresas. Teriam mais temas — como agilidade, visão holística do produto, liderança —, que são tão importantes quanto esses que resolvi abordar, mas por hora deixo para uma próxima série de posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escolhas"&gt;
  &lt;/a&gt;
  Escolhas
&lt;/h2&gt;

&lt;p&gt;Como pessoas adoramos fazer escolhas e dar a nossa opinião, quando criamos sistemas não seria diferente. Temos que escolher:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linguagem de programação&lt;/li&gt;
&lt;li&gt;Infraestrutura para execução&lt;/li&gt;
&lt;li&gt;Bibliotecas e frameworks&lt;/li&gt;
&lt;li&gt;Ferramentas para testes, validações, deploys&lt;/li&gt;
&lt;li&gt;Editores de texto / IDEs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enquanto alguma dessas escolhas são totalmente pessoais (ou deveriam ser), algumas podem ter impacto nas pessoas que virão a trabalhar no projeto. Um exemplo disso é organizar o código em torno da escolha de IDE, e tornar difícil para outras pessoas — por exemplo precisar alterar vários caminhos em Makefiles sem a possibilidade de versionar a alteração para não quebrar os demais.&lt;/p&gt;

&lt;p&gt;Pese o impacto que decisões pessoais tem sobre o time, ou até sobre o produto. Não escolha uma linguagem só porque você quer aprendê-la, pense que outras pessoas terão que dar manutenção ao sistema. Será que todo mundo vai conhecer a ferramenta que estava em voga em 2015, ela ainda é mantida?&lt;/p&gt;

&lt;p&gt;O mesmo vale para infraestrutura, selecionar uma stack serverless pode fazer muito sentido para ganharmos velocidade na entrega, mas será que quando o volume de acessos crescer o custo vai continuar competitivo? Os demais colegas entendem dessa stack? E se o fornecedor descontinuar o sistema onde estamos rodando? Qual o esforço cognitivo no time para manter diversas stacks diferentes de software? Já vi times que rodavam coisas em: EC2, AWS Lambda, cluster kubernetes, cluster spark; era um time só, com todas essas infras diferentes. É impossível saber todas as boas práticas, os problemas, as soluções de contorno para todas essas diferentes infraestruturas.&lt;/p&gt;

&lt;p&gt;O desenvolvimento é feito para atingir os objetivos do negócio, não metas pessoais de aprendizado - mas obviamente podemos (e devemos) aprender muito no processo. Pense sempre no seu eu futuro: será que você vai ficar feliz em revisitar esse projeto? será que um colega novo ficará feliz em começar a trabalhar nesse projeto? Lembrando que no meio tempo aprendemos outras coisas, crescemos e amadurecemos. Dos diversos projetos que revisitei ao longo da carreira teria simplificado o código, a infraestrutura e as linguagens usadas para facilitar o modelo mental que preciso ter para dar manutenção.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c%C3%B3digo"&gt;
  &lt;/a&gt;
  Código
&lt;/h2&gt;

&lt;p&gt;Um parte importante das tarefas diárias é ler e escrever códigos — conforme a senioridade aumenta a quantidade de código diminui, infelizmente. Se passamos tanto tempo lendo e escrevendo códigos temos que priorizar escrever códigos que sejam de fácil leitura e compreensão.&lt;/p&gt;

&lt;p&gt;Fazer aquela expressão regular gigante em uma linda linha é um desafio e tanto, super divertido, mas será que o seu eu futuro vai ter facilidade de entender o que acontece lá? Talvez adicionar dois parágrafos explicando tudo? Ou, para os que usam python, será que aquela &lt;em&gt;list comprehension&lt;/em&gt; com lambdas e três níveis diferentes de dados valem a pena? Saber escrever código compacto, ou complexo, não te torna um desenvolvedor melhor.&lt;/p&gt;

&lt;p&gt;As pessoas tem uma certa capacidade de entender coisas, ideias simples são de fácil entendimento, já ideas complexas e compostas precisam de mais tempo para serem processadas. Em linhas gerais isso é o esforço cognitivo necessários para compreender (e manter) algo no cérebro. Quando gastamos muito tempo processando as ideias acabamos não fazendo o que é importante para o negócio: gerar valor. Então, se o esforço cognitivo para entender o código for grande as chances de que alguém, ou você mesmo, adicione um bug são altas. Ou mesmo se não for adicionado um bug, compreender o que o código e suas nuances faz se torna difícil. Tem uma linha de pensamento que fala que escrever códigos é como escrever prosa, isto é, precisamos que ele seja legível, de fácil entendimento por humanos. Os compiladores e otimizadores de código são ótimos em transformar qualquer código em um binário executável, não vivemos mais em 1970 em que escrever código de uma certa maneira era requisito.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nomear-coisas"&gt;
  &lt;/a&gt;
  Nomear coisas
&lt;/h2&gt;

&lt;p&gt;Nomear coisas (e pessoas e pets) é algo extremamente difícil. As possibilidades são enormes, posso usar todos os personagens do meu livro favorito, posso usar o nome dos filmes que amo, os jogadores do meu time do coração, os nomes científicos das flores que mais gosto. Se você identificou algum sistema que tenha nomes assim, bom, esses sistemas não dizem nada para ninguém, somente para as pessoas que criaram ele originalmente — muitas vezes, pessoas que já não trabalham mais na empresa e o nome ficou ainda mais sem sentido.&lt;/p&gt;

&lt;p&gt;Os sistemas evoluem, os times mudam, as empresas crescem, adquirem outras empresas, e muitas vezes os sistemas permanencem. Como uma pessoa nova na empresa vai saber que MartyMcFly faz tracing do sistema — afinal no filme ele viaja no tempo, nada melhor para um sistema que deixa tu olhar o que aconteceu em algum momento do passado. Ou que o Ego é um sistema distribuído de fofoca — ok esse talvez mais gente entenda. O ponto é não devemos dar nomes que simplesmente achamos legais, ou que são divertidos ou uma piada interna. Nomes precisam fazer sentido, deixar claro o seu propósito, isso facilita entender em que parte da arquitetura o sistema se encontra.&lt;/p&gt;

&lt;p&gt;Arquitetura de sistemas são quebra-cabeças (ou Legos) gigantes, dando nomes com significado faciltamos a montagem do quebra-cabeça na cabeça de cada um.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fazer-o-m%C3%ADnimo"&gt;
  &lt;/a&gt;
  Fazer o mínimo
&lt;/h2&gt;

&lt;p&gt;O objetivo de todo o desenvolvimento é entregar valor para os usuários. Uma arquitetura complexa, código díficil de entender, emaranhado de dependências podem até entregar valor em um momento inicial. Mas sistemas crescem, usuários têm desejos diferentes, regras mudam, e quando temos algo extremamente complexo adicionar ou trocar as partes se torna um exercício muito mais complicado. Queremos entregar o máximo de valor sempre, não ficar oscilando entre entregas e débitos técnicos (que se não forem pagos se tornam grandes bolas de neve).&lt;/p&gt;

&lt;p&gt;Faça o mínimo para atender os requisitos de negócio, &lt;strong&gt;sem abrir mão de testes, qualidade e segurança&lt;/strong&gt;. Testes são o melhor jeito de documentar o sistema, qualquer um consegue ler os testes e entender o comportamento. Com eles você também ganha velocidade para refatorar e não ter medo de quebrar uma parte não correlacionada. Tente simplificar o código e a arquitetura conforme o sistema for crescendo. Quanto mais simples mais fácil manter na cabeça um modelo de como funciona todo o sistema.&lt;/p&gt;

&lt;p&gt;Segurança deve ser criada desde o primeiro momento. Por exemplo: já comece utilizando HTTPS para todas as chamadas. Não coloque senhas e outros dados sensíveis no código fonte. Veja segurança como parte de qualidade do software, não espere um incidente para focar em segurança.&lt;/p&gt;

&lt;p&gt;Portanto, leve como lema &lt;strong&gt;Keep It Simple&lt;/strong&gt;, mantenha o sistema simples - faça o exercício de tentar explicar o sistema para uma criança ou para seus avós. Ou, para os fãs de arquitetura, adotem &lt;a href="https://en.wikipedia.org/wiki/Minimalism#Minimalist_design_and_architecture"&gt;&lt;strong&gt;Less is more&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qualidade"&gt;
  &lt;/a&gt;
  Qualidade
&lt;/h2&gt;

&lt;p&gt;Se você quer ter velocidade de entrega jamais abra a mão de qualidade. Qualidade é o que permite os times e a empresa acelerarem. No livro &lt;a href="https://www.amazon.com.br/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339"&gt;Accelerate&lt;/a&gt; há diversos dados e comprovações das hipóteses de que qualidade é essencial. Recomendo fortemente a leitura para todos que querem entender as relações entre código, times e retorno para a empresa.&lt;/p&gt;

&lt;p&gt;Quando abrimos mão da qualidade começamos um ciclo vicioso. Entregamos algo rápido, mas talvez sem testes. Código funciona por um tempo, até que quebra em produção. Como não tínhamos testes, fica díficil encontrar o problema e garantir que não aconteça novamente. No meio tempo já estávamos lançando outras features, também sem testes e no modo "funciona na minha máquina". Quando tudo isso vai para a produção, ficamos algumas horas fora do ar. O impacto com nossos usuários é enorme. Paramos tudos (ie. deixamos de entregar valor) para tentar arrumar o problema. Não pagamos o débito técnico da falta de testes, fazemos outro paliativo, e a complexidade do software vai crescendo.&lt;/p&gt;

&lt;p&gt;Eventualmente chegamos em um momento em que não dá mais. Adicionar funcionalidade está levando meses, porque qualquer alteração esbarra em milhares de problemas. Ninguém entende como o sistema funciona. Nossa entrega de valor, que era rápida, está péssima; passamos meio ano só pagando débito técnico. Quando finalmente voltamos a ter velocidade, o mercado já nos abandonou, e só perdemos dinheiro. Claro, isso é o pior cenário possível, existem outros menos piores mas que geram muitos problemas nos times. Evite o débito técnico priorizando qualidade.&lt;/p&gt;

&lt;p&gt;Lembrando que existem diversos tipos de débito técnico, nem todos são possíveis de identificar de forma simples. Alguns são sutis, ficam escondidos dentro do código com testes funcionais. Mas, na hora de trocar alguma peça da arquitetura, acabamos abrindo a caixa de pandora. Nem todos os débitos técnicos são previsíveis, alguns simplesmente aparecem nas horas mais inoportunas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prioridades"&gt;
  &lt;/a&gt;
  Prioridades
&lt;/h2&gt;

&lt;p&gt;No dia a dia do time sempre temos muitas decisões a tomar e devemos pensar como priorizar, tendo em vista que queremos garantir os requisitos do negócio. Às vezes os requisitos não são tão fáceis de saber. Por exemplo: se o sistema atende usuários internos então dar suporte faz parte do negócio (claro, em alguns lugares teremos um time de suporte, mas mesmo assim vamos ter que ensinar esse time). Manter os usuários satisfeitos e criar uma cultura de colaboração é fundamental.&lt;/p&gt;

&lt;p&gt;Eu gosto sempre de priorizar débitos técnicos toda a vez que encontro um, mesmo que isso não esteja no escopo da sprint. Alguns débitos técnicos podem ser enormes e precisam ser negociados com o resto do time. Tente sempre fazer com que o time compre a ideia de eliminar débitos.&lt;/p&gt;

&lt;p&gt;Resolvido os débitos, o foco é o negócio, como eu maximizo o valor entregue. Fazer cinco mil tarefas simultâneas não leva a nada, só stress e burnout. E as tarefas (seguindo o pensamento ágil) são do time. Divida as tarefas entre todos, aprenda junto ou ensine o que você já sabe. Se o time tem um backlog para mais de ano, provavelmente não é um backlog pois o negócio vai mudar de hoje até lá. Aqueles vários cards parados vão deixar de fazer sentido. Minimize o backlog, mas garanta que o time tenha uma visão a longo prazo (construída junto com os clientes).&lt;/p&gt;

&lt;p&gt;Ter um panorama de onde estamos e para onde estamos indo ajuda muito o time para saber o que priorizar. Torna fácil pegar as tarefas de maior valor do backlog e divide a carga de priorização com todos. O importante é todos estarem a par do que se passa no time, e entenderem qual o momento do grupo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realimenta%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Realimentação
&lt;/h2&gt;

&lt;p&gt;Feche o ciclo de desenvolvimento observando as métricas do sistema em produção e colhendo feedback dos usuários. O comportamento está como o esperado? As métricas atendem? O que você pode aprender sobre o sistema observando ele rodando? O que os usuários estão falando?&lt;/p&gt;

&lt;p&gt;O trabalho de desenvolvimento vai além de só escrever as linhas de código e mandar para produção. Temos que acompanhar os sistemas, entender se temos melhorias técnicas para fazer. A partir do momento em que o software está em produção precisamos desse acompanhamento. Já vi sistemas que no ambiente de testes funcionavam perfeitamente com latências mínimas, quando foi para produção, e teve um alto volume de acesso, parou de funcionar. Ter métricas, logging, tracing — quiçá fazer um profiling — trará as respostas para os problemas técnicos encontrados em produção, ou talvez só um caminho para onde devemos explorar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#livros"&gt;
  &lt;/a&gt;
  Livros
&lt;/h2&gt;

&lt;p&gt;Alguns livros que trazem muita informação boa para o dia adia. Sem ordem de preferência. Sem julgamentos aos autores.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Code-Complete-Steve-McConnell/dp/0735619670/"&gt;Code Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Clean-Code-Handbook-Software-Craftsmanship-ebook/dp/B001GSTOAM/"&gt;Clean Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Pragmatic-Programmer-Journeyman-Master-English-ebook/dp/B003GCTQAE/"&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8/"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Refactoring-Improving-Existing-Addison-Wesley-Signature-ebook/dp/B07LCM8RG2/"&gt;Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
