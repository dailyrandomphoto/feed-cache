<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Best Cloud Computing Certifications to Aim in 2022</title>
      <author>javinpaul</author>
      <pubDate>Fri, 31 Dec 2021 05:56:28 +0000</pubDate>
      <link>https://dev.to/javinpaul/10-best-cloud-computing-certifications-to-aim-in-2022-19lf</link>
      <guid>https://dev.to/javinpaul/10-best-cloud-computing-certifications-to-aim-in-2022-19lf</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/cloud-computing-101-master-the-fundamentals?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVP1Z36C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/collection/6064040858091520/4787793394925568/image/6438708875100160" alt="Best Cloud Computing 101: Master the Fundamentals - Learn Interactively" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you are aiming for cloud certifications in 2022 but are not sure which cloud certification should you go for then you have come to the right place. Earlier, I have shared a list of the &lt;a href="https://javarevisited.blogspot.com/2019/12/top-10-it-certifications-for-java-programmers.html"&gt;&lt;strong&gt;best IT certifications for Java developers&lt;/strong&gt;&lt;/a&gt;, and today, I am going to talk about the best cloud certification to aim for in 2022. &lt;/p&gt;

&lt;p&gt;You can go through this list of cloud certifications and choose the best one depending upon your skills and experience. &lt;/p&gt;

&lt;p&gt;I have shared the best cloud certifications for beginners, developers, system admins, and solution architects from Amazon AWS, Microsoft Azure, and Google Cloud Platform.&lt;/p&gt;

&lt;p&gt;Cloud computing services is growing exponentially in nowadays technology and become a priority among big-name organization such as Netflix which uses Amazon AWS to run their business from hosting to database and analytics.&lt;/p&gt;

&lt;p&gt;For this reason, many cloud computing has come to the real world with different infrastructure and services such as &lt;a href="https://medium.com/javarevisited/5-best-courses-to-learn-google-cloud-platform-gcp-in-2021-169093a3771a"&gt;&lt;strong&gt;Google Cloud&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/5-best-azure-fundamentals-courses-to-pass-az-900-certification-exam-in-2020-9e602aea035d"&gt;&lt;strong&gt;Microsoft Azure&lt;/strong&gt;&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;All of those cloud services are complicated in their infrastructure and it requires the person who wants to deal with them to get some sort of certificate to deal with a specific service and companies nowadays are requiring people to have these certifications in order to validate their skills.&lt;/p&gt;

&lt;p&gt;This article will discuss with you some of the best cloud certifications from companies like Amazon &lt;a href="https://aws.amazon.com/"&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://cloud.google.com/"&gt;&lt;strong&gt;Google cloud&lt;/strong&gt;&lt;/a&gt; and having those certifications will make your resume stand out among the other competitor during the hiring process and you can get a higher salary than the others without those certifications.&lt;/p&gt;

&lt;p&gt;By the way, if you want to become a Full Stack Cloud Developer in 2022 then Coursera has an excellent resource called &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fibm-full-stack-cloud-developer"&gt;IBM Full Stack Cloud Developer Professional Certificate&lt;/a&gt; which you can use to learn Cloud Native and Full Stack Development using hands-on projects with Containers, Microservices and more and start your career in application development in cloud native environment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fibm-full-stack-cloud-developer"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjy25g4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/coursera_assets/meta_images/generated/XDP/XDP%257ESPECIALIZATION%21%257Eibm-full-stack-cloud-developer/XDP%257ESPECIALIZATION%21%257Eibm-full-stack-cloud-developer.jpeg" alt="IBM Full Stack Cloud Developer Professional Certificate | Coursera" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-best-aws-gcp-and-azure-cloud-certifications-to-aim-in-2022"&gt;
  &lt;/a&gt;
  10 Best AWS, GCP, and Azure Cloud Certifications to aim in 2022
&lt;/h2&gt;

&lt;p&gt;Without wasting any more of your time, here is a list of the best Cloud certification of 2022. You can aim for this certification to boost your career and also start your career in Cloud Computing as Cloud Professional, Developer, and Solution architect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-aws-certified-solutions-architect%E2%80%8A%E2%80%8Aassociate"&gt;
  &lt;/a&gt;
  1. AWS Certified Solutions Architect --- Associate
&lt;/h3&gt;

&lt;p&gt;This AWS certificate is designed for people who can do solution architecture such as deploying the web applications and securing them and also it targets individuals who have one year working with AWS services.&lt;/p&gt;

&lt;p&gt;In other words, this is the &lt;em&gt;best cloud certification for experienced developers&lt;/em&gt; who wants to become software architects or solution architects. If you have been working on the AWS cloud platform, personally or for our company then you should aim to pass this exam to get certified for your skills.&lt;/p&gt;

&lt;p&gt;The exam is very vast and you need to know a lot of things about AWS services. If you are aiming for this prestigious certification then this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-solutions-architect-associate%2F"&gt;&lt;strong&gt;AWS Certified Solutions Architect course&lt;/strong&gt;&lt;/a&gt; on udemy can assist you to acquire those skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-solutions-architect-associate%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73-wa3Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-59AFG3WL9eg/X5OVulAusmI/AAAAAAAAj-g/mYRQMG12gV8oUj-nWzgHHAUYwigHJOz8gCLcBGAsYHQ/w200-h200/image.png" alt="best cloud certification for experienced developers" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-aws-certified-cloud-practitioner"&gt;
  &lt;/a&gt;
  2. AWS Certified Cloud Practitioner
&lt;/h3&gt;

&lt;p&gt;This is the &lt;em&gt;best Cloud certification for beginners&lt;/em&gt; or anyone who wants to start with Cloud computing and the AWS cloud platform. If you want to jump to Associate-level or specialty certification then make sure to get this certification that gives you an overall understanding of AWS cloud services such as security and account management and more.&lt;/p&gt;

&lt;p&gt;This is a relatively easier exam and you can easily pass this with a couple of weeks of preparation. If you need a recommendation, I highly recommend you check out Stephane Maarek's &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-cloud-practitioner-new%2F"&gt;AWS Certified Cloud Practitioner [NEW]&lt;/a&gt;&lt;/strong&gt;  course on Udemy. Stephane is an AWS Guru and this will help you learn and prepare for the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-cloud-practitioner-new%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIt50Fuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-LRtPzWRClC0/X5OUh0fc2LI/AAAAAAAAj-Y/fpR6pSzfYUEBWBI1QroMxaspF3lVxFLBACLcBGAsYHQ/w400-h213/image.png" alt="best cloud certification for beginners" width="400" height="213"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-microsoft-certified-azure-fundamentals"&gt;
  &lt;/a&gt;
  3. Microsoft Certified: Azure Fundamentals
&lt;/h3&gt;

&lt;p&gt;If you notice, all top four cloud certification is from Amazon AWS, and it's because AWS is the most popular public cloud platform for both startups and big companies but Microsoft Azure is catching up quickly which has, in turn, boost the demand for certified Azure Cloud professionals.&lt;/p&gt;

&lt;p&gt;The Azure fundamentals certification is better for individuals to know some foundation of the cloud services and this certificate will teach you the cloud concepts as well as how to use Microsoft Azure services, security, privacy, and pricing.&lt;/p&gt;

&lt;p&gt;In short, the best cloud certification for beginners who wants to learn Azure. This is very similar to AWS cloud practitioner and you can pass this certification with a couple of weeks' preparation. If you need recommendations then this course on Udemy &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faz-900-azure-exam-prep-understanding-cloud-concepts%2F"&gt;AZ-900 Azure Exam Prep&lt;/a&gt;&lt;/strong&gt; will explain all of this in one course and prepare you for the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faz-900-azure-exam-prep-understanding-cloud-concepts%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-MfD7lV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-8pHZ3VHLJYU/X5OZjNIT0GI/AAAAAAAAj_I/rWY7rwGs7tMsdDIwmw0Q2JQXCY9zziSZwCLcBGAsYHQ/w200-h200/image.png" alt="best Azure certification for beginners" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the same note, if you want to start with Google Cloud then you can prepare for &lt;a href="https://javarevisited.blogspot.com/2021/11/top-5-courses-to-crack-google-cloud.html"&gt;Google Cloud Platform Digital Cloud Leader&lt;/a&gt; and if you are working or going to work on AWS Platform then you can aim for the Cloud Practitioner exam in 2022.&lt;/p&gt;

&lt;p&gt;All these three exams are respective introductory and easiest cloud certification for their respective platform but if you have to choose the easiest between three of them then I highly recommend you to go for &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html#axzz7BbH9AnEo"&gt;AWS Cloud Practitioner&lt;/a&gt; as its most popular and probably easier to clear than the other two as AWS is the most mature public cloud platform out there.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-aws-certified-developer%E2%80%8A%E2%80%8Aassociate"&gt;
  &lt;/a&gt;
  4. AWS Certified Developer --- Associate
&lt;/h3&gt;

&lt;p&gt;This is the best Cloud certification for programmers and software developer who wants to create cloud-native applications. If you have more than one year of managing AWS services then this associate certification is right for you and it will teach you how to use the AWS core services as well as its architecture, develop, and deploy the application on AWS.&lt;/p&gt;

&lt;p&gt;This is also one of the toughest AWS certifications, compared to the previous two certifications like cloud practitioner and solution architect. It's not enough to just be familiar with different AWS services, you need to know them in-depth so that you can use correct configurations in a given scenario.&lt;/p&gt;

&lt;p&gt;If you are a developer and software engineer then I highly recommend this cloud certification to you as it will significantly boost your profile and make you eligible for many more opportunities.&lt;/p&gt;

&lt;p&gt;As I said, the exam is tough to crack and you need multiple resources to prepare well but to start with I highly recommend you to go through this course &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-dva-c01%2F"&gt;&lt;strong&gt;Ultimate AWS Certified Developer Associate 2022 - NEW!&lt;/strong&gt;&lt;/a&gt; from CloudGuru, which will teach you the skills needed to pass the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-dva-c01%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f4nrpPL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-ebM5IQIy--c/X5OZRPa0hsI/AAAAAAAAj_A/RldqQmE7XIIr53BnkBlPUUWPhEpP2tGKgCLcBGAsYHQ/image.png" alt="best cloud certification for programmers and developers" width="512" height="481"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-google-associate-cloud-engineer"&gt;
  &lt;/a&gt;
  5. Google Associate Cloud Engineer
&lt;/h3&gt;

&lt;p&gt;A list of best cloud certifications cannot be completed without Google cloud certification, another big player in the public cloud market. Google cloud has some of the best capabilities when it comes to dealing with Big Data and Machine learning and that's why many startups who are working in those fields are opting for Google cloud.&lt;/p&gt;

&lt;p&gt;This is the best Google cloud certification for programmers, developers, and software engineers. The holder of this certificate will have the responsibility of deploying web applications in the cloud as well as monitoring the operations and managing the whole enterprise solutions and configuring access and security.&lt;/p&gt;

&lt;p&gt;Regarding preparing for this exam, this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgoogle-cloud-associate-cloud-engineer-certification%2F"&gt;&lt;strong&gt;Ultimate Google Certified Associate Cloud Engineer&lt;/strong&gt;&lt;/a&gt; course can help you learn and pass the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2020/09/free%20courses%20to%20pass%20google%20cloud%20engineer%20certification%20exam.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXm8xoE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-C9Tos3aNPOA/X5OaKMNGNfI/AAAAAAAAj_g/MaT4OLErIGUFK9yOYhXitFIhFMIA_0VfgCLcBGAsYHQ/w200-h200/image.png" alt="best Google cloud certification for beginners" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-aws-certified-sysops-administrator%E2%80%8A%E2%80%8Aassociate"&gt;
  &lt;/a&gt;
  6. AWS Certified SysOps Administrator --- Associate
&lt;/h3&gt;

&lt;p&gt;This associate certification is for people having at least one year in deployment, management, and operations on AWS and teaches you to choose the appropriate service for your needs as well as control the data flow from AWS and more.&lt;/p&gt;

&lt;p&gt;In other words, this is the best Cloud certification for system admins and IT professionals who work on the Infra side. If you are working in IT support or working as a System admin, you can aim for this certification to further boost your career.&lt;/p&gt;

&lt;p&gt;If you need a course to prepare for this certification, I recommend you to this course named &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-sysops-administrator-associate%2F"&gt;&lt;strong&gt;AWS Certified SysOps Administrator --- Associate&lt;/strong&gt;&lt;/a&gt; is a good resource to learn those skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2020/08/top-5-free-courses-to-pass-aws-sysops-administrator-associate-exam.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzyKd80x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-5G8_btLccy8/X5OZc3qY4cI/AAAAAAAAj_E/98jSkYYm_fAxFtV0b5N5zp0YuMI3Y1kEgCLcBGAsYHQ/image.png" alt="best AWS certification for DevOps and Sys admins" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-microsoft-certified-azure-solutions-architect-expert"&gt;
  &lt;/a&gt;
  7. Microsoft Certified: Azure Solutions Architect Expert
&lt;/h3&gt;

&lt;p&gt;This is the best cloud certification for experienced programmers, developers, and DevOps engineers who want to become Azure experts. When you pass this certification exam you will have the skills to design and implement solutions in Microsoft Azure and that includes security, network computing, and storage.&lt;/p&gt;

&lt;p&gt;If your companies are migrating into Microsoft Azure cloud then aiming for this Azure certification and boost your profile and also help you to get promoted.&lt;/p&gt;

&lt;p&gt;When it comes to preparation, this is a vast certification and you need to cover a lot of topics but thankfully there are many courses to learn these skills but this course on udemy but the &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2F70534-azure%2F"&gt;&lt;strong&gt;AZ-303/AZ-304 Azure Architecture Technologies&lt;/strong&gt;&lt;/a&gt; is the best of them all and it will help you a lot on this journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/5-best-azure-fundamentals-courses-to-pass-az-900-certification-exam-in-2020-9e602aea035d"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7unTEZd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-gPERfFcHwZQ/X5OZpCpM6oI/AAAAAAAAj_M/Q7UWdO2MFZoGVl2yJIbaPkL1A6FrfOsdwCLcBGAsYHQ/w200-h200/image.png" alt="best Azure certification for experienced" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-microsoft-certified-azure-administrator-associate"&gt;
  &lt;/a&gt;
  8. Microsoft Certified: Azure Administrator Associate
&lt;/h3&gt;

&lt;p&gt;This is another Azure certificate that made the list of top 10 Cloud certifications. This is the best Azure certification for system admins and people who are working in IT support. This certificate will get you the experiences to implement, manage, and monitor cloud services such as storage, security, and virtual environment, and many more responsibilities.&lt;/p&gt;

&lt;p&gt;For preparation, you need to know all the essential Azure services and how to use them, configure them, and troubleshoot in case of any issue. If you need an online course, I recommend you to check out this Udemy course &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fexam-az-104-microsoft-azure-administrator%2F"&gt;&lt;strong&gt;AZ-104 Microsoft Azure Administrator&lt;/strong&gt;&lt;/a&gt; is a good resource to learn all of those skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-course-to-become-microsoft-azure-administrator-certification-exam.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yE8yhfbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-xSA5g0pkJpA/X5OZyQk7dRI/AAAAAAAAj_Q/gPCK6B2P0LQ7G2TGMX5_laMmLYiCFS6lACLcBGAsYHQ/w320-h208/image.png" alt="best Azure certification for system admins" width="320" height="208"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-google-professional-cloud-architect"&gt;
  &lt;/a&gt;
  9. Google Professional Cloud Architect
&lt;/h3&gt;

&lt;p&gt;This is another popular and in-demand Google cloud certification. This is similar to AWS solution architect and Azure Technology expert but on Google cloud. This is the best Google Cloud certification for experienced IT professionals who wants to become solution architect.&lt;/p&gt;

&lt;p&gt;The holder of a professional cloud architect certificate plays an important role inside the organization since he could design develop, deploy, and manage your web application as well as secure them and more responsibilities.&lt;/p&gt;

&lt;p&gt;Regarding preparation for this prestigious cloud certification, this course on udemy &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgoogle-cloud-architect-certifications%2F"&gt;&lt;strong&gt;Ultimate Google Certified Professional Cloud Architect&lt;/strong&gt;&lt;/a&gt; is a good resource for this certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2020/09/5-free-courses-to-pass-google-cloud-professional-architect-certification.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R12btIOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-H7mDXK2_J-Q/X5OaTASnzvI/AAAAAAAAj_k/5bgEdDEQbQQkiyKR_AASEGYbPmKXep2agCLcBGAsYHQ/w200-h200/image.png" alt="best Google cloud certification for senior developers" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-aws-architect-professional"&gt;
  &lt;/a&gt;
  10. AWS Architect Professional
&lt;/h3&gt;

&lt;p&gt;This is the ultimate cloud certification you can aim for in 2022. It's also regarded as the toughest AWS cloud certification and requires extensive experience and knowledge of the AWS cloud platform. There is a huge demand for this certification as there is always a shortage of AWS experts and I highly recommend this to expert cloud professionals.&lt;/p&gt;

&lt;p&gt;This advanced certification teaches you how to design and deploy scalable web applications on Amazon AWS servers as well as select the appropriate service and power to use for your application and more skills you will have.&lt;/p&gt;

&lt;p&gt;Regarding preparation, you may need to consult a lot of resources and AWS papers, documentation, and courses but to start with this course on Udemy &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-solutions-architect-professional%2F"&gt;&lt;strong&gt;Ultimate AWS Certified Solutions Architect&lt;/strong&gt;&lt;/a&gt; will help you in this journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-amazon-web-services-aws-courses-for-beginners-and-experienced-programmers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9dM37aO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-AKbTvoYkJS8/X5OaZVNEtII/AAAAAAAAj_o/rsD7oSJ5PYMcFpuMOVyFMVr6ahibxOIUgCLcBGAsYHQ/w200-h200/image.png" alt="best cloud certificate for experts" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;best cloud Certification you can acquire in 2022.&lt;/strong&gt; Those certifications are almost the most useful in the field of cloud computing and are issued by the cloud provider itself such as Amazon, Google, and Microsoft, and receiving one of these certifications will open the door to a successful career in this growing industry.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Certification Resources&lt;/strong&gt; for** IT Professionals** and Programmers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/08/how-to-crack-spring-core-professional-certification-exam-java-latest.html"&gt;How to pass Spring Core Professional 5.0 Certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/how-to-crack-microsoft-az-103-azure-administrator-associate-exam-certification.html"&gt;How to become an Azure Certified Administrator Associate?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.freecodecamp.org/how-to-pass-oracles-java-certifications-a-practical-guide-for-developers-e9b607ba6173"&gt;How to Crack Oracle's Java Certification in 2022?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-crack-aws-solutions-architect-associate-certification-exam-SAA-C01.html#axzz5rHwAwycj"&gt;Top 5 Courses to Crack AWS Solution Architect Certification&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-certifications-to-learn-cloud-computing-aws.html"&gt;Top 10 Cloud Computing Certification from Coursera&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-courses-to-crack-azure-architecture-technologies-certification-az-300-exam.html#axzz6E6VuRMsx"&gt;Top 5 Courses to crack Azure Cloud Architect (AZ-300) Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-certified-devops-engineer-professional-exam-certification.html"&gt;Top 5 Courses to Crack AWS DevOps Engineer Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-solution-architect-professional-sap-c01-certification-exam.html"&gt;Top 5 Courses to Crack AWS Solution Architect Professional Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-AZ-900-exam-Azure-Fundamentals-certification-practice-tests-and-mock-exams-to.html"&gt;Top 5 AZ-900 Practice tests for programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/top-10-courses-to-learn-docker-and-kubernetes-for-programmers-4lg0"&gt;Top 10 Courses to learn Docker and Kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-google-cloud-platform-gcp-courses-certifications-online.html"&gt;Top 5 Courses to Pass Google Associate Cloud Engineer Certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-free-aws-solution-architect-Associate-certification-dumps-practice-questions.html"&gt;5 Free AWS Solution Architect Practice Test&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/how-to-crack-microsoft-azure-fundamentals-certification-az-900-exam.html"&gt;How to Crack Azure Fundamentals (AZ-900) Certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/top-10-courses-to-learn-docker-and-kubernetes-for-programmers-4lg0"&gt;Top 10 Courses to learn Docker and Kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-course-to-crack-google-cloud-associate-cloud-engineer-certification-exam.html"&gt;Top 5 Courses to become GCP Associate Cloud Enginee&lt;/a&gt;r&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/how-to-crack-microsoft-azure-solution-architect-exam-az-300.html"&gt;How to Pass the AZ-300 Azure Solution Architect exam?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-google-cloud-platform-gcp-courses-certifications-online.html"&gt;Top 5 Courses to Pass Google Associate Cloud Engineer Certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html"&gt;Top 5 Courses to pass the AWS Cloud Practitioner Certification&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you like these* best Cloud Certifications* then please share them with your friends and colleagues. If these courses have helped you to pass the exam, then please spread the word so that other people can also benefit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.  S. -&lt;/strong&gt; If you are a complete beginner to Cloud Computing and looking for some free courses to learn Cloud Computing in general then you can also check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-cloud-computing%2F"&gt;Introduction to Cloud Computing &lt;/a&gt;(FREE Course)&lt;/strong&gt; on Udemy. More than 210,000 people have joined this course and it's completely free, you just need a Udemy account to join this course.&lt;/p&gt;

</description>
      <category>cloudcomputing</category>
      <category>aws</category>
      <category>azure</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Simplest backend</title>
      <author>S.K.Roshan</author>
      <pubDate>Fri, 31 Dec 2021 05:39:28 +0000</pubDate>
      <link>https://dev.to/roshansk/the-simplest-backend-e40</link>
      <guid>https://dev.to/roshansk/the-simplest-backend-e40</guid>
      <description>&lt;p&gt;Connecting to a database and managing it absolutely not beginner friendly! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing your backend&lt;/li&gt;
&lt;li&gt;Testing it&lt;/li&gt;
&lt;li&gt;Deploying it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and Deploying on the other side requires further knowledge about cloud.&lt;/p&gt;

&lt;p&gt;As a backend developer myself who usually writes the backend in python coupled with a micro framework called &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;flask&lt;/a&gt; it's quite hard and time consuming to deploy a single letter change I made in script.&lt;/p&gt;

&lt;p&gt;But now its not gonna be the same, integrating a backend is simplified to integrating an API!&lt;/p&gt;

&lt;p&gt;CSV2API is tiny project that helps noobs to integrate a Database with the beginner knowledge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's how we do it&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A database as the name suggests we need data, it is usually store in cloud storages. Here it is going to a CSV file that is manually stored in our repository or any other online storage provider.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The minimum pre-requisite in a Database is &lt;strong&gt;querying&lt;/strong&gt; and CSV2API supports that.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial we will be using this &lt;a href="https://github.com/dev-Roshan-lab/healthcare/blob/main/data.csv"&gt;sample&lt;/a&gt; dataset, which talks about a list of Doctors and their job in their niche.&lt;/p&gt;

&lt;p&gt;So a simple API request to our simplest backend which is already created for us, in python programming language would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://csv2api1.p.rapidapi.com/api/v1"&lt;/span&gt;


&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'x-rapidapi-host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"csv2api1.p.rapidapi.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'x-rapidapi-key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"YOUR-RAPIDAPI-KEY"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;querystring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"https://raw.githubusercontent.com/dev-Roshan-lab/healthcare/main/data.csv"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"results":[{" meet_id":" null"," tags":"Throat problem*Ear problem*Ear Nose Throat Diseases*Microscopic Ear Surgery*Endoscopic Nose &amp;amp; Paranasal Sinus Surgery ( Fess)*Microscopic Laryngoscopic Surgery*Sleep Disorders*Hearing Aids*Sinus Surgery*Ear Infection","description":"Dr. Sanjay Sachdeva is one of the best ENT Surgeons in Delhi with specialization in Otorhinolaryngology. He has a rich experience of 32 years in the field of ENT and Head and Neck Surgery. He is recognized as an expertise in the area of Endoscopic Minimally Invasive Approach for Skull Base Surgery.","goodReviews":79.2,"image":"assets/doctor.png","isfavourite":true,"name":"Dr. Sanjay Sachdeva","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"Otolaryngologist"},{" meet_id":" null"," tags":"Cancer treatment*Urological Cancer Surgery","description":"Dr. Gagan Gautam is prominent name in the field of Uro Oncology and Robotic Surgery in India. He is a qualified surgeon who has obtained his specialization degree (MCh) from the prestigious All India Institute of Medical Sciences (AIIMS) and US fellowship in Robotic Uro oncology from University of Chicago a leading cancer center in the world. He specializes in the surgical treatment of prostate kidney bladder and other urinary tract cancers.","goodReviews":93.2,"image":"assets/doctor1.png","isfavourite":false,"name":"Dr. Gagan Gautam","rating":3.5,"satisfaction":89.2,"totalScore":72.2,"type":"Uro - Oncologist"},{" meet_id":" null"," tags":"Spinal Surgeries*Endoscopic Disc surgery*Disc replacement*Endoscopic Cranial Surgery*Brain Tumour Surgery*Minimally Invasive Surgery for Spinal Tumours*Motion preserving surgery","description":"Dr. Bipin Walia is one of the Best Neurosurgeons in New Delhi with more than two decades of vast clinical experience in the field of neuro and spine surgery. Dr. Walia has performed more than 7000 spinal surgeries and has a keen interest in advanced technique - Minimally Invasive Surgery for spinal tumors. He is recognized as a pioneer in endoscopic disc surgery and is an expert in the area of motion preserving surgery disc replacement surgery Image guided surgery endoscopic cranial surgery and brain tumor surgery.","goodReviews":88.2,"image":"assets/doctor3.png","isfavourite":false,"name":"Dr. Bipin S Walia","rating":2.5,"satisfaction":78.2,"totalScore":93.94,"type":"Neurosurgeon"},{" meet_id":" skr-lks-tmo"," tags":"Cavity filling*Root canal*Cosmetic Dentistry","description":"Dr. Surbhi Anand is a practicing Endodontist and Conservative Dentist with over 7 years of experience after procuring the bachelors degree she pursued a masters course in Endodontology specializing in Single sitting Root Canal Treatment cosmetic dentistry and smile makeover. She has been associated as a senior consultant with healthcare setups including Fortis hospital and Columbia Asia Hospital and has a vast consultation base to various reputable dental practices in Delhi/NCR.","goodReviews":12.2,"image":"assets/doctor2.png","isfavourite":true,"name":"Dr. Surbhi Anand","rating":1.5,"satisfaction":84.2,"totalScore":75.2,"type":"Dentist"},{" meet_id":" null"," tags":"Gastrointestinal*Gynae Cancers","description":"Dr. Sandeep Batra is Senior Consultant of Medical Oncology at the Max Super Speciality Hospital New Delhi. His educational qualifications include an MBBS from PGI Rohtak; an MD in Medicine from the same institute; a DNB in Medicine from the National Board of Examinations Delhi; and a PGDMLS from the Symbiosis University Pune. He was also previously a Senior Consultant at the Medical Oncology at Medanta The Medicity Gurgaon. He was also involved in academic activities including training of oncology students and oncology nurses. Dr. Batra has many national and international publications to his name and has also edited various oncology-related chapters in numerous books and online resources.","goodReviews":79.2,"image":"assets/doctor4.png","isfavourite":true,"name":"Dr. Sandeep Batra","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"Oncologist"},{" meet_id":" null"," tags":"Movement Disorders with Deep*Brain Stimulation (DBS)*Surgery for Epilepsy*Nerve and Brachial Plexus Surgery*Radiosurgery as well as Cerebrovascular Surgery","description":"Dr. Aditya Gupta is highly knowledgeable and skillful neurosurgeon presently practicing in the World's renowned Artemis Hospital Gurgaon. Cofounded the Institute of Neurosciences at Medanta Hospital. A graduate and topper from All India Institute of Medical Sciences (AIIMS) Dr. Aditya Gupta is an accomplished and experienced neurosurgeon. As a student resident and later Faculty at AIIMS he has won several awards such as the prestigious Sir Dorabji Tata Award. He was Associate Professor of Neurosurgery at AIIMS till late 2009.","goodReviews":79.2,"image":"assets/doctor5.png","isfavourite":true,"name":"Dr. Aditya Gupta","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"Neurosurgeon"},{" meet_id":" null"," tags":"Joint Replacement Surgery*Hip Arthroplasty*Knee Revisison surgery*Partial Knee Replaceement*Total Knee Replacement surgery*Trauma Management based on AO Principles","description":"Dr. Sanjeev Kumar Singh Marya is one of the Top Orthopedic Surgeons in India and carries over 35 years of extensive and rich experience in his field of specialization.He is a prominent orthopedic surgeon and is highly acknowledged for performing more than 15000 joint replacements surgeries with over 3500 simultaneous knee replacement and 3000 hip replacement surgeries in his illustrious career.","goodReviews":79.2,"image":"assets/doctor6.png","isfavourite":true,"name":"Dr. SKS Marya","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"Orthopaedic surgeon"},{" meet_id":" null"," tags":"Implant Dentistry*Immediate Implants*Management Of Implant Related Complications*Flap Surgeries*Root Coverage Procedures*Alveolar Ridge Augmentation","description":"An ambitious qualified Dentist with excellent organizational and interpersonal skills keen to render quality dental care in progressive dental practice. Dr. Amandeep Dhillon is a practicing Periodontist &amp;amp; Oral Implantologist with over 8 years of experience he graduated with bachelors degree in dental sciences with distinction/honor in the subject of Periodontology and was awarded certificate of merit in oral surgery conservative dentistry oral medicine and also holds a masters degree in Periodontology &amp;amp; Oral Implantology and holds a masters degree in Periodontology &amp;amp; Oral Implantology.","goodReviews":79.2,"image":"assets/doctor7.png","isfavourite":true,"name":"Dr. Amandeep Singh Dhillon","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"Dentist"},{" meet_id":" null"," tags":"Lymphoma &amp;amp; Leukemia*Head &amp;amp; Neck and Brain Tumors*Multiple Myeloma*Breast cancer treatment*Lung cancer treatment*Gastrointestinal and Gynecological tumors","description":"Dr. Nidhi Rawal has extensive experience in Pediatric and neonatal echo Transesophageal echocardiography and had been actively involved in the Cath lab interventions at PGI Chandigarh.Dr. Rawal has keen interest in research and has attended various national conferences and CMEs regularly. She has many publications (both national and international) to her credit.","goodReviews":79.2,"image":"assets/doctor10.png","isfavourite":true,"name":"Dr. Nidhi Rawal","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"Cardiologist"},{" meet_id":" null"," tags":"Voice disorders*Phonosurgery*Head and Neck Surgery*Lasers*Endoscopic sinus surgery*Sleep medicine sialology*Otology*Skull base surgery*Cochlear implants","description":"Dr. K. K. Handa is a renowned ENT specialist andOtorhinolaryngologist in India with over 27 years of rich clinical experience in this field. He is considered one of the best laryngologist voice surgeon and cochlear implant surgeon along with expertise in laser surgery endoscopic sinus surgery sleep medicine robotic surgery and head and neck surgery.","goodReviews":79.2,"image":"assets/doctor9.png","isfavourite":true,"name":"Dr. K K Handa","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"ENT Specialist"}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such a simple API request can helps us with a JSON string which can further consumed as per the needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let us understand the code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At first we import &lt;a href="'https://pypi.org/project/requests/'"&gt;requests&lt;/a&gt; which is used to send API requests.&lt;/li&gt;
&lt;li&gt;We define required variables to send a &lt;strong&gt;GET&lt;/strong&gt; request. replace &lt;strong&gt;YOUR-RAPIDAPI-KEY&lt;/strong&gt; with the key that you get on signing up for the free &lt;a href="'https://rapidapi.com/dev.vividgoat/api/csv2api1/'"&gt;API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Then we send a &lt;strong&gt;GET&lt;/strong&gt; request to the API.

&lt;ul&gt;
&lt;li&gt;One that we need to keep in mind is that &lt;strong&gt;url&lt;/strong&gt; parameter in the request URL requires a raw CSV file url unlike the common link to any CSV file in Github.&lt;/li&gt;
&lt;li&gt;Here's how we get it:&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jsh32MLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baa78cr5xj2d6jppweng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jsh32MLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baa78cr5xj2d6jppweng.png" alt="Raw image github" width="880" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally we print what requested for!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Querying&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Querying is very important in accessing and receiving data, without it might cause numerous troubles when the application is scaled!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;receiving huge amounts data can make the app slower.&lt;/li&gt;
&lt;li&gt;Might lead to unwanted expenses in cloud provider.&lt;/li&gt;
&lt;li&gt;parsing the JSON will get harder.&lt;/li&gt;
&lt;li&gt;Introducing changes into the data will consume more CPU.&lt;/li&gt;
&lt;li&gt;Makes it harder for the developer to work on the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily we have a support for querying in CSV2API&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's how we do it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;we pass a URL parameter called &lt;code&gt;query&lt;/code&gt;, for example in our sample dataset we have columns called &lt;strong&gt;name, type, rating, goodReviews, totalScore, satisfaction, isfavourite, image, description&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can query in such a way that we only get the data of a doctor with specific &lt;strong&gt;rating&lt;/strong&gt;or &lt;strong&gt;type&lt;/strong&gt;etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://csv2api1.p.rapidapi.com/api/v1"&lt;/span&gt;

&lt;span class="n"&gt;querystring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"https://raw.githubusercontent.com/dev-Roshan-lab/healthcare/main/data.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"name=='Dr. Sanjay Sachdeva' and rating==4.5"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'x-rapidapi-host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"csv2api1.p.rapidapi.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'x-rapidapi-key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"YOUR-RAPIDAPI-KEY"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet the query we passed to our database is &lt;br&gt;
&lt;code&gt;&amp;amp;query= name == 'Dr. Sanjay Sachdeva' and rating == 4.5&lt;/code&gt; where we are asking the API to return us the data where there name of the Doctor is Dr. Sanjay Sachdeva and his rating is 4.5. &lt;/p&gt;

&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"results":[{" meet_id":" null"," tags":"Throat problem*Ear problem*Ear Nose Throat Diseases*Microscopic Ear Surgery*Endoscopic Nose &amp;amp; Paranasal Sinus Surgery ( Fess)*Microscopic Laryngoscopic Surgery*Sleep Disorders*Hearing Aids*Sinus Surgery*Ear Infection","description":"Dr. Sanjay Sachdeva is one of the best ENT Surgeons in Delhi with specialization in Otorhinolaryngology. He has a rich experience of 32 years in the field of ENT and Head and Neck Surgery. He is recognized as an expertise in the area of Endoscopic Minimally Invasive Approach for Skull Base Surgery.","goodReviews":79.2,"image":"assets/doctor.png","isfavourite":true,"name":"Dr. Sanjay Sachdeva","rating":4.5,"satisfaction":85.2,"totalScore":93.2,"type":"Otolaryngologist"}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see the amount just drastically reduced and comprehending is now way easier than before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Precautions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String must be passed under single quotes&lt;/li&gt;
&lt;li&gt;Boolean must be Capitalized. eg: &lt;code&gt;False&lt;/code&gt; is correct &lt;code&gt;false&lt;/code&gt; is wrong similarly for True.&lt;/li&gt;
&lt;li&gt;Integers or Float should be under single quotes or double quotes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Test the API for further columns and for different data at &lt;a href="https://rapidapi.com/dev.vividgoat/api/csv2api1/"&gt;RapidAPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Got doubts or facing errors?&lt;br&gt;
Lemme see what you got, in the Discussions&lt;/p&gt;

</description>
      <category>programming</category>
      <category>backend</category>
      <category>api</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My 2021 Year in Review</title>
      <author>Nick Taylor</author>
      <pubDate>Fri, 31 Dec 2021 04:32:21 +0000</pubDate>
      <link>https://dev.to/nickytonline/my-2021-year-in-review-3n83</link>
      <guid>https://dev.to/nickytonline/my-2021-year-in-review-3n83</guid>
      <description>&lt;p&gt;Like last year, 2021 has been quite the year. Despite the pandemic, I stayed healthy and managed to have a pretty good year.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) | nicktaylor.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him) | nicktaylor.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/dabit3"&gt;@dabit3&lt;/a&gt; - gave 4 talks&lt;br&gt;- trained consistently (3 HIIT sessions/week)&lt;br&gt;- big impacts at work: got E2E testing in place, resuscitated Gitpod in time for Hacktoberfest for Forem, mentored/paired&lt;br&gt;- streamed + live-coded a tonne on Twitch with amazing guests + community members&lt;br&gt;- explored web3
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:24 PM - 24 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1474400617271599105" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1474400617271599105" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1474400617271599105" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This reply to Nader Dabit's Tweet sum up a lot of my year, but let's break it down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talks"&gt;
  &lt;/a&gt;
  Talks
&lt;/h2&gt;

&lt;p&gt;I gave four talks. Were these conference talks? Most were lunch and learns, but I also had a Hacktoberfest talk.&lt;/p&gt;

&lt;p&gt;The first talk of the year was for &lt;a href="https://the-collab-lab.codes/"&gt;The Collab Lab&lt;/a&gt;. I went over what Storybook is and how you can use it in your application. I even did a live coding session demonstrating its use in one of The Collab Lab cohort's projects.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ypsD-9qQzYg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the accompanying &lt;a href="https://www.iamdeveloper.com/storybook2021"&gt;slide deck&lt;/a&gt; and blog post for the talk.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nickytonline" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmhzwLSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zhsA-ZEm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9597/68d6245f-3152-4ed2-a245-d015fca4160b.jpeg" alt="nickytonline"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nickytonline/storybook-talk-live-coding-klp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Storybook Talk / Live Coding&lt;/h2&gt;
      &lt;h3&gt;Nick Taylor ・ Mar 16 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#storybook&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The Collab Lab was looking for more mentors recently, so I offered to mentor. I'm looking forward to meeting my cohort in Q2! Let's go!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) | nicktaylor.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him) | nicktaylor.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/segdeha"&gt;@segdeha&lt;/a&gt; &lt;a href="https://twitter.com/the_real_stacie"&gt;@the_real_stacie&lt;/a&gt; Just signed up to be a mentor. Let’s go!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:46 PM - 19 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1472684903460487168" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1472684903460487168" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1472684903460487168" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;My second talk of the year was a lunch and learn for my favourite community, &lt;a href="https://virtualcoffee.io"&gt;Virtual Coffee&lt;/a&gt;! It was all about debugging JavaScript. From console.log to debugger.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I9A0Pifn0Uw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the accompanying &lt;a href="https://iamdeveloper.com/debug2021"&gt;slide deck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up was another lunch and learn for Virtual Coffee, "Getting Started with Streaming on Twitch". A lot of folks were interested in streaming and learning in public, so I shared what I had learnt after one year of streaming on Twitch.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aDofyI6E2t4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the accompanying &lt;a href="https://iamdeveloper.com/stream2021"&gt;slide deck&lt;/a&gt; and blog post for the talk. Check out the blog post, as there was stuff I didn't have time to mention or forgot.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nickytonline" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmhzwLSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zhsA-ZEm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9597/68d6245f-3152-4ed2-a245-d015fca4160b.jpeg" alt="nickytonline"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nickytonline/getting-started-with-streaming-on-twitch-4im7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting Started with Streaming on Twitch&lt;/h2&gt;
      &lt;h3&gt;Nick Taylor ・ Jul 28 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#twitch&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#streaming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;My last talk of the year was for Hacktoberfest. The AppWrite team approached me to talk about open source, and I was happy to oblige.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cyJAz-c1OWs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=cyJAz-c1OWs&amp;amp;t=3653s"&gt;I appear at this point in the video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the accompanying &lt;a href="https://iamdeveloper.com/hacktoberfest2021"&gt;slide deck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're interested in other talks I've given, you can check out &lt;a href="https://www.iamdeveloper.com/pages/talks/"&gt;my talks page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workshops"&gt;
  &lt;/a&gt;
  Workshops
&lt;/h2&gt;

&lt;p&gt;I gave two workshops at Codeland 2021! The first one was about contributing to open source with my awesome co-worker Arit Amana.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PiXrl63d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E_6hMluVcAIcxxE.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ORqLhXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1445880121945169921/zBfcgvo8_normal.jpg" alt="Arit Amana profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Arit Amana
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/aritdeveloper"&gt;@aritdeveloper&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Super-excited for the Open Source Blastoff workshop &lt;a href="https://twitter.com/codelandconf"&gt;@codelandconf&lt;/a&gt; tomorrow!! 💃🏾&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/nickytonline"&gt;@nickytonline&lt;/a&gt; and I will demo how to start contributing to &lt;a href="https://twitter.com/forem"&gt;@forem&lt;/a&gt; using &lt;a href="https://twitter.com/gitpod"&gt;@gitpod&lt;/a&gt; 🎉&lt;br&gt;&lt;br&gt;Here’s a short video I made showing how to spin Forem up fast on GitPod;&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/UPrATc13M8"&gt;youtu.be/ThK9KcmWOas&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/WomenWhoCode"&gt;#WomenWhoCode&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:53 PM - 22 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1440766175353335814" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1440766175353335814" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1440766175353335814" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The second workshop was on accessibility with my other awesome co-worker Suzanne Aitchison.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jahGlgR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FAA1QsQVUAYmQe1.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) | nicktaylor.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him) | nicktaylor.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Super stoked to co-lead another &lt;a href="https://twitter.com/codelandconf"&gt;@codelandconf&lt;/a&gt; workshop tomorrow, "Building the web for all: A primer on accessibility", with &lt;a href="https://twitter.com/s_aitchison"&gt;@s_aitchison&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Let's go! &lt;a href="https://twitter.com/hashtag/CodeLand2021"&gt;#CodeLand2021&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:18 AM - 24 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1441210447982743554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1441210447982743554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1441210447982743554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Folks paid for these workshops, so there is nothing I can share aside from some kind words from Jenny, one of the workshop attendees.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fmp2nzW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1429443368669650947/WYUJ8Tku_normal.jpg" alt="Jenny Nickell profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jenny Nickell
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jenny_nickell
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Super thankful for the opportunity to join &lt;a href="https://twitter.com/codelandconf"&gt;@codelandconf&lt;/a&gt; workshop Open Source Blastoff. Big thanks to &lt;a href="https://twitter.com/aritdeveloper"&gt;@aritdeveloper&lt;/a&gt; and &lt;a href="https://twitter.com/nickytonline"&gt;@nickytonline&lt;/a&gt; for a fun and informative workshop!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:25 PM - 23 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1441121683100684290" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1441121683100684290" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1441121683100684290" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#making-an-impact-at-work"&gt;
  &lt;/a&gt;
  Making an Impact at Work
&lt;/h2&gt;

&lt;p&gt;It's funny how this section of my year in review is short, but nonetheless, I made some big impacts at work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I got end-to-end (E2E) testing in place&lt;/li&gt;
&lt;li&gt;Revived Gitpod in time for Hacktoberfest for Forem&lt;/li&gt;
&lt;li&gt;Mentored and paired a tonne&lt;/li&gt;
&lt;li&gt;Shipped features&lt;/li&gt;
&lt;li&gt;Worked a lot with the community (we're open source)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#streaming-and-live-coding"&gt;
  &lt;/a&gt;
  Streaming and Live Coding
&lt;/h2&gt;

&lt;p&gt;This year, I streamed a bunch with my co-worker Christina on the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;DEV Twitch stream&lt;/a&gt;, but I also got back into streaming more on &lt;a href="https://livecoding.ca"&gt;my channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're interested in checking out the back catalogue of DEV Twitch streams, check out the &lt;a href="https://www.youtube.com/ThePracticalDevTeam"&gt;DEV YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also have &lt;a href="https://youtube.iamdeveloper.com"&gt;my own YouTube channel&lt;/a&gt; where some of my streams persist.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explored-web3"&gt;
  &lt;/a&gt;
  Explored Web3
&lt;/h2&gt;

&lt;p&gt;I won't link to all the projects I've done in this space (you can check out &lt;a href="https://github.com/nickytonline"&gt;my GitHub profile&lt;/a&gt;, but I will link to one project since it's modestly popular. I created a web3 starter project template.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/web3-starter"&gt;
        web3-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An opinionated web3 starter for building dApps
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Web3 Starter&lt;/h1&gt;
&lt;p&gt;The goal of this project is to give you an opinionated boilerplate to start a
web3 project.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to the project, first read our
&lt;a href="https://github.com/nickytonline/web3-starter./CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. Take a look at our
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues"&gt;existing issues&lt;/a&gt;
or if you come across an issue
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues/new/choose"&gt;create an issue&lt;/a&gt;
For feature requests,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/discussions"&gt;start a discussion&lt;/a&gt;
first.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Local Development)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the
result.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Gitpod)&lt;/h2&gt;
&lt;p&gt;The project can be run in Gitpod. Navigate to
&lt;a href="https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node&lt;/a&gt;. If you
wish to load it in Gitpod as an external contributor, you will need to fork the
project first, then open the fork in Gitpod, e.g.
&lt;a href="https://gitpod.io/#https://github.com/some_user_that_forked_the_repository/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/some_user_that_forked_the_repository/hello-edge-and-node&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gitpod will take a minute or two to load.&lt;/li&gt;
&lt;li&gt;If this is the first time…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/web3-starter"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you are interested in web3, definitely check out &lt;a href="https://buildspace.so"&gt;Buildspace&lt;/a&gt; and consider joining a DAO like &lt;a href="https://www.developerdao.com/"&gt;Developer DAO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm still exploring this controversial space, but all I can say for now is &lt;br&gt;
it's been fun exploring the tech and ideas.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  Podcasts
&lt;/h2&gt;

&lt;p&gt;2021 was the year of podcasts for me. Before 2021, I had never been a guest on a podcast.&lt;/p&gt;

&lt;p&gt;Back to my favourite community, Virtual Coffee, &lt;a href="https://virtualcoffee.io/podcast/0101-nickyt/"&gt;I had the privilege of being the podcast's first guest&lt;/a&gt;. It was awesome chilling with my friends Bekah and Dan.&lt;/p&gt;

&lt;p&gt;Later on in the year, I got to hang with my co-worker Ben Halpern, Jonathan Carter, principal program manager at Microsoft, and Cassidy Williams, director of developer experience at Netlify.&lt;/p&gt;

&lt;p&gt;We discussed Visual Studio Code and all things related to it.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s6-e7-vs-code-and-the-extended-vs-code-universe"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E7 - VS Code and the Extended VS Code Universe&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e7-vs-code-and-the-extended-vs-code-universe" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e7-vs-code-and-the-extended-vs-code-universe" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e7-vs-code-and-the-extended-vs-code-universe" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e7-vs-code-and-the-extended-vs-code-universe" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e7-vs-code-and-the-extended-vs-code-universe"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s6-e7-vs-code-and-the-extended-vs-code-universe"&gt;
      &lt;img id="episode-profile-image" alt="S6:E7 - VS Code and the Extended VS Code Universe" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;In the fall, &lt;a href="https://candost.blog/"&gt;Candost Dagdeviren&lt;/a&gt; reached out to me on &lt;a href="https://timeline.iamdeveloper.com"&gt;Polywork&lt;/a&gt; about being a guest on their podcast. It was a great discussion. Check out episode #25,  &lt;a href="https://candost.blog/podcast/sw-25-live-pair-programming-open-source-and-building-communities-with-nick-taylor/"&gt;Live Pair Programming, Open Source, and Building Communities with Nick Taylor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And to round off the year of podcasts, I got to hang with my co-workers Ben Halpern and Arit Amana, along with Michael Boroff, mental health program manager at Crossover Health to discuss imposter syndrome.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E7 - We Have Tools To Help You With Your Imposter Syndrome&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome"&gt;
      &lt;img id="episode-profile-image" alt="S7:E7 - We Have Tools To Help You With Your Imposter Syndrome" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#working-out"&gt;
  &lt;/a&gt;
  Working Out 💪🏻
&lt;/h2&gt;

&lt;p&gt;Since gyms are closed, I built a garage gym. It's not huge, but it lets me put in the work.&lt;/p&gt;

&lt;p&gt;I trained consistently this year, typically 3 one hour HIIT sessions/week. I say typically because  I was on vacation (pandemic vacation) for parts of the year, and a few of the weeks might have been one or two sessions only due to appointments or some anomaly in my regular schedule.&lt;/p&gt;

&lt;p&gt;Not only did this keep me sane, it just all around made me feel better. Since I train at 7 am, it's also a great way to start the day feeling energized and having a clear head.&lt;/p&gt;

&lt;p&gt;I'm still not where I want to be, but it feels great working out consistently again as year one of the pandemic derailed my training. Also, after performing thousands of lunges this year and all kinds of single limb training, my body is snowboard-ready. 🏂🏻&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fun-stuff"&gt;
  &lt;/a&gt;
  Fun Stuff
&lt;/h2&gt;

&lt;p&gt;I rebuilt my backyard rink. It's a little wider this year and twice as tall. I ran into issues mid-winter last year where the ice ended up being at the same height as the walls. I had to use scraps of wood; I had to make it taller along with snow and ice. It worked but making it twice as tall this year will avoid all that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it started&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9y6R670o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEpMzEhWYAUV-q9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) | nicktaylor.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him) | nicktaylor.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Start with an empty canvas 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:29 PM - 20 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1462065499634913282" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1462065499634913282" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1462065499634913282" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;How it's going&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqtX4I9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHvwkiEXwAIcmzF.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) | nicktaylor.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him) | nicktaylor.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Zamboni nights &lt;a href="https://twitter.com/hashtag/backyardrinks"&gt;#backyardrinks&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:50 AM - 29 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1476037817553895427" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1476037817553895427" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1476037817553895427" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Stay safe friends and see you in 2022!&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Winkler&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/2021?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>yearinreview</category>
    </item>
    <item>
      <title>How to query the Bitcoin Blockchain with C# in .Net</title>
      <author>JB</author>
      <pubDate>Fri, 31 Dec 2021 04:15:43 +0000</pubDate>
      <link>https://dev.to/jtraceur/how-to-query-the-bitcoin-blockchain-with-c-in-net-3ba7</link>
      <guid>https://dev.to/jtraceur/how-to-query-the-bitcoin-blockchain-with-c-in-net-3ba7</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;Please check out my &lt;a href="https://medium.com/@jtraceur/how-to-query-bitcoins-blockchain-with-net-c69c4345e29e"&gt;medium article&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>bitcoin</category>
      <category>cryptocurrency</category>
      <category>csharp</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Image Slider with Vanila JS</title>
      <author>Jatin Sharma</author>
      <pubDate>Fri, 31 Dec 2021 04:01:18 +0000</pubDate>
      <link>https://dev.to/j471n/image-slider-with-vanila-js-22bf</link>
      <guid>https://dev.to/j471n/image-slider-with-vanila-js-22bf</guid>
      <description>&lt;p&gt;In this article, we are going to make an Image Slider also known as carousel with a clean UI. It can slide the images with awesome animation and it will track the current image which you can see via dots on the bottom. First, Let's see what are we building.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AaGxPnUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0VPV8kU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AaGxPnUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0VPV8kU.gif" alt="preview" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-slider"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Slider Container with images...  --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slides"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!--  Previous Button  --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-slide prev"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://imgur.com/SUyRJqI.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"prevBtn"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!--  Next Button  --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-slide next"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;" https://imgur.com/M6rDsRR.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"nextBtn"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!--  Container for dots  --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-dots"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will have an outer &lt;code&gt;div&lt;/code&gt; with class &lt;code&gt;.container-slider&lt;/code&gt;. It will have four separate children.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.slides&lt;/code&gt;: It will contain images, but we have not added them in the HTML, we will add them using JS.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.btn-slide&lt;/code&gt;: In the parent container (&lt;code&gt;.container-slider&lt;/code&gt;) there will be two buttons, one for the next image (&lt;code&gt;.next&lt;/code&gt;) and the other for the previous image (&lt;code&gt;.prev&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.container-dots&lt;/code&gt;: It is the container for &lt;code&gt;.dot&lt;/code&gt; which we have not added yet. It will also be done by JS same as the images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I guess now you have an overview of what are we doing. Now let's get into the CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;azure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Main Wrapper Container */&lt;/span&gt;
&lt;span class="nc"&gt;.container-slider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Slider Container which contains images */&lt;/span&gt;
&lt;span class="nc"&gt;.slides&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Default Image Properties */&lt;/span&gt;
&lt;span class="nc"&gt;.slides&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;object-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Active Image or Current image to display */&lt;/span&gt;
&lt;span class="nc"&gt;.slides&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-active&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Image Slider Next And Previous Buttons */&lt;/span&gt;
&lt;span class="nc"&gt;.btn-slide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.287&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-slide&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Show Buttons when user hover on the slider Container */&lt;/span&gt;
&lt;span class="nc"&gt;.container-slider&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.btn-slide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Previous and Next Button Position Absolute */&lt;/span&gt;
&lt;span class="nc"&gt;.prev&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-60%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.prev&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Bottom Dots Container  */&lt;/span&gt;
&lt;span class="nc"&gt;.container-dots&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Sigle Dot style */&lt;/span&gt;
&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;background-color&lt;/span&gt; &lt;span class="m"&gt;500ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Change the color of bg when user hover on it. */&lt;/span&gt;
&lt;span class="nc"&gt;.dot&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Current or active dot */&lt;/span&gt;
&lt;span class="nc"&gt;.dot&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"true"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything in the CSS is self-explanatory so I am not going to talk about that. If you have any queries about CSS then comment down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;

&lt;p&gt;This is where the fun begins. Let's see, from scratch.First, we need to import the two containers which will be &lt;code&gt;. Slides&lt;/code&gt; and the &lt;code&gt;. Container-dots&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.slides&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerDots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container-dots&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need images to add to the &lt;code&gt;.slides&lt;/code&gt; container. And we also need a global counter or global index to track which image is displaying right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Global Index to track Image&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Images container&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/ohx0bd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/gggxy8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/z2a0fy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/nsefjh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/dssu2a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have images, now let's add them to the &lt;code&gt;.slides&lt;/code&gt; and also we need to add &lt;code&gt;.dot&lt;/code&gt; to the &lt;code&gt;.container-dots&lt;/code&gt;. Total images and total dots should be the same e.g. there are five images, then there should be five dots. So let's see how we are going to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Adding images and dots to the Respective Container&lt;/span&gt;
&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Creating Image Element and adding src of that image&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;imgTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;imgTag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Creating Dot (div) Element adding 'dot' class to it&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//  Appending the image and dots to respective container&lt;/span&gt;
  &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imgTag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will do the trick ad it will add them to their respective container. Now we need buttons to add to the slider. Let's do it also. We need two buttons &lt;code&gt;.prev&lt;/code&gt; and &lt;code&gt;.next&lt;/code&gt; we have already added those into the HTML now we just need to make them work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next Slide Button&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Slide Next Button Click Event&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// it will update the slideIndex on the basis of the images.length as it gets greater than images.length, this will initialize to the 1&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nextBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextSlide&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Previous Slide Button&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Slide Previous Button Click Event&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// It will check if the slideIndex is less equal to 1 then change it to the images.legnth, it will enable infinite scrolling&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.prev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;prevBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prevSlide&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now these buttons will allow you to scroll infinite according to the &lt;code&gt;slideIndex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But after implementing it you will see the image is not displaying it is because we are not updating the image according to the &lt;code&gt;slideIndex&lt;/code&gt; right now, let's implement that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Update Image And Slide Dot according to the [data-active]&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ...........Updating Image.............. */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-active]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;activeSlide&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;activeSlide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* ...........Updating Dots.............. */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeDot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-active]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;activeDot&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;activeDot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are getting the &lt;code&gt;activeSlide&lt;/code&gt; and &lt;code&gt;activeDot&lt;/code&gt;. Which will have a &lt;code&gt;[data-active]&lt;/code&gt; attribute, then we are setting the &lt;code&gt;.slides&lt;/code&gt; and &lt;code&gt;.container-dots&lt;/code&gt; children to active (data-active="true)" based on the &lt;code&gt;slideIndex&lt;/code&gt; then if there is an &lt;code&gt;activeSlide&lt;/code&gt; which we have queried earlier then delete it (which was the previously active slide and dot). After this, we will only have one slide and dot which is currently active.&lt;/p&gt;

&lt;p&gt;Now we need to call this function inside the &lt;code&gt;nextSlide&lt;/code&gt; and &lt;code&gt;prevSlide&lt;/code&gt; function in the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* .... */&lt;/span&gt;
  &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* .... */&lt;/span&gt;
  &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to call the &lt;code&gt;updateImageAndDot&lt;/code&gt; in the global scope. This will allow it to show the image and dot as the page loads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Show the Image as the page loads;&lt;/span&gt;
&lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to implement one more feature which is when the user press the dots it should take the user to the respective images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jjywf4FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/QmikK4O.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jjywf4FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/QmikK4O.gif" alt="preview-2" width="880" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not that hard we just need to make a function in our case called &lt;code&gt;moveDot&lt;/code&gt; and just add the Event Listener to every dot. Let's see it in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// It helps to move the dot, it take "index" as parameter and update the slideIndex&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveDot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// to update the image and dot&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Adding EventListener to All dots so that when user click on it trigger move dots;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;moveDot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have covered all the aspects of this now let's see the full Javascript file or code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.slides&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerDots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container-dots&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Images container&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/ohx0bd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/gggxy8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/z2a0fy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/nsefjh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rb.gy/dssu2a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Adding images and dots to the Respective Container&lt;/span&gt;
&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Creating Image Element and adding src of that image&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;imgTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;imgTag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Creating Dot (div) Element adding 'dot' class to it&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//  Appending the image and dots to respective container&lt;/span&gt;
  &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imgTag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Adding EventListener to All dots so that when user click on it trigger move dots;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;moveDot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// It helps to move the dot, it take "index" as parameter and update the slideIndex&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveDot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Update Image And Slide Dot according to the [data-active]&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ...........Updating Image.............. */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-active]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;activeSlide&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;activeSlide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* ...........Updating Dots.............. */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeDot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-active]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;containerDots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;activeDot&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;activeDot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Slide Next Button Click Event&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// it will update the slideIndex on the basis of the images.length as it gets greater than images.length, this will initialize to the 1&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nextBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextSlide&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Slide Previous Button Click Event&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevSlide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// It will check if the slideIndex is less equal to 1 then change it to the images.legnth, it will enable infinite scrolling&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;slideIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.prev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;prevBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prevSlide&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Show the Image as the Page Loads;&lt;/span&gt;
&lt;span class="nx"&gt;updateImageAndDot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/BawpOLB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/BawpOLB"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwlJRhmm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://svgshare.com/i/coN.svg" alt="codepen" width="184" height="40"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;I hope you enjoyed the article, if yes then don't forget to press ❤️. You can also bookmark it for later use. It was fun to make this slider and If you have any queries or suggestions don't hesitate to drop them. See you. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can extend your support by buying me a Coffee.😊👇&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUX4imFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2QWo3cm.png" alt="buymecoffee" width="374" height="88"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#you-might-be-interested-in-"&gt;
  &lt;/a&gt;
  You might be interested in -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/why-i-ditched-chrome-for-edge-51ih"&gt;Why I ditched ​chrome for Edge?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/typing-effect-with-js-34b8"&gt;Typing Effect with typed.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/creative-hover-menu-with-css-513c"&gt;Creative Hover Menu with CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a Prisma Schema</title>
      <author>Sabin Adams 🧑🏻‍💻</author>
      <pubDate>Fri, 31 Dec 2021 03:00:41 +0000</pubDate>
      <link>https://dev.to/sabinthedev/building-a-prisma-schema-61b</link>
      <guid>https://dev.to/sabinthedev/building-a-prisma-schema-61b</guid>
      <description>&lt;p&gt;Welcome back to the series Playing with Prisma!&lt;/p&gt;

&lt;p&gt;In this article we're going to take a look at how to build out a Prisma schema. To do this, rather than just regurgitating the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema"&gt;docs&lt;/a&gt; &lt;em&gt;(which are fantastic by the way, kudos Prisma)&lt;/em&gt;, we're going to come up with a little project and build out a schema to fit our needs!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While we will cover a lot of the cool options available to us when setting up a schema, I do recommend reading the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema"&gt;docs&lt;/a&gt; to see everything Prisma has to offer.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project
&lt;/h2&gt;

&lt;p&gt;The schema we'll be scaffolding out will be for a bookstore's website with a checkout system. &lt;/p&gt;

&lt;p&gt;We'll want to keep track of books, authors, subjects, etc... for the searching functionality of the website. Also, we'll need a way to keep track of people and check-in/out times. &lt;/p&gt;

&lt;p&gt;Let's assume our database is a Postgres database and we are starting fresh. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All the things we cover will apply to the other available database providers as well, unless stated otherwise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get an idea of what we're doing, here is a general picture of what our database should look like in the end:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6c83-x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640849256341/ELGZkfhBz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6c83-x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640849256341/ELGZkfhBz.png" alt="Blank diagram - Page 1 (1).png" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get to it!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setting-up-prisma"&gt;
  &lt;/a&gt;
  Setting up Prisma
&lt;/h2&gt;

&lt;p&gt;To start off, let's go ahead and create a super simple project to hold our Prisma client we will end up generating. &lt;/p&gt;

&lt;p&gt;Wherever you'd like, go ahead and create a project folder. Initialize &lt;code&gt;npm&lt;/code&gt; inside of this project and install the &lt;code&gt;prisma&lt;/code&gt; package so we can put it to use!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;bookstore-project
&lt;span class="nb"&gt;cd &lt;/span&gt;bookstore-project
npm init
npm i &lt;span class="nt"&gt;--save&lt;/span&gt; prisma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's initialize prisma, which will scaffold out the initial files we'll need to get going. We'll also take a shortcut and let prisma know we'll be connecting to a &lt;code&gt;postgres&lt;/code&gt; database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;prisma init &lt;span class="nt"&gt;--datasource-provider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that does its thing, you should be left with a basic project that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UITkP9Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640849900028/CBn30R2ny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UITkP9Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640849900028/CBn30R2ny.png" alt="Screen Shot 2021-12-29 at 11.38.16 PM.png" width="460" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're ready to start configuring and putting our schema together! Go ahead and pop open that &lt;code&gt;schema.prisma&lt;/code&gt; file and we'll get started!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#optional-local-postgres-setup-with-docker"&gt;
  &lt;/a&gt;
  &lt;em&gt;(Optional)&lt;/em&gt; Local Postgres Setup With Docker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vOOBi5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640918430376/iBbjN2P-i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vOOBi5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640918430376/iBbjN2P-i.png" alt="Blank diagram - Page 1 (16).png" width="503" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to actually generate and build our client, prisma needs to know of a server to connect to. Below is how we can set one up locally in Docker. We won't go into too much detail here, just how to get it going.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-docker"&gt;
  &lt;/a&gt;
  Installing Docker
&lt;/h3&gt;

&lt;p&gt;You can download and install docker &lt;a href="https://docs.docker.com/get-docker/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-raw-dockercompose-endraw-file"&gt;
  &lt;/a&gt;
  Add &lt;code&gt;docker-compose&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;In your project's root, create a file called &lt;code&gt;docker-compose.yml&lt;/code&gt;. Paste the following into the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.1'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;example&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;

  &lt;span class="na"&gt;adminer&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;adminer&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8080:8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-env-file"&gt;
  &lt;/a&gt;
  Update .env file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL="postgresql://postgres:example@localhost:5432/bookstore"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#spin-up-the-database-and-admin-panel"&gt;
  &lt;/a&gt;
  Spin up the database and admin panel
&lt;/h3&gt;

&lt;p&gt;Now that those are configured, run the following command to bring up the postgres server and an admin panel &lt;em&gt;(adminer)&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: We added the -d flag at the end to run this in detached mode, freeing up our terminal for more commands&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#test-it-out"&gt;
  &lt;/a&gt;
  Test It Out
&lt;/h3&gt;

&lt;p&gt;Once that finishes pulling the docker images and setting up the servers, head over to &lt;a href="http://localhost:8080"&gt;localhost:8080&lt;/a&gt; to make sure the admin panel comes up.&lt;/p&gt;

&lt;p&gt;You can log in with the credentials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;username: &lt;code&gt;postgres&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;password: &lt;code&gt;example&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;database: &lt;code&gt;postgres&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-fZRPos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640850732337/7i-Q3dExI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-fZRPos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640850732337/7i-Q3dExI.png" alt="Screen Shot 2021-12-29 at 11.52.06 PM.png" width="528" height="312"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prisma-schema"&gt;
  &lt;/a&gt;
  Prisma Schema
&lt;/h2&gt;

&lt;p&gt;The prisma schema is the main configuration file for prisma. It's where prisma learns how to connect to our database, how to generate the prisma client (or any other assets via custom generators), and how to map our data from the database to our application. &lt;/p&gt;

&lt;p&gt;A Prisma Schema is built up of three major pieces (or blocks):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datasources&lt;/li&gt;
&lt;li&gt;Generators&lt;/li&gt;
&lt;li&gt;Models&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each piece plays a crucial role in the configuration and generation of our Prisma Client (or other generated assets depending on the generator we configure).&lt;/p&gt;

&lt;p&gt;A block is composed of a block type, a name, and the fields and options for that block.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cCA1k2x5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640338608143/5QsK__XK9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cCA1k2x5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640338608143/5QsK__XK9.png" alt="Datasource (2).png" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#datasource"&gt;
  &lt;/a&gt;
  Datasource
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8Hq2iGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917190193/jCEgDNTn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8Hq2iGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917190193/jCEgDNTn4.png" alt="Blank diagram - Page 1 (5).png" width="503" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing we'll want to configure is our datasource block. &lt;/p&gt;

&lt;p&gt;This is where we tell Prisma how to connect to our database and what kind of database we are connecting to. Its configuration is fairly straightforward and doesn't have a whole lot going on in it so we won't have to go too deep to understand what it's doing.&lt;/p&gt;

&lt;p&gt;Each Prisma schema &lt;strong&gt;must&lt;/strong&gt; have &lt;strong&gt;exactly one&lt;/strong&gt; datasource block configured. No more and no less, as multiple datasources are not supported. &lt;/p&gt;

&lt;p&gt;To define a &lt;code&gt;datasource&lt;/code&gt; block, we can create a schema block with the type &lt;code&gt;datasource&lt;/code&gt;, some name (typically &lt;code&gt;db&lt;/code&gt; by convention), and its options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Database&lt;/th&gt;
&lt;th&gt;Provider String&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Postgres&lt;/td&gt;
&lt;td&gt;postgresql&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MySQL&lt;/td&gt;
&lt;td&gt;mysql&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SQLite&lt;/td&gt;
&lt;td&gt;sqlite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MSSQL&lt;/td&gt;
&lt;td&gt;sqlserver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MongoDB&lt;/td&gt;
&lt;td&gt;mongodb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As you may have guessed, here we are telling Prisma we want to use a postgres database. We are also telling it to look in &lt;code&gt;process.env&lt;/code&gt; for a variable called &lt;code&gt;DATABASE_URL&lt;/code&gt; to get the connection string.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;env()&lt;/code&gt; function allows us to access environment variables via &lt;a href="https://github.com/motdotla/dotenv-expand"&gt;&lt;code&gt;dotenv-expand&lt;/code&gt;&lt;/a&gt;. It can only be used in two places: the datasource &lt;code&gt;url&lt;/code&gt; field, and the generator &lt;code&gt;binaryTargets&lt;/code&gt; field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could have also passed a string to the &lt;code&gt;url&lt;/code&gt; option instead of using the &lt;code&gt;env()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;There are other options available to the datasource block described &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#datasource"&gt;here&lt;/a&gt;. But for now we'll keep it to what we need.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#generator"&gt;
  &lt;/a&gt;
  Generator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ-k7Ang--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917466962/iystv7Y18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ-k7Ang--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917466962/iystv7Y18.png" alt="Blank diagram - Page 1 (7).png" width="503" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next piece we'll add is a generator block. &lt;/p&gt;

&lt;p&gt;A generator allows you to configure what is generated when you run the command &lt;code&gt;prisma generate&lt;/code&gt;. You can configure multiple generators per schema, however by default Prisma sets up a single generator and specifies &lt;code&gt;prisma-client-js&lt;/code&gt; as the provider, which builds the &lt;code&gt;Prisma Client&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;generator client {
  provider = "prisma-client-js"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note the generator is named &lt;code&gt;client&lt;/code&gt; here, but that name could be anything &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a few different options available to configure things like where to output the generated assets, but for now we'll stick to the default settings.&lt;/p&gt;

&lt;p&gt;Feel free to check out the rest of the config options &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#generator"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our file in total should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all the config we need to define our data connection and configure our generated assets. Now we will move on to the good stuff, modeling out our data!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#models"&gt;
  &lt;/a&gt;
  Models
&lt;/h3&gt;

&lt;p&gt;The model blocks are where we actually tell Prisma what our data looks like and how it should be handled in the Prisma Client.&lt;/p&gt;

&lt;p&gt;On a model you can define fields, table/field name mappings, attributes describing the data, and relations to relate models to each other. &lt;/p&gt;

&lt;p&gt;A field is made up of a field name, a data type, and any attributes to describe that field of data.&lt;/p&gt;

&lt;p&gt;There are tons of different options for our models and fields, and we'll have to make use of a lot of those to get our bookstore schema going.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Refer to the docs for a full list of &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#model-field-scalar-types"&gt;types&lt;/a&gt; and &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#attributes"&gt;attributes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#person-model"&gt;
  &lt;/a&gt;
  Person model
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0sh3eXYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917738335/dmnyKTX3L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0sh3eXYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917738335/dmnyKTX3L.png" alt="Blank diagram - Page 1 (8).png" width="880" height="463"&gt;&lt;/a&gt;&lt;br&gt;
Let's start off by building out the base of our &lt;code&gt;Person&lt;/code&gt; model, which will hold the people who can check in and out books.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#-raw-id-endraw-raw-default-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;code&gt;@id&lt;/code&gt;, &lt;code&gt;@default&lt;/code&gt;&lt;/em&gt;
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Person {
  id        Int       @id @default(autoincrement())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we are using two "attributes" that Prisma Syntax Language provides to describe our &lt;code&gt;id&lt;/code&gt; field. First we are letting prisma know that field is an &lt;code&gt;@id&lt;/code&gt;, which signifies this field is the unique identifier for data in this table. &lt;strong&gt;Each&lt;/strong&gt; model needs to have a unique identifier.&lt;/p&gt;

&lt;p&gt;We are also using the &lt;code&gt;@default&lt;/code&gt; attribute to specify that the default value for that field should be a number that increments for each row with the &lt;code&gt;autoincrement()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We're going to need more than that to describe our &lt;code&gt;Person&lt;/code&gt; though. Let's add some more fields:&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#-raw-unique-endraw-raw-updatedat-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;code&gt;@unique&lt;/code&gt;, &lt;code&gt;@updatedAt&lt;/code&gt;&lt;/em&gt;
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Person {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  age       Int
  updatedAt DateTime  @updatedAt
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's a bit more like it! Now we've got a pretty good model describing our Person.&lt;/p&gt;

&lt;p&gt;We've made use of the &lt;code&gt;@unique&lt;/code&gt; attribute here to let prisma know the email field should be unique in that table. &lt;em&gt;No persons should have the same email!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We also created a column with the &lt;code&gt;@updatedAt&lt;/code&gt; attribute, which will cause that column to automatically update with a current timestamp whenever the row of data updates. Fields using this attribute &lt;strong&gt;MUST&lt;/strong&gt; be of type DateTime.&lt;/p&gt;

&lt;p&gt;For now that's all we'll need for our &lt;code&gt;Person&lt;/code&gt; model. Let's move on to the &lt;code&gt;Book&lt;/code&gt; model.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#book-model"&gt;
  &lt;/a&gt;
  Book model
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tB33DZcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917791812/XW8qo239G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tB33DZcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917791812/XW8qo239G.png" alt="Blank diagram - Page 1 (9).png" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just to get things started, lets set up some of the basic fields we know we'll need for our Books:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Book {
  title         String
  productId     String
  publishedDate DateTime
  description   String 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These fields are all super simple, but we don't have a unique identifier yet! &lt;br&gt;
Lets create a compound identifier with the book's &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;productId&lt;/code&gt; fields that will be used as the Primary Key for this table.&lt;/p&gt;

&lt;p&gt;Also let's limit the &lt;code&gt;description&lt;/code&gt; field to 150 chars by reaching in to Postgres's native types.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#-raw-db-endraw-native-types-raw-id-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;code&gt;@db&lt;/code&gt; native types, &lt;code&gt;@@id&lt;/code&gt;&lt;/em&gt;
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Book {
  title         String
  productId     String
  publishedDate DateTime
  description   String    @db.VarChar(150)

  @@id([title, productId], name: "titleProduct")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Prisma allows us to use the &lt;code&gt;@db&lt;/code&gt; attribute to specify some of the native types available to whichever database provider we are using.&lt;/p&gt;

&lt;p&gt;The compound ID we created specifies that this table's rows should have unique combinations of &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;productId&lt;/code&gt;. We've also passed it an optional &lt;code&gt;name&lt;/code&gt; parameter to name the compound ID. Otherwise it would be generated as just &lt;code&gt;title_productId&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The last thing I'd like to add to our book is a &lt;code&gt;Subject&lt;/code&gt;.  To do this we'll set up an &lt;code&gt;enum&lt;/code&gt;, which is a feature available only to &lt;code&gt;Postgres&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt;, and &lt;code&gt;MongoDB&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#enum"&gt;
  &lt;/a&gt;
  &lt;em&gt;enum&lt;/em&gt;
&lt;/h5&gt;

&lt;p&gt;An enum describes a set of possible values. For a full description of how to use enums, check out prisma's &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#enum"&gt;docs&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum Subject {
  GENERAL
  HORROR
  MYSTERY
  ROMANCE
  EDUCATIONAL
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we set up an enum of Subjects. To use this, we can just create a field on our model and give it the type of our enum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Book {
  title         String
  productId     String
  publishedDate DateTime
  description   String    @db.VarChar(150)
  subject       Subject  @default(GENERAL)

  @@id([title, productId], name: "titleProduct")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The subject field of our book model will now hold a value that is in the enum &lt;code&gt;Subject&lt;/code&gt;. When creating a record in this table, if no value is provided for &lt;code&gt;subject&lt;/code&gt;, it will default to &lt;code&gt;GENERAL&lt;/code&gt; because we specified it in the &lt;code&gt;@default&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Great! Now that we have a book, we should probably set up an &lt;code&gt;Author&lt;/code&gt; model and relate it to the &lt;code&gt;Book&lt;/code&gt; model.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#author-model"&gt;
  &lt;/a&gt;
  Author model
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0mV39YP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917861970/Nxk3nfpwd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0mV39YP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917861970/Nxk3nfpwd.png" alt="Blank diagram - Page 1 (10).png" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Author model will hold our author's details and also relate to a Book so that we can join it to the Book table when querying for details.&lt;/p&gt;

&lt;p&gt;First we'll set up the basic fields our Author will need.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#optional-fields"&gt;
  &lt;/a&gt;
  &lt;em&gt;Optional Fields&lt;/em&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Author {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  birthTown String?
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice a &lt;code&gt;?&lt;/code&gt; next to the String type on the &lt;code&gt;birthTown&lt;/code&gt; field. This is a &lt;em&gt;type modifier&lt;/em&gt; that signifies the field is optional. &lt;/p&gt;

&lt;p&gt;We know that each Author could potentially have many books, so let's signify this in the model.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#list-modifier"&gt;
  &lt;/a&gt;
  &lt;em&gt;List modifier&lt;/em&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Author {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  birthTown String?
  Books     Book[]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets us know that our &lt;code&gt;Author&lt;/code&gt; will have a potential list of &lt;code&gt;Books&lt;/code&gt; that are related to it. The field name can be anything, I chose &lt;code&gt;Books&lt;/code&gt; just to make it clear. And the type, as you'll notice, is &lt;code&gt;Book&lt;/code&gt;, which corresponds to our &lt;code&gt;Book&lt;/code&gt; model. The &lt;code&gt;[]&lt;/code&gt; signifies that it will be an array of books.&lt;/p&gt;

&lt;p&gt;This is great but how does prisma know how to relate an Author to a Book? This schema will be invalid unless we set up a relation mapping in the &lt;code&gt;Book&lt;/code&gt; model. So let's go back to our &lt;code&gt;Book&lt;/code&gt; model and make some adjustments&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-relation-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;code&gt;@relation&lt;/code&gt;&lt;/em&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Book {
  authorId      Int
  title         String
  productId     String
  publishedDate DateTime
  description   String    @db.VarChar(150)
  subject       Subjects  @default(GENERAL)
  Author        Author    @relation(references: [id], fields: [authorId])

  @@id([title, productId], name: "titleProduct")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's going on here? I've gone ahead and added an &lt;code&gt;authorId&lt;/code&gt; field to the model that will be used to map to our &lt;code&gt;Author&lt;/code&gt; model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kExTGmZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917896677/RaLM87oSU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kExTGmZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640917896677/RaLM87oSU.png" alt="Blank diagram - Page 1 (11).png" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the more important piece is the new &lt;code&gt;Author&lt;/code&gt; field. This field (which could be named anything, I chose &lt;code&gt;Author&lt;/code&gt; for clarity) is of the type &lt;code&gt;Author&lt;/code&gt;. This type corresponds to our &lt;code&gt;Author&lt;/code&gt; model. &lt;/p&gt;

&lt;p&gt;On that field we have defined a relation that will be shared between &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;. &lt;br&gt;
The &lt;code&gt;references&lt;/code&gt; option in the relation points to the field on the &lt;code&gt;Author&lt;/code&gt; model we want to match against. The &lt;code&gt;fields&lt;/code&gt; option points to the field on the &lt;code&gt;Book&lt;/code&gt; model that should match the reference field. And this field is not specified as an array, so we know a &lt;code&gt;Book&lt;/code&gt; will have &lt;em&gt;one&lt;/em&gt; &lt;code&gt;Author&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's it, we essentially have a one-to-many relationship between &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Book&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;This gets us the majority of the way to where we need to be to get our check-in/check-out system modeled. The last piece will be a model to hold our check-in/out log.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#booklog-model"&gt;
  &lt;/a&gt;
  BookLog model
&lt;/h4&gt;

&lt;p&gt;Our initial model will just hold some basic details about the book that is being checked out and the person checking it out. We'll also go ahead and create a &lt;code&gt;relation&lt;/code&gt; between the &lt;code&gt;BookLog&lt;/code&gt; and &lt;code&gt;Person&lt;/code&gt; model.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#-raw-map-endraw-raw-map-endraw-raw-now-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;code&gt;@map&lt;/code&gt;, &lt;code&gt;@@map&lt;/code&gt;, &lt;code&gt;now()&lt;/code&gt;&lt;/em&gt;
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Person {
   &amp;lt;...other fields...&amp;gt;
   log BookLog[]
}

model BookLog {
  id           Int      @map("log_id") @id @default(autoincrement())
  title        String
  productId    String
  checkInTime  DateTime
  checkOutTime DateTime @default(now())
  personId     Int
  person       Person   @relation(fields: [personId], references: [id])

  @@map("book_log")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are a couple of new things going on in this model that we haven't seen yet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The @map attribute is used to map our model's field name to the database's column name. In this case, the database table will have a column named &lt;code&gt;log_id&lt;/code&gt;, which we are using in our model as &lt;code&gt;id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;checkOutTime is using the &lt;code&gt;now()&lt;/code&gt; function in its &lt;code&gt;@default&lt;/code&gt; definition. This will set the default value of that field to the timestamp when the record is created&lt;/li&gt;
&lt;li&gt;The @@map attribute allows us to map our model to a database table but name the model something different. In this case, the database table will be &lt;code&gt;book_log&lt;/code&gt;, but our model will be &lt;code&gt;BookLog&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0T1YnwVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640918037804/t01skbQsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0T1YnwVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640918037804/t01skbQsu.png" alt="Blank diagram - Page 1 (12).png" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that, we now have the ability to query to see which user checked out which book! But what if we wanted to display some details about the book that aren't available here? Let's set up a relation to the &lt;code&gt;Book&lt;/code&gt; model. This one will be a bit trickier though because the &lt;code&gt;Book&lt;/code&gt; model has a compound ID instead of a single primary key!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Book {
   &amp;lt;...other fields...&amp;gt;
   log BookLog[]
}

model BookLog {
  id           Int      @id @default(autoincrement()) @map("log_id")
  title        String
  productId    String
  checkInTime  DateTime
  checkOutTime DateTime @default(now())
  personId     Int
  person       Person   @relation(fields: [personId], references: [id])
  book         Book     @relation(fields: [title, productId], references: [title, productId])

  @@map("book_log")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our relation to the &lt;code&gt;Book&lt;/code&gt; model, we have specified that to match a book to a book log, the &lt;code&gt;Book&lt;/code&gt; table should be joined on the &lt;code&gt;title&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;productId&lt;/code&gt; fields.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As shown above, you will need to add a field on the opposite relation that defines an array of &lt;code&gt;BookLog&lt;/code&gt; records.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7y5igQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640918128165/dcTK7MewA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7y5igQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640918128165/dcTK7MewA.png" alt="Blank diagram - Page 1 (13).png" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're pretty much all the way there with our model! The last little thing I'd like to add is more of a convenience thing that should help speed up some queries. &lt;/p&gt;

&lt;p&gt;Let's add an index to the &lt;code&gt;BookLog&lt;/code&gt; table that will index queries using the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;personId&lt;/code&gt; fields&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-index-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;code&gt;@index&lt;/code&gt;&lt;/em&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model BookLog {
  id           Int      @id @default(autoincrement()) @map("log_id")
  title        String
  productId    String
  checkInTime  DateTime
  checkOutTime DateTime @default(now())
  personId     Int
  person       Person   @relation(fields: [personId], references: [id])
  book         Book     @relation(fields: [title, productId], references: [title, productId])

  @@index([id, personId])
  @@map("book_log")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice, now our database will index on these fields! &lt;em&gt;(Probably not necessary, but hey, for science)&lt;/em&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;We should at this point have a complete schema set up and ready to handle some data! Here is what our completed file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Subject {
  GENERAL
  HORROR
  MYSTERY
  ROMANCE
  EDUCATIONAL
}

model Author {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  birthTown String?
  Books     Book[]
}

model Book {
  authorId      Int
  title         String
  productId     String
  publishedDate DateTime
  description   String    @db.VarChar(150)
  subject       Subject   @default(GENERAL)
  Author        Author    @relation(references: [id], fields: [authorId])
  log           BookLog[]

  @@id([title, productId], name: "titleProduct")
  @@unique([title, authorId])
}

model Person {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  dob       DateTime  @map("date_of_birth") @db.Date
  email     String    @unique
  age       Int
  updatedAt DateTime  @updatedAt
  log       BookLog[]
}

model BookLog {
  id           Int      @id @default(autoincrement()) @map("log_id")
  title        String
  productId    String
  checkInTime  DateTime
  checkOutTime DateTime @default(now())
  personId     Int
  person       Person   @relation(fields: [personId], references: [id])
  book         Book     @relation(fields: [title, productId], references: [title, productId])

  @@index([id, personId])
  @@map("book_log")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you set up &lt;code&gt;Postgres&lt;/code&gt; locally via Docker, feel free to run &lt;code&gt;prisma db push&lt;/code&gt; to build out your database tables on the actual database server. You can then view those tables via the admin view as described in the instructions above. &lt;/p&gt;

&lt;p&gt;As you can see there are a ton of different options that Prisma Syntax Language gives us when setting up our schemas. While we covered a lot in this article, there are still tons more available. Definitely check out the &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference"&gt;docs&lt;/a&gt; if you're curious about those.&lt;/p&gt;

&lt;p&gt;Thank you for sticking around until this point, and I encourage you to take this schema and play around with some queries to see how the relations work! That's where some of the real fun comes in!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>postgres</category>
      <category>docker</category>
      <category>typescript</category>
    </item>
    <item>
      <title>currentTarget vs. target</title>
      <author>Julie Evans</author>
      <pubDate>Fri, 31 Dec 2021 02:49:11 +0000</pubDate>
      <link>https://dev.to/mailauki/currenttarget-vs-target-3427</link>
      <guid>https://dev.to/mailauki/currenttarget-vs-target-3427</guid>
      <description>&lt;p&gt;One of the things I have learned recently is the difference between &lt;code&gt;currentTarget&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt;. I learned this by experimentation, so there is probably a better and more explicit explanation out there. But with my newbie knowledge, I am going to explain the difference of these two based on what I learned. On a side note, I have not looked up any information pertaining to this topic. This is solely based on what I found out through my trial and error. &lt;/p&gt;




&lt;p&gt;As I was working on a project I ran into a certain snag. Although I ran into a couple of snags along the way, the most significant one for me was the one concerning &lt;code&gt;currentTarget&lt;/code&gt;. Clicking one of the buttons activated two click event functions. One for the button itself, the other for the whole object that the button was a part of. I couldn’t figure out what was the problem at first, but then I realized I had used &lt;code&gt;currentTarget&lt;/code&gt; instead of &lt;code&gt;target&lt;/code&gt; to identify the event target for the click events. Overall its not much of an issue, but since I had two click events that were stacked and part of the same element, it became a problem.&lt;/p&gt;




&lt;p&gt;&lt;code&gt;currentTarget&lt;/code&gt; was not something I had used previously. I used it because it seamed to simplified identifying the whole object that was being clicked on, rather that trying to find the right &lt;code&gt;parentNode&lt;/code&gt;. &lt;code&gt;currentTarget&lt;/code&gt; runs more off of the element that the event listener is placed on, whereas &lt;code&gt;target&lt;/code&gt; is the element on the DOM that is directly being clicked on. Essentially, &lt;code&gt;target&lt;/code&gt; identifies the specific element or tag being clicked on, and &lt;code&gt;currentTarget&lt;/code&gt; identifies the general item being clicked on.&lt;/p&gt;




&lt;p&gt;Since I had &lt;code&gt;div&lt;/code&gt; tags upon &lt;code&gt;div&lt;/code&gt; tags in each card or object, I decided to try using &lt;code&gt;currentTarget&lt;/code&gt; instead. I wanted the click function to work on the whole card, rather than its individual contents or having to stack several &lt;code&gt;parentNode&lt;/code&gt;s. It all worked smoothly until I complicated matters with adding the button inside the card with its own event listener. The button tag as well as its event listener were both inside of the card itself, so the event listener on the whole card would run both, if the button inside was clicked. Moving the button’s event listener outside of the card might have fixed it, but I decided for a more fool-proof method. I decided to add an if statement on my function that would run only if the target of the click was the card, or had the class of “card” to be more specific. I had the if statement use &lt;code&gt;target&lt;/code&gt;, but still used &lt;code&gt;currentTarget&lt;/code&gt; on the function being called inside. This made the event handler still function the same way as before the addition of the button, but clarified the target of the click.&lt;/p&gt;

&lt;p&gt;I ended up adapting this clarification statement to all of my event handlers for this project, to ensure the function I wanted to happen would &lt;em&gt;only&lt;/em&gt; work on the corelating targets. I had a class of "checkbox" or my button, and a class of "card" on the whole card itself. I used the &lt;code&gt;contains&lt;/code&gt; within the if statement, for the clarification of the click target. The event handler for the card click turned out to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// checks if click target is card not checkbox&lt;/span&gt;
    &lt;span class="nx"&gt;getDetail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>functional</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Build Authentication with NextJS and NextAuth v4</title>
      <author>Damian Piwowarczyk</author>
      <pubDate>Fri, 31 Dec 2021 02:13:08 +0000</pubDate>
      <link>https://dev.to/przpiw/build-authentication-with-react-and-nextauth-v4-2edc</link>
      <guid>https://dev.to/przpiw/build-authentication-with-react-and-nextauth-v4-2edc</guid>
      <description>&lt;p&gt;Today we are going to build authentication example app using Nextjs and NextAuth. We will use a custom form and credential provider which will let us bring in effortlessly custom DB or endpoint for credential verification in our project. A Good boilerplate if you need authentication functionality with less code in your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is NextAuth?&lt;/strong&gt;&lt;br&gt;
Is a complete open-source solution for the nextjs application. It’s designed to simplify handling multiple ways of handling user authentication for your application. It offers built-in support for authentication services such like OAuth, Google, and many more. NextAuth is also perfect solution for authentication with your database as it offers wide database support.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9GN7Edu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7nhrebilyqd6t55lghc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9GN7Edu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7nhrebilyqd6t55lghc.gif" alt="Image AuthFlow" width="500" height="200"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create next-app app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;components &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;pages &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;login.js &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;mkdir &lt;/span&gt;auth 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i next-auth axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Lets start with editing &lt;code&gt;_app.js&lt;/code&gt;&lt;br&gt;
We will import &lt;strong&gt;SessionProvider&lt;/strong&gt; and &lt;strong&gt;userSession&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Session Provider&lt;/strong&gt; will allow us to supply session data to our Components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;useSession&lt;/strong&gt; client-side react hook which will let us determine if the user is authenticated and pull user data.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will create Auth functional component which will allow us to determine whether user should be allowed to access certain pages or if the user needs to be redirected back to login.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SessionProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SessionProvider&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Auth&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SessionProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;// Do nothing while loading&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Redirect to login&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Session is being fetched, or no user.&lt;/span&gt;
  &lt;span class="c1"&gt;// If no user, useEffect() will redirect.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt; &lt;br&gt;
Now we'll create a dynamic API route to catch all paths from&lt;code&gt;/api/auth&lt;/code&gt; as NextAuth by default will need access to these routes. The credential provider lets us implement the logic for user authorization, here we need our database or API to verify that user credentials are valid. Throwing an error will return a message to our login form. In this example for simplicity, I used a hardcoded user. We will use "jwt" an encrypted JWT (JWE) in the session cookie.&lt;/p&gt;

&lt;p&gt;Create [...nextauth].js file under &lt;code&gt;pages/api/auth&lt;/code&gt; by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NextAuth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CredentialsProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/providers/credentials&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;//Api route function that is returned from next auth&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NextAuth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;CredentialsProvider&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// credentials will to passed from our login form&lt;/span&gt;
        &lt;span class="c1"&gt;// Your own logic here either check agains database or api endpoint&lt;/span&gt;
        &lt;span class="c1"&gt;// e.g. verify password if valid return user object.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Incorrect Credentials&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This will be error message displayed in login form&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// called after sucessful signin&lt;/span&gt;
    &lt;span class="na"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// called whenever session is checked&lt;/span&gt;
    &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SECRET_HERE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jwt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;maxAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 1d&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SECRET_HERE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;encryption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Now we will implement &lt;code&gt;login.js&lt;/code&gt;&lt;br&gt;
signIn function will call and pass user details to authorize. if credentials match user will be given access and redirected to '/' protected route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;credentials&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;emailRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;passwordRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;callbackUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unauthenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;loginHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;emailRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pasword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt; In our index.js we set &lt;code&gt;Dashboard.auth = true&lt;/code&gt; to mark this route as protected. So only authenticated users can access it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/Navbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="nx"&gt;dashboard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Lastly, we will create a Navbar with signout button which will let us destroy the session and redirect to the login page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Navbar.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#b91c1c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;nbsp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Signout&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt; &lt;br&gt;
To sum up, NextAuth is a powerful and flexible authentication solution with developer-friendly documentation. With NextAuth we can simplify user auth for our application and follow good practices and patterns.&lt;/p&gt;

&lt;p&gt;I hope this article was helpful to some of you guys. Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/przpiw/NextAuth-Authentication"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Terraform Scripting Concepts: Part 2 of 2</title>
      <author>SerDigital64</author>
      <pubDate>Fri, 31 Dec 2021 01:25:02 +0000</pubDate>
      <link>https://dev.to/serdigital64/terraform-scripting-concepts-part-2-of-2-36nl</link>
      <guid>https://dev.to/serdigital64/terraform-scripting-concepts-part-2-of-2-36nl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;This is the second part of the tutorial. If not done already, please read the first part: &lt;a href="https://dev.to/serdigital64/terraform-scripting-concepts-part-1-of-2-484f"&gt;Terraform Scripting Concepts: Part 1 of 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-functions"&gt;
  &lt;/a&gt;
  Using functions
&lt;/h2&gt;

&lt;p&gt;Another particular characteristic of the &lt;strong&gt;Terraform Language&lt;/strong&gt; is that it doesn't support user-defined functions. Instead, it provides groups of built-in functions that can be used when assigning value to variables and attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numeric&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Collection&lt;/li&gt;
&lt;li&gt;Encoding&lt;/li&gt;
&lt;li&gt;Filesystem&lt;/li&gt;
&lt;li&gt;Date and Time&lt;/li&gt;
&lt;li&gt;Hash and Crypto&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Type conversion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the following template for calling functions: &lt;code&gt;FUNCTION_NAME(PARAMETER1, PARAMETER2, PARAMETERN)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;locals&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Find the maximum value from a list of numbers&lt;/span&gt;
  &lt;span class="nx"&gt;numeric_max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# Find the minimum value from a list of numbers&lt;/span&gt;
  &lt;span class="nx"&gt;numeric_min&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# Conver string to lowercase&lt;/span&gt;
  &lt;span class="nx"&gt;string_lower&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ServerX.DomainY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# Extrat dir from path&lt;/span&gt;
  &lt;span class="nx"&gt;filesystem_dir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/full/path/to/file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# Extrat file name from path&lt;/span&gt;
  &lt;span class="nx"&gt;filesystem_file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/full/path/to/file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# Record timestamp&lt;/span&gt;
  &lt;span class="nx"&gt;date_time_timestamp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#managing-infrastructure"&gt;
  &lt;/a&gt;
  Managing infrastructure
&lt;/h2&gt;

&lt;p&gt;Up until now, the script takes no action. In order for &lt;strong&gt;Terraform&lt;/strong&gt; to actually manage the target infrastructure and make changes to reach the required end-state, the script needs providers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt; defines the following block types for working with the target infrastructure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;terraform&lt;/code&gt;: used to set workspace-wide run-time options.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;required_providers&lt;/code&gt;: used to declare what providers will be used&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;provider&lt;/code&gt;: used to define provider-specific options.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resource&lt;/code&gt;: used to create a logical representation of the managed resource. Each provider will further specialize the resource with attributes and subtypes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;data&lt;/code&gt;: optional block that is used to query infrastructure resources managed by the provider. The query result is then made available for other blocks to use as variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#declare-providers"&gt;
  &lt;/a&gt;
  Declare Providers
&lt;/h3&gt;

&lt;p&gt;Providers are declared by adding a &lt;code&gt;required_providers&lt;/code&gt; nested block to the &lt;code&gt;terraform&lt;/code&gt; block. Each provider will be assigned to an attribute of type map:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Map name: used to reference the provider from other blocks.&lt;/li&gt;
&lt;li&gt;Attribute &lt;code&gt;version&lt;/code&gt;: used to define version requirements.&lt;/li&gt;
&lt;li&gt;Attribute &lt;code&gt;source&lt;/code&gt;: defines from where the provider will be downloaded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional provider-specific attributes can be defined by using the &lt;code&gt;provider&lt;/code&gt; block. The block will use the same label as the map name in &lt;code&gt;required_providers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following example declares two providers: &lt;code&gt;aws&lt;/code&gt; and &lt;code&gt;azure&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;terraform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;required_providers&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= 3.0.0"&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hashicorp/aws"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;azurerm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= 2.0.0"&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hashicorp/azurerm"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"aws"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"us-east-1"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"azurerm"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;features&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#define-managed-resources"&gt;
  &lt;/a&gt;
  Define Managed Resources
&lt;/h3&gt;

&lt;p&gt;Once the provider has been declared, it will make available additional &lt;code&gt;resource&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; types. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provider: AWS

&lt;ul&gt;
&lt;li&gt;Resource Type: &lt;code&gt;aws_instance&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Data Type: &lt;code&gt;aws_ami&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Provider: Azure

&lt;ul&gt;
&lt;li&gt;Resource Type: &lt;code&gt;azurerm_linux_virtual_machine&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Data Type: &lt;code&gt;azurerm_image&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the following template to define blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_TYPE"&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_LABEL"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ATTRIBUTE1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
  &lt;span class="nx"&gt;ATTRIBUTEN&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_TYPE"&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_LABEL"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ATTRIBUTE1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
  &lt;span class="nx"&gt;ATTRIBUTEN&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data and resource blocks can be used together to improve automation. In the following example, the &lt;code&gt;data&lt;/code&gt; block is used to query AWS for a particular AMI and then the &lt;code&gt;resource&lt;/code&gt; block will use the resulting AMI ID to create the VM instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="s2"&gt;"aws_ami"&lt;/span&gt; &lt;span class="s2"&gt;"coreos"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;most_recent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;    &lt;span class="c1"&gt;# Return the latest one if more than one result is available&lt;/span&gt;

  &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;# Look for fedora coreos v35&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
    &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"fedora-coreos-35**"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;              &lt;span class="c1"&gt;# Look for HVM virtualization&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"virtualization-type"&lt;/span&gt;
    &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"hvm"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;owners&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"125523088429"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# CentOS / Fedora account that owns AMIs&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_instance"&lt;/span&gt; &lt;span class="s2"&gt;"aws_test_instance"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ami&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_ami&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coreos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;    &lt;span class="c1"&gt;# Use the AMI that was found in the data query&lt;/span&gt;
  &lt;span class="nx"&gt;instance_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"t2.micro"&lt;/span&gt;      &lt;span class="c1"&gt;# Select the instance size&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Explore Terraform resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source code: &lt;a href="https://github.com/hashicorp/terraform"&gt;GitHUB Repository&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tool documentation: &lt;a href="https://www.terraform.io/docs"&gt;Manual&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn advanced features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/language/functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/language/expressions"&gt;Expresions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/language/values/variables#custom-validation-rules"&gt;Custom validation rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/language/functions"&gt;Built-in Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/language/modules"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understand provider-specific implementation details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://registry.terraform.io/"&gt;Providers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#copyright-information"&gt;
  &lt;/a&gt;
  Copyright information
&lt;/h2&gt;

&lt;p&gt;This article is licensed under a &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. For copyright information on the product or products mentioned inhere refer to their respective owner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Opinions presented in this article are personal and belong solely to me, and do not represent people or organizations associated with me in a professional or personal way. All the information on this site is provided "as is" with no guarantee of completeness, accuracy or the results obtained from the use of this information.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Terraform Scripting Concepts: Part 1 of 2</title>
      <author>SerDigital64</author>
      <pubDate>Fri, 31 Dec 2021 01:23:54 +0000</pubDate>
      <link>https://dev.to/serdigital64/terraform-scripting-concepts-part-1-of-2-484f</link>
      <guid>https://dev.to/serdigital64/terraform-scripting-concepts-part-1-of-2-484f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt; is an automation tool focused on infrastructure provisioning. The product is developed by HashiCorp, and the command line version is provided as an Open Source Project available on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt; has the following core components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Terraform CLI&lt;/strong&gt;: stand-alone app that provides the run-time environment for &lt;strong&gt;Terraform Scripts&lt;/strong&gt; and maintains build-state information of &lt;strong&gt;Managed Resources&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Terraform Script&lt;/strong&gt;: text file with &lt;strong&gt;Terraform Language&lt;/strong&gt; code used to describe the required end-state of the &lt;strong&gt;Managed Resources&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Managed Resource&lt;/strong&gt;: logical representation of a real infrastructure resource in the target infrastructure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Terraform Provider&lt;/strong&gt;: stand-alone apps (plugins) that are used by the &lt;strong&gt;Terraform CLI&lt;/strong&gt; to interact with &lt;strong&gt;Managed Resources&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Terraform Workspace&lt;/strong&gt;: working directory where &lt;strong&gt;Terraform Scripts&lt;/strong&gt; are located and where the &lt;strong&gt;Terraform CLI&lt;/strong&gt; stores data files (state, temporary, plugins, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-terraform"&gt;
  &lt;/a&gt;
  Using Terraform
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cli-installation"&gt;
  &lt;/a&gt;
  CLI Installation
&lt;/h3&gt;

&lt;p&gt;The recommended method for production environments is to add &lt;a href="https://www.terraform.io/downloads"&gt;HashiCorp's package repository&lt;/a&gt; to the OS package manager and install it using native tools.&lt;/p&gt;

&lt;p&gt;For more relaxed environments the binary package provides a simpler alternative that does not require root privilege:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create the installation repository&lt;/span&gt;
&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/terraform-cli"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;# Download the binary package&lt;/span&gt;
curl &lt;span class="nt"&gt;-LO&lt;/span&gt; https://releases.hashicorp.com/terraform/1.1.2/terraform_1.1.2_linux_amd64.zip
&lt;span class="c"&gt;# Uncompress the binary package&lt;/span&gt;
&lt;span class="nv"&gt;ZIP_PACKAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'terraform_1.1.2_linux_amd64.zip'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; unzip &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ZIP_PACKAGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ZIP_PACKAGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-scripts"&gt;
  &lt;/a&gt;
  Running scripts
&lt;/h3&gt;

&lt;p&gt;The execution process of &lt;strong&gt;Terraform Scripts&lt;/strong&gt; is divided into stages:&lt;/p&gt;

&lt;p&gt;1) &lt;code&gt;init&lt;/code&gt;: prepares the &lt;strong&gt;Terraform Workspace&lt;/strong&gt;, sets run-time parameters, downloads, and installs providers.&lt;br&gt;
2) &lt;code&gt;plan&lt;/code&gt;: creates/updates state information of managed resources and executes a dry-run to create the change plan. For already existing resources, if the provider is unable to modify attributes on the fly it will propose a destructive change (remove and recreate the resource with the new end-state).&lt;br&gt;
3) &lt;code&gt;apply&lt;/code&gt;: executes the change plan, and updates resource state information. The provider will modify the target infrastructure by creating, updating and removing resources until the end-state is reached.&lt;/p&gt;

&lt;p&gt;To execute the script the &lt;strong&gt;Terraform&lt;/strong&gt; CLI must be already inside the workspace directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;WORKSPACE_PATH
&lt;span class="c"&gt;# Initialize the workspace&lt;/span&gt;
terraform init
&lt;span class="c"&gt;# Prepare and review the action plan&lt;/span&gt;
terraform plan
&lt;span class="c"&gt;# Execute the action plan&lt;/span&gt;
terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the user running the process doesn't need root privilege, just write permissions to the workspace path.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#script-structure"&gt;
  &lt;/a&gt;
  Script structure
&lt;/h2&gt;

&lt;p&gt;The first thing to understand about &lt;strong&gt;Terraform Scripts&lt;/strong&gt; is that the &lt;strong&gt;Terraform Language&lt;/strong&gt; is not for general-purpose development. Based on HCL (&lt;a href="https://github.com/hashicorp/hcl"&gt;Hashicorp Configuration Language&lt;/a&gt;), it's specifically designed to describe infrastructure resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform Scripts&lt;/strong&gt; are developed by defining blocks: a complex data structure that describes a configuration object through its attributes.&lt;/p&gt;

&lt;p&gt;Use the following template for declaring blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;BLOCK_TYPE&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_TYPE"&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_LABEL1"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;ATTRIBUTE1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
  &lt;span class="nx"&gt;ATTRIBUTE2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
  &lt;span class="nx"&gt;ATTRIBUTEN&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;

  &lt;span class="c1"&gt;# Nested block&lt;/span&gt;
  &lt;span class="nx"&gt;BLOCK_TYPE&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_TYPE"&lt;/span&gt; &lt;span class="s2"&gt;"RESOURCE_LABEL2"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ATTRIBUTE&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;BLOCK_TYPE&lt;/strong&gt;: defines what type of configuration object is going to be described. Notice that Blocks can have any number of attributes and other blocks (nested).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RESOURCE_TYPE&lt;/strong&gt;: optional field used to select object subtypes. Not all objects will require one.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RESOURCE_LABEL&lt;/strong&gt;: optional field to assign a label (ID) to the object.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ATTRIBUTE&lt;/strong&gt;: name of the object's attribute.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;VALUE&lt;/strong&gt;: value that will be assigned to the object's attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following list shows common built-in block types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;variable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terraform&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional types and subtypes are implemented through &lt;strong&gt;Terraform Providers&lt;/strong&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest"&gt;&lt;code&gt;aws&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.terraform.io/providers/hashicorp/google/latest"&gt;&lt;code&gt;google&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest"&gt;&lt;code&gt;azurerm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.terraform.io/providers/hashicorp/kubernetes/latest"&gt;&lt;code&gt;kubernetes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scripts can have comments anywhere:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;//&lt;/code&gt;: single-line comment. Anything at the right is ignored.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#&lt;/code&gt;: single-line comment. Anything at the right is ignored.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/* */&lt;/code&gt;: multi-line comment. Anything between the delimiters is ignored.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a good practice, after the script is created/updated run the built-in linter and code-formatter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;WORKSPACE_PATH
terraform &lt;span class="nb"&gt;fmt
&lt;/span&gt;terraform validate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-variables"&gt;
  &lt;/a&gt;
  Using Variables
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#declaration"&gt;
  &lt;/a&gt;
  Declaration
&lt;/h3&gt;

&lt;p&gt;As everything in &lt;strong&gt;Teraform&lt;/strong&gt;, variables are also a block type. Use the following template to declare variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;locals&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;VARIABLE_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h3&gt;

&lt;p&gt;Both variables and attributes have types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;string&lt;/code&gt;: a sequence of Unicode characters.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;number&lt;/code&gt;: integer or float numbers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bool&lt;/code&gt;: boolean values.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;list&lt;/code&gt;: indexed sequence of values. The index is numerical and starts at cero. VALUEs can be of any type.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map&lt;/code&gt;: group of key + value pairs. VALUEs can be of any type.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;null&lt;/code&gt;: empty value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Types are inferred from the value (i.e. no explicit data type declaration). For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;locals&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test_string&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"abc123"&lt;/span&gt;
  &lt;span class="nx"&gt;test_number_integer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
  &lt;span class="nx"&gt;test_number_float&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;15.1&lt;/span&gt;
  &lt;span class="nx"&gt;test_bool&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;test_list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"value 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;test_map&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;key1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"value 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;key2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;Parameters are variables that are used to provide run-time data to &lt;strong&gt;Terraform Scripts&lt;/strong&gt;. They are declared using the &lt;code&gt;variable&lt;/code&gt; block type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"PARAMETER_NAME"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Optional parameter attributes&lt;/span&gt;
  &lt;span class="nx"&gt;ATTRIBUTE&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VALUE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are different from regular variables as they allow attributes to further describe the parameter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;default&lt;/code&gt;: value that is assigned if none is provided.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;description&lt;/code&gt;: text message that is used to describe the parameter.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt;: expected variable type. This is not used to declare the type, but rather to constrain the provided value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;validation&lt;/code&gt;: validation block used to perform additional checks.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sensitive&lt;/code&gt;: flag to restrict script output. Used to mask sensitive values such as passwords.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nullable&lt;/code&gt;: flag to indicate if the value can be null.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"aws_region"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"us-west-1a"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"target AWS region"&lt;/span&gt;
  &lt;span class="nx"&gt;nullable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="nx"&gt;sensitive&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"xaas_test_api_secret"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"API secret for the Test API"&lt;/span&gt;
  &lt;span class="nx"&gt;nullable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="nx"&gt;sensitive&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;

&lt;p&gt;In addition to the &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;variable&lt;/code&gt; block types &lt;strong&gt;Terraform&lt;/strong&gt; provides the &lt;code&gt;output&lt;/code&gt; type to define variables that will be exported and made available to external apps and scripts. The following attributes are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt;: the value assigned to the variable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;description&lt;/code&gt;: describe what the value represents.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sensitive&lt;/code&gt;: flag to restrict script output. Used to mask sensitive values such as passwords.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;output&lt;/span&gt; &lt;span class="s2"&gt;"sysadmin_key"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"secret-api-key"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"API secret for the new service"&lt;/span&gt;
  &lt;span class="nx"&gt;sensitive&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#retreive-variables-value"&gt;
  &lt;/a&gt;
  Retreive variable's value
&lt;/h3&gt;

&lt;p&gt;In general, any block attribute can be referenced from within other blocks by using the following structure: &lt;code&gt;BLOCK_TYPE.ATTRIBUTE&lt;/code&gt; or &lt;code&gt;BLOCK_TYPE.BLOCK_LABEL.ATTRIBUTE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In addition to the generic format there are special cases to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Locals: use &lt;code&gt;local&lt;/code&gt; instead of &lt;code&gt;locals&lt;/code&gt;: &lt;code&gt;local.ATTRIBUTE&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Parameters: use the short form &lt;code&gt;var&lt;/code&gt; instead of the full type name &lt;code&gt;variable&lt;/code&gt;: &lt;code&gt;var.ATTRIBUTE&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Outputs: requires the module name where the output is declared: &lt;code&gt;module.MODULE NAME.OUTPUT_NAME&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Variables can also be used in &lt;strong&gt;String Templates&lt;/strong&gt; (simple programming code that can be embedded inside string declarations): &lt;code&gt;"${BLOCK_TYPE.ATTRIBUTE}"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following example shows the three variable types seen so far:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;locals&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;api_secret_seed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"abc123"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"new_service_name"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"new_service_name"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"What name will the new service have"&lt;/span&gt;
  &lt;span class="nx"&gt;nullable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="nx"&gt;sensitive&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;output&lt;/span&gt; &lt;span class="s2"&gt;"service_secret"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="kd"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_secret_seed&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;new_service_name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"API secret for the new service"&lt;/span&gt;
  &lt;span class="nx"&gt;sensitive&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Continue reading the second part of the tutorial: &lt;a href="https://dev.to/serdigital64/terraform-scripting-concepts-part-2-of-2-36nl"&gt;Terraform Scripting Concepts: Part 2 of 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copyright-information"&gt;
  &lt;/a&gt;
  Copyright information
&lt;/h2&gt;

&lt;p&gt;This article is licensed under a &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. For copyright information on the product or products mentioned inhere refer to their respective owner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Opinions presented in this article are personal and belong solely to me, and do not represent people or organizations associated with me in a professional or personal way. All the information on this site is provided "as is" with no guarantee of completeness, accuracy or the results obtained from the use of this information.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>2022 Opportunities Tech outlook</title>
      <author>Victory Tuduo</author>
      <pubDate>Fri, 31 Dec 2021 00:51:23 +0000</pubDate>
      <link>https://dev.to/victorytuduo/2022-opportunities-tech-outlook-5a6j</link>
      <guid>https://dev.to/victorytuduo/2022-opportunities-tech-outlook-5a6j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;With 2021 gradually rolling away with just less than 24 hours to go, 2022 is right before us. This year may have been a good year for some in tech, possibly landing a gig, building a cool app or simply advancing knowledge to be able to be a better developer in the field of choice. With 2022 close by, some people may be looking to venture into the tech industry and are wondering: where to start? Where can I fit in? Probably there may be some looking to do something not actually coding related but is still cool and profiting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;At the end of this tutorial readers will be aware of some opportunities present in the tech industry and will be able to pick a place to fit in come 2022.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tech"&gt;
  &lt;/a&gt;
  What is Tech?
&lt;/h2&gt;

&lt;p&gt;Amazing how one word could mean lots of different things when defined from different perspectives. A simple definition of Tech in relation to it as a career is that tech relates to a field that makes use of tools and set of skills or knowledge geared towards creating products or services that satisfy a particular need. &lt;/p&gt;

&lt;p&gt;Would the tech industry be beneficial as a career path? The answer is pretty much a big YES! While tech jobs are really interesting to get into, statistics also show steady increases in demand in the tech sector and well grossing pay for various tech fields. Best tech jobs are projected to pay even more than the average median wage of $34,750. Here's a list of some tech jobs and their pay gotten from &lt;a href="https://www.zdnet.com/article/tech-jobs-these-are-the-highest-paying-roles-and-heres-where-to-find-them/"&gt;zdnet.com&lt;/a&gt;, The 10 fastest-growing salaries by occupation also included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technical support engineer ($68,651, +8.2%)&lt;/li&gt;
&lt;li&gt;Cloud engineer ($136,479, +6.3%)&lt;/li&gt;
&lt;li&gt;Business analyst ($97,633 +5.3%)&lt;/li&gt;
&lt;li&gt;Web developer ($81,550, +4.9%)&lt;/li&gt;
&lt;li&gt;Data engineer ($118,621, +4.7%&lt;/li&gt;
&lt;li&gt;Cybersecurity engineer ($134,340, +4.3%) &lt;/li&gt;
&lt;li&gt;Data architect ($133,064, +3.2%)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-fields-in-the-tech-industry"&gt;
  &lt;/a&gt;
  Some fields in the Tech Industry
&lt;/h2&gt;

&lt;p&gt;With tech covering a wide range of skill sets, there are a lot of fields one can get into depending on interest or goal of venturing into tech. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-developers"&gt;
  &lt;/a&gt;
  Web Developers
&lt;/h3&gt;

&lt;p&gt;This set of people are concerned with building scalable web applications. These applications may vary in terms of usage. Web development over recent years has been growing more popular and there's always an increasing demand for people in this field. If you have no problems with learning programming languages or writing codes and have always been fascinated about web pages and wondered how you can make one, well guess you just found your choice field :). Being such a broad field, web development is further divided into two parts, namely: front-end and back-end web development. The former deals with designing the user interface of the website probably in accordance to design specifications while the later deals with developing the applications back-end which may consist of the app's data management, provide authentication for users and much more. These are primarily things that occur but are not directly visible to the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-designers"&gt;
  &lt;/a&gt;
  Web Designers
&lt;/h3&gt;

&lt;p&gt;Interested in the web but don't enjoy writing code? Well, these guys are responsible for everything users see on a site. They design the workflow of websites which are then designed by the developers. These design cover choices of fonts, animations and the application layout.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-developers"&gt;
  &lt;/a&gt;
  Software Developers
&lt;/h3&gt;

&lt;p&gt;These guys write and ship large amount of codes which in turn developsp software used on a daily basis by individuals or companies. They develop applications, system softwares, operating systems among others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-page-builders"&gt;
  &lt;/a&gt;
  Web Page Builders
&lt;/h3&gt;

&lt;p&gt;They develop web applications, but what makes them different from the web developers mentioned earlier? Unlike web developers, these set of people make use of Content Management Systems (such as WordPress) – basically just using pre-existing tools to create a website without having to hard program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ux-ui-designer"&gt;
  &lt;/a&gt;
  UX / UI designer
&lt;/h3&gt;

&lt;p&gt;UX focuses on the overall feel of a product and how customers interact using the application, while UI is focused on how the product is laid out. This covers the design of the product while maintaining consistency specified by the UX. UI designs can be on web sites, system applications layouts e.t.c&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-writer"&gt;
  &lt;/a&gt;
  Technical writer
&lt;/h3&gt;

&lt;p&gt;This set of people are concerned with authoring manuals or technical specifications on various topics which will be beneficial to their readers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#game-engineer"&gt;
  &lt;/a&gt;
  Game Engineer
&lt;/h3&gt;

&lt;p&gt;Interested in the field of gaming? Here are some choices you can choose from in tech:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Game designer –&lt;/strong&gt; works on developing the game concept – characters, setting, storyline, levels, animations. Basically the general idea behind the game&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game developer –&lt;/strong&gt; has the technical skills required to turn the game idea into reality, by converting the sketches and storyline into a playable product&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game tester –&lt;/strong&gt; the most fun job of them all – working to test the games thoroughly to uncover potential bugs and give insight on areas where the game can be further improved before being released to the public&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#project-manager"&gt;
  &lt;/a&gt;
  project manager
&lt;/h3&gt;

&lt;p&gt;Organizes and manages a team of professionals while taking the job of building a product or service. Make sure team members meet their quotas, resources are well managed and product is shipped timely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphics-designer"&gt;
  &lt;/a&gt;
  Graphics Designer
&lt;/h3&gt;

&lt;p&gt;Makes use of computer graphics software to create beautiful illustrations, design logos, fliers, UIs among others. A field that's easy to fall in love with if you have an apt for pretty designs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d-modelling-and-animations"&gt;
  &lt;/a&gt;
  3d Modelling and Animations
&lt;/h3&gt;

&lt;p&gt;Concerned with creating character and environmental models for use in animations, games or other purposes. Makes use of animation software to create nice moving motion pictures or animations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tech-recruiter"&gt;
  &lt;/a&gt;
  Tech recruiter
&lt;/h3&gt;

&lt;p&gt;Identify potential job candidates for IT positions, reviews and submits these information to hiring managers for consideration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-engineer"&gt;
  &lt;/a&gt;
  Cloud Engineer
&lt;/h3&gt;

&lt;p&gt;This set of people comprises of IT professionals responsible for any technological duties associated with cloud computing. These include design, planning, management, maintenance and support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cybersecurity-engineer"&gt;
  &lt;/a&gt;
  Cybersecurity engineer
&lt;/h3&gt;

&lt;p&gt;People in this category are concerned with internet security and prevention of cyber crimes. They are sometimes called information security engineers. They identify threats and vulnerabilities in systems and software then use their skills to develop and implement high-tech solutions to defend against hacking, malware and ransomware, insider threats e.t.c&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There are a lot of fields in the tech industry which would be a good fit for your choice of skill sets or interest, finding the right one to indulge in is the first step in taking a tech career.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>career</category>
      <category>design</category>
    </item>
    <item>
      <title>December Developer Digest: A year in review</title>
      <author>Dawn Lambeth</author>
      <pubDate>Thu, 30 Dec 2021 23:18:48 +0000</pubDate>
      <link>https://dev.to/stripe/december-developer-digest-a-year-in-review-pbi</link>
      <guid>https://dev.to/stripe/december-developer-digest-a-year-in-review-pbi</guid>
      <description>&lt;p&gt;📩 We're sharing our most recent developer digest here on DEV! If you're interested in subscribing to monthly developer updates, sign up &lt;a href="https://go.stripe.global/dev-digest"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-0wFJ7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XRaNCJc4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwi5h27a7elyignm8iie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-0wFJ7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XRaNCJc4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwi5h27a7elyignm8iie.png" alt="Horizontal rule" width="818" height="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2021-wrapup"&gt;
  &lt;/a&gt;
  2021 wrap-up
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atvy6lwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/w0XmZSAABqyRVo4ynamYp-oPyWE8Mxk5gpLAqzvj6w0DN784jpEmg8ZQ09KaLPmTCYIpwiuPV75SLlEr_vwdPGU0kBPDzbJ2n37M-XRE1p8XZeh1zxXASe1jDvoVJeA41xzODw5S" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atvy6lwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/w0XmZSAABqyRVo4ynamYp-oPyWE8Mxk5gpLAqzvj6w0DN784jpEmg8ZQ09KaLPmTCYIpwiuPV75SLlEr_vwdPGU0kBPDzbJ2n37M-XRE1p8XZeh1zxXASe1jDvoVJeA41xzODw5S" alt="2021 wrap-up: a year in review" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this special edition of the Developer Digest, we’re highlighting some of the most important product releases, video series, and community contributions of 2021. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-updated"&gt;
  &lt;/a&gt;
  Stay updated
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Payment Element:&lt;/strong&gt; The new &lt;a href="https://stripe.com/docs/payments/payment-element?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;Payment Element&lt;/a&gt; lets you build a custom payment flow that supports &lt;a href="https://stripe.com/docs/payments/payment-methods/integration-options?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;18+ payment methods&lt;/a&gt; with a single integration. Once integrated, you can add additional payment methods with no front-end changes. Explore our &lt;a href="https://stripe.com/docs/payments/quickstart?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;code samples&lt;/a&gt; or learn how to &lt;a href="https://stripe.com/docs/payments/payment-element/migration?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;migrate from an existing integration&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payment Links:&lt;/strong&gt; Use &lt;a href="https://stripe.com/docs/payments/payment-links?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;Payment Links&lt;/a&gt; to sell a product or subscription in minutes. Create a full payment page in just a few clicks and embed the link or share it with your customers—no code required. &lt;a href="https://www.youtube.com/watch?v=RXuPWuI7JXE"&gt;Learn how to set up a payment link&lt;/a&gt; in our video or &lt;a href="https://dashboard.stripe.com/payment-links/create?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;get started now&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stripe Tax:&lt;/strong&gt; &lt;a href="https://stripe.com/docs/tax?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;Stripe Tax&lt;/a&gt; simplifies tax calculation and collection. If you’re looking to incorporate Stripe Tax into your integration or learn more about the three steps you need to get started, &lt;a href="https://youtu.be/3psLlebNl5w/"&gt;watch our guide on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stripe for VS Code:&lt;/strong&gt; With our &lt;a href="https://stripe.com/docs/stripe-vscode?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264"&gt;VS Code extension&lt;/a&gt;, you can stream logs and webhook events from the Stripe API to your local development machine, quickly access the API reference by hovering over resource methods, easily get started with one of &lt;a href="https://github.com/stripe-samples"&gt;Stripe’s sample apps&lt;/a&gt;, and much more. &lt;a href="https://www.youtube.com/watch?v=fATvgUMWLzU"&gt;Learn more&lt;/a&gt; in our video or &lt;a href="https://stripe.com/docs/stripe-vscode?utm_medium=earned-email&amp;amp;utm_source=338e&amp;amp;utm_campaign=GLOBAL_4487&amp;amp;utm_content=b109&amp;amp;utm_term=705b934c1264#installation"&gt;get started now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stripe React Native SDK:&lt;/strong&gt; The official &lt;a href="https://github.com/stripe/stripe-react-native"&gt;Stripe React Native SDK&lt;/a&gt; is now in public beta to help you build delightful payment experiences using React Native. Watch our video guides on &lt;a href="https://www.youtube.com/watch?v=qiEwO_UrOro"&gt;adding the SDK to a React Native app&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=SH2bi-1MUNM"&gt;accepting a payment&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn"&gt;
  &lt;/a&gt;
  Learn
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Developer Foundations series:&lt;/strong&gt;  In this video series, you'll learn the fundamentals of topics like authentication, making requests, adding metadata, and more. Check out the playlist for &lt;a href="https://www.youtube.com/watch?v=8Db0nTVlKM0&amp;amp;list=PLy1nL-pvL2M50RmP6ie-gdcSnfOuQCRYk"&gt;&lt;/a&gt;&lt;a href="https://www.youtube.com/watch?v=8Db0nTVlKM0&amp;amp;list=PLy1nL-pvL2M50RmP6ie-gdcSnfOuQCRYk"&gt;Ruby&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=gRvlMeBks6k&amp;amp;list=PLy1nL-pvL2M55YVn0mGoQ5r-39A1-ZypO"&gt;Python&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=CeufP46S5BI&amp;amp;list=PLy1nL-pvL2M6cUbiHrfMkXxZ9j9SGBxFE"&gt;PHP&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=R5RoYDEIhCI&amp;amp;list=PLy1nL-pvL2M5xNIuNapwmABwEy2uifAlY"&gt;Node&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=oJRPV07bVS0&amp;amp;list=PLy1nL-pvL2M5eqpSBR9KL7K0lcnWo0V0a"&gt;Go&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=t4iJ07E_tA8&amp;amp;list=PLy1nL-pvL2M5TnSGVjEHTTMgdnnHi-KPg"&gt;Java&lt;/a&gt;, or &lt;a href="https://www.youtube.com/watch?v=N20T0rXAWsc&amp;amp;list=PLy1nL-pvL2M4cNNoUtjWevYSci4ubsbhC"&gt;.NET&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Global payment video series&lt;/strong&gt;: Watch our &lt;a href="https://www.youtube.com/playlist?list=PLy1nL-pvL2M5naBTFxHkj3TNGFhHkVRSu"&gt;series of videos&lt;/a&gt; that walks through how to get started accepting payments on Stripe using local payment methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stripe Postman video series:&lt;/strong&gt; Learn how to use the new &lt;a href="https://www.postman.com/stripedev/workspace/stripe-developers/overview"&gt;Stripe Postman collection&lt;/a&gt; to try API requests without writing any code. You can now learn how to &lt;a href="https://youtu.be/Mxsmcsvhq9s"&gt;install the collection&lt;/a&gt;, set up &lt;a href="https://youtu.be/ZFJ_z8v35e8"&gt;authentication&lt;/a&gt;, make &lt;a href="https://youtu.be/5SzRdPuZVR0"&gt;basic&lt;/a&gt; and &lt;a href="https://youtu.be/EsOLI6h9XBY"&gt;advanced&lt;/a&gt; requests, &lt;a href="https://youtu.be/9sIkxX2CiE8"&gt;paginate lists&lt;/a&gt;, send &lt;a href="https://youtu.be/DPDsCo3sh98"&gt;versions&lt;/a&gt; and &lt;a href="https://youtu.be/PyOWJliOpjE"&gt;metadata&lt;/a&gt;, &lt;a href="https://youtu.be/1Uyeouge66U"&gt;expand responses&lt;/a&gt;, and work with &lt;a href="https://youtu.be/wTHgZji6zHk"&gt;idempotency keys&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h2&gt;

&lt;p&gt;Thank you to our top open-source contributor of 2021: &lt;a href="https://github.com/hibariya"&gt;hibariya&lt;/a&gt;.   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=385cpCpGRC0"&gt;Build a full stack ecommerce store&lt;/a&gt; with Next.js, Strapi, Magic, and Stripe [video from &lt;a href="https://www.youtube.com/channel/UCMguCMq25nEqlHlr17iINNw"&gt;Alex the Entreprenerd&lt;/a&gt;]
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/385cpCpGRC0"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.billflow.io/ultimate-stripe-tax-guide-for-saas/"&gt;Ultimate Stripe Tax Guide for SaaS&lt;/a&gt; [blog post from Ben Sears of &lt;a href="https://www.billflow.io/"&gt;Billflow&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=XnjA8PlwFIc"&gt;Stripe integration for eCommerce app in React Native &amp;amp; AWS Amplify&lt;/a&gt; [video from &lt;a href="https://www.youtube.com/channel/UCYSa_YLoJokZAwHhlwJntIA"&gt;Vadim Savin&lt;/a&gt; of &lt;a href="https://www.notjust.dev/"&gt;notJustDevelopment&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Learn how to &lt;a href="https://www.youtube.com/watch?v=P0Udy2Gi7n8"&gt;set up subscription payments with Stripe, Next.js, and Firebase&lt;/a&gt; [video from &lt;a href="https://www.youtube.com/channel/UCJae_agpt9S3qwWNED0KHcQ"&gt;Jarrod Watts&lt;/a&gt;]
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/P0Udy2Gi7n8"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stay-connected"&gt;
  &lt;/a&gt;
  Stay connected
&lt;/h2&gt;

&lt;p&gt;💬 &lt;a href="https://twitter.com/stripedev"&gt;Follow us at @StripeDev on Twitter&lt;/a&gt; for updates and answers to your developer questions. Let us know what you’re working on with the Stripe API!&lt;br&gt;
👾 &lt;a href="https://stripe.com/go/developer-chat"&gt;Join the Stripe Discord server&lt;/a&gt; to chat live with other developers.&lt;br&gt;
📺 &lt;a href="https://www.youtube.com/stripedevelopers"&gt;Subscribe to Stripe Developers on YouTube&lt;/a&gt; for office hours, live streams, and online technical workshops.&lt;br&gt;
📚 &lt;a href="https://dev.to/stripe"&gt;Add us on DEV&lt;/a&gt; for how-to articles and past editions of this developer digest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-0wFJ7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XRaNCJc4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwi5h27a7elyignm8iie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-0wFJ7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XRaNCJc4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwi5h27a7elyignm8iie.png" alt="Horizontal rule" width="818" height="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What would you like to see more (or less) of? Let us know by replying to this email. If you have questions, comments, or need help with code, we’re here to help &lt;a href="https://support.stripe.com/contact/login"&gt;via email&lt;/a&gt;, or on &lt;a href="https://stripe.com/go/developer-chat"&gt;Discord&lt;/a&gt;, &lt;a href="https://twitter.com/StripeDev"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://stackoverflow.com/tags/stripe-payments/info"&gt;Stack Overflow&lt;/a&gt;. View our &lt;a href="https://github.com/stripe-samples"&gt;code samples&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;—The Stripe team&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
