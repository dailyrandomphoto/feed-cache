<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 ways to code Rock, Paper and Scissors in JavaScript (beginner, intermediate and advanced approach)</title>
      <author>Ania Kubow</author>
      <pubDate>Wed, 12 May 2021 15:59:32 +0000</pubDate>
      <link>https://dev.to/ania_kubow/3-ways-to-code-rock-paper-and-scissors-in-javascript-beginner-intermediate-and-advanced-approach-34mk</link>
      <guid>https://dev.to/ania_kubow/3-ways-to-code-rock-paper-and-scissors-in-javascript-beginner-intermediate-and-advanced-approach-34mk</guid>
      <description>&lt;p&gt;In this video I show you how to code Rock paper Scissors in JavaScript in not just one approach, but 3 different approaches.&lt;/p&gt;

&lt;p&gt;I am doing this to show you just some of the ways you can solve one problem using JavaScript. I will be using a more beginner approach to start off with, and move onto more intermediate and advanced approaches.&lt;/p&gt;

&lt;p&gt;This is a JavaScript tutorial so there will be no styling in this tutorial. That part is totally up to you :)&lt;/p&gt;

&lt;p&gt;Please do share your finished games with me, I would absolutely love to see what you have made and how you have chosen to style your games!&lt;/p&gt;

&lt;p&gt;00:00​ Introduction&lt;br&gt;
01:18​ Beginner Rock Paper Scissors&lt;br&gt;
17:28​ Intermediate Rock Paper Scissors&lt;br&gt;
32:45​ Advanced Rock Paper Scissors&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RwFeg0cEZvQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can find the code for all three games here: &lt;a href="https://github.com/kubowania/rock-paper-scissors-x3"&gt;https://github.com/kubowania/rock-paper-scissors-x3&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool%E2%80%8B"&gt;http://bit.ly/tabnine-top-tool​&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow%E2%80%8B"&gt;https://www.buymeacoffee.com/aniakubow​&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips%E2%80%8B"&gt;https://bit.ly/JS-tips​&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ania_kubow%E2%80%8B"&gt;https://twitter.com/ania_kubow​&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/aniakubow%E2%80%8B"&gt;https://instagram.com/aniakubow​&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#codingbootcamp%E2%80%8B%E2%80%8B-coding%E2%80%8B"&gt;
  &lt;/a&gt;
  codingbootcamp​​ #coding​
&lt;/h1&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Soft UI Dashboard - Open-source Flask Starter</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 12 May 2021 15:55:51 +0000</pubDate>
      <link>https://dev.to/sm0ke/soft-ui-dashboard-open-source-flask-starter-2n6e</link>
      <guid>https://dev.to/sm0ke/soft-ui-dashboard-open-source-flask-starter-2n6e</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;strong&gt;Flask starter&lt;/strong&gt; that might help beginners to start faster a new project and reuse a codebase already enhanced with database, authentication and deployment scripts on top of a modern UI Kit: &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt;. The product can be downloaded from Github and used for hobby and commercial products. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask-soft-ui-dashboard.appseed-srv1.com/"&gt;Flask Soft UI Dashboard&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-soft-ui-dashboard"&gt;Flask Soft UI Dashboard&lt;/a&gt; - Source Code&lt;/li&gt;
&lt;li&gt;LIVE Support via &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CsRmknW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-soft-ui-dashboard/master/media/flask-soft-ui-dashboard-screen-billing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CsRmknW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-soft-ui-dashboard/master/media/flask-soft-ui-dashboard-screen-billing.png" alt="Soft UI Dashboard - Billing Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Soft UI Dashboard is an open-source Bootstrap 5 template released under the MIT License (free for commercial use) by Creative-Tim agency. The product is built with over 70 frontend individual elements, like buttons, inputs, navbars, navtabs, cards or alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using SASS files and classes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication Pages: Login and Register&lt;/li&gt;
&lt;li&gt;Utility pages: User Profile, Billing page&lt;/li&gt;
&lt;li&gt;RTL Support: YES.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJhlG4lV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k3hn07umpzr6scbde8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJhlG4lV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k3hn07umpzr6scbde8s.png" alt="Soft UI Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-compile-the-code"&gt;
  &lt;/a&gt;
  How to compile the code
&lt;/h2&gt;

&lt;p&gt;To compile this Flask starter in a local environment a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; must be already installed and all tools accessible in the terminal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;Nodejs&lt;/a&gt; - version 10.x or above&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt; - a smart package manager for Node&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;GIT&lt;/a&gt; - versioning command-line tool&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt; - toolkit automation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/"&gt;Python3&lt;/a&gt; - the interpreter&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Some of the above tools are optional but recommended. Once we have the environment ready, we can move on and compile the project using the build instructions provided in the &lt;a href="https://github.com/app-generator/flask-soft-ui-dashboard/blob/master/README.md"&gt;README&lt;/a&gt; file.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone/download sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules - SQLite Database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Set up environment variables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set the FLASK_APP environment variable&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set up the DEBUG environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the application via Flask embedded server&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the dashboard in browser: http://127.0.0.1:5000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the app will route guest users to the login page to authenticate. To pass the login please create a new user first.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pZlgpgGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1zyx0etqousrv3clgga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZlgpgGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1zyx0etqousrv3clgga.png" alt="Soft UI Dashboard - RTL Support."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Dashboards&lt;/a&gt; provided by AppSeed&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt; - official website &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>React Select with options outside</title>
      <author>Richard Beattie</author>
      <pubDate>Wed, 12 May 2021 15:54:18 +0000</pubDate>
      <link>https://dev.to/rbt/react-select-with-options-outside-353g</link>
      <guid>https://dev.to/rbt/react-select-with-options-outside-353g</guid>
      <description>&lt;p&gt;In &lt;a href="http://prepsheets.com"&gt;prepsheets.com&lt;/a&gt; users can specify which allergens ingredients and recipes have. The natural UI element for this is a multiselect. I was already using &lt;a href="https://react-select.com/"&gt;react-select&lt;/a&gt; which is an awesome library adding a stylable multi-select with lots of options (creating new options; async loading of options; etc). However after setting it up, it felt too cramped. If users had more than 3 allergen selected (some of which are quite long "") then the select would grow and become cumbersome. Instead I decided to place the selected options above the mutliselect. This article goes over how to do this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h2&gt;

&lt;p&gt;We're using react-select here so go ahead and install it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react-select
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's see what the default multi-select looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chocolate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chocolate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Strawberry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vanilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vanilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;isMulti&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the 24 offical Irish allergens as you can see below when you add a certain amount the select grows which dosn't look nice in my opinion.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---S-mtb18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drcjlwy435ipo515v9z3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---S-mtb18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drcjlwy435ipo515v9z3.png" alt="Mutliselect with many allergens selected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-selected-options-to-outside-the-select"&gt;
  &lt;/a&gt;
  Moving selected options to outside the select
&lt;/h2&gt;

&lt;p&gt;The next step is to not show the selected values in the select but rather above it. Let's create a wrapper component for React-Select&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// OptionsOutsideSelect.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OptionsOutsideSelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isMulti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isMulti&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt; : null&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;controlShouldRenderValue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isMulti&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;OptionsOutsideSelect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;isMulti&lt;/code&gt; is true then we use the &lt;code&gt;controlShouldRenderValue&lt;/code&gt; prop to hide the selected values &lt;strong&gt;and&lt;/strong&gt; loop over the &lt;code&gt;values&lt;/code&gt; prop and map them to &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56_ucTlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxw39bdliej1921m1eya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56_ucTlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxw39bdliej1921m1eya.png" alt="React Select with options outside"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should be possible to use the &lt;code&gt;MultiValue&lt;/code&gt; component from &lt;code&gt;react-select&lt;/code&gt; however I couldn't get that to work, which brings us to the next step&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-the-selected-options"&gt;
  &lt;/a&gt;
  Styling the selected options
&lt;/h2&gt;

&lt;p&gt;Let's change how we're mapping the selected values to look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ValuesContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isMulti&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Value&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ValuesContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm going to use &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; to style &lt;code&gt;ValusContainer&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; but you can of course move the same rules over to whatever you're using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ValuesContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  flex-wrap: wrap;
  align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 0.3rem 0.5rem 0.3rem 0.5rem;
  margin: 0 0.55rem 0.55rem 0;
  font-size: 0.75rem;
  color: black;
  background-color: rgba(247, 173, 46, 0.6);
  user-select: none;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates the below image which looks resonable&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kszqqop8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34d0cxn0dze298rx539t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kszqqop8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34d0cxn0dze298rx539t.png" alt="React Select styled option without X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only thing left to do now is let users remove selected options&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-remove-button"&gt;
  &lt;/a&gt;
  Adding a remove button
&lt;/h2&gt;

&lt;p&gt;First we'll add an "X" button to all &lt;code&gt;Values&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;XButton&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRemoveValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="c1"&gt;// This is the mulitply ✕ not the x on your keyboard&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/XButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Value&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to make the &lt;code&gt;handleRemoveValue&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleRemoveValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;buttonName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;buttonName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;removedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;buttonName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remove-value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removedValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Ta-Da 🎉 you have a react-select with the options rendered outside the select. I've included a code-sandbox below to show what this looks like&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/react-select-with-options-outside-qqw71"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactselect</category>
      <category>styledcomponents</category>
      <category>css</category>
    </item>
    <item>
      <title>UDP</title>
      <author>Gealber Morales</author>
      <pubDate>Wed, 12 May 2021 15:49:23 +0000</pubDate>
      <link>https://dev.to/gealber/udp-3pno</link>
      <guid>https://dev.to/gealber/udp-3pno</guid>
      <description>&lt;h1&gt;
  &lt;a href="#udp"&gt;
  &lt;/a&gt;
  UDP
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Let's talk about this really funny protocol, funny is a weird word for a networking protocol, but I'll try to make my point. I will try the same approach as my last post on &lt;a href="https://dev.to/gealber/tcp-handshake-3ac"&gt;TCP&lt;/a&gt;, making a simple python script and taking a look to &lt;strong&gt;Wireshark&lt;/strong&gt;. Let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-udp-handshake-the-what"&gt;
  &lt;/a&gt;
  The UDP handshake, the what?
&lt;/h2&gt;

&lt;p&gt;Yep in my opinion &lt;strong&gt;UDP&lt;/strong&gt;(User Datagram Protocol) is barely a protocol, I know I'm a not a computer science guy, but still it doesn't seems to fit on that category of protocol. Let me clarify that &lt;strong&gt;UDP is extremely useful&lt;/strong&gt;, I'm just saying that the parts involved on the communication doesn't follow to many rules, like in &lt;strong&gt;TCP&lt;/strong&gt;. Instead of just saying this I will try to show you why I said this, let's make our simple Python script. Again this can be made with any programming language, I choose Python for simplicity.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;server.py&lt;/code&gt; will contain our extremely simplified &lt;strong&gt;UDP&lt;/strong&gt; server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# UDP server.py&lt;/span&gt;

import socket

def main&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="c"&gt;# creating the socket&lt;/span&gt;
    sock &lt;span class="o"&gt;=&lt;/span&gt; socket.socket&lt;span class="o"&gt;(&lt;/span&gt;socket.AF_INET, socket.SOCK_DGRAM&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# binding the socket to the address, in our case the localhost&lt;/span&gt;
    sock.bind&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;, 7456&lt;span class="o"&gt;))&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Just here on 7456..."&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# start reading data,&lt;/span&gt;
    &lt;span class="c"&gt;# I'm just interested on a single message from the client and it will be&lt;/span&gt;
    &lt;span class="c"&gt;# pretty short so don't need more than this&lt;/span&gt;
    data, address &lt;span class="o"&gt;=&lt;/span&gt; sock.recvfrom&lt;span class="o"&gt;(&lt;/span&gt;1024&lt;span class="o"&gt;)&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="s2"&gt;"FROM: {address} DATA: {data}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if &lt;/span&gt;__name__ &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;:
    main&lt;span class="o"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the difference here with &lt;strong&gt;TCP&lt;/strong&gt;, in this case he just start listening without the need to call &lt;code&gt;socket.listen()&lt;/code&gt; or &lt;code&gt;socket.accept()&lt;/code&gt;, take a look at this question on &lt;a href="https://stackoverflow.com/questions/8194323/why-the-listen-function-call-is-not-needed-when-use-udp-socket#:~:text=UDP%20is%20a%20connectionless%2C%20unreliable,any%20order%20from%20any%20source.&amp;amp;text=It's%20because%20UDP%20is%20not,accept%20like%20there's%20for%20SOCK_STREAM"&gt;&lt;strong&gt;Stackoverflow&lt;/strong&gt;&lt;/a&gt;, yes I use &lt;strong&gt;Stackoverflow&lt;/strong&gt; as reference.&lt;/p&gt;

&lt;p&gt;What about the client, here we go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# UDP client.py&lt;/span&gt;

import socket

def main&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="c"&gt;# create the socket&lt;/span&gt;
    sock &lt;span class="o"&gt;=&lt;/span&gt; socket.socket&lt;span class="o"&gt;(&lt;/span&gt;socket.AF_INET, socket.SOCK_DGRAM&lt;span class="o"&gt;)&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sending data..."&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# and ready to go&lt;/span&gt;
    sock.sendto&lt;span class="o"&gt;(&lt;/span&gt;b&lt;span class="s2"&gt;"Hello Lola"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;, 7456&lt;span class="o"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if &lt;/span&gt;__name__ &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;:
    main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a socket and ready to send message, take into account that you don't care if the server is listening, if there's a server, you just send and hope for the best.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-this-look-like-on-wireshark"&gt;
  &lt;/a&gt;
  How this look like on Wireshark?
&lt;/h3&gt;

&lt;p&gt;In the last post we saw that a single &lt;strong&gt;TCP&lt;/strong&gt; connection with only one message generate several back and forward between the client and the server. I recommend you to take a look at the steps that you take to sniff the traffic in that case, in this case the only difference is that the filter in this case is &lt;code&gt;udp.port == 7456&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl4vTUfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jy338av8xbsrwfy6jidp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl4vTUfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jy338av8xbsrwfy6jidp.png" alt="TCP on Wireshark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's look this but with &lt;strong&gt;UDP&lt;/strong&gt;, this is going to be funny because well...let's see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RygR6odb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0um2g4x0q7u9aqb84nrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RygR6odb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0um2g4x0q7u9aqb84nrg.png" alt="UDP Wireshark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait what? Just one message, the client just literally sent the message, he doesn't care if the server is listening because again there's not such a thing as listening on &lt;strong&gt;UDP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W45UExdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvdka6p3rv5ip38s99kj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W45UExdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvdka6p3rv5ip38s99kj.png" alt="Balls on your face, UDP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep this picture explains really well the situation, also was made with &lt;a href="https://github.com/excalidraw/excalidraw"&gt;exalidraw&lt;/a&gt;, you know promoting open source projects 😃.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;there's no handshake in UDP&lt;/strong&gt;, looking at the packet sent we can see that there's no too much to see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCDmRo0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5h5glh6m37578ea43d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCDmRo0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5h5glh6m37578ea43d3.png" alt="UDP packet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only Destination port, Source port, UDP length and Checksum and good to go, sent that message!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uses-cases-of-udp"&gt;
  &lt;/a&gt;
  Uses cases of UDP
&lt;/h2&gt;

&lt;p&gt;You may be wondering, "So why do I need this?". Well given that &lt;strong&gt;UDP&lt;/strong&gt; has low latency it has some pretty interesting uses cases. I'll let you these two links below, so you can explore them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/3751950/what-are-common-udp-usecases"&gt;Stackoverflow question, UDP use cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.emnify.com/en/resources/udp"&gt;What is User Datagram Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all for today 👋.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="//stackoverflow.com"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>tutorial</category>
      <category>linux</category>
      <category>networking</category>
      <category>python</category>
    </item>
    <item>
      <title>How To Create Pop Up Login Form Using HTML and CSS</title>
      <author>Sonali Roy</author>
      <pubDate>Wed, 12 May 2021 15:34:39 +0000</pubDate>
      <link>https://dev.to/sonali_roy/how-to-create-pop-up-login-form-using-html-and-css-1bji</link>
      <guid>https://dev.to/sonali_roy/how-to-create-pop-up-login-form-using-html-and-css-1bji</guid>
      <description>&lt;p&gt;Hello friends, today I am going to show you how to create a pop-up login form using only HTML and CSS code. &lt;/p&gt;

&lt;p&gt;I created this login page in the form of a neomorphic design. Like the normal login form, it has everything here i.e. a place to input the email ID and password for login. There is also a login button below.&lt;/p&gt;

&lt;p&gt;In this program, at first, on the webpage, there is a white button with "Sign In" text. And when you click on that button then the &lt;a href="https://www.foolishdeveloper.com/2021/05/how-to-create-pop-up-login-form-using.html"&gt;Popup or Modal Login Form&lt;/a&gt; will be displayed.&lt;/p&gt;

&lt;p&gt;You can copy the codes from the given boxes or &lt;a href="https://www.foolishdeveloper.com/2021/05/how-to-create-pop-up-login-form-using.html"&gt;download the code files&lt;/a&gt; from the given link.&lt;/p&gt;

&lt;p&gt;HTML Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"popup"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"popup-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close-btn"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglePopup()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     ×&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"validate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"validate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"second-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Don't have an account? &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/signup.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign Up&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;


   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglePopup()"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"first-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign In&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;raleway&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-150%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;56px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-25px&lt;/span&gt; &lt;span class="m"&gt;-25px&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup&lt;/span&gt; &lt;span class="nc"&gt;.close-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup.active&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-field&lt;/span&gt; &lt;span class="nc"&gt;.validate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bfc0c0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.first-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-15px&lt;/span&gt; &lt;span class="m"&gt;-15px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;.35s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.first-button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;145deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.second-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#202020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#2c2c2c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;.35s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.second-button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;145deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bfc0c0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;togglePopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popup-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Industries that Need a High Performing Low Latency Distributed Database</title>
      <author>Margo McCabe</author>
      <pubDate>Wed, 12 May 2021 15:33:07 +0000</pubDate>
      <link>https://dev.to/margo_hdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4</link>
      <guid>https://dev.to/margo_hdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4</guid>
      <description>&lt;p&gt;There are certain industries that greatly benefit from high-performing, low-latency, geo-distributed technologies, while other organizations might be more focused on vertically scaling architectures. This is dependent on numerous factors including the data pipeline, network, data structure, type of product or solution, short and long term goals, etc. While there are currently many databases and tools that provide vertical scaling capabilities, there are not many that focus on horizontal scaling -- but there’s still a need for both. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#latency"&gt;
  &lt;/a&gt;
  Latency
&lt;/h4&gt;

&lt;p&gt;Before jumping into specific industries that benefit from high-performing, low-latency, geo-distributed databases (it’s a mouthful, I know), let’s define a few terms here. High-performing is pretty self explanatory so I’ll skip over that one. For the next term I’ll refer to my colleague Jacob Cohen’s blog on &lt;a href="https://dev.to/harperdb/reducing-data-latency-with-geographically-distributed-databases-41oa"&gt;Geo-Distributed Databases&lt;/a&gt;. Latency generally measures the duration between an action and a response. In user facing applications, that can be narrowed down to the delay between when a user makes a request and when the application responds to a request. So, technologies that enable low-latency usually improve performance and response times, leading to improved user experience and cost savings. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#geo-distributed"&gt;
  &lt;/a&gt;
  Geo Distributed
&lt;/h4&gt;

&lt;p&gt;What about geo-distribution? I’ll reference my other colleague Kaylan Stock’s blog on &lt;a href="https://dev.to/harperdb/geo-distributed-data-lakes-explained-by-a-non-developer-m68"&gt;Geo Distributed Data Lakes&lt;/a&gt;. Geo-distributed is often used in reference to data storage, websites, applications, containers, etc. In this case, it means a database technology deployed across more than one geographical location without performance delays. Geo-distributed functionality has several benefits. With increased redundancy, you don’t need to worry about one data center, cloud instance, or on-premise site going down. With a backup in place, a fail in one location is no longer a disaster situation for your team (this is often considered to be part of high availability architecture). Global performance is improved because queries are distributed across many different servers in parallel, and users are able to hit a database that is physically closer to them, ultimately reducing latency. User experience is also improved when data storage is distributed because of the rapid query response times.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scaling"&gt;
  &lt;/a&gt;
  Scaling
&lt;/h4&gt;

&lt;p&gt;When scaling, there are two ways to add computing resources to your infrastructure, and most large organizations utilize a combination of the two approaches to best meet their needs. &lt;a href="https://www.section.io/blog/scaling-horizontally-vs-vertically/"&gt;The main difference is&lt;/a&gt;, “horizontal scaling means scaling by adding more machines to your pool of resources (also described as “scaling out”), whereas vertical scaling refers to scaling by adding more power (e.g. CPU, RAM) to an existing machine.” As mentioned above, horizontal scaling provides redundancy, instead of having only one system in vertical scaling where a single point of failure can cause massive disruption. If your organization prefers to have the flexibility to choose the optimal configuration setup at any time that will yield the highest cost and performance benefits, scaling out might be a better option than scaling up. While the paradigm is shifting more towards horizontal scaling, there can still be benefits to vertical scaling as well. Perhaps it’s best to find a technology solution that can enable both vertical and horizontal scaling when needed in order to minimize the number of systems in the tech stack. &lt;/p&gt;

&lt;p&gt;Let’s look at a few industry based examples here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retail-amp-ticketing"&gt;
  &lt;/a&gt;
  Retail &amp;amp; Ticketing
&lt;/h3&gt;

&lt;p&gt;Industries such as retail and ticketing constantly battle with bots that buy up their product as soon as it’s released to be resold at marked up rates. We all know that feeling of waiting in a virtual line for concert tickets, only to have them sold out within minutes (if not seconds)! Due to these bots / bad actor systems, these products and events become less accessible to the general consumer, and revenue is distributed to previously uninvolved companies and sources. Databases and data management solutions are often centralized in a single cloud in a single region, which drives high latency and increased compute needs to power APIs. These technologies cannot respond or process data fast enough to catch or block the bad actors, and the data needs to be globally replicated. By shifting API’s and data storage to the edge, latency can be greatly reduced. If we bring data persistence and functionality closer to the source with a super fast distributed database system, we can recognize and block those bots / bad actors in real time with global replication. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#industry-amp-military"&gt;
  &lt;/a&gt;
  Industry &amp;amp; Military
&lt;/h3&gt;

&lt;p&gt;In military and other industrial or machine-heavy organizations, there are massive amounts of data being generated by sensors out in the field and on the edge. These sensors could be capturing data on anything - machinery performance, rotation, vibration, temperature, output, weather, etc. These industries benefit from a distributed low latency database that can sync data from the edge to data center servers, as well as back to the edge for analytics and alerting, in real time. If we bring edge persistence and functionality closer to those edge nodes, we can eliminate gaps and bottlenecks between IoT data collection and the cloud. A peer-to-peer distributed architecture will enable the capture and flow of data across the data pipeline to enable rapid decisioning and downtime prevention. In these scenarios, it’s important for both machine operators in the field and controls engineers back at headquarters to know what’s happening at all times, and decisioning that’s even a second too late can be detrimental.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gaming-amp-media"&gt;
  &lt;/a&gt;
  Gaming &amp;amp; Media
&lt;/h3&gt;

&lt;p&gt;Gaming and media industries greatly benefit from high performance and low latency, with clear implications for both the organization and the end-user. Referring to my &lt;a href="https://dev.to/harperdb/enhance-your-hybrid-cloud-strategy-with-a-new-edge-36c4"&gt;Hybrid Cloud blog&lt;/a&gt;, latency challenges occur because large cloud providers are not highly distributed. Additionally, it is challenging to actually deliver data at the edge and allow users to interact with it. Currently there are caching solutions that bring data reads to the edge, but they are not write optimized and global replication is slow. By utilizing a database that distributes to the edge with the ability to read &lt;em&gt;and write&lt;/em&gt; efficiently, you can improve response times and performance for the end user. This is because instead of having a limited choice of regions offered by giant cloud providers, edge data centers are much closer to their end consumer. (We all know how frustrating it can be when your game freezes with 30 seconds left on the clock when you’re playing multiplayer games with your pals across the country!) This solution also enables cost savings because organizations can avoid cloud lock-in and additional costs related to data ingress and egress, and far less API servers are required to handle the workload. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transportation"&gt;
  &lt;/a&gt;
  Transportation
&lt;/h3&gt;

&lt;p&gt;Planes, trains, and automobiles! You can imagine that vehicles of any type require extremely low-latency so that they can predict and avoid any kind of collisions or misdirection. Peer-to-peer technologies and 5G will enable innovation like vehicle to vehicle architecture. By distributing APIs and data storage to the edge, and shifting application logic to the edge, you can remove bottlenecks and reduce infrastructure and cost. Bringing functionality on or near the vehicles will reduce latency, reduce the number of servers needed to handle the necessary workload, and improve performance. &lt;/p&gt;

&lt;p&gt;You can find more real-world examples in Jake’s blog on &lt;a href="https://dev.to/harperdb/reducing-data-latency-with-geographically-distributed-databases-41oa"&gt;Geo-Distributed Databases&lt;/a&gt;, where he talks about Home Internet of Things (IoT), gaming, and even warehouse robotics! Many applications rely on low-latency, and sometimes so severely that issues with high latency can cause customer loss and/or massive expenses or failures. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#whats-the-solution"&gt;
  &lt;/a&gt;
  What’s the solution?
&lt;/h4&gt;

&lt;p&gt;While there are technologies out there tackling these challenges in different ways, there are not many high-performing, low-latency, geo-distributed databases. Many edge data solutions are not write optimized and global replication is slow. Whereas &lt;a href="https://harperdb.io/?utm_source=devtomargo"&gt;HarperDB&lt;/a&gt; is read and write optimized, handling upwards of 20K writes per second per node, with 110ms global replication. HarperDB’s clustering methodology relies on  eventual consistency to be much more efficient than more traditional options, and you can’t lock out our database globally. Here’s a few additional benefits of addressing latency challenges with HarperDB: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single node of HarperDB can handle over &lt;strong&gt;100K requests per second&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;HarperDB can globally &lt;strong&gt;replicate data at the speed of the Internet&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Runs anywhere&lt;/strong&gt; presenting a single interface across a multi-cloud solution&lt;/li&gt;
&lt;li&gt;Enables &lt;strong&gt;horizontal scalability&lt;/strong&gt; with peer-to-peer architecture and leverages parallel processing for &lt;strong&gt;vertical scalability&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Easily &lt;strong&gt;distribute API’s to the edge&lt;/strong&gt; to reduce latency and cost&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid cloud capability&lt;/strong&gt;; run on public cloud, edge data centers, on-premise, or in the field
&lt;/li&gt;
&lt;li&gt;Provides &lt;strong&gt;low-latency edge data replication&lt;/strong&gt; for “CDN of database”
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Real time data sync&lt;/strong&gt; between nodes &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexible and configurable&lt;/strong&gt; data sync&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With centralized databases, organizations have to buy more and more API servers to reduce latency and handle the increasing workload, creating massive bottlenecks. By distributing out and moving closer to the edge, and utilizing a Hybrid Edge/Cloud strategy, you can greatly decrease the number of servers needed and reduce latency, while benefiting from cost savings and improved customer experience. With HarperDB, you can simply spin up more nodes to scale horizontally, putting HarperDB in various regions closer to your end users, all while accessing data in real time. &lt;/p&gt;

&lt;p&gt;Whichever route your organization takes, it’s always better to proactively implement solutions like this upfront instead of having to react later on and deal with disaster recovery. Now that we’ve provided a brief overview, would your industry or organization benefit from high-performing, low-latency, geo-distributed technologies? &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>database</category>
      <category>distributedsystems</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How to deploy Rust web app with DigitalOcean</title>
      <author>Steadylearner</author>
      <pubDate>Wed, 12 May 2021 15:22:29 +0000</pubDate>
      <link>https://dev.to/steadylearner/how-to-deploy-rust-web-app-with-digitalocean-h2o</link>
      <guid>https://dev.to/steadylearner/how-to-deploy-rust-web-app-with-digitalocean-h2o</guid>
      <description>&lt;p&gt;Rust users mostly end up loving its features such as performance, reliability and productivity. It is not easy to start to learn it, but there are friendly communities to help you.&lt;/p&gt;

&lt;p&gt;On top of that, there are decent package management tools like cargo, cargo-edit etc. The programming language itself and packages(crates in Rust) are maturing also.&lt;/p&gt;

&lt;p&gt;The language developers and contributers are also giving their time to enhance &lt;a href="https://www.steadylearner.com/blog/read/How-to-use-Rust-Yew"&gt;Webassembly&lt;/a&gt; integration to attract more Frontend Developers and make web application faster.&lt;/p&gt;

&lt;p&gt;However, it was difficult to find the real examples for intergating frontend app to Rust and then deploying it to the web.&lt;/p&gt;

&lt;p&gt;I was not sure that I could upload my website to the web with Rust. But I eventually made it and want to share the process with you.&lt;/p&gt;

&lt;p&gt;If you have already experience in deploying websites in other languases, deploying Rust will not be so different from deploying Node js or Python backend app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Buy VPS service such as &lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;DigitalOcean&lt;/a&gt; that offers the same operating system you use in your local machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repeat what you have been doing in your local development environment in a vritual machine they give.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure Apache or Nginx and systemd service worker to work as proxy server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start your project inside the host service and serve it with your domain.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may read on or just apply the process for a Rust or other web framework you use.&lt;/p&gt;



&lt;h2&gt;[Prerequisite]&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.steadylearner.com/blog/read/How-to-install-Rust"&gt;How to install Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/create-with-openssh/"&gt;SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@steadylearner/how-to-learn-vim-for-beginners-c81da6f5fde8"&gt;How to use Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/belst/ff36c5f3883f7bf9b06c379d0a7bed9e"&gt;Deploy Rocket with Nginx and LetsEncrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/"&gt;Bash Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.usm.uni-muenchen.de/people/puls/lessons/intro_general/Linux/Linux_for_beginners.pdf"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I hope you already have Rust installed in your machine and have web application ready.&lt;/p&gt;

&lt;p&gt;For this post, I will use &lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;DigitalOcean&lt;/a&gt; as an example. First, I doubted that it would work or not with &lt;strong&gt;Rust&lt;/strong&gt;. But later I found that it is easy if you already know how to use Linux Command Line. Because what they give you is just a Linux Virtual Machine and you can repeat what you did in your local machine.&lt;/p&gt;

&lt;p&gt;Then, it will work. You are watching the result if you are at &lt;a href="https://www.steadylearner.com"&gt;Steadylearner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It works well with very low price with two month free trial time for you to test. You will not need that much time to begin with if you follow the instruction from this post.&lt;/p&gt;

&lt;p&gt;It will be helpful if you are already familiar with &lt;strong&gt;Vim&lt;/strong&gt;, &lt;strong&gt;CLI&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt; etc.&lt;/p&gt;

&lt;p&gt;You should search for information about &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04-quickstart"&gt;Nginx&lt;/a&gt;. It works well with default configuration but I hope you search information about it on your own.&lt;/p&gt;

&lt;p&gt;If you don't have ssh keys in your machine yet, please follow the documentation from &lt;a href="https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/create-with-openssh/"&gt;DigitalOcean&lt;/a&gt; I gave you.&lt;/p&gt;

&lt;p&gt;What you need to do is just type &lt;strong&gt;ssh-keygen&lt;/strong&gt; and follow the instruction in your machine.&lt;/p&gt;

&lt;p&gt;You can repeat the process if your hardware is broken or when you need to start from nothing when you want to use it in antoher machine.&lt;/p&gt;

&lt;p&gt;It will work in those situations also so do not worry and just follow the instructions your service providers give you.&lt;/p&gt;

&lt;p&gt;I hope you already know what is tld(&lt;a href="https://searchmicroservices.techtarget.com/definition/top-level-domain-TLD"&gt;top-level-domain&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You may read a lot after you made your app deployed with this post.&lt;/p&gt;



&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;DigitalOcean Setup&lt;/li&gt;
&lt;li&gt;Install dependencies for your virtual machine&lt;/li&gt;
&lt;li&gt;Configure Nginx as a reverse proxy server&lt;/li&gt;
&lt;li&gt;Save your project in your virtual machine&lt;/li&gt;
&lt;li&gt;Create systemd service to serve your web application&lt;/li&gt;
&lt;li&gt;HTTPS for your website&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;You can skip the &lt;strong&gt;DigtialOcean Setup part&lt;/strong&gt; if you do not want to use it or just refer to it.&lt;/p&gt;

&lt;p&gt;You will not need the &lt;strong&gt;Installing Dependencies for Linux Virtual Machine&lt;/strong&gt; if you already know how to set up development environment.&lt;/p&gt;

&lt;p&gt;Just repeat what you have done in your local machine after you buy VPS service from [DigtialOcean] or whatever service host provide.&lt;/p&gt;

&lt;p&gt;If you have problem while folllowing this post, please contact me with &lt;a href="https://twitter.com/steadylearner_p"&gt;Twitter&lt;/a&gt; or LinkedIn(&lt;a href="https://www.linkedin.com/in/steady-learner-3151b7164/"&gt;https://www.linkedin.com/in/steady-learner-3151b7164/&lt;/a&gt;) and I will help you.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#1-digitalocean-setup"&gt;
  &lt;/a&gt;
  1. DigitalOcean Setup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4uVqOTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/DigitalOcean-Main.png" alt="DigitalOcean Website Screentshot by steadylearner"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I wouldn’t write details about using &lt;strong&gt;DigitalOcean&lt;/strong&gt; for there are many &lt;a href="https://www.digitalocean.com/docs/droplets/how-to/create/"&gt;documentations&lt;/a&gt; for beginners already.&lt;/p&gt;

&lt;p&gt;Just use Ubuntu 16.04 or Ubuntu 18.04 or whatever you want and the lowest price version to follow this article.&lt;/p&gt;

&lt;p&gt;You can use this as an example and hope you already made one.&lt;/p&gt;



&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc0kCJix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/DigitalOcean-Create-Droplet.png" alt="DigitalOcean Website Screentshot by steadylearner"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You can use whatever option you want but saving your resource is important.&lt;/p&gt;

&lt;p&gt;Use the lowest price option. It will be enough to test your project.&lt;/p&gt;



&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nK3hSRON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/DigitlaOcean-Lowest-Price.png" alt="DigitalOcean Website Screentshot by steadylearner"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;and we will also use Ubuntu 16.04 for our choice.&lt;/p&gt;



&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xd51IhvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/DigitalOcean-Ubuntu-16.04.png" alt="DigitalOcean Website Screentshot by steadylearner"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Your computer should have been connected with your virtual machine that the service provides with SSH like the image below following the instruction.&lt;/p&gt;

&lt;p&gt;With command &lt;strong&gt;$ssh &lt;a href="mailto:yoursite@xxx.xxx.x.xx"&gt;yoursite@xxx.xxx.x.xx&lt;/a&gt;&lt;/strong&gt;, it will show you messages like the image below.&lt;/p&gt;



&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vm7j01hO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/SSH-Connection-sucess-for-Linux-Ubuntu-16.04.png" alt="DigitalOcean Website Screentshot by steadylearner"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You will see &lt;strong&gt;username@project:~$&lt;/strong&gt; in your Linux Kernel.&lt;/p&gt;

&lt;p&gt;We are ready with DigitalOcean and we can write code to deploy our Rust Web Application with Nginx.&lt;/p&gt;

&lt;p&gt;Your Linux Virtual Machine is almost empty. It will be easy to think that you have to start from nothing.&lt;/p&gt;

&lt;p&gt;It has Git to download your project easily, Vim to edit Nginx and Rust files already. We will see how to use them later.&lt;/p&gt;

&lt;p&gt;If you forget the domain of your website, you can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;host www.steadylearner.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test it with &lt;strong&gt;$host yourwebsite&lt;/strong&gt; instead.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#2-install-dependencies-for-your-virtual-machine"&gt;
  &lt;/a&gt;
  2. Install dependencies for your virtual machine
&lt;/h2&gt;

&lt;p&gt;This is very tedious work if you had many dependencies.&lt;/p&gt;

&lt;p&gt;For your machine is just empty virtual machine, You have to install &lt;strong&gt;Rust Compiler, Cargo, Node, Nginx&lt;/strong&gt; etc to prepare the deployment.&lt;/p&gt;

&lt;p&gt;If you are familiar with &lt;strong&gt;Docker&lt;/strong&gt;, you could have used it instead to save your time.&lt;/p&gt;

&lt;p&gt;What is important is to install Rust to compile your &lt;a href="https://github.com/steadylearner/Rust-Web-App"&gt;Rust Web App&lt;/a&gt; and &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04-quickstart"&gt;Nginx&lt;/a&gt; to work as reverse proxy server for it.&lt;/p&gt;

&lt;p&gt;To advance, You have to verify minimum requirments are ready with command&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$sudo nginx -h&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCPUTiCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/Nginx.png" alt="nginx with nginx -h command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$rustup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fBBjccOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/Rustup.png" alt="rustup after installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$cargo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVz2HxhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/Cargo.png" alt="cargo command after installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and you are ready to write the real codes to deploy your website.&lt;/p&gt;

&lt;p&gt;In this post, we will use &lt;strong&gt;Rust Rocket framework&lt;/strong&gt; but you can use Actix or whatever framework and languages you want instead&lt;/p&gt;

&lt;p&gt;They will work because what you learn really in this post is how to use &lt;strong&gt;Nginx&lt;/strong&gt; as &lt;strong&gt;proxy server&lt;/strong&gt; for your web app in &lt;strong&gt;POSIX&lt;/strong&gt; system.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#3-configure-nginx-as-a-reverse-proxy-server"&gt;
  &lt;/a&gt;
  3. Configure Nginx as a reverse proxy server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPbkf7qO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/nginx.png" class="article-body-image-wrapper"&gt;&lt;img alt="Nginx from its website" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPbkf7qO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/nginx.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are almost there. You could make it work with the documenations I gave you above.&lt;/p&gt;

&lt;p&gt;But following the post will save your time, so I hope you did not tweak anything from the default yet.&lt;/p&gt;

&lt;p&gt;You will se that is just the matter of &lt;strong&gt;copy and paste&lt;/strong&gt; when you have &lt;a href="https://www.steadylearner.com"&gt;a real example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Refer to the code snippet below for Nginx save it in /etc/nginx/sites-available/ as your-domain.tld.conf&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;your-domain.tld&lt;/strong&gt; could be &lt;strong&gt;steadylearner.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just use yours instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#listen 80; # Only if sysctl net.ipv6.bindv6only = 1&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.tld&lt;/span&gt; &lt;span class="s"&gt;www.yourdomain.tld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# 1.&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# Forward requests to rocket v4.0 production port&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://0.0.0.0:8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# 2.&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_buffering&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# Single Page App work faster with it&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example is very simple but there are two points you should know.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; You need to enable &lt;strong&gt;www&lt;/strong&gt; at &lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;DigitalOcean&lt;/a&gt; to prefix it to your sitename.&lt;/p&gt;

&lt;p&gt;You may read &lt;a href="https://www.digitalocean.com/docs/networking/dns/how-to/manage-records/"&gt;how-to-manage-records&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/questions/using-cname-for-www-redirection"&gt;using-cname-for-www&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can refer to the image below.&lt;/p&gt;



&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9T5_KlI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/DigtialOcean-www-Cname.png" alt="Visit DigitalOcean to prefix www with http or https to redirect your domain"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt; is used for simpilicity, you can use &lt;strong&gt;A&lt;/strong&gt; or &lt;strong&gt;AAAA&lt;/strong&gt; record for www instead if you want to enable &lt;strong&gt;HTTPS&lt;/strong&gt; later in this post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The Rust Web framework we will use is &lt;a href="https://rocket.rs/v0.4/guide/configuration/"&gt;Rocket&lt;/a&gt; and the port for its production is &lt;a href="http://0.0.0.0:8000"&gt;http://0.0.0.0:8000&lt;/a&gt;. You had to help nginx to proxy the request to your Rust web application.&lt;/p&gt;

&lt;p&gt;You could use other port and configuration if you use another framework such as Actix or ones from other languages etc.&lt;/p&gt;

&lt;p&gt;Whenever you edit nginx relevant files, you can test it with&lt;br&gt;
&lt;strong&gt;$sudo nginx -t&lt;/strong&gt; and it will show messages similar to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it passed, you can use make sym link for the file &lt;strong&gt;your-domain.tld.conf&lt;/strong&gt; you made before with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;cd /etc/nginx/sites-enabled &amp;amp;&amp;amp; sudo ln -s ../sites-available/your-domain.tld.conf
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you made it well to this point.&lt;/p&gt;

&lt;p&gt;You will need various commands of &lt;strong&gt;nginx&lt;/strong&gt; after you deploy your website.&lt;/p&gt;

&lt;p&gt;Copy and paste them inside your &lt;strong&gt;~/.bashrc&lt;/strong&gt; file with &lt;strong&gt;$vim ~/.bashrc&lt;/strong&gt; and use $source ~/.bashrc to use them if you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You don’t have to remember details if you know what you want to do.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#nginx&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;startn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl start nginx"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;stopn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl stop nginx"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;restartn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl restart nginx"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;reloadn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl reload nginx"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;statusn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"service nginx status"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;testn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo nginx -t"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;foldern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cd /etc/nginx"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There were no diffiuclt points for Nginx. You didn’t even have to edit default &lt;strong&gt;nginx.conf&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;If you like to serve &lt;strong&gt;gzip&lt;/strong&gt; file for your Rust Rocket or other web application.&lt;/p&gt;

&lt;p&gt;You may include code snippet below and test them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="c1"&gt;#inside nginx.conf(/etc/nginx/nginx.conf)&lt;/span&gt;

&lt;span class="c1"&gt;##&lt;/span&gt;
&lt;span class="c1"&gt;# Gzip Settings&lt;/span&gt;
&lt;span class="c1"&gt;##&lt;/span&gt;

&lt;span class="k"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;"msie6"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;gzip_vary&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# it is better not to be larger than 5&lt;/span&gt;
&lt;span class="k"&gt;gzip_buffers&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;8k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_http_version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# write what you want to be served as gzip compressed file when use requested it.&lt;/span&gt;

&lt;span class="k"&gt;gzip_types&lt;/span&gt; &lt;span class="nc"&gt;text/plain&lt;/span&gt; &lt;span class="nc"&gt;text/css&lt;/span&gt; &lt;span class="nc"&gt;application/json&lt;/span&gt; &lt;span class="nc"&gt;application/javascript&lt;/span&gt; &lt;span class="nc"&gt;text/xml&lt;/span&gt; &lt;span class="nc"&gt;application/xml&lt;/span&gt; &lt;span class="nc"&gt;application/xml&lt;/span&gt;&lt;span class="s"&gt;+rss&lt;/span&gt; &lt;span class="nc"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can verify it work with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;curl http://yourdomain.com &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;--write-out&lt;/span&gt; &lt;span class="s2"&gt;"%{size_download}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--output&lt;/span&gt; /dev/null
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;curl http://yourdomain.com &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Accept-Encoding: gzip, other things"&lt;/span&gt; &lt;span class="nt"&gt;--write-out&lt;/span&gt; &lt;span class="s2"&gt;"%{size_download}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--output&lt;/span&gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the result will be much better and easier than do it without Nginx.&lt;/p&gt;

&lt;p&gt;If you managed to serve gzip files on your own, you can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;find &lt;span class="nb"&gt;.&lt;/span&gt; | &lt;span class="nb"&gt;gzip&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.ext
&lt;span class="gp"&gt;$&lt;/span&gt;find &lt;span class="nb"&gt;.&lt;/span&gt; | &lt;span class="nb"&gt;gzip&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to compress and decompress files in a target folder.&lt;/p&gt;

&lt;p&gt;You do not need webpack compressor or else to do that.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#4-save-your-project-in-your-virtual-machine"&gt;
  &lt;/a&gt;
  4. Save your project in your virtual machine
&lt;/h2&gt;

&lt;p&gt;Your virtual machine was almost empty but you could edit and save the files with &lt;strong&gt;Vim&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You could also use &lt;strong&gt;git&lt;/strong&gt; to download files for they are already pre-installed.&lt;/p&gt;

&lt;p&gt;You may donwload your project files from you GitHub repository with command like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git clone https://github.com/steadylearner/Rust-Web-App.git.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use whatever you want to save files in your virtual machine instead.&lt;/p&gt;

&lt;p&gt;You might want to do it on your home directory. For that, use $cd ~ &amp;amp;&amp;amp; mkdir yourwebsite and save your project files there.&lt;/p&gt;

&lt;p&gt;You know better what you are doing than others. It is just repeating what you have done to build the entire project. The only difference is paths to serve and link files and directories.&lt;/p&gt;

&lt;p&gt;If you are using Rust &lt;a href="https://rocket.rs/v0.4/guide/configuration/"&gt;Rocket&lt;/a&gt; for this example,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the files in your virtual machine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;$cargo check&lt;/strong&gt; first to verify everything works fine first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;$cargo run --release&lt;/strong&gt; to make production files in target directory inside your virtual machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, we will use &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files"&gt;systemd&lt;/a&gt; service to automate the process in the next part&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wanna update files later after you deploy your wbsite?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You have to repeat the command &lt;strong&gt;$cargo run --release&lt;/strong&gt; whenever you tweaked your Rust files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For static files such as HTML, CSS, JavaScript, Images and other simple files. You just substitute them and they will work.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The difference is that &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a compiled language and others are not.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#5-create-systemd-service-to-serve-your-web-application"&gt;
  &lt;/a&gt;
  5. Create systemd service to serve your web application
&lt;/h2&gt;

&lt;p&gt;You almost made it. We will refer to the &lt;a href="https://rocket.rs/v0.4/guide/configuration/"&gt;Rocket&lt;/a&gt; for development environment to use it for systemd files.&lt;/p&gt;

&lt;p&gt;It explains that there are development, staging and production environment and will be similar in other web frameworks.&lt;/p&gt;

&lt;p&gt;For we are dealing with prodcution files and ready to deploy it to the web, only care for production part.&lt;/p&gt;

&lt;p&gt;When you use &lt;a href="https://rocket.rs/v0.4/guide/configuration/"&gt;Rocket&lt;/a&gt;, it already has its own default configuration and you would not need to edit that much.&lt;/p&gt;

&lt;p&gt;Read [its documenation] and find those parts in description will be used in &lt;strong&gt;systemd service&lt;/strong&gt; later.&lt;/p&gt;

&lt;p&gt;If you want to learn more about what &lt;strong&gt;servie&lt;/strong&gt; mean here, you may refer to&lt;/p&gt;

&lt;p&gt;"A service unit describes how to manage a service or application on the server. This will include how to start or stop the service, under which circumstances it should be automatically started, and the dependency and ordering information for related software"&lt;/p&gt;

&lt;p&gt;from &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, make &lt;strong&gt;/etc/systemd/system/your-domain.tld.service&lt;/strong&gt; and write content in it similar to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit]
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Web Application Example from steadylearner

&lt;span class="o"&gt;[&lt;/span&gt;Service]
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;www-data
&lt;span class="nv"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;www-data
&lt;span class="nv"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/yourname/yourwebsite/yourproject/
&lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ROCKET_ENV=prod"&lt;/span&gt;
&lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ROCKET_ADDRESS=0.0.0.0"&lt;/span&gt;
&lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ROCKET_PORT=8000"&lt;/span&gt;
&lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ROCKET_LOG=critical"&lt;/span&gt;
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/yourname/yourwebsite/yourproject/target/release/yourproject

&lt;span class="o"&gt;[&lt;/span&gt;Install]
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should find the right path for your project and everything is ready.&lt;/p&gt;

&lt;p&gt;Test in your virtual machien console with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start your-domain.tld.service.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will make your &lt;a href="https://rocket.rs/v0.4/guide/configuration/"&gt;Rocket&lt;/a&gt; or other framework you use to compile production files and serve them to port instead of you.&lt;/p&gt;

&lt;p&gt;You may visit your domain your-domain.tld at this point.&lt;/p&gt;

&lt;p&gt;If you want, you can save the command similar to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;verifywebsite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"curl curl https://www.steadylearner.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in your ~/.bashrc file or you can use &lt;strong&gt;$ping&lt;/strong&gt; instead if you are familiar with Linux Commands.&lt;/p&gt;

&lt;p&gt;The result will be response from Nginx or your production web pages if you could make it work.&lt;/p&gt;

&lt;p&gt;You can verify the real exmaple at &lt;a href="https://www.steadylearner.com"&gt;Steadylearner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hope you made it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may write more alias in your &lt;strong&gt;~/.bashrc&lt;/strong&gt; similar to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ufw firewall(install ufw first)&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;allownginx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo ufw allow 'Nginx Full'"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;reloadufw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo ufw reload"&lt;/span&gt;

&lt;span class="c"&gt;# systemd service&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl start yourdomain.tld.service"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl stop yourdomain.tld.service"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl status yourdomain.tld.service"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;reload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl daemon-reload"&lt;/span&gt;
&lt;span class="c"&gt;# It works automatically for every reboot, use it just once.&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;autoreload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sudo systemctl enable yourdomain.tld.service"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was all to deploy your Rust Web application to the web with &lt;strong&gt;Nginx&lt;/strong&gt; and &lt;strong&gt;systemd&lt;/strong&gt; service in Linux Virtual Machine.&lt;/p&gt;

&lt;p&gt;You may use other web frameworks also. You just need to edit the paths and configuration parts for it.&lt;/p&gt;

&lt;p&gt;If you want to allow HTTPS for your website, please follow the next part.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#6-https-for-your-website"&gt;
  &lt;/a&gt;
  6. HTTPS for your website
&lt;/h2&gt;

&lt;p&gt;What we need to enable https for our website are just a few lines of commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;certbot &lt;span class="nt"&gt;--nginx&lt;/span&gt; &lt;span class="c"&gt;# 1.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;certbot renew &lt;span class="nt"&gt;--dry-run&lt;/span&gt; &lt;span class="c"&gt;# 2.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Refer to the official documenation from &lt;a href="https://certbot.eff.org/docs/using.html#nginx"&gt;cerbot&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04"&gt;the documentation&lt;/a&gt; from DigitalOcean about &lt;strong&gt;renew --dry -run&lt;/strong&gt; command&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From the first process with &lt;strong&gt;$sudo certbot --nginx&lt;/strong&gt;, you will see the processes similar to&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6ghBWJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/https-cert-process.png" alt="https-cert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Md9sgtMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/https-enable-process.png" alt="https-enable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would have shown certificate will expire later and you have to do some process for that.&lt;/p&gt;

&lt;p&gt;We are ready for it. You just need to use &lt;strong&gt;$sudo certbot renew --dry-run&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pages.news.digitalocean.com/dcn/AyKQ30vur1Nt8H30LIWxk-j5xHmafGnoECQwn1ooO76IYFHzigM_y4fqCVuHjuXsYYmKVEtVdAWxss0KUtUjfw==/DE3v00e0DIX002276X3M0VM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DFUFgMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.steadylearner.com/static/images/post/deploy/https-renew.png" alt="https-renew"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that it is just simulating the renewal process in the description.&lt;/p&gt;

&lt;p&gt;Then, you can visit your website and &lt;a href="https://www.steadylearner.com"&gt;https is enabled&lt;/a&gt; for it.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#7-conclusion"&gt;
  &lt;/a&gt;
  7. Conclusion
&lt;/h2&gt;

&lt;p&gt;I know that it is not easy to follow this post.&lt;/p&gt;

&lt;p&gt;You did well if you made it. Otherwise you can eventually achieve what you want.&lt;/p&gt;

&lt;p&gt;You can deploy a web application made with &lt;strong&gt;Rust&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I felt that there is nothing special in using Rust for web development with Nginx and Linux.&lt;/p&gt;

&lt;p&gt;Only ports to serve files would be different from others and the rest of the process will be similar.&lt;/p&gt;

&lt;p&gt;You may do the same for other programming languages and frameworks also.&lt;/p&gt;

&lt;p&gt;What you learnt is how to use Nginx and systemld for whatever web frameworks written in any programming languages.&lt;/p&gt;

&lt;p&gt;It was the sum of the previous posts I wrote before.&lt;/p&gt;

&lt;p&gt;You may visit &lt;a href="https://medium.com/@steadylearner/how-to-deploy-rust-web-application-8c0e81394bd5"&gt;one of them&lt;/a&gt; if you have problem with this post or you may search &lt;a href="https://www.google.com/search?&amp;amp;q=how+to+deploy+rust"&gt;How to deploy Rust&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks and please share this post with others&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>webdev</category>
      <category>deploy</category>
      <category>digitalocean</category>
    </item>
    <item>
      <title>Detect Internet Connection Status In Browser</title>
      <author>Bibek</author>
      <pubDate>Wed, 12 May 2021 15:18:12 +0000</pubDate>
      <link>https://dev.to/bibekkakati/detect-internet-connection-status-in-browser-2ab6</link>
      <guid>https://dev.to/bibekkakati/detect-internet-connection-status-in-browser-2ab6</guid>
      <description>&lt;p&gt;Hello everyone 👋&lt;/p&gt;

&lt;p&gt;In this article, we are going to learn how can we detect the internet connection state on our website.&lt;/p&gt;

&lt;p&gt;This can be very useful to improve user experience by showing snack messages or pop-ups when the browser is not able to connect to the internet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;We can get the current state of the connection by using &lt;code&gt;window.navigator.onLine&lt;/code&gt;, which will return a &lt;code&gt;boolean&lt;/code&gt; value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;true&lt;/code&gt; if connected.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;false&lt;/code&gt; if not connected.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Is connected to internet&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Not connected to internet&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If the browser doesn't support &lt;code&gt;window.navigator.onLine&lt;/code&gt; the above example will always come out as &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#connection-state-changes-listener"&gt;
  &lt;/a&gt;
  Connection State Changes Listener
&lt;/h4&gt;

&lt;p&gt;We can also detect the connection state by listening for network state change events i.e, &lt;code&gt;online&lt;/code&gt; and &lt;code&gt;offline&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Network disconnected&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Network connected&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's very easy to implement but there are some side cases where it might give a false-positive result.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The computer is connected to a mobile hotspot, but mobile internet is not working then also you can get an &lt;code&gt;online&lt;/code&gt; status.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The computer is running a virtualization software that has virtual ethernet adapters that are always "connected".&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/detect-internet-connection-status-in-browser"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading 🙏&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Double comparison in Java</title>
      <author>Pavel Polívka</author>
      <pubDate>Wed, 12 May 2021 15:01:20 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/double-comparison-in-java-1b7</link>
      <guid>https://dev.to/pavel_polivka/double-comparison-in-java-1b7</guid>
      <description>&lt;p&gt;Recently I was solving an interesting bug that came down to comparing two &lt;code&gt;Double&lt;/code&gt; variables with &lt;code&gt;equals&lt;/code&gt; method. It looks innocent, what can be wrong with something like &lt;code&gt;firstDouble.equals(secondDouble)&lt;/code&gt;? &lt;br&gt;
The problem here is with how doubles are stored. To fit them into 64bytes (usually) they are rounded. &lt;/p&gt;

&lt;p&gt;See the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="n"&gt;firstDouble&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;firstDouble&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="n"&gt;secondDouble&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4.200000000000001&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4.2&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This inaccuracy is caused by rounding errors.&lt;br&gt;
We need to use a different approach to compare those doubles. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#threshold-method"&gt;
  &lt;/a&gt;
  Threshold method
&lt;/h2&gt;

&lt;p&gt;If we do not have access to any libraries and want to solve this with Java only we can use something called the threshold method. &lt;br&gt;
Simply, we will subtract those doubles, make absolute value, and compare if the result is smaller than some very small number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.000001d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That small number is called epsilon and the smaller it is the better the accuracy of the result. For most cases, 5 decimals should be enough. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apache-commons-math"&gt;
  &lt;/a&gt;
  Apache Commons Math
&lt;/h2&gt;

&lt;p&gt;There is no utility method for this in JDK. Luckily for us, Apache Commons Math library has us covered. With it we can compare those doubles like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.000001d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Precision&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The epsilon has the same meaning as in the example above. &lt;/p&gt;

&lt;p&gt;There are similar methods in Guava and other libraries. &lt;/p&gt;




&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt; to get more tips like this. &lt;/p&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Diving into Husky and Lint-staged</title>
      <author>Laurie</author>
      <pubDate>Wed, 12 May 2021 14:47:52 +0000</pubDate>
      <link>https://dev.to/laurieontech/diving-into-husky-and-lint-staged-2hni</link>
      <guid>https://dev.to/laurieontech/diving-into-husky-and-lint-staged-2hni</guid>
      <description>&lt;p&gt;Last week I talked about &lt;a href="https://laurieontech.com/posts/eslint/"&gt;ESLint&lt;/a&gt; and its usefulness for keeping projects consistent amongst multiple contributors. If you haven't read that post I recommend doing so before diving into this one.&lt;/p&gt;

&lt;p&gt;Today, we're going to focus on running ESLint automatically to ensure that the main branch of your project always follows your specific ruleset.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lintstaged"&gt;
  &lt;/a&gt;
  Lint-staged
&lt;/h2&gt;

&lt;p&gt;The first tool to talk about is &lt;a href="https://www.npmjs.com/package/lint-staged"&gt;lint-staged&lt;/a&gt;. Lint-staged is configured in your package.json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the above example, you can use a glob pattern to tell lint-staged which files to run against. Additionally, you can give lint-staged a command to execute against those files. In many cases, you'll want more than one command, which lint-staged supports. In this case, you'll run ESLint and &lt;a href="https://prettier.io/"&gt;prettier&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So how does lint-staged work? It's specifically designed to work on "staged" files, thus the name. This means files you've changed or created but haven't yet committed to your project. Working on staged files limits the number of files you need to lint at any given time and makes the workflow faster. The commands you configure will run "pre-commit". As you're attempting to commit files to your project you'll see ESLint run in your terminal. Once it's done you may have successfully committed or find yourself with linting errors you need to fix before you're able to commit the code.&lt;/p&gt;

&lt;p&gt;However, what you may not realize, is that lint-staged is not the only tool working under the hood. Lint-staged is designed to work with another tool called &lt;a href="https://www.npmjs.com/package/husky"&gt;husky&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#husky"&gt;
  &lt;/a&gt;
  Husky
&lt;/h2&gt;

&lt;p&gt;You may have come across husky before without noticing. For many years it was configured via a few lines of code in your package.json file. Something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lint-staged"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the latest version of husky, v6, has changed this approach. Now, husky uses distinct bash files with filenames that match the workflow step they correspond to, e.g. "pre-commit". Luckily you don't have to set this up yourself and husky has a nice CLI command to do it for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky-init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install
&lt;/span&gt;npx husky add .husky/pre-commit &lt;span class="s2"&gt;"npm test"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of the command is a one-time initialization script that ensures all your coworkers will have husky installed on their machine before they try to commit files.&lt;/p&gt;

&lt;p&gt;The second line creates the &lt;code&gt;pre-commit&lt;/code&gt; file inside the &lt;code&gt;.husky&lt;/code&gt; directory. If you look at the file you'll notice it's running a &lt;code&gt;husky.sh&lt;/code&gt; script prior to whatever commands you initialized it with. This can technically be removed, but I'd recommend keeping it. The script allows for a few things, including the use of a &lt;code&gt;--no-verify&lt;/code&gt; flag that bypasses the checks.&lt;/p&gt;

&lt;p&gt;Once you've initialized the directory and associated file you can add whatever commands you want to it. In my case, I replaced &lt;code&gt;npm test&lt;/code&gt; with &lt;code&gt;npm lint-staged&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepush"&gt;
  &lt;/a&gt;
  Pre-push
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;pre-commit&lt;/code&gt; workflow is more or less the husky happy path. But what if your project doesn't want to lint on commit and would prefer to lint when a developer attempts to push their changes to a branch?&lt;/p&gt;

&lt;p&gt;While it's tempting to create a &lt;code&gt;.husky/pre-push&lt;/code&gt; file and run lint-staged, it won't work. The &lt;code&gt;pre-push&lt;/code&gt; husky workflow is correct, but running lint-staged at that point will turn up 0 matching files. This makes sense, though it certainly messed me up for a bit, because committed files are no longer staged. Instead, you have a couple of options.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run ESLint against all the files: &lt;code&gt;eslint '*.js'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Diff against &lt;code&gt;main&lt;/code&gt;: &lt;code&gt;eslint --no-error-on-unmatched-pattern $(git diff main... --name-only --- '*.js')&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that this is one example of a diff command and there are numerous considerations depending on your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-and-ci"&gt;
  &lt;/a&gt;
  Next steps and CI
&lt;/h2&gt;

&lt;p&gt;Running ESLint, or prettier, or even tests as part of your git workflow is important because it helps you fail fast. However, it's not a replacement for CI checks. Typically, you'll want to run these commands in both environments to ensure nothing slips through.&lt;/p&gt;

&lt;p&gt;But altogether these tools help ensure a cleaner, more consistent production codebase. Long term, that's a big win for any project.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Microblogging with Serverless Redis</title>
      <author>K</author>
      <pubDate>Wed, 12 May 2021 14:41:08 +0000</pubDate>
      <link>https://dev.to/fllstck/microblogging-with-serverless-redis-2nl3</link>
      <guid>https://dev.to/fllstck/microblogging-with-serverless-redis-2nl3</guid>
      <description>&lt;p&gt;I'm still in search of a datastore for my microblogging SaaS product. I read the DynamoDB book and had the impression that the database isn't quite optimal.&lt;/p&gt;

&lt;p&gt;Last week I found out about &lt;a href="https://upstash.com/"&gt;Upstash&lt;/a&gt;, a managed database service with a Redis compatible API. It also comes with on-demand pricing, so I thought, let's take a look!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-upstash"&gt;
  &lt;/a&gt;
  What is Upstash?
&lt;/h2&gt;

&lt;p&gt;It's a managed database service that is API compatible with Redis, &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-databases-loved4"&gt;the key-value store you all seem to love&lt;/a&gt;. And it comes with a serverless pricing model, starting with a free tier for small databases.&lt;/p&gt;

&lt;p&gt;It can be deployed into the cloud, and region, of your choice, so the latency of most requests is usually way below hundred milliseconds. &lt;/p&gt;

&lt;p&gt;Upstash, like DynamoDB, is a NoSQL database, but Upstash goes more in the direction of simplicity, which requires you to put more of the data modeling into your application code.&lt;/p&gt;

&lt;p&gt;Oh and, it comes with a GraphQL API because that's a thing now, right? When they get on-par with Redis features like pub/sub, this will map very nicely to GraphQL subscriptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microblogging-with-redis"&gt;
  &lt;/a&gt;
  Microblogging with Redis
&lt;/h2&gt;

&lt;p&gt;I plan to build a company-internal microblogging service. I got the idea when I was scrolling through Twitter one morning, thinking, "I get all news from my industry by scrolling on my phone. Wouldn't it be cool if people could get their work-related news in a similar way?"&lt;/p&gt;

&lt;p&gt;Anyway, I mostly a frontend developer. I did a few APIs back in the days with PHP and Node.js, but this wasn't my core competency. The backend work usually didn't require me to choose database technology. The "real" backend developer already did, and I just had to use it—file system storage, MySQL, MongoDB, RethinkDB, PostgreSQL, and whatnot. &lt;/p&gt;

&lt;p&gt;Finding a good database for my use case has proven to be quite a chore, but a welcome one, because I read many interesting things about databases in the last weeks.&lt;/p&gt;

&lt;p&gt;After I found out about Upstash, I looked into their offering and Redis, and until now, I like what I see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; seems to be very simple; for example, it doesn't allow for nested data structures. On the other hand, it has very low latency, and many commands are O(1) in complexity, making building on top of this intriguing.&lt;/p&gt;

&lt;p&gt;One of my goals for this project was to keep it as serverless as possible, so Upstash's on-demand pricing and free tier come in rather handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-modeling-with-redis"&gt;
  &lt;/a&gt;
  Data modeling with Redis
&lt;/h2&gt;

&lt;p&gt;Upstash doesn't support all of Redis's features yet, so I would have to get by with the basics. But I think this isn't an issue since simplicity seems to be the spirit of Redis anyways.&lt;/p&gt;

&lt;p&gt;My system will let people write small blogposts, like Twitter. These usually belong to a company, a user, and one or more teams. They will also have hashtags, because why not?&lt;/p&gt;

&lt;p&gt;The requirement that every post belongs to a company can be solved with one database per company; this follows &lt;a href="https://www.opsguru.io/post/data-stores-in-multi-tenant-solutions"&gt;the siloed multi-tenancy model&lt;/a&gt;, which leads to decent isolation.&lt;/p&gt;

&lt;p&gt;The requirement that every post belongs to one user is simple too, in the production environment, I would simply use a hash to store a post and add a field for the user ID to it.&lt;/p&gt;

&lt;p&gt;But what about things like teams and hashtags?  After all, every post has multiple hashtags and teams, and every team and hashtag can have multiple posts. Many-to-many relationships are usually the prime domain of relational databases, but can they be done with Upstash?&lt;/p&gt;

&lt;p&gt;It turns out they can! &lt;/p&gt;

&lt;p&gt;I tried this out with hashtags. A string that contains text, which, in turn, is sprinkled with hashtags, is my data model for the posts.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post:id  -&amp;gt;  3
posts    -&amp;gt;  [post:1, post:2, post:3]
post:1   -&amp;gt;  "A blog post with a #cool hashtag."
post:2   -&amp;gt;  "Another post with a #cool hashtag!" 
post:3   -&amp;gt;  "And the third post, with #another hashtag."
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;post:id&lt;/code&gt; item is just an integer that gets incremented when a new post is created, so the next post can use it to generate its ID. Seemingly this is how it's done in Redis, but I will investigate further. For this experiment, this should suffice.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;posts&lt;/code&gt; item holds &lt;a href="https://redis.io/topics/data-types"&gt;a set&lt;/a&gt; with all the posts created. Sets, sorted sets, and lists can hold up to four billion entries, so I think they should be future proof for quite some time. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4,000,000,000 posts / 10,000 users / 10 years / 52 weeks
is roughly 750 posts/week
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For the hashtags, I'm using a set too. A sorted set or a list is probably the better solution in the real system since the posts need to be sorted by their creation date.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hashtag:cool     -&amp;gt;  [post:1, post:2]
hashtag:another  -&amp;gt;  [post:3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#connecting-to-upstash"&gt;
  &lt;/a&gt;
  Connecting to Upstash
&lt;/h2&gt;

&lt;p&gt;Let's try this out with some example code!&lt;/p&gt;

&lt;p&gt;I created &lt;a href="https://github.com/fllstck/upstash-cdk-microblog-api"&gt;a project on GitHub&lt;/a&gt;. I used the CDK to create an API Gateway backed by a Lambda function that connects to Upstash.&lt;/p&gt;

&lt;p&gt;In  &lt;code&gt;lib/upstash-microblogging-stack.ts&lt;/code&gt; you will find the environment variables used by the Lambda function for the Upstash connection.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;REDIS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;DATABASE_ENDPOINT&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;REDIS_PORT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;DATABASE_PORT&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;DATABASE_PASSWORD&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You find the values for &lt;code&gt;&amp;lt;DATABASE_ENDPOINT&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;DATABASE_PORT&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;DATABASE_PASSWORD&amp;gt;&lt;/code&gt; in the Upstash console after you created a database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSmaTzTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd82kr49h1hh5w3wioo9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSmaTzTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd82kr49h1hh5w3wioo9.png" alt="Upstash database credentials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The actual database connection happens inside the Lambda function code, which is located at &lt;code&gt;lib/backend/index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I created the connection outside of the function body, so it's only created on a cold start. All subsequent requests handled by that Lambda function are handled with the same connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#crud-with-upstash"&gt;
  &lt;/a&gt;
  CRUD with Upstash
&lt;/h2&gt;

&lt;p&gt;Okay, no update for this experiment; let's keep things simple. Just create, read and delete. Also, no read for one post; only read for all posts or filtered by hashtag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create"&gt;
  &lt;/a&gt;
  Create
&lt;/h3&gt;

&lt;p&gt;Let's start with the creation of a post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`post:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;extractHashtags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`hashtag:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, I get the next &lt;code&gt;id&lt;/code&gt; for the &lt;code&gt;postKey&lt;/code&gt; from the &lt;code&gt;post:id&lt;/code&gt; item; then, I create a &lt;code&gt;transaction&lt;/code&gt; for the post creation.&lt;/p&gt;

&lt;p&gt;I don't have enough Redis knowledge to know if this one of these commands could fail if another client did something in-between, so I used the transaction. Otherwise, &lt;a href="https://redis.io/topics/pipelining"&gt;a pipeline&lt;/a&gt; would probably enough, which wouldn't lock the whole database until all commands are done.&lt;/p&gt;

&lt;p&gt;Anyhow, I create a new post, add its key to the &lt;code&gt;posts&lt;/code&gt; set that keeps track of all posts and add it to the sets of every hashtag in that post.&lt;/p&gt;

&lt;p&gt;I use a utility function to extract the hashtags from the string and remove the hash character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractHashtags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/#&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="sr"&gt;*/gm&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Redis and, in turn, Upstash are pretty chill about adding and creating sets, so if you add something to a non-existing set, it will be created.&lt;/p&gt;

&lt;p&gt;When I call &lt;code&gt;exec&lt;/code&gt; on the &lt;code&gt;transaction&lt;/code&gt; the whole batch of commands will be sent to Upstash, locking the database until every command was executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read"&gt;
  &lt;/a&gt;
  Read
&lt;/h3&gt;

&lt;p&gt;The next step is to read the posts we created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;listPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hashtag&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`hashtag:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKeys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postKeys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;listPosts&lt;/code&gt; function would get the content of the &lt;code&gt;hashtag&lt;/code&gt; query parameter if it were supplied in the request.&lt;/p&gt;

&lt;p&gt;Then it either fetches the post keys from the corresponding hashtag item or the &lt;code&gt;posts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some small transformation to create a JSON object for the API client, and we can respond!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  Delete
&lt;/h3&gt;

&lt;p&gt;To delete a post, we have to update all the sets we created too!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;extractHashtags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`hashtag:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, I use a transaction and add all the commands. Remove the &lt;code&gt;postKey&lt;/code&gt; from the &lt;code&gt;posts&lt;/code&gt; set, remove it from the hashtag sets, and then delete the post item itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Upstash is a fresh take on managed Redis deployments. With the free tier and on-demand pricing, it's pretty cheap to start with.&lt;/p&gt;

&lt;p&gt;Since it's just a key-value store, it requires you to do more data modeling in your own code, and for this,  I should read more about Redis in general before considering it for my product. I will probably end up wrapping the whole thing in a data layer that keeps track of all the relationships. But since the latency is so very low, it should make sense to use Upstash as a primitive for building a data model.&lt;/p&gt;

&lt;p&gt;Some Redis features are still missing, and if you need a full-text search (which I'd love to have for my product) or geospatial queries, you have to wait, but overall it seems like a solid offering.&lt;/p&gt;

&lt;p&gt;It would also be cool to integrate with infrastructure as code tools like the CDK or Pulumi, but I think this isn't a big problem because they already offer an API to manage the databases.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>database</category>
      <category>redis</category>
    </item>
    <item>
      <title>Blockchain with Solidity: What to Learn First</title>
      <author>Nick Groos</author>
      <pubDate>Wed, 12 May 2021 14:34:49 +0000</pubDate>
      <link>https://dev.to/groos/learning-blockchain-with-solidity-what-i-googled-first-25o6</link>
      <guid>https://dev.to/groos/learning-blockchain-with-solidity-what-i-googled-first-25o6</guid>
      <description>&lt;p&gt;Getting started in a blockchain development environment can feel completely foreign, especially if you are coming from web development.&lt;/p&gt;

&lt;p&gt;Here is an overview of some key items I had to learn about in my first few days with Solidity:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web3"&gt;
  &lt;/a&gt;
  Web3
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://web3.foundation/"&gt;Web3&lt;/a&gt; is a term you will see often. In broad terms, it refers to certain interfaces and tools that make it easy to integrate with crypto wallets (like Metamask) and other blockchain-related functionality. There are a growing number of libraries that expose Web3 functionality in different dev environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metamask"&gt;
  &lt;/a&gt;
  Metamask
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://metamask.io/"&gt;Metamask&lt;/a&gt; is currently the standard browser-based wallet to use while learning blockchain development. It has built-in integration with IDE and Testnet environments (more on this below) which makes it easy to acquire and use test Ether.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gas"&gt;
  &lt;/a&gt;
  Gas
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You have to pay gas (ether) to "change" the blockchain. This includes making a payment transaction, updating the state of a smart contract, or deploying a smart contract.&lt;/li&gt;
&lt;li&gt;Consider your gas payment to be the transaction fee paid to the miners running the network&lt;/li&gt;
&lt;li&gt;Your Solidity code should be optimized to &lt;a href="https://medium.com/@tyguyo/efficient-ethereum-smart-contract-storage-361e4f126bbd"&gt;reduce gas cost&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#remix-and-hardhat"&gt;
  &lt;/a&gt;
  Remix and Hardhat
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://remix.ethereum.org/"&gt;Remix&lt;/a&gt; is an online IDE for compiling and deploying contracts written in Solidity. It is the quickest way to start working with smart contracts. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt; is a framework for doing blockchain development in a local environment. It can also deploy to live and testnet environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testnets-and-testnet-faucets"&gt;
  &lt;/a&gt;
  Testnets and Testnet Faucets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Testnets are test blockchain environments. Use them to deploy and test smart contracts without having to spend real crypto on gas.&lt;/li&gt;
&lt;li&gt;Testnet Faucets will send cryptocurrency to your Metamask wallet which can be used on the Testnet environments.

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://faucet.kovan.network/"&gt;Kovan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://faucet.ropsten.be/"&gt;Ropsten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://faucet.rinkeby.io/"&gt;Rinkeby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#erc20"&gt;
  &lt;/a&gt;
  ERC-20
&lt;/h3&gt;

&lt;p&gt;This is a spec for implementing fungible tokens. &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/"&gt;Read about it here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#erc721"&gt;
  &lt;/a&gt;
  ERC-721
&lt;/h3&gt;

&lt;p&gt;This is a spec for implementing non-fungible tokens. &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;Read about it here&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope this list can save some time for anyone else out there learning Solidity. Let me know in the comments if there is something you think I should add.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
