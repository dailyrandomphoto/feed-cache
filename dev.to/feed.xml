<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Importing Data From The Web Into Python</title>
      <author>Olayinka Atobiloye</author>
      <pubDate>Wed, 10 Feb 2021 16:47:28 +0000</pubDate>
      <link>https://dev.to/olayinkaatobiloye/importing-data-from-the-web-into-python-3h0n</link>
      <guid>https://dev.to/olayinkaatobiloye/importing-data-from-the-web-into-python-3h0n</guid>
      <description>&lt;p&gt;Throughout your journey as a Data Scientist, you will find yourself regularly dealing with data. Sometimes, these data are readily available, while other times, you have to source for and gather the data yourself.&lt;/p&gt;

&lt;p&gt;Your data can be gathered from various sources, but more often than not, you would get these data from the web.&lt;/p&gt;

&lt;p&gt;Now imagine you found a website that has this gigantic enormous data that you find very useful. Unfortunately, there is no way you can download the contents on this website onto your device for analysis.&lt;/p&gt;

&lt;p&gt;Manually collating the data from the website would cost you a great amount of time. Fortunately, you can seamlessly import these data using some Python packages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-data-using-urlretrieve" class="anchor"&gt;
  &lt;/a&gt;
  Importing data using &lt;em&gt;urlretrieve&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Import the function &lt;em&gt;urlretrieve&lt;/em&gt; from the &lt;em&gt;urllib.request&lt;/em&gt; subpackage.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lR6ivLga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xhxc7tyih4dqz5lc7x4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lR6ivLga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xhxc7tyih4dqz5lc7x4k.png" alt="source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assign the url of the website to a variable - ‘url’ is used as example here.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the function &lt;em&gt;urlretrieve&lt;/em&gt; to save this file locally. Pass two arguments to the function - the url of the website (which has been assigned to the variable ‘url’)  and the name you wish to save the file as.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoCPXJuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whefm4l2kjtv84k1schp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoCPXJuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whefm4l2kjtv84k1schp.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data is now saved as a file on your device, which you can manage and wrangle as you wish.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-data-using-urlopen-and-request" class="anchor"&gt;
  &lt;/a&gt;
  Importing data using &lt;em&gt;urlopen&lt;/em&gt; and &lt;em&gt;Request&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;To fully understand how this works, you need to have a basic understanding of HTTP requests. But worry not, even if you do not understand requests, you can follow the steps below and import data from the web.&lt;/p&gt;

&lt;p&gt;Import the functions urlopen and Request from the subpackage urllib.request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NivY7wza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/suf6ig12ori21nk8psok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NivY7wza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/suf6ig12ori21nk8psok.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specify the url.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Package the request by calling Request on the url.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rg9B8dRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3e8wfmy7i8oqsppj51s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rg9B8dRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3e8wfmy7i8oqsppj51s.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Send the request and catch the response.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lj_xi3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfqpbkfpo4h79vptswut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lj_xi3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfqpbkfpo4h79vptswut.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response gotten from your request is an object. To extract the content of the html, call the read method on the response object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q25NPslP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u6dcbfl1megew2ptvdzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q25NPslP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u6dcbfl1megew2ptvdzu.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can then print, wrangle and manage the content of the webpage.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWmHPpvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r97qlerq1n34tv9zsydv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWmHPpvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r97qlerq1n34tv9zsydv.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-data-with-requests" class="anchor"&gt;
  &lt;/a&gt;
  Importing Data With &lt;em&gt;requests&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Then here comes the almighty requests package. It is an easier and more recommended way of performing the same import performed with urllib above.&lt;/p&gt;

&lt;p&gt;Import the request package.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6PO2CEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5etg3mpkgol1tv7yjo6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6PO2CEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5etg3mpkgol1tv7yjo6t.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specify the url.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1f5EFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g9ih38813pbguudb8b5.png" alt="Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Call requests' get method on the url. This packages the request, sends it and catches the response. All with one command. Pretty cool, right?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3u1tnuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bxogvwatoxvpyzilwmw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3u1tnuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bxogvwatoxvpyzilwmw3.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response is an HTTP object. To access the contents of the response, call the text attribute on the object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0blDomMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/608m9gooq9j7leey1grr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0blDomMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/608m9gooq9j7leey1grr.png" alt="Source Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;Note that there are several other actions you could take with the packages used above, like interacting with an API. However, for the context of this article, we are only concerned with using them for importing data from a webpage.&lt;/blockquote&gt;

&lt;p&gt;Woohoo! You can now easily import data from the web with Python. &lt;br&gt;
The data imported however are HTML contents, with html tags, and other html attributes. They are therefore not quite ready for use or analysis. &lt;/p&gt;

&lt;p&gt;To make them ready for use, you have to format them using a package called BeautifulSoup. This will be discussed in a follow-up article.&lt;/p&gt;

&lt;p&gt;Till then, keep importing data with these packages and doing wonders with Python.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React children 👶 💭 – why, when, how</title>
      <author>Franca</author>
      <pubDate>Wed, 10 Feb 2021 15:52:24 +0000</pubDate>
      <link>https://dev.to/franca/react-children-2k4e</link>
      <guid>https://dev.to/franca/react-children-2k4e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#use-case" class="anchor"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h2&gt;

&lt;p&gt;React is great for building reusable components. Components often come in multiple variations – most of the time we can pass &lt;strong&gt;props&lt;/strong&gt; to the component and all good.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, what if we build a component that doesn’t only change in style but also contains different JSX? This is often the case with complex, nested components like accordions, carousels and tabs or buttons with text and icon.&lt;/p&gt;

&lt;p&gt;To keep it simple, imagine a &lt;code&gt;&amp;lt;Post /&amp;gt;&lt;/code&gt; component for a blog post. All posts look alike but vary in content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfNpe72_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d4sf1zp9mgfhub7l9qrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfNpe72_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d4sf1zp9mgfhub7l9qrz.png" alt="The Post.js component within App.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The plain &lt;code&gt;Post&lt;/code&gt; component could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To use &lt;code&gt;Post&lt;/code&gt; in &lt;code&gt;App.js&lt;/code&gt; , it's &lt;em&gt;possible&lt;/em&gt; to create a property, e.g. &lt;code&gt;content&lt;/code&gt; that contains all kind of JSX like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: the empty &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; tag is a &lt;a href="https://reactjs.org/docs/fragments.html#short-syntax"&gt;Fragment&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://codesandbox.io/s/props-example-8mks2?file=/src/App.js"&gt;CodeSandbox example here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s just that this solution doesn’t look simple and clean. It’s not that we want to pass certain properties to the component, it’s more that we want to &lt;strong&gt;define what’s inside&lt;/strong&gt;.  In this case, use React children!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-children-in-action" class="anchor"&gt;
  &lt;/a&gt;
  React Children In Action 👶
&lt;/h2&gt;

&lt;p&gt;You don’t pass children like a property, you place it &lt;strong&gt;inside the component tags&lt;/strong&gt; as if you'd write plain old HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This looks so much better! It feels like writing HTML with superpowers!&lt;/em&gt; ✨&lt;/p&gt;

&lt;p&gt;You created your own component &lt;code&gt;&amp;lt;Post&amp;gt;&lt;/code&gt; and filled it with JSX tags. You can insert custom React components as well!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TF6vMfyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dm2ue56e42e86usr4vs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TF6vMfyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dm2ue56e42e86usr4vs0.png" alt="The Post component consists of various different elements."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But – we have to tweak the component itself a little. At the moment, the Post component looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As children are special properties, you don’t have to declare them when using the component, but you have to tell the component itself that &lt;strong&gt;children are welcome&lt;/strong&gt;. The word &lt;code&gt;children&lt;/code&gt; is a special word in the React world with a set meaning like &lt;code&gt;function&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the next step, you have to define the children's location inside the component’s JSX structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3qRVdRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhsnl2ixg8ekvksdujif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3qRVdRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhsnl2ixg8ekvksdujif.png" alt="Post.js contains fixed JSX tags as well as a space for flexible children."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://codesandbox.io/s/children-example-5z93h?file=/src/App.js"&gt;CodeSandbox example here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caution" class="anchor"&gt;
  &lt;/a&gt;
  ⚠️ Caution
&lt;/h2&gt;

&lt;p&gt;Only use children if you can’t control the component’s content. If you know that a component is always going to be based on the same JSX structure, it’s better to pass string props for the heading, etc. &lt;strong&gt;Be as strict as possible.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, don’t try to style the children. Don’t do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You don’t have a place to define that CSS class. &lt;/p&gt;

&lt;p&gt;There are several options in this case:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-smaller-components" class="anchor"&gt;
  &lt;/a&gt;
  1. Create Smaller Components
&lt;/h3&gt;

&lt;p&gt;If the heading is used universally, you could create a Heading component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Heading&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-use-props-instead" class="anchor"&gt;
  &lt;/a&gt;
  2. Use Props Instead
&lt;/h3&gt;

&lt;p&gt;If you want to use a special &lt;code&gt;post__heading&lt;/code&gt; class, the &lt;code&gt;Post&lt;/code&gt; component itself is the right place to do this. Just pass the heading as a normal prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// Property&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Children&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;See&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-split-component-into-smaller-functions" class="anchor"&gt;
  &lt;/a&gt;
  3. Split Component Into Smaller Functions
&lt;/h3&gt;

&lt;p&gt;This is my advice if you want to style the children specifically and use more than one JSX tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostMain&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;See&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;See it in action in &lt;a href="https://codesandbox.io/s/split-component-into-smaller-functions-360eu?file=/src/Post/Post.js"&gt;this CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-case-split-up-your-children" class="anchor"&gt;
  &lt;/a&gt;
  Advanced Case: Split Up Your Children
&lt;/h2&gt;

&lt;p&gt;We can go even further and split our &lt;code&gt;Post&lt;/code&gt; components into intro, main and outro 😎&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostIntro&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Intro&lt;/span&gt; &lt;span class="nx"&gt;paragaph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PostIntro&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostMain&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PostMain&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostOutro&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PostOutro&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;PostIntro&lt;/code&gt;, &lt;code&gt;PostMain&lt;/code&gt; and &lt;code&gt;PostOutro&lt;/code&gt; are small, separate components that can be used as children inside the &lt;code&gt;Post&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostIntro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__intro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostOutro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__outro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;See&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Post&lt;/code&gt; component itself is "stupid" and doesn't know which children will be passed. This is a simple example, but if your components contain a lot of logic and/or JSX, this is a way to separate concerns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9GYXZKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyit3y3x4s48u86rhide.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9GYXZKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyit3y3x4s48u86rhide.png" alt="Final relationship between App.js and Post.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the finished example here – feel free to fork and play with it!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/advanced-u1wmo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#linklist" class="anchor"&gt;
  &lt;/a&gt;
  Linklist
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/composition-vs-inheritance.html"&gt;React Docs: Composition vs Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/fragments.html#short-syntax"&gt;React Docs: React Fragments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.robinwieruch.de/react-function-component#react-function-component-props"&gt;Robin Wieruch: React function components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>20 Most Common Time Management Problems &amp; Solutions ⚡</title>
      <author>Anastasia 🏄🏻‍♀️</author>
      <pubDate>Wed, 10 Feb 2021 15:27:26 +0000</pubDate>
      <link>https://dev.to/actitime/20-most-common-time-management-problems-solutions-3abb</link>
      <guid>https://dev.to/actitime/20-most-common-time-management-problems-solutions-3abb</guid>
      <description>&lt;p&gt;Smart time management enables you to work smarter, not harder so that you get more done in less time. If we could squeeze this concept into a single piece of advice, it’d be the following: think through your day and put the things you want to get done in your calendar. However, most people struggle to live up to this rule, which leads to disappointment and frustration over time.&lt;/p&gt;

&lt;p&gt;The hard truth is that time waits for no one. If you want to accomplish more, you should learn to keep up with the time. No amount of time management books and training sessions can make you perform better unless you set your mind to it. It’s not enough to collect the best time management practices and approaches until you recognize your flaws. That is why in this article, we’ve put together 20 time management mistakes and even more pieces of advice on how to deal with them. Save this list and get back to it whenever you will feel the need for more time management ideas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#perfectionist"&gt;Being a Perfectionist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#focus"&gt;Not Being Able to Concentrate &amp;amp; Maintain Focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scheduling"&gt;Scheduling Tasks Ineffectively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vision"&gt;Lack of Vision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tomorrow"&gt;Never Thinking About Tomorrow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tracking-time"&gt;Not Tracking Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#review"&gt;Lack of Regular Time Management Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stress"&gt;Not Being Able to Cope With Stress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attention"&gt;Not Practicing Attention Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-your-own"&gt;Doing Everything On Your Own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#estimating"&gt;Being Bad at Estimating Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#busy"&gt;Being Busy Instead of Effective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#skills"&gt;Not Mastering Your Skills &amp;amp; Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distractions"&gt;Not Managing Distractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#habits"&gt;Doing Routines Instead of Habits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automation"&gt;Avoiding Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#breaking-down"&gt;Not Breaking Down Big Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#brain"&gt;Not Conserving Your Brain Power&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Being Unmotivated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech"&gt;Not Taking Technology Along&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-being-a-perfectionist" class="anchor"&gt;
  &lt;/a&gt;
  1. Being a Perfectionist &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Perfectionism is a double-edged sword. On the one hand, perfectionists strive to produce high-quality work as well as show more conscientiousness, engagement and motivation levels. However, their high and inflexible standards and all-or-nothing mindset often cause stress, burnout and anxiety that impair their performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get comfortable with imperfection&lt;/strong&gt;. Diligence is a good trait, but sometimes it may take more of your time and effort than required. Attention to detail is also a great one but it can be very time-consuming. Whenever you find yourself putting too much effort into your task, take a break and ask yourself: “Am I using my time wisely? Am I being productive?”. It’s often the case that a handful of imperfect tasks bring more results than one task that meets your high standards.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reflect on your progress regularly&lt;/strong&gt;. Review your performance on a weekly, bi-weekly and monthly basis. Could you be less fussy about some of the tasks with little or no damage to the outcome? Can you think of tasks that you avoided or put too much effort into due to fear of making a mistake?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Take some pressure off yourself&lt;/strong&gt;. If you want to accomplish more in less time, allow yourself to be less perfect and concentrate and what’s important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ask for perspective and support&lt;/strong&gt;. Show your work to your manager or supervisor regularly to learn if you are doing good and the current quality of work is sufficient. Be open with your intention to become a more productive employee and be ready to take criticism.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-not-being-able-to-concentrate-amp-maintain-focus" class="anchor"&gt;
  &lt;/a&gt;
  2. Not Being Able to Concentrate &amp;amp; Maintain Focus &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Most of us at least once experienced this state when you read a paragraph of text over and over and can’t get a grip on what it says. Or you need to write an article or prepare a report, but your mind is wandering and unable to concentrate. Here are a couple of ideas on how you can get back on track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Know thy enemy&lt;/strong&gt;. Identify workplace distractions that interfere with your ability to focus and be productive. Take a short &lt;a href="https://hbr.org/web/assessment/2014/11/why-cant-you-focus-at-work"&gt;assessment test&lt;/a&gt; by Harvard Business Review, learn which distractions damage your concentration most and get some tips on how to eliminate them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take better care of your health&lt;/strong&gt;. Sleep deprivation can easily disrupt concentration, not to mention other cognitive functions, such as memory and attention. Regular physical activity &lt;a href="https://www.hindawi.com/journals/bmri/2018/2539748/"&gt;improves&lt;/a&gt; concentration and attention and &lt;a href="https://www.nih.gov/news-events/nih-research-matters/moderate-exercise-may-improve-memory-older-adults"&gt;maintains&lt;/a&gt; brain health of older adults. Meditation and mindfulness practices can offer multiple benefits, including Improved concentration.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use your peak performance time&lt;/strong&gt;. Identify the most productive parts of the day and use them to schedule the most demanding tasks. Don’t use peak time to process emails or make phone calls and use it wisely.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take breaks&lt;/strong&gt;. Breaks are not only fun, but they also refresh your mind, replenish mental resources, restore motivation and reduce decision fatigue. Spending time in nature alleviates fatigue (&lt;a href="https://depts.washington.edu/hhwb/Thm_Mental.html"&gt;study&lt;/a&gt;), even 10 minutes of exercise improve attention and performance (&lt;a href="http://journals.sagepub.com/doi/abs/10.2466/22.06.PMS.118k10w4"&gt;study&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Set daily goals&lt;/strong&gt;. Our brains like &lt;a href="https://facilethings.com/blog/en/micro-tasks"&gt;short-term goals&lt;/a&gt; due to physiological reasons. When we succeed at something, our brain releases dopamine, making us feel more concentrated and inspired to experience this sense of accomplishment once again.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Practice single-tasking&lt;/strong&gt;. Multitasking has many adverse effects on your concentration and performance: it slows down your progress, makes you prone to making mistakes, stresses you out and more. Instead, focus on one task at a time. For even more concentration and focus, start a timer – it will give you the mental commitment to start working on the task.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speak to your doctor&lt;/strong&gt;. If you noticed a sudden decline in your ability to concentrate – having a harder time doing your routine tasks, making more errors, making more frequent poor decisions – do not ignore it. These may be symptoms of depression or anxiety, and time management approaches can make your performance even worse due to high pressure that your body can’t tolerate at the moment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limit your Internet and social media time&lt;/strong&gt;. In his &lt;a href="https://www.theatlantic.com/magazine/archive/2008/07/is-google-making-us-stupid/306868/"&gt;article&lt;/a&gt;, Nicholas Carr highlights a dangerous tendency that most of us probably noticed but didn’t pay much attention to: social media and search engines narrow our attention span and our ability to focus (&lt;a href="https://www.nature.com/articles/s41467-019-09311-w"&gt;study&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-scheduling-tasks-ineffectively" class="anchor"&gt;
  &lt;/a&gt;
  3. Scheduling Tasks Ineffectively &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Effective scheduling makes a great part of an efficient time management strategy. You can’t manage your time and focus if you prioritize the wrong things and invest time into tasks that return little or no goal-related results. Even if you’ve learned how to sort out priorities, it’s still not enough because a never-ending circle of demanding and challenging tasks can cause anxiety, stress, depression and burnout. Let’s see how you can distribute your workload effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Consider the &lt;a href="https://www.nifs.org/blog/productivity-hacks-prioritize-tasks-with-the-ivy-lee-method"&gt;Ivy Lee method&lt;/a&gt;&lt;/strong&gt;. At the end of the day, write down the six most important tasks for tomorrow and prioritize them. The next day, start working on the most important ones.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid the &lt;a href="https://academic.oup.com/jcr/article-abstract/45/3/673/4847790?redirectedFrom=fulltext"&gt;mere urgency effect&lt;/a&gt;&lt;/strong&gt;. According to research, we tend to choose urgent tasks with objectively lower payoffs over important tasks with more significant and long-term consequences. Prioritize tasks that are both urgent and important. Next, choose important tasks over the urgent ones, which are ineffective in most cases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Narrow down your list of tasks&lt;/strong&gt;. Review your to-do list and narrow it down to the most crucial tasks (try the &lt;a href="https://czarto.com/2012/04/24/four-quadrants-of-time/"&gt;Covey time management grid&lt;/a&gt;). Figure out which tasks and activities will deliver the best returns and prioritize them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Eat the frog&lt;/strong&gt;. Mark Twain once said, “Eat a live frog first thing in the morning and nothing worse will happen to you the rest of the day.” Do the most important or challenging task – the one you are most likely to procrastinate on and probably the one that can have the greatest positive impact on your life or project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-lack-of-vision" class="anchor"&gt;
  &lt;/a&gt;
  4. Lack of Vision &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First of all, there’s no need to master your time management skills if you don’t have a clear vision of where you are heading. If tasks and responsibilities that you want to manage with more skill and grace don’t inspire you, you need to develop more direction and meaning first. Without a vision, you have little chance of creating the results you want and feeling joy and excitement to keep on going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Get a bird’s eye view&lt;/strong&gt;. Think of how your tasks at hand contribute to your personal or corporate goals. Maintain your focus on the end result – it will bring you inspiration and energy to keep going. Adjust your vision if necessary but never lose sight of it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Identify time wasters&lt;/strong&gt;. Most management problems come from spending too much time on things that don’t bring you results and move you forward. Make sure to invest your time into meaningful tasks and projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a &lt;a href="https://www.projectmanager.com/blog/contingency-plan"&gt;contingency plan&lt;/a&gt;&lt;/strong&gt;. There’s always a possibility that things won’t unfold as expected. Think about best-case and worst-case scenarios, prepare the “Plan B” and “Plan C” to manage risks and problems with grace.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-never-thinking-about-tomorrow" class="anchor"&gt;
  &lt;/a&gt;
  5. Never Thinking About Tomorrow &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;People who create extraordinary results in life are typically visionaries. To make their visions a reality, they have to think strategically and set short-term goals that bring them toward their goals step by step. When you think about tomorrow, you’ll be better prepared with what’s coming next and feel more motivated investing efforts every day to attain the results you envision.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Develop awareness and &lt;a href="https://www.thebalancecareers.com/important-adaptability-skills-4768260"&gt;adaptability&lt;/a&gt; skills&lt;/strong&gt;. Think about how your time and efforts you invested today will contribute to your tomorrow’s reality and bring you closer to your goals (e.g., how will today’s project tasks impact next week’s tasks?). Adapt your plans to changing circumstances.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your progress regularly&lt;/strong&gt;. Break your projects into manageable tasks and track their progress. Use charts, reports, progress bars to see how you are doing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider the 7-minute rule&lt;/strong&gt;. Spend 7 minutes in the morning to plan your day and 7 minutes before you go to sleep to review your day and prepare a plan for tomorrow.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn from your &lt;a href="https://www.actitime.com/features-in-detail/powerful-time-and-billing-reports"&gt;past performance&lt;/a&gt;&lt;/strong&gt;. Estimate your tasks, set deadlines and track time against them. When you finish the task, review your performance, identify trends, and make it a game to reach better results next time if you need a little more competition.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-not-tracking-time" class="anchor"&gt;
  &lt;/a&gt;
  6. Not Tracking Time &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can’t improve your time management tactics and approaches if you don’t keep track of your time. Time tracking sounds like a tedious task, but once you implement it into your routine, it will reveal unexpected trends and insights. When you analyze how many hours phone calls, emails and distractions take, you can develop a more strategic approach to your time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pick a time tracking tool&lt;/strong&gt; that fits you best: timesheet app, desktop time tracker, mobile app, browser extension or even a stopwatch timer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider time tracking software&lt;/strong&gt;. Choose the one that meets your needs and doesn’t overwhelm you with a complicated interface and unnecessary features.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Track even the smallest tasks&lt;/strong&gt; like phone calls, meetings, coffee breaks, distraction time, or consider a desktop monitoring software that automatically records your app, website, and off time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your performance regularly&lt;/strong&gt;. Use Excel sheets, Google Sheets, timesheet apps or time trackers with project management features to record time against the tasks and use your time logs to build reports.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-lack-of-regular-time-management-review" class="anchor"&gt;
  &lt;/a&gt;
  7. Lack of Regular Time Management Review &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Whether you work on your personal goals or want to improve your efficiency at work, you should regularly review your performance. If you use time tracking software, you can use your time logs and build reports to identify productivity trends, adjust your approach and use your time even more wisely. Make sure to review not only your daily and weekly performance but look into monthly and half-year reports to get a birds-eye view of your efforts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Avoid &lt;a href="https://www.lifehack.org/articles/communication/how-the-sunk-cost-fallacy-makes-you-act-stupid.html"&gt;sunk cost fallacy&lt;/a&gt;&lt;/strong&gt; – investing too much time into ineffective and low-priority tasks. When you notice that your current activity takes more time than you can afford, step back and evaluate how valuable is its outcome and how it will affect your progress.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take a future time perspective&lt;/strong&gt;. Think about how your current activity will help or hurt your next steps, next week’s tasks and your project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your schedule regularly&lt;/strong&gt;. Start your day by spending 5 minutes going over your daily schedule. Take a few minutes in the middle of the day to review your progress and what’s left to be done. End your day with a 5-minute performance review.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build a &lt;a href="https://www.skillsyouneed.com/ps/planning-personal-development.html"&gt;personal development plan&lt;/a&gt;&lt;/strong&gt; and document your goals, plans, skills to master. Review your progress regularly to make sure you stay on track.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-not-being-able-to-cope-with-stress" class="anchor"&gt;
  &lt;/a&gt;
  8. Not Being Able to Cope With Stress &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Stress management and time management often go hand in hand. If you wait until the last minute to complete your task at hand, fail to plan ahead and prioritize, then you will more likely feel stressed. Not all stress is bad, but persistent exposure to stress can put your health and performance at risk. Let’s see what you can do to manage stress effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Identify your stressors&lt;/strong&gt;. Practice journaling for a few weeks to record your stressors, thoughts, feelings and reactions. Review your notes to find patterns and look into ways to cope with stress more effectively.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Develop healthy responses&lt;/strong&gt;. Junk food and alcohol may seem like a good way to soothe stress, but instead, try more healthy choices: exercise, yoga, meditations, hobbies, favorite activities, quality sleep.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Set boundaries&lt;/strong&gt;. Whether you work from home or the office, stick to your working hours and leave work at work. Avoid thinking about work and answering emails, mute corporate chats and other work-related notifications on your smartphone at the end of your workday.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-not-practicing-attention-management" class="anchor"&gt;
  &lt;/a&gt;
  9. Not Practicing Attention Management &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let’s face it: we all have 24 hours in a day and there’s no such thing as “managing time.” The good news is that we can manage our attention and focus. Ultimately, &lt;a href="https://www.realsimple.com/work-life/life-strategies/time-management/attention-management"&gt;attention management&lt;/a&gt; is the ability to recognize your brain state and consciously shift yourself into that state that will serve you best at the moment. We won’t delve into details here, but we will give you some ideas on how to tune into work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Control your environment&lt;/strong&gt;. Communicate to others that you try to stay focused: change your chat status to “Don’t disturb,” put on headphones, close the door – anything that is appropriate in your situation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your attention-stealing habits&lt;/strong&gt;. Some of us prefer background TV noise when working from home, most of us can’t resist the temptation to check out a notification and answer a message right away. Discover and review your bad habits and develop a more healthy time management approach to regain your attention span and focus.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Exercise and meditate&lt;/strong&gt;. According to a study by Harvard Medical School, regular exercises improve memory, concentration, and mental sharpness. Just a couple of weeks of meditation reduce mind wandering, boost focus and memory (study).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-doing-everything-on-your-own" class="anchor"&gt;
  &lt;/a&gt;
  10. Doing Everything On Your Own &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It doesn’t matter if you are an employee, a business owner or a self-employed person, you can’t do everything on your own. We all have 24 hours in a day and limited energy capacities as human beings. So if we push ourselves too hard, we are more likely to become stressed, less effective and deliver low-quality results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Outsource&lt;/strong&gt;. If you are a business owner or a self-employed person, consider outsourcing a part of your efforts. For example, if the accounting routine takes a lot of your time, consider using accounting agencies’ services. Weigh the opportunity costs and you may find out that your time and energy are more crucial for your success than your money.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate your routines&lt;/strong&gt;. Let’s say you are a project manager and you need to keep an eye on your project progress, team performance, billing and accounting matters. There is time tracking software that can do most of this work for you, so, again, consider the opportunity costs, and, most likely, you’ll make a choice towards its purchase. Automated routines will save weeks of your time in the long run.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Delegate&lt;/strong&gt;. Let’s say you are a manager in a marketing team and you’ve got a lot on your plate: meetings, job interviews, reports, management routine tasks. Consider delegating a report building task to one of your most reliable and detail-oriented team member. This way, they’ll learn some new skills and will be able to back you up in the future, while you will have more time on tasks that require your direct involvement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#11-being-bad-at-estimating-time" class="anchor"&gt;
  &lt;/a&gt;
  11. Being Bad at Estimating Time &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Most of us tend to underestimate how long projects and tasks will take us to finish. This phenomenon is called &lt;strong&gt;planning fallacy&lt;/strong&gt; and refers to making unrealistic best-case scenario plans and estimations. The main causes of this effect include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;score creep&lt;/strong&gt; – underestimating the complexity of a project;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;planning focalism&lt;/strong&gt; – not taking into account experience with similar tasks in the past;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;natural optimism&lt;/strong&gt; – thinking that tasks will go smoothly, without bottlenecks and changes;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;motivated reasoning&lt;/strong&gt; – making optimistic estimates because managers want to see work completed as quickly as possible;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lack of &lt;a href="https://hbr.org/2015/03/research-were-not-very-self-aware-especially-at-work"&gt;accurate self-awareness&lt;/a&gt;&lt;/strong&gt; regarding your competence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Calculate your &lt;a href="https://medium.com/swlh/your-schedule-needs-a-buffer-3930bebc0cfa"&gt;fudge ratio&lt;/a&gt;&lt;/strong&gt;. Build a list of tasks, estimate and track time against them. Then add up your total time spent, divide it by the total estimated time and multiply the result by 100% – this is your fudge ratio.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your previous performance&lt;/strong&gt;. If you track time in paper timesheets, Excel or Google Spreadsheets, you’ll have a hard time calculating your performance. Consider &lt;a href="https://www.actitime.com/"&gt;time tracking software&lt;/a&gt; where you can be sure that your data will be safely stored and you’ll be able to build performance reports in a few clicks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Assume the worst-case scenario&lt;/strong&gt;. Include possible interruptions and roadblocks into your estimates because projects rarely go smoothly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Have someone else estimate for you&lt;/strong&gt;. Kahneman and Tversky, who first mentioned the concept of planning fallacy, also discovered the following: while we’re bad at estimating our own tasks, we make more accurate estimations for others.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ask for feedback&lt;/strong&gt;. When planning your next activities, ask a neutral party for feedback on your estimations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-being-busy-instead-of-effective" class="anchor"&gt;
  &lt;/a&gt;
  12. Being Busy Instead of Effective &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Being busy and being productive is not the same thing. You can be busy clearing your inbox, sorting out tasks in your to-do list all day and still accomplish nothing meaningful. Busy time doesn’t bring you closer to your goals, making you feel anxious and unsettled. In contrast, productive time feels like steady progress towards your goals. The main reasons people get stuck in being busy include bad prioritizing and overthinking instead of getting things done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Apply the &lt;a href="https://learn.g2.com/pareto-principle"&gt;Pareto principle&lt;/a&gt;&lt;/strong&gt;. Focus on 20% tasks of the highest value that give 80% of results. For example, instead of planning and analyzing how to start your new project, take action and do the job 80% of the time and use the rest of your time to plan your next steps.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider the &lt;a href="https://www.calendar.com/blog/using-the-4ds-of-time-management-to-your-advantage/#:~:text=If%20you're%20unfamiliar%2C%20the,the%20things%20that%20really%20matter."&gt;4Ds technique&lt;/a&gt;&lt;/strong&gt;. When a new interruption or distraction shows up, choose one of the following: delete, delegate, defer, do now.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Or implement the &lt;a href="https://www.briantracy.com/blog/time-management/the-abcde-list-technique-for-setting-priorities/"&gt;ABCDE approach&lt;/a&gt;&lt;/strong&gt;, where A: most important tasks, B: less important tasks, C: tasks with no consequences, D: delegate, E: eliminate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Set agile results&lt;/strong&gt;. Focus on three key results you want to achieve over a certain period of time: day, week, month or year.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Try the 1-3-5 strategy&lt;/strong&gt;. Commit to 1 big task, 3 medium tasks, and 5 small tasks every day.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#13-not-mastering-your-skills-amp-tools" class="anchor"&gt;
  &lt;/a&gt;
  13. Not Mastering Your Skills &amp;amp; Tools &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The success of your time management efforts is closely related to how you apply and whether you develop your hard and soft skills. These are related to your professional tools, communication, problem-solving, creative thinking, self-awareness, decision-making and more. Without mastering other skills, no amount of time management books and advice can make you grow faster and achieve more in life and career.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Hone your professional skills&lt;/strong&gt;. Review your skills regularly, think of how you could improve them, what additional skills you could benefit from.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Know your tools&lt;/strong&gt;. Most of us use emails, task boards, industry-specific software, time trackers and more. But we often forget that every tool offers shortcuts and tiny features that could significantly improve our routines. For example, if you use Google a lot, &lt;a href="https://time.com/4116259/google-search-2/"&gt;Google search tricks&lt;/a&gt; can save you hours of your time monthly. Be sure to explore your tools of the trade.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improve your soft skills&lt;/strong&gt;. Be more conscious about how you deal with feedback, communicate, learn new things, adapt to the changes, work through conflicts and so on. With soft skills, you’ll be able to learn and grow faster, meaning managing your time with more skill and grace.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#14-not-managing-distractions" class="anchor"&gt;
  &lt;/a&gt;
  14. Not Managing Distractions &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;By distractions, we mean emails, notifications, social media, paper clutter, and there are thousands of articles on the internet on how to manage these. But in reality, on top of this, we are distracted from important work by other lower-priority work. It happened to all of us: urgent calls from clients and colleagues asking for our immediate attention. It doesn’t mean that we have to block these distractions entirely because it will create roadblocks and impact team productivity. Still, we need to learn to manage such things wisely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Define your boundaries&lt;/strong&gt;. Make time for phone calls and emails, use chat statuses to communicate when you are available, and, most importantly, schedule time for important tasks that require your deep focus and attention.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hold standup meetings with your team&lt;/strong&gt;. Hold 10-20 minutes meetings to discuss progress, eliminate roadblocks and brainstorm ideas.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn to say no&lt;/strong&gt;. Avoid participating in team chit-chats and gossip and postpone low-priority tasks. When you say no, explain your reasons professionally and provide an alternative.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Schedule work time and play time&lt;/strong&gt;. In your calendar, schedule fixed commitments (e.g., meals, commute, sleep), self-care activities (e.g., exercise, meditation), guilt-free time (e.g., socializing, hobbies), and then schedule work time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#15-doing-routines-instead-of-habits" class="anchor"&gt;
  &lt;/a&gt;
  15. Doing Routines Instead of Habits &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Actions that we do every day can be either routines or habits. They both mean regular and repeated actions and we often use these words interchangeably, but in terms of personal performance, they mean different things.&lt;/p&gt;

&lt;p&gt;Habits are routines that you do with little or no conscious thought, also meaning little energy investments. In contrast, routines are not automated actions that require conscious efforts. When you buy a cup of coffee on your way to work, certain circumstances trigger the action. But when you go to the gym after work, it requires your conscious practice; otherwise, they die out. The good news is that you can intentionally turn routines into habits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Build the habit loop&lt;/strong&gt;. You need to choose a trigger, execute the routine and do something enjoyable afterward. Let’s say at 10 a.m. you have a standup meeting (trigger), then you disable notifications, put your headphones on and attack the most demanding task (routine), and after that you go for lunch at around 2 p.m. or whenever you are done. Read more about building habits in &lt;a href="https://www.amazon.co.uk/gp/product/1847941834/"&gt;Atomic Habits&lt;/a&gt; by James Clear.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-avoiding-automation" class="anchor"&gt;
  &lt;/a&gt;
  16. Avoiding Automation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Regardless of our occupations, many aspects of our jobs are repetitive and open to automation. According to &lt;a href="https://content.workmarket.com/2020-insight-report-what-ai-automation-mean-for-work/"&gt;WorkMarket’s 2020 In(Sight) Report&lt;/a&gt;, 54% of employees believe they could save 240 hours annually through automation, while 78% of business leaders estimated their time losses at 360 hours per year. Now imagine that you could invest your time into career or business development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Improve routine tasks&lt;/strong&gt;. Review your routine activities regularly and brainstorm ideas of how you could tackle them even more effectively. Let’s say you spend an hour daily to answer emails, then you may have the following ideas: create email templates, review sorting settings, empty inbox every day, use third-party tools to &lt;a href="https://blog.hubspot.com/sales/newsletter-organization-system"&gt;unsubscribe&lt;/a&gt; from unnecessary newsletters in bulk and so on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate management routines&lt;/strong&gt;. Modern time and project management tools also provide billing, accounting and even &lt;a href="https://www.actitime.com/features-in-detail/leave-management"&gt;absence management&lt;/a&gt; features. It means that you can manage essential business data and processes in a single tool.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use automation tools&lt;/strong&gt;. Automate routines in your web apps with tools like &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt; and &lt;a href="https://ifttt.com/"&gt;IFTTT&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#17-not-breaking-down-big-projects" class="anchor"&gt;
  &lt;/a&gt;
  17. Not Breaking Down Big Projects &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Big projects look overwhelming and often lead to stress and procrastination. When you break them down into digestible parts, individual tasks seem more approachable and doable. After you finish a tiny task, you will feel accomplishment and more motivation to keep on going. Your project progress becomes more visible, you’ll feel more productive and efficient.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Break it down&lt;/strong&gt;. Whenever you start a new task, break it down into steps that you can complete in 20-30 minutes, even if they look trivial. This approach is especially useful for those who prefer working in tiny intervals like &lt;a href="https://www.themuse.com/advice/take-it-from-someone-who-hates-productivity-hacksthe-pomodoro-technique-actually-works#:~:text=The%20Pomodoro%20Technique%20is%20a,are%20referred%20to%20as%20pomodoros."&gt;Pomodoros&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Develop a logical sequence&lt;/strong&gt;. The easiest tasks may seem more attractive, but you should better complete them in order, one by one, which will bring you closer to your project’s goal.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review your progress regularly&lt;/strong&gt;. When working on a big assignment, you may not always feel the progress. Try the &lt;a href="https://www.amazon.com/Checklist-Manifesto-How-Things-Right/dp/0312430000"&gt;Checklist Manifesto&lt;/a&gt; approach – break your tasks into an easy-to-follow, step-by-step checklist. Or use task boards like &lt;a href="https://www.actitime.com/getting-more-efficient-with-actitime/kanban-system/"&gt;Kanban&lt;/a&gt; to visualize your progress.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#18-not-conserving-your-brain-power" class="anchor"&gt;
  &lt;/a&gt;
  18. Not Conserving Your Brain Power &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;No offense, but our average working memory capacity is &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2864034/"&gt;limited&lt;/a&gt; to three to five items. Anything that exceeds these limits has a high chance of falling out of our brains. This is why it’s important to keep our brain uncluttered to have more space, energy and focus to accomplish tasks at hand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use external storage&lt;/strong&gt; for anything you aren’t focused on right now. Use organizers, notes, tasks apps and software to unload your mind and come back to these tasks when needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use collaboration software&lt;/strong&gt;. Let’s say you are already aware of your next project but not sure where to start. You have doubts and ideas running through your head that don’t allow you to focus on the ongoing task. Implement a collaboration environment to take off ideas from your mind, ask your team to brainstorm more ideas or provide feedback. This way, you’ll set your future tasks in motion in background mode and will be able to get back to them later.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simplify everyday choices&lt;/strong&gt;. It is believed that Albert Einstein had seven identical suits for each day of the week not to waste his brainpower on mundane tasks. Most likely, Steve Jobs preferred to wear black turtlenecks for the same reason. Reduce the number of everyday choices not to waste your energy on trivial decisions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#19-being-unmotivated" class="anchor"&gt;
  &lt;/a&gt;
  19. Being Unmotivated &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://oxfordre.com/psychology/view/10.1093/acrefore/9780190236557.001.0001/acrefore-9780190236557-e-12"&gt;Goal-Setting Theory&lt;/a&gt;, motivation comes from the intention to work toward a goal. And that intention appears when the goal meets the three following criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Specific&lt;/strong&gt; goals are measurable and unambiguous. They enable us to focus on the relevant activities rather than to meander relatively aimlessly. On the contrary, vague goals allow multiple interpretations of whether the goal is attained (e.g., launch a new project).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Difficult&lt;/strong&gt; and specific goals require effort and persistence – two key components of motivation. High goals lead to higher efforts and performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Challenging&lt;/strong&gt; goals must be difficult yet attainable. Challenging tasks require commitment and focus, while easy or tedious tasks are demotivating.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see what else can fuel you with motivation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Review future plans&lt;/strong&gt;. Think about how your current work can help you in the future. Even if you aren’t excited about your current project, a long-term perspective may give you enough motivation to keep on going and manage your time better.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trick your brain&lt;/strong&gt;. Whenever we accomplish a task, our brains release dopamine, which is connected to feelings of pleasure, learning and motivation. Break your tasks down into small goals to keep yourself motivated during long-term projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#20-not-taking-technology-along" class="anchor"&gt;
  &lt;/a&gt;
  20. Not Taking Technology Along &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Technology and the Internet era create many obstacles and distractions as well as opportunities for better time management and higher quality of life. On the one hand, an increasingly digitalized lifestyle shortens our attention span and concentration abilities that can be &lt;a href="https://time.com/3858309/attention-spans-goldfish/"&gt;compared&lt;/a&gt; to those of a goldfish. On the other hand, time trackers and project management tools can save you hours weekly if used wisely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time management tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use technology to plan your day&lt;/strong&gt;. Consider &lt;a href="https://www.lifewire.com/free-online-calendars-1357935"&gt;online calendars&lt;/a&gt; and scheduling apps for personal time management purposes. Break your day into a sequence of activity blocks, allow some time buffers and go through your schedule step by step.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Experiment with &lt;a href="https://www.actitime.com/time-tracking/how-to-stay-focused-with-a-time-tracker/"&gt;time trackers&lt;/a&gt;&lt;/strong&gt;. There are thousands of time tracking tools on the market for personal and business purposes. It may take you a while until you find the right one for you. Two things to keep in mind: 1) benefits must exceed cost when using these tools 2) gains should outweigh the time spent using the app.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider &lt;a href="https://www.actitime.com/software-collections/project-management-tools/"&gt;project management tools&lt;/a&gt;&lt;/strong&gt;. As a project manager, you need to keep track of project progress and employee performance, build reports and look for ways to enhance your team performance. Modern project management tools provide time tracking features and automate management routines in a single environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ready-to-level-up-your-time-management" class="anchor"&gt;
  &lt;/a&gt;
  Ready to Level Up Your Time Management?
&lt;/h2&gt;

&lt;p&gt;As humans, we can’t be productive 100% of the time. Still, there are always time management mistakes to correct and a dozen productivity approaches to try. The key takeaway of this article goes as follows: you can’t manage what you don’t measure and you can’t improve what you don’t manage. &lt;a href="https://www.actitime.com/free-online-trial"&gt;Start with time tracking&lt;/a&gt; and try different time management approaches to power up your performance.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>100daysofcode</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>Reverse Tech Interview: Questions to Stump an Interviewer
</title>
      <author>Devinterview-io</author>
      <pubDate>Wed, 10 Feb 2021 13:36:39 +0000</pubDate>
      <link>https://dev.to/devinterview/reverse-tech-interview-questions-to-stump-an-interviewer-4n6a</link>
      <guid>https://dev.to/devinterview/reverse-tech-interview-questions-to-stump-an-interviewer-4n6a</guid>
      <description>&lt;p&gt;Hi, everyone, I want to bring up the topic of &lt;strong&gt;hiring at tech companies&lt;/strong&gt; once again. This time I'm going to talk about it from the perspective of the candidate, not the employer. Because the interview, contrary to many stereotypes, is a two-way process - not only the interviewer can ask questions, but also the applicant himself. Last year I conducted a decent number of interviews, and the vast majority of candidates upset me by the absence of questions about the company, &lt;strong&gt;only 5 people began to ask me about the actual job.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I believe that the candidate himself should ask questions at the interview since he is going to work at the company. The standard job description makes it impossible to understand what goes on in a company, and, it is a common practice for recruiters to sugarcoat things a bit. Few people want to get into an uncomfortable environment or an unprofitable company with no prospects. If you're wondering how to &lt;strong&gt;get a real feel for a company during an interview&lt;/strong&gt;, you're welcome. I'll give a list of questions that interviewers don't usually expect, maybe they'll help someone make the right decision when looking for a dev job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'll start with a block of general questions to help figure out what the company does.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How does the company make money? &lt;br&gt;
What kind of business model does it have? &lt;br&gt;
If they can't answer that, then there's a good chance they don't make any money at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;If it is a startup, it is appropriate to ask who invests.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At what stage is the project?&lt;br&gt;
Can you show me the product?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s not a good sign if they can't answer these questions, especially referring to the NDA, it's probably not about that at all. These questions have nothing to do with revealing trade secrets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions about the attitude toward employees in the company.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you have a system of promotions?&lt;br&gt;
What was the last time you promoted a person or gave a bonus?&lt;br&gt;
What are your criteria for that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they can't answer, then they don't understand or don't appreciate the benefits that employees bring to the table. Everyone can say &lt;em&gt;"yes we do"&lt;/em&gt;, but the specific criteria are usually more important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another block of questions about something equally important: Management.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are my first tasks if I work for you?&lt;br&gt;
Do you have an onboarding process?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are not given a clear plan, it is likely that you will be swamped with a bunch of random tasks and that's it, do not expect any onboarding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What do you fire people for?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There should be clear-cut, not vague criteria, so that you don't end up getting fired for some nonsense or because someone just doesn't like you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How are disputes resolved in the work process?&lt;br&gt;
What exactly do you do in such cases?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they look at the facts, collect feedback - that's good. If there is no objective response, there is a high probability that you will always lose these disputes by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More questions about the workflow and team environment.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How is the work process structured?&lt;br&gt;
How do I interact with the other teammates in the process?&lt;br&gt;
Ask to see the task manager.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they just say that they practice agile development, maybe &lt;strong&gt;there is no structured process, but a swamp.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pay attention to how the people are treated in the company, whether they show respect to the employees. For example, if an interviewer is distracted by a message or question during an interview and runs off without apologies, this is a red flag.&lt;/p&gt;

&lt;p&gt;And one more aspect: &lt;strong&gt;be sure to ask for feedback after the interview.&lt;/strong&gt; If they can't give it to you, maybe it's a good thing you didn't sign up to work there.&lt;/p&gt;

&lt;p&gt;Recruiters are usually unprepared for such a barrage of questions, so try to tell them in advance that you want to ask detailed questions about the company. Otherwise, there may not be enough time for that. I do not encourage you to &lt;em&gt;interrogate the recruiter&lt;/em&gt; and ask all the questions, act as appropriate, it may be enough to ask just a few questions.&lt;/p&gt;

&lt;p&gt;You have no idea how many people can't answer these questions. And remember that &lt;strong&gt;you are in no way going to a penal labor&lt;/strong&gt;, but you are choosing a place where you will spend almost a third of your time, &lt;strong&gt;you should be comfortable there.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you ask an employer questions during an interview? I would be glad if you share your questions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks 🙌 for reading and good luck on your next tech interview!&lt;br&gt;
&lt;strong&gt;You can explore 3800+ dev interview question here 👉 &lt;a href="https://devinterview.io/"&gt;Devinterview.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Is Redux Dead?</title>
      <author>Asayer Tech Blog</author>
      <pubDate>Wed, 10 Feb 2021 12:37:37 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/is-redux-dead-1d2a</link>
      <guid>https://dev.to/asayerio_techblog/is-redux-dead-1d2a</guid>
      <description>&lt;p&gt;&lt;em&gt;by &lt;a href="https://blog.asayer.io/kristofer-selbekk"&gt;Kristofer Selbekk&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;React revolutionized front end development as most people knew it when it was first released. This new approach to writing code triggered incredible innovation in how to handle state changes and UI updates.&lt;/p&gt;

&lt;p&gt;This revolution had its downsides, too. One of them was a culture of over-engineering solutions to challenges that could be solved in simpler ways. A typical example of this is how state has been managed in React applications.&lt;/p&gt;

&lt;p&gt;Redux has become a hallmark of many React applications created in the last couple of years. The allure of having a single state object, available everywhere in your application sure sounds nice. But has its time passed? Has React evolved to a point where these kinds of state management tools add more complexity than they solve?&lt;/p&gt;

&lt;p&gt;This article aims to give you a deeper understanding of which situations warrants state management tools like Redux. We’ll discuss the reasons behind the rise of Redux, and what has changed in the last couple of years - both in React and in Redux. Finally, we’ll look into what might be coming in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-and-why-people-started-using-it" class="anchor"&gt;
  &lt;/a&gt;
  Redux - and why people started using it
&lt;/h2&gt;

&lt;p&gt;When it was first released , React didn’t have an officially supported way to pass data far down the component tree. If you had some kind of shared state, configuration or other information you would like to use anywhere in you application, you had to pass it down from parent to child to sibling to another child. There &lt;em&gt;was&lt;/em&gt; a way to avoid it, but that way - the “legacy context API” was never officially supported, and was documented with a warning that it should not be used.&lt;/p&gt;

&lt;p&gt;About the same time React was released to the public, some other Facebook engineers &lt;a href="https://www.youtube.com/watch?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v&amp;amp;v=nYkdrAPrdcw&amp;amp;feature=emb_title"&gt;introduced a blueprint&lt;/a&gt; for how they created front end applications - the &lt;a href="https://facebook.github.io/flux/"&gt;Flux architecture&lt;/a&gt;. It complimented React’s component-centric design by having a unidirectional data flow, which made things both easy to follow and simple to understand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpbbKGJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/d97c68cc0c034806aa6ff882a5f51995.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpbbKGJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/d97c68cc0c034806aa6ff882a5f51995.png" alt="Flux Architecture"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(photo borrowed from &lt;a href="https://facebook.github.io/flux/docs/in-depth-overview"&gt;https://facebook.github.io/flux/docs/in-depth-overview&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While many famous open sorcerers were busy fighting over which slightly different implementation of this was the best, a young Russian developer named Dan Abramov introduced an implementation based on the &lt;a href="https://guide.elm-lang.org/architecture/"&gt;Elm architecture&lt;/a&gt;, called Redux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/xsSnOQynTHs"&gt;https://youtu.be/xsSnOQynTHs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redux was a pretty simple system, with a single state object, encased in a “store”, which could be updated by dispatching actions on it. The actions were sent to a “reducer” function, which returned a brand new copy of the entire application state, which would then propagate across your application.&lt;/p&gt;

&lt;p&gt;Another great feature of Redux was how easy it was to use with React. Not only was it a great match with the programming model of React, it also solved the prop drilling issue! Just “connect” whatever component you want to a store, and you had access to any part of the application state you wanted. It was like magic!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#context-hooks-and-why-it-solved-much-of-what-redux-did" class="anchor"&gt;
  &lt;/a&gt;
  Context, hooks, and why it solved much of what Redux did
&lt;/h2&gt;

&lt;p&gt;With all its elegance and popularity though, Redux did have a few major downsides. For each new way of changing the state, you had to add a new action type and action creator, probably a dispatcher and a selector, and then you’d have to handle that new state change in an existing reducer, or create a new one. In other words - lots and lots of boilerplate.&lt;/p&gt;

&lt;p&gt;When the 16.3 version of React was released, it finally shipped with a fully redesigned context API. With this new feature, prop drilling was suddenly as easy as wrapping any subsection of your application in a context provider, and fetching it again with a context consumer component.  Here’s an example of how that could be done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;myApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SomeDeepHierarchy&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Consumer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="c1"&gt;// look - no Redux required!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;customer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserContext.Consumer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At ReactConf in 2018, now React Core team member Dan Abramov and boss Sophie Alpert &lt;a href="https://www.youtube.com/watch?v=V-QO-KO90iQ&amp;amp;t=5s"&gt;introduced a new feature&lt;/a&gt; in React - hooks. Hooks made using state and side effects much easier, and made away with the need for class components altogether. In addition, the context API was suddenly much easier to consume, which made it much more user friendly. Here’s the revised code example with hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;myApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SomeDeepHierarchy&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;customer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With these new features landing in React, the trade-offs for using Redux changed quite a bit. The elegance of reducers were suddenly built into React itself, and prop-drilling was a solved challenge. New projects were started without having Redux in the stack - a previous no-brainer - and more and more projects started to consider moving away from Redux altogether.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-toolkit-and-hooks-a-new-and-improved-user-experience" class="anchor"&gt;
  &lt;/a&gt;
  Redux Toolkit and hooks - a new and improved user experience?
&lt;/h2&gt;

&lt;p&gt;As a response, the team currently maintaining Redux (led by a gentleman named Mark Erikson) started two different efforts. They introduced an opinionated toolkit named &lt;a href="https://redux-toolkit.js.org/"&gt;Redux Toolkit&lt;/a&gt; that did away with most boilerplate code through conventions, and they added a &lt;a href="https://react-redux.js.org/api/hooks"&gt;hooks-based API&lt;/a&gt; for reading state and dispatching actions.&lt;/p&gt;

&lt;p&gt;Together these two new updates simplified Redux codebases substantially. But is it really enough to defend introducing the added complexity of the concepts in Redux to a new project? Is the value Redux adds more than the added cost of teaching new employees about Yet Another Tool?&lt;/p&gt;

&lt;p&gt;Let’s look at where React does a great job by itself, and in what cases the tradeoff of complexity vs power is worth it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-react-is-enough" class="anchor"&gt;
  &lt;/a&gt;
  When React is enough
&lt;/h2&gt;

&lt;p&gt;Most React applications I’ve worked with have been pretty small in scope. They’ve had a few global pieces of state that was used across the application, and some data that was shared across a few different views.&lt;/p&gt;

&lt;p&gt;Besides from this though, many React applications don’t have a lot of shared state. Most state  like the content of input fields or whether a modal is open, is only interesting to the component that contains them! No need to make that state globally available. &lt;/p&gt;

&lt;p&gt;Other pieces of state might be shared, but only by a part of the application. Perhaps a particular page requires a piece of state to be shared across several of its components, or a sidebar needs to expose some remote status to all of its children. Either way, that’s not global state - it’s state scoped to a part of the application.&lt;/p&gt;

&lt;p&gt;By keeping state co-located, or as close to its dependents as possible, you ensure that it’s deleted whenever the feature requiring it is deleted, and that it’s discoverable without leafing through tens of different reducers.&lt;/p&gt;

&lt;p&gt;If you need to share app-wide settings that rarely change, React’s context API is a great tool to reach for. One example of this is what locale is currently active:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocaleContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setLocale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocaleProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocale&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LocaleContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocale&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useLocale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LocaleContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Other use cases can be what color theme is active, or even what experiments are active for a given user.&lt;/p&gt;

&lt;p&gt;Another very useful approach is using a small data-fetching library like &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt; or &lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt; to handle fetching and caching your API responses for you. To me, cached data isn’t really global state - it’s just cached data. This is much simpler to handle with these small single-use libraries, than introducing async thunks or sagas to your Redux rig. Also, you don’t have to handle all the complex variations of isLoading, hasError and what not. With these libraries, it works out of the box.&lt;/p&gt;

&lt;p&gt;A thing these context use cases have in common is the fact that they represent data that rarely updates. Rarely in the context of computer science is a bit vague, but in my mind, less than a couple of times every second is pretty rare. And as it turns out, that’s the way the React Context API works best!&lt;/p&gt;

&lt;p&gt;The use cases summarized above covers most of the situations I’ve met in real world applications. Actual global state is rare and far between, and is often better off being co-located with the code that actually uses it, or provided through the context API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#situations-where-redux-might-be-warranted" class="anchor"&gt;
  &lt;/a&gt;
  Situations where Redux might be warranted
&lt;/h2&gt;

&lt;p&gt;With all that said, Redux is still a great product. It’s well documented, adopted by many, and can be combined with the approaches posted above. But what use cases warrants the added complexity and learning curve of adding Redux to your stack in 2021?&lt;/p&gt;

&lt;p&gt;One of the use cases I see most in the projects I’m involved with is when you have advanced data fetching scenarios that requires a lot of cascading network communication. One might argue that this is best done on the server side, but there are definitely use cases where handing this on the client is warranted. Redux, particularly in combination with so-called thunks, is extremely versatile and flexible when it comes to such orchestration.&lt;/p&gt;

&lt;p&gt;Another use case is for very interdependent states, or states that are derived from several other states. This is possible to handle in React as well, but the end result is still much easier to both share, reuse and reason about in Redux.&lt;/p&gt;

&lt;p&gt;A third use case is for those where the state of your application can change very rapidly. The lead architect of React, Seb Markbåge, stated a few years ago that the current implementation of the context API was suboptimal for sharing data that updated quickly, since a change in the context-provided value would trigger a re-render of the entire subtree of components. Web socket driven trading or analytics dashboards might be good examples of such a situation. Redux gets around this by only sharing the store instance through context, and triggers re-renders more explicitly.&lt;/p&gt;

&lt;p&gt;A final use case is highly subjective, and is for teams that enjoy the top-down single-state-tree approach. That the entire state of the application can be serialized, de-serialized, sent over the wire and persisted in local storage. That you can time-travel across changes, and provide a full story of actions leading to a bug to a bug tracking tool. These are powerful arguments, and definitely a value-add for some.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#measuring-redux-performance" class="anchor"&gt;
  &lt;/a&gt;
  Measuring Redux performance
&lt;/h2&gt;

&lt;p&gt;Monitoring the performance of  a web application in production may be challenging and time consuming. Asayer is a frontend monitoring tool that replays everything your users do and shows how your app behaves for every issue. It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;/p&gt;

&lt;p&gt;Asayer lets you reproduce issues, aggregate JS errors and monitor your app’s performance. Asayer offers plugins for capturing the state of your &lt;em&gt;Redux or VueX&lt;/em&gt; store and for inspecting &lt;em&gt;Fetch&lt;/em&gt; requests and &lt;em&gt;GraphQL&lt;/em&gt; queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgQkokAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/f717d68eb19b4f7fa522cd8d0f44c458.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgQkokAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/f717d68eb19b4f7fa522cd8d0f44c458.png" alt="Asayer Redux"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://asayer.io/register.html"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-other-options" class="anchor"&gt;
  &lt;/a&gt;
  The other options
&lt;/h2&gt;

&lt;p&gt;In my opinion, most applications can do without external state management libraries. Some disagree, and some have such advanced use cases that handling it without some kind of intermediary layer is very unpractical. In such cases, I suggest you look into Redux’ competition, before landing on the tried and true alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mobx.js.org/the-gist-of-mobx.html"&gt;MobX&lt;/a&gt; is a well-tested and popular state management tool that works through the magic of observables. It’s quick as heck, and most people that try it become fans within weeks. I haven’t tried it myself, so I won’t be advocating for it too strongly, but the design looks solid!&lt;br&gt;
Another contender is &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt;. This library also stems from the engineers at Facebook, and is based around the concept of atoms of state, and derived state called selectors. It’s very similar to React in its API design, and works flawlessly with it. It’s currently in an open beta, but it should still be useful in many projects.&lt;/p&gt;

&lt;p&gt;The final alternative I want to suggest is &lt;a href="https://overmindjs.org/"&gt;Overmind&lt;/a&gt;. Overmind is the state library that runs the main editor application over at &lt;a href="http://codesandbox.io"&gt;CodeSandbox&lt;/a&gt;, and is based around a single state tree and side effects. It’s also something I’ve never tried before, but by looking at the complexity and lack of bugs in CodeSandbox, it must be pretty powerful!&lt;/p&gt;

&lt;p&gt;Even with all of these alternatives present, Redux is still holding its ground. With the recently added hooks and Redux Toolkit, the developer experience has really improved as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;React is an incredible framework for creating quick, responsive and optimized user interfaces. It provides a flexible API for handling both simple and complex states, and the latest versions have improved the developer experience in such ways that most state management libraries really aren’t needed anymore.&lt;/p&gt;

&lt;p&gt;There are definitely use cases where a separate state management layer is a net positive, and you should always consider introducing one when it’s needed. My argument is that you shouldn’t start out with one before you feel the pain of not having one. Only then can you be sure you’re not adding complexity to your stack without reaping any of the benefits.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Things You Can Do For Free: The Ultimate Guide</title>
      <author>Shahed Nasser</author>
      <pubDate>Wed, 10 Feb 2021 11:52:35 +0000</pubDate>
      <link>https://dev.to/shahednasser/the-things-you-can-do-for-free-the-ultimate-guide-1hd4</link>
      <guid>https://dev.to/shahednasser/the-things-you-can-do-for-free-the-ultimate-guide-1hd4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://blog.shahednasser.com/the-things-you-can-do-for-free-the-ultimate-guide/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating any kind of project, there will be costs that you have to handle. Whether big or small, at some point it can be hindering or cause a hassle.&lt;/p&gt;

&lt;p&gt;I will list for you different topics you might need in your projects and how you can get it for free.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hosting" class="anchor"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;Finding a hosting is one of the most troublesome parts when you are creating a project, especially when you need it for free. Here's a list of services or websites that offer free hosting, and what kind of projects you can use them for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;: Netlify is perfect for static websites like portfolios. It also supports &lt;a href="https://www.netlify.com/jamstack/"&gt;Jamstack&lt;/a&gt;, which basically decouples the backend from the frontend, allowing your website to be deployed directly to a CDN. This helps make your website faster and more secure. You can use this to create, for example, blogs (like this one). You can read it more about it in &lt;a href="https://www.netlifycms.org/"&gt;Netlify CMS&lt;/a&gt; as they have starter projects you can get started with.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://firebase.google.com/pricing"&gt;Firebase&lt;/a&gt;: In Firebase's free plan (or Spark Plan) they offer many features, including 10GB of hosting. Again, this is great for static websites.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;: Heroku allows you to host almost any kind of environment. The down side of Heroku's free hosting is that it can be slow, but it still can be very helpful in many cases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.alwaysdata.com/en/"&gt;alwaysdata&lt;/a&gt;: A good hosting solution for a variety of environments, with a lot of features.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://surge.sh/"&gt;Surge&lt;/a&gt;: Surge is another good hosting for static websites. Surge does not really have any limits when it comes to the size of the website, and it's probably the easiest to use. You can deploy any website through their CLI with just one command.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.000webhost.com/"&gt;000WebHost&lt;/a&gt;: Although I personally am not a big fan of this hosting, but 000WebHost offers an easy to use cPanel free hosting and helpful tools for WordPress hosting in particular.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;: Another good static website hosting. The pro of this option is that you can link it directly to your GitHub repository, and with any update to the repository it will update immediately.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;: Hashnode is specific to creating your own blog. You can customize it, track its analytics and much more. If you have your own domain then you can add it, too.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#domain-name" class="anchor"&gt;
  &lt;/a&gt;
  Domain Name
&lt;/h2&gt;

&lt;p&gt;Next come domain names. From my experience, the only service that provides a free domain name (without having to pay for hosting, that is) is &lt;a href="https://www.freenom.com/en/freeandpaiddomains.html"&gt;Freenom&lt;/a&gt;. Freenom provide free domain names that end with .tk, .cf, .ml, .ga or .gq.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mail-tools" class="anchor"&gt;
  &lt;/a&gt;
  Mail Tools
&lt;/h2&gt;

&lt;p&gt;Whether for a contact form, a newsletter form, or any marketing usage you might have that requires sending email, here's a list to help you achieve that for free:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.mailgun.com/"&gt;Mailgun&lt;/a&gt;: Mailgun provides an email you can use to send email. You can either use Mailgun on your server to send emails, or use the email provided by mailgun and the API keys you get to send emails serverless, but this will require other services.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.emailjs.com/"&gt;EmailJS&lt;/a&gt;: EmailJS allows you to send emails from your Javascript without needing a server. You can link EmailJS with your Mailgun account. EmailJS also allows you to manage the email template, email response and other settings as well. It's a great option for a contact form.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mailerlite.com/"&gt;MailerLite&lt;/a&gt;: MailerLite puts all email marketing together basically. Using MailerLite's free plan you can create forms and popups that you can embed in your website and they take care of the rest. Whether it's a subscription or contact form, you can create the forms, link them with a subscription list, send newsletters and many more options.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#notifications" class="anchor"&gt;
  &lt;/a&gt;
  Notifications
&lt;/h2&gt;

&lt;p&gt;Here are some services that offer free notifications for your websites and apps for free:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://onesignal.com/pricing"&gt;OneSignal&lt;/a&gt;: OneSignal allows you to send push notifications on different browsers and mobile apps and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pusher.com/beams/pricing"&gt;Pusher&lt;/a&gt;: Pusher is mainly focused on real time experiences, and part of that is building channels between your server and websites or apps, which allows you to also send notifications.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#seo-and-other-tools" class="anchor"&gt;
  &lt;/a&gt;
  SEO and Other Tools
&lt;/h2&gt;

&lt;p&gt;Below are some SEO helpful tools to help make your website a little better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://sharethis.com/"&gt;ShareThis&lt;/a&gt;: A good tool to let your website visitors share your website easily on almost every social media platform, with a variety of design choices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;: Disqus lets you add a comments or reaction section to your website, helping you build connections with your visitors.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://crowdin.com/"&gt;CrowdIn&lt;/a&gt;: CrowdIn is a tool you can use to manage translations for your projects. You upload a strings file like a .json file, add the languages you want, and then you and your team, or anyone you send the link to can translate your strings easily with their interface and their recommended translations as well.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://buffer.com/"&gt;Buffer&lt;/a&gt;: Buffer allows you to connect your social media accounts together so you can schedule posts, track analytics and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hotjar.com/"&gt;hotjar&lt;/a&gt;: hotjar takes analytics into the next level. Not only can you track the usual traffic of users, but you can also see heatmaps, add surveys, and much more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.algolia.com/"&gt;Agolia&lt;/a&gt;: Agolia allows you to add a search engine to your website without the hassle.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rebrandly.com/"&gt;Rebrandly&lt;/a&gt;: Provides free URL shortener with analytics, QR Codes and more.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Here are some websites that you can get design elements, images, or other resources from:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://freebiesupply.com/"&gt;Freebie Supply&lt;/a&gt;: You can find vectors, illustrations, icons, and much more for free.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;: Easily use beautiful fonts in your website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://feathericons.com/"&gt;Feather Icons&lt;/a&gt;: An open source project with very beautiful icons you can use for free.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://iconscout.com/"&gt;Iconscout&lt;/a&gt;: Find free and beautiful icons you can use in your projects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://undraw.co/"&gt;Undraw&lt;/a&gt;: Free illustrations for any project. You can download the illustrations in PNG or SVG formats and change their colors in website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;: Free images you can use in any of your projects. They also have an API you can use to search through images, get random images, and other usages as well.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hatchful.shopify.com/"&gt;hatchful&lt;/a&gt;: Create a logo and customize it for free.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a longer list of design resources, check out my &lt;a href="https://blog.shahednasser.com/best-websites-to-find-free-resources-for-frontend-web-developers-and-designers/"&gt;other post&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Do you know any other tools or services that are helpful and for free? Please let us know in the comments!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tips</category>
      <category>advice</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Make Your PWAs Look Handsome on iOS</title>
      <author>Karmasakshi Goyal</author>
      <pubDate>Wed, 10 Feb 2021 10:35:43 +0000</pubDate>
      <link>https://dev.to/karmasakshi/make-your-pwas-look-handsome-on-ios-1o08</link>
      <guid>https://dev.to/karmasakshi/make-your-pwas-look-handsome-on-ios-1o08</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I talk about how to embrace the notch to make your PWAs cover the entire screen on iOS devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;To avoid content being hidden under notches, Apple limits the viewport of PWAs by default:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1rlDVt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3j5qwvwda0y2c9vmlqcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1rlDVt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3j5qwvwda0y2c9vmlqcf.png" alt="Cinepotato added to Home Screen on iPhone X" title="Cinepotato added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apple also limits the viewport on iPhones and iPads &lt;strong&gt;without a notch&lt;/strong&gt; to the area below the Status Bar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrVIU1Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n2bvmuqa7yq5axgppjfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrVIU1Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n2bvmuqa7yq5axgppjfl.png" alt="Cinepotato added to Home Screen on iPad 2020" title="Cinepotato added to Home Screen on iPad 2020"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want your PWA to embrace the notch and make it cover the entire screen, you will need a small hack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;Set your document to flow to the notch area:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// index.html

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"initial-scale=1, viewport-fit=cover, width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meta&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meta&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-status-bar-style"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"black-translucent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meta&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that this will set the font color of the iOS Status Bar to white.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The hack&lt;/strong&gt;: Set the minimum height of the document to 100% plus the height of the safe area on top. This will prevent a white bar in the bottom which gets shown since you moved the document “up”.&lt;/p&gt;

&lt;p&gt;Also, add safe area padding to all 4 sides to ensure content is never hidden under the notch regardless of the device orientation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* styles.css */&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-bottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('/bg.svg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-result" class="anchor"&gt;
  &lt;/a&gt;
  The Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asenN8qO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhazidii9m5my212fj1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asenN8qO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhazidii9m5my212fj1u.png" alt="umagoyal.com added to Home Screen on iPhone X" title="umagoyal.com added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tnYyE3Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ji6r20yogkd5vw3pa882.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnYyE3Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ji6r20yogkd5vw3pa882.png" alt="umagoyal.com added to Home Screen on iPad 2020" title="umagoyal.com added to Home Screen on iPad 2020"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip" class="anchor"&gt;
  &lt;/a&gt;
  Bonus Tip
&lt;/h3&gt;

&lt;p&gt;If you have elements with &lt;code&gt;position: fixed&lt;/code&gt; (e.g. toast, sidebar, bottom navigation, etc.) add the safe area padding to their containers or themselves, whichever is relevant. &lt;strong&gt;You only need to pad the sides where the notch can possibly be positioned.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* styles.css */&lt;/span&gt;

&lt;span class="nc"&gt;.left-sidebar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yezis2c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gluuz11zkj5nng88khrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yezis2c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gluuz11zkj5nng88khrh.png" alt="Sidebar of Share By Cam added to Home Screen on iPhone X" title="Sidebar of Share By Cam added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLPMA2VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2tug96qxqult943asyxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLPMA2VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2tug96qxqult943asyxb.png" alt="Sidebar of Share By Cam added to Home Screen on iPhone X" title="Sidebar of Share By Cam added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For fixed headers, you can either choose to display the header below the notch area (like &lt;a href="https://shareby.cam"&gt;Share By Cam&lt;/a&gt; does) or pad relevant sides of the header instead of html to fill the notch area.&lt;/p&gt;




&lt;p&gt;I developed this hack after several retries way back on iOS 12, but never shared hoping it would be fixed by Apple. Looks like this quirk is here to stay, so be it. Cheers!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shout-out to &lt;a href="https://mockuphone.com"&gt;MockUPhone&lt;/a&gt; for the brilliant phone mocking tool!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>react</category>
      <category>pwa</category>
    </item>
    <item>
      <title>JS: How class list works </title>
      <author>DevLorenz0</author>
      <pubDate>Wed, 10 Feb 2021 09:16:31 +0000</pubDate>
      <link>https://dev.to/devlorenzo/js-how-to-add-a-class-to-an-element-2f28</link>
      <guid>https://dev.to/devlorenzo/js-how-to-add-a-class-to-an-element-2f28</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; New episode of the series  - A CSS/JS trick in 5 minutes.&lt;br&gt;
Today we will quickly see how to manipulate a class throw javascript (add, remove and check presence). &lt;/p&gt;




&lt;p&gt;In reality, you have to imagine classes as a list, all elements in a page have is own list of class you can modify with javascript. So if you want to modify an element you don't need to do all the stuff (it's much longer and boring) with javascript. You just have to define a class in CSS with all the attributes then add this class to the element(s) you want to modify. So for example you can have a live element &lt;a href="https://dev.to/devlorenzo/js-on-scroll-events-4232"&gt;update on scrolling&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add" class="anchor"&gt;
  &lt;/a&gt;
  Add
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  let foo = document.querySelector("#foo");
  element.classList.add("newClass");
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#remove" class="anchor"&gt;
  &lt;/a&gt;
  Remove
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; foo.classList.remove("classToRemove");
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#you-can-also-check-if-an-element-contains-a-class-and-then-perform-operations-with-the-boolean-result" class="anchor"&gt;
  &lt;/a&gt;
  You can also check if an element contains a class (and then perform operations with the boolean result):
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  foo.classList.contains('AreYouHere')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please smash that like button to make me understand that you want the series to continue :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>CSS: How to make a cool border animation </title>
      <author>DevLorenz0</author>
      <pubDate>Wed, 10 Feb 2021 07:22:22 +0000</pubDate>
      <link>https://dev.to/devlorenzo/css-how-to-make-a-border-animation-part-2-46fm</link>
      <guid>https://dev.to/devlorenzo/css-how-to-make-a-border-animation-part-2-46fm</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; New episode of the series  - A CSS/JS trick in 5 minutes. &lt;br&gt;
I did &lt;a href="https://dev.to/devlorenzo/css-how-to-make-a-border-animation-1kn"&gt;an article about CSS slow border animations&lt;/a&gt; and I wanted to do a follow-up. I will now explain to you how to do a more engaging and advanced border animation &lt;/p&gt;



&lt;p&gt;We do not need to excessively style our container, we just give it padding, a border, and if you want (recommended) a border-radius. You can after insert everything you need in the div (or make it act as a button):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#container {
  border-radius: 10px;
  padding: 35px;
  width: 380px;
  overflow: hidden;
  padding: 2rem;
  animation: borderSpin 5s ease infinite;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside of container style, we add a :after and :before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;amp;::before {
    content: "";
    z-index: -2;
    left: -50%;
    top: -50%;
    width: 200%;
    height: 200%;
    background-color: #399953;
    background-repeat: no-repeat;
    background-size: 50% 50%, 50% 50%;
    background-position: 0 0, 100% 0, 100% 100%, 0 100%;
    background-image: linear-gradient(#399953, #399953),
      linear-gradient(#fbb300, #fbb300), linear-gradient(#d53e33, #d53e33),
      linear-gradient(#377af5, #377af5);
    animation: rotate 4s linear infinite;
  }

  &amp;amp;::after {
    content: "";
    position: absolute;
    z-index: -1;
    left: 6px;
    top: 6px;
    width: calc(100% - 12px);
    height: calc(100% - 12px);
    background: white;
    border-radius: 5px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's a lot of things, just notice that we are giving a colorful background to the container and with the animation we will make the border moving. You can play around with background size, position, colors, calc, radius... &lt;/p&gt;




&lt;p&gt;In reality the animation part is very easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes rotate {
  100% {
    transform: rotate(1turn);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are just rotating the background. &lt;/p&gt;




&lt;p&gt;I have done 8 animation examples for you (&lt;strong&gt;open the link for a complete experience&lt;/strong&gt;). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/DevLorenzo/pen/ExgpvJM"&gt;Live preview:&lt;/a&gt; - Check quick animation part &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/DevLorenzo/embed/ExgpvJM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please smash that like button to make me understand that you want the series to continue :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to use WebP images</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 10 Feb 2021 07:07:52 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-to-use-webp-images-307g</link>
      <guid>https://dev.to/dailydevtips1/how-to-use-webp-images-307g</guid>
      <description>&lt;p&gt;Here's a use-case you build a fantastic web application, and it's amazing. Then your colleague asks you how the speed of this amazing application is?&lt;/p&gt;

&lt;p&gt;Oef, you didn't check that during development but decide to run a lighthouse test to get a general understanding.&lt;/p&gt;

&lt;p&gt;The results shock you a bit! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRgpalgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504243591/TPULQdm2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRgpalgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504243591/TPULQdm2x.png" alt="Bad lighthouse score"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That sucks, your structure seems alright, but the website is just plain slow...&lt;/p&gt;

&lt;p&gt;Doing some more research, you might come across this section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjVkC58H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504383457/_-wCDGqI3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjVkC58H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504383457/_-wCDGqI3.png" alt="Chrome Lighthouse next-gen image formats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it's a valid point. Next-gen image formats are amazing and should be used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-webp-image" class="anchor"&gt;
  &lt;/a&gt;
  What is a WebP image?
&lt;/h2&gt;

&lt;p&gt;In this article, we'll be talking about WebP images, but what exactly are WebP images?&lt;/p&gt;

&lt;p&gt;WebP is a new modern image format. It applies lossless and lossy compression for images on the web.&lt;br&gt;
Basically, it makes our files even smaller for the web!&lt;/p&gt;

&lt;p&gt;Compared to a PNG, it saves around 26% and between 25-34% on JPEG.&lt;/p&gt;

&lt;p&gt;The cool part is, it supports transparency as PNG's do. And at meager costs.&lt;br&gt;
Meaning a PNG converted to WebP is 3x smaller on average.&lt;/p&gt;

&lt;p&gt;I've converted the exact same image in PNG, WebP, and JPG without special compression to showcase this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4d0_NXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504592342/lraBbd6xn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4d0_NXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504592342/lraBbd6xn.png" alt="Different image formats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, that's one big jump in file size, and it's not even compressed.&lt;/p&gt;

&lt;p&gt;Awesome, let's use these WebP images everywhere!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-webp-images" class="anchor"&gt;
  &lt;/a&gt;
  Using WebP images
&lt;/h2&gt;

&lt;p&gt;So our main goal might be to replace every image on the site with a WebP variant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- before --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"a cute cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- after --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.webp"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"a cute cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We did it, run it in Chrome, and it works. Lighthouse also seems happy, so done, right?&lt;/p&gt;

&lt;p&gt;But about 15 minutes later, Linda from Marketing calls and complains all the images disappeared on her computer.&lt;br&gt;
You ask what browser she is using, and after a small battle finding out what a browser is, it turns out to be Internet Explorer.&lt;/p&gt;

&lt;p&gt;Darn, we didn't check that! &lt;br&gt;
Now what? You and your developer colleague want a fast website, but it shouldn't go to waste for all the other users on non-modern browsers.&lt;/p&gt;

&lt;p&gt;The browser support for WebP is not bad, but unfortunately, it's not fully supported yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wsLoBM9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/webp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsLoBM9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/webp.png" alt="WebP browser support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is where the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element comes in handy.&lt;/p&gt;

&lt;p&gt;We can convert our &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags to be part of a &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"cat.webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A super cute cat"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pretty cool. Since the browsers will parse this top-down, if they support the WebP format, they'll choose that image, else they will fall back on the JPG in this case.&lt;/p&gt;

&lt;p&gt;It's important to know that the picture element needs the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, and it will use that &lt;code&gt;alt&lt;/code&gt; text to show on either of the sources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-our-the-support-fallback" class="anchor"&gt;
  &lt;/a&gt;
  Testing our the support fallback
&lt;/h2&gt;

&lt;p&gt;You might think, cool, we got it working now, but how can I test this?&lt;/p&gt;

&lt;p&gt;Luckily for us, Chrome 88 shipped an excellent modern image format rendering option.&lt;/p&gt;

&lt;p&gt;You can find this option in your Chrome dev tools under the Rendering tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmfdRVZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505641244/4T0Sr6SR2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmfdRVZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505641244/4T0Sr6SR2.png" alt="Chrome test modern formats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my example, I used two pictures of different cats so we can see the difference.&lt;/p&gt;

&lt;p&gt;When WebP is rendering, we should see this cute cat:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ_J8W86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505757204/r0V3WdOhl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ_J8W86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505757204/r0V3WdOhl.png" alt="WebP supported image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as a fallback, when we don't have WebP support, we should see this cat.jpg image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EwaUy5jg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505817215/3BDD3FpCg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EwaUy5jg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505817215/3BDD3FpCg.png" alt="HTML Picture jpeg fallback"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can try this out using the following Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/PobZJLL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h2&gt;

&lt;p&gt;The HTML Picture element has almost full support, and don't worry, the browsers that are don't support the tag will just fall back to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; we placed inside the picture tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5h0yBsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/picture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5h0yBsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/picture.png" alt="HTML Picture element support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The reasons I don't use Typescript</title>
      <author>Jordan Brennan</author>
      <pubDate>Wed, 10 Feb 2021 05:35:49 +0000</pubDate>
      <link>https://dev.to/jfbrennan/the-reasons-i-don-t-use-typescript-2fhb</link>
      <guid>https://dev.to/jfbrennan/the-reasons-i-don-t-use-typescript-2fhb</guid>
      <description>&lt;p&gt;At my first few programming jobs I worked on Java projects. It is here that I first learned to appreciate, but also hate strict typing.&lt;/p&gt;

&lt;p&gt;In a short amount of time I was drawn to front-end work and became proficient in JavaScript and really fell in love with the language. It was relatively easy to master, which enabled me to focus more on the user and quality and to work much faster than with Java. When Node.js came out I was thrilled because if it proved itself in large-scale production environments, then I could use JavaScript across the stack.&lt;/p&gt;

&lt;p&gt;Fast-forward and Angular 2.0 dropped which was exclusively Typescript. A bold move at the time! I had heard about TS prior to that, but ignored it because it came out of Microsoft (Sorry  MS! I really had no patience with anything MS back in those days, but things have since improved in Redmond).&lt;br&gt;
My first impression with Typescript was, "Wow, this feels less like an improved version of &lt;em&gt;JavaScript&lt;/em&gt; and more like a weird version of &lt;em&gt;Java&lt;/em&gt;."&lt;/p&gt;

&lt;p&gt;Time went on and Typescript became popular. In fact, it's so popular that some people are simply using it because it seems "everyone uses it". I revisited Typescript (a couple times!) in hopes of being more mentally prepared for the Javaness and seeing past initial hurdles and finding its real value. I was underwhelmed. Here's why I'm not a fan:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nonstandard" class="anchor"&gt;
  &lt;/a&gt;
  Non-standard
&lt;/h2&gt;

&lt;p&gt;Maybe it's a phase, but I really have little interest anymore in the JavaScript fashion trends. I find it all to be too big, too fussy, too much in the way, and too non-revolutionary to justify the cost. If it can't be linked to and run natively in the browser I have a lot less interest. Typescript is no exception here and more than CoffeeScript ever did it's fragmenting open source.&lt;/p&gt;

&lt;p&gt;On the other hand, I do want to learn new features of the &lt;em&gt;web platform&lt;/em&gt;, including JavaScript. Efforts should be going here, not to fragmentation. I want to write real JavaScript, minify, and deploy. Anything that complicates that process - no matter how popular - has to demonstrate a net increase in value. Like, game-changing value.&lt;/p&gt;

&lt;p&gt;And I don't think I'm alone here. JavaScript's fault-tolerant loosely-typed behavior is not a problem that &lt;em&gt;needs&lt;/em&gt; solving, or it's not a big enough source of issues to justify writing non-standard, non-executable, pipeline-dependent source code. If Typescript features make their way into ECMAScript, I'll definitely use some of it once the runtimes have native support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-begets-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Typescript begets Typescript
&lt;/h2&gt;

&lt;p&gt;I know technologies can be misused, but I've seen a lot of Typescript written &lt;em&gt;just to comply with the other Typescript that was written&lt;/em&gt;. You might be thinking, "Duh! That's the whole point!" and I know that, but what it means in practice is unless your custom types are truly something special (much of what I've seen are meaningless wrappers around the primitives), then those custom types beget more mostly meaningless Typescript code, which renders the exercise pointless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-the-kind-of-issues-i-see" class="anchor"&gt;
  &lt;/a&gt;
  Not the kind of issues I see
&lt;/h2&gt;

&lt;p&gt;JavaScript does have types and strict type checking and I've found it's quite easy and sufficient to leverage them when I need to, but I don't often &lt;strong&gt;need&lt;/strong&gt; to. &lt;/p&gt;

&lt;p&gt;The issues I most often &lt;strong&gt;need&lt;/strong&gt; to deal with can't be solved with Typescript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network and environment-related issues&lt;/li&gt;
&lt;li&gt;API call failures&lt;/li&gt;
&lt;li&gt;AuthN, AuthZ stuff&lt;/li&gt;
&lt;li&gt;CSS not rendering the way I expected&lt;/li&gt;
&lt;li&gt;Events not behaving the way I expected&lt;/li&gt;
&lt;li&gt;Copy/pasted the wrong value, like &lt;code&gt;/foo&lt;/code&gt; url instead of &lt;code&gt;/bar&lt;/code&gt; url, or &lt;code&gt;foo&lt;/code&gt; storage key instead of &lt;code&gt;bar&lt;/code&gt; key&lt;/li&gt;
&lt;li&gt;I goofed and used the wrong method, like &lt;code&gt;filter()&lt;/code&gt; when I should have &lt;code&gt;map()&lt;/code&gt;ed&lt;/li&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would love to see some good data on non-Typescript projects and their percentage of production issues that would have been prevented with Typescript. Please share if you have a resource.&lt;/p&gt;

&lt;p&gt;Also, my IDE is smart enough to do what Typescript enables in regards to intellisense, so there's no benefit there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strict-is-not-good-for-the-web" class="anchor"&gt;
  &lt;/a&gt;
  Strict is not good for the web
&lt;/h2&gt;

&lt;p&gt;I remember one of my teams was investigating a production issue and eventually found the root cause was their custom type. Yes, a production issue &lt;em&gt;caused by&lt;/em&gt; Typescript, not prevented by it.&lt;/p&gt;

&lt;p&gt;Their code expected an object that came back from one of our APIs to have everything dictated by the type. Well, the API sent back the object without an optional property and the resulting code from Typescript crashed because heaven forbid the object didn't have all the properties &lt;em&gt;Typescript&lt;/em&gt; thought it should have even though the object did have all the properties needed by the &lt;em&gt;application&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Yes, of course you can throw more Typescript solutions at Typescript problems, and eventually pile on enough pseudo-code to make your JavaScript bullet-proof (we hope 🙏) or you can embrace the fault-tolerant nature of the web and wisely use JavaScript's strict type enforcement when actually necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-enjoy-the-benefits-of-not-having-typescript" class="anchor"&gt;
  &lt;/a&gt;
  I enjoy the benefits of not having Typescript
&lt;/h2&gt;

&lt;p&gt;Despite the herd mentality that forms around some technologies, Typescript is not 100% bliss. For example, can you share or copy some Typescript, paste, and execute? No. You only have that freedom with JavaScript. Can you debug your source code? No. What you see in dev tools is Chrome's best attempt at unraveling the mess and presenting you with something kind of close to source. You can debug JavaScript at any time, with any tool, and even if it's minified you can usually make sense of it pretty quickly (and the path back to unminified source is direct and results in real debuggable code).&lt;/p&gt;

&lt;p&gt;Other benefits you get are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;less configuration (I've wasted hours doing this for Typescript)&lt;/li&gt;
&lt;li&gt;less false errors ("Sorry Typescript, but it is you who are wrong, not my code. Here, have another &lt;code&gt;@ts-ignore&lt;/code&gt; and be quiet.")&lt;/li&gt;
&lt;li&gt;faster builds&lt;/li&gt;
&lt;li&gt;less compatibility issues when using 3rd-party stuff&lt;/li&gt;
&lt;li&gt;smaller payloads&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So, is Typescript bad. No. &lt;br&gt;
Is it a must-have that provides tons of value. No.&lt;br&gt;
Should everyone Typescript because [current year]. No.&lt;br&gt;
Should you use it? If you have found a genuine need, yes.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How does ReScript affect me?</title>
      <author>Yawar Amin</author>
      <pubDate>Wed, 10 Feb 2021 05:24:21 +0000</pubDate>
      <link>https://dev.to/yawaramin/how-does-rescript-affect-me-1ja</link>
      <guid>https://dev.to/yawaramin/how-does-rescript-affect-me-1ja</guid>
      <description>&lt;p&gt;RECENTLY, the BuckleScript project was renamed to &lt;a href="https://rescript-lang.org/"&gt;ReScript&lt;/a&gt;. This apparently caused a lot of questions and confusion. So I will try to answer those questions from the point of view of actual use cases. The most important question: what does ReScript mean to me (or my project)?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-am-a-bucklescript-user-with-reasonml-syntax" class="anchor"&gt;
  &lt;/a&gt;
  I am a BuckleScript user with ReasonML syntax
&lt;/h2&gt;

&lt;p&gt;That is, you are using the BuckleScript compiler (now called ReScript) from the npm package &lt;a href="https://www.npmjs.com/package/bs-platform"&gt;&lt;code&gt;bs-platform&lt;/code&gt;&lt;/a&gt;. And you are using ReasonML syntax (&lt;code&gt;.re&lt;/code&gt;, &lt;code&gt;.rei&lt;/code&gt; files) that is supported out of the box.&lt;/p&gt;

&lt;p&gt;In this case the recommendation from the ReScript team is to &lt;a href="https://rescript-lang.org/docs/manual/latest/migrate-from-bucklescript-reason"&gt;migrate to ReScript syntax&lt;/a&gt;. They provide a migration script to do so. I won't delve into the justifications for the new syntax--the team has covered that extensively--but suffice to say the migration should be easy and well-supported, and a one-time effort.&lt;/p&gt;

&lt;p&gt;Of course, that's just the &lt;em&gt;recommendation;&lt;/em&gt; you don't actually need to migrate if you don't want to. For the foreseeable future, ReScript (the compiler) will continue to ship with ReasonML (v3.6) syntax support out of the box so your project can stay unaffected. But presumably at some point in the distant future, they will stop shipping that syntax. At that point you have other options if you want to keep using ReasonML syntax with ReScript, but none that are supported or recommended by the team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-am-a-bucklescript-user-with-ocaml-syntax" class="anchor"&gt;
  &lt;/a&gt;
  I am a BuckleScript user with OCaml syntax
&lt;/h2&gt;

&lt;p&gt;In this case you don't actually need to do anything; OCaml syntax is &lt;a href="https://rescript-lang.org/blog/a-note-on-bucklescripts-future-commitments"&gt;not going away&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The one caveat to this is that OCaml syntax won't be an officially promoted (or documented) part of the ReScript platform. So anyone using it presumably knows what they are doing and are capable of translating back the ReScript documentation to OCaml for themselves.&lt;/p&gt;

&lt;p&gt;You could of course consider migrating to ReScript syntax; but strictly speaking there is no need, so purely your decision.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-am-a-reasonml-user-with-esypesyetc" class="anchor"&gt;
  &lt;/a&gt;
  I am a ReasonML user with esy/pesy/etc.
&lt;/h2&gt;

&lt;p&gt;In that case you also don't need to do anything; ReasonML is a separate and ongoing project, and so are esy and pesy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-am-an-ocaml-user-with-duneopamesyetc" class="anchor"&gt;
  &lt;/a&gt;
  I am an OCaml user with dune/opam/esy/etc.
&lt;/h2&gt;

&lt;p&gt;In that case you also don't need to do anything; the ReScript changes don't affect you at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-wanted-to-compile-ocaml-to-both-native-and-javascript" class="anchor"&gt;
  &lt;/a&gt;
  I wanted to compile OCaml to both native and JavaScript
&lt;/h2&gt;

&lt;p&gt;In that case you can (and always could) use the well-established project Js_of_ocaml (and even the Ocsigen/Eliom framework, which is a truly full-stack OCaml solution).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-wanted-to-compile-ocaml-to-both-native-and-javascript-using-bucklescriptrescript" class="anchor"&gt;
  &lt;/a&gt;
  I wanted to compile OCaml to both native and JavaScript using BuckleScript/ReScript
&lt;/h2&gt;

&lt;p&gt;Trust me; you don't want to do that. I've done a &lt;a href="https://github.com/yawaramin/fullstack-reason"&gt;proof of concept&lt;/a&gt; of what it would look like, and the effort and the coordination of different tools and conventions required across the native and BuckleScript compilers and toolchains, is a large amount of effort with unclear payoff. It's unfortunate, but nothing is perfect and this particular combination is just not viable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-wanted-to-compile-to-native-and-javascript-using-bsbnative" class="anchor"&gt;
  &lt;/a&gt;
  I wanted to compile to native and JavaScript using bsb-native
&lt;/h2&gt;

&lt;p&gt;As far as I know, bsb-native is an abandoned project. You are of course welcome to fork and work on it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-do-something-else-and-the-rescript-change-affected-me" class="anchor"&gt;
  &lt;/a&gt;
  I want to do something else and the ReScript change affected me
&lt;/h2&gt;

&lt;p&gt;I would be interested to hear about how that happened.&lt;/p&gt;

</description>
      <category>ocaml</category>
      <category>reason</category>
      <category>rescript</category>
    </item>
  </channel>
</rss>
