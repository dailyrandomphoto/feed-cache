<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title> Do you really know TypeScript? (1): Thinking in sets </title>
      <author>Alex Menor</author>
      <pubDate>Sat, 25 Dec 2021 17:14:29 +0000</pubDate>
      <link>https://dev.to/alexmenor/do-you-really-know-typescript-1-thinking-in-sets-55dm</link>
      <guid>https://dev.to/alexmenor/do-you-really-know-typescript-1-thinking-in-sets-55dm</guid>
      <description>&lt;p&gt;I know many people, including myself, whose first experience with TypeScript was to write annotations in some variables and to add &lt;code&gt;as any&lt;/code&gt; until the transpiler stopped complaining.&lt;/p&gt;

&lt;p&gt;But at some point you realize that you &lt;strong&gt;really&lt;/strong&gt; should dig a little deeper into TypeScript and finally understand those errors.&lt;/p&gt;

&lt;p&gt;It's true that you can technically build the same websites/systems with and without TypeScript, but its benefits are huge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Catch errors at compile time instead of at runtime&lt;/li&gt;
&lt;li&gt;Autocomplete ("it was &lt;code&gt;user.phone&lt;/code&gt; or &lt;code&gt;user.phoneNumber&lt;/code&gt;?" ü§î)&lt;/li&gt;
&lt;li&gt;Language services (enabling some IDE's refactors for example)&lt;/li&gt;
&lt;li&gt;Better domain modelling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using TypeScript is not only investing in code's maintainability, it is also investing in developer's productivity.&lt;/p&gt;

&lt;p&gt;Okay, you are (or were already) convinced that TypeScript is worth learning, what is this series for?&lt;/p&gt;

&lt;p&gt;In this series I will go through many aspects of the language that were not obvious to me even after already having done some projects with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You will stop wrestling with TypeScript ü§º‚Äç‚ôÄÔ∏è&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seeing-types-as-sets-of-values"&gt;
  &lt;/a&gt;
  Seeing types as sets of values
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// what can we assign to it?&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can assign any value that belongs to a subtype of &lt;code&gt;Bar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rO9XxRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vi9ps43y8t4p48cl1m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rO9XxRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vi9ps43y8t4p48cl1m2.png" alt="Image description" width="880" height="968"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One cool thing of this system is that you can use set operators (among others) to create new types.&lt;/p&gt;

&lt;p&gt;For example the union operator: &lt;code&gt;number | string&lt;/code&gt; is the set of all numbers and strings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xp-uW6pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnw4kqmr4qub7mfgxxo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xp-uW6pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnw4kqmr4qub7mfgxxo6.png" alt="Image description" width="880" height="863"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structural-typing"&gt;
  &lt;/a&gt;
  Structural typing
&lt;/h2&gt;

&lt;p&gt;To know if a value belongs or not to a type, Typescript only focuses on the shape that it has.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We didn't use the "new" keyword&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jame&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That wouldn't be possible in nominal type systems.&lt;/p&gt;

&lt;p&gt;Let's see a little harder example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DesktopItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Folder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;DesktopItem&lt;/code&gt; contains all the objects that either have the properties (name and type) of &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;Folder&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DesktopItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;couldBeFileOrFolder&lt;/span&gt;

&lt;span class="c1"&gt;// should work, right?&lt;/span&gt;
&lt;span class="nx"&gt;givenItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extension&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't work because only &lt;code&gt;File&lt;/code&gt; has that property and the specific type of &lt;code&gt;item&lt;/code&gt; could be &lt;code&gt;Folder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When we declare the union of two types the result is a type that has the intersection of the properties. In this case objects with a property &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;, because it is the only property that have in common.&lt;/p&gt;

&lt;p&gt;It's also true the other way around: The intersection of two types results in a type that has the union of the properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-empty-set-and-the-universal-set"&gt;
  &lt;/a&gt;
  The empty set and the universal set
&lt;/h2&gt;

&lt;p&gt;If we can think of types as sets of values, what types are the empty set and the universal set?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;never&lt;/code&gt; is the empty set and &lt;code&gt;unknown&lt;/code&gt; is the universal set.&lt;/p&gt;

&lt;p&gt;These are both very special and we'll talk about them soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-remember"&gt;
  &lt;/a&gt;
  Things to remember
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Types are sets of values&lt;/li&gt;
&lt;li&gt;One value of type &lt;code&gt;Y&lt;/code&gt; is assignable to a type &lt;code&gt;X&lt;/code&gt; if &lt;code&gt;Y&lt;/code&gt; is a subtype of &lt;code&gt;X&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type compatibility in Typescript is determined by structural typing.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 top sites to find written tutorials on Android development in 2022</title>
      <author>ulimi-creator</author>
      <pubDate>Sat, 25 Dec 2021 16:37:34 +0000</pubDate>
      <link>https://dev.to/ulimicreator/5-top-sites-to-find-written-tutorials-on-android-development-in-2022-1f5l</link>
      <guid>https://dev.to/ulimicreator/5-top-sites-to-find-written-tutorials-on-android-development-in-2022-1f5l</guid>
      <description>&lt;p&gt;&lt;a title="mammela-686310, CC0, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Android_logo_3.jpg"&gt;&lt;img alt="Android logo 3" src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2RlaLS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/Android_logo_3.jpg/512px-Android_logo_3.jpg" width="512" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you've been procrastinating since 2021, and now that 2022 is in sight you're laced up and getting ready to start your android journey. Even if this scenario doesn't match your situation, as long as you need to learn more about Android, go through these gems on my list and you'll end up adding them to your list of favorites for anything android development-related. &lt;/p&gt;




&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.raywenderlich.com/library?content_types%5B%5D=article&amp;amp;domain_ids%5B%5D=2&amp;amp;limit_count=9&amp;amp;section_id=205&amp;amp;sort_direction=desc&amp;amp;sort_order=popularity"&gt;Raywenderlich&lt;/a&gt;&lt;br&gt;
This happens to be my number one go-to for iOS, Flutter, and Android.&lt;br&gt;
Though there's a price tag on their content made by their contributors, Raywenderlich comes first on my list because even their free content is awesome. An android developer of any level can easily benefit from their posts, and for programmers who do not have English as their first language, you notice how some of their posts are simplified when compared to other sites'. Additional points for them when you consider their learning paths, and the books they provide. If you rather enjoy lengthy articles then this might just end up being your soul-site. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://proandroiddev.com/"&gt;ProAndroidDev&lt;/a&gt;&lt;br&gt;
Hosted on Medium, I don't think many know about this site, but then a gem remains a gem whether tons of people know about it or not. On this site, you can find blog posts about android development, and the editors here have notable work experiences so you can be sure that you're getting content you can rely on. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.android.com/guide"&gt;Android's Official Developer Site&lt;/a&gt;&lt;br&gt;
"Why oh why", you might ask, "is android's official site for developers at number 3?". Well, that's because, for some reason only known to the Android team, their docs are not beginner-friendly. Maybe it could be their choice of words?&lt;br&gt;
I could have placed them at number 1 because their &lt;a href="https://codelabs.developers.google.com/?cat=Android&amp;amp;product=android"&gt;codelabs&lt;/a&gt; are enough to get them that seat, but as a non-native English speaker and a holder of grudges, I refuse to forgive their oversight. üòí &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/android-tutorial/"&gt;GeekForGeeks&lt;/a&gt;&lt;br&gt;
This site's delivery would undoubtedly appeal more to beginners and non-native speakers. Though you would find it slightly difficult to find advanced topics here, this remains one of the best places to get your feet wet with android development in 2022.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/android"&gt;StackOverflow&lt;/a&gt;&lt;br&gt;
While you might not find "articles" about android development in StackOverflow since it happens to primarily be a platform where you ask questions and possibly have them answered by an army of developers, be rest assured that the mountain of information gotten from these answered questions will leave you more informed than you previously were. If you can't find an already answered question that is similar to yours, then you can always just ask yours. As a bonus, you could even come across links to other sites where you can find knowledge.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;If you think you have a better list with your top five sites to learn android development in 2022, you can always choose to make a comment sharing them.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>android</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I Ask Questions as a Software Engineer</title>
      <author>Navendu Pottekkat</author>
      <pubDate>Sat, 25 Dec 2021 16:19:17 +0000</pubDate>
      <link>https://dev.to/navendu/how-i-ask-questions-as-a-software-engineer-bp0</link>
      <guid>https://dev.to/navendu/how-i-ask-questions-as-a-software-engineer-bp0</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover Photo by &lt;a href="https://unsplash.com/@nci?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;National Cancer Institute&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/indian-classroom?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I ask a lot of questions to my peers and to strangers on public forums in the internet. This year, I have been trying to improve this process to ask better questions. Here is how I do it.&lt;/p&gt;

&lt;p&gt;But first of all,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-good-questions"&gt;
  &lt;/a&gt;
  What are Good Questions?
&lt;/h2&gt;

&lt;p&gt;Good questions are the ones which are easy to answer.&lt;/p&gt;

&lt;p&gt;Our goal for asking a question is to have the other person explain what they know in a way you can understand. A series of good questions is the key to a good answer.&lt;/p&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;J: What happens when we strip the binaries? (Too vague and broad)&lt;/p&gt;

&lt;p&gt;N: Stripped binaries don‚Äôt have debugging information. So its size is reduced ... (Answers with a lot of irrelevant information)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;J: I see that we are stripping the binaries to reduce its size before publishing. I found that it shouldn‚Äôt affect the performance. Is that right? What other implications does this have? (Clear question, easy to answer)&lt;/p&gt;

&lt;p&gt;N: Stripping only removes the debugging information. It wouldn‚Äôt affect the performance in any way. But it will be difficult to debug if we run into any issues as debug symbols are removed from the traceback.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-with-bad-questions"&gt;
  &lt;/a&gt;
  The Problem with Bad Questions
&lt;/h2&gt;

&lt;p&gt;Bad questions can derail a conversation easily.&lt;/p&gt;

&lt;p&gt;For me, asking bad questions have often resulted in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the person explaining things irrelevant to my question.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the person explaining things I have no clue of.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the person explaining what I already know.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the person not answering the question at all (especially for under researched questions).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this boils down to you or both of you walking away frustrated and without a clear answer.&lt;/p&gt;

&lt;p&gt;At this point it should be fairly obvious why you should focus on asking questions properly. So, here is my process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-are-you-asking"&gt;
  &lt;/a&gt;
  Who are you Asking?
&lt;/h2&gt;

&lt;p&gt;Who you are asking a question should impact how you ask the question. Let me explain.&lt;/p&gt;

&lt;p&gt;If you are asking your coworker who works on your project or is familiar of the particular niche, you can fairly assume that the person has some context on what you are asking.&lt;/p&gt;

&lt;p&gt;This means that there would be less things for you to explain and you can build your explanation from your shared knowledge. But it is a different game when you are asking questions to the people of the interwebs.&lt;/p&gt;

&lt;p&gt;I have had my share of bashing from people in Stack Overflow when I began programming. I get that having a high bar for quality assurance helps Stack Overflow be the go to place to ask questions but some of the moderators are so trigger happy that they will shoot you (your question) down right away.&lt;/p&gt;

&lt;p&gt;But anyway, the important thing to remember here is that the person reading your question has very little context about your situation. It is obvious when a person has put very little effort in asking questions and these questions are the first to get the bashing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-ask"&gt;
  &lt;/a&gt;
  When to Ask?
&lt;/h2&gt;

&lt;p&gt;If you have a lot of questions or if you think answering your question will take time, it is better to schedule a time when you are both available.&lt;/p&gt;

&lt;p&gt;If your questions are quick, it is better to ask them right away if it ends up saving you a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-first-ask-later"&gt;
  &lt;/a&gt;
  Google First, Ask Later
&lt;/h2&gt;

&lt;p&gt;One of my biggest pet peeve is people who ask technical questions that can be answered by the first result of a Google search. It shows little effort from their part and now I just ask people to Google it and do not bother to answer until they do their homework.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I maintain a project called Meshery and one of the new contributors (who came in to get a &lt;a href="https://summerofcode.withgoogle.com/"&gt;GSoC internship&lt;/a&gt;) literally asked if I could explain what Meshery is.&lt;/p&gt;

&lt;p&gt;We have a website, 100+ pages of documentation, recordings of conference talks and technical documentation, all sent to the user as they join the community.&lt;/p&gt;

&lt;p&gt;You know how that conversation went.&lt;/p&gt;

&lt;p&gt;It would have been different if they had asked me something along the lines of ‚ÄúI have been going through Meshery‚Äôs docs and been trying it out locally. I‚Äôm not clear how Meshery adds value if a person is already using a service mesh. Could you point me to any docs where this is explained better?‚Äù.&lt;/p&gt;

&lt;p&gt;Think for a moment on how you would have answered in these scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Doing a bit of research can help you build some foundational knowledge to ask a set of better questions.&lt;/p&gt;

&lt;p&gt;The ‚ÄúGoogle first, ask later‚Äù motto is only good as a rule of thumb. Nothing has stopped me from asking obvious, googleable (&lt;a href="https://en.wiktionary.org/wiki/googleable"&gt;it is a real word&lt;/a&gt;) questions when in conversation with someone.&lt;/p&gt;

&lt;p&gt;To sum it up, take some effort, do your homework and then ask your questions. Don‚Äôt expect to be spoon-fed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-that-right"&gt;
  &lt;/a&gt;
  Is that Right?
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs go back to the ‚Äústripped binary‚Äù example.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;J: I see that we are stripping the binaries to reduce its size before publishing. I found that it shouldn‚Äôt affect the performance. Is that right? What other implications does this have?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See how stating what you already lets you build the rest of conversation?&lt;/p&gt;

&lt;p&gt;To ask this question, you have to spend some time and dig through what a stripped binary is and how it is different from a "normal" binary. The time taken to understand and formulate that question is time well spent.&lt;/p&gt;

&lt;p&gt;On the receiving end, the person will see that you have spent time in this and is not just asking them to do your work. It will also be easier to answer your question building by on your foundational knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vague-precise-questions"&gt;
  &lt;/a&gt;
  &lt;del&gt;Vague&lt;/del&gt; Precise Questions
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;J: How do I use a Kind cluster to setup my development environment?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you ask me this, I would reply with a link to the Kind docs. But this wasn‚Äôt what they intended to ask. So they say,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;J: I tried this but it is not working.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, there are million different reasons for this to not work. I am not Doctor Strange to evaluate all the possibilities in a second! A little bit more context might help.&lt;/p&gt;

&lt;p&gt;I will cut to the chase and say how I would ask this question.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N: I was trying to setup Kind for my local development environment. I am on macOS. I have Docker Desktop and Kind running. I have also setup Metallb LoadBalancer and I see the external IP of the service as shown on the logs below. Still, I am not able to reach it from my host machine. Is there something I‚Äôm missing?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then that senior engineer with years of experience can jump right in and say,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;S: On macOS, Docker does not expose the docker network to the host. You can try port-forwarding to reach the pods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See how easy it was to answer?&lt;/p&gt;

&lt;p&gt;This goes for all questions. The more precise you are with your questions, more easy it is to answer.&lt;/p&gt;

&lt;p&gt;This also prevents the person answering from going off on a tangent explaining irrelevant details which you may either not care about or aren‚Äôt relevant to your actual question.&lt;/p&gt;

&lt;p&gt;Another way to prevent shooting off on a tangent is to ask questions that can be answered by a simple yes/no.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;J: &lt;del&gt;Why are we using this gRPC middleware instead of directly calling the required service?&lt;/del&gt; &lt;/p&gt;

&lt;p&gt;J: Are we using this gRPC middleware to convert between two different configuration formats?&lt;/p&gt;

&lt;p&gt;N: Yes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The person usually goes to explain why yes/no after this but these questions are easy to answer and I almost always get quick responses.&lt;/p&gt;

&lt;p&gt;These questions are quite useful when you are in conversation with a person where they are explaining something to you. This segues into my next point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-in-doubt-ask-more-questions"&gt;
  &lt;/a&gt;
  When in Doubt, Ask More Questions
&lt;/h2&gt;

&lt;p&gt;Imposter syndrome is real.&lt;/p&gt;

&lt;p&gt;When I started working with other people, I often stopped myself from saying ‚ÄúI don‚Äôt understand‚Äù thinking I would look stupid.&lt;/p&gt;

&lt;p&gt;I have then come to learn that if you ask a ‚Äústupid‚Äù question, you are stupid for the day but if you don‚Äôt, you are stupid for life (because you will always stop yourself from asking questions, ending up not understanding things completely... umm, you get it right?).&lt;/p&gt;

&lt;p&gt;This means when you get an answer and you are not completely satisfied,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;say what you don‚Äôt understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ask more clarifying questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stop the speaker and ask more specific questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Confronting the imposter syndrome is hard but it has been helpful to me in knowing that &lt;a href="https://www.ted.com/talks/elizabeth_cox_what_is_imposter_syndrome_and_how_can_you_combat_it"&gt;everyone else face this too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you start thinking ‚Äúmaybe I‚Äôm just not smart enough to understand the answer‚Äù, remember that people want to help you. You just have to help them help you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-in-public"&gt;
  &lt;/a&gt;
  Learning in Public
&lt;/h2&gt;

&lt;p&gt;Ask questions in a public channel instead of DMs.&lt;/p&gt;

&lt;p&gt;This may not work in every situation but I try to do this more often now.&lt;/p&gt;

&lt;p&gt;This will document the discussions publicly and would also help any others looking in. You can then always point people to this discussion if they ask the same question.&lt;/p&gt;

&lt;p&gt;Take Stack Overflow for example. You almost always find answers to problems you are facing from questions asked by someone else.&lt;/p&gt;

&lt;p&gt;The imposter syndrome shifts to the next gear here. Face it head-on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asking-good-questions-is-a-skill"&gt;
  &lt;/a&gt;
  Asking Good Questions is a Skill
&lt;/h2&gt;

&lt;p&gt;And like all skills, it is sharpened with practice.&lt;/p&gt;

&lt;p&gt;Asking the right questions will help you extract the answers you want. In most scenarios, it is not that the person answering is incapable, but you are not asking the right questions.&lt;/p&gt;

&lt;p&gt;I have gotten better at this over the year and I am still working out the kinks in my process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This might be a good post to come back in a year to reflect and improve upon.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To summarise this post in a sentence,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make it easy for people to help you.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>http.Post Golang example
</title>
      <author>Ramu Mangalarapu</author>
      <pubDate>Sat, 25 Dec 2021 16:12:28 +0000</pubDate>
      <link>https://dev.to/ramu_mangalarapu/httppost-golang-example-5jp</link>
      <guid>https://dev.to/ramu_mangalarapu/httppost-golang-example-5jp</guid>
      <description>&lt;p&gt;Hello, &lt;/p&gt;

&lt;p&gt;Today, I am going to write small tutorial about basic usage of &lt;a href="https://pkg.go.dev/net/http"&gt;http.Post&lt;/a&gt; method in Golang. Please ignore if there is any mistakes, thank you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"bytes"&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// Post holds the post data that we send or receive from the API server.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id,omitempty"`&lt;/span&gt;
    &lt;span class="n"&gt;Title&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"title"`&lt;/span&gt;
    &lt;span class="n"&gt;Body&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"Body"`&lt;/span&gt;
    &lt;span class="n"&gt;UserID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"user_id"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Before we create resource or post on the API server, we need to see the documentation of the REST API we want to use.&lt;/span&gt;
    &lt;span class="c"&gt;// Like what is the URL, version, what are the required fields in the resource object.&lt;/span&gt;
    &lt;span class="c"&gt;// Most of the companies create API docs,  it will have examples in different programming languages along with cURL commands.&lt;/span&gt;
    &lt;span class="c"&gt;// Companies also create SDKs in different programming languages.&lt;/span&gt;
    &lt;span class="c"&gt;// Difference between SDK and API: https://addevice.medium.com/difference-between-an-api-and-an-sdk-anyone-can-understand-3a95bf7fc691&lt;/span&gt;
    &lt;span class="c"&gt;// For example Okta to deal with mangement of users, they are having SDK at:https://github.com/okta/okta-sdk-golang&lt;/span&gt;

    &lt;span class="c"&gt;// Let's build response body for the server we want to post or create resource&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Title"&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"This is body"&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"userID"&lt;/span&gt;

    &lt;span class="c"&gt;// Now we need erializes Post 'p' to JSON&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to Serialize to JSON from native Go struct type: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// here http.Post method expects body as 'io.Redear' which should implement Read() method.&lt;/span&gt;
    &lt;span class="c"&gt;// So, bytes package will take care of that.&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// REST APIs means, always think in terms of 'resources'.&lt;/span&gt;
    &lt;span class="c"&gt;// This is good resource: https://www.practical-go-lessons.com/chap-35-build-an-http-client&lt;/span&gt;
    &lt;span class="c"&gt;// This post method uses default http client, so timeout is NOT mentioned.&lt;/span&gt;
    &lt;span class="c"&gt;// Doc of this POST API can be found here: https://jsonplaceholder.typicode.com/guide/.&lt;/span&gt;
    &lt;span class="n"&gt;postURL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"https://jsonplaceholder.typicode.com/posts"&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json; charset=utf-8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to create resource at: %s and the error is: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Always close the response body&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Let us just print the response headers info from the server&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Status received from server is: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"StatusCode received from server is: %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content Type received from Server is: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;// Like I mentioned in my last article,&lt;/span&gt;
    &lt;span class="c"&gt;// we can read the server response to our native Golang type&lt;/span&gt;
    &lt;span class="c"&gt;// as the map data structure is close to JSON, we could use it&lt;/span&gt;
    &lt;span class="c"&gt;// in fact we could use this for most of the wire formats.&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewDecoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to read response body: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Let's print the map data by iterating over it.&lt;/span&gt;
    &lt;span class="c"&gt;// Usually in real usecases we use this response to pass to ther functions.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"We have successfully created resource and read the response from API server."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>restapis</category>
    </item>
    <item>
      <title>WSL Ubuntu Docker install</title>
      <author>liu li</author>
      <pubDate>Sat, 25 Dec 2021 16:11:26 +0000</pubDate>
      <link>https://dev.to/liuli/wsl-ubuntu-docker-install-1403</link>
      <guid>https://dev.to/liuli/wsl-ubuntu-docker-install-1403</guid>
      <description>&lt;p&gt;&lt;a href="https://zenn.dev/sprout2000/articles/95b125e3359694"&gt;https://zenn.dev/sprout2000/articles/95b125e3359694&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Get Free Internship - Devstack Student Internship Program</title>
      <author>Sk Shoyeb</author>
      <pubDate>Sat, 25 Dec 2021 16:00:55 +0000</pubDate>
      <link>https://dev.to/shoyeb001/how-to-get-free-internship-devstack-student-internship-program-49cl</link>
      <guid>https://dev.to/shoyeb001/how-to-get-free-internship-devstack-student-internship-program-49cl</guid>
      <description>&lt;p&gt;If you want to start your career in IT industry, you have to overcome a huge competition. So that students search for &lt;strong&gt;Internships&lt;/strong&gt; in web development, Android Development, Data Science etc. But they cannot find a easy internship for themself. &lt;/p&gt;

&lt;p&gt;Today I will talk about &lt;strong&gt;DSIP Program **which is providing free internship for those students who want to start their **career in Software Development&lt;/strong&gt;. This article will help you in getting &lt;strong&gt;free internship&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dsip-internship"&gt;
  &lt;/a&gt;
  What Is DSIP Internship
&lt;/h2&gt;

&lt;p&gt;DSIP is &lt;strong&gt;Devstack Student Internship Program&lt;/strong&gt;. This internship program is arranged by &lt;strong&gt;Devstack Solutions&lt;/strong&gt;. They are giving &lt;strong&gt;free internship&lt;/strong&gt; in all IT fields. &lt;/p&gt;

&lt;p&gt;Over 1500+ students from 250+ Colleges has been participated in this program. The new internship batch is starting from January, 2022. &lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;virtual internship&lt;/strong&gt;. So you can do it from anywhere. You just need a laptop or pc. There are 3 types of internships. These are &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Web Development Internship&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Android Development Internship&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Science &amp;amp; ML Internship&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;After completing the internship you will get free certificate, free letter of recommendation. They are also giving free t-shirt swags for the top performers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tasks"&gt;
  &lt;/a&gt;
  Tasks
&lt;/h2&gt;

&lt;p&gt;You have to complete their 2 or 3 tasks. The task details are available in their website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-process-amp-eligibility"&gt;
  &lt;/a&gt;
  Apply Process &amp;amp; Eligibility
&lt;/h2&gt;

&lt;p&gt;Devstack is taking application from their official website. Apply from Here - &lt;a href="https://www.devstacksolution.in/dsip"&gt;Apply Now&lt;/a&gt;. The eligibility is you have to be a student of B.Tech, BCA, MCA, M-Tech, B.sc, M.sc, BE etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In LinkedIn this internship program is becoming very popular. So I share this program with you. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Ruby 3.1.0 Released</title>
      <author>Ben Halpern</author>
      <pubDate>Sat, 25 Dec 2021 16:00:23 +0000</pubDate>
      <link>https://dev.to/ben/ruby-310-released-f77</link>
      <guid>https://dev.to/ben/ruby-310-released-f77</guid>
      <description>&lt;h2&gt;
  &lt;a href="#official-post"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ruby-lang.org/en/news/2021/12/25/ruby-3-1-0-released/"&gt;Official post&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;YJIT: New experimental in-process JIT compiler disabled by default (needs --yjit cli option), limited to Unix-like x86-64 platforms for now&lt;/li&gt;
&lt;li&gt;debug gem: A new debugger&lt;/li&gt;
&lt;li&gt;error_highlight: Fine-grained error location in backtrace&lt;/li&gt;
&lt;li&gt;IRB Autocomplete and Document Display&lt;/li&gt;
&lt;li&gt;Values in Hash literals and keyword arguments can be omitted&lt;/li&gt;
&lt;li&gt;Pin operator in pattern matching now takes an expression&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>news</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Starfield Programming in JavaScript</title>
      <author>Bek Brace</author>
      <pubDate>Sat, 25 Dec 2021 15:59:01 +0000</pubDate>
      <link>https://dev.to/bekbrace/starfield-programming-in-javascript-3n20</link>
      <guid>https://dev.to/bekbrace/starfield-programming-in-javascript-3n20</guid>
      <description>&lt;p&gt;I did not realize how coding tutorials on YouTube are sometimes annoying - including my own (no exception üòÑ), don't get me wrong, I mean it's great to be taught and all but often it's just annoying, you want to watch someone coding in silence and code with them, especially if you're familiar with the language/framework/tech they're using in the video.&lt;/p&gt;

&lt;p&gt;This is an HTML/CSS/JavaScript moving background ideal for any space 2d video game like Space Invaders, Galaxy Hunters or Asteroids, coded from scratch in silence in a rainy night here in Poland, and I did not want to talk just code in silence and if you're a beginner - intermediate, you can code along with me or you can leave it turned on while doing your own stuff.&lt;/p&gt;

&lt;p&gt;The idea was inspired from one famous YouTuber called Takuya and his channel is called "devaslife", he's a Japanese from Osaka who speaks perfect English. The man types in a very smooth way on the terminal - he uses Fish terminal - and never touches the mouse in all of his videos; productive and efficient. I was only inspired by him, and started creating my own videos with my own style, just occasionally not being the main style on the channel.&lt;/p&gt;

&lt;p&gt;You might find me struggling while typing a little bit, that's because this was my first time suing this new IBM Compatible Keyboard manufactured by a German company called "Perrix".&lt;/p&gt;

&lt;p&gt;Here's the video&lt;br&gt;
Hope you enjoy it - if you like that type of videos&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WyxGIGh8p4I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Source Code: &lt;a href="https://github.com/BekBrace/starfield-game-background"&gt;https://github.com/BekBrace/starfield-game-background&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;YouTube : &lt;a href="https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg"&gt;https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg&lt;/a&gt;&lt;br&gt;
Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbrace‚Äã‚Äã‚Äã‚Äã&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace"&gt;https://github.com/BekBrace&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com"&gt;https://bekbrace.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Simple Digital Clock with Date using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Sat, 25 Dec 2021 15:46:58 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/simple-digital-clock-with-date-using-javascript-41c</link>
      <guid>https://dev.to/shantanu_jana/simple-digital-clock-with-date-using-javascript-41c</guid>
      <description>&lt;p&gt;In this article you will learn how to create Simple &lt;a href="https://www.foolishdeveloper.com/2021/12/javascript-digital-clock-with-date.html"&gt;Digital Clock with Date using javaScript&lt;/a&gt; HTML, CSS. Earlier I shared with you many more ways to make digital clock. This digital clock has been created with the help of Glassmorphism design.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Pg6Xjb60cI4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It was designed with HTML, CSS and JavaScript enabled this digital watch. This is a bit different from a normal digital watch. Because here you can see the date with time. &lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/12/javascript-digital-clock-with-date.html"&gt;watch the live demo&lt;/a&gt; to see how it works. If you look at the picture above you will understand that there is a small box where the date can be found.&lt;/p&gt;

&lt;p&gt;Time and date will be received from your device using New date method. Then using setInterval I instructed to update all those calculations and time every second.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-design-the-webpage"&gt;
  &lt;/a&gt;
  Step 1: Design the webpage
&lt;/h3&gt;

&lt;p&gt;Using the following HTML and CSS codes, I first created two circles on the webpage. These circles are basically a part of Glassmorphism design. You can skip this colorful circle if you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shape"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shape"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#080710&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ssJErZ67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjGpA3XGVERMnOBCpi-fJ3JeeR6N2phRaEonDumEr1McJ5ADkNqZtMfQo-6Bcd44nVYs51GeUbPPLCnSYSlxVyb0Amp7Cu4wpqJmEsZKsdEk6BgeRY1dsgo8K2C4uTCZU4uej25v--v7rzGBhcvgTEpZV3EHUnDSz5eciLE8qDrBVio5TI8JwWkzIq43Q%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssJErZ67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjGpA3XGVERMnOBCpi-fJ3JeeR6N2phRaEonDumEr1McJ5ADkNqZtMfQo-6Bcd44nVYs51GeUbPPLCnSYSlxVyb0Amp7Cu4wpqJmEsZKsdEk6BgeRY1dsgo8K2C4uTCZU4uej25v--v7rzGBhcvgTEpZV3EHUnDSz5eciLE8qDrBVio5TI8JwWkzIq43Q%3Ds16000" alt="Design the webpage" width="880" height="438"&gt;&lt;/a&gt;&lt;br&gt;
First an area has been defined which will contain these two circles. Here the width of the area: 430px and &lt;code&gt;height: 520px&lt;/code&gt;. Circle height, &lt;code&gt;width 140px&lt;/code&gt; and &lt;code&gt;border-radius: 50%&lt;/code&gt; is used to make it completely round.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;430px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;520px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now those two circles have been placed in a certain place and in both cases we have used different &lt;code&gt;linear-gradient colors&lt;/code&gt;. You can adjust the positions of the circles as you wish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="m"&gt;#1845ad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#23a2f6&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#ff512f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#f09819&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhixQYC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiyb2i9YyHVgQgNK9nZkDC4KJOgMfwWIngMFNP6jGRB7KnNacCKPsIdWCNVXVYbFQhr189V8p6Sc7lfqGAzpAbRoOubcuwz0DHbNw374RhZmCVPrQG2rVXXDzlTL6-w4XZJ1-cB6zSWOy4u2vf8KWbZK6YBet6H19k33jCP60ndSh7vONmeHV1I7ZtgAQ%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhixQYC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiyb2i9YyHVgQgNK9nZkDC4KJOgMfwWIngMFNP6jGRB7KnNacCKPsIdWCNVXVYbFQhr189V8p6Sc7lfqGAzpAbRoOubcuwz0DHbNw374RhZmCVPrQG2rVXXDzlTL6-w4XZJ1-cB6zSWOy4u2vf8KWbZK6YBet6H19k33jCP60ndSh7vONmeHV1I7ZtgAQ%3Ds16000" alt="two circles" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-basic-structure-of-digital-clock"&gt;
  &lt;/a&gt;
  Step 2: Basic structure of digital clock
&lt;/h3&gt;

&lt;p&gt;Now the basic structure of the digital clock has been created. &lt;code&gt;Backdrop-filter: blur (10px)&lt;/code&gt; has been used to blur the background of this clock.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alarm-clock"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.17&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üìåüìå Remember, time &lt;code&gt;cannot be seen without JavaScript&lt;/code&gt;. I have used the image below to understand what will change after using the above HTML and CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0mdZ56E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEitexAazO46k5wBz9m5FCZzrIg-7YitNrOdDM-C5PrVbU2e5We48TpQ_Y4B02fGIW_2rRVvNySx07t65SRYqjWpcWu-y9paVdfBb-vClPRCRuk_5wFRyDFZJbbkoDhIFygp2kWuowNr51UGsbA7MWBo-xz5vP92RObOP3YhwSsUi8WmiF1Mun3DKacZNA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0mdZ56E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEitexAazO46k5wBz9m5FCZzrIg-7YitNrOdDM-C5PrVbU2e5We48TpQ_Y4B02fGIW_2rRVvNySx07t65SRYqjWpcWu-y9paVdfBb-vClPRCRuk_5wFRyDFZJbbkoDhIFygp2kWuowNr51UGsbA7MWBo-xz5vP92RObOP3YhwSsUi8WmiF1Mun3DKacZNA%3Ds16000" alt="Basic structure of digital clock " width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-code-to-view-time"&gt;
  &lt;/a&gt;
  Step 3: Add code to view time
&lt;/h3&gt;

&lt;p&gt;Now I have added the necessary HTML to view the time. Hours, minutes and seconds can be found here. A colon has been used in between each period which will help to enhance the beauty a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"time"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hours"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"minutes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; : &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"seconds"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;19px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Orbitron"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.time&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#09ecf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#375f08&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-design-the-colon-and-add-animation"&gt;
  &lt;/a&gt;
  Step 4: Design the colon and add animation
&lt;/h3&gt;

&lt;p&gt;Now the colon has been designed and animation has been added. In the meantime I have used an animation that will help to show and hide some time intervals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.time&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nc"&gt;.colon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üìåüìå Remember, time &lt;code&gt;cannot be seen without JavaScript&lt;/code&gt;. I have used the image below to understand what will change after using the above HTML and CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Rh7ohlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjcJ7IGSCqNoBQwev_9Utv6v4G_OrRia_MzfZNzYqDRUfxIn_a8pFf0XhZag_AjExxRPYZwfT7B6TH0dJEkw2knoRYScwJex1rjLB737spmjcyXZWem4dvHnxWaMc7b_wX0sZ99_UaqGIOnU800JwKP_QSxsgU92sT2s5N2p9U7npTQVZYTmRjvGbAxkw%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Rh7ohlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjcJ7IGSCqNoBQwev_9Utv6v4G_OrRia_MzfZNzYqDRUfxIn_a8pFf0XhZag_AjExxRPYZwfT7B6TH0dJEkw2knoRYScwJex1rjLB737spmjcyXZWem4dvHnxWaMc7b_wX0sZ99_UaqGIOnU800JwKP_QSxsgU92sT2s5N2p9U7npTQVZYTmRjvGbAxkw%3Ds16000" alt="Add code to view time" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-code-to-view-the-date"&gt;
  &lt;/a&gt;
  Step 5: Add code to view the date
&lt;/h3&gt;

&lt;p&gt;Now we have created a place to see the date in the digital clock. As I said before, months, days and years can be seen here. Now I have used HTML and CSS code to create its basic structure. Later I implemented it with the help of JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"month"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"day"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;,
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"year"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.alarm-clock&lt;/span&gt; &lt;span class="nc"&gt;.date&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.27&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üìåüìå Remember, time and Date&lt;code&gt;cannot be seen without JavaScript&lt;/code&gt;. I have used the image below to understand what will change after using the above HTML, CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" alt=" Add code to view the date" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-activate-digital-clock-with-date-using-javascript"&gt;
  &lt;/a&gt;
  Step 6: Activate Digital Clock with Date using JavaScript
&lt;/h3&gt;

&lt;p&gt;Above we have all designed to create this &lt;strong&gt;Digital Clock with Date&lt;/strong&gt;. Now is the time to implement it with JavaScript. For this you must have an idea about basic JavaScript.&lt;/p&gt;

&lt;p&gt;First some of the class functions have been assigned a constant. Because I can't directly use the ID function in JavaScript. For that a global constant has to be determined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hours&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.minutes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.seconds&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.month&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.year&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the following function I will add all the calculations. In other words, I will add all the calculations needed to increase this clock in this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I mentioned earlier, the time and date information used here will be collected from the device using JavaScript's &lt;code&gt;New Date&lt;/code&gt; Method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the current information of month day and year has been collected and stored in different constants.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yyyy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the same way hours minutes minutes and seconds are taken from the device and they are stored in some constant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have stored the names of all the months in a constant called &lt;code&gt;"monthName"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;monthName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;March&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;April&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;June&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;July&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;September&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;October&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;November&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now through a few conditions I have managed to add one zero to the &lt;code&gt;time below 10&lt;/code&gt;. When the time is below 10, one zero will be added before that time. As a result, the times will be two numbers.&lt;/p&gt;

&lt;p&gt;Then those times have been arranged to show in the webpage using innerhtml. innerhtml helps to display any content within a web page.&lt;/p&gt;

&lt;p&gt;I have given the condition here that if the time is less than 10 then one zero will be added and then that time will be seen in the webpage. Then I gave another condition using else. If the time is &lt;code&gt;not below 10&lt;/code&gt;, then the time can be seen directly on the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hrs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;hrs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hrs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now using the same innerhtml, the information of the month, day and year has been arranged in the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;monthName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mm&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I mentioned earlier, all these calculations are stored in a function called set date. Now that function has been instructed to update every &lt;code&gt;1000 milliseconds&lt;/code&gt; or one second. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;setInterval&lt;/code&gt; helps to update any information after a certain period of time. This will update all these calculations every 1 second and we will see the time change every second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q79FL5k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEj8BGxHBnYilo8nYIGTr63WsWQlx95OFHj9tP0CtSsH10OgszHROyL__BsKUxg4CXCR9Sv1IqZgpkXRcD-eZqW3TtjUnBSVHoSmyPK9tEXZAbhks7wy6TdVnxYQgSBs6RlW6ngfd3xBwr9RnZQ7EwE7njZuM2GHPKDgGbKzod1V-ISVQpAc38Nivhz_qA%3Ds16000" alt="Digital Clock with Date using JavaScript&amp;lt;br&amp;gt;
" width="880" height="438"&gt;&lt;/a&gt;&lt;br&gt;
Hopefully from this tutorial you have learned how I created &lt;strong&gt;Digital Clock with Date using JavaScript&lt;/strong&gt;. I have made many more types of digital watches before. &lt;/p&gt;

&lt;p&gt;If you have any difficulty in making this &lt;strong&gt;JavaScript Digital Clock&lt;/strong&gt;, please let me know in the comments. You can &lt;a href="https://www.foolishdeveloper.com/2021/12/javascript-digital-clock-with-date.html"&gt;download the source code&lt;/a&gt; needed to create this JavaScript Digital Clock with Date.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building a Cross Platform NuGet Package</title>
      <author>Michael Jolley</author>
      <pubDate>Sat, 25 Dec 2021 15:30:12 +0000</pubDate>
      <link>https://dev.to/deepgram/building-a-cross-platform-nuget-package-453k</link>
      <guid>https://dev.to/deepgram/building-a-cross-platform-nuget-package-453k</guid>
      <description>&lt;p&gt;I love the .NET ecosystem. My career started writing classic ASP applications in Visual Basic and transitioned to C# with .NET 2.0. I remember building my first ASP.NET MVC application and feeling like I had just performed some kind of magic.&lt;/p&gt;

&lt;p&gt;Once I joined Deepgram, I was very excited about the prospect of building a .NET SDK from scratch. During the process, I realized that there are certain things to consider when building a .NET library to make it as accessible as possible to developers building with different versions of the .NET Framework and various platforms.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happy holidays! This post is a contribution to &lt;a href="https://www.csadvent.christmas/"&gt;C# Advent 2021&lt;/a&gt;. Be sure to visit and read all the excellent content focused on C# and the .NET community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h2&gt;

&lt;p&gt;Before we get too deep in the how-to, let's talk about the need I was trying to address. Today, Deepgram has two fully supported SDKs; Node.js &amp;amp; Python. Like .NET, both are great languages with solid ecosystems, but I wanted to provide that first-class citizen experience to my beloved .NET developers. üòÅ&lt;/p&gt;

&lt;p&gt;After a bit of planning, I landed on the following requirements for the SDK:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable access to all the publicly available endpoints of the &lt;a href="https://developers.deepgram.com/api-reference/"&gt;Deepgram API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Allow users to provide their own logging by using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loggerfactory"&gt;LoggerFactory&lt;/a&gt; provided in the &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; library&lt;/li&gt;
&lt;li&gt;Ensure the library was accessible to as many frameworks &amp;amp; platforms as reasonably practical&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#calling-the-api"&gt;
  &lt;/a&gt;
  Calling the API
&lt;/h2&gt;

&lt;p&gt;Most of the Deepgram API is accessible via HTTP requests, so the library handles those as you'd expect with an HTTPClient. Requests to transcribe audio in real-time are handled via WebSockets. Creating a reusable and well-managed WebSocket client was more challenging because I couldn't find any real-world examples in the documentation. In most cases, the documentation would show connecting to a socket, sending a message, receiving a message, and then disconnecting. In the real world, I needed a client that would connect, then send &amp;amp; receive messages on-demand, and disconnect at a later time that I decide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bring-your-own-logging"&gt;
  &lt;/a&gt;
  Bring Your Own Logging
&lt;/h2&gt;

&lt;p&gt;Logging, like tests, are one of those features that developers like to bypass. For years, my projects were scarce on logging and, when included, it was often added as an afterthought. That said, I was very impressed by one of my colleagues, &lt;a href="https://twitter.com/slorello"&gt;Steve Lorello&lt;/a&gt;, at Vonage, who worked on their .NET SDK. Not only did he do a great job with logging throughout the SDK, he utilized the &lt;code&gt;LoggerFactory&lt;/code&gt; to provide the ability for developers to choose their own logging solution. I contacted him as I was getting started to warn him that I was blatantly plagiarizing his work. üòÇ&lt;/p&gt;

&lt;p&gt;Luckily, Steve was super gracious and offered to help with any questions. Seriously, if you aren't following Steve on &lt;a href="https://twitter.com/slorello"&gt;Twitter&lt;/a&gt;, you should. He's doing outstanding work at Redis now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microsofts-crossplatform-recommendations"&gt;
  &lt;/a&gt;
  Microsoft's Cross-Platform Recommendations
&lt;/h2&gt;

&lt;p&gt;Microsoft recommends starting with a netstandard2.0 target. Since we only plan on supporting platforms &amp;amp; frameworks that can use .NET Standard 2.0 or later, I started reviewing any dependencies I had added intending to strip it down to only those compliant with the .NET Standard 2.0.&lt;/p&gt;

&lt;p&gt;I did notice in &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting"&gt;Microsoft's recommendations&lt;/a&gt; that in some cases, you may have to shield your users depending on their platform and framework, as in the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GpsLocation&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This project uses multi-targeting to expose device-specific APIs to .NET Standard.&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetCoordinatesAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#if NET461
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;CallDotNetFramworkApi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;#elif WINDOWS_UWP
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;CallUwpApi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;#else
&lt;/span&gt;        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PlatformNotSupportedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;#endif
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Allows callers to check without having to catch PlatformNotSupportedException&lt;/span&gt;
    &lt;span class="c1"&gt;// or replicating the OS check.&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;IsSupported&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#if NET461 || WINDOWS_UWP
&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#else
&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, our SDK didn't require these types of workarounds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-to-nuget-with-github-actions"&gt;
  &lt;/a&gt;
  Publishing to Nuget with GitHub Actions
&lt;/h2&gt;

&lt;p&gt;Because I created the library in Visual Studio 2022 using the new class library templates, the configuration for building a NuGet package was as painless as providing details like the name, description, etc. of the package. I had already created a GitHub Action to perform CI tasks, so I decided to add another &lt;a href="https://github.com/deepgram-devs/deepgram-dotnet-sdk/blob/main/.github/workflows/CI.yml"&gt;GitHub Action&lt;/a&gt; to deploy the package to NuGet.org when a new version was released.&lt;/p&gt;

&lt;p&gt;The Continuous Deployment (CD) action contains two jobs: &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;publish&lt;/code&gt;. The &lt;code&gt;build&lt;/code&gt; job creates the NuGet package, while the &lt;code&gt;publish&lt;/code&gt; job handles uploading the generated package to NuGet.org. The &lt;code&gt;publish&lt;/code&gt; job will only run if the &lt;code&gt;build&lt;/code&gt; job completes successfully. You can review the entire CD workflow file &lt;a href="https://github.com/deepgram-devs/deepgram-dotnet-sdk/blob/main/.github/workflows/CD.yml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#triggering-a-new-release"&gt;
  &lt;/a&gt;
  Triggering a New Release
&lt;/h3&gt;

&lt;p&gt;Once we're ready to release a new version of the SDK, we create a new GitHub release. The CD action is triggered when that new release is published. Once it begins, we use the &lt;code&gt;actions/checkout@v2&lt;/code&gt; to check out the code based on the sha associated with the release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#restoring-dependencies"&gt;
  &lt;/a&gt;
  Restoring Dependencies
&lt;/h3&gt;

&lt;p&gt;Once the repository is retrieved, we install .NET 6 and install any required dependencies from NuGet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identifying-version-number"&gt;
  &lt;/a&gt;
  Identifying Version Number
&lt;/h3&gt;

&lt;p&gt;Once the dependencies are installed, the next step pulls the version number from the GitHub release and outputs that value so that subsequent steps can access it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-amp-packaging-the-sdk"&gt;
  &lt;/a&gt;
  Building &amp;amp; Packaging the SDK
&lt;/h3&gt;

&lt;p&gt;Next, the action calls &lt;code&gt;dotnet pack&lt;/code&gt; and passes various parameters to configure the build and packing process to ensure we've got the cleanest output possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;--configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The --configuration parameter tells the build process to run in &lt;code&gt;Release&lt;/code&gt; mode rather than &lt;code&gt;Debug&lt;/code&gt; mode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;--no-restore&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because we previously ran &lt;code&gt;dotnet restore&lt;/code&gt; in the action, there's no need to restore packages from Nuget during the build process. The &lt;code&gt;--no-restore&lt;/code&gt; parameter tells the build process to skip this step to save time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;--output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we build the SDK with the various targets, we want that clean output saved to a specific directory. In our case, the &lt;code&gt;./dist&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-p&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The -p parameter is used to pass additional parameters to the build process. In our case, we are sending a parameter called &lt;code&gt;Version&lt;/code&gt; and set it to the value of the &lt;code&gt;get_version&lt;/code&gt; step, which returned our version number based on the GitHub release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#archiving-packing-artifacts"&gt;
  &lt;/a&gt;
  Archiving Packing Artifacts
&lt;/h3&gt;

&lt;p&gt;The generated package should live in the &lt;code&gt;./dist&lt;/code&gt; directory when the build and packing process completes. We use the &lt;code&gt;actions/upload-artifact@v2&lt;/code&gt; action to save the contents of that directory as an artifact of the action with the name dist. We'll access this artifact in the next step of the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publishing-to-nuget"&gt;
  &lt;/a&gt;
  Publishing to NuGet
&lt;/h3&gt;

&lt;p&gt;With the package archived as an artifact, the &lt;code&gt;publish&lt;/code&gt; job will send it to NuGet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#downloading-artifacts"&gt;
  &lt;/a&gt;
  Downloading Artifacts
&lt;/h3&gt;

&lt;p&gt;The publish job will first download the artifact named dist that was created in the build job. These artifacts are downloaded to the &lt;code&gt;./dist&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushing-the-package"&gt;
  &lt;/a&gt;
  Pushing the Package
&lt;/h3&gt;

&lt;p&gt;Next, the job calls &lt;code&gt;dotnet nuget push&lt;/code&gt; to send any .nupkg file in the &lt;code&gt;./dist&lt;/code&gt; directory to NuGet.org. This requires an access token that NuGet provides. For securities sake, we store that token in the repositories secrets and access it via &lt;code&gt;${{secrets.NUGET_API_KEY}}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that step complete, the action is finished and stops. NuGet will review the uploaded package and release it to the marketplace automatically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcing-the-deepgram-net-sdk"&gt;
  &lt;/a&gt;
  Announcing the Deepgram .NET SDK
&lt;/h2&gt;

&lt;p&gt;Of course, with all this work completed, we can announce the new &lt;a href="https://www.nuget.org/packages/Deepgram/"&gt;Deepgram .NET SDK&lt;/a&gt;. Try it out, and let us know if it helps you get up and running with Deepgram even faster.&lt;/p&gt;

&lt;p&gt;Also, the entire project has been &lt;a href="https://github.com/deepgram-devs/deepgram-dotnet-sdk"&gt;built in the open on GitHub&lt;/a&gt;, and we'd love your input, feedback, and contributions to make it even better! Happy building!&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>nuget</category>
    </item>
    <item>
      <title>Hide on prod - Angular Directive</title>
      <author>Lukasz Kuklis</author>
      <pubDate>Sat, 25 Dec 2021 15:19:00 +0000</pubDate>
      <link>https://dev.to/lkuklis/hide-on-prod-angular-directive-212o</link>
      <guid>https://dev.to/lkuklis/hide-on-prod-angular-directive-212o</guid>
      <description>&lt;p&gt;*hideOnProd directive&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path/to/environments/environment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[hideOnProd]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HideOnProdDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;production&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>angular</category>
    </item>
    <item>
      <title>Let's explore Azure Functions &amp; Azure Cosmos DB - Part 2</title>
      <author>Bervianto Leo Pratama</author>
      <pubDate>Sat, 25 Dec 2021 15:10:49 +0000</pubDate>
      <link>https://dev.to/berviantoleo/lets-explore-azure-functions-azure-cosmos-db-part-2-44jg</link>
      <guid>https://dev.to/berviantoleo/lets-explore-azure-functions-azure-cosmos-db-part-2-44jg</guid>
      <description>&lt;p&gt;In this part, we will use Azure Static Web Apps to host our client side that consume Azure Functions that we have built. I suggest you to install &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/local-development"&gt;Azure Static Web Apps CLI&lt;/a&gt;. Azure Static Web Apps CLI will help you to develop your apps before it will be deployed. Other tools that I recommend to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cwindows%2Ccsharp%2Cportal%2Cbash%2Ckeda"&gt;Azure Functions CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"&gt;Azure CLI&lt;/a&gt; - Optional&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I just want to remind what we've built in previous part. Our final architecture will be like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dg3juxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vez8mxcnatk33baofdj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dg3juxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vez8mxcnatk33baofdj4.png" alt="Final Architecture" width="716" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-static-web-apps"&gt;
  &lt;/a&gt;
  Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;I use &lt;code&gt;React.js&lt;/code&gt; for my client side. I'm sorry I can't bring the step by step, since it will be complex and will take long pages. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bervProject"&gt;
        bervProject
      &lt;/a&gt; / &lt;a href="https://github.com/bervProject/azure-function-example"&gt;
        azure-function-example
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Azure Function Example in .NET
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
azure-function-example&lt;/h1&gt;
&lt;p&gt;Azure Function Example in .NET&lt;/p&gt;
&lt;h2&gt;
Directory Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bervProject/azure-function-example./azure-functions"&gt;azure-functions&lt;/a&gt;: Root directory for Azure Functions of Backend that will be hosted at Azure Functions. Using .NET 6.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bervProject/azure-function-example./azure-functions-client"&gt;azure-function-client&lt;/a&gt;: Root directory for client to consume Azure Functions and will be hosted at Azure Static Web App Service. Using React.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bervProject/azure-function-example./ToDo.Web"&gt;ToDo.Web&lt;/a&gt;: Root directory that consume the Backend from Azure Functions, run as Web App and will be hosted at Azure Web App Service. Using .NET 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contribute&lt;/h2&gt;
&lt;p&gt;Please see at &lt;a href="https://github.com/bervProject/azure-function-example./CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;Bervianto Leo Pratama&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bervProject/azure-function-example"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#try-the-app-in-the-local"&gt;
  &lt;/a&gt;
  Try the app in the local
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open new terminal. Go to &lt;code&gt;azure-functions&lt;/code&gt; directory. Run &lt;code&gt;func start --csharp&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcFFxVhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj22fwnut29im97faldz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcFFxVhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj22fwnut29im97faldz.png" alt="Azure Functions Running" width="880" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open new terminal. Go to &lt;code&gt;azure-function-client&lt;/code&gt;, run &lt;code&gt;swa start http://localhost:3000 --run "yarn start" --api-location http://localhost:7071&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ca7ZOX3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dc01ifr087ihqjflauv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ca7ZOX3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dc01ifr087ihqjflauv.png" alt="SWA Running" width="880" height="260"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your app is ready! Don't forget to update some configs. You can see at  section.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;

&lt;p&gt;You need to make sure to change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;msalConfig.ts&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;msal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@azure/msal-browser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msalConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;562c2405-0be6-4dcd-9172-e9fc6c681d17&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// update this with your client id,&lt;/span&gt;
    &lt;span class="na"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://login.microsoftonline.com/7c3aa68f-b3a1-415a-aa62-a6a97d4a12fc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// update this with your tenant id&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;scopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;562c2405-0be6-4dcd-9172-e9fc6c681d17/user_impersonation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// update this with your client id too&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;App.tsx&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// another code ...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;acquireTokenSilent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// update the URL with your azure function URL&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://af-demo-berv-1.azurewebsites.net/api/GetToDoTrigger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setNoteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNoteData&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addNote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isHaveActiveAccount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;acquireTokenSilent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// update the URL with your azure function URL&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://af-demo-berv-1.azurewebsites.net/api/CreateToDoTrigger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;getNote&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Un-authorized or not fill data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isHaveActiveAccount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getNote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// another code ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I still research about the Authentication. I'm not sure why personal account can't give the access token correctly. So I will get Unauthorized when access it, I need to use my Azure user account to access it. :(&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why you didn't use Azure Functions from Azure Static Web Apps? &amp;lt;- Not have any opinion, just want to separate it. :) I just "simulate" myself like some years ago before Azure Static Web Apps was released. I hope I will have enough time to write up about that too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#short-video-the-setup-amp-deployment-process"&gt;
  &lt;/a&gt;
  Short Video the Setup &amp;amp; Deployment Process
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GfRPmR1K1e8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you
&lt;/h2&gt;

&lt;p&gt;Thank you for reading. Anyway, my code is still messy and I will try to update it next year. Stay tune!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/i21tixUQEE7TEqwmYa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/i21tixUQEE7TEqwmYa/giphy.gif" alt="Thank you GIF" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azurefunctions</category>
      <category>azure</category>
      <category>azurecosmos</category>
      <category>azurestaticwebapps</category>
    </item>
  </channel>
</rss>
