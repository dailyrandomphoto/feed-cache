<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How do i connect Ionic/Angular Admin(or any user role) panel(UI) to firestore to write collections.</title>
      <author>Whizfactor</author>
      <pubDate>Thu, 13 Jan 2022 19:11:24 +0000</pubDate>
      <link>https://dev.to/whizfactor/how-to-connect-ionicangularhtml-adminor-any-user-role-paneldashboard-ui-to-firestore-to-write-collections-1b0o</link>
      <guid>https://dev.to/whizfactor/how-to-connect-ionicangularhtml-adminor-any-user-role-paneldashboard-ui-to-firestore-to-write-collections-1b0o</guid>
      <description>&lt;p&gt;Guys please need help. Building an Angular-Ionic Eccommerce App, and i need to use a backend for data storage and user management etc. &lt;br&gt;
But i have some issues, i dont know to connect an admin panel/dashboard to firestore, django(python) makes that part very easy, but firestore has some cool features and its more closer to Angular than Django especially with AngularFire.&lt;/p&gt;

&lt;p&gt;Need help with how connecting a dashboard/admin-panel or any other panel/dashboard for other user roles can be done. Any help as soon as possible will save my day. Thanks and Happy New Year tho the year is few days old😂&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>angular</category>
      <category>ionic</category>
    </item>
    <item>
      <title>Listen to the DevNews Podcast Season 7 Premiere 🎤</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 13 Jan 2022 19:00:21 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-devnews-podcast-season-7-premiere-l91</link>
      <guid>https://dev.to/devteam/listen-to-the-devnews-podcast-season-7-premiere-l91</guid>
      <description>&lt;p&gt;The DevNews podcast is back for a brand new season. Catch it right here or wherever you get your favorite podcasts&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E1 - The Pudgy Penguins NFT Debacle, a Dev Intentionally Breaks His Own Open Source Libraries, and Gen Z’s Distaste for Green Text Bubbles&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-z-s-distaste-for-green-text-bubbles"&gt;
      &lt;img id="episode-profile-image" alt="S7:E1 - The Pudgy Penguins NFT Debacle, a Dev Intentionally Breaks His Own Open Source Libraries, and Gen Z’s Distaste for Green Text Bubbles" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;As a refresher, DevNews is the news show for developers by developers. Each season, our hosts cover the latest in the world of tech, and speak with diverse guests from a variety of backgrounds to dig deep into meaty topics such as security, the pros and cons of outsourcing your authentication, and the latest bugs and hacks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt; is the founder of Disco, founder of &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie&lt;/a&gt; host of the &lt;a href="https://dev.to/codenewbie"&gt;CodeNewbie Podcast&lt;/a&gt;, and co-host of the &lt;a href="https://dev.to/basecspodcast"&gt;base.cs podcast&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt; is the Principal Software Engineer at &lt;a href="https://forem.com"&gt;Forem&lt;/a&gt; — the open source community software that powers DEV, CodeNewbie and a growing number of other online communities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/mackabiecapital"&gt;Dr. Merav Ozair&lt;/a&gt; is a leading blockchain expert, a FinTech Professor, and the Editor-in-Chief of the World Scientific Series in FinTech. Her work focuses on decentralized finance (DeFi), non-fungible tokens (NFTs), decentralized autonomous organizations (DAOs) and the Metaverse, across different industries and business use cases. She is a member of the Academic Advisory Board at INATBA (International Association for Trusted Blockchain Applications) and holds a PhD from Stern Business School at NYU.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this episode, we talk about a developer who broke around 19-thousand projects by intentionally corrupting his own open source libraries, and how iMessage won in the smartphone battle for favor amongst Gen Z. Then we speak with Dr. Merav Ozair, Leading Blockchain expert and FinTech Professor at Rutgers Business School, about NFTs and the turbulent removal of the founders of the Pudgy Penguins project.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e1-the-pudgy-penguins-nft-debacle-a/id1525581923?i=1000547762058"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/78jRVgcG9PCZOicdPLipOh"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQ5?sa=X&amp;amp;ved=0CAQQkfYCahcKEwj4hK-KtK_1AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s7-e1-the-pudgy-penguins-nft-debacle-a-dev-intentionally-breaks-his-own-open-source-libraries-and-gen-zs-distaste-for-green-text-bubbles-89666831"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s7e1-the-pudgy-penguins-nft-o9HuI_r2qgG/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=169004712"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/242"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt; for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 7 Sponsor: &lt;a href="https://scoutapm.com/?utm_campaign=ad_q2_2021&amp;amp;utm_content=sponsored&amp;amp;utm_medium=podcast&amp;amp;utm_source=devnews"&gt;Scout APM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy this kickoff to a new season of DevNews 📰 &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
      <category>devnews</category>
    </item>
    <item>
      <title>Top 10 Most Useful VSCode Extensions for Web Developers</title>
      <author>Remi W.</author>
      <pubDate>Thu, 13 Jan 2022 18:59:15 +0000</pubDate>
      <link>https://dev.to/ixartz/top-10-most-useful-vscode-extensions-for-web-developers-1414</link>
      <guid>https://dev.to/ixartz/top-10-most-useful-vscode-extensions-for-web-developers-1414</guid>
      <description>&lt;p&gt;VSCode is the most widely used text editor because of its ecosystem of &lt;strong&gt;extensions&lt;/strong&gt;. Extensions in VSCode can make your text editor go from just being a text editor to serving as an IDE.&lt;/p&gt;

&lt;p&gt;These extensions help you in productivity, efficiency, and consistency. They provide unique features which can help you work faster with technologies like Next JS, React JS, Vue, Node JS, JavasScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-runner"&gt;
  &lt;/a&gt;
  Code Runner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iw43q8FZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/code-runner-vscode.png" alt="Code runner JavaScript VSCode" width="774" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;Code runner&lt;/a&gt; can easily runs your code and produces the results in your VSCode Output (terminal window). This extension can run codes from over 41 popular languages including JavaScript, Python, and Rust.&lt;/p&gt;

&lt;p&gt;It can run all codes in a file as well as run a selected code. For example, you can select a function and run that function only. This can be very useful for debugging.&lt;/p&gt;

&lt;p&gt;When running a selected code, you should make sure that the selected code doesn't depend on an unselected code as this can lead to an error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-pull-requests"&gt;
  &lt;/a&gt;
  GitHub Pull Requests
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_VNetqTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/github-pull-request-issues-vscode.png" alt="GitHub Pull Requests VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github"&gt;GitHub Pull Request extension&lt;/a&gt; helps you review and manage your GitHub pull requests and issues directly inside VSCode.&lt;/p&gt;

&lt;p&gt;With it, you can easily list issues and pull requests from GitHub. You can comment on issues, start working on issues, review and validate pull requests and so much more.&lt;/p&gt;

&lt;p&gt;No need to open GitHub's website to manage pull requests or resolve issues anymore, all can be done right in VSCode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-client"&gt;
  &lt;/a&gt;
  REST Client
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6iTjZl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/rest-client-api-vscode.png" alt="REST Client API VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;REST Client&lt;/a&gt; allows you to make and manage HTTP requests and view the response directly in your editor.&lt;/p&gt;

&lt;p&gt;With this extension, you can easily organize similar HTTP requests (GET, POST, DELETE, PUT, etc), a cool feature for working with APIs. Response from your requests can be easily saved to your local disk.&lt;/p&gt;

&lt;p&gt;It also supports GraphQL as well as authentication. It is a great replacement for Postman, Insomnia, RapidAPI and it works right in VSCode, so no need to navigate between two apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thYRSIWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-linter-vscode.png" alt="ESLint code linter VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt; is a popular JavaScript open-source library by OpenJS foundation. You can now integrate into VSCode with this extension. It detects errors and either automatically fixes them or provides options for manually fixing them.&lt;/p&gt;

&lt;p&gt;These errors are generated from syntax errors or violations of the style guide. Style guides are provided by different companies including Airbnb and Google.&lt;/p&gt;

&lt;p&gt;ESLint is easy to set up because of its documentation and it's also very customizable. It helps you customize your style guides and be consistent with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wceBYDwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-code-formatter-vscode.png" alt="Prettier code formatter" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oftentimes the format of our code can quickly be messed up: we wrongly indent our JavaScript code, we write beyond 80 characters per line, and so on. All these can make our code look really ugly and hard to read, which means hard to maintain.&lt;/p&gt;

&lt;p&gt;But, this is where &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; comes in, it formats our code to look good and readable. This formatting includes rightly indenting our code, breaking the code down if too long, being consistent with adding semicolons or not and so much more.&lt;/p&gt;

&lt;p&gt;You can easily set up a style guide for prettier right in VSCode. ESLint and Prettier can perfectly work together to help give your team a JavaScript style guide to be consistent with, very useful for maintainability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwindcss"&gt;
  &lt;/a&gt;
  TailwindCSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yFD9saVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tailwind-css-vscode.png" alt="Tailwind CSS VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss"&gt;TailwindCSS&lt;/a&gt; is an open-source extension that gives you interesting features for maximum productivity when using Tailwind CSS.&lt;/p&gt;

&lt;p&gt;As we know Tailwind is mostly about classes, this extension gives you a fast autocomplete of all class names in TailwindCSS. With this extension, you can view the style for a particular class name by hovering over it.&lt;/p&gt;

&lt;p&gt;Tailwind CSS also provides linting for errors in the stylesheet or markup. So if you wrongly use a class name it will let you know. Cool right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitlens"&gt;
  &lt;/a&gt;
  GitLens
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAQyFJ2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/gitlens-git-vscode.png" alt="GitLens Git VSCode" width="774" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt; supercharges the Git capabilities built into VSCode. It gives you details of any git changes, author, and time of the changes at a glance.&lt;/p&gt;

&lt;p&gt;That means while coding you can see details of git changes by the side of the code. On hover, it provides you more git info and actions about that line of code.&lt;/p&gt;

&lt;p&gt;These actions include staging changes, committing changes, pushing commits, and much more. You really wouldn't need the Git CLI with this extension. Also, you can easily navigate and revise git history (backward and forwards) of any file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indent-rainbow"&gt;
  &lt;/a&gt;
  Indent Rainbow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_IEdS6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/indent-rainbow-vscode.png" alt="Indent Rainbow VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;Indent Rainbow&lt;/a&gt; colorizes the indentations before your code. This is very useful for languages like JavaScript and Python. With each level having different colors you can easily tell what level of indentation you are.&lt;/p&gt;

&lt;p&gt;This extension is customizable so you can easily change the colors for each level, and you can also extend it to have more colors beyond four.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dotenv"&gt;
  &lt;/a&gt;
  DotENV
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spw9eVHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/dotenv-vscode.png" alt="DotENV VSCode" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"&gt;DotENV extension&lt;/a&gt; highlights your &lt;code&gt;.env&lt;/code&gt; files to look good and easy to understand. As a Node developer, this will be very useful when setting up your environment variables in a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This extension provides different colors for comments (it enables comments), strings, numbers, properties, keywords, and much more. This used to be all white in VSCode, but this extension changes that. It basically makes your &lt;code&gt;.env&lt;/code&gt; files look like another language file with syntax highlighting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscodeicons"&gt;
  &lt;/a&gt;
  VSCode-Icons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPdVuEOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/vscode-icons.png" alt="VSCode Icons" width="774" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons"&gt;VSCode-Icons&lt;/a&gt; provides interactive and good-looking file/folder icons based on the name of the folder/file or based on the extension of the file.&lt;/p&gt;

&lt;p&gt;With different types of folders or files having different icons you can seamlessly navigate through your project without having to read the name of the folder or file all the time. And this entails easier and faster navigation, while making your editor's file list good-looking and approachable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As a ReactJS developer, an extension like ESLint, coupled with Error Lens, can help you see and fix warnings and errors. This saves time and keeps your coding going. Not just React, but JavaScript at large. Be sure each of these extensions will be of great help to you and your team of developers to code in the simplest and cleanest possible way without wasting unnecessary time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ixartz"&gt;Follow me on my twitter&lt;/a&gt; and be notified when I'll update this list. I'll share more extensions!&lt;/p&gt;

&lt;p&gt;The perfect starter kit to launch your SaaS faster and better. Focus on your business, products and customers instead of losing your time to implement basic functionalities like authentication, Stripe subscription, prebuilt landing page, prebuilt dashboard page, form and error handling, CRUD operation, layered architecture, deployment, server maintenance, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Using Materialize and Redpanda to Analyze Raspberry Pi Temperature Data</title>
      <author>Bobby Iliev</author>
      <pubDate>Thu, 13 Jan 2022 18:55:15 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/using-materialize-and-redpanda-to-analyze-raspberry-pi-temperature-data-2lpe</link>
      <guid>https://dev.to/bobbyiliev/using-materialize-and-redpanda-to-analyze-raspberry-pi-temperature-data-2lpe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a self-contained demo using &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt; to process data IoT devices data directly from a PostgreSQL server.&lt;/p&gt;

&lt;p&gt;The demo builds up on the &lt;a href="https://devdojo.com/bobbyiliev/how-to-build-adonisjs-api-to-store-your-raspberry-pi-temperature"&gt;How to build AdonisJS API to store your Raspberry Pi Temperature tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The data is generated by a Raspberry Pi temperature mock service simulating 50 devices reporting to an AdonisJS API mock service.&lt;/p&gt;

&lt;p&gt;Finally, we will create a sink to let us stream the data out of Materialize to a &lt;a href="https://materialize.com/docs/third-party/redpanda/"&gt;Redpanda&lt;/a&gt; topic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc5ybAMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143457800-6ad3b46a-8520-41ce-baf0-f6a1ea6c20e7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc5ybAMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143457800-6ad3b46a-8520-41ce-baf0-f6a1ea6c20e7.png" alt="mz-raspberry-pi-temperature diagram" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you get started, you need to make sure that you have Docker and Docker Compose installed.&lt;/p&gt;

&lt;p&gt;You can follow the steps here on how to install Docker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-docker/"&gt;Install Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In this demo, we’ll look at monitoring the temperature of a set of Raspberry Pi devices and extracting some insights from them, and streaming the data out to an external source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raspberry-pi-mock"&gt;
  &lt;/a&gt;
  Raspberry Pi Mock
&lt;/h3&gt;

&lt;p&gt;The main source of data is a Raspberry Pi Mock service, that simulates 50 devices reporting their CPU temperature to a mock API service built with AdonisJS.&lt;/p&gt;

&lt;p&gt;The mock service generates about ~25 new requests to the mock API service every second.&lt;/p&gt;

&lt;p&gt;For more information on how the mock services works along with the AdonisJS API, you can follow the &lt;a href="https://devdojo.com/bobbyiliev/how-to-build-adonisjs-api-to-store-your-raspberry-pi-temperature"&gt;How to build AdonisJS API to store your Raspberry Pi Temperature tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-mock-service-and-postgresql"&gt;
  &lt;/a&gt;
  API Mock service and PostgreSQL
&lt;/h3&gt;

&lt;p&gt;The API mock service receives the data from the 50 simulated Raspberry Pi and stores the data from each request in a PostgreSQL instance.&lt;/p&gt;

&lt;p&gt;The data that is being received with each request is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of the Raspberry Pi device.&lt;/li&gt;
&lt;li&gt;The timestamp when the temperature was measured.&lt;/li&gt;
&lt;li&gt;The temperature of the device, in celsius.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Mock API will save all data in a table called &lt;code&gt;sensors&lt;/code&gt;. The columns of the &lt;code&gt;sensors&lt;/code&gt; table are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;temperature&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#materialize"&gt;
  &lt;/a&gt;
  Materialize
&lt;/h3&gt;

&lt;p&gt;Materialize presents an interface to ingest the temperature data from the PostgreSQL database.&lt;/p&gt;

&lt;p&gt;In this demo, we are going to use Materialize to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/postgres/"&gt;Create a PostgreSQL source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Materialize the PostgreSQL data, which will be retained all in memory.&lt;/li&gt;
&lt;li&gt;Provide a SQL interface to query the temperature data. We will connect to Materialize through mzcli, which is our forked version of &lt;code&gt;pgcli&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Explore the Materialize data via Metabase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-the-demo"&gt;
  &lt;/a&gt;
  Running the demo
&lt;/h2&gt;

&lt;p&gt;Clone the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/mz-raspberry-pi-temperature.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mz-raspberry-pi-temperature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the Raspberry Pi Mock images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start all of the services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-materialize"&gt;
  &lt;/a&gt;
  Access Materialize
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run mzcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-materialize-source"&gt;
  &lt;/a&gt;
  Create Materialize Source:
&lt;/h3&gt;

&lt;p&gt;To create a PostgreSQL Materialize Source execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="nv"&gt;"mz_source"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;POSTGRES&lt;/span&gt;
&lt;span class="k"&gt;CONNECTION&lt;/span&gt; &lt;span class="s1"&gt;'user=postgres port=5432 host=postgres dbname=postgres password=postgres'&lt;/span&gt;
&lt;span class="n"&gt;PUBLICATION&lt;/span&gt; &lt;span class="s1"&gt;'mz_source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown of the above statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MATERIALIZED&lt;/code&gt;: Materializes the PostgreSQL source’s data. All of the data is retained in memory and makes sources directly selectable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mz_source&lt;/code&gt;: The name for the PostgreSQL source.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CONNECTION&lt;/code&gt;: The PostgreSQL connection parameters.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUBLICATION&lt;/code&gt;: The PostgreSQL publication, containing the tables to be streamed to Materialize.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-a-view"&gt;
  &lt;/a&gt;
  Create a view:
&lt;/h3&gt;

&lt;p&gt;Once we've created the PostgreSQL source, in order to be able to query the PostgreSQL tables, we would need to create views that represent the upstream publication’s original tables. In our case, we only have one table called &lt;code&gt;sensors&lt;/code&gt; so the statement that we would need to execute is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;mz_source&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the available views execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;FULL&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, you can query the new view directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's go ahead and create a few more views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-more-materialized-views"&gt;
  &lt;/a&gt;
  Creating more materialized views
&lt;/h3&gt;

&lt;p&gt;If you wish you can enable timing so we could actually see how long it takes for each statement to be executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 1: Create a materialized view to show the total number of sensors data:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;mz_count&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Querying the &lt;code&gt;mz_count&lt;/code&gt; view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mz_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="c1"&gt;-------&lt;/span&gt;
 &lt;span class="mi"&gt;34565&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;299&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 2: Create a view to show the average temperature of all sensors:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;mz_total_avg&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Query the &lt;code&gt;mz_total_avg&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mz_total_avg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;        &lt;span class="k"&gt;avg&lt;/span&gt;
&lt;span class="c1"&gt;-------------------&lt;/span&gt;
 &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;02989081226408&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;984&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 3: Create a view to show the average temperature of each separate sensor:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;temp&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sensors&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's again query the &lt;code&gt;average&lt;/code&gt; view:&lt;br&gt;
                                                                &lt;code&gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT * FROM average LIMIT 10;&lt;br&gt;
&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`sql&lt;br&gt;
     name     |        temp&lt;br&gt;
--------------+--------------------&lt;br&gt;
 raspberry-1  |  58.60756530123859&lt;br&gt;
 raspberry-2  |  58.95694631912029&lt;br&gt;
 raspberry-3  | 58.628198038515066&lt;br&gt;
 raspberry-4  |  59.40673999174753&lt;br&gt;
 raspberry-5  | 59.079367226960734&lt;br&gt;
 raspberry-6  |  58.96244838239402&lt;br&gt;
 raspberry-7  |   58.4658871719401&lt;br&gt;
 raspberry-8  |   58.9830811196705&lt;br&gt;
 raspberry-9  | 59.398486896836936&lt;br&gt;
 raspberry-10 | 59.669463513068024&lt;br&gt;
(10 rows)&lt;/p&gt;

&lt;p&gt;Time: 2.353 ms&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Feel free to experiment by creating more materialized views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-sink"&gt;
  &lt;/a&gt;
  Creating a Sink
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-sink/"&gt;Sinks&lt;/a&gt; let you send data from Materialize to an external source.&lt;/p&gt;

&lt;p&gt;For this demo, we will be using &lt;a href="https://materialize.com/docs/third-party/redpanda/"&gt;Redpanda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redpanda is a Kafka API-compatible and Materialize can process data from it just as it would process data from a Kafka source.&lt;/p&gt;

&lt;p&gt;Let's create a materialized view, that will hold all of the devices with an average temperature of more than 60 celsius:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE MATERIALIZED VIEW mz_high_temperature AS&lt;br&gt;
    SELECT * FROM average WHERE temp &amp;gt; 60;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you were to do a &lt;code&gt;SELECT&lt;/code&gt; on this new materialized view, it would return only the devices with an average temperature of above 60 celsius:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT * FROM mz_high_temperature;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's create a Sink where we will send the data of the above materialized view:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE SINK high_temperature_sink&lt;br&gt;
    FROM mz_high_temperature&lt;br&gt;
    INTO KAFKA BROKER 'redpanda:9092' TOPIC 'high-temperature-sink'&lt;br&gt;
    FORMAT AVRO USING&lt;br&gt;
    CONFLUENT SCHEMA REGISTRY 'http://redpanda:8081';&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if you were to connect to the Redpanda container and use the &lt;code&gt;rpk topic consume&lt;/code&gt; command, you will be able to read the records from the topic.&lt;/p&gt;

&lt;p&gt;However, as of the time being, we won’t be able to preview the results with &lt;code&gt;rpk&lt;/code&gt; because it’s AVRO formatted. Redpanda would most likely implement this in the future, but for the moment, we can actually stream the topic back into Materialize to confirm the format.&lt;/p&gt;

&lt;p&gt;First, get the name of the topic that has been automatically generated:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT topic FROM mz_kafka_sinks;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`sql&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topic"&gt;
  &lt;/a&gt;
                                topic
&lt;/h2&gt;

&lt;p&gt;high-temperature-sink-u12-1637586945-13670686352905873426&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information on how the topic names are generated check out the documentation &lt;a href="https://materialize.com/docs/sql/create-sink/#kafka-sinks"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then create a new Materialized Source from this Redpanda topic:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE MATERIALIZED SOURCE high_temp_test&lt;br&gt;
FROM KAFKA BROKER 'redpanda:9092' TOPIC 'high-temperature-sink-u12-1637586945-13670686352905873426'&lt;br&gt;
FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://redpanda:8081';&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure to change the topic name accordingly!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, query this new materialized view:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT * FROM high_temp_test LIMIT 2;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that you have the data in the topic, you can have other services connect to it and consume it and then trigger emails or alerts for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metabase"&gt;
  &lt;/a&gt;
  Metabase
&lt;/h2&gt;

&lt;p&gt;In order to access the &lt;a href="https://materialize.com/docs/third-party/metabase/"&gt;Metabase&lt;/a&gt; instance visit &lt;code&gt;http://localhost:3030&lt;/code&gt; if you are running the demo locally or &lt;code&gt;http://your_server_ip:3030&lt;/code&gt; if you are running the demo on a server. Then follow the steps to complete the Metabase setup.&lt;/p&gt;

&lt;p&gt;To connect to your Materialize database, specify the following connection properties:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
Field             | Value&lt;br&gt;
----------------- | ----------------&lt;br&gt;
Database          | PostgreSQL&lt;br&gt;
Name              | user_reviews&lt;br&gt;
Host              | materialized&lt;br&gt;
Port              | 6875&lt;br&gt;
Database name     | materialize&lt;br&gt;
Database username | materialize&lt;br&gt;
Database password | Leave empty&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once ready you will be able to visualize your data just as you would with a standard PostgreSQL database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qV18Gjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142780602-043f36c7-f279-4dc7-8853-99ddb31b452f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qV18Gjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142780602-043f36c7-f279-4dc7-8853-99ddb31b452f.png" alt="Metabase" width="880" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is a simple example of how to use the direct PostgreSQL connection with Materialize and stream data into a Kafka/Redpanda topic.&lt;/p&gt;

&lt;p&gt;In most cases, you would not store your IoT devices data in a PostgreSQL database, but in an S3 bucket or a Kafka topic. So the setup could be similar to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;S3 Bucket example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GIn4QOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148973244-852f02c0-dcba-42bc-97e8-46e80cd4791b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GIn4QOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148973244-852f02c0-dcba-42bc-97e8-46e80cd4791b.png" alt="IoT devices data with Materialize and S3" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redpanda/Kafka example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2H25_h3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148971425-05e68138-6d82-48bc-98cc-c7417baf5ef8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2H25_h3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148971425-05e68138-6d82-48bc-98cc-c7417baf5ef8.png" alt="IoT devices data with Materialize and Redpanda" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stopping-the-demo"&gt;
  &lt;/a&gt;
  Stopping the Demo
&lt;/h2&gt;

&lt;p&gt;To stop all of the services run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
docker-compose down&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources"&gt;
  &lt;/a&gt;
  Helpful resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/postgres/"&gt;&lt;code&gt;CREATE SOURCE: PostgreSQL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/"&gt;&lt;code&gt;CREATE SOURCE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-views"&gt;&lt;code&gt;CREATE VIEWS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/select"&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>materialize</category>
      <category>node</category>
    </item>
    <item>
      <title>Scroll spinner with cursor tracking eye</title>
      <author>Bartłomiej Krakowski</author>
      <pubDate>Thu, 13 Jan 2022 18:50:08 +0000</pubDate>
      <link>https://dev.to/bart_krakowski/scroll-spinner-with-cursor-tracking-eye-206l</link>
      <guid>https://dev.to/bart_krakowski/scroll-spinner-with-cursor-tracking-eye-206l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;If you don’t want to walk through the whole process step-by-step you can simply view the final version here:&lt;br&gt;
&lt;a href="https://codesandbox.io/s/react-scroll-spinner-final-sx0gp"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’d like to share with you a simple scroll-based animation built with Framer along with React, TS, and Emotion.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-0"&gt;
  &lt;/a&gt;
  Step 0
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-step-0-jvc02"&gt;CodeSandbox&lt;/a&gt;&lt;br&gt;
Let's start with the bootstrapping project. I chose to use the default stack, which contains React, Typescript, Framer, and Emotion.&lt;br&gt;
You can use create-react-app or just fork the sandbox. If you're not familiar with Typescript, don't worry, I'll mark up the places I'm using it and add a solution for it using plain JS&lt;/p&gt;

&lt;p&gt;First, we need to prepare an app where we have our main file called App.tsx (or App.jsx) and our component file called Spinner.tsx (Spinner.jsx).&lt;/p&gt;

&lt;p&gt;In the spinner’s file, we need to create a basic wrapper and paste SVG content into it (feel free to copy it from my sandbox).&lt;br&gt;
You'll probably see an eyelid covering the eye. Don't worry, we'll animate it in step 2.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-step-1-rotating-text-pt2ob"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first functionality is to animate the rotation of the text around the eye as the scrolling progresses.&lt;br&gt;
To do this, we'll use the built-in &lt;code&gt;useViewportScroll&lt;/code&gt; hook from Framer, which will give us values from 0 to 1, with 0 being the top of the page and 1 being the end of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqyLZPap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5k09m4g3csu0vn1ew1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqyLZPap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5k09m4g3csu0vn1ew1.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can expect we need to multiply this value by 360 because we want to achieve the full turn. We’re using the &lt;code&gt;useTransform&lt;/code&gt; hook from Framer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M00R53jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgabb30zxuxirfnltiog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M00R53jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgabb30zxuxirfnltiog.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, we want to make our animation a bit more fluid. We will use the &lt;code&gt;useSpring&lt;/code&gt; hook for this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WIYiOSLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxgfi8bqqxsa2gfcxfae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WIYiOSLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxgfi8bqqxsa2gfcxfae.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can manipulate this event with &lt;code&gt;stiffness&lt;/code&gt; and &lt;code&gt;damping&lt;/code&gt; params.&lt;br&gt;
Feel free to experiment with these options.&lt;/p&gt;

&lt;p&gt;More info about how it’s working here: &lt;a href="https://www.framer.com/docs/motionvalue/###usespring"&gt;https://www.framer.com/docs/motionvalue/###usespring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only thing left for us to do is to use this value in the element we want to animate:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMU7gNnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpucj4sccwjbrepfjbb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMU7gNnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpucj4sccwjbrepfjbb5.png" alt="Image description" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember that every element that we want to animate needs to be a motion element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;motion.path /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an additional visual effect, let's apply a 20 degree rotation to the entire wrapper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNomFXtP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm256o2n1oicez5fvkvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNomFXtP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm256o2n1oicez5fvkvp.png" alt="Image description" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-step-2-eye-blinking-q79pe"&gt;CodeSandbox&lt;/a&gt;&lt;br&gt;
As I mentioned before, let's make the eye blink.&lt;/p&gt;

&lt;p&gt;Let's find the eyelid and add the &lt;code&gt;style&lt;/code&gt; prop to it, determining the initial behaviour of it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imkGD3Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r2zjic5epp739e75dhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imkGD3Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r2zjic5epp739e75dhe.png" alt="Image description" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'd like to have a little bit of movement to it! We're saying that we want to scale it from 0 to 1 on the Y-axis in 5 seconds after loading our page and every 17 seconds after the first iteration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCD9nINX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/razrb6lqjq03mpzrcm9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCD9nINX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/razrb6lqjq03mpzrcm9q.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-scroll-spinner-final-sx0gp"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last and most challenging functionality is cursor tracking eye.&lt;br&gt;
Let’s start by plugging a reference to the SVG group of the eyeball.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQZbf2IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjk95hc8epplwndikqht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQZbf2IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjk95hc8epplwndikqht.png" alt="Image description" width="880" height="240"&gt;&lt;/a&gt;&lt;br&gt;
and&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R5LZIUs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1m363xkc0dt9bff8wt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R5LZIUs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1m363xkc0dt9bff8wt.png" alt="Image description" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can take care of storing the value of the position of the cursor.&lt;br&gt;
Let’s use a build-in &lt;code&gt;useMotionValue&lt;/code&gt; hook from Framer.&lt;br&gt;
It will give us confidence in storing up-to-date values without redundant re-renders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AIPbbkXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u07c0ervd7xyuj9haa38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AIPbbkXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u07c0ervd7xyuj9haa38.png" alt="Image description" width="880" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to establish the range of moves of the iris on the Y and X axes.&lt;br&gt;
In this hook, we need to define the size of the eye element and the range. We want the iris to move from -40px to 40px at the center of the X-axis and from -15px to 15px on the Y-axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkDv-IgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j45goc6weyhkxpb82yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkDv-IgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j45goc6weyhkxpb82yq.png" alt="Image description" width="880" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next thing to do is combine and update this data with a mouse move event: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joZqOapf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe59x3b5fslqql524a79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joZqOapf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe59x3b5fslqql524a79.png" alt="Image description" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to assign these values to SVG elements that represent them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gB1igEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m6zdg1brbqhq92s9r3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gB1igEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m6zdg1brbqhq92s9r3e.png" alt="Image description" width="880" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;And finally, there we have it! &lt;br&gt;
You can see the final results here: &lt;a href="https://codesandbox.io/s/react-scroll-spinner-final-sx0gp"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to experiment and have fun improving these effects and making new ones!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Uselful array methods for dealing with api data.</title>
      <author>Stephan Nijman</author>
      <pubDate>Thu, 13 Jan 2022 18:46:53 +0000</pubDate>
      <link>https://dev.to/vanaf1979/uselful-array-methods-for-dealing-with-api-data-1f4e</link>
      <guid>https://dev.to/vanaf1979/uselful-array-methods-for-dealing-with-api-data-1f4e</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xkCu_5GJfsA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://www.youtube.com/channel/UCeyqA3y26RlnfUSx3ufgFoA"&gt;Youtube&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-javascript-array-methods-with-api-data"&gt;
  &lt;/a&gt;
  Using JavaScript array methods with Api data
&lt;/h2&gt;

&lt;p&gt;In this video/article I want to share with you how I use some of the JavaScript Array methods to deal with Api data. There are many many more things you can do with these methods, but these are just some examples from my own use cases. There are also a lot more Array methods for you to explore in the &lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;MDN documentation&lt;/a&gt;..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayprototypefind"&gt;
  &lt;/a&gt;
  Array.prototype.find()
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;&lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;find&lt;/a&gt;&lt;/em&gt; array method can be used to find a single entry in an Api response based on a certain criteria.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MDN Docs: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/find&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;How you doin?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ross&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We were on a break&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phoebe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;She’s your lobster&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findFriendById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findFriendById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Object {id: 0, name: "joey", quote: "How you doin?"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Live example in &lt;a href="https://codesandbox.io/s/api-find-7hq46?file=/src/index.js"&gt;CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we have a fake Api response array with characters from my all time favourite Sit-Com Friends. To find a single character by it's id we create a new function called &lt;em&gt;findFriendById&lt;/em&gt; that excepts the &lt;em&gt;Id&lt;/em&gt; integer of the character we are looking for.&lt;/p&gt;

&lt;p&gt;Inside this new function we call the &lt;em&gt;find&lt;/em&gt; method on our &lt;em&gt;friends&lt;/em&gt; array, again passing it a callback function that excepts a single &lt;em&gt;friend&lt;/em&gt; at a time. This callback function has to return a &lt;em&gt;true&lt;/em&gt; value when we hit the friend we are looking for. So we simply compare the current &lt;em&gt;friend's id&lt;/em&gt; with the &lt;em&gt;id&lt;/em&gt; passed in to the &lt;em&gt;findFriendById&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;In the example we call the &lt;em&gt;findFriendById&lt;/em&gt; with 0 as the &lt;em&gt;id&lt;/em&gt; giving us the object for Joey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5w_bzHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tumblr_n7cxc7XPZd1smcbm7o1_500.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5w_bzHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tumblr_n7cxc7XPZd1smcbm7o1_500.gif" alt="Yoey saying How are you doing" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayprototypefilter"&gt;
  &lt;/a&gt;
  Array.prototype.filter()
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;&lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;Filter&lt;/a&gt;&lt;/em&gt; method allows us to easily find Api entries from the response data based on a certain criteria like shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MDN Docs: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trekkies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Piccard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Spock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vulcan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kirk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Worf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gault&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findTrekkiesByPlanet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;planet&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;trekkies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trekkie&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;trekkie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;planet&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findTrekkiesByPlanet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// [0: Object {id: 0 name: "Piccard" planet: "Earth"}&lt;/span&gt;
&lt;span class="c1"&gt;// 1: Object {id: 2 name: "Kirk" planet: "Earth"}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Live example in &lt;a href="https://codesandbox.io/s/api-filter-u0xly"&gt;CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we have a basic Api response array with StarTrek characters. To find all the character from a certain planet we create a new function called &lt;em&gt;findTrekkiesByPlanet&lt;/em&gt; that excepts a single parameter being the name of the planet we want the entries for.&lt;/p&gt;

&lt;p&gt;Within the &lt;em&gt;findTrekkiesByPlanet&lt;/em&gt; function we call the &lt;em&gt;filter&lt;/em&gt; method on the &lt;em&gt;trekkies&lt;/em&gt; array and we pass it a callback function that excepts a single &lt;em&gt;trakkie&lt;/em&gt; as a parameter. This callback function has to return a &lt;em&gt;true&lt;/em&gt; value if this &lt;em&gt;trekkie&lt;/em&gt; meets our criteria or &lt;em&gt;false&lt;/em&gt; if it doesn't. So we do a check if the current &lt;em&gt;trekkie.planet&lt;/em&gt; value is equal to the planet value passed into the &lt;em&gt;findTrekkiesByPlanet&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;As you can see in the example, if we pass "Earth" as the planet we get a new array containing just Piccard and Kirk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_H5Cdds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_H5Cdds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://since1979.dev/wp-content/uploads/2020/06/tenor.gif" alt="Captain Picard being happy" width="344" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayfrom"&gt;
  &lt;/a&gt;
  Array.from()
&lt;/h3&gt;

&lt;p&gt;The from array method's function is to create a new array from some arbitrary data. Here we are going to use it to conform Api response data to something we can pass to a React component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MDN Docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformApiCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiCategories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transformApiCategories&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// [0: Object {label: "javascript" value: 0}&lt;/span&gt;
&lt;span class="c1"&gt;// 1: Object {label: "React" value: 1}]&lt;/span&gt;

&lt;span class="c1"&gt;// Example use in a react select component.&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SelectControl&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;transformApiCategories&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Live example in &lt;a href="https://codesandbox.io/s/api-from-91qmo"&gt;CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this last example we have some random Api data containing programming languages along with some information about them. We want to use this data inside a select element/component that expects an array of objects containing a label and a value. &lt;a href="https://github.com/WordPress/gutenberg/tree/master/packages/components/src/select-control"&gt;Here is an example&lt;/a&gt; of such a component from the Gutenberg project.&lt;/p&gt;

&lt;p&gt;For this we create a function called &lt;em&gt;transformApiCategories&lt;/em&gt;. Inside this new function we use Array.find and we pass it our &lt;em&gt;apiCategories&lt;/em&gt; array and a callback function that excepts a single category on each iteration.&lt;/p&gt;

&lt;p&gt;Our callback function returns a new object from each category containing only the data we need in the correct format, making the &lt;em&gt;from&lt;/em&gt; method return an array of objects that we can safely pass to our select component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As you can see these array methods can be very powerful and I would encourage you to check out their documentation. Inside each example there is a comment with a link to that specific method's doc page. And you can check out all the array methods in the &lt;a href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;MDN documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow"&gt;
  &lt;/a&gt;
  Follow?
&lt;/h3&gt;

&lt;p&gt;Follow me on &lt;a href="https://www.youtube.com/channel/UCeyqA3y26RlnfUSx3ufgFoA"&gt;Youtube&lt;/a&gt; &lt;a href="https://twitter.com/Vanaf1979"&gt;Twitter&lt;/a&gt; or here on Dev.to &lt;a href="https://dev.to/vanaf1979"&gt;@Vanaf1979&lt;/a&gt; so i can notify you about new videos/articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading, stay safe and stay the right kind of positive!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Make your first contribution to a GitHub Action! </title>
      <author>Rizèl Scarlett</author>
      <pubDate>Thu, 13 Jan 2022 18:36:26 +0000</pubDate>
      <link>https://dev.to/github/how-to-edit-a-github-action-3j14</link>
      <guid>https://dev.to/github/how-to-edit-a-github-action-3j14</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-edit-a-github-action"&gt;
  &lt;/a&gt;
  Why edit a GitHub Action?
&lt;/h2&gt;

&lt;p&gt;There are many reasons to edit a GitHub Action. Perhaps, you found an Action suited to your use case. It's almost perfect, but there's just one minor feature missing. Maybe you noticed a bug or edge case, or you have an idea to take the Action to the next level. &lt;/p&gt;

&lt;p&gt;One solution is to recreate the Action, make it your own, and add all the improvements you desire. The second and my preferred solution is to make a pull request for the Action you are already using. The latter encourages you to treat the Action as an open source project. In return, the benefits include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expanding your developer network - This is a potential opportunity to interact with the creator of the Action.
&lt;/li&gt;
&lt;li&gt;Technical Exposure - Editing an Action used by multiple developers means you have to think about how your edits will affect other users, which may expose you to new technological problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; &lt;em&gt;Make sure you get the author's approval to add changes to their Action. The easiest way to do this is by opening an issue and starting a discussion with the author and/or other contributors. You don't want to spend time opening a pull request that the author doesn't want, and will eventually reject.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-reason"&gt;
  &lt;/a&gt;
  My reason
&lt;/h3&gt;

&lt;p&gt;Not to sound too nerdy, but I feel a rush of excitement and anticipation when I pick up an open source issue. I probably feel that way because I'm still relatively new to open source, and I've transitioned from writing production code every day to not writing production code at all. &lt;/p&gt;

&lt;p&gt;I picked up an issue earlier this month, but I didn't work on it immediately because of the holidays. When I returned a week later, a contributor reassigned the issue to themselves and opened a pull request. &lt;/p&gt;

&lt;p&gt;While I was impressed by the contributor's eagerness, speed, and clever solution, I felt disappointed for a brief moment. Until a friend and frequent contributor, &lt;a class="mentioned-user" href="https://dev.to/mtfoley"&gt;@mtfoley&lt;/a&gt;, helped me realize the root cause of the problem: the Contributor Take Action had a minor bug. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The TLDR:&lt;/strong&gt; &lt;a href="https://dev.to/github/assigning-new-contributors-to-issues-using-github-actions-1d27"&gt;The Contributor Take Action&lt;/a&gt; allows contributors to self-assign issues by typing ".take" in a comment. However, if another contributor comments ".take" after the initial contributor self-assigns the issue, the Action will assign that issue to the subsequent contributor as well. &lt;/p&gt;

&lt;p&gt;Matthew helped me transform my disappointment into opportunity: I could fix the bug in Contributor Take Action. I will still get to push code, and I could reduce the chance of miscommunicated reassigned issues in open source projects that use this Action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-test-and-edit"&gt;
  &lt;/a&gt;
  How to Test and Edit
&lt;/h2&gt;

&lt;p&gt;Contributing code to a GitHub Action is similar to contributing to any open source project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Locate the Action on GitHub’s Marketplace&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rbF0J71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvmyps5f47gfy3f3m65h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rbF0J71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvmyps5f47gfy3f3m65h.png" alt="Image with screenshot of Action on GitHub Marketplace" width="880" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Find the repository for the Action. The URL for the repository is underneath the "Links" section. Once you click that link, it should lead you to the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRNIwHJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6itlb6txkuwzgzaxjlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRNIwHJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6itlb6txkuwzgzaxjlw.png" alt="Links to the repository are shown in this image" width="880" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j4fBH0tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sno34hqhpoflq7r9bl7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4fBH0tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sno34hqhpoflq7r9bl7p.png" alt="Screenshot of the Action's repository" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Fork the repository by pressing the fork button on the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2XuItEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pakt07o1fj57eoqbl2hn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2XuItEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pakt07o1fj57eoqbl2hn.png" alt="Screenshot indicating where the fork button is" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Once the project is forked, you should have a copy of the repository. Head over to your copy and clone the repository or open it up in Codespaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukd6edsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9ez74mnf38rem8xx1mc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukd6edsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9ez74mnf38rem8xx1mc.png" alt="Screenshot of cloned repository" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Set up a repository for testing and follow the directions written in the Action’s ReadMe.&lt;/p&gt;

&lt;p&gt;In my case, I used a repository I made for sandboxing and playing around with actions called &lt;a href="https://github.com/blackgirlbytes/deploy-with-actions"&gt;deploy-with-actions&lt;/a&gt;. Inside of my deploy-with-actions repository, I created a .github/workflows directory. Inside that directory, I created a take.yml file, and I pasted the workflow written in YAML from the take-action repository's README into that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# .github/workflows/take.yml &lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Assign issue to contributor&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 

  &lt;span class="na"&gt;issue_comment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;assign&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Take an issue&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;take the issue&lt;/span&gt;

      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bdougie/take-action@main&lt;/span&gt;

      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

        &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.token }}&lt;/span&gt;

      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Thanks for taking this issue! Let us know if you have any questions!&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Point the workflow to your forked Action. You can even point it to a different branch or commit. It should look like:  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;uses: {username}/{repo_name}@{branch_name}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For instance, I changed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
 &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bdougie/take-action@main&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
 &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;blackgirlbytes/take-action@handle-if-assigned&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#actually-testing"&gt;
  &lt;/a&gt;
  Actually Testing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; First, let's check that the Action is working as expected by triggering the Action. After I committed and pushed all the files from the set up above, in my case, I opened up an issue and commented ".take" from a GitHub user account I created for testing. To be clear, I did this in my repository that is using the Action called deploy-with-actions, not the repository for the Action. As expected, I received a message that said, "Thanks for taking this on! If you have not already, join the conversation in our Discord."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTq6t8cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn576rf4qyy2pjrt4q4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTq6t8cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn576rf4qyy2pjrt4q4p.png" alt='Screenshot of fake user commenting and a GitHub bot responding "Thanks for taking this on"' width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; Time to debug! Try editing your Action and adding a few log statements. You can read the documentation &lt;a href="https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging"&gt;here&lt;/a&gt; to learn more about debugging logs. Here’s an example of some edits I made to blackgirlbytes/take-action/action.yml on the handle-if-assigned branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;contributor-takes-action&lt;/span&gt;

&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This is an action to assign yourself to an issue for a repo you are not a contributor to.&lt;/span&gt;

&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Brian Douglas&lt;/span&gt;

&lt;span class="na"&gt;branding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;thumbs-up'&lt;/span&gt;

  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;white'&lt;/span&gt;

&lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Message&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;prospective&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;contributor'&lt;/span&gt;

    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;

    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

&lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;using&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;composite"&lt;/span&gt;

  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt;

      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;

        &lt;span class="s"&gt;BODY="$(jq '.comment.body' $GITHUB_EVENT_PATH)"&lt;/span&gt;

        &lt;span class="s"&gt;ISSUE_NUMBER="$(jq '.issue.number' $GITHUB_EVENT_PATH)"&lt;/span&gt;

        &lt;span class="s"&gt;LOGIN="$(jq '.comment.user.login' $GITHUB_EVENT_PATH | tr -d \")"&lt;/span&gt;

        &lt;span class="s"&gt;REPO="$(jq '.repository.full_name' $GITHUB_EVENT_PATH | tr -d \")"&lt;/span&gt;

        &lt;span class="s"&gt;ISSUE_JSON="$(jq '.issue' $GITHUB_EVENT_PATH)"&lt;/span&gt;

        &lt;span class="s"&gt;ISSUE_CURRENTLY_ASSIGNED=`echo $ISSUE_JSON | jq '.assignees | length == 0'`&lt;/span&gt;

        &lt;span class="s"&gt;if [[ $BODY == *".take"* ]]; then&lt;/span&gt;

          &lt;span class="s"&gt;if [[ "$ISSUE_CURRENTLY_ASSIGNED" == true ]]; then&lt;/span&gt;

            &lt;span class="s"&gt;echo "$ISSUE_CURRENTLY_ASSIGNED"&lt;/span&gt;

            &lt;span class="s"&gt;echo "Assigning issue $ISSUE_NUMBER to $LOGIN"&lt;/span&gt;

            &lt;span class="s"&gt;echo "Using the link: https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/assignees"&lt;/span&gt;

            &lt;span class="s"&gt;curl -H "Authorization: token $GITHUB_TOKEN" -d '{"assignees":["'"$LOGIN"'"]}' https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/assignees&lt;/span&gt;

            &lt;span class="s"&gt;if [[ ! -z $INPUT_MESSAGE ]]; then&lt;/span&gt;

              &lt;span class="s"&gt;jq -n -r --arg body "$INPUT_MESSAGE" '{body: $body}' &amp;gt; payload.json&lt;/span&gt;

              &lt;span class="s"&gt;curl -X POST -H "Authorization: token $GITHUB_TOKEN" --data @payload.json https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments&lt;/span&gt;

            &lt;span class="s"&gt;fi&lt;/span&gt;

          &lt;span class="s"&gt;else&lt;/span&gt;

            &lt;span class="s"&gt;echo "This issue is currently assigned to a different user"&lt;/span&gt;

          &lt;span class="s"&gt;fi&lt;/span&gt;

        &lt;span class="s"&gt;fi&lt;/span&gt;

      &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;

      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

        &lt;span class="na"&gt;INPUT_MESSAGE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inputs.message&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 8:&lt;/strong&gt; Check the results by reading the Actions logs and continue to modify the code until you get your desired results. I found my Actions logs by heading to the deploy-with-actions repository and clicking on the Actions tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ3bpUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbv4m2hshnkwiw96lc81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ3bpUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbv4m2hshnkwiw96lc81.png" alt="Screenshot of Action logs" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 9:&lt;/strong&gt; Once you have a working solution, commit and push your changes, and create a pull request. Make a pull request comparing forks instead of branches.&lt;/p&gt;

&lt;p&gt;You can find my PR &lt;a href="https://github.com/bdougie/take-action/pull/6"&gt; here&lt;/a&gt;. In this PR, I made a pull request comparing my branch to the author’s branch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3GMWWwTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xtogdljpng9yelxmwc3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3GMWWwTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xtogdljpng9yelxmwc3.png" alt="Screenshot of the pull request being compared" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although this solution was successfully merged, I have more to add. My initial implementation doesn’t comment or assign the subsequent contributors, but now I’m working on adding a response or feedback for contributors to understand why they weren’t assigned if the issue was already assigned to another contributor. You can check out my work in progress pull request &lt;a href="https://github.com/bdougie/take-action/pull/8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Comment below with your thoughts and any Actions you’ve contributed to in the past!&lt;/p&gt;

</description>
      <category>github</category>
      <category>githubactions</category>
      <category>devops</category>
      <category>opensource</category>
    </item>
    <item>
      <title>GENERATE PASSWORD on REACT!</title>
      <author>BigBitDev</author>
      <pubDate>Thu, 13 Jan 2022 18:33:53 +0000</pubDate>
      <link>https://dev.to/bigbitdev/generate-password-on-react-48gp</link>
      <guid>https://dev.to/bigbitdev/generate-password-on-react-48gp</guid>
      <description>&lt;p&gt;Hi! today's post its a little tutorial that show how to made a password generator on ReactJS with useState hook! enjoy it!😋&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-you-got-a-live-show-of-the-app-passgenerator"&gt;
  &lt;/a&gt;
  Here you got a live show of the app: &lt;a href="https://passssgeneratorreact.netlify.app/"&gt;PassGenerator&lt;/a&gt;
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./GeneratorForm.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GeneratorForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQURSTUVWXYZ0123456789@_.-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genPass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//Hooks&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setPass&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-center container_bg_bg-gradient"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Generate You own Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;setPass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genPass&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Generate Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'style_css'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;GeneratorForm&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;br&gt;
👁️‍🗨️ I use react-boostrap library to made it responsive and the general styles.
&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Function:&lt;/li&gt;
&lt;li&gt;Set a variable that save all character in only one string&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a function use the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Math.random() (in order to generate an aleatory number) &lt;/li&gt;
&lt;li&gt;toString() to convert that number into a string, (the parameter is the length of the string).&lt;/li&gt;
&lt;li&gt;toSubstring() to generate the string(initial position, length)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hook: &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the Hook useState, and set it with the above-mentioned function. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can put the value wherever you want in my case I put it in a h2 tag.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well I hope you find it helpful. If you have any questions please let me know in the comments and I'll be waiting for feedback.👋🖖&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>To do list app with react typescript and react testing library</title>
      <author>YashasaveeKesarwani99</author>
      <pubDate>Thu, 13 Jan 2022 18:26:44 +0000</pubDate>
      <link>https://dev.to/yashasaveekesarwani99/to-do-list-app-with-react-typescript-and-react-testing-library-4a22</link>
      <guid>https://dev.to/yashasaveekesarwani99/to-do-list-app-with-react-typescript-and-react-testing-library-4a22</guid>
      <description>&lt;h2&gt;
  &lt;a href="#using-typescript-and-testing-code-with-react-testing-library"&gt;
  &lt;/a&gt;
  Using typescript and testing code with react testing library
&lt;/h2&gt;

&lt;p&gt;Typescript really makes it easy for developers to know the type of variables and return type of the functions which are in play.&lt;/p&gt;

&lt;p&gt;I have used hooks for managing states, one can mention the type of state they are defining which makes its type unchangeable resulting in lesser discrepancy issues.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const [task,setTask] = useState&amp;lt;string&amp;gt;("");
  const [tasks,setTasks] = useState&amp;lt;Array&amp;lt;string&amp;gt;&amp;gt;([])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The type of props should be defined before using them in the children component which can be done using &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type props = {
    setTask:React.Dispatch&amp;lt;React.SetStateAction&amp;lt;string&amp;gt;&amp;gt;
    tasks:string[] 
    setTasks:React.Dispatch&amp;lt;React.SetStateAction&amp;lt;string[]&amp;gt;&amp;gt;
    task:string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For testing purpose I've used react testing library to do simple unit and integration testing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mockSetTask = jest.fn()
const mockSetTasks = jest.fn()

var task:string
var tasks:string[] = []

it('gets input from input component',  ()=&amp;gt;{
        render(&amp;lt;Input  setTask={mockSetTask} setTasks={mockSetTasks} tasks={tasks} task={task}/&amp;gt;)
        const ele = screen.getByPlaceholderText("Enter Task") as HTMLInputElement

        fireEvent.change(ele,{target:{value:'Go To Gym'}})
        expect(ele.value).toBe('Go To Gym')
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github Repo : &lt;a href="https://github.com/YashasaveeKesarwani99/todolist"&gt;To do list app&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building email signup form for Docusaurus with hCaptcha, Cloudflare Pages and Mailgun</title>
      <author>Pglet</author>
      <pubDate>Thu, 13 Jan 2022 18:26:07 +0000</pubDate>
      <link>https://dev.to/pglet/building-email-signup-form-for-docusaurus-with-hcaptcha-cloudflare-pages-and-mailgun-39cj</link>
      <guid>https://dev.to/pglet/building-email-signup-form-for-docusaurus-with-hcaptcha-cloudflare-pages-and-mailgun-39cj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Staying in touch with your users via email is still an effective and reliable communication channel. In this tutorial we are going to implement &lt;a href="https://pglet.io/#signup"&gt;email signup form&lt;/a&gt; for a React-based static website that allows users to submit their email address and subscribe to a project mailing list. We are going to implement "double opt-in" process where upon signup an email is sent to the user which includes a link to click and confirm the subscription.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pglet.io/"&gt;Pglet website&lt;/a&gt; is made with &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt; and hosted on &lt;a href="https://pages.cloudflare.com/"&gt;Cloudflare Pages&lt;/a&gt;. However, the following solution could be easily adopted for other React-based website frameworks such as &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; and use a different backend for server-side logic such as &lt;a href="https://vercel.com/docs/concepts/functions/introduction"&gt;Vercel Functions&lt;/a&gt; or &lt;a href="https://deno.com/deploy/docs"&gt;Deno Deploy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Project requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The form must be as simple as possible: just "email" field and "submit" button.&lt;/li&gt;
&lt;li&gt;The form must protected by CAPTCHA.&lt;/li&gt;
&lt;li&gt;Double opt-in subscription process should be implemented: after submitting the form a user receives an email with a confirmation link to complete the process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For CAPTCHA we are going to use &lt;a href="https://www.hcaptcha.com/"&gt;hCaptcha&lt;/a&gt;, which is a great alternative to Google's reCAPTCHA and has a similar API.&lt;/p&gt;

&lt;p&gt;A signup form requires server-side processing and for that we re going to use &lt;a href="https://developers.cloudflare.com/pages/platform/functions"&gt;Cloudflare Pages Functions&lt;/a&gt; which are a part of Cloudflare Pages platform.&lt;/p&gt;

&lt;p&gt;For maintaining mailing list and sending email messages we are going to use &lt;a href="https://www.mailgun.com/"&gt;Mailgun&lt;/a&gt;. Mailgun offers great functionality, first-class API at a flexible pricing, plus we have a lot of experience with it.&lt;/p&gt;

&lt;p&gt;All code samples in this article can be found in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pglet/website"&gt;Pglet website GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pglet/website/tree/master/functions/api"&gt;&lt;code&gt;functions/api&lt;/code&gt; directory with server-side logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pglet/website/blob/master/src/components/signup-form.js"&gt;&lt;code&gt;&amp;lt;SignupForm/&amp;gt;&lt;/code&gt; React component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#email-signup-form"&gt;
  &lt;/a&gt;
  Email signup form
&lt;/h1&gt;

&lt;p&gt;Signup form is implemented as a React component and includes an email entry form with hCaptcha and two messages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rP4o2L3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biimq7q1xhkul9j8lfc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rP4o2L3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biimq7q1xhkul9j8lfc9.png" alt="Image description" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The official &lt;a href="https://codesandbox.io/s/react-hcaptchaform-example-invisible-f7ekt?file=/src/Form.jsx"&gt;hCaptcha demo React app&lt;/a&gt; with invisible captcha was a perfect starting point for making our own Docusaurus component.&lt;/p&gt;

&lt;p&gt;Add hCaptcha component to your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;hcaptcha&lt;/span&gt;&lt;span class="sr"&gt;/react-hcaptcha --sav&lt;/span&gt;&lt;span class="err"&gt;e
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;src/components/signup-form.js&lt;/code&gt; with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BrowserOnly&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@docusaurus/BrowserOnly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HCaptcha&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hcaptcha/react-hcaptcha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SignupForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captchaRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;captchaRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;captchaToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;

            &lt;span class="c1"&gt;// send message&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/email-signup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signup-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BrowserOnly&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// signup submitted&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Thank&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;receive&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="nx"&gt;shortly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?signup-confirmed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// signup confirmed&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;25px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;🎉&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;Congratulations! You have successfully subscribed to Pglet newsletter.&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// signup form&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Pglet&lt;/span&gt; &lt;span class="nx"&gt;newsletter&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="nx"&gt;updates&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;tutorials&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                                &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your email address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HCaptcha&lt;/span&gt;
                                &lt;span class="nx"&gt;sitekey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{YOUR-HCAPTCHA-SITE-KEY}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                                &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invisible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                                &lt;span class="nx"&gt;onVerify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;captchaRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BrowserOnly&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's simply &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element with "email" and "submit" inputs - except hCaptcha, no other 3rd-party components or hooks were used.&lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;{YOUR-HCAPTCHA-SITE-KEY}&lt;/code&gt; with your own hCaptcha site key.&lt;/p&gt;

&lt;p&gt;Captcha is verified on &lt;code&gt;form.onSubmit&lt;/code&gt; event which supports submitting form with ENTER and triggers built-in form validators. The result of captcha verification is stored in &lt;code&gt;token&lt;/code&gt; state variable which is sent to &lt;code&gt;/api/email-signup&lt;/code&gt; server function along with entered email for further verification and processing.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;signup-form.js&lt;/code&gt; component to src/pages/index.js page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SignupForm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@site/src/components/signup-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then put &lt;code&gt;&amp;lt;SignupForm/&amp;gt;&lt;/code&gt; inside &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SignupForm&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run Docusaurus site with &lt;code&gt;yarn start&lt;/code&gt; and navigate to a page with captcha at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; you'll get "blocked by CORS policy" JavaScript errors. To make captcha work locally you should browse with a domain instead of "localhost".&lt;/p&gt;

&lt;p&gt;Add a new mapping &lt;code&gt;127.0.0.1 mysite.local&lt;/code&gt; to &lt;code&gt;sudo nano /private/etc/hosts&lt;/code&gt; and then you can open &lt;a href="http://mysite.local:3000/"&gt;http://mysite.local:3000&lt;/a&gt; with working captcha.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;&lt;br&gt;
A part of form component is wrapped with &lt;code&gt;&amp;lt;BrowserOnly&amp;gt;&lt;/code&gt; element which tells Docusaurus that the contents inside &lt;code&gt;&amp;lt;BrowserOnly&amp;gt;&lt;/code&gt; is not suitable for server-side rendering because of client-side API used, in our case &lt;code&gt;window.location.ref&lt;/code&gt;. You can read more about &lt;code&gt;&amp;lt;BrowserOnly&amp;gt;&lt;/code&gt; here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#configuring-mailgun"&gt;
  &lt;/a&gt;
  Configuring Mailgun
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.mailgun.com/"&gt;Mailgun&lt;/a&gt; is a transactional email service that offers first-class APIs for sending, receiving and tracking email messages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;&lt;br&gt;
We are not affiliated with Mailgun - we just like their service and have a lot of experience with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some advice before creating a mailing list in Mailgun:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Start with a free "Flex" plan&lt;/strong&gt; - it allows sending 5,000 messages per month and includes custom domains.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configure custom domain&lt;/strong&gt; - of course, you can test everything on a built-in &lt;code&gt;{something}.mailgun.org&lt;/code&gt; domain, but messages sent from it will be trapped in recipient's Junk folder. Custom domain is included with a free plan and setting it up is just a matter of adding a few records to your DNS zone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get dedicated IP address&lt;/strong&gt; - if you require even greater email deliverability, assign your domain to a dedicated IP address. Dedicated IP is part of &lt;a href="https://www.mailgun.com/pricing/"&gt;"Foundation" plan&lt;/a&gt; which starts at $35/month.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cloudflare-pages-functions"&gt;
  &lt;/a&gt;
  Cloudflare Pages Functions
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developers.cloudflare.com/pages/platform/functions"&gt;Cloudflare Page Functions&lt;/a&gt; are based on &lt;a href="https://developers.cloudflare.com/workers/"&gt;Cloudflare Workers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be aware that Functions runtime environment is different from Node.js - you can't use Node.js built-in modules, you can't install anything from NPM. It's more like JavaScript in a headless browser with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch"&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"&gt;WebSocket&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Crypto"&gt;Crypto&lt;/a&gt; and other &lt;a href="https://developers.cloudflare.com/workers/runtime-apis/web-standards"&gt;Web APIs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For signup form, we are going to add two functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;POST /api/email-signup&lt;/code&gt; - for initial form processing and signup&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /api/confirm-subscription?email={email}&amp;amp;code={code}&lt;/code&gt; - for confirming subscription&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To generate routes above, we need to create two files: &lt;code&gt;/functions/api/email-signup.js&lt;/code&gt; and &lt;code&gt;/functions/api/confirm-subscription.js&lt;/code&gt; in the project repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Caution!&lt;/em&gt;&lt;br&gt;
&lt;code&gt;/functions&lt;/code&gt; directory must be in the root of your repository, not in &lt;code&gt;/static&lt;/code&gt; directory, and must be published along with the site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can glance through &lt;a href="https://developers.cloudflare.com/pages/platform/functions"&gt;Functions docs&lt;/a&gt; to become familiar with the technology. Here I'll only cover some tricky issues which could arise while you develop.&lt;/p&gt;

&lt;p&gt;First, it's possible to run and debug your functions locally. A beta version of &lt;a href="https://developers.cloudflare.com/pages/platform/functions#develop-and-preview-locally"&gt;&lt;code&gt;Wrangler&lt;/code&gt;&lt;/a&gt; tool should be installed for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add wrangler@beta --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Caution!&lt;/em&gt;&lt;br&gt;
Disregard scary deprecation warning while looking for &lt;a href="https://www.npmjs.com/package/wrangler"&gt;wrangler package&lt;/a&gt; on npmjs.com and don't install &lt;code&gt;@cloudflare/wrangler&lt;/code&gt; as it suggests.&lt;br&gt;
Apparently, Cloudflare team is actively &lt;a href="https://github.com/cloudflare/wrangler2"&gt;working on Wrangler v2&lt;/a&gt; and publishes it as &lt;code&gt;wrangler&lt;/code&gt; package.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run Wrangler as a proxy for your local Docusaurus run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx wrangler pages dev -- yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For configurable settings in functions we use environment variables. In contrast with Cloudflare Workers, environment variables are not set as globals in your functions, however they can be accessed via handler's &lt;code&gt;context&lt;/code&gt;, like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// handler function&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onRequestPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;API_KEY&lt;/code&gt; is the name of environment variable.&lt;/p&gt;

&lt;p&gt;For Workers environment variables can be configured in &lt;code&gt;wrangler.toml&lt;/code&gt;, but &lt;code&gt;wrangler.toml&lt;/code&gt; is not supported by Functions, so the only way to test with environment variables locally is to pass them via command line with &lt;code&gt;-b&lt;/code&gt; switch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx wrangler pages dev -b API_KEY=123! -b MY_VAR2=some_value ... -- yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For your Cloudflare Pages website, you can configure &lt;code&gt;Production&lt;/code&gt; and &lt;code&gt;Preview&lt;/code&gt; environment variables on &lt;strong&gt;Settings → Environment variables&lt;/strong&gt; page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBov98D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhgsum3gx3nt312rovwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBov98D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhgsum3gx3nt312rovwk.png" alt="Image description" width="880" height="689"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Environment variables are immutable. If you update/add/delete environment variable and then call the function using it again, it won't work - once variables have changed, the &lt;strong&gt;website must be re-built to pick up new values&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Do not put real secrets into "Preview" environment variables if your project in a public repository. Any pull request to the repository publishes "preview" website to a temp URL which is visible to everyone in &lt;a href="https://github.com/pglet/website/runs/4754500508"&gt;commit status&lt;/a&gt;. Therefore, it's possible for the attacker to submit malicious PR with a function printing all environment variables and then run it via temp URL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#form-submit-handler"&gt;
  &lt;/a&gt;
  Form submit handler
&lt;/h1&gt;

&lt;p&gt;Email signup form &lt;code&gt;POST&lt;/code&gt;s entered email and hCaptcha response to &lt;a href="https://github.com/pglet/website/blob/master/functions/api/email-signup.js"&gt;&lt;code&gt;/api/email-signup&lt;/code&gt;&lt;/a&gt; function, which performs the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Parses request body as JSON and validates its &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;captchaToken&lt;/code&gt; fields.&lt;/li&gt;
&lt;li&gt;Performs hCaptcha response validation and aborts the request if validation fails.&lt;/li&gt;
&lt;li&gt;Tries adding a new email (member) into Mailgun mailing list and exits if it's already added.&lt;/li&gt;
&lt;li&gt;Sends email with confirmation link via Mailgun to a newly added email address.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#validating-hcaptcha-response"&gt;
  &lt;/a&gt;
  Validating hCaptcha response
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://docs.hcaptcha.com/#verify-the-user-response-server-side"&gt;Validating hCaptcha response on the server&lt;/a&gt; is just a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;https://hcaptcha.com/siteverify&lt;/code&gt; with hCaptcha response received from browser and hCaptcha site key secret in the body:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateCaptcha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlEncodeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captchaResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://hcaptcha.com/siteverify`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Length&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;encData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;encData&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captchaBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;captchaResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;captchaBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;captchaBody&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error-codes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to &lt;a href="https://github.com/sitepoint-editors/cloudflare-form-service/blob/master/email-service.js"&gt;this great example&lt;/a&gt; on how to send a form request with &lt;code&gt;fetch()&lt;/code&gt; method.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-email-to-a-mailing-list"&gt;
  &lt;/a&gt;
  Adding email to a mailing list
&lt;/h1&gt;

&lt;p&gt;In &lt;code&gt;utils.js&lt;/code&gt; we implemented a helper method for calling &lt;a href="https://documentation.mailgun.com/en/latest/api_reference.html"&gt;Mailgun API&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callMailgunApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailgunApiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlEncodeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Basic &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;btoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mailgunApiKey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Length&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;encData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;encData&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;urlEncodeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Request parameters are passed in URL-encoded form in the body.&lt;/p&gt;

&lt;p&gt;Requests require Basic authentication header with &lt;code&gt;api&lt;/code&gt; and &lt;a href="https://help.mailgun.com/hc/en-us/articles/203380100-Where-Can-I-Find-My-API-Key-and-SMTP-Credentials-"&gt;Mailgun primary account API key&lt;/a&gt; as username and password respectively.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;callMailgunApi()&lt;/code&gt; helper function adding a new member into Mailgun mailing lists becomes trivial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addMailingListMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailgunApiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;memberAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;memberAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;subscribed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callMailgunApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailgunApiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`https://api.mailgun.net/v3/lists/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;listName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/members`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// member has been added&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// member already added&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;`Error adding mailing list member: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It tries to add a new member into mailing list and returns &lt;code&gt;true&lt;/code&gt; if it was successfully added; otherwise returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sending-confirmation-email"&gt;
  &lt;/a&gt;
  Sending confirmation email
&lt;/h1&gt;

&lt;p&gt;The function for sending confirmation email message to a user via Mailgun is just a few lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailgunApiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mailDomain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callMailgunApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailgunApiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`https://api.mailgun.net/v3/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;mailDomain&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/messages`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;`Error sending email message: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An interesting part here is how confirmation URL is built, which is sent in the message and should be clicked by a user to confirm subscription.&lt;/p&gt;

&lt;p&gt;Confirmation URL contains two parameters: &lt;strong&gt;email&lt;/strong&gt; and &lt;strong&gt;confirmation code&lt;/strong&gt;. Email is just recepient's email address which is, obviously, not a secret. Confirmation code is calculated as &lt;code&gt;sha1(email + secret)&lt;/code&gt;, with &lt;code&gt;secret&lt;/code&gt; known to the server only.&lt;/p&gt;

&lt;p&gt;When the server receives a request with email and confirmation code, it calculates a new confirmation code for the received email and compares it with the code from the request.&lt;/p&gt;

&lt;p&gt;The algorithm could be further improved by implementing expiring confirmation code, but we want to keep it simple for now.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#verifying-email-and-completing-signup-process"&gt;
  &lt;/a&gt;
  Verifying email and completing signup process
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/pglet/website/blob/master/functions/api/confirm-subscription.js"&gt;&lt;code&gt;/api/confirm-subscription&lt;/code&gt;&lt;/a&gt; function has a single &lt;code&gt;onRequestGet()&lt;/code&gt; handler which performs the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validates &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;code&lt;/code&gt; request parameters.&lt;/li&gt;
&lt;li&gt;Calculates confirmation code and compares it withto the one from the request.&lt;/li&gt;
&lt;li&gt;If both codes match, updates Mailgun mailing list member's &lt;code&gt;subscribed&lt;/code&gt; status to &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Redirects to a home page with &lt;code&gt;?signup-confirmed&lt;/code&gt; appended to the URL.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onRequestGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// get request params&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid request parameters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// validate confirmation code&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculatedCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONFIRM_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatedCode&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid email or confirmation code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// update subscription status&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;subscribeMailingListMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAILGUN_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAILGUN_MAILING_LIST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// redirect to a home page&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?signup-confirmed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article we created an email signup form for Docusaurus website protected with hCaptcha. The form allows user to submit their email address and subscribe to a project mailing list. We implemented "double opt-in" process, where upon signup an email is sent to the user which includes a link to click and confirm the subscription. We used Cloudflare Pages Functions to implement all server-side logic. Mailgun service was used to send email messages and maintain mailing list.&lt;/p&gt;

&lt;p&gt;In the next article we will build an interactive Python app using &lt;a href="https://pglet.io/docs/tutorials/python"&gt;Pglet&lt;/a&gt; for sending newsletter to Mailgun mailing lists. Make sure to subscribe to &lt;a href="https://pglet.io/#signup"&gt;Pglet mailing list&lt;/a&gt; not to miss it!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Complete Login / Signup System - MongoDB Atlas 🚀</title>
      <author>Jackson Kasi</author>
      <pubDate>Thu, 13 Jan 2022 18:23:59 +0000</pubDate>
      <link>https://dev.to/jacksonkasi/complete-login-signup-system-mongodb-atlas-2b8l</link>
      <guid>https://dev.to/jacksonkasi/complete-login-signup-system-mongodb-atlas-2b8l</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission:
&lt;/h3&gt;

&lt;p&gt;🎊The purpose of this project, you can build your own complete login system for your website, using MongoDB Atlas...&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category: 📢
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Choose Your Own Adventure&lt;/strong&gt; using MongoDB Atlas &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#features-%E2%9A%99"&gt;
  &lt;/a&gt;
  Features: ⚙
&lt;/h3&gt;

&lt;p&gt;please see the video... 😁&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#technologies-used-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Technologies Used: 🛠
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;EJS&lt;/li&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;MongoDB Atlas&lt;/li&gt;
&lt;li&gt;Mongoose&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;nodemaile&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code: ✨
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jacksonkasi0"&gt;
        jacksonkasi0
      &lt;/a&gt; / &lt;a href="https://github.com/jacksonkasi0/login-system"&gt;
        login-system
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      login system 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Complete Login / Signup System - MongoDB Atlas 🚀
&lt;/h1&gt;

&lt;h3&gt;
Overview:&lt;/h3&gt;
&lt;p&gt;🎊The purpose of this project, you can build your own complete login system for your website, using MongoDB Atlas...&lt;/p&gt;

&lt;h2&gt;
Deployment commands: 💻
&lt;/h2&gt;
&lt;p&gt;Create a new directory, navigate to that directory in a terminal and clone the GitHub repository&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/jacksonkasi0/login-system.git

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change directory to the pattern directory:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; HospitalManagementSystem &lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;From the command line, you should Enter:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install 
node app.js&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
Recouces&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/jacksonkasi/hospital-management-system-using-mongodb-with-nodejs-and-ejs-5gek" rel="nofollow"&gt;Dev post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jacksonkasi0/login-system"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#postman-link-click-here"&gt;
  &lt;/a&gt;
  Postman Link: 🍀  &lt;a href="https://documenter.getpostman.com/view/17812631/UVJkCDgf"&gt;click here!&lt;/a&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video: 🎥
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/F4gLWla8Ovs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>javascript</category>
      <category>mongodb</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Managing Django Media &amp; Static Files on Heroku with Bucketeer</title>
      <author>Daniel Starner</author>
      <pubDate>Thu, 13 Jan 2022 18:22:54 +0000</pubDate>
      <link>https://dev.to/heroku/properly-managing-django-media-static-files-on-heroku-o2l</link>
      <guid>https://dev.to/heroku/properly-managing-django-media-static-files-on-heroku-o2l</guid>
      <description>&lt;p&gt;This article will walk through how we correctly persist static &amp;amp; media files for a Django application hosted on Heroku. As a bonus, it will also explain how we can satisfy the additional constraint of specifying private versus public media files based on model definitions.&lt;/p&gt;

&lt;p&gt;Before I begin, this post extends from &lt;a href="https://testdriven.io/blog/storing-django-static-and-media-files-on-amazon-s3/"&gt;this TestDriven.io article&lt;/a&gt; that was written awhile back. I frequent it often when setting up my projects, and have built some extra functionality on top of it over the years. I decided to create a more focused post that references Heroku &amp;amp; Bucketeer with these extra features after helping an individual on StackOverflow.&lt;/p&gt;


&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/70481782/how-to-add-image-for-image-field-for-a-model-instance-in-django-admin-panel-on-h/70483913#70483913" rel="noopener noreferrer"&gt;
              &lt;span class="title-flare"&gt;answer&lt;/span&gt; re: How to add image for image field for a model instance in django admin panel on heroku?
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Dec 26 '21&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/70481782/how-to-add-image-for-image-field-for-a-model-instance-in-django-admin-panel-on-h/70483913#70483913" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          0
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;blockquote&gt;
&lt;p&gt;I think it's because I turn off a PC, where I took these images&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This probably is not it, because Heroku doesn't have access to the files on your computer.&lt;/p&gt;

&lt;p&gt;When you upload a file to the Django admin, it looks at the &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; settings configuration to determine how to…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/70481782/how-to-add-image-for-image-field-for-a-model-instance-in-django-admin-panel-on-h/70483913#70483913" rel="noopener noreferrer"&gt;Open Full Answer&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;So without further ado, let's first dive into what static &amp;amp; media files are and how Heroku dynos manage their filesystem? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-media-amp-static-files"&gt;
  &lt;/a&gt;
  What are Media &amp;amp; Static Files
&lt;/h2&gt;

&lt;p&gt;If you are working with a &lt;a href="http://djangoproject.com/"&gt;Django&lt;/a&gt; project, then you inevitably have all of your Python application code written around a bunch of &lt;code&gt;.py&lt;/code&gt; files. These are the code paths of your application, and the end-user - hopefully - never actually sees these files or their contents.&lt;/p&gt;

&lt;p&gt;Outside of these business-logic files, it is common to serve users directly from your server's file system. For these &lt;strong&gt;static files&lt;/strong&gt;, Django doesn't need to run any code for them; the framework looks up the file and returns the contents for the requesting user to view.&lt;/p&gt;

&lt;p&gt;Some examples of static files include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Non-templated HTML&lt;/li&gt;
&lt;li&gt;CSS &amp;amp; JavaScript files to make your page look nice&lt;/li&gt;
&lt;li&gt;User profile pictures&lt;/li&gt;
&lt;li&gt;Generated PDFs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Media files&lt;/strong&gt; in Django are a particular variant of static files. Media files are read from the server's file system as well. Unlike static files, though, they are usually generated files uploaded by users or generated by your application and are associated with a model's &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/fields/#filefield"&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.ImageField"&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt;. In the examples above, user profile pictures and generated PDFs are typical examples of media files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#django-with-media-amp-static-files"&gt;
  &lt;/a&gt;
  Django with Media &amp;amp; Static Files
&lt;/h3&gt;

&lt;p&gt;When a new media file is uploaded to a Django web application, the framework looks at the &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; settings configuration to determine how to store that file. &lt;a href="https://docs.djangoproject.com/en/4.0/ref/settings/#default-file-storage"&gt;By default&lt;/a&gt;, it uses the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/files/storage/#django.core.files.storage.FileSystemStorage"&gt;&lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt; class&lt;/a&gt;, which is what most projects start off as having configured. This implementation looks at the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-MEDIA_ROOT"&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt; configuration&lt;/a&gt; that is defined in the &lt;code&gt;settings.py&lt;/code&gt; file and copies the uploaded file contents to &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.FileField.upload_to"&gt;a deterministically-created file path&lt;/a&gt; under that given &lt;code&gt;MEDIA_ROOT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, if the &lt;code&gt;MEDIA_ROOT&lt;/code&gt; is set as &lt;code&gt;/var/www/media&lt;/code&gt;, all uploaded files will be copied and written to a location under &lt;code&gt;/var/www/media/&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heroku-with-media-amp-static-files"&gt;
  &lt;/a&gt;
  Heroku with Media &amp;amp; Static Files
&lt;/h3&gt;

&lt;p&gt;Storing these static files on your server's disk file system is okay until you start to work with a containerization platform such as &lt;a href="https://www.heroku.com/home"&gt;Heroku&lt;/a&gt;. To explain why this is the case, it helps to take a step back.&lt;/p&gt;

&lt;p&gt;When downloading files on your personal computer, it's okay that these get written to the file system - usually under &lt;code&gt;~/Downloads&lt;/code&gt; or somewhere similar. This download is because you &lt;em&gt;expect&lt;/em&gt; your computer's file system to persist across restarts and shutdowns; if you download a file and restart your computer, that downloaded file should still be there once the laptop is finished restarting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://heroku.com/home"&gt;Heroku&lt;/a&gt; uses &lt;a href="https://www.docker.com/resources/what-container"&gt;containerization&lt;/a&gt; to execute customer workloads. One fact of this environment is that the associated file systems do not persist across restarts and reschedules. &lt;a href="https://www.heroku.com/dynos"&gt;Heroku dynos&lt;/a&gt; are ephemeral, and they can be destroyed, restarted, and moved without any warning, which &lt;a href="https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem"&gt;replaces the associated filesystem&lt;/a&gt;. This situation means that any uploaded files referenced by &lt;code&gt;FileField's and&lt;/code&gt;ImageField's are just deleted without a trace every time the dyno is restarted, moved, or scaled.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#complete-example-codebase"&gt;
  &lt;/a&gt;
  Complete Example Codebase
&lt;/h2&gt;

&lt;p&gt;I will be stepping through the process of configuring the Django application for Heroku &amp;amp; S3-compatible storage, but feel free to reference the repository below for the complete code to browse through.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dstarner"&gt;
        dstarner
      &lt;/a&gt; / &lt;a href="https://github.com/dstarner/django-heroku-static-file-example"&gt;
        django-heroku-static-file-example
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Used in my blog post of detailing private &amp;amp; public static files for a Heroku-served Django application
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Properly Managing Django Media &amp;amp; Static Files on Heroku Example&lt;/h1&gt;
&lt;p&gt;Used in my blog post of detailing private &amp;amp; public static files for a Heroku-served Django application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This does include a $5.00 / month &lt;a href="https://elements.heroku.com/addons/bucketeer" rel="nofollow"&gt;Bucketeer add-on&lt;/a&gt; as a part of the one-click deployment.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://heroku.com/deploy?template=https://github.com/dstarner/django-heroku-static-file-example" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6979881d5a96b7b18a057083bb8aeb87ba35fc279452e29034c1e1c49ade0636/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e737667" alt="Deploy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/dstarner/django-heroku-static-file-example"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#bootstrapping-django-on-heroku"&gt;
  &lt;/a&gt;
  Bootstrapping Django on Heroku
&lt;/h2&gt;

&lt;p&gt;This tutorial aims to help you retrofit an existing Django project with S3-compatible storage, but I'll quickly go through the steps I used to set up the example Django application. It may help those new to Django &amp;amp; Heroku or those who encounter bugs following the rest of the setup process.&lt;/p&gt;

&lt;p&gt;You can view the tagged project before the storage change &lt;a href="https://github.com/dstarner/django-heroku-static-file-example/commit/299bbe2403e3c35b4cd905aa61eee974ccdb9558"&gt;at commit &lt;code&gt;299bbe2&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrapped a Django project &lt;code&gt;example&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Uses &lt;a href="https://python-poetry.org/"&gt;&lt;code&gt;poetry&lt;/code&gt;&lt;/a&gt; for dependency management&lt;/li&gt;
&lt;li&gt;All of the Django code is under the &lt;code&gt;example&lt;/code&gt; package, and the &lt;code&gt;manage.py&lt;/code&gt; file is in the root. I've always found this structure cleaner than the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/applications/"&gt;Django apps&lt;/a&gt; defined in the project root.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Configured the project for Heroku

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://pypi.org/project/django-heroku/"&gt;&lt;code&gt;django-heroku&lt;/code&gt; package&lt;/a&gt; to automatically configure &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;, &lt;code&gt;DATABASE_URL&lt;/code&gt;, and more. This reduces the headache of deploying Django on Heroku considerably&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://devcenter.heroku.com/articles/procfile"&gt;&lt;code&gt;Procfile&lt;/code&gt;&lt;/a&gt; that runs a &lt;a href="https://gunicorn.org/"&gt;&lt;code&gt;gunicorn&lt;/code&gt; process&lt;/a&gt; for managing the WSGI application&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;app.json&lt;/code&gt; is defined with some fundamental configuration values and resources defined for the project to work&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;release&lt;/code&gt; process definition in the &lt;code&gt;Procfile&lt;/code&gt; and an associated &lt;code&gt;scripts/release.sh&lt;/code&gt; script that runs staticfile collection and database migrations&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introducing-herokus-bucketeer-addon"&gt;
  &lt;/a&gt;
  Introducing Heroku's Bucketeer Add-On
&lt;/h2&gt;

&lt;p&gt;Before we can start managing static and media files, the Django application needs a persistent place to store the files. Again, we can look to &lt;a href="https://elements.heroku.com/addons"&gt;Heroku's extensive list of Add-Ons&lt;/a&gt; for s3-compatible storage. Ours of choice will be one called &lt;strong&gt;Bucketeer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Heroku's &lt;a href="https://elements.heroku.com/addons/bucketeer"&gt;Bucketeer add-on&lt;/a&gt; provides an &lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3 storage&lt;/a&gt; bucket to upload and download files for our application. The Django application will use this configured bucket to store files uploaded by the server and download them from the S3 when a user requests the files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you'd like to learn more about AWS S3, the widely-popular data storage solution that Bucketeer is built upon, you can read the &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"&gt;S3 user documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;It is worth mentioning that the base plan for Bucketeer - &lt;code&gt;Hobbyist&lt;/code&gt; - is  $5 per month.&lt;/strong&gt; If you plan on spinning up the one-click example posted above, it should only cost a few cents if you &lt;a href="https://help.heroku.com/LGKL6LTN/how-do-i-delete-destroy-a-heroku-application"&gt;proactively destroy the application&lt;/a&gt; when you are done using it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#including-the-bucketeer-addon"&gt;
  &lt;/a&gt;
  Including the Bucketeer Add-On
&lt;/h3&gt;

&lt;p&gt;To include the &lt;a href="https://elements.heroku.com/addons/bucketeer"&gt;Bucketeer add-on&lt;/a&gt; in our application, we can configure it through the Heroku CLI, web dashboard, or via the project's &lt;code&gt;app.json&lt;/code&gt; file. We will use the third method of including the add-on in an &lt;code&gt;app.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If the project does not have one already, we can create the basic structure listed below, with the critical part being the addition of the &lt;code&gt;"add-ons"&lt;/code&gt; configuration. This array defines the &lt;code&gt;"bucketeer:hobbyist"&lt;/code&gt; resource that our application will use, and Heroku will install the add-on into our application if it does not already exist. We also include the &lt;code&gt;" as"&lt;/code&gt; keyword, which will preface the associated configuration variables with the term &lt;code&gt;BUCKETEER&lt;/code&gt;. This prefacing is helpful to keep the generated configuration value names deterministic because, by default, Heroku will generate the prefix as a random color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ... rest above&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;addons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;// ...other addons...&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bucketeer:hobbyist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BUCKETEER&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the required resources being defined, we can start integrating with our storage add-on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-our-storage-solution"&gt;
  &lt;/a&gt;
  Implementing Our Storage Solution
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://django-storages.readthedocs.io/en/latest/"&gt;&lt;code&gt;django-storages&lt;/code&gt; package&lt;/a&gt; is a collection of custom, reuseable storage backends for Django. It aids immensely in saving static and media files to different cloud &amp;amp; storage provider options. &lt;a href="https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html"&gt;One of the supported storage providers is S3&lt;/a&gt;, which our Bucketeer add-on is built on. We will leverage the S3 &lt;code&gt;django-storages&lt;/code&gt; backend to handle different file types.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-raw-djangostorages-endraw-"&gt;
  &lt;/a&gt;
  Installing &lt;code&gt;django-storages&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Begin by installing the &lt;code&gt;django-storages&lt;/code&gt; package and the related &lt;a href="https://aws.amazon.com/sdk-for-python/"&gt;&lt;code&gt;boto3&lt;/code&gt; package&lt;/a&gt; used to interface with AWS's S3. We will also lock our dependencies to ensure &lt;code&gt;poetry&lt;/code&gt; and our Heroku deployment continue to work as expected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;poetry add django-storages boto3 &amp;amp;&amp;amp; poetry lock
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, just like most Django-related packages, &lt;code&gt;django-storages&lt;/code&gt; will need to be added to the project's &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in the projects &lt;code&gt;settings.py&lt;/code&gt; file. This will allow Django to load the appropriate code flows as the application starts up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# example/config/settings.py
&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# ... django.X.Y apps above
&lt;/span&gt;    &lt;span class="s"&gt;'storages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ... custom project apps below
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implementing-static-public-amp-private-storage-backends"&gt;
  &lt;/a&gt;
  Implementing Static, Public &amp;amp; Private Storage Backends
&lt;/h3&gt;

&lt;p&gt;We will return to the &lt;code&gt;settings.py&lt;/code&gt; file later to configure the usage of &lt;code&gt;django-storages&lt;/code&gt;, but before that can be done, we will implement three custom &lt;a href="https://docs.djangoproject.com/en/4.0/howto/custom-file-storage/"&gt;storage backends&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A storage backend for static files - CSS, Javascript, and publicly accessible images - that will be stored in version control - aka &lt;code&gt;git&lt;/code&gt; - and shipped with the application&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;public&lt;/strong&gt; storage backend for dynamic media files that are not stored in version control, such as uploaded files and attachments&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;private&lt;/strong&gt; storage backend for dynamic media files that are not stored in the version control that require extra access to be viewed, such as per-user reports and potentially profile images. Files managed by this backend require an access key and will block access to those without a valid key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can extend from &lt;code&gt;django-storages&lt;/code&gt; 's &lt;code&gt;S3Boto3Storage&lt;/code&gt; storage backend to create these. The following code can be directly "copy and paste "'d into your project. The different &lt;code&gt;settings&lt;/code&gt; attributes read in the module will be written shortly, so &lt;strong&gt;do not expect this code to work if you import it right now&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# FILE: example/utils/storage_backends.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;storages.backends.s3boto3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;S3Boto3Storage&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StaticStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3Boto3Storage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Used to manage static files for the web server"""&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_LOCATION&lt;/span&gt;
    &lt;span class="n"&gt;default_acl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_DEFAULT_ACL&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PublicMediaStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3Boto3Storage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Used to store &amp;amp; serve dynamic media files with no access expiration"""&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PUBLIC_MEDIA_LOCATION&lt;/span&gt;
    &lt;span class="n"&gt;default_acl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PUBLIC_MEDIA_DEFAULT_ACL&lt;/span&gt;
    &lt;span class="n"&gt;file_overwrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrivateMediaStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3Boto3Storage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Used to store &amp;amp; serve dynamic media files using access keys
    and short-lived expirations to ensure more privacy control
    """&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PRIVATE_MEDIA_LOCATION&lt;/span&gt;
    &lt;span class="n"&gt;default_acl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PRIVATE_MEDIA_DEFAULT_ACL&lt;/span&gt;
    &lt;span class="n"&gt;file_overwrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;custom_domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The attributes listed in each storage backend class perform the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;location&lt;/code&gt;: This dictates the parent directory used in the S3 bucket for associated files. This is concatenated with the generated path provided by a &lt;code&gt;FileField&lt;/code&gt; or &lt;code&gt;ImageField&lt;/code&gt; 's &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.FileField.upload_to"&gt;&lt;code&gt;upload_to&lt;/code&gt; method&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;default_acl&lt;/code&gt;: This dictates the access policy required for reading the files. This dictates the storage backend's access control through values of &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;public-read&lt;/code&gt;, and &lt;code&gt;private&lt;/code&gt;. &lt;code&gt;django-storages&lt;/code&gt; and the &lt;code&gt;S3Boto3Storage&lt;/code&gt; parent class with translate these into object policies.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;file_overwrite&lt;/code&gt;: In most cases, it's better not to overwrite existing files if we update a specific path. With this set to &lt;code&gt;False&lt;/code&gt;, a unique suffix will be appended to the path to prevent naming collisions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;custom_domain&lt;/code&gt;: Disabled here, but you can enable it if you want to use &lt;a href="https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront"&gt;AWS's CloudFront and &lt;code&gt;django-storage&lt;/code&gt; to serve from it&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configure-settings-to-use-the-storage-backends"&gt;
  &lt;/a&gt;
  Configure Settings to Use the Storage Backends
&lt;/h3&gt;

&lt;p&gt;With our storage backends defined, we can configure them to be used in different situations via the &lt;code&gt;settings.py&lt;/code&gt; file. However, it is challenging to use S3 and these different cloud storage backends while in development, and I've always been a proponent of keeping all resources and files "local" to the development machine, so we will create a logic path that will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the local filesystem to store static and media files for convenience. The Django server will be responsible for serving these files directly.&lt;/li&gt;
&lt;li&gt;Use the custom S3 storage backends when an environment variable is enabled. We will use the &lt;code&gt;S3_ENABLED&lt;/code&gt; variable to control this, enabling it in our Heroku configuration variables.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First, we will assume that you have a relatively vanilla &lt;code&gt;settings.py&lt;/code&gt; file concerning the static- &amp;amp; media-related variables. For reference, a new project should have a block that looks similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'static/'&lt;/span&gt;

&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;'collected-static'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will design a slightly advanced control flow that will seamlessly handle the two cases defined above. In addition, it will provide enough control to override each part of the configuration as needed.&lt;/p&gt;

&lt;p&gt;Since there are already default values for the static file usage, we can add default values for media file usage. These will be used when serving files locally from the server while in development mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/static/'&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;'collected-static'&lt;/span&gt;

&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/media/'&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;'collected-media'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To begin the process of including S3, let's create the controls to manage if we should serve static &amp;amp; media files from the local server or through the S3 storage backend. We will create three variables&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;S3_ENABLED&lt;/code&gt;: controls whether media &amp;amp; static files should use S3 storage by default&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;LOCAL_SERVE_MEDIA_FILES&lt;/code&gt;: controls whether media files should use S3 storage. Defaults to the negated &lt;code&gt;S3_ENABLED&lt;/code&gt; value&lt;/li&gt;
&lt;li&gt; &lt;code&gt;LOCAL_SERVE_STATIC_FILES&lt;/code&gt;: controls whether static files should use S3 storage. Defaults to the negated &lt;code&gt;S3_ENABLED&lt;/code&gt; value
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decouple&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;  &lt;span class="c1"&gt;# import explained below
&lt;/span&gt;
&lt;span class="c1"&gt;# ...STATIC and MEDIA settings here...
&lt;/span&gt;
&lt;span class="c1"&gt;# The following configs determine if files get served from the server or an S3 storage
&lt;/span&gt;&lt;span class="n"&gt;S3_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'S3_ENABLED'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOCAL_SERVE_MEDIA_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'LOCAL_SERVE_MEDIA_FILES'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;S3_ENABLED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOCAL_SERVE_STATIC_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'LOCAL_SERVE_STATIC_FILES'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;S3_ENABLED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;LOCAL_SERVE_MEDIA_FILES&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;LOCAL_SERVE_STATIC_FILES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;S3_ENABLED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'S3_ENABLED must be true if either media or static files are not served locally'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we are using the &lt;a href="https://pypi.org/project/python-decouple/"&gt;&lt;code&gt;python-decouple&lt;/code&gt; package&lt;/a&gt; to make it easier to read and cast environment variables to Python variables. I highly recommend this package when working with &lt;code&gt;settings.py&lt;/code&gt; configurations. We also include a value check to ensure consistency across these three variables. If all three variables are defined in the environment but conflict with one another, the program will throw an error.&lt;/p&gt;

&lt;p&gt;We can now start configuring the different configuration variables required by our file storage backends based on those control variables' value(s). We begin by including some S3 configurations required whether we are serving static, media, or both types of files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;S3_ENABLED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BUCKETEER_AWS_ACCESS_KEY_ID'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BUCKETEER_AWS_SECRET_ACCESS_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BUCKETEER_BUCKET_NAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_S3_REGION_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BUCKETEER_AWS_REGION'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_DEFAULT_ACL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;AWS_S3_SIGNATURE_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'S3_SIGNATURE_VERSION'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'s3v4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_S3_ENDPOINT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.s3.amazonaws.com'&lt;/span&gt;
    &lt;span class="n"&gt;AWS_S3_OBJECT_PARAMETERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'CacheControl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'max-age=86400'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above defines some of the variables required by the &lt;a href="https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html"&gt;&lt;code&gt;django-storages&lt;/code&gt; S3 backend&lt;/a&gt; and sets the values to environment configurations that are provided by the Bucketeer add-on. As previously mentioned, all of the add-on environment variables are prefixed with &lt;code&gt;BUCKETEER_&lt;/code&gt;. The &lt;code&gt;S3_SIGNATURE_VERSION&lt;/code&gt; environment variable is not required and &lt;em&gt;most likely&lt;/em&gt; does not need to be included.&lt;/p&gt;

&lt;p&gt;With the S3 configuration together, we can reference the &lt;code&gt;LOCAL_SERVE_MEDIA_FILES&lt;/code&gt; and &lt;code&gt;LOCAL_SERVE_STATIC_FILES&lt;/code&gt; control variables to override the default static and media file settings if they are desired to be served via S3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;LOCAL_SERVE_STATIC_FILES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;STATIC_DEFAULT_ACL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'public-read'&lt;/span&gt;
    &lt;span class="n"&gt;STATIC_LOCATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'static'&lt;/span&gt;
    &lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;AWS_S3_ENDPOINT_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;STATIC_LOCATION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/'&lt;/span&gt;
    &lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'example.utils.storage_backends.StaticStorage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the last line where &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; is set to the custom Backend we created. That ensures it follows the location &amp;amp; ACL (Access Control List) policies that we configured initially. With this configuration, all static files will be placed under &lt;code&gt;/static/&lt;/code&gt; in the bucket, but feel free to update &lt;code&gt;STATIC_LOCATION&lt;/code&gt; if desired.&lt;/p&gt;

&lt;p&gt;We can configure a very similar situation for media files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;LOCAL_SERVE_MEDIA_FILES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;PUBLIC_MEDIA_DEFAULT_ACL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'public-read'&lt;/span&gt;
    &lt;span class="n"&gt;PUBLIC_MEDIA_LOCATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'media/public'&lt;/span&gt;

    &lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;AWS_S3_ENDPOINT_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PUBLIC_MEDIA_LOCATION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/'&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_FILE_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'rn_api.utils.storage_backends.PublicMediaStorage'&lt;/span&gt;

    &lt;span class="n"&gt;PRIVATE_MEDIA_DEFAULT_ACL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'private'&lt;/span&gt;
    &lt;span class="n"&gt;PRIVATE_MEDIA_LOCATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'media/private'&lt;/span&gt;
    &lt;span class="n"&gt;PRIVATE_FILE_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'rn_api.utils.storage_backends.PrivateMediaStorage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The big difference here is that we have configured &lt;em&gt;two&lt;/em&gt; different storage backends for media files; one for publicly accessible objects and one for objects that require an access token. When the file is requested, this token will be generated internally by &lt;code&gt;django-storages&lt;/code&gt; so you do not have to worry about anonymous public access.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-development-serving"&gt;
  &lt;/a&gt;
  Local Development Serving
&lt;/h3&gt;

&lt;p&gt;Since we will have &lt;code&gt;S3_ENABLED&lt;/code&gt; set to &lt;code&gt;False&lt;/code&gt; in our local development environment, it will serve static and media files locally through the Django server instead of from S3. We will need to configure the URL routing to handle this scenario. We can configure our &lt;code&gt;urls.py&lt;/code&gt; file to serve the appropriate files like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.static&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;


&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'admin/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCAL_SERVE_STATIC_FILES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCAL_SERVE_MEDIA_FILES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will locally serve the static or media files based on the values of the &lt;code&gt;LOCAL_SERVE_STATIC_FILES&lt;/code&gt; and &lt;code&gt;LOCAL_SERVE_MEDIA_FILES&lt;/code&gt; settings variables we defined.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enabling-s3-storage"&gt;
  &lt;/a&gt;
  Enabling S3 Storage
&lt;/h3&gt;

&lt;p&gt;We can enable these storages and our add-on in the &lt;code&gt;app.json&lt;/code&gt; file to start using these storage backends. This will effectively disable &lt;code&gt;LOCAL_SERVE_STATIC_FILES&lt;/code&gt; and &lt;code&gt;LOCAL_SERVE_MEDIA_FILES&lt;/code&gt; to start serving both via S3 when deployed to Heroku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...rest of configs...&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...rest of envs...&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S3_ENABLED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enable to upload &amp;amp; serve static and media files from S3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;True&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-private-storage"&gt;
  &lt;/a&gt;
  Using the Private Storage
&lt;/h3&gt;

&lt;p&gt;By default, Django will use the &lt;code&gt;PublicMediaStorage&lt;/code&gt; class for uploading media files, meaning the contents will be publicly accessible to anyone with the link. However, a model can utilize the &lt;code&gt;PrivateMediaStorage&lt;/code&gt; backend when desired, which will create short-lived access tokens that prevent the public from viewing the associated object.&lt;/p&gt;

&lt;p&gt;The below is an example of using public and private media files on the same model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;example.utils.storage_backends&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PrivateMediaStorage&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Organization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""A sample Organization model with public and private file field usage
    """&lt;/span&gt;

    &lt;span class="n"&gt;logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'A publicly accessible company logo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;expense_report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'The private expense report requires a short-lived access token'&lt;/span&gt;
        &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PrivateMediaStorage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# will create private files
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;You can see the code for this complete example &lt;a href="https://github.com/dstarner/django-heroku-static-file-example/commit/265becc025cd41ebe1de6cb489150b7f6b110f23"&gt;at commit &lt;code&gt;265becc&lt;/code&gt;&lt;/a&gt;. This configuration will allow your project to scale efficiently using &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; on &lt;a href="https://www.heroku.com/home"&gt;Heroku&lt;/a&gt; using &lt;a href="https://elements.heroku.com/addons/bucketeer"&gt;Bucketeer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a future post, we will discuss how to upload and set these files using vanilla Django &amp;amp; &lt;a href="https://www.django-rest-framework.org/"&gt;Django REST Framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, if you find any bugs, issues, or unclear explanations, please reach out to me so I can improve the tutorial &amp;amp; experience for future readers.&lt;/p&gt;

&lt;p&gt;Take care everyone&lt;/p&gt;

</description>
      <category>django</category>
      <category>heroku</category>
      <category>aws</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
