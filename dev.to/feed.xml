<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>DevTips Daily Update 03/12/21</title>
      <author>James Bubb</author>
      <pubDate>Fri, 03 Dec 2021 13:25:27 +0000</pubDate>
      <link>https://dev.to/codebubb/devtips-daily-update-191121-434m</link>
      <guid>https://dev.to/codebubb/devtips-daily-update-191121-434m</guid>
      <description>&lt;p&gt;So in this week's videos on DevTips Daily, we were carrying on with our full end to end project and we did a bit more work on the API in terms of setting up the redirect endpoint in Express. We then moved on to setting up a deployment pipeline with a GitHub action and finished up by starting to configure our Digital Ocean droplet to accept out code.&lt;/p&gt;

&lt;p&gt;Here's a link to each individual tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/RrRXdNAVFpk"&gt;Sending POST requests with Postman&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RrRXdNAVFpk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/1y_RbcJ0eKk"&gt;Redirect Endpoint in Express&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1y_RbcJ0eKk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/bW_JV7jeJxE"&gt;CI/CD Pipeline Overview&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bW_JV7jeJxE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/2AD8-uYlTQA"&gt;Creating a GitHub action&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2AD8-uYlTQA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/mWw7XrBy-Aw"&gt;Installing and Building in the GitHub action&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mWw7XrBy-Aw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/DOocQ-yrT5g"&gt;Adding a new User on the server&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DOocQ-yrT5g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/h7HY6cwMY0M"&gt;Setting / Resetting a user's password&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/h7HY6cwMY0M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Next week we're going to be carrying on with the project again, we're going to be finishing off setting up the server and getting our pipeline to push our code to the server!&lt;/p&gt;

&lt;p&gt;Thanks for watching 👍&lt;/p&gt;

</description>
      <category>devtipsdaily</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Go Smtp ve RabbitMQ ile Email servisi</title>
      <author>Tayfur</author>
      <pubDate>Fri, 03 Dec 2021 13:23:51 +0000</pubDate>
      <link>https://dev.to/go/go-smtp-ve-rabbitmq-ile-email-servisi-4end</link>
      <guid>https://dev.to/go/go-smtp-ve-rabbitmq-ile-email-servisi-4end</guid>
      <description>&lt;p&gt;Selamlar Ben Tayfur Kaya yeni &lt;strong&gt;Golang&lt;/strong&gt; öğreniyorum ve size öğrenirken yaşadığım zorlukları ve avantajları bu projede göstermek istiyorum.&lt;br&gt;
Bugün go dili ile yazmış olduğum basit bir email service inceleyeceğiz.&lt;br&gt;
kullandığım teknolojiler RabbitMQ, Smtp, fiber ve Gorm &lt;br&gt;
Github Reposuna gitmek istiyorsanız &lt;a href="https://github.com/Tayfur/Email-Service"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#stmp"&gt;
  &lt;/a&gt;
  Stmp
&lt;/h1&gt;

&lt;p&gt;Golang ile basit bir sekilde gönderici olan mail adresine giriş yaparak istediğimiz email adresine mesajı html template olarak göndereceğiz&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#html-nas%C4%B1l-parse-edilir-"&gt;
  &lt;/a&gt;
  Html nasıl parse edilir ?
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./Templates/FeatureNotification.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;yukarıda html dosyasını parse ediyoruz.&lt;br&gt;
ve aşağıdaki gibi execute ediyoruz buradaki subject kısmı ise gönderilecek mailin title yazıyoruz..&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;templateBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subject: Lates Features &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mimeHeaders&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;templateBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#smtp-ile-mail-g%C3%B6ndermek"&gt;
  &lt;/a&gt;
  Smtp ile mail göndermek
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;sendMail fonksiyonu hangi consumerden triggerlandıysa ilgili htmli parse ediyoruz&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;tamplate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"WelcomeQueue"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parseHtml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WelcomeTemplate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"WeeklyReportQueue"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parseHtml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WeeklyReportTemplate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"FeatureNotificationQueue"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parseHtml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FeatureNotificationTemplate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smtpHost&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;":"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;smtpPort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;senderMail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;yukaradaki kod bloğunda mail adresimize authentication oluyoruz ve oldugumuz email adresinden &lt;strong&gt;to&lt;/strong&gt; göndereceğimiz mail adresini içeriyor. &lt;strong&gt;msg&lt;/strong&gt;  kısmı ise gönderilecek olan mesajı içeriyor ama biz orada bir mesaj yerine html template göndereceğiz.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#rabbitmq"&gt;
  &lt;/a&gt;
  RabbitMQ
&lt;/h1&gt;

&lt;p&gt;diyebilirsinizki yukarıda basit yazıyordu ne gerek var rabbitMQ kullanmaya!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBxsUcuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de8czqszvyzpi1sxyuli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBxsUcuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de8czqszvyzpi1sxyuli.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
Evet var çünkü gönderecek oldugumuz mailleri &lt;strong&gt;Message queue&lt;/strong&gt;&lt;br&gt;
ya göndermemiz gerekiyor,  yaptıgımız app belki databaseden aldığımız mail adreslerine email atarken yarısında app crashe olabilir ve biz hangi mail adreslerine mail gönderildi hangisine gönderilmedi bunu bilemeyiz.&lt;/p&gt;

&lt;p&gt;Birden fazla email templatemiz olabilir mesela welcome, verify, Feature Notification gibi farkettiginiz gibi bazıları &lt;strong&gt;Bulk&lt;/strong&gt;(toplu gönderilen) mail bazıları &lt;strong&gt;Transaction&lt;/strong&gt;(tekli ) mail.&lt;/p&gt;

&lt;p&gt;Biz her template icin bir &lt;strong&gt;Consume&lt;/strong&gt; ve &lt;strong&gt;Publish&lt;/strong&gt; oluşturacağız böylelikle mail adresleri ilk önce queue gidicek sonra Consume"a iletilecek ve oradan templatine göre smtp ile maili göndereceğiz =)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#publish"&gt;
  &lt;/a&gt;
  Publish
&lt;/h3&gt;

&lt;p&gt;RabbitMQ bağlantısı oluşturuyoruz&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amqpServerURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;consume ile haberleşmek için bir channel oluşturuyoruz&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connectRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;yeni bir mesaj oluşturup bunu queue gönderiyoruz ama burdaki en önemli nokta verilen queue name"i çok önemli bu fonksiyonun çağrıldığı yerden alıyor ve mesajı o queue ismine göre gönderiyor bu sayede consume ederken her template icin farklı queue den onları alabileceğiz&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publishing&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"text/plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// mesaji publish eder.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;channelRabbitMQ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c"&gt;// exchange&lt;/span&gt;
        &lt;span class="n"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c"&gt;// queue name&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#consume"&gt;
  &lt;/a&gt;
  Consume
&lt;/h3&gt;

&lt;p&gt;buradaki işlemlerde aynı sayılır ama bir farkla =)&lt;br&gt;
queue deki mesajları okuyup her mesaj için bir sendMail fonksiyonunu trigger ediyor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;forever&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="c"&gt;//queue'dan gelen mesaji mail.Send fonksiyonuna gönder&lt;/span&gt;
            &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" &amp;gt; Received message: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;forever&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bulk-mail-amp-transaction-mail"&gt;
  &lt;/a&gt;
  Bulk Mail &amp;amp; Transaction Mail
&lt;/h3&gt;

&lt;p&gt;Yukarıda bu ikisinden bahsetmiştik genel anlamda toplu gönderilen maillere Bulk ,ve sadece tekli işlemler için gönderilen maillere Transaction mail denir&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectDB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;yukarıda diye bağlanıp dbdeki User ların hepsini arrayin içine alıyoruz&lt;br&gt;
Aşağıda is User arrayini for döngüsüne alıp her user"ın maili için []byte a dönüştürüp bunu queue gönderiyoruz burada []byte a dönüştürmemizin sebebi RabbitMQ channeli byte ile haberleşmesi&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rabbitmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Transaction maillerinde ise farklı farklı işlemler yapılabilir ama biz basit bir halde fiber endpointinden gelen mail adresine email göndereceğiz  &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#main"&gt;
  &lt;/a&gt;
  Main
&lt;/h1&gt;

&lt;p&gt;Main fonksiyonu içinde goroutine ile bütün consumeleri dinliyoruz bunlar hep açık kalıyor queue herhangi bir mail girdiğinde direkt bunları işleme gönderecek&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;WelcomeQueue&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"WelcomeQueue"&lt;/span&gt;
    &lt;span class="n"&gt;WeeklyReportQueue&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"WeeklyReportQueue"&lt;/span&gt;
    &lt;span class="n"&gt;FeatureNotificationQueue&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"FeatureNotificationQueue"&lt;/span&gt;
    &lt;span class="c"&gt;// consumelari dinliyoruz&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;rabbitmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WeeklyReportQueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;rabbitmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FeatureNotificationQueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;rabbitmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WelcomeQueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Dediğim gibi Mailleri gönderirken fiber endpointleri trigger edicek aslında daha complex hale getirilebilir örneğin eğer diye yeni bir kullanıcı eklendiyse o indexteki maile welcomeTemplati göndermek gibi ama şimdi daha basit bir şekilde handle ediyoruz&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c"&gt;// add simple logger&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/FeatureNotification"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BulkMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FeatureNotificationQueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feature notification Sended"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/WelcomeNotification"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transactional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WelcomeQueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome Sended to "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  conclusion
&lt;/h2&gt;

&lt;p&gt;Bence &lt;strong&gt;go&lt;/strong&gt; yazması çok keyifli bir dil ve kolayca service oluşturabiliyorsunuz eğer sizde benim gibi başka yazılım dillerinden geldiyseniz variables'a önem verin çünkü verileri çok defa convert etmem gerekti&lt;br&gt;
umarım yazımı beğenmişsinizdir, yazım yanlışları için özür dilerim elimden geldiğince anlaşılır yazmaya çalıştım&lt;/p&gt;

</description>
      <category>go</category>
      <category>rabbitmq</category>
      <category>smtp</category>
      <category>fiber</category>
    </item>
    <item>
      <title>The SMOOTHEST yaml editing experience possible yaml-language-server neovim</title>
      <author>Waylon Walker</author>
      <pubDate>Fri, 03 Dec 2021 13:14:01 +0000</pubDate>
      <link>https://dev.to/waylonwalker/the-smoothest-yaml-editing-experience-possible-yaml-language-server-neovim-52mm</link>
      <guid>https://dev.to/waylonwalker/the-smoothest-yaml-editing-experience-possible-yaml-language-server-neovim-52mm</guid>
      <description>&lt;p&gt;I've gone far too long without a good setup for editing yaml files, I am missing out on autocomplete and proper diagnostics.  This ends today as I setup yaml-language-server in neovim.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xo4HrFoKF4c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The video for this one is part of a&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETAj0nR_WYAxxGjd7kXch5zj"&gt;challenge-playlist&lt;/a&gt; I put out for myself to constantly improve my dotfiles for all of December.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#initvim"&gt;
  &lt;/a&gt;
  init.vim
&lt;/h2&gt;

&lt;p&gt;I have my &lt;code&gt;init.vim&lt;/code&gt; setup to only source other modules, if you want everything in a single config, feel free to do as you wish.  I broke mine up earlier this year as I doubled into nvim and am not going back.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;source&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.config/&lt;/span&gt;nvim/plugins&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;vim&lt;/span&gt;
&lt;span class="k"&gt;lua&lt;/span&gt; require&lt;span class="s1"&gt;'waylonwalker.cmp'&lt;/span&gt;
&lt;span class="k"&gt;lua&lt;/span&gt; require&lt;span class="s1"&gt;'waylonwalker.lsp-config'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#plugin-setup"&gt;
  &lt;/a&gt;
  Plugin setup
&lt;/h2&gt;

&lt;p&gt;You will need the following plugins.  I use plug, if you don't you will have to convert the syntax over to the plugin manager you use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/neovim/nvim-lspconfig"&gt;neovim/nvim-lspconfig&lt;/a&gt; is for configuring the lsp.  It comes with a bunch of sane defaults for most servers, so you pretty much just have to call setup on that server unless you want to change the defaults.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hrsh7th/nvim-cmp"&gt;hrsh7th/nvim-cmp&lt;/a&gt; is what I use for autocomplete. If you are using something else you might need to set that up in a different way in order to get the autocomplete to work.  You will still get the diagnostics with just lsp-config.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kabouzeid/nvim-lspinstall"&gt;kabouzeid/nvim-lspinstall&lt;/a&gt; will&lt;br&gt;
aide in installing lsp's if you want.  I have chosen not to because I want to have my full setup scripted so when I setup any new machine I just run my ansible-playbook.  This library is nice to just set things up quick and play with them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" /home/u_walkews/.config/nvim/plugins.vim&lt;/span&gt;
Plug &lt;span class="s1"&gt;'neovim/nvim-lspconfig'&lt;/span&gt;

&lt;span class="c"&gt;" if you want to use nvim-cmp&lt;/span&gt;
Plug &lt;span class="s1"&gt;'hrsh7th/nvim-cmp'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'hrsh7th/cmp-nvim-lsp'&lt;/span&gt;

&lt;span class="c"&gt;" if you want to use lsp-install&lt;/span&gt;
Plug &lt;span class="s1"&gt;'kabouzeid/nvim-lspinstall'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cmp-config"&gt;
  &lt;/a&gt;
  cmp config
&lt;/h2&gt;

&lt;p&gt;Make sure that you have nvim_lsp as a source in your cmp config.  This is my config as of now, its likely to change in the future, set yours up how you like.  hrsh7th has a really good readme if you want help configuring cmp.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again if you don't use cmp you can skip this step, cmp is for autocomplete.&lt;br&gt;
You can use a different plugin for autocomplete, or not use a plugin at all&lt;br&gt;
if that's your thing.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;--  ~/.config/nvim/lua/waylonwalker/lsp-config.lua&lt;/span&gt;
&lt;span class="c1"&gt;-- Setup nvim-cmp.&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;'cmp'&lt;/span&gt;

&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;expand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;-- For `vsnip` user.&lt;/span&gt;
    &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"vsnip#anonymous"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;-- For `luasnip` user.&lt;/span&gt;
    &lt;span class="c1"&gt;-- require('luasnip').lsp_expand(args.body)&lt;/span&gt;

    &lt;span class="c1"&gt;-- For `ultisnips` user.&lt;/span&gt;
    &lt;span class="c1"&gt;-- vim.fn["UltiSnips#Anon"](args.body)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;C-n&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_next_item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;C-p&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_prev_item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;Down&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_next_item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;Up&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_prev_item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;C-d&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_docs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;C-f&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_docs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;C-Space&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;C-e&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;CR&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfirmBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'nvim_lsp'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'vsnip'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'path'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'buffer'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'calc'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'tmux'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lsp-config"&gt;
  &lt;/a&gt;
  lsp config
&lt;/h2&gt;

&lt;p&gt;Next up is the heart of this post, the lsp-config.lua.  This one is pretty straight forward, require lspconfig (which you need the plugin for), then set it up with cmp and the extra schemas.  I'm sure there are yaml schemas for tons of things, I'll probably add more in the future, but for now, this is what I have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;--  ~/.config/nvim/lua/waylonwalker/lsp-config.lua&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;'lspconfig'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yamlls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;on_attach&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;on_attach&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;capabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cmp_nvim_lsp'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;update_capabilities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lsp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_client_capabilities&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;schemas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"https://raw.githubusercontent.com/quantumblacklabs/kedro/develop/static/jsonschema/kedro-catalog-0.17.json"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"conf/**/*catalog*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"https://json.schemastore.org/github-workflow.json"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/.github/workflows/*"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#related-links"&gt;
  &lt;/a&gt;
  Related Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WaylonWalker/devtainer/tree/main/nvim/.config/nvim"&gt;my nvim config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/nvim-lspconfig"&gt;nvim-lspconfig GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hrsh7th/nvim-cmp"&gt;nvim-cmp GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kabouzeid/nvim-lspinstall/blob/main/lua/lspinstall/servers/yaml.lua"&gt;lspinstall yamlls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/yaml-language-server?activeTab=readme"&gt;yaml-language-server npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow the &lt;a href="https://youtube.com/waylonwalker"&gt;YouTube channel&lt;/a&gt; or the&lt;br&gt;
&lt;a href="https://waylonwalker/rss/"&gt;rss-feed&lt;/a&gt; to stay up to date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#also-check-out-my-python-lsp-setup"&gt;
  &lt;/a&gt;
  Also Check out My python lsp setup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/setup-pylsp/"&gt;https://waylonwalker.com/setup-pylsp/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>vim</category>
      <category>neovim</category>
    </item>
    <item>
      <title>How to Create Accordion with HTML CSS</title>
      <author>Sadee</author>
      <pubDate>Fri, 03 Dec 2021 13:01:22 +0000</pubDate>
      <link>https://dev.to/codewithsadee/how-to-create-accordion-with-html-css-5cnk</link>
      <guid>https://dev.to/codewithsadee/how-to-create-accordion-with-html-css-5cnk</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qgYYg4unBFw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to create accordion using only html and css.&lt;br&gt;
In this tutorial I will show you how to create accordion with only html css, no javascript&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fonts.google.com/specimen/Outfit"&gt;Font - Quicksand&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/codewithsadee"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  👤 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your favorite VS Code extensions for working with JS &amp; TS?</title>
      <author>Lars Grammel</author>
      <pubDate>Fri, 03 Dec 2021 12:53:20 +0000</pubDate>
      <link>https://dev.to/p42/what-are-your-favorite-vs-code-extensions-for-working-with-js-ts-1bj4</link>
      <guid>https://dev.to/p42/what-are-your-favorite-vs-code-extensions-for-working-with-js-ts-1bj4</guid>
      <description>&lt;p&gt;Plenty &lt;a href="https://marketplace.visualstudio.com/"&gt;VS Code extensions&lt;/a&gt; are available on the marketplace.&lt;/p&gt;

&lt;p&gt;I'm curious which ones (other than themes and icons) you use most when working with JavaScript and TypeScript? What do you like about them?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>vscode</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How to Hire Dedicated Developers: Ultimate Guide for 2022</title>
      <author>Anques Technolabs</author>
      <pubDate>Fri, 03 Dec 2021 12:51:48 +0000</pubDate>
      <link>https://dev.to/anquestechnolab/how-to-hire-dedicated-developers-ultimate-guide-for-2022-4m2h</link>
      <guid>https://dev.to/anquestechnolab/how-to-hire-dedicated-developers-ultimate-guide-for-2022-4m2h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brUGlE29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hla0gc23km0prk3bm861.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brUGlE29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hla0gc23km0prk3bm861.jpg" alt="Image description" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need to hire dedicated developers for your project, you should use a dedicated recruitment approach. However, the results also depend on the &lt;strong&gt;type of programmer&lt;/strong&gt; you are looking for (in-house specialist, freelancer, or dedicated remote developer). The last options are becoming one of the most popular in hiring practices because they are cheap and fast. Therefore, &lt;a href="https://www.anques.com/hire-dedicated-developers/"&gt;hiring a dedicated team&lt;/a&gt; can save you money on hardware, office rentals, taxes, or software licenses.&lt;/p&gt;

&lt;p&gt;Therefore, the answer to the question of how to hire enthusiastic developers and programmers across mobile development services, web development services, and all &lt;a href="https://www.anques.com/top-software-development-company/"&gt;software solutions&lt;/a&gt;. This guide outlines the benefits of hiring a dedicated developer and suggestions to help you hire the right team. Let’s begin!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-what-is-a-dedicated-development-team-model"&gt;
  &lt;/a&gt;
  1. What is a Dedicated Development Team Model?
&lt;/h3&gt;

&lt;p&gt;A dedicated development team model means that a company hires remote developers to achieve project ideas. Company requirements, deadlines, project roadmaps, and budget calculations are set out in the contracts between them.&lt;/p&gt;

&lt;p&gt;Once the contract is signed, a remote expert will be part of the parent company’s team responsible for the project. When the project is finished, you will no longer be involved in the project.&lt;/p&gt;

&lt;p&gt;There are different types of remote workers. One is a freelancer, the second is outsourcing, and the other is a dedicated development team. The difference is that you can hire a freelancer to do one thing. At the same time, a dedicated development team takes full responsibility for the project and usually functions as one unit. You can quickly compare these models in the table below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSdK4ybH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jz4by602x93mubgn91b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSdK4ybH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jz4by602x93mubgn91b.png" alt="Image description" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, each option has its strengths and weaknesses, and we recommend that you use them in different situations. However, we consider outsourcing to be the most affordable option in terms of price, quality, and effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-when-i-should-hire-dedicated-developers"&gt;
  &lt;/a&gt;
  2. When I Should Hire Dedicated Developers?
&lt;/h3&gt;

&lt;p&gt;The dedicated development team concept is often useful because it is a flexible outsourcing model that overcomes most of the shortcomings of freelancers, such as deadline issues and inadequate project communication. When hiring a development team, you never lose control of what’s happening in your project. You can easily track deadlines and project success, and even make significant changes to your project’s roadmap. However, this model is not always applicable to all types of business. Here are some areas and cases where the dedicated team model works perfectly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have a small digital department and you decide to create a software product to modernize your service model.&lt;/li&gt;
&lt;li&gt;Your business is based in a high-speed local digital growth area.&lt;/li&gt;
&lt;li&gt;If you cannot find an expert with the right skills and experience in your field.&lt;/li&gt;
&lt;li&gt;You need to double your efforts within a specific amount of time.&lt;/li&gt;
&lt;li&gt;You are a digital company, but every employee is involved in another project.&lt;/li&gt;
&lt;li&gt;Have a startup idea, but you don’t know how to implement it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-benefits-of-hire-dedicated-developers"&gt;
  &lt;/a&gt;
  3. Benefits of Hire Dedicated Developers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPpLBbBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/291jjgv2oc13aanstupv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPpLBbBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/291jjgv2oc13aanstupv.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complete control:&lt;/strong&gt;&lt;br&gt;
Hiring a dedicated team gives you complete control and freedom in your project and assigns tasks to your team. You can manage and integrate changes according to your work plan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Сost-Effective:&lt;/strong&gt;&lt;br&gt;
In general, almost all companies use outsourcing services from the most profitable regions. Therefore, reducing labor costs is an undeniable advantage of hiring a dedicated team to continue to work together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improve Project Outcomes:&lt;/strong&gt;&lt;br&gt;
The remote development team is dedicated to the project from start to finish. However, remote developers develop a well-defined structure from the beginning to get the project on track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time Saving:&lt;/strong&gt;&lt;br&gt;
Maximize the time in the hiring process for a dedicated team. You don’t have to deal with old paper documents or worry about organizational issues. All you need to do is focus on important tasks, communicate directly with dedicated developers, and follow their workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy to Handle:&lt;/strong&gt;&lt;br&gt;
A dedicated team is easy to work with. You need to assign a task, work on it accordingly, and let it know when your project is due to complete the task on time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt;&lt;br&gt;
Hiring a dedicated development team gives you flexibility in every aspect of your project. You strive to do it just for your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Constant Communication:&lt;/strong&gt;&lt;br&gt;
You can stay in touch with your team on an ongoing basis. If necessary, you can ask them to update their project on a regular basis or answer any questions they are worried about. Make sure you get the complete answer. In addition, they provide full support after the project is over. So this collaboration is worth it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-the-process-of-hiring-dedicated-developers"&gt;
  &lt;/a&gt;
  4. The Process of Hiring Dedicated Developers
&lt;/h3&gt;

&lt;p&gt;There are several ways to hire dedicated developers. And the general procedure for both is about the same.&lt;/p&gt;

&lt;p&gt;An important question to ask yourself is whether you are ready to find and hire a programmer directly or delegate the task to your service provider. The second course is less time-consuming and less risky, and the first course is cheaper. But let’s take a look at the entire pool of options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhRLS7a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbpxhk9ssqiw91mv1a3j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhRLS7a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbpxhk9ssqiw91mv1a3j.jpg" alt="Image description" width="768" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1#&lt;/strong&gt;  Request managed service provider&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2#&lt;/strong&gt; Contact software developers for recruitment based on recommendations&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3#&lt;/strong&gt;  Search for developers on specialized sites&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4#&lt;/strong&gt;  Investigate the workplace of developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5#&lt;/strong&gt;  Build contacts during meetings and professional events&lt;/p&gt;

&lt;p&gt;Read more from source URL: &lt;a href="https://www.anques.com/how-to-hire-dedicated-developers/"&gt;https://www.anques.com/how-to-hire-dedicated-developers/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hiredevelope</category>
      <category>tipstohiredeveloper</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Mistakes I made while learning Web Development as a beginner</title>
      <author>Harshit Aditya</author>
      <pubDate>Fri, 03 Dec 2021 12:42:58 +0000</pubDate>
      <link>https://dev.to/harshitaditya1/mistakes-i-made-while-learning-web-development-as-a-beginner-4m7n</link>
      <guid>https://dev.to/harshitaditya1/mistakes-i-made-while-learning-web-development-as-a-beginner-4m7n</guid>
      <description>&lt;p&gt;This blog is all about mistakes I made while learning Full Stack Web Development as a beginner. I started my Web Development journey in November 2020. I made a lot of mistakes in Web Development and realized it while learning throughout the year. I have been doing Web Development for the past 1 year and am still learning it. In this blog, I will be talking about some of the major mistakes I made while learning Web Development and also provide solutions for them so that you won't make these mistakes. My major mistakes include: &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#not-taking-breaks"&gt;
  &lt;/a&gt;
  Not taking breaks
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/RicRd3dDNQJM3fmkzt/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RicRd3dDNQJM3fmkzt/giphy.gif" alt="Breaks" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was very enthusiastic when learning Web Development in the beginning but I was not taking breaks after completing one part or portion of the course which I was following which broke my enthusiasm. Taking breaks is very important whether you are learning or building projects. If you are tired while learning then take a break and do it later when you feel free and energetic. If you got stuck in an error while building any project and you are trying to solve that issue for the last 2 to 4 hours then I would highly recommend leaving that problem and try to solve it the next day with a fresh mind. Most of the time I found that the very next day the issue or problem is solved.  This technique has worked with me 95% of the time. &lt;strong&gt;Working in a fresh mind and mood is very important. Do take breaks in an interval of time.&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cjKgv8Len6mwO0983e/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cjKgv8Len6mwO0983e/giphy.gif" alt="Breaks" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#not-building-projects"&gt;
  &lt;/a&gt;
  Not Building Projects
&lt;/h1&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbrufIrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1352965238388359169/VXfnxwaL_normal.jpg" alt="Harshit Aditya profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Harshit Aditya
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/harshitaditya1"&gt;@harshitaditya1&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Whenever you learn something in tech whether it's a programming language or a framework, do projects side by side this will help you to remember the concepts.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:05 AM - 13 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1392722604046176258" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1392722604046176258" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1392722604046176258" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 

&lt;p&gt;Building projects are very important while learning any tech stack. Building projects will make your concepts clear and memorable. I will highly suggest you to start building projects while and after learning any concepts. For example, if you are learning HTML and CSS then you can create many static websites, and also if you have completed JavaScript you can create a ton of new projects. If you are following any course then most probably you will also get projects to build but I will recommend you to also build projects separate from the courses. This will help you to learn and grab more things faster related to the tech stack you are learning. YouTube and blogs are some great resources where you can get awesome project ideas. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbrufIrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1352965238388359169/VXfnxwaL_normal.jpg" alt="Harshit Aditya profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Harshit Aditya
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/harshitaditya1"&gt;@harshitaditya1&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This was one of the main points I lack during learning Web Development. I learned frontend and backend but I didn't do any projects side by side due to which I forgot many concepts.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:05 AM - 13 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1392722605669457922" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1392722605669457922" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1392722605669457922" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#not-using-developer-tools"&gt;
  &lt;/a&gt;
  Not using Developer Tools
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Vhk9HwPx3TO0w/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Vhk9HwPx3TO0w/giphy.gif" alt="Mistakes" width="500" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was one the biggest mistake I committed with myself while learning Web Development. We can do a lot of things with Developer Tools. One of its features is that we can inspect our web app and find errors on it.  When I started building projects I faced two types of errors which are simple errors and internal errors. Simple errors include typing errors, missed semicolons, etc. Whereas internal errors are those which happens when you missed some important or major line of code or you typed it completely wrong. A simple error does not take much time to debug but an internal error takes a lot of time in debugging if we can't find where the problem is. Missing an import in React is an example of an internal error. I will also add a screenshot of an internal error that I faced while I was building a project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3KMjed6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s6hx325p25yy7d0gxfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3KMjed6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s6hx325p25yy7d0gxfn.png" alt="Internal Errors" width="880" height="521"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One of the internal error I faced while creating app in React &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer tools save a lot of time in debugging.&lt;/strong&gt; You can open Developer Tools in your browser by pressing Ctrl+Shift+I in windows and  ⌘ + ⌥ + I in Mac and start exploring the tools. There are various videos on YouTube where you can learn about Developer Tools and how to use them.    &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5LcLHRAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wcFnnxfA70g/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LcLHRAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wcFnnxfA70g/maxresdefault.jpg" alt="Chrome Developer Tools" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
Chrome Developer Tools



&lt;h1&gt;
  &lt;a href="#not-taking-help-from-internet-and-developer-communities"&gt;
  &lt;/a&gt;
  Not taking help from internet and developer communities
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6shqFJbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDh3wuQUcAAJnJI%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6shqFJbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDh3wuQUcAAJnJI%3Fformat%3Djpg%26name%3Dlarge" alt="Mistakes" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the mistakes I made in the beginning while learning Web Development is that I don't take help from the internet. If you are stuck in an error then do take help from Google and Stack Overflow. &lt;strong&gt;Googling is a very important skill.&lt;/strong&gt; You can also take help from documentation for additional reference. Also, I will recommend you to take help from Developer communities. You can get one on one guidance and doubt clearing in developer communities. Also in Developer communities, you get an opportunity to grow your network and collaborate with more like-minded folks for a project or hackathons.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xauBES4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEGMGvvVkAMXcCr%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xauBES4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEGMGvvVkAMXcCr%3Fformat%3Djpg%26name%3Dlarge" alt="Community" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;
Community FTW 💯🎉



&lt;p&gt;These are some of the major mistakes I made while learning Web Development as an absolute beginner. I hope that this will save you a lot of time while learning web development. &lt;strong&gt;Mistakes will always happen while developing or building projects and these mistakes will give you the experience to become a better developer so never get scared or tensed when an error or issue occurs instead think that you are going to learn something new.&lt;/strong&gt; At last, I would like to thank you for taking the time for reading this blog. Please comment and do express your thoughts on this blog. If you have any queries regarding this blog, Web Development, etc. then feel free to contact me on Twitter (&lt;a href="https://twitter.com/HarshitAditya1"&gt;@HarshitAditya1&lt;/a&gt;). I am highly active on Twitter and I would be happy to solve your queries and have a conversation with you.    &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/m2WQBH7DhSdgLfnTUi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/m2WQBH7DhSdgLfnTUi/giphy.gif" alt="Thank You" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Geolocation with Postgresql+Nestjs+Typeorm</title>
      <author>Ronny Medina</author>
      <pubDate>Fri, 03 Dec 2021 12:41:13 +0000</pubDate>
      <link>https://dev.to/ronnymedina/geolocation-with-postgresqlnestjstypeorm-1lc9</link>
      <guid>https://dev.to/ronnymedina/geolocation-with-postgresqlnestjstypeorm-1lc9</guid>
      <description>&lt;p&gt;Hi everyone. It's been a long time since I last posted something.&lt;/p&gt;

&lt;p&gt;Some time ago I needed create an application that using geolocation to find ads nearby. &lt;/p&gt;

&lt;p&gt;In my search, I take the easy solution which was to use Firebase.&lt;/p&gt;

&lt;p&gt;Integration was easy because it was a new project. I did some testing and this worked great. I don't have much experience with &lt;code&gt;Firebase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some problems I had were the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try modeling tables in &lt;code&gt;Firebase&lt;/code&gt; collections.&lt;/li&gt;
&lt;li&gt;Thinking about the cost.&lt;/li&gt;
&lt;li&gt;Difficulty trying to query multiple related collections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I had more experience with Firebase this would be easy for me, but it is not the case.&lt;/p&gt;

&lt;p&gt;So I found another solution that I think is easy to integrate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postindustria.com/postgresql-geo-queries-made-easy/"&gt;Geo postgresql&lt;/a&gt;. You can visit the original publication and see in more detail all the explanations.&lt;/p&gt;

&lt;p&gt;I did an example with &lt;a href="https://github.com/ronnymedina/geolocalizacion-con-postgresql-and-nodejs"&gt;Nestjs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can download this repository and run &lt;code&gt;docker-compose up -d&lt;/code&gt;, this should get the server up. And you can access url &lt;code&gt;/docs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope this publication is helpful to you. I made a video tutorial in Spanish.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yK8wK2O7Ge0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What are Snippets in VSCode?</title>
      <author>Mohammad Reza Ghasemi</author>
      <pubDate>Fri, 03 Dec 2021 12:40:22 +0000</pubDate>
      <link>https://dev.to/mrghasemi1992/what-are-snippets-in-vscode-1cfp</link>
      <guid>https://dev.to/mrghasemi1992/what-are-snippets-in-vscode-1cfp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Code snippets are templates that make it easier to enter repeating code patterns, such as loops or conditional-statements. (&lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets"&gt;Visual Studio Code&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, in JavaScript, instead of inserting &lt;code&gt;console.log(’Hello World…’)&lt;/code&gt; you can use VSCode built-in snippet &lt;code&gt;log&lt;/code&gt; by inserting it, then press the tab button to show that entirely on the editor. There are many other built-in snippets on the VSCode that you can use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Press &lt;code&gt;shift+cmd+p&lt;/code&gt; in Mac or &lt;code&gt;shift+ctrl+p&lt;/code&gt; in Windows to open the Command Palette.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert Insert Snippet command in the Command Palette to get a list of the snippets for the language of the current file, then press the enter button to see them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;blockquote&gt;
&lt;p&gt;Many &lt;a href="https://code.visualstudio.com/docs/editor/extension-marketplace"&gt;extensions&lt;/a&gt; on the &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;VS Code Marketplace&lt;/a&gt; include snippets. You can search for extensions that contain snippets in the Extensions view (&lt;code&gt;shift+cmd+x&lt;/code&gt; in Mac or &lt;code&gt;shift+ctrl+x&lt;/code&gt; in Windows) using the &lt;code&gt;@category:"snippets"&lt;/code&gt; filter. (&lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_install-snippets-from-the-marketplace"&gt;Visual Studio Code&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-your-own-snippets"&gt;
  &lt;/a&gt;
  How to create your own snippets?
&lt;/h2&gt;

&lt;p&gt;I’m working with React, and there is a popular snippet extension for React on the VS Code Marketplace, but most of its snippets are useless for me. So I prefer to create my own snippets instead.&lt;/p&gt;

&lt;p&gt;I want to create a React TypeScript component snippet which takes its name from the file name:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the Command Palette by pressing &lt;code&gt;shift+cmd+p&lt;/code&gt; in Mac or &lt;code&gt;shift+ctrl+p&lt;/code&gt; in Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert &lt;code&gt;configure user snippets&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the language for which the snippets &lt;br&gt;
should appear.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, to create a snippet for a React &lt;br&gt;
TypeScript file, choose &lt;code&gt;typescriptreact&lt;/code&gt; then press the enter button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VSCode will open a &lt;code&gt;***.json&lt;/code&gt; (&lt;code&gt;typescriptreact.json&lt;/code&gt; for the previous selection).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert the below attribute on the &lt;code&gt;***.json&lt;/code&gt; (&lt;code&gt;typescriptreact.json&lt;/code&gt;) object:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React Arrow Function Component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prefix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trafc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type Props = {};&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;const $TM_FILENAME_BASE = ({}: Props) =&amp;gt; {&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;};&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;export default $TM_FILENAME_BASE;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Create TypeScript React arrow function component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;You can use &lt;code&gt;trafc&lt;/code&gt; snippet for React TypeScript file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I want to describe what the above code says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“React Arrow Function Component” is the snippet name. It is displayed via IntelliSense if no &lt;code&gt;description&lt;/code&gt; is provided.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt; is the snippet that we can use on the VSCode to display the &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;body&lt;/code&gt; is an array of strings consisting of the code we want to be displayed via the &lt;code&gt;prefix&lt;/code&gt; snippet. Every line of our codes should be placed in a string. If you need to use enter character type &lt;code&gt;\n&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;description&lt;/code&gt; as its name shows is the description of our snippet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Another example is to create a ‍‍&lt;code&gt;console.log&lt;/code&gt; with a description like &lt;code&gt;console.log("status:", status)&lt;/code&gt;. The snippet configuration is shown in the below section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console.log with description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prefix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console.log('${1:desc}:', ${1:desc})&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Insert a console.log() with description as the           same as the variable.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The new thing is the &lt;code&gt;${1:desc}&lt;/code&gt;. The &lt;code&gt;1&lt;/code&gt; means after you insert the snippet, the cursor will be placed on that position.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;desc&lt;/code&gt; means these two parts should be the same in order to VSCode type them simultaneously. For more information &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets"&gt;check this link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>snippet</category>
      <category>react</category>
      <category>typescript</category>
    </item>
    <item>
      <title>React</title>
      <author>Doordashcon</author>
      <pubDate>Fri, 03 Dec 2021 12:38:56 +0000</pubDate>
      <link>https://dev.to/doordashcon/react-2ini</link>
      <guid>https://dev.to/doordashcon/react-2ini</guid>
      <description>&lt;p&gt;All our handlers have been created, now it's time to connect our server to the client.&lt;br&gt;
Remember including &lt;a href="https://docs.rs/actix-cors/0.5.3/actix_cors/struct.Cors.html#method.permissive"&gt;&lt;code&gt;Cors::permissive()&lt;/code&gt;&lt;/a&gt; as one of the middle ware services available for the server, this will enable our client connect to the server. Also keep in mind that this particular way of granting access to an external service is only for development, &lt;a href="https://docs.rs/actix-cors/0.5.3/actix_cors/struct.Cors.html#example"&gt;&lt;code&gt;Cors::default()&lt;/code&gt;&lt;/a&gt; is the standard for production.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-client"&gt;
  &lt;/a&gt;
  Create Client
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# run the setup command&lt;/span&gt;
npx create-reat-app client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Delete the following files in the &lt;code&gt;src&lt;/code&gt; &amp;amp; &lt;code&gt;public&lt;/code&gt; directory except.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/App.js&lt;/code&gt;&lt;br&gt;
&lt;code&gt;src/index.js&lt;/code&gt;&lt;br&gt;
&lt;code&gt;src/reportWebVitals.js&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/index.html&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/favicon.ico&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/manifest.json&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/robot.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update the following files, as seen on the repo&lt;br&gt;
&lt;a href="https://github.com/Doordashcon/rust-server-react-client/blob/master/client/public/index.html"&gt;&lt;code&gt;public/index.html&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Doordashcon/rust-server-react-client/blob/master/client/public/manifest.json"&gt;&lt;code&gt;public/manifest.json&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Doordashcon/rust-server-react-client/blob/master/client/src/index.js"&gt;&lt;code&gt;src/index.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-axios"&gt;
  &lt;/a&gt;
  Using Axios
&lt;/h3&gt;

&lt;p&gt;In this context axios is used to send request from our JavaScript client to our Rust server and also receive response from our Rust server to our JavaScript client, install &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a new file in the src directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/config.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INVITATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8080/api/invitation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REGISTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8080/api/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FOMO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8080/api/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each constant variable represent routes for request handlers we previously defined.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;src/App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;INVITATION&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;REGISTER&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FOMO&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invitation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;INVITATION&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;doordashcon@gmaill.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="na"&gt;withCredentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;REGISTER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pikachu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="na"&gt;withCredentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fomo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;FOMO&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;doordashcon@gmaill.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pikachu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;withCredentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;invitation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Invitation&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&amp;lt;br /&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;register&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fomo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;fomo&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>rust</category>
    </item>
    <item>
      <title>Full Stack Interview Help</title>
      <author>Medam Mahesh</author>
      <pubDate>Fri, 03 Dec 2021 12:36:53 +0000</pubDate>
      <link>https://dev.to/memahesh/full-stack-interview-help-1g4h</link>
      <guid>https://dev.to/memahesh/full-stack-interview-help-1g4h</guid>
      <description>&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;I have a Interview with Full Stack which requires NodeJS and ReactJs next weekend. I have worked with them for Freelance projects up until a year ago.&lt;/p&gt;

&lt;p&gt;The interview has pair coding round it seems. Now, I want to know the &lt;strong&gt;best coding practices to used for let's say a MERN stack&lt;/strong&gt; application. Any good open source projects for coding practices will be helpful.&lt;/p&gt;

&lt;p&gt;Also a good resource for interview questions preparation will be very helpful.&lt;/p&gt;

&lt;p&gt;Thanks in advance,&lt;/p&gt;

</description>
      <category>help</category>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>OAuth2 Authentication with API Gateway in a Distributed Environment</title>
      <author>znaczek</author>
      <pubDate>Fri, 03 Dec 2021 12:36:37 +0000</pubDate>
      <link>https://dev.to/sonalake/oauth2-authentication-with-api-gateway-in-a-distributed-environment-2ik8</link>
      <guid>https://dev.to/sonalake/oauth2-authentication-with-api-gateway-in-a-distributed-environment-2ik8</guid>
      <description>&lt;p&gt;Recently I was involved in a project in which the application was structured as a group of microservices. Users were interacting with the system through a web portal. The challenge we were facing was to prepare a tailored solution that would allow users to easily authenticate across the multiple components of the system.&lt;/p&gt;

&lt;p&gt;A lot has been written about distributed systems, as well as OAuth2, API gateways and Kubernetes separately. But when I was looking for ways to combine these technologies to build an end-to-end solution, I found that they are mostly described in isolation from other parts of the system. That’s why I decided to do a small experiment and find an elegant way to authenticate within this specific infrastructure.&lt;/p&gt;

&lt;p&gt;If you ever get a similar challenge, I hope that this will show you an example of integrating systems that don’t necessarily show you an easy way to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;Before jumping straight to the project, let’s take a look at the specifics of the environment I was working with. You’ll need these if you try to reproduce the solution:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Kubernetes as an orchestration platform for the distributed environment.&lt;/li&gt;
&lt;li&gt; Users managed by an identity provider (IDP) following OAuth2/OIDC specification (e.g. Keycloak, Azure Active Directory etc.).&lt;/li&gt;
&lt;li&gt; Backend services authenticate/authorize users using stateless access token added to the request as Authorization header.&lt;/li&gt;
&lt;li&gt; AGW is the client application in OAuth2 terminology. In case the frontend needs data about authenticated users, it gets it from AGW.&lt;/li&gt;
&lt;li&gt; Session timeout – access to the system is denied after a given period of time since the last request.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#solution-overview"&gt;
  &lt;/a&gt;
  Solution overview
&lt;/h2&gt;

&lt;p&gt;This diagram shows the relationships between the individual components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZSXKmPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZSXKmPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-1.png" alt="Kubernetes OAuth2 " width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s follow the request path (red arrows). Once a client browser reaches the K8s cluster, it enters the system through Kubernetes’ specialized load balancer, the Ingress controller, which in our case is implemented with Nginx. As we can see, all traffic goes through AGW. A natural consequence is that all routing happens inside AGW.&lt;/p&gt;

&lt;p&gt;We can see two streams of calls to IDP (the black arrows on the diagram). The first, coming out of AGW, is responsible for driving the authentication process which consists of acquiring the token and refreshing it within the requests so it doesn’t timeout. Additionally, AGW adds a login page URL (as a header) to unauthenticated requests to allow the client to start authentication. That’s the only small bit of FE participation in the authentication process.&lt;/p&gt;

&lt;p&gt;Why couldn’t AGW just send a redirect itself and mention the redirect location in a header? Because we are talking here about API calls only (which in a browser are XMLHttpRequest, not browser top-level navigation), we return 401 for unauthenticated requests, hence the browser won’t do top-level redirection based on these calls.&lt;/p&gt;

&lt;p&gt;The second stream coming out from the microservices is fetching public keys for token validation. We will take a closer look at that later on a sequence diagram.&lt;/p&gt;

&lt;p&gt;It is worth mentioning that AGW doesn’t authenticate requests. Someone could ask “why”, as authentication is very often associated with API gateways. Well, based on the above we can say that AGW drives the authentication, knows how to authenticate users, can acquire a token for a user (after user consent is given), but doesn’t authenticate the requests going through it. The reason behind this approach is that some of the services are protected, and some are public. Even in a single service, sometimes only a couple of endpoints could be protected instead of each one of them. That’s why I left the authentication/authorization of requests to the specific services. The implementation of course doesn’t prevent us from doing authentication also in AGW. It’s just a matter of choice.&lt;/p&gt;

&lt;p&gt;AGW (as we will see in the next section) is backed with &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;spring-security-oauth2-client&lt;/strong&gt;&lt;/em&gt;. In this setup, the user session is kept inside the AGW. On the other hand, AGW is a regular Kubernetes deployment, which means that it can be evicted, restarted, scaled up and down at any time. That’s why we need a distributed session that persists throughout the service lifecycle. I decided to use a Redis backed WebSession.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-details"&gt;
  &lt;/a&gt;
  Implementation details
&lt;/h2&gt;

&lt;p&gt;In order to keep this clear and easy to read, I will focus only on the most important building blocks. If you’d like to see the full source code, you &lt;a href="https://github.com/sonalake/k8s-agw-oauth2"&gt;can find it on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project consists of three components; two Java modules and a client portal. The first Java module named &lt;em&gt;&lt;strong&gt;&lt;code&gt;agw&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is the AGW component, and the second called &lt;em&gt;&lt;strong&gt;&lt;code&gt;customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is a BE microservice. Under the &lt;em&gt;&lt;strong&gt;&lt;code&gt;portal&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; directory we will find a React app that serves as a FE client.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#agw"&gt;
  &lt;/a&gt;
  AGW
&lt;/h3&gt;

&lt;p&gt;Let’s start with the dependencies. If we look inside &lt;em&gt;&lt;strong&gt;build.gradle&lt;/strong&gt;&lt;/em&gt;, we will find a few crucial dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-boot-starter-oauth2-client&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; provides all the security mechanisms around OAuth2&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-cloud-starter-gateway&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is the spring implementation of gateway functionality, e.g. routing, enhancing the requests via filters etc.&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; together with &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-session-data-redis&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; provide the distributed session functionality backed with Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we look at the application properties, we will find two especially interesting sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring.security.oauth2.client&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; – the configuration of OAuth2 client that the spring security will consume, for development purposes I used Keycloak as IDP (check README file in the source code for more reference)&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring.cloud.gateway&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; configures static routing rules and default filters. The first route exposes jwks-uri as an internal Kubernetes endpoint and the next two are rules for routing traffic to the portal and the customers service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s go through the code. We shall start from spring security configuration, as most of the functionality of this component relies on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;SecurityWebFilterChain&lt;/span&gt; &lt;span class="nf"&gt;springSecurityFilterChain&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ServerHttpSecurity&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;formLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ServerHttpSecurity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FormLoginSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authorizeExchange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;     &lt;span class="c1"&gt;//1&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyExchange&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;permitAll&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;oauth2Login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authorizedClientRepository&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorizedClientRepository&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;   &lt;span class="c1"&gt;//2&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticationSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authenticationSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//3&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticationFailureHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authenticationFailureHandler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//4&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;    
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logoutSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logoutSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;// 5&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;csrf&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s look at what this does, other than some basic configuration:&lt;/p&gt;

&lt;p&gt;1) As mentioned earlier, AGW doesn’t authenticate requests, so we permit all of them.&lt;/p&gt;

&lt;p&gt;2) We need to make spring security work with a distributed session. Almost all classes that store some data are leveraging WebSession. Only the ServerOAuth2AuthorizedClientRepository needs to be defined to use the WebSession backed solution.&lt;/p&gt;

&lt;p&gt;3), 4), 5) Minor behaviours customisation in case of login success/failure and logout, mainly redirecting to the right place in the app after these actions complete.&lt;/p&gt;

&lt;p&gt;We also add 2 filters in the filters package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;Global401Filter&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; – when downstream service returns 401 it adds login page URL in &lt;em&gt;&lt;strong&gt;&lt;code&gt;X-auth-entrypoint&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; header to allow the caller client to navigate the user to it.&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;SessionFilter&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; – spring maintains the session itself, but it doesn’t expose session expiration to the requests, that’s why we calculate the expiration and add it as a cookie to every request so that the client app can react to it to improve user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The controller package exposes the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/whoami&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; endpoint that a client app can call to figure out whether the user is authenticated or not. If the user is authenticated, the endpoint returns status 200 with the user details payload. Otherwise, 401 status is returned with the login page URL in a header.&lt;/p&gt;

&lt;p&gt;At this point, let’s discuss the idea behind the above setup. &lt;em&gt;&lt;strong&gt;spring-security&lt;/strong&gt;&lt;/em&gt; will handle everything related to authentication, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  redirecting to the IDP login page after user reaches &lt;em&gt;&lt;strong&gt;&lt;code&gt;/oauth2/authorization/&amp;lt;client-registration-name&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; where – in our case – the registration name is &lt;em&gt;&lt;strong&gt;&lt;code&gt;iam&lt;/code&gt;&lt;/strong&gt;,&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  performing the OAuth2 authorization code exchange and automatically refreshing the access token,&lt;/li&gt;
&lt;li&gt;  storing users authentication details data in the session,&lt;/li&gt;
&lt;li&gt;  clearing the session on logout.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The session is persisted between requests using a SESSION cookie containing the session id. No other sensitive data (like OAuth token) is exposed to the frontend.&lt;/p&gt;

&lt;p&gt;One of the &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; functionalities is routing traffic to the underlying services. A TokenRelay filter will also extract the access token stored in the user session and add it to outgoing requests as an &lt;em&gt;&lt;strong&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; header. That allows downstream services to authenticate the request.&lt;/p&gt;

&lt;p&gt;If the client app wants to authenticate the user, it can call the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/whoami&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; endpoint. Based on the result it can perform any operation it wants (e.g. redirecting to the login page to start the authentication process). AGW doesn’t force any client behaviour, it only exposes the necessary data to perform authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-customers-microservice"&gt;
  &lt;/a&gt;
  The ‘customers’ microservice
&lt;/h3&gt;

&lt;p&gt;As stated in the requirements, BE microservices should do the authentication/authorization. We achieve that by using &lt;em&gt;&lt;strong&gt;&lt;code&gt;org.springframework.boot:spring-boot-starter-oauth2-resource-server&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;. To make it work, we need two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  In application properties under the &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring.security.oauth2.resourceserver.jwt.jwk-set-uri&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; key, we define a URL under which the public keys are available,&lt;/li&gt;
&lt;li&gt;  when configuring &lt;em&gt;&lt;strong&gt;&lt;code&gt;HttpSecurity&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, we enable the JWT resource server like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt;
  &lt;span class="err"&gt;…&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;oauth2ResourceServer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jwtAuthenticationConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jwtAuthenticationConverter&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;em&gt;&lt;strong&gt;&lt;code&gt;jwtAuthenticationConverter\&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is responsible for converting token claims to &lt;em&gt;&lt;strong&gt;&lt;code&gt;Collection&amp;lt;GrantedAuthority&amp;gt;\&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;. We store the roles as a comma-separated list in one of the user claims.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#portal"&gt;
  &lt;/a&gt;
  Portal
&lt;/h3&gt;

&lt;p&gt;As mentioned above, the portal isn’t too involved in the authentication process. However, there are a few points that are worth highlighting.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;&lt;strong&gt;&lt;code&gt;src/index.tsx&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, before the application starts, we call &lt;em&gt;&lt;strong&gt;&lt;code&gt;/whoami&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; (endpoint already discussed in the AGW section) and store the result for later usage. Once the user reaches the protected section of the app, which technically means entering an &lt;em&gt;&lt;strong&gt;src/AppInternal.tsx&lt;/strong&gt;&lt;/em&gt; component, the component will consume the &lt;em&gt;&lt;strong&gt;whoami&lt;/strong&gt;&lt;/em&gt; call result and it will either let the user in or redirect the user to the login page.&lt;/p&gt;

&lt;p&gt;To improve the user experience, we store the page URL when the &lt;em&gt;&lt;strong&gt;whoami&lt;/strong&gt;&lt;/em&gt; call returns 401. Then, after the user comes back authenticated, we can redirect the user back to the stored URL.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;em&gt;&lt;strong&gt;&lt;code&gt;src/components/session/Session.tsx&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; component will track the session expiration. It consumes the session expiration stored in the cookie set by the AGW. If the session is about to finish, the user gets notified with a pop-up. When the session expires, the user is logged out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sequence-diagram"&gt;
  &lt;/a&gt;
  Sequence diagram
&lt;/h2&gt;

&lt;p&gt;Let’s see what an example user scenario would look like. We assume that the user hasn’t been authenticated yet. The user wants to see the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; page. If we have looked at the portal behaviour for &lt;em&gt;&lt;strong&gt;&lt;code&gt;/customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; we would also notice that for an authenticated user, it will try to fetch data from the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/api/customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--po87EZPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--po87EZPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-2.png" alt="" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;As we can see, this is not a complicated setup. It’s just a bit of configuration. The &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;spring-security-oauth2-client&lt;/strong&gt;&lt;/em&gt; libraries put together cover the claimed requirements almost out of the box. However, to correctly understand the capabilities of these libraries, I had to spend some time going through their source code.&lt;/p&gt;

&lt;p&gt;Additionally, due to the fact that &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; is implemented using Spring WebFlux, it should by definition provide better resource utilisation. I strongly recommend looking at &lt;a href="https://spring.io/projects/spring-cloud"&gt;Spring Cloud&lt;/a&gt; solutions for any cloud-related topic.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>microservices</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
