<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>An introduction to Three.js</title>
      <author>Santosh Arron</author>
      <pubDate>Fri, 22 Oct 2021 15:53:33 +0000</pubDate>
      <link>https://dev.to/santosharron/an-introduction-to-threejs-4hoh</link>
      <guid>https://dev.to/santosharron/an-introduction-to-threejs-4hoh</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is Three.js?&lt;/strong&gt;&lt;br&gt;
Three.js is a library to make WebGL easier. Oh… OK then…? So, the next question is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is WebGL?&lt;/strong&gt;&lt;br&gt;
WebGL is an API. It lets you access a computer’s specialised graphics hardware using JavaScript, and render the output to a webpage in a regular old  element. Before WebGL, access to that specialised hardware was only really doable with desktop software. The browser was stuck in 2D town (excluding third-party plug-ins such as Adobe Flash).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why would I want to access the graphics hardware?&lt;/strong&gt;&lt;br&gt;
The short answer is to draw stuff in 3D, and for raw power, even in 2D.&lt;/p&gt;

&lt;p&gt;In a computer (I’m talking desktops, laptops and your smartphone) there are two parts that actually compute stuff: the Central Processing Unit (CPU), used for most things, and the specialised graphics hardware, called the Graphics Processing Unit (GPU). The problem is CPUs just aren’t fast enough to do the sheer number of calculations needed in a lot of real-time 3D graphics (computer games are a good example), especially while trying to run the rest of the computer at the same time. The GPU is designed to take on these graphics calculations instead, and does so amazingly well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do I need Three.js if we are actually writing WebGL?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main reason to use a library when working with WebGL is the huge amount of code needed to do anything otherwise.&lt;/p&gt;

&lt;p&gt;Here’s an example to illustrate the difference. We’ll compare the code needed to draw a couple of simple scenes. Don’t worry about understanding the code, but look at how much code WebGL involves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CubeGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshNormalMaterial&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CanvasRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.02&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Three.js does a lot of the repetitive bits for you: internally it’s generating WebGL code while exposing a simpler API. Three.js also has pre-built components and helper methods you can take advantage of to get started faster.&lt;/p&gt;

&lt;p&gt;It’s worth noting Three.js is not the only JavaScript library to make WebGL easier. For example, &lt;a href="https://greensock.com/gsap"&gt;Greensock&lt;/a&gt;, &lt;a href="https://playcanvas.com/"&gt;PlayCanvas&lt;/a&gt; and &lt;a href="http://www.pixijs.com/"&gt;Pixi.js&lt;/a&gt; all offer the benefits of WebGL without actually writing WebGL. I think Three.js is a better choice for learning 3D however as the library has fewer distractions and is focused on one thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where can I use Three.js?&lt;/strong&gt;&lt;br&gt;
You can use Three.js in any way you could use , including full-screen animations, so long as the device supports WebGL.&lt;/p&gt;

&lt;p&gt;All the latest browsers support WebGL, but if you want to use Three.js on a client project, you’ll need to weigh up the lack of support in earlier versions of Internet Explorer and Android. See &lt;a href="https://caniuse.com/#feat=webgl"&gt;Can I use&lt;/a&gt; for details.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oy9EOOVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodgrvkpql36hglquwks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oy9EOOVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodgrvkpql36hglquwks.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a Cool Project😎 From Epic Programmer.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DFI9FQ93zLI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>10+ Must-have VSCode Extensions for React Developers</title>
      <author>Elijah Trillionz</author>
      <pubDate>Fri, 22 Oct 2021 15:29:18 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/10-must-have-vscode-extensions-for-react-developers-nfk</link>
      <guid>https://dev.to/elijahtrillionz/10-must-have-vscode-extensions-for-react-developers-nfk</guid>
      <description>&lt;p&gt;Extensions in VSCode are one of the things that makes VSCode so special. So let's see some of these extensions that will be of help to you as you work with ReactJS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-es7-reactreduxgraphqlreactnative-snippets"&gt;
  &lt;/a&gt;
  1. ES7 React/Redux/GraphQL/React-Native snippets
&lt;/h3&gt;

&lt;p&gt;A simple extension for React and redux snippets.&lt;/p&gt;

&lt;p&gt;Installs: 3.7 million+.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-prettier"&gt;
  &lt;/a&gt;
  2. Prettier
&lt;/h3&gt;

&lt;p&gt;Prettier formats your code. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/p&gt;

&lt;p&gt;Prettier has support for JavaScript, TypeScript, JSX.&lt;/p&gt;

&lt;p&gt;Installs: 15.9 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-auto-rename-tag"&gt;
  &lt;/a&gt;
  3. Auto Rename Tag
&lt;/h3&gt;

&lt;p&gt;Because you will always work with tags in React, one must-have extension is auto rename tag.&lt;/p&gt;

&lt;p&gt;It automatically renames paired HTML/XML tags, with support for JSX&lt;/p&gt;

&lt;p&gt;Installs: 6.8 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-eslint"&gt;
  &lt;/a&gt;
  4. ESlint
&lt;/h3&gt;

&lt;p&gt;Eslint analyses your code to find problems and provide an automatic fix (most cases).&lt;/p&gt;

&lt;p&gt;Installs: 16.8 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-gitlens"&gt;
  &lt;/a&gt;
  5. GitLens
&lt;/h3&gt;

&lt;p&gt;GitLens supercharges the Git capabilities built into VSCode.&lt;/p&gt;

&lt;p&gt;Quickly glimpse into whom, why, and when a line or code block was changed.&lt;/p&gt;

&lt;p&gt;Installs: 11.2 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-vscodestyledcomponents"&gt;
  &lt;/a&gt;
  6. Vscode-styled-components
&lt;/h3&gt;

&lt;p&gt;Vscode styled-components is a must-have extension for working with styled-components in react.&lt;/p&gt;

&lt;p&gt;It provides CSS syntax highlighting and IntelliSense in styled-components.&lt;/p&gt;

&lt;p&gt;Installs: 950k+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-typescript-react-code-snippets"&gt;
  &lt;/a&gt;
  7. Typescript React code snippets
&lt;/h3&gt;

&lt;p&gt;Typescript React code snippets provide a good number of snippets for working with typescript and react. Supports for only TSX or ts.&lt;/p&gt;

&lt;p&gt;Installs: 176k+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=infeng.vscode-react-typescript"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-better-comments"&gt;
  &lt;/a&gt;
  8. Better comments
&lt;/h3&gt;

&lt;p&gt;Better comments is a customixable extension that makes your comments human-friendly by categorizing annotations into alerts, todos, information, and so much more.&lt;/p&gt;

&lt;p&gt;Installs: 2.2 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-git-history"&gt;
  &lt;/a&gt;
  9. Git History
&lt;/h3&gt;

&lt;p&gt;Git History helps you easily view git log, file history, compare branches or commits.&lt;/p&gt;

&lt;p&gt;Installs: 4.7 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-import-const"&gt;
  &lt;/a&gt;
  10. Import const
&lt;/h3&gt;

&lt;p&gt;It will display inline in the editor the size of the imported package.&lt;/p&gt;

&lt;p&gt;Installs: 1.3 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-vscode-react-refactor"&gt;
  &lt;/a&gt;
  11. Vscode React refactor
&lt;/h3&gt;

&lt;p&gt;Vscode React refactor recomposes your JSX, TSX. Works with arrow functions.&lt;/p&gt;

&lt;p&gt;Installs: 59k+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=planbcoding.vscode-react-refactor"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-turbo-console-log"&gt;
  &lt;/a&gt;
  12. Turbo console log
&lt;/h3&gt;

&lt;p&gt;It simply automates the process of writing meaningful log messages.&lt;/p&gt;

&lt;p&gt;Installs: 325k+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-material-icons"&gt;
  &lt;/a&gt;
  13. Material icons
&lt;/h3&gt;

&lt;p&gt;It styles your file and folder icons. It is customizable.&lt;/p&gt;

&lt;p&gt;Installs: 9.5 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-code-spell-checker"&gt;
  &lt;/a&gt;
  14. Code spell checker
&lt;/h3&gt;

&lt;p&gt;This extension is a basic spell checker that works well with camelCase.&lt;/p&gt;

&lt;p&gt;Installs: 3.3 million+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-wakatime"&gt;
  &lt;/a&gt;
  15. WakaTime
&lt;/h3&gt;

&lt;p&gt;WakaTime is an open-source extension for metrics, insights, and time tracking automatically generated from your programming activity.&lt;/p&gt;

&lt;p&gt;Installs: 519k+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime"&gt;Install here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, that's the end of the list. I believe each one of these extensions can be of great help to you. So enjoy.&lt;br&gt;
Thanks for reading. Leave a comment for me to let me know what you think or if I miss an extension.&lt;/p&gt;

&lt;p&gt;Also, follow me on Twitter &lt;a href="https://twitter.com/elijahtrillionz"&gt;@elijahtrillionz&lt;/a&gt; for daily tweets on web development resources and tips.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Do Quantum Computers Challenge the Future of Cryptography?</title>
      <author>jack jack</author>
      <pubDate>Fri, 22 Oct 2021 15:12:29 +0000</pubDate>
      <link>https://dev.to/jackjack/how-do-quantum-computers-challenge-the-future-of-cryptography-4aek</link>
      <guid>https://dev.to/jackjack/how-do-quantum-computers-challenge-the-future-of-cryptography-4aek</guid>
      <description>&lt;p&gt;Quantum computers are powerful machines that can solve very complex equations much faster than ordinary computers. The speed of these computers is such that some experts believe that breaking the cryptography that takes thousands of years with today's computers with the help of quantum computers will take only a few minutes. As a result, much of today's digital security infrastructure could be compromised. This includes cryptocurrencies and bitcoins.&lt;/p&gt;

&lt;p&gt;You can read more about the differences between quantum computers and conventional computers and their dangers for digital currencies and digital infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asymmetric-encryption-and-internet-security"&gt;
  &lt;/a&gt;
  Asymmetric encryption and Internet security
&lt;/h2&gt;

&lt;p&gt;Asymmetric cryptography, or public-key cryptography, is an essential component of the cryptographic ecosystem and major Internet infrastructure. This method relies on a key pair to encrypt and decrypt information—a public key for encryption and a private key for decryption. In contrast, symmetric key encryption uses only one key to encrypt and decrypt data.&lt;/p&gt;

&lt;p&gt;An unrestricted, public key can be shared and used to encrypt information. This encrypted information will only be decrypted with the corresponding private key. In such cases, you can be sure that only the intended recipient can access the encrypted data.&lt;/p&gt;

&lt;p&gt;One of the main advantages of asymmetric encryption is exchanging information without having to share a shared key in an unreliable channel. Without this vital capability, it is impossible to maintain basic information on the Internet. Imagine online banking without the ability to encrypt communication between parties securely. In such cases, anyone can access the person's account only by having the card number.&lt;/p&gt;

&lt;p&gt;Part of asymmetric cryptographic security is based on the assumption that the critical pair generating algorithm makes it extremely difficult to identify and build a private key from a public key while placing a public key from a private key is very simple. This function is called a trapdoor in mathematics because it is easy to calculate in one direction but complex in the other.&lt;/p&gt;

&lt;p&gt;Most modern algorithms used to generate key pairs (public and private keys) are based on trapdoor functions. Trapdoor functions are known to be challenging to decode. It is challenging for existing computers to crack these passwords. Performing these calculations and decoding is considerably time-consuming, even for the most powerful machines.&lt;/p&gt;

&lt;p&gt;However, things may soon change with the development of new computing systems known as quantum computers. To understand why quantum computers are so powerful, let's first look at how ordinary computers work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classic-or-ordinary-computers"&gt;
  &lt;/a&gt;
  Classic or ordinary computers
&lt;/h2&gt;

&lt;p&gt;The computers we deal with today can be called classic computers. This means that computational tasks in this type of computer are performed sequentially; First, a computational study is conducted and completed, then another study can be started. This is because the memory in a classic computer must follow the physics laws and can only have a state of 0 or 1.&lt;/p&gt;

&lt;p&gt;Various hardware and software methods allow computers to break down complex computations into smaller parts, thus improving efficiency. However, the basis of computer work is not much different. One computational task must be completed before another can be started.&lt;/p&gt;

&lt;p&gt;To understand more, consider the following example:&lt;/p&gt;

&lt;p&gt;This is where the computer is supposed to guess a 4-bit key. Every 4 bits can be 0 or 1. As shown in the table, there are 16 possible combinations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQVEICKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9ujhn9sz22kyo2wewdi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQVEICKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9ujhn9sz22kyo2wewdi.gif" alt="16 possible combinations in 4 bit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A classical computer must guess each combination separately. Imagine you have a lock and 16 keys on a keychain. Each of the 16 keys must be tested independently. If the first key does not unlock, you can go to the following key and try the next key to open it.&lt;/p&gt;

&lt;p&gt;As the length of the critical string increases, the number of possible compounds grows exponentially. In the example above, adding an extra bit to increase the necessary string length to 5 bits results in 32 possible combinations. Raising it to 6 bits results in 64 possible combinations. At 256 bits, the number of potential compounds is close to the estimated number of atoms worldwide.&lt;/p&gt;

&lt;p&gt;Computational processing speed, on the other hand, grows only linearly. Doubling a computer's processing speed will only double the number of guesses made at a given time. Exponential growth will far outweigh any linear progression in guessing.&lt;/p&gt;

&lt;p&gt;Therefore, it is said that a classical computing system takes thousands of years to guess a 55-bit key. While the minimum recommended size for a bitcoin core is 128 bits, wallets have implemented 256 bits.&lt;/p&gt;

&lt;p&gt;Traditional computing does not seem to threaten asymmetric encryption, so digital currencies and the Internet infrastructure are safe from classical computing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quantum-computers"&gt;
  &lt;/a&gt;
  Quantum Computers
&lt;/h2&gt;

&lt;p&gt;At present, there is a group of computers in the early stages of development that will be very advanced to solve such problems. These computers are known as quantum computers. Quantum computers are based on the fundamental principles described in the theory of quantum mechanics, which deal with how subatomic particles behave.&lt;/p&gt;

&lt;p&gt;In classical computers, a bit is used to represent data. A bit can have a state of 0 or 1. Quantum computers work with quantum bits or qubits.  Just like a bit, a qubit can have a form of 0 or 1. But thanks to the properties of quantum mechanical phenomena, the qubit state can be both 0 and 1 simultaneously.&lt;/p&gt;

&lt;p&gt;This has given rise to many incentives for research and development in quantum computing. Both universities and private companies are spending time and money trying to discover the hidden points of this new and exciting field.&lt;/p&gt;

&lt;p&gt;However, one of the problems with quantum computers is that they solve and decrypt algorithms based on asymmetric cryptography.&lt;/p&gt;

&lt;p&gt;Consider the example of breaking a 4-bit key again. A 4 qubit computer is theoretically capable of performing all 16 modes (combinations) simultaneously with a computational task. As a result, the correct key will be found 100% in the same study at a given time for these calculations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9kMGqku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05xefuty457v531amkiq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9kMGqku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05xefuty457v531amkiq.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quantum-resistant-cryptography"&gt;
  &lt;/a&gt;
  Quantum resistant cryptography
&lt;/h2&gt;

&lt;p&gt;The advent of quantum computing technology could weaken cryptography, the foundation of most modern digital infrastructure, including cryptocurrencies.&lt;/p&gt;

&lt;p&gt;This can overshadow various sectors of which the world's security, operational, and communications sectors are only a part. From governments and multinational corporations to the average user may be affected. Not surprisingly, a significant amount of research is spent on research and development and interaction with this technology. Those cryptographic algorithms that are thought to be safe from the threat of quantum computers are called quantum-resistant algorithms.&lt;/p&gt;

&lt;p&gt;At present, various ways and methods have been proposed, such as simply increasing the length of the critical string with symmetric encryption, which may cause many other problems due to the emergence of standard keys. However, this problem can be solved with the help of quantum cryptography itself. Advances have also been made in this direction to prevent the creation of identical keys using quantum computers. It is now possible to determine if the asymmetric key has already been read or manipulated by a third party.&lt;/p&gt;

&lt;p&gt;There are other ways to investigate possible attacks based on quantum computers. These can include basic techniques such as hashing to create large-scale messages or other methods such as network encryption or standard network-based encryption. All this research aims to develop a type of encryption that is difficult for quantum computers to break.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quantum-computers-and-bitcoin-mining"&gt;
  &lt;/a&gt;
  Quantum computers and bitcoin mining
&lt;/h2&gt;

&lt;p&gt;Bitcoin mining also uses cryptography. Miners compete for block rewards to solve a cryptographic puzzle. If a miner has access to a quantum computer, he may dominate the entire network. This can reduce network decentralization and potentially expose the network to a 51% attack.&lt;/p&gt;

&lt;p&gt;However, according to some experts, this is not a threat that will affect Bitcoin quickly. ASIC devices can reduce the impact of such attacks, at least in the short term. Also, if multiple miners have access to quantum computers, the attack risk is significantly reduced by 51%.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding remarks
&lt;/h2&gt;

&lt;p&gt;The threat of quantum computing development for the implementation of the current asymmetric encryption system seems very serious. However, it should not be forgotten that this threat is not very close, and many substantial theoretical and engineering obstacles must be solved before it can be fully realized.&lt;/p&gt;

&lt;p&gt;Given the great dangers of information security, it makes sense to prepare for possible future attacks. Fortunately, a great deal of research has been done on potential solutions implemented in existing systems. These solutions could theoretically protect our critical infrastructure against the threat of quantum computers in the future.&lt;/p&gt;

&lt;p&gt;Quantum-resistant standards can be distributed to the general public in the same way that end-to-end encryption is performed through popular browsers and messenger applications. Once these standards are finalized and implemented, the cryptocurrency ecosystem can easily integrate the most potent form of defense possible against this attack.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>API - What is it ? P-2</title>
      <author>Snoopy Dev</author>
      <pubDate>Fri, 22 Oct 2021 15:11:19 +0000</pubDate>
      <link>https://dev.to/snoopydev/api-what-is-it-p-2-2lpf</link>
      <guid>https://dev.to/snoopydev/api-what-is-it-p-2-2lpf</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Types of &lt;strong&gt;API&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Public&lt;/li&gt;
&lt;li&gt;Partner&lt;/li&gt;
&lt;li&gt;Private or Internal&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Public &lt;strong&gt;API&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Available to any third party developers.&lt;/p&gt;

&lt;p&gt;API's are publicly available to developers and other users with minimal restriction. They may require registration, use of an &lt;strong&gt;API&lt;/strong&gt; Key or OAuth, or maybe completely open.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Partner &lt;strong&gt;API&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Partner APIs are APIs exposed by/to the strategic business partners.&lt;/p&gt;

&lt;p&gt;They are not available publicly and need specific entitlement to access them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Private &lt;strong&gt;API&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Private APIs, are hidden from external users and only exposed by internal systems.&lt;/p&gt;

&lt;p&gt;Internal APIs are not meant for consumption outside of the company but rather for use across different internal development teams for better productivity and reuse of services.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Beginners guide to quantum computers</title>
      <author>Anjan Shomooder</author>
      <pubDate>Fri, 22 Oct 2021 15:07:47 +0000</pubDate>
      <link>https://dev.to/thatanjan/beginners-guide-to-quantum-computers-oj6</link>
      <guid>https://dev.to/thatanjan/beginners-guide-to-quantum-computers-oj6</guid>
      <description>&lt;p&gt;Quantum computers are machines that use the properties of quantum physics to store data and perform computations. This can be extremely advantageous for certain tasks where they could vastly outperform even our best supercomputers.&lt;/p&gt;

&lt;p&gt;In this blog, I will try to explain quantum computers from a perspective of a person who knows very little about physics.&lt;/p&gt;

&lt;p&gt;I will explain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why do quantum computers exist?&lt;/li&gt;
&lt;li&gt;How does quantum computer works abstractly?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h2&gt;

&lt;p&gt;I am not a physicist or studying science at a university. But I want to learn more about physics especially quantum physics. I have a passion for quantum computers. So, I am trying to learn about physics and quantum computers. I have a basic understanding of how a quantum computer works. Though I am not 100% correct or accurate, I will still try to explain it to you. I might be wrong but that's fine. Please let me know if I make any mistakes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-quantum-computers-exist"&gt;
  &lt;/a&gt;
  Why do quantum computers exist?
&lt;/h2&gt;

&lt;p&gt;We know classical computers have completely changed our world and have enabled us a lot of opportunities. Our modern computers are super fast. They can finish a lot of tasks in a short amount of time.&lt;br&gt;
But even the most powerful supercomputers are not fast enough for large problems. They can solve the smaller version of the problem.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-sort-of-problems-can-not-be-solved-by-a-classical-computer"&gt;
  &lt;/a&gt;
  What sort of problems can not be solved by a classical computer?
&lt;/h2&gt;

&lt;p&gt;The answer is an Exponential problem or when the size of the problem goes bigger and bigger very quickly. We can divide them into two categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;li&gt;Chemistry&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#optimization"&gt;
  &lt;/a&gt;
  Optimization
&lt;/h2&gt;

&lt;p&gt;For example, there are 10 chairs and 10 people in the room. How many ways you can uniquely organize the people?&lt;/p&gt;

&lt;p&gt;The answer is 10 factorial (10!)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10! === 3628800
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is a giant number. Number 10 is small but 10 factorial(10!) is an enormous number. Trying out all possible solutions will need a huge amount of computation power.&lt;/p&gt;

&lt;p&gt;But you might say that supercomputers can handle this kind of operation. So. let's add another chair.&lt;/p&gt;

&lt;p&gt;Now, the answer is 11 factorial (11!)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10! === 3628800
11! === 39916800
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#have-you-noticed-the-growth-of-the-problem"&gt;
  &lt;/a&gt;
  Have you noticed the growth of the problem?
&lt;/h5&gt;

&lt;p&gt;We have just increased the problem size by 1.&lt;/p&gt;

&lt;p&gt;Let's add more.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Total chair&lt;/th&gt;
&lt;th&gt;Total ways to organize&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;3628800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;39916800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;479001600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;6227020800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;87178291200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;1.3076744e+12&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7f-ywzIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fnlyv6uig0agb6dzno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7f-ywzIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fnlyv6uig0agb6dzno.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that it is growing very rapidly and even our fastest supercomputer will fall quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chemistry"&gt;
  &lt;/a&gt;
  Chemistry
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oxw9If23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lqfoy9ypv3118927nkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oxw9If23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lqfoy9ypv3118927nkq.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the bottom, you can see some molecules. They are not much complicated. The left molecule is the biggest molecule that our fastest supercomputer can simulate. Because when you add another atom to the molecule, the problem grows exponentially.&lt;/p&gt;

&lt;p&gt;Let me give you another example.&lt;/p&gt;

&lt;p&gt;Let's take a look at a binary tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlzHu-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7002nw0vpv0ufjv0bjhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlzHu-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7002nw0vpv0ufjv0bjhf.png" alt="Binary trees with number of nodes in a level"&gt;&lt;/a&gt;&lt;br&gt;
If you don't know anything about Binary trees you can learn it from my &lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-binary-tree-data-structure"&gt;blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a binary tree, every parent can have at most 2 children.&lt;/p&gt;

&lt;p&gt;The maximum number of nodes on every level is 2^l where l is the level number.&lt;/p&gt;

&lt;p&gt;The number of nodes grows exponentially like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Total Node&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;1048576&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;33554432&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;34359738368&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;1.1258999e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#lets-see-how-our-computer-will-handle-this"&gt;
  &lt;/a&gt;
  Let's see how our computer will handle this.
&lt;/h2&gt;

&lt;p&gt;A computer works with bits. A bit has to be either 0 or 1. To visit a node we need 1 bit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To visit 0 the level you need 1 bit.&lt;/li&gt;
&lt;li&gt;For level 1 you need 2 bits.
And it grows like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Total Node&lt;/th&gt;
&lt;th&gt;Total bit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;1048576&lt;/td&gt;
&lt;td&gt;1048576&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;33554432&lt;/td&gt;
&lt;td&gt;33554432&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;34359738368&lt;/td&gt;
&lt;td&gt;34359738368&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;1.1258999e+15&lt;/td&gt;
&lt;td&gt;1.1258999e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So, to visit all the nodes in a level you need 2^l amount of bits where &lt;code&gt;l&lt;/code&gt; is the level number.&lt;/p&gt;

&lt;p&gt;You can see that quickly we will run out of our computational power. So,&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-can-we-solve-the-problem"&gt;
  &lt;/a&gt;
  How can we solve the problem?
&lt;/h2&gt;

&lt;p&gt;Quantum computers can solve this for us. Let's create a new type of bit and call it a &lt;code&gt;Qubit&lt;/code&gt;.&lt;br&gt;
A classical bit has to be either 0 or 1. But our qubit is neither 0 nor 1. Qubits are at the superposition of 0 and 1.&lt;/p&gt;

&lt;p&gt;Qubit Superposition simply means a qubit is both 0 and 1 at the same time. Now, I know it sounds bizarre but that's how quantum mechanics works. It works with uncertainty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Usr1I_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zej07lqn03a3lot2gvu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Usr1I_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zej07lqn03a3lot2gvu.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, with the superposition, we can visit two children at the same time and we are only going to be needed only 1 qubit. So,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for level 0 we need 1 qubit to visit one node.&lt;/li&gt;
&lt;li&gt;1 qubit again for level 1 to visit 2 nodes.&lt;/li&gt;
&lt;li&gt;Level 2 will need 2 qubits to visit 4 nodes.&lt;/li&gt;
&lt;li&gt;Level 3 will need 3 qubits to visit 8nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it grows linearly like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Total Node&lt;/th&gt;
&lt;th&gt;Total bit&lt;/th&gt;
&lt;th&gt;Total Qubits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;1048576&lt;/td&gt;
&lt;td&gt;1048576&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;33554432&lt;/td&gt;
&lt;td&gt;33554432&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;34359738368&lt;/td&gt;
&lt;td&gt;34359738368&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;1.1258999e+15&lt;/td&gt;
&lt;td&gt;1.1258999e+15&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So, we only need l amount qubits where l is the number of nodes.&lt;br&gt;
You can see that how quantum computers can be super fast than classical computers. And it is not just qubits, we have to use quantum entanglement.&lt;/p&gt;

&lt;p&gt;Quantum entanglement is a very hard concept and I don't even understand it correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--As6eOPzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br5z46c44ce2krcb10ws.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--As6eOPzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br5z46c44ce2krcb10ws.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dakVc-xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4iaymnw6delivmt5hvs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dakVc-xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4iaymnw6delivmt5hvs.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entanglement means connected. If two quantum particles, for example, electrons are entangled or you can say connected, they can communicate with each other instantly like there is no space between them. Even if one particle is on earth another particle is on another galaxy.&lt;/p&gt;

&lt;p&gt;If we have two qubits entangled, then one qubit will communicate to the next qubit and will tell what to do. I don't understand how entanglement will be used in quantum computers but it is needed.&lt;/p&gt;

&lt;p&gt;So, this is very clear that quantum computer will be really fast and it will revolutionize our world.&lt;/p&gt;

&lt;p&gt;But,&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-havent-we-built-it"&gt;
  &lt;/a&gt;
  Why haven't we built it?
&lt;/h2&gt;

&lt;p&gt;Well, building a quantum computer is not easy. It has several problems.&lt;br&gt;
For example, to make the qubits work you need to make the temperature 0.015 kelvin which is colder than outer space. That is hard to build and very expensive.&lt;/p&gt;

&lt;p&gt;But a lot of company has started their mission like Google, IBM, Intel, and many other companies. And they have earned a lot of success.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-will-we-have-a-quantum-computer-on-our-desk"&gt;
  &lt;/a&gt;
  When will we have a quantum computer on our desk?
&lt;/h2&gt;

&lt;p&gt;Well, not so fast. It might take decades. Or maybe in the next decade. Who knows what happens in the future. So, we have to wait. And as a developer, you need to be prepared for that. Because&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#quantum-computers-are-the-future"&gt;
  &lt;/a&gt;
  Quantum computers are the future.
&lt;/h2&gt;

&lt;p&gt;So that's all I know about quantum computers. I am always happy to share my knowledge. Please let me know if I have made any mistakes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to build a carousel postcard with React, Material-UI, and Swiper.js.&lt;br&gt;
If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://insta-carousel-demo.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" alt="Screenshot of Insta Carousel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;If you have any questions, please comment down below.&lt;br&gt;
You can reach out to me on social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.&lt;br&gt;
Stay safe. Goodbye.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://www.facebook.com/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt; Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KYLBb1W1ZBA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>quantum</category>
      <category>programming</category>
    </item>
    <item>
      <title>EMMET: Saviour of Developers </title>
      <author>Mihir Amin</author>
      <pubDate>Fri, 22 Oct 2021 15:04:43 +0000</pubDate>
      <link>https://dev.to/dynamicmortal/emmet-saviour-of-developers-3l83</link>
      <guid>https://dev.to/dynamicmortal/emmet-saviour-of-developers-3l83</guid>
      <description>&lt;p&gt;Emmet a plugin for everyone who couldn't remember the whole syntax.&lt;/p&gt;

&lt;h1&gt;HTML&lt;/h1&gt;

&lt;p&gt;The basic Boilerplate Generator &lt;code&gt;!&lt;/code&gt;&lt;br&gt;
Just type &lt;code&gt;!&lt;/code&gt; and hit enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KjMOrQ0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqhma2ns71ulfey69nwy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KjMOrQ0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqhma2ns71ulfey69nwy.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Classes and Id&lt;/h3&gt;

&lt;p&gt;Classes:- &lt;code&gt;div.className&lt;/code&gt;&lt;br&gt;
ID:- &lt;code&gt;div#idName&lt;/code&gt;&lt;br&gt;
hit enter, and Emmet completes it for you !&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div class="className"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;same goes for &lt;code&gt;section&lt;/code&gt;&lt;br&gt;
&lt;code&gt;section.className&lt;/code&gt; and &lt;code&gt;section#idName&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Duplicating&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ul&amp;gt;li*3&lt;/code&gt;&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Grouping of Tags&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;div&amp;gt;(hdr&amp;gt;ul&amp;gt;li*2&amp;gt;a)&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Part 2 incoming !!! Stay Tuned &amp;lt;3&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Unearthing Observability with New Relic</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 22 Oct 2021 15:01:23 +0000</pubDate>
      <link>https://dev.to/linearb/unearthing-observability-with-new-relic-2ci1</link>
      <guid>https://dev.to/linearb/unearthing-observability-with-new-relic-2ci1</guid>
      <description>&lt;p&gt;Is observability mission critical at this point? The folks at New Relic think so. And they’re not alone, according to their recent whitepaper on observability 90% of respondents believe observability is strategically important to their business. It’s becoming increasingly difficult to understand what’s going on within software development organizations.&lt;/p&gt;

&lt;p&gt;New Relic’s GVP &amp;amp; GM Buddy Brewer and SVP Greg Perotto join the podcast to discuss observability best practices, how to avoid data silos, the value of telemetry across the entire software life cycle and the five key insights of New Relic’s observability report.&lt;/p&gt;

&lt;p&gt;New Relic's Observability Forecast: &lt;a href="https://newrelic.com/resources/white-papers/2021-observability-forecast"&gt;https://newrelic.com/resources/white-papers/2021-observability-forecast&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/7AHliriId2lwHGivF8nUsQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Achieving full-stack observability&lt;/li&gt;
&lt;li&gt;Avoiding data silos by consolidating monitoring tools&lt;/li&gt;
&lt;li&gt;Open source adoption&lt;/li&gt;
&lt;li&gt;The utility of telemetry data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 1900 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://dev.toJoin%20the%20community%20&amp;gt;"&gt;https://discord.com/invite/devinterrupted&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdU-PZN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tgynr8n6nd6rqud6y3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdU-PZN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tgynr8n6nd6rqud6y3s.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/unearthing-observability-with-new-relic/"&gt;https://devinterrupted.com.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>devops</category>
      <category>opensource</category>
      <category>management</category>
    </item>
    <item>
      <title>What's in a Software Dev degree anyway? Course 1 - Information Structures</title>
      <author>Vicki (she/they)</author>
      <pubDate>Fri, 22 Oct 2021 15:00:09 +0000</pubDate>
      <link>https://dev.to/vickilanger/whats-in-a-software-dev-degree-anyway-course-1-information-structures-2e67</link>
      <guid>https://dev.to/vickilanger/whats-in-a-software-dev-degree-anyway-course-1-information-structures-2e67</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a continuation of &lt;a href="https://dev.to/vickilanger/what-s-in-a-software-dev-degree-491o"&gt;https://dev.to/vickilanger/what-s-in-a-software-dev-degree-491o&lt;/a&gt;. If you haven't read that, no worries. This post is just a cumulative of topics and concepts that were covered in my first course of my Software Dev degree.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Okay, I did it. First class of this degree is done. Here's everything we covered in the class.&lt;/p&gt;

&lt;p&gt;As of now, I'd still consider myself self-taught. It's rough not knowing what you should learn next. I have a lot of gaps in my knowledge. That's why I decided to go to school. And also why I'm hoping sharing this will help someone else.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MET CS 521 O1 Information Structures with Python (2021 Fall 1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jump to:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#input"&gt;Input (Learning Objectives)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#output"&gt;Output (Projects and Work)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docs"&gt;Documentation (References)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait! I just wanna test myself on the exercises you had in class. Glad you asked, here's the repo: &lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/tree/main/CS521-Info-Structures_Python"&gt;Exercises for first class&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-learning-objectives"&gt;
  &lt;/a&gt;
  Input (Learning Objectives) &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#week-1"&gt;
  &lt;/a&gt;
  Week 1
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Data Types

&lt;ul&gt;
&lt;li&gt;primitives vs collections&lt;/li&gt;
&lt;li&gt;primitives: &lt;code&gt;int&lt;/code&gt; &lt;code&gt;bool&lt;/code&gt; &lt;code&gt;float&lt;/code&gt; &lt;code&gt;complex&lt;/code&gt; &lt;code&gt;char&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;collections: &lt;code&gt;list&lt;/code&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;code&gt;set&lt;/code&gt; &lt;code&gt;dictionary&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Input/Output&lt;/li&gt;
&lt;li&gt;Variable Scopes (legb)&lt;/li&gt;
&lt;li&gt;Importing modules&lt;/li&gt;
&lt;li&gt;statements &lt;code&gt;dog_age = 6&lt;/code&gt; vs expressions &lt;code&gt;dog_age + 1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;statement returns nothing&lt;/li&gt;
&lt;li&gt;expression returns something, also called a side effect&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Functions that can be applied to different data types are polymorphic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unrelated to the curriculum, I also learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the professor has a preference for explaining Python in relation to C++ instead of explaining in ways everyone can understand. &lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_17pzE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1338688056090562560/XW1amUQF_normal.jpg" alt="Vicki Langer profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Vicki Langer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @vicki_langer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Am I in the wrong class?! I swear I’ve learned more about C++ than what I actually signed up for
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:21 PM - 09 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1436092310966648836" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1436092310966648836" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1436092310966648836" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;ul&gt;
&lt;li&gt;use &lt;a href="//ratemyprofessors.com"&gt;RateMyProfessors.com&lt;/a&gt; to look up before registering for future courses. I was watching Netflix series “The Chair” and learned about this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#week-2"&gt;
  &lt;/a&gt;
  Week 2
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Data Types

&lt;ul&gt;
&lt;li&gt;complex numbers

&lt;ul&gt;
&lt;li&gt;totally new to me. Guess they’re used in things like electromagnetics, chemistry, and economics.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fractions module is super neat&lt;/li&gt;
&lt;li&gt;Hashing &lt;code&gt;hash()&lt;/code&gt; for quick comparisons (still confused on this)&lt;/li&gt;
&lt;li&gt;Mutability&lt;/li&gt;
&lt;li&gt;Python Ranges&lt;/li&gt;
&lt;li&gt;Copying Objects

&lt;ul&gt;
&lt;li&gt;shallow copy makes copy but points to other object&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;deepcopy()&lt;/code&gt; makes new object&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt; vs &lt;code&gt;is&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt; checks values&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;is&lt;/code&gt; checks &lt;code&gt;id&lt;/code&gt; to see if same exact object&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#week-3"&gt;
  &lt;/a&gt;
  Week 3
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;UTF - 8 numbering for alphanumeric characters

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;chr()&lt;/code&gt; and &lt;code&gt;ord()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Strings

&lt;ul&gt;
&lt;li&gt;immutable, but there are work arounds

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(start, stop, step)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;half-open range: does not include &lt;code&gt;stop&lt;/code&gt; number&lt;/li&gt;
&lt;li&gt;slicing &lt;code&gt;[start:stop:jump]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;string reversal &lt;code&gt;string[-1]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;out of bound slicing will not error, but give you whatever is in bounds&lt;/li&gt;
&lt;li&gt;string formatting &lt;code&gt;{:[alignment][width][decimal precision][type descriptor]}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Control Flow

&lt;ul&gt;
&lt;li&gt;if-elif-else&lt;/li&gt;
&lt;li&gt;try - except&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Iterations

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Files

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;open&lt;/code&gt;,&lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readlines&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;writelines&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;importance of &lt;code&gt;close&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Lists

&lt;ul&gt;
&lt;li&gt;list comprehensions

&lt;ul&gt;
&lt;li&gt;can have multiple conditions&lt;/li&gt;
&lt;li&gt;works for mutable objects (lists &amp;amp; sets, not tuples &amp;amp; strings)
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# iterate to get even numbers
&lt;/span&gt;&lt;span class="n"&gt;evens_from_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;evens_from_nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# list comprehension to get even numbers
# same as above, just shorthand
&lt;/span&gt;&lt;span class="n"&gt;odds_from_nums_again&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;list reversal with slicing or &lt;code&gt;.reverse()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;enumerate()&lt;/code&gt; for indexed collections

&lt;ul&gt;
&lt;li&gt;returns a list with an index number&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sort()&lt;/code&gt; vs &lt;code&gt;sorted()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sort()&lt;/code&gt; changes things in place&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sorted()&lt;/code&gt; orders things and creates a new list&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#week-4"&gt;
  &lt;/a&gt;
  Week 4
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lists&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;See above, went over some list stuff in week 3&lt;/li&gt;
&lt;li&gt;indexing a nested list &lt;code&gt;list[1][2]&lt;/code&gt; would give index 1 of main list then index 2 of the nested list&lt;/li&gt;
&lt;li&gt;sorting list of list sorts on the index [0] of nested lists&lt;/li&gt;
&lt;li&gt;some methods that modify a list: &lt;code&gt;append()&lt;/code&gt; &lt;code&gt;pop()&lt;/code&gt; &lt;code&gt;extend()&lt;/code&gt; &lt;code&gt;insert()&lt;/code&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;code&gt;sort()&lt;/code&gt; &lt;code&gt;reverse()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;reversing a list &lt;code&gt;list[::-1]&lt;/code&gt; (gives no start or stop and a &lt;code&gt;-1&lt;/code&gt; step)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Exercise&lt;/em&gt;: check if words are anagrams&lt;/li&gt;
&lt;li&gt;create a copy slice using &lt;code&gt;[:]&lt;/code&gt; (shallow copy?)&lt;/li&gt;
&lt;li&gt;when list appends itself as an element, infinite regress occurs&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tuples&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;single element tuple &lt;code&gt;tuple = ("cat",)&lt;/code&gt; note the trailing comma, otherwise this would not be a tuple&lt;/li&gt;
&lt;li&gt;can use the same set up for a list comprehension&lt;/li&gt;
&lt;li&gt;immutable but can contain mutable objects&lt;/li&gt;
&lt;li&gt;tuples use most of the same methods as lists, except the ones that would change a list (eg &lt;code&gt;append()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dictionaries&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;can use a similar set up for a list comprehension&lt;/li&gt;
&lt;li&gt;keys are not arranged in a specific order, they are in an order to efficiently search&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Exercise&lt;/em&gt;: count words or letters in a string&lt;/li&gt;
&lt;li&gt;namespaces are implemented with dictionaries&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;items()&lt;/code&gt; all key-value pairs as a list of tuples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;keys()&lt;/code&gt; all keys as a list of list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;values()&lt;/code&gt; all values as a list of list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zip()&lt;/code&gt; 2 or more lists together. Tuples by default&lt;/li&gt;
&lt;li&gt;can merge dicts with &lt;code&gt;update()&lt;/code&gt; (note: for keys that already exist, values will be replaced)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sets&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;mutable, not ordered, only unique values&lt;/li&gt;
&lt;li&gt;subset &lt;code&gt;small_set &amp;lt;= big_set&lt;/code&gt; vs superset &lt;code&gt;big_set &amp;gt;= small_set&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;frozen sets are possible to make sets immutable&lt;/li&gt;
&lt;li&gt;Methods

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;intersection()&lt;/code&gt; creates new set of all elements that are the same&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;|&lt;/code&gt; or &lt;code&gt;union()&lt;/code&gt; creates new set of all elements of both lists&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-&lt;/code&gt; or &lt;code&gt;difference()&lt;/code&gt; creates new set of all elements in 1st set but not 2nd set&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^&lt;/code&gt; or &lt;code&gt;symmetric_difference()&lt;/code&gt; creates new set of all elements that are different&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pythontutor.com/live.html#code=%27%27%27%0A%60&amp;amp;%60%20or%20%60intersection%28%29%60%20creates%20new%20set%20of%20all%20elements%20that%20are%20the%20same%0A%20%60%7C%60%20or%20%60union%28%29%60%20creates%20new%20set%20of%20all%20elements%20of%20both%20lists%0A%60-%60%20or%20%60difference%28%29%60%20creates%20new%20set%20of%20all%20elements%20in%201st%20set%20but%20not%202nd%20set%0A%60%5E%60%20or%20%60symmetric_difference%28%29%60%20creates%20new%20set%20of%20all%20elements%20that%20are%20different%0A%27%27%27%0Amy_pets%20=%20%7B%22cat%22,%20%22dog%22,%20%22fish%22,%20%22aquatic%20snails%22%7D%0Ayour_pets%20=%20%7B%22ball%20python%22,%20%22human%20child%22,%20%22parakeet%22,%20%22bearded%20dragon%22,%7D%0A%0Aour_pets_in_common%20=%20my_pets%20&amp;amp;%20your_pets%0Aprint%28our_pets_in_common%29%0A%0Aall_our_pets%20=%20my_pets.union%28your_pets%29%0Aprint%28all_our_pets%29%0A%0Ayour_unique_pets%20=%20my_pets.difference%28your_pets%29%20%20#%20your%20pets%20that%20I%20don%27t%20have%0Aprint%28your_unique_pets%29%0A%0Aour_unique_pets%20=%20my_pets.symmetric_difference%28your_pets%29%0Aprint%28our_unique_pets%29&amp;amp;cumulative=false&amp;amp;curInstr=11&amp;amp;heapPrimitives=nevernest&amp;amp;mode=display&amp;amp;origin=opt-live.js&amp;amp;py=3&amp;amp;rawInputLstJSON=%5B%5D&amp;amp;textReferences=false"&gt;Link to Python Tutor with examples (with animals) of these set methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;split()&lt;/code&gt; returns a list&lt;/li&gt;
&lt;li&gt;data type is the actual use of data structures, where data structures are more the theory or idea of&lt;/li&gt;
&lt;li&gt;efficiency refers to time, space, and algorithm&lt;/li&gt;
&lt;li&gt;Implementing other data structures with the types we have&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stacks&lt;/code&gt; can be made with lists&lt;/li&gt;
&lt;li&gt;Ternary if basically an if-else but jammed onto one line
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;true_thing&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;false_thing&lt;/span&gt;  &lt;span class="c1"&gt;# ternary syntax
&lt;/span&gt;&lt;span class="n"&gt;throw_ball&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dog_wants_play&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;pet_dog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# ternary example
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#week-5"&gt;
  &lt;/a&gt;
  Week 5
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Error Handling&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;interupts vs Exceptions&lt;/li&gt;
&lt;li&gt;Allows us to watch code for errors

&lt;ul&gt;
&lt;li&gt;useful for things like user inputs ("All user input is evil")&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Try - Except 

&lt;ul&gt;
&lt;li&gt;can handle multiple exceptions&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;can do &lt;code&gt;except IndexError as e&lt;/code&gt; to later use &lt;code&gt;e&lt;/code&gt; (the error)&lt;/li&gt;
&lt;li&gt;If you use &lt;code&gt;finally&lt;/code&gt; it runs every time, not required though&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Functions&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;functions are objects and have their own namespace (reminder: everything is an object)&lt;/li&gt;
&lt;li&gt;function docstring can include inputs, outputs, what the function does&lt;/li&gt;
&lt;li&gt;Parameters != arguments

&lt;ul&gt;
&lt;li&gt;parameters are in the function definition &lt;code&gt;def feed_dog(dog_weight):&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;arguments are in the function call/invocation &lt;code&gt;feed_dog(25.5)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;functions return &lt;code&gt;None&lt;/code&gt; if there is no return statement&lt;/li&gt;
&lt;li&gt;can pass functions as arguments&lt;/li&gt;
&lt;li&gt;possible to have different function "signatures". same name === same function&lt;/li&gt;
&lt;li&gt;default parameters &lt;code&gt;def pet_cat(time="now"):&lt;/code&gt; if you don't give a different time, cat will be pet &lt;code&gt;now&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;variable positional args &lt;code&gt;def func(*args):&lt;/code&gt; this requires a tuple as input&lt;/li&gt;
&lt;li&gt;Mutable parameters as args/params, avoid if possible. Can cause issues&lt;/li&gt;
&lt;li&gt;parameter names as keywords &lt;code&gt;feed_dog(dog_age=5, dog_weight = 25.5)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;annotation of params to document/suggest what type the param should be &lt;code&gt;def feed_dog(dog_weight: float, dog_age: int):&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="c1"&gt;#syntax
&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="s"&gt;'''what it does, inputs, and outputs'''&lt;/span&gt;
     &lt;span class="c1"&gt;# code for your function to do
&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

 &lt;span class="c1"&gt;# example
&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;feed_dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog_weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dog_age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="s"&gt;'''calculate/output how much to feed dog with given dog weight arg'''&lt;/span&gt;
     &lt;span class="k"&gt;pass&lt;/span&gt;
 &lt;span class="n"&gt;feed_dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;25.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="c1"&gt;# -----other ways to call/invoke-----
&lt;/span&gt; &lt;span class="c1"&gt;# how to invoke with out of order args
&lt;/span&gt; &lt;span class="n"&gt;feed_dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dog_weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# also useful when there are a lot of params
&lt;/span&gt; &lt;span class="c1"&gt;# use a dictionary for function args
&lt;/span&gt; &lt;span class="n"&gt;dog_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"dog_weight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;25.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog_age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# same names as params
&lt;/span&gt; &lt;span class="n"&gt;feed_dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dog_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# using ** to pass a dict
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;generators functions

&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;yield&lt;/code&gt; instead of &lt;code&gt;return&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;allows you to start where you pick up as opposed to the beginning like a &lt;code&gt;return&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yield&lt;/code&gt; give results and wait until next time function is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;__iter__()&lt;/code&gt; &lt;code&gt;__next__()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Lambda Function&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lambda args: expression&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;map()&lt;/code&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;code&gt;reduce()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Recursion&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;must have a base case and the base case must be first in the function&lt;/li&gt;
&lt;li&gt;can be slower than a non-recursive function&lt;/li&gt;
&lt;li&gt;Advantage: less code, may be easier for some problems&lt;/li&gt;
&lt;li&gt;Disadvantage: inefficient on memory and processing time, harder to read and follow

&lt;ul&gt;
&lt;li&gt;Calls by...&lt;/li&gt;
&lt;li&gt;if you pass a mutable param -&amp;gt; call by reference&lt;/li&gt;
&lt;li&gt;create a new object -&amp;gt; call by values&lt;/li&gt;
&lt;li&gt; if you pass a immutable param -&amp;gt; call by value
### Week 6&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; can be used to make new data structures. (Classes were used to build &lt;code&gt;dict()&lt;/code&gt;, &lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;list()&lt;/code&gt; etc)&lt;/li&gt;
&lt;li&gt;defining a class:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt; allows an object to keep it's own data (like &lt;code&gt;this&lt;/code&gt; in js/c++/java)
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__stomach&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# a static variable w/ name mangling
&lt;/span&gt;    &lt;span class="c1"&gt;# define a constructor
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;  &lt;span class="c1"&gt;# w/ name mangling
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__copy__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# shallow copy 
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# w/ name mangling
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''give a string when you print(instance_variable)'''&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'dog with name: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# w/ name mangling
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;#
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_stomachs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# getter/accessor
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__stomach&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eat_dinner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# self is like `this` in js/c++/java
&lt;/span&gt;        &lt;span class="s"&gt;'''a class method for the dog to eat dinner'''&lt;/span&gt;
        &lt;span class="c1"&gt;# use Class_Name.variable to get the static variable
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; reports for dinner with their &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stomach&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; stomach"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dog_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wiley"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# makes a Dog just like list() makes a list
&lt;/span&gt;&lt;span class="n"&gt;dog_one_come&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dog_one&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eat_dinner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;dog_copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints return of __str__
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Static vs. Instance Variables&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;better to have static variables vs instance variables&lt;/li&gt;
&lt;li&gt;better to have 1 copy of a variable as opposed to 1 copy per instance&lt;/li&gt;
&lt;li&gt;static vars are before the methods defined in a class&lt;/li&gt;
&lt;li&gt;instance var or non-static would have the var in a method and each instance would have it's own copy of the var making it not so efficient&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;__repr__()&lt;/code&gt; "official" object description (example: &lt;code&gt;&amp;lt;__main__.Dog object at 0x7f545b6db8d0&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Encapsulation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;no private like java&lt;/li&gt;
&lt;li&gt;all methods and variables are public&lt;/li&gt;
&lt;li&gt;name mangling provides minimum protection

&lt;ul&gt;
&lt;li&gt;give &lt;code&gt;__&lt;/code&gt; before name like &lt;code&gt;__stomach&lt;/code&gt; to prevent accidental changing. &lt;/li&gt;
&lt;li&gt;Though you could still change &lt;code&gt;Dog._Dog__stomach = 4&lt;/code&gt; it would just be less of a chance to do it by accident&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Overloading&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt; Could write a method to use &lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;,&lt;code&gt;==&lt;/code&gt;,&lt;code&gt;!=&lt;/code&gt;,&lt;code&gt;&amp;amp;&lt;/code&gt;,&lt;code&gt;!&lt;/code&gt; in a way they weren't already built to do by using "magic methods"&lt;/li&gt;
&lt;li&gt;magic methods are just overwritten methods that overload operators?
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inheritance and Polymorphism&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;can derive classes from new classes. &lt;/li&gt;
&lt;li&gt;In real life, mammals could be a parent class and cats could be a child class. Cat has some similarities, but some stuff is different&lt;/li&gt;
&lt;li&gt;if child class doesn't have a str() defined, python will look in the parent class&lt;/li&gt;
&lt;li&gt;functions like &lt;code&gt;print()&lt;/code&gt; and &lt;code&gt;len()&lt;/code&gt; can be used across different classes and functions&lt;/li&gt;
&lt;li&gt;if inheriting a parent class, include in the constructor/&lt;code&gt;__init__&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple Inheritance&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;python allows classes to have multiple parent classes. not all languages allow this (like Java and C)&lt;/li&gt;
&lt;li&gt;one problem&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Abstract Classes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pythontutor.com/live.html#code=class%20Animal%28%29%3A%0A%20%20%20%20def%20__init__%28self,name%29%3A%0A%20%20%20%20%20%20%20%20self.name%20%3D%20name%0A%20%20%20%20def%20place%28self%29%3A%0A%20%20%20%20%20%20%20%20raise%20NotImplementedError%28%22left%20to%20subclass%22%29%0A%0Aclass%20Lion%28Animal%29%3A%0A%20%20%20%20def%20__str__%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22My%20mom%20a%20lioness%20and%20dad%20a%20lion%22%0A%20%20%20%20def%20place%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22I%20live%20in%20Africa%22%0Aclass%20Tiger%28Animal%29%3A%0A%20%20%20%20def%20__str__%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22My%20mom%20a%20tigress%20and%20dad%20a%20tiger%22%0A%20%20%20%20def%20place%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22I%20live%20in%20Asia%22%0A%0Aclass%20Liger%28Lion,%20Tiger%29%3A%0A%20%20%20%20def%20__str__%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22My%20mom%20a%20tigress%20and%20dad%20a%20lion%22%0Aclass%20Tigon%28Tiger,%20Lion%29%3A%0A%20%20%20%20def%20__str__%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22My%20mom%20a%20lioness%20and%20dad%20a%20tiger%22%0A%20%20%20%20%20%20%20%20%0Aanimals%20%3D%20%5BLion%28%22Scar%22%29,%20Tiger%28%22kitty%22%29,%20Liger%28%22skinny%22%29,%20Tigon%28%22tiny%22%29%5D%0Afor%20animal%20in%20animals%3A%0A%20%20%20%20print%28animal,%20animal.place%28%29%29&amp;amp;cumulative=false&amp;amp;curInstr=51&amp;amp;heapPrimitives=nevernest&amp;amp;mode=display&amp;amp;origin=opt-live.js&amp;amp;py=3&amp;amp;rawInputLstJSON=%5B%5D&amp;amp;textReferences=false"&gt;Link to Python Tutor with examples (with animals) of abstract classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Unit Tests&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run your function and use &lt;code&gt;assert&lt;/code&gt; statements to test the expected output&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#output-projects-and-work"&gt;
  &lt;/a&gt;
  Output (Projects and Work) &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#week-1"&gt;
  &lt;/a&gt;
  Week 1
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#assignment"&gt;
  &lt;/a&gt;
  assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T0sV3Pnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpcox898470fsrw5w92h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0sV3Pnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpcox898470fsrw5w92h.png" alt="https://onlinecampus.bu.edu/bbcswebdav/pid-9329010-dt-content-rid-57804186_1/xid-57804186_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#quiz"&gt;
  &lt;/a&gt;
  quiz
&lt;/h4&gt;

&lt;p&gt;The quiz had some ridiculous questions on it. Oh well. &lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_17pzE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1338688056090562560/XW1amUQF_normal.jpg" alt="Vicki Langer profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Vicki Langer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @vicki_langer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Bombed that first quiz.&lt;br&gt;&lt;br&gt;Python is interactive? Sure. I guess that’s important enough to have 2 questions on it.&lt;br&gt;&lt;br&gt;When are sytax errors given? On compile or runtime? Who cares? They’re automatic! &lt;br&gt;&lt;br&gt;Now I’m being childish, I guess I missed these in the book 😩
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:11 PM - 10 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1436346483385720870" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1436346483385720870" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1436346483385720870" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#week-2-data-types-casting-mutability"&gt;
  &lt;/a&gt;
  Week 2 (data types, casting, mutability)
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#assignment"&gt;
  &lt;/a&gt;
  assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/blob/main/CS521-Info-Structures_Python/CS%20521%20Homework%202%20-%20Fall%201.pdf"&gt;Homework 2 Assignment PDF&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#week-3-strings-control-flow-loops-files"&gt;
  &lt;/a&gt;
  Week 3 (strings, control flow, loops, files)
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#assignment"&gt;
  &lt;/a&gt;
  assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/blob/main/CS521-Info-Structures_Python/CS%20521%20Homework%203%20-%20Fall%201.pdf"&gt;Homework 3 Assignment PDF&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#week-4-lists-tuples-dictionaries-sets"&gt;
  &lt;/a&gt;
  Week 4 (lists, tuples, dictionaries, sets)
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#assignment"&gt;
  &lt;/a&gt;
  assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/blob/main/CS521-Info-Structures_Python/CS%20521%20Homework%204%20-%20Fall%201.pdf"&gt;Homework 4 Assignment PDF&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#week-5-error-handling-functions-recursion-generators"&gt;
  &lt;/a&gt;
  Week 5 (error handling, functions, recursion, generators)
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#assignment"&gt;
  &lt;/a&gt;
  assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/blob/main/CS521-Info-Structures_Python/CS%20521%20Homework%205%20-%20Fall%201.pdf"&gt;Homework 5 Assignment PDF&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#week-6-classes-overloading-ecapsulation"&gt;
  &lt;/a&gt;
  Week 6 (classes, overloading, ecapsulation)
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#assignment"&gt;
  &lt;/a&gt;
  assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/blob/main/CS521-Info-Structures_Python/CS%20521%20Homework%206%20-%20Fall%201.pdf"&gt;Homework 6 Assignment PDF&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#week-7"&gt;
  &lt;/a&gt;
  Week 7
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#final-project"&gt;
  &lt;/a&gt;
  Final Project
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/blob/main/CS521-Info-Structures_Python/final_project_guidelines_v3.pdf"&gt;Final Project Requirements&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/VickiLanger/MS-in-Software-Dev/tree/main/CS521-Info-Structures_Python/final_project"&gt;Final Project&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#final-exam"&gt;
  &lt;/a&gt;
  Final Exam
&lt;/h4&gt;

&lt;p&gt;15 questions and 30 minutes later. &lt;br&gt;
Covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;generators&lt;/li&gt;
&lt;li&gt;nested list/tuple indexing&lt;/li&gt;
&lt;li&gt;function syntax&lt;/li&gt;
&lt;li&gt;slicing&lt;/li&gt;
&lt;li&gt;hashable and immutable data types&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;classes and inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#documentation-references"&gt;
  &lt;/a&gt;
  Documentation (References) &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pythontutor.com/visualize.html#mode=edit"&gt;https://pythontutor.com/visualize.html#mode=edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.continuum.io/anaconda/install/"&gt;https://docs.continuum.io/anaconda/install/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Twitch Streaming Graph Analysis - Part 1</title>
      <author>Katarina Supe</author>
      <pubDate>Fri, 22 Oct 2021 14:47:01 +0000</pubDate>
      <link>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-1-2903</link>
      <guid>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-1-2903</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Twitch&lt;/strong&gt; is the world’s leading live streaming platform for gamers. The idea of exploring the Twitch dataset is to see which streamers, teams, and games are most popular. Also, we would like to see which people or bots are considered the most reliable for &lt;strong&gt;&lt;em&gt;VIP&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;moderator&lt;/em&gt;&lt;/strong&gt; badges. We will measure the popularity of streamers with the number of their followers and viewers. Other types of users also participate in a stream, and they are called &lt;strong&gt;&lt;em&gt;chatters&lt;/em&gt;&lt;/strong&gt;. Each streamer has a network of chatters, VIPs, and moderators, so we will use the MAGE &lt;strong&gt;&lt;a href="https://memgraph.com/docs/mage/query-modules/python/pagerank"&gt;PageRank&lt;/a&gt;&lt;/strong&gt; algorithm to check for the most popular streamer. Besides that, we can calculate the &lt;strong&gt;&lt;a href="https://memgraph.com/docs/mage/query-modules/cpp/betweenness-centrality"&gt;betweenness centrality&lt;/a&gt;&lt;/strong&gt; on this network and see which streamer has the most influence. This blog will be divided into three parts, depending on the part of the application we are building:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 1&lt;/strong&gt;: data source and backend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 2&lt;/strong&gt;: frontend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 3&lt;/strong&gt;: streaming data from Kafka cluster&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#app-architecture"&gt;
  &lt;/a&gt;
  App Architecture
&lt;/h2&gt;

&lt;p&gt;Our app consists of five main services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;twitch-stream&lt;/code&gt;&lt;/strong&gt;: This  Python script gets new chatters for certain streamers and sends them to the Kafka cluster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;kafka&lt;/code&gt;&lt;/strong&gt;:  A Kafka cluster consisting of four topics. There are two
consumers (one is in &lt;code&gt;memgraph-mage&lt;/code&gt; and the other is in the &lt;code&gt;twitch-app&lt;/code&gt;) and
three producers (in &lt;code&gt;memgraph-mage&lt;/code&gt;, &lt;code&gt;twitch-app&lt;/code&gt; and &lt;code&gt;twitch-stream&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;memgraph-mage&lt;/code&gt;&lt;/strong&gt;:  The graph analytics platform that we query for relevant statistics. This platform also stores the incoming Twitch data from Kafka and performs &lt;strong&gt;PageRank&lt;/strong&gt; on all streamers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;twitch-app&lt;/code&gt;&lt;/strong&gt;: A Flask server that sends all data which we query from &lt;code&gt;memgraph-mage&lt;/code&gt; to &lt;code&gt;react-app&lt;/code&gt;. It also consumes the Kafka stream and sends it to the &lt;code&gt;react-app&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;react-app&lt;/code&gt;&lt;/strong&gt;:  A React app that visualizes the Twitch network with
the &lt;strong&gt;D3.js&lt;/strong&gt; library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDK8TZb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com.fra1.digitaloceanspaces.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-app-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDK8TZb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com.fra1.digitaloceanspaces.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-app-architecture.png" alt="apparchitecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dataset-and-graph-schema"&gt;
  &lt;/a&gt;
  Dataset and Graph Schema
&lt;/h2&gt;

&lt;p&gt;The data was collected using &lt;a href="https://dev.twitch.tv/docs/api/"&gt;Twitch API&lt;/a&gt;. The data needed to be rearranged so that it could fit the idea of graph databases. &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/scripts/scraper.py"&gt;Here&lt;/a&gt; you can find the script that creates &lt;code&gt;.csv&lt;/code&gt; files which we'll load into Memgraph. The files which we'll use are: &lt;code&gt;streamers.csv&lt;/code&gt;, &lt;code&gt;teams.csv&lt;/code&gt;, &lt;code&gt;vips.csv&lt;/code&gt;, &lt;code&gt;moderators.csv&lt;/code&gt; and &lt;code&gt;chatters.csv&lt;/code&gt;. In &lt;code&gt;streamers.csv&lt;/code&gt; we can find important information about languages the user speaks and games the user streams. Those two will actually be nodes in our graph database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLvPiidD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com.fra1.digitaloceanspaces.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-graph-schema.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLvPiidD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com.fra1.digitaloceanspaces.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-graph-schema.png" alt="graphschema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every node except for the &lt;code&gt;:User:Stream&lt;/code&gt; has only a name. Stream label is given to the users who have live streams. Followers and view count properties will be important in measuring their popularity. Language, team, and game could be properties on &lt;code&gt;:User:Stream&lt;/code&gt; nodes, but since there are many users who speak the same language, belong to the same team, or play the same game, we want them to be connected. Now when we understand the Twitch network better, let's visualize this network by making the whole web application!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Since we are building a web application using many technologies, we will need to install a few tools before starting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Compose&lt;/strong&gt;: 

&lt;ul&gt;
&lt;li&gt; On Windows, you need to install &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Windows Subsystem for Linux&lt;/a&gt; (WSL) and then &lt;a href="https://docs.docker.com/desktop/windows/install/"&gt;Docker Desktop&lt;/a&gt;. On Linux &lt;a href="https://docs.docker.com/compose/install/"&gt;install&lt;/a&gt; Docker and Docker Compose.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memgraph&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Make sure to have the latest memgraph/memgraph-mage Docker image:
&lt;code&gt;docker pull memgraph/memgraph-mage&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Node.js&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;We will need &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; for the &lt;code&gt;npx&lt;/code&gt; command which we'll use to create our React app.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;You can find the whole project &lt;a href="https://github.com/memgraph/twitch-analytics-demo"&gt;here&lt;/a&gt;. We'll be referring to it a lot, so you should definitely check it out. In the end, our project structure will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|   docker-compose.yml
|   
+---backend
|       app.py
|       Dockerfile
|       requirements.txt
|
+---frontend
|   |   .dockerignore
|   |   craco.config.js
|   |   Dockerfile
|   |   package.json
|   |   package-lock.json
|   +---node_modules
|   +---public
|   +---src
|
+---memgraph
|   |   
|   +---import-data
|   |       chatters.csv
|   |       moderators.csv
|   |       streamers.csv
|   |       teams.csv
|   |       vips.csv
|   +---mg_log
|   +---mg_lib
|   +---mg_etc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will step by step build our application from bottom to top. First, we have to create the &lt;code&gt;backend&lt;/code&gt; and &lt;code&gt;memgraph&lt;/code&gt; directories. Within the &lt;code&gt;memgraph&lt;/code&gt; directory, we create the &lt;code&gt;import-data&lt;/code&gt; subdirectory and move all the CSV files we've scraped to it or we can use &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/memgraph/import-data"&gt;files&lt;/a&gt; we already have. In the beginning, our project structure looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|   docker-compose.yml
|   
+---backend
|       app.py
|       Dockerfile
|       requirements.txt
|
+---memgraph
|   |   
|   +---import-data
|   |       chatters.csv
|   |       moderators.csv
|   |       streamers.csv
|   |       teams.csv
|   |       vips.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dockerizing-memgraph-and-the-backend"&gt;
  &lt;/a&gt;
  Dockerizing Memgraph and the Backend
&lt;/h2&gt;

&lt;p&gt;We will create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file with many services which will depend on one another, so that we can simply run our application using &lt;code&gt;docker-compose build&lt;/code&gt; and &lt;code&gt;docker-compose up&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "3"
networks:
  app-tier:
    driver: bridge
services:
  memgraph-mage:
    image: memgraph/memgraph-mage
    user: root
    volumes:
      - ./memgraph/import-data:/usr/lib/memgraph/import-data
      - ./memgraph/mg_lib:/var/lib/memgraph
      - ./memgraph/mg_log:/var/log/memgraph
      - ./memgraph/mg_etc:/etc/memgraph
    entrypoint:
      [
        "/usr/lib/memgraph/memgraph",
      ]
    ports:
      - "7687:7687"
    networks:
      - app-tier
  twitch-app:
    build: ./backend
    volumes:
      - ./backend:/app
    ports:
      - "5000:5000"
    environment:
      MG_HOST: memgraph-mage
      MG_PORT: 7687
    depends_on:
      - memgraph-mage
    networks:
      - app-tier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; can be a lot simpler, but the &lt;code&gt;app-tier&lt;/code&gt; and &lt;code&gt;networks&lt;/code&gt; sections will come in handy later. We are building the &lt;strong&gt;memgraph-mage&lt;/strong&gt; service which will have a running Memgraph instance along with &lt;a href="https://memgraph.com/docs/mage"&gt;MAGE&lt;/a&gt; query modules. Next, we need to have volumes to persist our data. In that way, we will have to load data only in the first run. In the subfolder &lt;code&gt;import-data&lt;/code&gt; we have all the &lt;code&gt;.csv&lt;/code&gt; files which we have to load into Memgraph. We called our backend service &lt;strong&gt;twitch-app&lt;/strong&gt; and this service depends on memgraph-mage. In the backend, we first want to load data into Memgraph, and for this to work, there should be a running Memgraph instance. Our backend will be running on port 5000. Now let's take a look at the backend Dockerfile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM python:3.8

# Install CMake
RUN apt-get update &amp;amp;&amp;amp; \
  apt-get --yes install cmake &amp;amp;&amp;amp; \
  rm -rf /var/lib/apt/lists/*

# Install packages
COPY requirements.txt ./
RUN pip3 install -r requirements.txt

COPY app.py /app/app.py
WORKDIR /app

ENV FLASK_ENV=development
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8

ENTRYPOINT ["python3", "app.py", "--populate"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first run, the flag &lt;code&gt;--populate&lt;/code&gt; should definitely be included, so that the data would be loaded into Memgraph. Later on, if you were to restart the app, make sure to remove the &lt;code&gt;--populate&lt;/code&gt; flag. Due to the volumes which we created, the data will stay loaded into Memgraph. We are using micro web framework &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt;, that is, a package Werkzeug, which is a utility library for Python. It is a toolkit for Web Server Gateway Interface applications that can realize software objects for request, response, and utility functions. That will be just enough for our web application since the backend will communicate with Memgraph on request and send a response back. We are also copying &lt;code&gt;requirements.txt&lt;/code&gt; to the container and installing all the dependencies. Let's see what's in there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Flask==1.1.2
pymgclient==1.0.0
gqlalchemy==1.0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected, Flask is there, so it will be installed in our container. Next, we have &lt;a href="https://github.com/memgraph/pymgclient"&gt;pymgclient&lt;/a&gt;, Memgraph database adapter for Python language on top of which &lt;a href="https://github.com/memgraph/gqlalchemy"&gt;gqlalchemy&lt;/a&gt; is built. We will connect to the database with gqlalchemy and it will assist us in writing and running queries on Memgraph. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-implementation"&gt;
  &lt;/a&gt;
  Backend Implementation
&lt;/h2&gt;

&lt;p&gt;We will be building API with the help of which frontend will be able to get all necessary data from Memgraph. First, we need to set up everything for the Flask server. We are adding arguments such as &lt;code&gt;--host&lt;/code&gt;, &lt;code&gt;--port&lt;/code&gt; and &lt;code&gt;--debug&lt;/code&gt; flags. Also, we have created the previously mentioned &lt;code&gt;--populate&lt;/code&gt; flag. We initialize our Flask app and save these arguments to use them when running the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app = Flask(
    __name__,
)
memgraph = Memgraph()

def parse_args():
    """Parse command line arguments."""

    parser = ArgumentParser(description=__doc__)
    parser.add_argument("--host", default="0.0.0.0", help="Host address.")
    parser.add_argument("--port", default=5000, type=int, help="App port.")
    parser.add_argument(
        "--debug",
        default=True,
        action="store_true",
        help="Run web server in debug mode.",
    )
    parser.add_argument(
        "--populate",
        dest="populate",
        action="store_true",
        help="Run app with data loading."
    )
    parser.set_defaults(populate=False)
    log.info(__doc__)
    return parser.parse_args()


args = parse_args()

@log_time
def load_data():
    """Load data into the database."""
    if not args.populate:
        log.info("Data is loaded in Memgraph.")
        return
    log.info("Loading data into Memgraph.")
    try:
        memgraph.drop_database()
        load_twitch_data(memgraph)
    except Exception as e:
        log.info("Data loading error.")


def main():
    if os.environ.get("WERKZEUG_RUN_MAIN") == "true":
        connect_to_memgraph(memgraph)
        init_log()
        load_data()
    app.run(host=args.host, port=args.port, debug=args.debug)


if __name__ == "__main__":
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;app.py&lt;/code&gt; is started, a connection to Memgraph is initiated. All methods which communicate with our instance of Memgraph are located in &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/backend/database.py"&gt;&lt;code&gt;database.py&lt;/code&gt;&lt;/a&gt;. When the connection is established, the data can be loaded. We are going to use &lt;a href="https://memgraph.com/docs/memgraph/import-data/load-csv-clause/"&gt;LOAD CSV&lt;/a&gt; Cypher clauses to import data into Memgraph. There are different &lt;a href="https://memgraph.com/docs/memgraph/import-data"&gt;ways&lt;/a&gt; of importing data, but this seemed like the most appropriate one. For example, let's show how streamers.csv can be loaded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path_streams = Path("/usr/lib/memgraph/import-data/streamers.csv")

memgraph.execute(
    f"""LOAD CSV FROM "{path_streams}"
        WITH HEADER DELIMITER "," AS row
        CREATE (u:User:Stream {{id: ToString(row.user_id), name: Tostring(row.user_name), 
        url: ToString(row.thumbnail_url), followers: ToInteger(row.followers), 
        createdAt: ToString(row.created_at), totalViewCount: ToInteger(row.view_count), 
        description: ToString(row.description)}})
        MERGE (l:Language {{name: ToString(row.language)}})
        CREATE (u)-[:SPEAKS]-&amp;gt;(l)
        MERGE (g:Game{{name: ToString(row.game_name)}}) 
        CREATE (u)-[:PLAYS]-&amp;gt;(g);"""
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have created nodes with the labels &lt;code&gt;:User:Stream&lt;/code&gt; and their properties. A streamer speaks certain language and plays a certain game, which is why we have created nodes &lt;code&gt;:Language&lt;/code&gt; and &lt;code&gt;:Game&lt;/code&gt; to represent those connections. Similarly, we have created the whole database, as drawn on the graph schema. &lt;/p&gt;

&lt;p&gt;After our data is loaded into Memgraph, we run the Flask server. Currently, the app doesn't do much. The only thing you can actually check is whether your data is truly in Memgraph. The easiest way, especially if you are a visual type, is by using &lt;a href="https://memgraph.com/docs/memgraph-lab/"&gt;Memgraph Lab&lt;/a&gt;. Since you have a running Memgraph instance, you can just install Memgraph Lab, open it and click on the Connect button. Then, on the tab &lt;strong&gt;Overview&lt;/strong&gt; you can see the total number of nodes and edges in your database. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrMWx9hV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com.fra1.digitaloceanspaces.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-memgraph-lab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrMWx9hV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com.fra1.digitaloceanspaces.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-memgraph-lab.png" alt="memlab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice - our data is really there! Now we can add some simple methods in our backend to try out the connection with Memgraph.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route("/nodes", methods=["GET"])
@log_time
def get_nodes():
    """Get the number of nodes in database."""
    try:
        results = memgraph.execute_and_fetch(
            """MATCH ()
            RETURN count(*) AS nodes;"""
        )

        for result in results:
            num_of_nodes = result['nodes']

        response = {"nodes": num_of_nodes}
        return Response(response=dumps(response), 
                        status=200, 
                        mimetype="application/json")

    except Exception as e:
        log.info("Fetching number of nodes went wrong.")
        log.info(e)
        return ("", 500)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;App route says that we can get the response at &lt;code&gt;localhost:5000/nodes&lt;/code&gt;. The method sends a query to Memgraph which will execute it and fetch the results. In our case, there is only one result, and that is the total number of nodes in the database. We send it as a JSON response. Try it out!&lt;/p&gt;

&lt;p&gt;The idea behind these methods was to find out some interesting statistics about the network. All of them have a similar implementation and you can check them out &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/backend/app.py"&gt;here&lt;/a&gt;. Let's see how we got top games:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route("/top-games/&amp;lt;num_of_games&amp;gt;", methods=["GET"])
@log_time
def get_top_games(num_of_games):
    """Get top num_of_games games by number of streamers who play them."""

    try:
        results = memgraph.execute_and_fetch(
            f"""MATCH (u:User)-[:PLAYS]-&amp;gt;(g:Game)
            RETURN g.name as game_name, COUNT(u) as number_of_players
            ORDER BY number_of_players DESC
            LIMIT {num_of_games};"""
        )

        games_list = list()
        players_list = list()

        for result in results:
            game_name = result['game_name']
            num_of_players = result['number_of_players']
            games_list.append(game_name)
            players_list.append(num_of_players)

        games = [
            {"name": game_name}
            for game_name in games_list
        ]
        players = [
            {"players": player_count}
            for player_count in players_list
        ]

        response = {"games": games, "players": players}
        return Response(response=dumps(response), 
                        status=200, 
                        mimetype="application/json")

    except Exception as e:
        log.info("Fetching top games went wrong.")
        log.info(e)
        return ("", 500)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most popular game is the one that is being played by the most players. We would like to get a game name and the number of players that play it, in descending order. With Cypher queries and Memgraph, that’s pretty easy! After that, we just have to put our data in a dictionary and then the response will be in JSON format and easy to work with. Therefore, the response will be a list of games along with the number of players that play that game, in descending order. The length of the list depends on the argument &lt;code&gt;num_of_games&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Besides general statistics, we would like to visualize some information about streamers. It would be fun to search our database for our favorite streamer. We want to get the game the streamer plays, the language the streamer speaks and the team the streamer is part of.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route("/streamer/&amp;lt;streamer_name&amp;gt;", methods=["GET"])
@log_time
def get_streamer(streamer_name):
    """Get info about streamer whose name is streamer_name."""
    is_streamer = True
    try:
        # Check whether streamer with the given name exists
        counters = memgraph.execute_and_fetch(
            f"""MATCH (u:User {{name:"{streamer_name}"}})
            RETURN COUNT(u) AS name_counter;"""
        )

        for counter in counters:
            if(counter['name_counter'] == 0):
                is_streamer = False

        # If the streamer exists, return its relationships
        if(is_streamer):
            results = memgraph.execute_and_fetch(
                """MATCH (u:User {name:'""" 
                + str(streamer_name) 
                + """'})-[]-&amp;gt;(n)
                RETURN u,n;"""
            )

            links_set = set()
            nodes_set = set()

            for result in results:
                source_id = result['u'].properties['id']
                source_name = result['u'].properties['name']
                source_label = 'Stream'

                target_id = result['n'].properties['name']
                target_name = result['n'].properties['name']
                target_label = list(result['n'].labels)[0]

                nodes_set.add((source_id, source_label, source_name))
                nodes_set.add((target_id, target_label, target_name))

                if (source_id, target_id) not in links_set and (
                    target_id,
                    source_id,
                ) not in links_set:
                    links_set.add((source_id, target_id))

            nodes = [
                {"id": node_id, "label": node_label, "name": node_name}
                for node_id, node_label, node_name in nodes_set
            ]
            links = [{"source": n_id, "target": m_id}
                     for (n_id, m_id) in links_set]
        # If the streamer doesn't exist, return empty response
        else:
            nodes = []
            links = []

        response = {"nodes": nodes, "links": links}
        return Response(response=dumps(response), 
                        status=200, 
                        mimetype="application/json")

    except Exception as e:
        log.info("Fetching streamer by name went wrong.")
        log.info(e)
        return ("", 500)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Through the response we’ll get the streamer node along with the links the streamer is connected to. This data will be useful on the frontend side, where we will be able to draw graphs with this data. Now let’s see how Memgraph’s query modules work, particularly PageRank and Betweenness Centrality algorithms. With these two we will measure the popularity and influence of streamers. Using these procedures you can simply determine which node is the most relevant in your graph. Here is &lt;code&gt;get_page_rank()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route("/page-rank", methods=["GET"])
@log_time
def get_page_rank():
    """Call the Page rank procedure and return top 50 in descending order."""

    try:
        results = memgraph.execute_and_fetch(
            """CALL pagerank.get()
            YIELD node, rank
            WITH node, rank
            WHERE node:Stream OR node:User
            RETURN node, rank
            ORDER BY rank DESC
            LIMIT 50; """
        )

        page_rank_dict = dict()
        page_rank_list = list()

        for result in results:
            user_name = result["node"].properties["name"]
            rank = float(result["rank"])
            page_rank_dict = {"name": user_name, "rank": rank}
            dict_copy = page_rank_dict.copy()
            page_rank_list.append(dict_copy)

        response = {"page_rank": page_rank_list}

        return Response(response=dumps(response), 
                        status=200, 
                        mimetype="application/json")

    except Exception as e:
        log.info("Fetching users' ranks using pagerank went wrong.")
        log.info(e)
        return ("", 500)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We filtered the results by the &lt;code&gt;:Stream&lt;/code&gt; and &lt;code&gt;:User&lt;/code&gt; label, since we are interested in measuring the influence of them, rather than different parts of our graph. There are many different methods which you can implement, but here is the list of the ones you can find in the &lt;a href="https://github.com/memgraph/twitch-analytics-demo/"&gt;repository&lt;/a&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_top_games(num_of_games)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get top num_of_games games by number of streamers who play them.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_top_teams(num_of_teams)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get top num_of_teams teams by number of streamers who are part of them.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_top_vips(num_of_vips)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get top num_of_vips vips by number of streamers who gave them the vip badge.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_top_moderators(num_of_moderators)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get top num_of_moderators moderators by number of streamers who gave them the moderator badge.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_top_streamers_by_views(num_of_streamers)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get top num_of_streamers streamers by total number of views.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_top_streamers_by_followers(num_of_streamers)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get top num_of_streamers streamers by total number of followers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_streamer(streamer_name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get info about streamer whose name is streamer_name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_streamers(language, game)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get all streamers who stream certain game in certain language.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_nodes()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get the number of nodes in database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_edges()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get the number of edges in database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_page_rank()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Call the PageRank procedure and return top 50 in descending order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_bc()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Call the Betweenness centrality procedure and return top 50 in descending order.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it for now! In the next part of this blog post, find out how to build React application on top of the backend, and in the third part, learn how to ingest new data with Kafka and see how we can see that in our visualization. Feel free to join our &lt;strong&gt;&lt;a href="https://discord.gg/memgraph"&gt;Discord Community server&lt;/a&gt;&lt;/strong&gt;, where you can ask any question related to this blog post or anything else you want to know about Memgraph.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>memgraph</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Javascript academy #1: Primitive value vs reference value</title>
      <author>CodeOz</author>
      <pubDate>Fri, 22 Oct 2021 14:43:34 +0000</pubDate>
      <link>https://dev.to/codeoz/javascript-academy-1-primitive-value-vs-reference-value-1phl</link>
      <guid>https://dev.to/codeoz/javascript-academy-1-primitive-value-vs-reference-value-1phl</guid>
      <description>&lt;p&gt;Welcome to this new academy! In this I will NOT explain you javascript from scratch, the aim of this javascript academy is to explain you some concept in javascript that will help you to understand javascript engine!&lt;/p&gt;

&lt;p&gt;Today I will show you the difference between &lt;code&gt;primitive value&lt;/code&gt; &amp;amp; &lt;code&gt;reference value&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primitive-value"&gt;
  &lt;/a&gt;
  Primitive value
&lt;/h3&gt;

&lt;p&gt;Primitive value are &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;symbols&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference-value"&gt;
  &lt;/a&gt;
  Reference value
&lt;/h3&gt;

&lt;p&gt;All others things like &lt;code&gt;plain object {}&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-data-is-stored"&gt;
  &lt;/a&gt;
  How data is stored?
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; the value is store on the &lt;code&gt;stack&lt;/code&gt;, in other word, in the &lt;code&gt;current context!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; the value is store in the &lt;code&gt;heap&lt;/code&gt;, it's a big storage that keep all &lt;code&gt;objects&lt;/code&gt; and each &lt;code&gt;object&lt;/code&gt; has it's own adress! (Like house in a village, each house has its own adress)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VMS8rRJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbtg7oy5bfm308gq4ekx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VMS8rRJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbtg7oy5bfm308gq4ekx.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in order to get the &lt;code&gt;object&lt;/code&gt; through the &lt;code&gt;Heap&lt;/code&gt; you need to use the adress of this &lt;code&gt;object&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gcn98tW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sccdy2tuo5l73p5epshf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gcn98tW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sccdy2tuo5l73p5epshf.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fortunately you don't need to manage the &lt;code&gt;adress&lt;/code&gt; yourself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declaration-of-variable"&gt;
  &lt;/a&gt;
  Declaration of variable
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; the variable store the value. So you manipulate the &lt;code&gt;actual value&lt;/code&gt; stored in this variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiF5mt5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3r95z6sqv2tnuiake6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiF5mt5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3r95z6sqv2tnuiake6.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; unlike primitive value when you manipulate an object you work on the &lt;code&gt;reference&lt;/code&gt; of that object! So you store the &lt;code&gt;reference&lt;/code&gt; of the object in the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { a: 'hello' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWd7x-8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvt09t48t7al2q1rqnqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWd7x-8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvt09t48t7al2q1rqnqy.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copy-a-value"&gt;
  &lt;/a&gt;
  Copy a value
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; when you assign a variable that store &lt;code&gt;primitive value&lt;/code&gt; it will copy the &lt;code&gt;value&lt;/code&gt; into a new variable.&lt;/p&gt;

&lt;p&gt;So if you modify the value into a variable, the other variable value will be not changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtVidYs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oq0t2t3tcpn0axlsqese.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtVidYs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oq0t2t3tcpn0axlsqese.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; when you assign a variable that store &lt;code&gt;reference value&lt;/code&gt; it will copy the &lt;strong&gt;reference&lt;/strong&gt; of this object into a new variable.&lt;/p&gt;

&lt;p&gt;So if you modify the value into a variable, the other variable value will change! Since both variable share the same &lt;code&gt;reference&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { toto: 'hello' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---voTBrJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s5ohwdwxcyei60l92u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---voTBrJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s5ohwdwxcyei60l92u1.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-with-function-parameters"&gt;
  &lt;/a&gt;
  Working with function parameters
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; when you pass a variable that contains a &lt;code&gt;primitive value&lt;/code&gt; as arguments of your function, it will copy the &lt;code&gt;value&lt;/code&gt; of this variable.&lt;/p&gt;

&lt;p&gt;So if you edit this value into the function, it will not change the value in the original variable!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; when you pass a variable that contains a &lt;code&gt;reference value&lt;/code&gt; as arguments of your function, it will copy the &lt;code&gt;reference&lt;/code&gt; of this variable.&lt;/p&gt;

&lt;p&gt;So if you edit this value into the function, it will change the value in the original variable!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;changed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { toto: 'changed' }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { toto: 'changed' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see when you are working with &lt;code&gt;reference value&lt;/code&gt; you can edit other variable that are sharing this &lt;code&gt;reference value&lt;/code&gt;!&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;🎁 You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and MP me 😁&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; 🙏&lt;/p&gt;

&lt;p&gt;🏃‍♂️ You can follow me on 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark 🔖 this article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>API Integration Testing Made Easy</title>
      <author>Anudeep</author>
      <pubDate>Fri, 22 Oct 2021 14:37:51 +0000</pubDate>
      <link>https://dev.to/asaianudeep/api-integration-testing-made-easy-1lcp</link>
      <guid>https://dev.to/asaianudeep/api-integration-testing-made-easy-1lcp</guid>
      <description>&lt;p&gt;Writing integration tests for API's is challenging in a micro-services world as it involves multiple API's from multiple components.&lt;/p&gt;

&lt;p&gt;In this article we will be focusing on the two major challenges of writing API Integration Testing. It also talks about how to overcome them by using modern testing tools and techniques. We will be using &lt;strong&gt;PactumJS&lt;/strong&gt; to write automated API integration test cases.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pactumjs"&gt;
        pactumjs
      &lt;/a&gt; / &lt;a href="https://github.com/pactumjs/pactum"&gt;
        pactum
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      REST API Testing Tool for all levels in a Test Pyramid
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;span&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/61209e8931a18fd1fc1c40367761b9c979a32faacd2a2d17d299b220dce89afd/68747470733a2f2f70616374756d6a732e6769746875622e696f2f5f6d656469612f6c6f676f2d69636f6e2d736d616c6c2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/61209e8931a18fd1fc1c40367761b9c979a32faacd2a2d17d299b220dce89afd/68747470733a2f2f70616374756d6a732e6769746875622e696f2f5f6d656469612f6c6f676f2d69636f6e2d736d616c6c2e737667" alt="logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
PactumJS&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/pactumjs/pactum/workflows/Build/badge.svg?branch=master"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CrgUMJTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/pactumjs/pactum/workflows/Build/badge.svg%3Fbranch%3Dmaster" alt="Build"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f781f113e5665cff6f0f56079cd164ac4174df4b5835840b42bce4a966cb3248/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f636f7665726167652f41536169416e75646565702f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/f781f113e5665cff6f0f56079cd164ac4174df4b5835840b42bce4a966cb3248/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f636f7665726167652f41536169416e75646565702f70616374756d" alt="Coverage"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/985ec3a7bbfbd58e0e93a2d600ad082ca889f0710eae24c5edeac684384ccbcb/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/985ec3a7bbfbd58e0e93a2d600ad082ca889f0710eae24c5edeac684384ccbcb/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f70616374756d" alt="Downloads"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6cced005661e068f85f7b5fbc9bd1e3071a63f8c1102ce2f471d808b9c9c579f/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/6cced005661e068f85f7b5fbc9bd1e3071a63f8c1102ce2f471d808b9c9c579f/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f70616374756d" alt="Size"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c5a39924faef1667603859415235f655385662addbce6030d7941a2f2e2a773e/68747470733a2f2f696d672e736869656c64732e696f2f6e6f64652f762f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/c5a39924faef1667603859415235f655385662addbce6030d7941a2f2e2a773e/68747470733a2f2f696d672e736869656c64732e696f2f6e6f64652f762f70616374756d" alt="Platform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pactumjs/pactum/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/d9d21f154f835c3a91a923eb30f79018026b3aa6bf6816abe532c036e788b492/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f70616374756d6a732f70616374756d3f7374796c653d736f6369616c" alt="Stars"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/pactumjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fe1b8dffa1edfeb9926570db3cf0b71589a5652aa0a4349f99f9fc53d210fac2/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f70616374756d6a733f6c6162656c3d466f6c6c6f77267374796c653d736f6369616c" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
REST API Testing Tool for all levels in a Test Pyramid&lt;/h4&gt;
&lt;/span&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href="https://pactumjs.github.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mx2rcYWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/pactumjs/pactum/master/assets/demo.gif" alt="PactumJS Demo"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;PactumJS&lt;/strong&gt; is a REST API Testing Tool used to automate e2e, integration, contract &amp;amp; component (&lt;em&gt;or service level&lt;/em&gt;) tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
⚡ Swift&lt;/li&gt;
&lt;li&gt;
🎈 Lightweight&lt;/li&gt;
&lt;li&gt;
🚀 Simple &amp;amp; Powerful&lt;/li&gt;
&lt;li&gt;
🛠️ Compelling Mock Server&lt;/li&gt;
&lt;li&gt;
💎 Elegant Data Management&lt;/li&gt;
&lt;li&gt;
🔧 Extendable &amp;amp; Customizable&lt;/li&gt;
&lt;li&gt;
📚 Clear &amp;amp; Comprehensive Testing Style&lt;/li&gt;
&lt;li&gt;
🔗 Component, Contract &amp;amp; E2E testing of APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxNpakPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png" alt="----------"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;This readme offers an basic introduction to the library. Head over to the full documentation at &lt;a href="https://pactumjs.github.io" rel="nofollow"&gt;https://pactumjs.github.io&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/api-testing" rel="nofollow"&gt;API Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/integration-testing" rel="nofollow"&gt;Integration Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/component-testing" rel="nofollow"&gt;Component Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/contract-testing" rel="nofollow"&gt;Contract Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/e2e-testing" rel="nofollow"&gt;E2E Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/mock-server" rel="nofollow"&gt;Mock Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Need Help&lt;/h2&gt;
&lt;p&gt;We use Github &lt;a href="https://github.com/pactumjs/pactum/discussions"&gt;Discussions&lt;/a&gt; to receive feedback, discuss ideas &amp;amp; answer questions.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; install pactum as a dev dependency&lt;/span&gt;
npm install --save-dev pactum
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; install a test runner to run pactum tests&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; mocha / jest / cucumber&lt;/span&gt;
npm install --save-dev mocha&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxNpakPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png" alt="----------"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Usage&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;pactum&lt;/strong&gt; can be used for all levels…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pactumjs/pactum"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h2&gt;

&lt;p&gt;These are the two things of many that I personally felt challenging while writing API Integration Tests.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Passing data across tests.&lt;/li&gt;
&lt;li&gt;Retry on failed expectations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;It's always better to have an example to understand the core concepts of a topic under discussion.&lt;/p&gt;

&lt;p&gt;Let's take a simple example of an e-commerce application with the following API endpoints for processing an order.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;/api/orders&lt;/code&gt; (&lt;em&gt;for placing an order&lt;/em&gt;) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;/api/payments&lt;/code&gt; (&lt;em&gt;for making a payment&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/payments/{payment_id}&lt;/code&gt; (&lt;em&gt;for fetching the status of payment&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;To make things clear, the requests and responses shown below are overly simplified.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-place-order"&gt;
  &lt;/a&gt;
  Step 1 - Place Order
&lt;/h4&gt;

&lt;p&gt;A user comes in and makes a &lt;strong&gt;POST&lt;/strong&gt; request to &lt;code&gt;/api/orders&lt;/code&gt; with the following payload to place an order.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#request-payload"&gt;
  &lt;/a&gt;
  Request Payload
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"product"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PlayStation 5"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;At the time of writing this article, it's highly impossible to buy the above product. At-least in some places.&lt;/em&gt; 🙂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the server responds with the following response body which contains the order &lt;code&gt;id&lt;/code&gt;. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#response"&gt;
  &lt;/a&gt;
  Response
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1f4c99e9-12df-45d4-b455-98418f4e3b1e"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This order &lt;code&gt;id&lt;/code&gt; is dynamically generated by the API server. We need to grab it and pass it to the other endpoints like &lt;strong&gt;payments&lt;/strong&gt; to complete the order.&lt;/p&gt;

&lt;p&gt;Using any testing library, we can save the response in a variable and use them later. It works but not efficient. Because when we write integration tests for large scale applications, it forces us to pass significant amount of data between tests and API calls. Declaring intermediary variables will damage the readability of the code.&lt;/p&gt;

&lt;p&gt;To overcome this challenge PactumJS comes with a concept of &lt;a href="https://pactumjs.github.io/#/integration-testing?id=stores"&gt;Data Store&lt;/a&gt; to pass data between API calls across tests.&lt;/p&gt;

&lt;p&gt;Let's look at the test first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PlayStation 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OrderID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above test will make a &lt;strong&gt;POST&lt;/strong&gt; request to &lt;code&gt;/api/orders&lt;/code&gt; with given &lt;code&gt;json&lt;/code&gt; payload and once the response is received it expects the status should be &lt;code&gt;200&lt;/code&gt; and &lt;strong&gt;stores&lt;/strong&gt; the value of &lt;code&gt;id&lt;/code&gt; into a special variable called &lt;code&gt;OrderID&lt;/code&gt; which is internal to PactumJS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-make-payment"&gt;
  &lt;/a&gt;
  Step 2 - Make Payment
&lt;/h4&gt;

&lt;p&gt;The next step is to make the payment. Now the user makes a &lt;strong&gt;POST&lt;/strong&gt; request to &lt;code&gt;/api/payments&lt;/code&gt; with the following payload.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#request-payload"&gt;
  &lt;/a&gt;
  Request Payload
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"order_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1f4c99e9-12df-45d4-b455-98418f4e3b1e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"card_info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1111-1111-1111-1111"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"expiry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"11/11"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cvv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"111"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the API responds with the following response body which contains payment &lt;code&gt;id&lt;/code&gt;. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#response"&gt;
  &lt;/a&gt;
  Response
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a32fce50-d4e8-4d95-b16f-57fd13fbb7df"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's talk about the test case.&lt;/p&gt;

&lt;p&gt;As you observed, the &lt;code&gt;order id&lt;/code&gt; from the previous request is included in the request payload.&lt;/p&gt;

&lt;p&gt;To get the value of special internal variable, PactumJS uses a special pattern - &lt;code&gt;$S{&amp;lt;variable-name&amp;gt;}&lt;/code&gt; to access it.&lt;/p&gt;

&lt;p&gt;Let's look at the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;order_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$S{OrderID}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card_info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1111-1111-1111-1111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expiry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;11/11&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cvv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PaymentID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PactumJS will internally replace &lt;code&gt;$S{OrderID}&lt;/code&gt; with &lt;code&gt;1f4c99e9-12df-45d4-b455-98418f4e3b1e&lt;/code&gt; before making the request.&lt;/p&gt;

&lt;p&gt;In the above test case we are also saving the payment &lt;code&gt;id&lt;/code&gt; into the special variable &lt;code&gt;PaymentId&lt;/code&gt; using the &lt;strong&gt;stores&lt;/strong&gt; method. Using the payment &lt;code&gt;id&lt;/code&gt; we can track the status of the payment. So this brings us to the final step of our integration test.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-wait-for-payment-to-be-completed"&gt;
  &lt;/a&gt;
  Step 3 - Wait for Payment to be completed.
&lt;/h4&gt;

&lt;p&gt;To get the status of the payment, user makes a &lt;strong&gt;GET&lt;/strong&gt; request to the &lt;code&gt;/api/payments/{payment_id}&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;The API responds with the following response body. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#response"&gt;
  &lt;/a&gt;
  Response
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in-progress"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see, the status is still &lt;code&gt;in-progress&lt;/code&gt;. We need to wait for few seconds for the payment to be completed.&lt;/p&gt;

&lt;p&gt;Including hard waits is a bad practice in testing. PactumJS comes with a concept of &lt;a href="https://pactumjs.github.io/#/integration-testing?id=retry-mechanism"&gt;retry mechanism&lt;/a&gt; which retries on failed expectations. It is similar to &lt;strong&gt;fluent wait&lt;/strong&gt; in selenium.&lt;/p&gt;

&lt;p&gt;Let's look at the test case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments/{id}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withPathParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$S{PaymentID}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default it retries &lt;code&gt;3&lt;/code&gt; times with a delay of &lt;code&gt;1000ms&lt;/code&gt; between each retry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-test"&gt;
  &lt;/a&gt;
  Complete Test
&lt;/h2&gt;

&lt;p&gt;Now let's take a look at the entire test using &lt;a href="https://pactumjs.github.io"&gt;PactumJS&lt;/a&gt; and &lt;a href="https://mochajs.org/"&gt;mocha&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pactum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;order PS5 and make payment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PlayStation 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OrderID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;order_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$S{OrderID}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card_info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1111-1111-1111-1111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expiry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;11/11&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cvv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PaymentID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments/{id}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withPathParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$S{PaymentID}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Writing readable and maintainable tests is very important to make API testing productive and enjoyable experience. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pactumjs.github.io"&gt;PactumJS&lt;/a&gt; abstracts the challenging parts to write tests in an easy and fun way and ultimately making API Integration testing super easy.  &lt;/p&gt;

</description>
      <category>api</category>
      <category>testing</category>
      <category>javascript</category>
      <category>pactumjs</category>
    </item>
    <item>
      <title>Open Source With Hacktoberfest</title>
      <author>Seth Addo</author>
      <pubDate>Fri, 22 Oct 2021 14:36:15 +0000</pubDate>
      <link>https://dev.to/seths10/open-source-with-hacktoberfest-26dp</link>
      <guid>https://dev.to/seths10/open-source-with-hacktoberfest-26dp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-hacktoberfest"&gt;
  &lt;/a&gt;
  What is Hacktoberfest
&lt;/h2&gt;

&lt;p&gt;Open Source is changing the world, one contribution at a time.&lt;br&gt;
&lt;strong&gt;Hacktoberfest&lt;/strong&gt; is a month-long celebration of open source development run by &lt;strong&gt;Digital Ocean&lt;/strong&gt;. It is open to everyone, from firs-time contributors to seasoned open source developers.&lt;br&gt;
Your journey starts with a pull request. After submitting four pull requests, you get the chance to win a &lt;code&gt;T-Shirt&lt;/code&gt; or &lt;code&gt;Plant a tree&lt;/code&gt;&lt;br&gt;
This year's hacktoberfest is presented by &lt;strong&gt;DigitalOcean&lt;/strong&gt;, &lt;strong&gt;AppWrite&lt;/strong&gt;, &lt;strong&gt;Intel&lt;/strong&gt;, &lt;strong&gt;DeepSource&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;Anyone around the globe who desires to help drive the growth of open source and make positive contributions to an ever-growing community. All backgrounds and skill levels are encouraged to participate and learn more.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To contribute, Always look for repositories on GitHub with the #hacktoberfest-2021 or #hactoberfest tag&lt;br&gt;
&lt;a href="https://www.hacktoberfest.digitalocean.com"&gt;Hacktoberfest Link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#ways-to-contribute-to-repositories"&gt;
  &lt;/a&gt;
  Ways To Contribute To Repositories:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bug Fixes&lt;/li&gt;
&lt;li&gt;Writing tests for projects&lt;/li&gt;
&lt;li&gt;Writing of Documentations/Technical Writing&lt;/li&gt;
&lt;li&gt;and many more&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#some-projects-to-contribute"&gt;
  &lt;/a&gt;
  Some Projects To Contribute:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Hoppscotch&lt;/strong&gt;:
Hoppscotch is an open source API Development ecosystem. You can test, save, share, collaborate, document API's in real-time and many more.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;
  &lt;a href="#stats-for-hoppscotch"&gt;
  &lt;/a&gt;
  Stats for hoppscotch
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Used by 500,000+ developers&lt;/li&gt;
&lt;li&gt;Over 32,000 GitHub stars&lt;/li&gt;
&lt;li&gt;21,000+ monthly users
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hoppscotch"&gt;
        hoppscotch
      &lt;/a&gt; / &lt;a href="https://github.com/hoppscotch/hoppscotch"&gt;
        hoppscotch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      👽 Open source API development ecosystem https://hoppscotch.io
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.&lt;strong&gt;TheDevDojo/Wave&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thedevdojo"&gt;
        thedevdojo
      &lt;/a&gt; / &lt;a href="https://github.com/thedevdojo/wave"&gt;
        wave
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Wave - The Software as a Service Starter Kit, designed to help you build the SAAS of your dreams 🚀 💰 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;3.&lt;strong&gt;TheDevDojo/Tails&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thedevdojo"&gt;
        thedevdojo
      &lt;/a&gt; / &lt;a href="https://github.com/thedevdojo/tails"&gt;
        tails
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Tails Open Source Components are a (no-config) copy'n paste free collection of hand-crafted templates and components built in TailwindCSS.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Thanks for your time and don’t forget to be friends with me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitter.com/set_addo"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.github.com/seths10"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>hacktoberfest</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
