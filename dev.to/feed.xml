<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How Tailwind Can Help You Code Faster</title>
      <author>Kyle Prinsloo üöÄ</author>
      <pubDate>Sun, 30 May 2021 09:09:16 +0000</pubDate>
      <link>https://dev.to/study_web_dev/how-tailwind-can-help-you-code-faster-b93</link>
      <guid>https://dev.to/study_web_dev/how-tailwind-can-help-you-code-faster-b93</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-tailwindcss"&gt;
  &lt;/a&gt;
  What is TailwindCSS?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; is a CSS framework used for rapidly building websites without leaving your HTML. It should not be confused with &lt;a href="https://tailwindui.com/"&gt;TailwindUI&lt;/a&gt; which is a set of prebuilt HTML templates (using TailwindCSS) created by the makers of TailwindCSS.&lt;/p&gt;

&lt;p&gt;Tailwind have tailored it to be a "highly customizable, low-level CSS framework". This allows you to be able to build out custom components in a &lt;a href="https://locastic.com/blog/i-was-wrong-about-utility-first-css-and-here-is-why/#:~:text=The%20general%20idea%20behind%20utility%2Dfirst%20CSS&amp;amp;text=Utility%2Dfirst%20flips%20that%20idea,them%20to%20its%20HTML%20element."&gt;utility-first approach&lt;/a&gt; which has saved developers hours of work by improving their workflow.&lt;/p&gt;

&lt;p&gt;TailwindCSS has been compared to Bootstrap but this comparison is flawed for one major reason...&lt;/p&gt;

&lt;p&gt;Bootstrap is a great way for beginners to build out designs quickly because it comes with pre-designed components. It is exactly this "pre-built" nature of Bootstrap though that makes it somewhat inflexible and a hindrance for developers looking to simply extend or modify existing Bootstrap styles.&lt;/p&gt;

&lt;p&gt;I'm not saying it can't be done... because it can.&lt;/p&gt;

&lt;p&gt;But the almost atomic approach to Tailwind is what sets it apart from Bootstrap. Tailwind provides you with the building blocks which you can then use to construct your designs in a manner you see fit without the annoying problem of mistakenly overriding styles or battling with default configurations.&lt;/p&gt;

&lt;p&gt;Tailwind makes your life easier as a developer, whether you're a pro at CSS or not.&lt;/p&gt;

&lt;p&gt;Writing CSS more easily means less frustration and more productivity - important factors for all of us who value our time.&lt;/p&gt;

&lt;p&gt;How can TailwindCSS help you code faster? Let's look into that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits-of-using-tailwind"&gt;
  &lt;/a&gt;
  Benefits of Using Tailwind
&lt;/h1&gt;

&lt;p&gt;Tailwind not only saves you time as a developer, but also makes the whole process of writing CSS quite enjoyable.&lt;/p&gt;

&lt;p&gt;It's predictable in that it uses meaningful variables and predefined classes while outputting a very small bundle size with PurgeCSS. Custom CSS components are even possible with TailwindCSS thanks to the possibility of composing a parent class with a number of Tailwind utility classes.&lt;/p&gt;

&lt;p&gt;This is just the start of the benefits of Tailwind. Here are a few more:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-easy-onboarding"&gt;
  &lt;/a&gt;
  1. Easy Onboarding
&lt;/h2&gt;

&lt;p&gt;Say you work on a project and a new developer is brought in.&lt;/p&gt;

&lt;p&gt;Getting the new developer up to speed with the codebase can take a significant amount of time due to it being new code.&lt;/p&gt;

&lt;p&gt;This is completely normal. &lt;/p&gt;

&lt;p&gt;Add in the complexity that even well-written CSS brings in and the chances of a quick, seamless under-one-hour onboarding becomes a dream. Fair to say that a project‚Äôs CSS code can be a significant hurdle to get over before the developer is able to confidently extend and modify the existing codebase. &lt;/p&gt;

&lt;p&gt;Tailwind comes to the rescue here as it provides all the naming and organization which remains consistent across projects. &lt;/p&gt;

&lt;p&gt;Sure, there are of course means for complexity thanks to Tailwind‚Äôs extensibility which allows custom configs to be set up. But, overall, the barrier to entry is several magnitudes lower than when walking into a vanilla CSS or &lt;a href="https://webdesign.tutsplus.com/articles/an-introduction-to-css-in-js-examples-pros-and-cons--cms-33574"&gt;CSS-in-JS&lt;/a&gt; codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-zero-context-switching"&gt;
  &lt;/a&gt;
  2. Zero Context Switching
&lt;/h2&gt;

&lt;p&gt;It is completely possible to style out your entire HTML without physically leaving the HTML code when using Tailwind.&lt;/p&gt;

&lt;p&gt;This is a true time-saver. Just think about the number of times you‚Äôve looked at your HTML, gone into the CSS to make a tweak, and then spent at least a second or two picking up where you left off in the HTML. &lt;/p&gt;

&lt;p&gt;While this may sound trivial at first glance, anyone who has coded for a long time will know how these little context switches can break concentration or, at the very least, waste a lot of time over months and years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-existing-design-system"&gt;
  &lt;/a&gt;
  3. Existing Design System
&lt;/h2&gt;

&lt;p&gt;Working out font scales, consistent spacing rhythms and color variants can take ages for those who are not designers or developers who have not had a perfectly annotated design handed over to them.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is quite common.&lt;/p&gt;

&lt;p&gt;Fortunately, Tailwind solves this issue by providing the &lt;a href="https://www.invisionapp.com/inside-design/guide-to-design-systems/"&gt;design system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A design system set in place allows for less mental overhead deciding between two very similar shades of teal or a slightly smaller font size. &lt;/p&gt;

&lt;p&gt;A design system is constraining which is necessary for those that want to build slick and consistent layouts in the shortest possible time frame. This allows for more time focused on writing code that gets the job done without sacrificing design quality. &lt;/p&gt;

&lt;p&gt;Tailwind‚Äôs design system is extensible, so the constraints can be overridden. But it is this initial system that saves developers oodles of time when they just want to get up and running as quickly as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-logical-utilities"&gt;
  &lt;/a&gt;
  4. Logical Utilities
&lt;/h2&gt;

&lt;p&gt;The days of racking your brain for a new class name that fits in the rest of your CSS code are over, thanks to Tailwind. &lt;/p&gt;

&lt;p&gt;All the classes used are utility classes meaning that they correlate to a very small, modular snippet of CSS code which is often only one line long. What this gives you is atomic control of your layouts without any issues of unintentionally overriding previous styles. &lt;/p&gt;

&lt;p&gt;These utility classes are used directly in the HTML allowing you to easily see where you‚Äôve repeated or overridden yourself. This reduces code duplication and a common source of developer frustration.&lt;/p&gt;

&lt;p&gt;For example, the class ‚Äúmt-4‚Äù can be added as a class directly to an HTML element. This would add a top margin of 1 REM (typically 16px) to the element it has been applied to.&lt;/p&gt;

&lt;p&gt;Should you wish to bundle a few utility classes into one parent class such as ‚Äú.button‚Äù, Tailwind have made it simple by allowing you to use the &lt;a href="https://tailwindcss.com/docs/functions-and-directives#apply"&gt;‚Äú@apply‚Äù directive&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Adding the ‚Äú.button‚Äù  class to an HTML element will then apply all the utilities defined under the ‚Äú.button‚Äù CSS class. This improves readability and allows for time-saving reusability if you have multiple HTML elements you‚Äôd like to use the ‚Äú.button‚Äù class on.&lt;/p&gt;

&lt;p&gt;While the atomic, utility-based Tailwind classes will serve your design needs almost every time, Tailwind has been built in a way that allows you to further customize the system when needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-responsiveness-is-a-priority"&gt;
  &lt;/a&gt;
  5. Responsiveness is a Priority
&lt;/h2&gt;

&lt;p&gt;Responsive designs are an absolute must with over 50% of web content being viewed on mobile these days. It‚Äôs simple, if you‚Äôre not building responsive layouts then you‚Äôre locking out a certain number of users or giving them an awful experience when interacting with your sites.&lt;/p&gt;

&lt;p&gt;Making your designs responsive could not be any easier or faster with Tailwind thanks to what they‚Äôve termed ‚Äúvariants‚Äù.&lt;/p&gt;

&lt;p&gt;All of the Tailwind utilities are generated with &lt;a href="https://tailwindcss.com/docs/responsive-design"&gt;responsive versions&lt;/a&gt;, or variants, allowing you to simply prepend a certain size (‚Äúxs:‚Äù, ‚Äúsm:‚Äù, ‚Äúlg:‚Äù, ‚Äúxl:‚Äù, etc.) to a utility class for it to only apply at that size. By default, Tailwind classes apply to the smallest screen size so it‚Äôs best to use the responsive sizing names as your screen size increases.&lt;/p&gt;

&lt;p&gt;Gone are the days of writing out separate CSS for your various screen breakpoints which can often lead to overriding issues which sap more development time.&lt;/p&gt;

&lt;p&gt;Customization is also possible here.&lt;/p&gt;

&lt;p&gt;If you would like to customize your desired screen sizes then you can redefine what the variant prefixes correspond to, in terms of pixel width, in a special Tailwind config file that is generated when starting a Tailwind project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-smaller-bundle-size-to-save-your-users-time"&gt;
  &lt;/a&gt;
  6. Smaller Bundle Size to Save Your Users Time
&lt;/h2&gt;

&lt;p&gt;Tailwind doesn‚Äôt just save you time as a developer, it also saves your users time. &lt;/p&gt;

&lt;p&gt;You may not think so when you first lay your eyes on the CSS file outputted by Tailwind (around 480kb).&lt;/p&gt;

&lt;p&gt;But‚Ä¶&lt;/p&gt;

&lt;p&gt;Tailwind initially comes packaged with all of the possible utilities you may need. This naturally results in a huge CSS file which you certainly shouldn‚Äôt ship to production if you care even the slightest about site load times and user satisfaction.&lt;/p&gt;

&lt;p&gt;What this initial, large CSS file allows for is fast prototyping in the development environment. You‚Äôre able to add and remove different utilities in your HTML without having to touch the CSS file. The magic happens when you‚Äôre ready to ship your code to production‚Ä¶&lt;/p&gt;

&lt;p&gt;Tailwind is set up to work with PurgCSS and a simple build command will tell PurgeCSS (defined in the tailwind.config.js file) to go through the HTML and find all the Tailwind utilities used.&lt;/p&gt;

&lt;p&gt;PurgeCSS then rakes the development Tailwind CSS file and removes all the utilities not used in the HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/docs/optimizing-for-production#purge-css-options"&gt;Setting up PurgeCSS to work with Tailwind&lt;/a&gt; is easy thanks to the fantastic explanation over on the TailwindCSS website.&lt;/p&gt;

&lt;p&gt;In this way, the generated CSS file for production is greatly reduced in size and only includes what is actually used in the HTML. The client now only loads the CSS necessary for the site to work which means no time is spent loading useless code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#limitations-of-tailwind"&gt;
  &lt;/a&gt;
  Limitations of Tailwind
&lt;/h1&gt;

&lt;p&gt;Nothing is perfect (except for my tennis forehand), not even Tailwind. &lt;/p&gt;

&lt;p&gt;While it has a ton of benefits like improving consistency, performance, and developer time-efficiency, no library is perfect for every developer or team and Tailwind is no different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-readability"&gt;
  &lt;/a&gt;
  1. Readability
&lt;/h2&gt;

&lt;p&gt;The first glaringly obvious limitation, at least to those who are new to Tailwind, is its readability. Those coming from a BEM-style of writing their CSS may be totally put off by HTML littered with tiny class names which appear to clog what is happening in the code.&lt;/p&gt;

&lt;p&gt;This is actually not a limitation that lasts very long. Most developers who have felt annoyed by this initially learn to get used to the way it reads. In fact, some have done full 180, like Shawn Wang, &lt;a href="https://twitter.com/swyx"&gt;Swyx&lt;/a&gt;, who went from calling it &lt;a href="https://twitter.com/swyx/status/1303769383278268416"&gt;‚Äúclassname soup‚Äù to saying ‚ÄúTailwind is easier to learn than I thought‚Äù&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ‚Äúclassname soup‚Äù can certainly be off-putting but there are component abstractions (remember the ‚Äú.button‚Äù class we spoke of earlier?) that can mitigate this and generally your eyes will learn to get used to and may even learn to love it (if you don‚Äôt already).&lt;/p&gt;

&lt;p&gt;With TailwindCSS, what you see is what you get. If you are initially a little put off, give it some time by viewing it as a learning curve. If you still cannot accept all the Tailwind utility names in your HTML, then abstract them to custom CSS names and use them as you normally would use CSS classes.&lt;/p&gt;

&lt;p&gt;You‚Äôd still be getting most of the benefits of using Tailwind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-lack-of-complex-animation-support"&gt;
  &lt;/a&gt;
  2. Lack of Complex Animation Support
&lt;/h2&gt;

&lt;p&gt;Only support for simple animations is included. More can be added through the config file but more difficult animations are tricky if you want to do them strictly with Tailwind. &lt;/p&gt;

&lt;p&gt;If you are after complex animations, then you may be better served by writing vanilla CSS or using an animation library.&lt;/p&gt;

&lt;p&gt;But most cases will be served well by the handy animations that come with Tailwind such as ‚Äú.animate-pulse‚Äù, ‚Äú.animate-bounce‚Äù, and ‚Äú.animate-ping‚Äù.&lt;/p&gt;

&lt;p&gt;I‚Äôm sure they will be adding more animations to this in the future though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tailwind is a hugely beneficial CSS framework that has several fantastic benefits if you‚Äôre a developer looking to build out great-looking designs as quickly as possible.&lt;/p&gt;

&lt;p&gt;Working quickly often involves a trade-off of some kind such as quality, but using Tailwind allows you to save time and improve the quality of your code and layouts.&lt;/p&gt;

&lt;p&gt;It achieves this by providing a design system that is easy to understand and extend.&lt;/p&gt;

&lt;p&gt;While many still prefer to write vanilla CSS or use CSS-in-JS, Tailwind provides us with a way to get sites up quickly without making speed or design sacrifices. It doesn‚Äôt have to replace your vanilla CSS but can be used in conjunction with it. &lt;/p&gt;

&lt;p&gt;You could, for example, write out all your base layouts using Tailwind and then use vanilla CSS for custom animations or very specific, repeating components. &lt;/p&gt;

&lt;p&gt;Either way, you should certainly give Tailwind a chance as it has the potential to drastically improve your efficiency as a developer.&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in learning how to use Tailwind, check out &lt;a href="https://tailwindcss.com/docs"&gt;their fantastic docs&lt;/a&gt;. The &lt;a href="https://www.youtube.com/tailwindlabs"&gt;screencasts&lt;/a&gt; are also a great way to see Tailwind in action as the creator, Adam Wathan, shows.&lt;/p&gt;

&lt;p&gt;What do you think of Tailwind?&lt;/p&gt;

&lt;p&gt;I‚Äôd also like to thank to &lt;a href="https://twitter.com/ReyTheDev"&gt;Rey&lt;/a&gt; for his great help with this article &amp;lt;3&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Escaping Ctrl + S in Vs Code</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Sun, 30 May 2021 08:09:15 +0000</pubDate>
      <link>https://dev.to/amritanshu/escaping-ctrl-s-in-vs-code-1o86</link>
      <guid>https://dev.to/amritanshu/escaping-ctrl-s-in-vs-code-1o86</guid>
      <description>&lt;p&gt;Are you also tired of pressing ctrl + s every single time?&lt;/p&gt;

&lt;p&gt;Here you can change your setting to AutoSave&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Vs code -&amp;gt; Click on file -&amp;gt; Select AutoSave&lt;/strong&gt;**&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e15nV4NR6b8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Twitter:
&lt;a href="https://twitter.com/NewGenDeveloper"&gt;https://twitter.com/NewGenDeveloper&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>codenewbie</category>
      <category>code</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Host your React App on your custom domain or its sub-domain using AWS Amplify and Route 53</title>
      <author>karanb86</author>
      <pubDate>Sun, 30 May 2021 08:00:37 +0000</pubDate>
      <link>https://dev.to/karanbd86/host-your-react-app-on-your-custom-domain-or-its-sub-domain-using-aws-amplify-and-route-53-45c</link>
      <guid>https://dev.to/karanbd86/host-your-react-app-on-your-custom-domain-or-its-sub-domain-using-aws-amplify-and-route-53-45c</guid>
      <description>&lt;p&gt;Hey everyone, hope y'all are safe and sound.&lt;br&gt;
I recently purchased a custom domain for my portfolio from &lt;a href="https://godaddy.com/"&gt;GoDaddy&lt;/a&gt;. This was my first time when I was purchasing domain and was all set to host my portfolio on it.&lt;/p&gt;

&lt;p&gt;The process was not straight forward, also I couldn't find enough help from the internet. But after few hit&amp;amp;trials, I finally managed to accomplished my goal.&lt;/p&gt;

&lt;p&gt;Therefore I am jotting down few steps from my experience, which one can follow to deploy their react app in the easiest way on their custom domain using AWS Amplify.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I am assuming that you already have a react-app ready and pushed to your github(or any other version control service) repository.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#part1-deploy-react-app-on-aws-amplify"&gt;
  &lt;/a&gt;
  PART-1: DEPLOY REACT APP ON AWS AMPLIFY
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Visit &lt;a href="https://aws.amazon.com/"&gt;aws.amazon.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create an account on AWS.&lt;/li&gt;
&lt;li&gt;You will be required to add your basic details, and also a payment method.
&lt;strong&gt;NOTE&lt;/strong&gt;: You don't need to pay for anything in this guide, this payment method will just be used when you exclusively use a paid service.&lt;/li&gt;
&lt;li&gt;Once you sign-up, go to &lt;a href="https://console.aws.amazon.com"&gt;AWS console&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;On the top-left corner, can be seen services dropdown which will enlist the services provided by AWS in the following way:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YG_-SLHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwhvd5esfqd1on4qfaas.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Look around for &lt;em&gt;AWS Amplify&lt;/em&gt; that should be present under &lt;em&gt;Front-end Web &amp;amp; Mobile&lt;/em&gt; category.&lt;/li&gt;
&lt;li&gt;Open AWS Amplify, and scroll to bottom of the page to reach here:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Utb7_pD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwlcrpxbbqdzj295c4z2.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;As we want to host our react-app, we will click on &lt;strong&gt;Get Started&lt;/strong&gt; button under the &lt;em&gt;&lt;strong&gt;Deliver&lt;/strong&gt;&lt;/em&gt; section.&lt;/li&gt;
&lt;li&gt;Select any of these version control services where your git repository lies:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJqgFfe0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqp3yghyhjv0wu1ajzyq.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;A new user will be required to authorize the selected service.&lt;/li&gt;
&lt;li&gt;Once the authentication is successful, you will be presented with a list of your repositories.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ytl5946--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s46pumh184gf3a715nnu.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Once you select the repository, another dropdown with the available branches will appear.&lt;/li&gt;
&lt;li&gt;Select the branch which you want to deploy and click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Amplify will now read the build settings of your app from your repository and show you a preview of it.
Yoo do not need to change anything, so just click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Now, a final review will be shown before deploy.
Again no changes are to be made, so click on &lt;strong&gt;Save and deploy&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Wait for the deploy to complete:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4z6rrhZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i01mp3g7yo5h0wus92xj.png" alt="image"&gt;

&lt;ol&gt;
&lt;li&gt;BOOM! Your react app is now finally deployed and you can test on the &lt;strong&gt;.amplifyapp.com&lt;/strong&gt; domain url provided down there.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#part2-add-a-custom-domain"&gt;
  &lt;/a&gt;
  PART-2: ADD A CUSTOM DOMAIN
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can purchase a domain from GoDaddy, Google Domains, AWS Route 53, etc.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the services provided by AWS (in point 5 of PART-1), select Route 53.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Create Hosted Zone&lt;/strong&gt;.
&lt;strong&gt;NOTE:&lt;/strong&gt;
A. We are doing this so that we don't have to manually add DNS 
 records to our domain's DNS settings.
B. The Hosted zone name should be same as your domain 
 name(without https:// and www)&lt;/li&gt;
&lt;li&gt;Fill the domain name. You can keep the zone as public.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f96fHJpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s72hwynuwb4n9b8u3ygi.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Once the hosted zone is created, open it to find the four nameservers there:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4W8OrQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qouv288ktu6kflnkl32.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Go to GoDaddy or any other service from where you have purchased your domain.&lt;/li&gt;
&lt;li&gt;Go to domain settings, and look for &lt;strong&gt;nameservers&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Edit the nameservers, remove the default ones and add the 4 nameservers(in point 4).
This allows AWS Route 53 to automatically manage the DNS to redirect the traffic.&lt;/li&gt;
&lt;li&gt;Now, go back to AWS Amplify, where you hosted your React App.&lt;/li&gt;
&lt;li&gt;In the app-settings in right bar, select the Domain Management option:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CowrVAcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u2gxfsepcgj1aj47srj.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Add Domain&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;On the next screen, an input field will be present, which on focus will automatically suggest you the name of the hosted zone that you created.&lt;/li&gt;
&lt;li&gt;Select that hosted zone and click on &lt;strong&gt;Configure Domain&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now the subdomain settings will appear. &lt;br&gt;
A. If you want to host your app on the root of your domain (say &lt;em&gt;example.com&lt;/em&gt;), then no changes in these settings are required.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Y-Rja5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsy634tygf86rixbb9le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Y-Rja5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsy634tygf86rixbb9le.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
B. If you want to host your app on a subdomain of your&lt;br&gt;
domain(say &lt;em&gt;blog.example.com&lt;/em&gt;), then click on &lt;strong&gt;Exclude Root&lt;/strong&gt; and replace &lt;strong&gt;www&lt;/strong&gt; with your sub-domain(here: &lt;em&gt;blog&lt;/em&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GM-86dV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87zf21qwqmlwz24wagz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GM-86dV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87zf21qwqmlwz24wagz0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;strong&gt;Save&lt;/strong&gt;. Now sit back and relax, and let AWS Amplify do the job:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCLQjmWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz1tbiy3w6l8b3u89oil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCLQjmWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz1tbiy3w6l8b3u89oil.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; Time taken in this process can vary, so a bit of patience is expected.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>react</category>
    </item>
    <item>
      <title>Epic battles Apple</title>
      <author>Aishanii</author>
      <pubDate>Sun, 30 May 2021 07:56:38 +0000</pubDate>
      <link>https://dev.to/aishanipach/epic-battles-apple-3e0e</link>
      <guid>https://dev.to/aishanipach/epic-battles-apple-3e0e</guid>
      <description>&lt;p&gt;It's been 9 months since Epic games tried to bypass Apple's in-app purchases rule on Fortnite, one of the biggest multiplayer battle royale games. &lt;/p&gt;

&lt;p&gt;After the violation of the rule, Apple decided to ban Fortnite from the iOS store after which Epic filed a suit on the grounds of the antitrust model.&lt;/p&gt;

&lt;p&gt;The whole trial made one thing quite clear, that apple lets an app stay till it is convenient for them. &lt;br&gt;
Recently, the new updates in iOS made it harder for users to set up &lt;a href="https://www.thetileapp.com/en-us/"&gt;tile&lt;/a&gt;&lt;br&gt;
 and the next thing we know is the launch of &lt;a href="https://www.apple.com/in/airtag/"&gt;AirTag&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Apple is very vocal about supporting iOS developers, but are they telling the truth.&lt;/p&gt;

&lt;p&gt;During this trial, Microsoft argued along with Epic that iPhone must not be treated like something special. Launching Office on iOS with their own subscription in place of in-app purchases has been another side battle along the way.&lt;/p&gt;

&lt;p&gt;An email from Phil Schiller, an Apple Exec, was enough to close the matter from Apple's side which said:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ## "We run the store, we collect the revenue"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>techtalks</category>
      <category>ios</category>
      <category>epicgames</category>
      <category>technews</category>
    </item>
    <item>
      <title>Space Physics</title>
      <author>Sooraj</author>
      <pubDate>Sun, 30 May 2021 07:46:45 +0000</pubDate>
      <link>https://dev.to/soorajsnblaze333/space-physics-m9d</link>
      <guid>https://dev.to/soorajsnblaze333/space-physics-m9d</guid>
      <description>&lt;p&gt;So last month I was bored and decided to have some fun by coding some space related stuff. I took 5 space related topics but I have added 2 of them here since the rest are still in work in progress. I have been so much in to Space and Astronomy recently and then I wrote this simply to understand what happens and how it happens. These are my codepens&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How a satellite/asteroid/comet changes it speed and trajectory using the help of a planet or any other object with a gravitational force.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SoorajSnBlz/embed/QWpOGvq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Saturn's rings using real gravitational physics. The rings are actually small particles moving at high speed held together by the gravitational force but I keep the trails to look like there are more particles there. There are lots of properties to adjust on the codepen. Feel free to check it out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWkTJbyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/logfiz1n1f4z32zyy0xh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWkTJbyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/logfiz1n1f4z32zyy0xh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is a little unoptimized for now so I am not adding the codepen embed here but here is the link to check it out &lt;a href="https://codepen.io/SoorajSnBlz/pen/Vwprmdv"&gt;https://codepen.io/SoorajSnBlz/pen/Vwprmdv&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>canvas</category>
      <category>physics</category>
      <category>math</category>
    </item>
    <item>
      <title>YAGNI Principle in 100 seconds</title>
      <author>Richard Wynn</author>
      <pubDate>Sun, 30 May 2021 07:20:45 +0000</pubDate>
      <link>https://dev.to/richardwynn/yagni-principle-in-100-seconds-1i6j</link>
      <guid>https://dev.to/richardwynn/yagni-principle-in-100-seconds-1i6j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#bulb-what-does-yagni-stand-for"&gt;
  &lt;/a&gt;
  üí° What does YAGNI stand for?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;YAGNI&lt;/strong&gt; stands for &lt;em&gt;You Ain‚Äôt Gonna Need It&lt;/em&gt;. It‚Äôs a principle from software development methodology of Extreme Programming (XP). This principle says that you should not create features that it's not really necessary.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u53Aunfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq3ggyimlj9h32ektgrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u53Aunfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq3ggyimlj9h32ektgrx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This principle is similar to the &lt;strong&gt;&lt;a href="https://dev.to/richardwynn/kiss-design-principle-in-100-seconds-3ca6"&gt;KISS&lt;/a&gt;&lt;/strong&gt; principle, once that both of them aim for a simpler solution. The difference between them is that YAGNI focus on removing unnecessary functionality and logic, and &lt;strong&gt;&lt;a href="https://dev.to/richardwynn/kiss-design-principle-in-100-seconds-3ca6"&gt;KISS&lt;/a&gt;&lt;/strong&gt; focus on the complexity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-yagni"&gt;
  &lt;/a&gt;
  Why YAGNI?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Any work that's only used for a feature that's needed tomorrow, means losing effort from features that need to be done for the current iteration.&lt;/li&gt;
&lt;li&gt;Creeping featurism leads to code bloat; the software will becomes larger and much more complicated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#quotes"&gt;
  &lt;/a&gt;
  Quotes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Always implement things when you actually need them, never when you just foresee that you need them.&lt;/em&gt; (Ron Jeffries, one of the co-founders of the XP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#memo-when-not-to-practice-yagni"&gt;
  &lt;/a&gt;
  üìù When not to practice YAGNI
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Learning something new:&lt;/strong&gt; Evaluate a new technology exclusively to gain the time back later and minimize the risk of losing more time by making the wrong decision.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Current design decisions based on future needs:&lt;/strong&gt; Don't sabotage your efforts because you think they violate YANGI. Instead, make the future-proof design decision, but only implement enough to fulfill the current need.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Abstracting external dependencies:&lt;/strong&gt; Take time to astract these dependencies will avoid rework and decrease the complexity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing, Security, Scale, and Business Requirements:&lt;/strong&gt; YAGNI is not a free-pass on writing tests, secure code, considering scale, or business requirements.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQx2cQRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzhlcc5kmgp61gmngpzp.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#iphone-keep-in-touch"&gt;
  &lt;/a&gt;
  üì± Keep in Touch
&lt;/h2&gt;

&lt;p&gt;If you like this article, don't forget to follow and stay in touch with my latest ones in the future by following me via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Twitter:&lt;/strong&gt; &lt;a href="https://twitter.com/RichardWynn01"&gt;https://twitter.com/RichardWynn01&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Medium:&lt;/strong&gt; &lt;a href="https://richard-wynn.medium.com"&gt;https://richard-wynn.medium.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href="https://github.com/richard-wynn"&gt;https://github.com/richard-wynn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Creating your own bind() (Polyfill of bind)</title>
      <author>Uddesh</author>
      <pubDate>Sun, 30 May 2021 06:48:50 +0000</pubDate>
      <link>https://dev.to/uddeshjain/creating-your-own-bind-polyfill-of-bind-433j</link>
      <guid>https://dev.to/uddeshjain/creating-your-own-bind-polyfill-of-bind-433j</guid>
      <description>&lt;p&gt;So, what is polyfill?&lt;/p&gt;

&lt;p&gt;Polyfill is a fallback for a method that is not supported by the browser by default. You can find browser support for any function or method on the &lt;code&gt;mdn&lt;/code&gt; website.&lt;/p&gt;

&lt;p&gt;Now, what is &lt;code&gt;bind()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;According to &lt;code&gt;mdn&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;bind()&lt;/code&gt; method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition sounds really fancy, but what does that mean?&lt;/p&gt;

&lt;p&gt;In simple words,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;bind()&lt;/code&gt; takes an object as an argument and returns a new function whose &lt;code&gt;this&lt;/code&gt; refers to the object we passed as an argument.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we got the idea about &lt;code&gt;polyfill&lt;/code&gt; and &lt;code&gt;bind()&lt;/code&gt;. So, let's try to implement it.&lt;/p&gt;

&lt;p&gt;1). let's create an object that we are going to use as a call site.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2). Create a &lt;code&gt;function&lt;/code&gt; that we need to bind with the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you call this function now, It will print &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3). Add your bind() to the function prototype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting it all together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;newFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Jack&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the basic implementation of &lt;code&gt;bind()&lt;/code&gt;, But it has few edge cases. Let's say you want to pass some arguments in &lt;code&gt;myBind()&lt;/code&gt;. How will you do that? Currently, we are not accepting arguments other than the object itself. Let's implement this functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// id will be undefined&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a_random_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;newFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Jack, undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are trying to pass &lt;code&gt;id&lt;/code&gt; in &lt;code&gt;myBind&lt;/code&gt; but not able to access it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// id will be undefined&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Accepting any number of arguments passed to myBind&lt;/span&gt;
&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a_random_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;newFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Jack, a_random_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we solved an edge case. However, there is one more improvement we can make. What if we want to pass arguments to &lt;code&gt;newFunc()&lt;/code&gt;?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// id will be undefined&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Accepting any number of arguments passed to myBind&lt;/span&gt;
&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a_random_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;newFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Jack, a_random_id, undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are passing 'New York' but not able to access it inside &lt;code&gt;myFunc&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// id will be undefined&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Accepting any number of arguments passed to myBind&lt;/span&gt;
&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Accepting arguments passed to newFunc&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;newArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newArgs&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a_random_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;newFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Jack, a_random_id, New York&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I think we have covered almost all the cases. But, still, if there is anything left, Let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Time to celebrate. You have implemented your own &lt;code&gt;bind()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope this will be helpful for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6ZtcOxQ9vi8vb9Cg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6ZtcOxQ9vi8vb9Cg/giphy.gif" alt="Bye"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introduction to Design Patterns</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 30 May 2021 06:43:25 +0000</pubDate>
      <link>https://dev.to/tamerlang/introduction-to-design-patterns-540o</link>
      <guid>https://dev.to/tamerlang/introduction-to-design-patterns-540o</guid>
      <description>&lt;p&gt;I hate the feeling when I don't know something. &lt;/p&gt;

&lt;p&gt;This is where impostor syndrome hits. &lt;/p&gt;

&lt;p&gt;I had this feeling when my teammate said, "Oh, just use X pattern" and I had no idea what that was.&lt;/p&gt;

&lt;p&gt;This is why I've studied and scoured the internet for all sorts of resources on design patterns.&lt;/p&gt;

&lt;p&gt;I'm gonna jumble them all up into this series on design patterns. &lt;/p&gt;

&lt;p&gt;This is the first post of the series, where we will go over:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are design patterns?&lt;/li&gt;
&lt;li&gt;History of design patterns&lt;/li&gt;
&lt;li&gt;Why should you learn them?&lt;/li&gt;
&lt;li&gt;Different types of design patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#design-patterns"&gt;
  &lt;/a&gt;
  Design Patterns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VtM-lZet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grrms4846ajfhz4snbs5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtM-lZet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grrms4846ajfhz4snbs5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you google design patterns, you would get something like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Honestly this sounds way too complicated.&lt;/p&gt;

&lt;p&gt;Basically, a design pattern is a &lt;strong&gt;solution&lt;/strong&gt; to a &lt;strong&gt;common problem&lt;/strong&gt; in software design. You can think of them as blue-prints that you can customize to solve a recurring problem in your code.&lt;/p&gt;

&lt;p&gt;Patterns are not snippets of code, that you can simply copy. Patterns give you a general solution, you can follow and alter the solution to fit your application specific needs.&lt;/p&gt;

&lt;p&gt;Patterns are often confused with algorithms, they both indeed offer a solution to common problems. Algorithms give a step-by-step guide to the solution while a pattern gives more of a high-level concept of the solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history-of-patterns"&gt;
  &lt;/a&gt;
  History of patterns
&lt;/h2&gt;

&lt;p&gt;Patterns are not only used in software, they are also used in other fields of engineering. A pattern is simple a common solution to a recurring problem, this description can be applied to many different fields. &lt;/p&gt;

&lt;p&gt;The concept of a pattern first came in civil engineering by an engineer named Christopher Alexander. While working on designing buildings and towns, he saw that there came many recurring problems and general solutions to solve them. He documented his experience in his book &lt;a href="https://www.amazon.com/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199"&gt;A Pattern Language: Towns, Buildings, Construction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The same idea was picked up by software developers notably:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Erich Gamma&lt;/li&gt;
&lt;li&gt;John Vlissides&lt;/li&gt;
&lt;li&gt;Ralph Johnson&lt;/li&gt;
&lt;li&gt;Richard Helm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 1994 they wrote the first book on software design patterns named &lt;a href="https://www.amazon.com/gp/product/0201633612/"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;. This book introduced 23 patterns solving various problems of object-oriented design. Due to its long name, people started calling it "the book by the gang of four", which was soon shortened to "the GoF book".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-learn-patterns"&gt;
  &lt;/a&gt;
  Why should I learn patterns?
&lt;/h2&gt;

&lt;p&gt;I personally know many developers who don't know any patterns but manage just "fine". A lot of developers are like that. They even might be implementing some patterns without even knowing it. So what's the point of learning these so called "patterns"?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design patterns is a toolkit of solutions to common problems. Even if you won't ever encounter such problems, it's still beneficial to know how to solve them using object-oriented design principles.&lt;/li&gt;
&lt;li&gt;It provides a common language between developers. You can simply say to your colleague, "Oh, just use a singleton for that", and everyone will understand you. There's no need to explain what a singleton if you already know the pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#type-of-design-patterns"&gt;
  &lt;/a&gt;
  Type of Design Patterns
&lt;/h2&gt;

&lt;p&gt;Patterns can be categorized by their intent, or purpose. The three main groups of patterns are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creational patterns&lt;/strong&gt;: helps us better create/instantiate objects, making them more flexible and reduces code duplication.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Structural patterns&lt;/strong&gt;: helps us combine objects into larger entities while maintaining flexibility and efficiency.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Behavioral patterns&lt;/strong&gt;: helps us with communication between objects, makes sure to reduce side effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you were convinced by the end of this to study design patterns, or to at least think about them. In the upcoming weeks I will dedicate a post to a specific pattern, so stay tuned for that. &lt;/p&gt;

&lt;p&gt;As always if you have any questions, feel free to leave them down in the comments and I will get back to you.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Please stop the forem app pop-up</title>
      <author>jeikabu</author>
      <pubDate>Sun, 30 May 2021 06:41:29 +0000</pubDate>
      <link>https://dev.to/jeikabu/please-stop-the-forem-app-pop-up-2015</link>
      <guid>https://dev.to/jeikabu/please-stop-the-forem-app-pop-up-2015</guid>
      <description>&lt;p&gt;Please stop the forem app message from constantly popping up on mobile. It's annoying. &lt;/p&gt;

</description>
      <category>meta</category>
      <category>ux</category>
    </item>
    <item>
      <title>Master ‚Äòthis‚Äô in JavaScript</title>
      <author>Somnath Singh</author>
      <pubDate>Sun, 30 May 2021 06:21:19 +0000</pubDate>
      <link>https://dev.to/polymathsomnath/master-this-in-javascript-1bk</link>
      <guid>https://dev.to/polymathsomnath/master-this-in-javascript-1bk</guid>
      <description>&lt;p&gt;In this article, we cover the all-important yet so confusing topic in JavaScript which is the ‚Äú&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;‚Äù keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;If ‚Äú&lt;em&gt;this&lt;/em&gt;‚Äù scares you, do not worry! We will learn how to determine the value of the ‚Äú&lt;em&gt;this&lt;/em&gt;‚Äù keyword using five simple rules.&lt;/p&gt;

&lt;p&gt;Those five simple rules are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;The Regular One ‚Äî&lt;/em&gt; &lt;strong&gt;Default binding&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Function Inside an Object&lt;/em&gt; ‚Äî &lt;strong&gt;Implicit binding&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Function Borrowing&lt;/em&gt; ‚Äî &lt;strong&gt;Explicit binding&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Using Function to Create Objects&lt;/em&gt; ‚Äî &lt;strong&gt;New binding&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;How Arrow Function Differs from the Regular Ones‚Äî&lt;/em&gt; &lt;strong&gt;Lexical binding&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don‚Äôt worry about these scary names. Computer Science people have a fancy for naming terms so that they sound extra-terrestrial. Under the hood, they are just common concepts that any willing human can understand.&lt;/p&gt;

&lt;p&gt;The ‚Äú&lt;em&gt;this‚Äù&lt;/em&gt; variable corresponds to how you invoke a function. These rules help us to determine the value of &lt;em&gt;this&lt;/em&gt; in various scenarios.&lt;/p&gt;

&lt;p&gt;Once you understand these rules, then you would not fear them anymore.&lt;/p&gt;

&lt;p&gt;Before we begin, &lt;a href="https://javascript.plainenglish.io/why-do-developers-fear-this-fb7497f95570?sk=7c1a7d83bd97af7ce9a9cd97fc8abda2"&gt;please go through this article&lt;/a&gt; to understand how &lt;em&gt;this&lt;/em&gt; works.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-this-in-brief"&gt;
  &lt;/a&gt;
  What is ‚Äúthis‚Äù in brief
&lt;/h1&gt;

&lt;p&gt;In JavaScript, whenever a function is called, a new execution context is created by the JavaScript engine. That execution context exists until the function has finished executing. Every execution context contains a variable called ‚Äòthis‚Äô.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rule-1-default-binding"&gt;
  &lt;/a&gt;
  #Rule 1. Default binding
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G19seZhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2386/0%2Axc7asnogg5WscyrC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G19seZhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2386/0%2Axc7asnogg5WscyrC.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When calling a function in a standard way shown above, ‚Äú&lt;em&gt;this&lt;/em&gt;‚Äù will actually refer to the global object!&lt;/p&gt;

&lt;p&gt;In the browser, the global object means the Window object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1yGSx6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1838/0%2ABkSOWChHCrsTt2V5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1yGSx6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1838/0%2ABkSOWChHCrsTt2V5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One exception to remember ‚Äî that is when strict mode is enabled. By writing ‚Äúuse-strict‚Äù you can prevent anything from being declared on the global object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpOEWF26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2160/0%2AMDVIyQlMzbnDv4Kf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpOEWF26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2160/0%2AMDVIyQlMzbnDv4Kf.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rule-2-implicit-binding"&gt;
  &lt;/a&gt;
  #Rule 2. &lt;strong&gt;Implicit binding&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;If the function is contained within an object, then that object will be referenced by ‚Äúthis‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kp4g8-lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3296/1%2AOKrRTgSIiLQ5dJRIyTk-Qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kp4g8-lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3296/1%2AOKrRTgSIiLQ5dJRIyTk-Qg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the above, the &lt;code&gt;this&lt;/code&gt; keyword will point to the &lt;code&gt;personObj&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rule-3-explicit-binding"&gt;
  &lt;/a&gt;
  #Rule 3. &lt;strong&gt;Explicit binding&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;We saw how &lt;code&gt;this&lt;/code&gt; points to the global object and in another case, it points to the object which contains it. Wouldn‚Äôt it be nice to able to control what this variable ends up being when the function is called?&lt;/p&gt;

&lt;p&gt;Words like &lt;em&gt;call&lt;/em&gt;, &lt;em&gt;apply&lt;/em&gt;, and &lt;em&gt;bind&lt;/em&gt; usually causes terror in new developers. In reality, they are all functions that can be used to &lt;em&gt;explicitly&lt;/em&gt; set the value of ‚Äúthis‚Äù.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-us-understand-it-with-an-example"&gt;
  &lt;/a&gt;
  Let us understand it with an example.
&lt;/h2&gt;

&lt;p&gt;Suppose we have two objects, let us say &lt;code&gt;personObj&lt;/code&gt; and &lt;code&gt;readerObj&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6s2uMYiy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2456/1%2At1FOex7gNulGnwVEb6Mf6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6s2uMYiy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2456/1%2At1FOex7gNulGnwVEb6Mf6w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both the object has a name property. The &lt;code&gt;personObj&lt;/code&gt; has a function that can print the value inside the &lt;code&gt;name&lt;/code&gt; but, the &lt;code&gt;readerObj&lt;/code&gt; does not have any such feature!&lt;/p&gt;

&lt;p&gt;Here we can make use of one of the three methods ‚Äî &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This process is called function borrowing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2RbhlcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1966/1%2ADi_MsxdvDTqd0DkEBr3YfQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2RbhlcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1966/1%2ADi_MsxdvDTqd0DkEBr3YfQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We borrowed the &lt;code&gt;sayName&lt;/code&gt; method for the &lt;code&gt;readerObj.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can print the name property that is in &lt;code&gt;readerObj&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtkIlTao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2466/1%2AkmRaS-zUJgG_QkrCS-FUIQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtkIlTao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2466/1%2AkmRaS-zUJgG_QkrCS-FUIQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are calling the &lt;code&gt;sayName&lt;/code&gt; method from &lt;code&gt;personObj&lt;/code&gt;, but at the same time, we are instructing the JavaScript engine that the ‚Äòthis‚Äô variable in the &lt;code&gt;sayName&lt;/code&gt; method should point to &lt;code&gt;readerObj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So when the JavaScript engine executes the code, the &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; variable in the &lt;code&gt;sayName&lt;/code&gt; function does not point to the &lt;code&gt;personObj&lt;/code&gt; but it points to the &lt;code&gt;readerObj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Does that make sense?&lt;/p&gt;

&lt;p&gt;Not just that ‚Äî we can also pass some arguments when we use the &lt;code&gt;call&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mpfz3sig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1860/1%2ApQtSBG6fv5pp_L_lfpNKmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mpfz3sig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1860/1%2ApQtSBG6fv5pp_L_lfpNKmg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We passed Namaste as an argument&lt;/p&gt;

&lt;p&gt;We can make use of the argument in the &lt;code&gt;sayName&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUObTtXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1260/1%2AURmM8Vf09inNezYtA2TvMA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUObTtXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1260/1%2AURmM8Vf09inNezYtA2TvMA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we execute the code, we will get the output along with the passed argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0NF0gEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2956/1%2ARcaHst9aMECBaFntGO_9nA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0NF0gEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2956/1%2ARcaHst9aMECBaFntGO_9nA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The apply method works the same way, but instead of regular arguments, it takes an array as an argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qd-bzOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3416/1%2AolLUIkdy373Jhrw3-i3mwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qd-bzOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3416/1%2AolLUIkdy373Jhrw3-i3mwg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ccifByb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2628/1%2AD2IhX_eA_J2F-29dnExflQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ccifByb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2628/1%2AD2IhX_eA_J2F-29dnExflQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bind method also works the same way ‚Äî it can accept a regular argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WWvxxhnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2328/1%2AVvootgY_bLF7xy7k_mKcGg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WWvxxhnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2328/1%2AVvootgY_bLF7xy7k_mKcGg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But unlike &lt;em&gt;call&lt;/em&gt;  and &lt;em&gt;apply ‚Äî&lt;/em&gt; &lt;strong&gt;&lt;em&gt;bind&lt;/em&gt;&lt;/strong&gt; returns a function ‚Äî that function can be stored in a variable and can be executed in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W6a-zREi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3350/1%2AB7USlXrakqraX9w7ntLtwA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W6a-zREi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/3350/1%2AB7USlXrakqraX9w7ntLtwA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hleJcp_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2604/1%2A5kvl7us01wuPUlEpn-KJ3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hleJcp_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2604/1%2A5kvl7us01wuPUlEpn-KJ3g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One can see the use of bind in function currying ‚Äî a topic that we will cover in the future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rule-4-new-binding"&gt;
  &lt;/a&gt;
  #Rule &lt;strong&gt;4. New binding&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;We use the &lt;strong&gt;&lt;em&gt;new&lt;/em&gt;&lt;/strong&gt; keyword to create an instance or copy of an object. What the &lt;strong&gt;new&lt;/strong&gt; keyword does is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It creates an &lt;strong&gt;empty object&lt;/strong&gt; and then instructs the keyword &lt;strong&gt;this&lt;/strong&gt; to point to that empty object.&lt;/li&gt;
&lt;li&gt;  It then adds a &lt;code&gt;return this&lt;/code&gt; statement to the end of that function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, when an instance of an object gets created using the &lt;em&gt;new&lt;/em&gt; keyword, ‚Äú&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;‚Äù always points to that newly created instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-us-understand-this-with-an-example"&gt;
  &lt;/a&gt;
  Let us understand this with an example.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nKsDJPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1702/1%2ArdIo3Y77Y054oibfUKFLXg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nKsDJPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1702/1%2ArdIo3Y77Y054oibfUKFLXg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we run this code, what are we supposed to get?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svI0ZJXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1960/1%2A-0ealF7SmoQwwUbFX3CsGA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svI0ZJXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1960/1%2A-0ealF7SmoQwwUbFX3CsGA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we said ‚Äî an empty object!&lt;/p&gt;

&lt;p&gt;What is happening under the hood is&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8Mp6iTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2240/1%2AMjlTUBtzshIO2lToU4b_zQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8Mp6iTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2240/1%2AMjlTUBtzshIO2lToU4b_zQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What? Are we invoking the function?&lt;/p&gt;

&lt;p&gt;Yes!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2c-Tc-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2556/1%2A7jkc1tuK7hNbx25EVcxvLQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2c-Tc-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2556/1%2A7jkc1tuK7hNbx25EVcxvLQ.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See, I told you it is getting invoked.&lt;/p&gt;

&lt;p&gt;Let us look at the whole thing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpgZUpz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2240/1%2ADw9PlvHl5SXw94wwiFZFTg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpgZUpz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2240/1%2ADw9PlvHl5SXw94wwiFZFTg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we put some value in the function, it will put that in the newly created object and then return it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQDIYH3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1864/1%2AByTa5ihFcU6xzningnM3eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQDIYH3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1864/1%2AByTa5ihFcU6xzningnM3eg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we &lt;code&gt;console.log(newPersonObj)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zqjqDm23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1768/1%2AYeOXSqQdt8Zi8qJmpbQFRg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zqjqDm23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1768/1%2AYeOXSqQdt8Zi8qJmpbQFRg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us finish this concept with an animation.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;dev.to&lt;/code&gt; supports animation of 500 frames only, I am attaching  an external link to the animation&lt;br&gt;
&lt;a href="https://miro.medium.com/max/1210/1*0wJYjMQ9uwVEYzBj89oL4A.gif"&gt;Go here for the animation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we are using a function to create an object.&lt;/p&gt;

&lt;p&gt;This type of function is known as a function constructor.&lt;/p&gt;

&lt;p&gt;Remember, in the &lt;code&gt;newPersonObj&lt;/code&gt;, which stores the copy of &lt;code&gt;personObj&lt;/code&gt;‚Äî the ‚Äúthis" variable points to empty &lt;code&gt;personObj&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Does it make sense now?&lt;/p&gt;

&lt;p&gt;Good! Let us now understand the last rule.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rule-5-lexical-binding"&gt;
  &lt;/a&gt;
  #Rule &lt;strong&gt;5. Lexical binding&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With the advent of ES6 ‚Äî we got arrow functions. Arrow functions with their ultra-lean syntax are a natural replacement for their traditional anonymous counterparts.&lt;/p&gt;

&lt;p&gt;To explicitly invoke an arrow function, as with a regular anonymous function, you would assign it to a variable first:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LeqN0lE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2598/1%2AMEaHjDB5yTXm_T6tDO_HwA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LeqN0lE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2598/1%2AMEaHjDB5yTXm_T6tDO_HwA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arrow functions are just like regular anonymous functions, with one major exception- the behavior of this object inside the function.&lt;/p&gt;

&lt;p&gt;In a regular function, the value of "&lt;code&gt;this&lt;/code&gt;" is context-based- call the function inside a link, and "&lt;code&gt;this&lt;/code&gt;" points to the link's object; call it inside one more function like &lt;code&gt;setInterval()&lt;/code&gt;, then "&lt;code&gt;this&lt;/code&gt;" points to the global window object.&lt;/p&gt;

&lt;p&gt;For example, the following example attempts to call the &lt;code&gt;start()&lt;/code&gt; method of a custom object to increment its counter property by 1 every second, though it fails due to an incorrect assumption of the "&lt;code&gt;this&lt;/code&gt;" object reference counter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lIKoBWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2976/1%2AhoYm0GaVU-9eIG431Vs1wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lIKoBWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2976/1%2AhoYm0GaVU-9eIG431Vs1wg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lNOE56t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1552/1%2AJJvXhLyOOGZfSstSj2sS4A.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lNOE56t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1552/1%2AJJvXhLyOOGZfSstSj2sS4A.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above, &lt;code&gt;this.counter&lt;/code&gt; fails to properly reference the counter property of the &lt;code&gt;countup&lt;/code&gt; object, though the error may not be so obvious to spot. One can either mistakenly or carelessly assume that "&lt;code&gt;this&lt;/code&gt;" points to the &lt;code&gt;countup&lt;/code&gt; object, when in fact it points to the global &lt;code&gt;window&lt;/code&gt; object due to the context "&lt;code&gt;this&lt;/code&gt;" is being called- inside the global window method &lt;code&gt;setInterval()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The result is a reference to a non-existent &lt;code&gt;window.counter&lt;/code&gt; property that will repeatedly return &lt;code&gt;NaN&lt;/code&gt; when we try to increment it. To properly reference the &lt;code&gt;countup&lt;/code&gt; object then inside the anonymous function, we should cache a reference to the correct "&lt;code&gt;this&lt;/code&gt;" object before the context changes to a different one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--frdK0bEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2692/1%2A_ecuxy27FcjFnlfPRKVZLg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--frdK0bEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2692/1%2A_ecuxy27FcjFnlfPRKVZLg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XeIu7fXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1516/1%2AQd4QDX0XnfXBcnkjdQUVgw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XeIu7fXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1516/1%2AQd4QDX0XnfXBcnkjdQUVgw.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The "&lt;code&gt;this&lt;/code&gt;" object inside an arrow function is lexically bound, which is just a fancy way of saying its value is static and determined by the place where the ‚Äú&lt;code&gt;this&lt;/code&gt;" keyword is defined.&lt;/p&gt;

&lt;p&gt;Contrast that with regular functions, where "&lt;code&gt;this&lt;/code&gt;" is dynamic and based on the context it's called regardless of the scope at the time "&lt;code&gt;this&lt;/code&gt;" was defined.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take the previous example that gave us trouble initially, and see how changing over to using an arrow function intuitively addresses the problem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PMwuGKPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2804/1%2ARxgs1sNx3TXP7cvNe-PsoA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PMwuGKPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2804/1%2ARxgs1sNx3TXP7cvNe-PsoA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XeIu7fXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1516/1%2AQd4QDX0XnfXBcnkjdQUVgw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XeIu7fXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1516/1%2AQd4QDX0XnfXBcnkjdQUVgw.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We solved the problem by just using an arrow function.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If you understood all the rules, then pat yourself on the back ‚Äî you deserve it! Now you are no more someone who is afraid of JavaScript‚Äôs most confusing concept ‚Äî the "&lt;em&gt;this&lt;/em&gt;" keyword.&lt;/p&gt;

&lt;p&gt;In this article we learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  When calling a &lt;strong&gt;&lt;em&gt;function&lt;/em&gt;&lt;/strong&gt; in a standard way shown above, ‚Äú&lt;em&gt;this&lt;/em&gt;‚Äù will actually refer to the global object!&lt;/li&gt;
&lt;li&gt;  If the function is contained within an &lt;strong&gt;&lt;em&gt;object,&lt;/em&gt;&lt;/strong&gt; then ‚Äú&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;‚Äù will point to that object.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;call&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;bind&lt;/em&gt;&lt;/strong&gt; are functions that are available to us by JavaScript to alter the behaviour of ‚Äú&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;‚Äù in our program.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;new&lt;/em&gt;&lt;/strong&gt; keyword or operator when used makes an empty object, then instructs ‚Äú&lt;strong&gt;&lt;em&gt;this‚Äù&lt;/em&gt;&lt;/strong&gt; to point to that newly created object&lt;/li&gt;
&lt;li&gt;  Arrow function enables us to lexically bind the ‚Äú&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;‚Äù keyword in the program, what this means is its value is static and determined by the place where the ‚Äú&lt;code&gt;this&lt;/code&gt;" keyword is defined.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#note-of-gratitude"&gt;
  &lt;/a&gt;
  Note of Gratitude
&lt;/h1&gt;

&lt;p&gt;I wanted to take this last opportunity to say thank you.&lt;/p&gt;

&lt;p&gt;Thank you for being here! I would not be able to do what I do without  people like you  who follow along and take that leap of faith to read my post.&lt;/p&gt;

&lt;p&gt;I hope you‚Äôll &lt;a href="https://twitter.com/tweetsbysoma"&gt;&lt;strong&gt;join me&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://dev.to/polymathsomnath"&gt;&lt;strong&gt;my future blog post&lt;/strong&gt;&lt;/a&gt; and stick around because I think we have something great here. And I hope that I will be able to help you along in your career for many more years to come!&lt;/p&gt;

&lt;p&gt;See you next time. Bye!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to change font is VS Code</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Sun, 30 May 2021 06:00:23 +0000</pubDate>
      <link>https://dev.to/amritanshu/how-to-change-font-is-vs-code-4alp</link>
      <guid>https://dev.to/amritanshu/how-to-change-font-is-vs-code-4alp</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
Search for the font you want or go to  &lt;a href="https://fonts.google.com/"&gt;Google fonts&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbK_QQlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350695833/fW-UlMuMH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbK_QQlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350695833/fW-UlMuMH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
I want Noto Sans JP font. So, I searched for it and clicked on the first one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wkKKSAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350825497/RTfjxN1G8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wkKKSAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350825497/RTfjxN1G8.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Click on Download family on the top right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCXrBTQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350880508/8VTe7LMyI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCXrBTQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350880508/8VTe7LMyI.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Extract the downloaded file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Js-c-NQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350978121/WsLfHzpHO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Js-c-NQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622350978121/WsLfHzpHO.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Either your fonts are inside Folder -&amp;gt; fonts -&amp;gt; ttf or Directly inside the Folder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here, the fonts are directly inside the Folder, select the file with type OpenType font file&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVcX_rKv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351110611/HirE03pcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVcX_rKv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351110611/HirE03pcg.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Search Control panel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8br4wP8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351170539/s9BvKNuo-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8br4wP8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351170539/s9BvKNuo-.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Click on large icons on the top right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STRvjDc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351187346/JSU8GadMP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STRvjDc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351187346/JSU8GadMP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Click On Fonts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwzjxyE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351211014/mclwfuhrJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwzjxyE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351211014/mclwfuhrJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
This type of page will open up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOakb-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351232676/TgvCYju-O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOakb-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351232676/TgvCYju-O.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Copy all your fonts from the extracted folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qhSD6ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351259482/DuWb0mhVHR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qhSD6ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351259482/DuWb0mhVHR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Paste them on the fonts page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---AER-Glz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351304975/xIGn3mXIDo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---AER-Glz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351304975/xIGn3mXIDo.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wUy3p_To--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351335081/oLH22bqs-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wUy3p_To--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622351335081/oLH22bqs-.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Open VSCode and Go to file -&amp;gt; preferences -&amp;gt; settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ev_BbXyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352058095/99tOJLFqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ev_BbXyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352058095/99tOJLFqt.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Search for Font Family&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PA5dXzRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352101161/5u_TdZYJ8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PA5dXzRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352101161/5u_TdZYJ8.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My editor before adding font&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--42xdvOxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352365856/CbSeONdVy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42xdvOxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352365856/CbSeONdVy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
My Editor after adding font&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ztPXGOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352390072/m8vIDE93I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztPXGOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622352390072/m8vIDE93I.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You have to add 'Noto Sans JP' or the font you want at the start and then add a comma(,) after it. Save the file Restart the IDE,&lt;br&gt;
If you want to add the font and it doesn't work, ping me on Twitter I will try to help you asap!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/k2Rl4U3qg5A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Twitter:
&lt;a href="https://twitter.com/NewGenDeveloper"&gt;https://twitter.com/NewGenDeveloper&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>vscode</category>
      <category>tutorial</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>HTML : Disable resizing of textarea</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Sun, 30 May 2021 05:42:13 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/html-disable-resizing-of-textarea-4m6k</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/html-disable-resizing-of-textarea-4m6k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-textarea"&gt;
  &lt;/a&gt;
  What is textarea?
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element is often used in a form, to collect user inputs like comments or reviews.&lt;/p&gt;

&lt;p&gt;A text area can hold an unlimited number of characters.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-resize-texarea"&gt;
  &lt;/a&gt;
  How to resize texarea?
&lt;/h1&gt;

&lt;p&gt;You can resize a textarea by clicking on the bottom right corner of the textarea and dragging the mouse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhpLZYTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jywc6ssurqzvmf2oaswr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhpLZYTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jywc6ssurqzvmf2oaswr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-disable-resizing-textarea"&gt;
  &lt;/a&gt;
  How to disable resizing textarea?
&lt;/h1&gt;

&lt;p&gt;The following CSS rule disables resizing behavior for textarea elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With above code all of your textareas will be disabled to resize.&lt;/p&gt;

&lt;p&gt;You can use class attribute in your tag -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"textarea1"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Enter your message here...
&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.textarea1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To disable a specific textarea with the name attribute set to foo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Enter your message here...
&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, using an id attribute -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Enter your message here...
&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This property does nothing unless the overflow property is something other than visible, which is the default for most elements. So generally to use this, you'll have to set something like &lt;code&gt;overflow: scroll&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;resize has below values that you can use with your text areas - &lt;br&gt;
&lt;code&gt;none:&lt;/code&gt; the element is not resizeable. &lt;br&gt;
&lt;code&gt;both:&lt;/code&gt; the user can resize the element‚Äôs height and/or width.&lt;br&gt;
&lt;code&gt;horizontal:&lt;/code&gt; the user can resize the element horizontally (increasing the width).&lt;br&gt;
&lt;code&gt;vertical:&lt;/code&gt; the user can resize the element vertically (increasing the height).&lt;br&gt;
&lt;code&gt;inherit:&lt;/code&gt; the element inherits the resize value of its parent.&lt;/p&gt;

&lt;p&gt;Below is the demo where you can click on the value names and can see the demo of selected value version of textarea -&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/team/css-tricks/embed/QbJqMG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
