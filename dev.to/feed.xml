<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ExpressJS</title>
      <author>sndp</author>
      <pubDate>Sun, 26 Dec 2021 13:24:23 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/expressjs-58hg</link>
      <guid>https://dev.to/lizardkinglk/expressjs-58hg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOtcTQSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ycqi6b0n7zhurisc4c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOtcTQSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ycqi6b0n7zhurisc4c3.png" alt="Express JS" width="320" height="115"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-expressjs-"&gt;
  &lt;/a&gt;
  What is ExpressJS ?
&lt;/h2&gt;

&lt;p&gt;Express js is a efficient and easy to learn web application framework. It was written in javascript as a library with different tools which helps you in creating web apps. It was developed by T.J. Holowaychuk, StrongLoop and some contributors under MIT license. This initially released in November 16, 2010. The most stable version is 4.17.2 which released in December 16, 2021. We use Node JS run-time with express to develop web apps. Express work as the back-end web server in the MERN stack application which makes the application fast and robust.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-and-use-express-"&gt;
  &lt;/a&gt;
  How to install and use Express ?
&lt;/h2&gt;

&lt;p&gt;We need the following tools installed prior to get express.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/"&gt;NPM (Node Package Manager)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Any IDE or Code Editor. (&lt;a href="https://www.jetbrains.com/webstorm/"&gt;WebStorm&lt;/a&gt; / &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; / &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; / &lt;a href="https://www.sublimetext.com/"&gt;SublimeText&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download and install the LTS (Long Term Support) versions of these tools and you are ready to go.&lt;/p&gt;

&lt;p&gt;For this tutorial I'll use VSCode as our code editor.&lt;/p&gt;

&lt;p&gt;Create and open a folder using your editor.&lt;/p&gt;

&lt;p&gt;We will create / initialize a nodejs project using &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open a terminal in your editor in project's root directory. &lt;br&gt;
Enter the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init --y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will initialize the project with a new file called &lt;code&gt;package.json&lt;/code&gt; which includes the meta data collected from the folder that you created. To change these values we will go to this file and change it. Keywords, author &amp;amp; description etc.&lt;/p&gt;

&lt;p&gt;Then we should create the index.js file which is our application's entry point or the startup of our web application's backend. After creating index.js file in the project root we have to change a value in &lt;code&gt;package.json&lt;/code&gt; file. We will change the value of &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;index.js&lt;/code&gt;. Then it should look similar as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "expressproject",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"
  },
  "keywords": ["express"],
  "author": "sndp",
  "license": "ISC",
  "description": "An express js project"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we can enter the following command in the terminal and install express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will download and add the library to work with your project. Make sure to check package.json to be changed like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "expressproject",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"
  },
  "keywords": [
    "express"
  ],
  "author": "sndp",
  "license": "ISC",
  "description": "An express js project",
  "dependencies": {
    "express": "^4.17.2"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;We have now successfully installed express in our project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will create a simple server that we can use in our project and run it.&lt;/p&gt;

&lt;p&gt;Change your &lt;code&gt;index.js&lt;/code&gt; file as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const server = express();
const port = 5000;

server.listen(port, () =&amp;gt; {
    console.log("server is listening on port " + port);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to the terminal and enter the following command to run our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the terminal reads like below with no errors&lt;br&gt;
&lt;code&gt;server is listening on port 5000&lt;/code&gt;&lt;br&gt;
Our server is running successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-developers-use-expressjs-"&gt;
  &lt;/a&gt;
  Why developers use expressjs ?
&lt;/h2&gt;

&lt;p&gt;If you are a web developer maybe you are familiar with back-end frameworks like django / tomcat or .Net. But also you must know the express js if you develop a Node JS app. Express is the most common back-end web framework in use for a node js web application in the world today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#because-it-is-easy"&gt;
  &lt;/a&gt;
  Because it is easy
&lt;/h3&gt;

&lt;p&gt;Working with express is easy because it is consist of all javascript based libraries. So the business code and library can work very well together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossplatform"&gt;
  &lt;/a&gt;
  Cross-platform
&lt;/h3&gt;

&lt;p&gt;Express can use in a wide variety of platforms. These include mobile app back-end or web application development and many web services. We can route the requests and serve every user with express js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicate-with-frontend"&gt;
  &lt;/a&gt;
  Communicate with front-end
&lt;/h3&gt;

&lt;p&gt;Express makes it easy to work with front-end because we don't need intermediate libraries. As an example we can use middleware functions in express to direct users before handling the requests using express. And we can use express-session and express-cookies to handle user meta data objects inside server. And there are many more add-ons we can use in our application to implement easier with the front-end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uses-of-express-js"&gt;
  &lt;/a&gt;
  Uses of express js
&lt;/h2&gt;

&lt;p&gt;There are many uses of building web apps and apis using express js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-develop-web-apps"&gt;
  &lt;/a&gt;
  To develop web apps
&lt;/h3&gt;

&lt;p&gt;To handle client's requests and handle them by giving responses and directing to the pages or provide implemented templates directly to the user with express. Also it is easy serving and working with static files like stylesheets (css), scripts (js) and images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developing-restful-web-services-apis"&gt;
  &lt;/a&gt;
  Developing ReSTful Web Services (APIs)
&lt;/h3&gt;

&lt;p&gt;Since the progress of web development technologies, apps based on microservices architecture were becoming relevant. From monolithic to microservices architecture they are evolving. A web application basically started after developing an API. Making a API using express js is very easy. It is just a couple of routing methods and connection to a data source away.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developing-other-javascript-libraries"&gt;
  &lt;/a&gt;
  Developing other javascript libraries.
&lt;/h3&gt;

&lt;p&gt;Many javascript libraries and frameworks uses express or had used express js in their implementation of libraries. There are many interesting work done with using express framework.&lt;br&gt;
These include, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://feathersjs.com/"&gt;Feathers&lt;/a&gt; - Build prototypes in minutes, &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.itemsapi.com/"&gt;ItemsAPI&lt;/a&gt; - Search backend for web and mobile apps built on  Express and Elastisearch.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://keystonejs.com/"&gt;KeystoneJS&lt;/a&gt; - Website and API Application Framework etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many companies use express js eg. IBM and UBER in their applications and it is one of the major step of building a node js based web apps.&lt;/p&gt;

&lt;p&gt;To learn more on expressjs refer the link below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://expressjs.com/en/starter/installing.html"&gt;https://expressjs.com/en/starter/installing.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>mernstack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TypeRacer Hack Code</title>
      <author>Kaixin</author>
      <pubDate>Sun, 26 Dec 2021 13:07:24 +0000</pubDate>
      <link>https://dev.to/kaixinn/typeracer-hack-code-5dmo</link>
      <guid>https://dev.to/kaixinn/typeracer-hack-code-5dmo</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var counter = -1;
var firstWord = document.getElementsByClassName("inputPanel")[0].querySelectorAll("span")[0].innerHTML + document.getElementsByClassName("inputPanel")[0].querySelectorAll("span")[1].innerHTML,
restOfText = document.getElementsByClassName("inputPanel")[0].querySelectorAll("span")[2].innerHTML;
var fullText = firstWord.concat(restOfText);
var inputBox = document.getElementsByClassName('txtInput');
(function getString() {
    setTimeout(function() {
        counter++;
        inputBox[0].value += fullText[counter];
        if(counter != fullText.length) {
            getString();
        }
        //adjust the 100 milliseconds for a faster wpm &amp;amp; be undetected by their new system.
    }, 100);
})()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the code above ^^ then go to TypeRacer Enter a Race, on your keyboard press ctrl + shift + i to open the console When the game starts(It says GO!), paste the cheat code you just copied in the console and hit enter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.typeracer.com/?universe=lang_id"&gt;TypeRacer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoMoe9oV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjq627wxm5y506pahr8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoMoe9oV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjq627wxm5y506pahr8f.png" alt="Image description" width="880" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh7UUef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04taxm58n1naadkb4h1a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh7UUef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04taxm58n1naadkb4h1a.PNG" alt="Image description" width="657" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Eloquent JavaScript (Part I : Chapter 2/Program Structure)</title>
      <author>Pranish Shrestha</author>
      <pubDate>Sun, 26 Dec 2021 12:22:03 +0000</pubDate>
      <link>https://dev.to/pranish07/eloquent-javascript-part-i-chapter-2program-structure-33cp</link>
      <guid>https://dev.to/pranish07/eloquent-javascript-part-i-chapter-2program-structure-33cp</guid>
      <description>&lt;p&gt;As JavaScript can work in most of the fields like web development, mobile apps, desktop apps etc. It is a vital programming language to day to learn.&lt;br&gt;
&lt;em&gt;This blog is inspired by a book Eloquent JavaScript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What you will learn in this post&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expressions and statements&lt;/li&gt;
&lt;li&gt;Bindings&lt;/li&gt;
&lt;li&gt;Binding Names&lt;/li&gt;
&lt;li&gt;the environment&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;console.log function&lt;/li&gt;
&lt;li&gt;return value&lt;/li&gt;
&lt;li&gt;control flow&lt;/li&gt;
&lt;li&gt;conditional execution (if, else, if else)&lt;/li&gt;
&lt;li&gt;loops(while, do-while, for)&lt;/li&gt;
&lt;li&gt;Indenting Code&lt;/li&gt;
&lt;li&gt;Breaking out of a loop&lt;/li&gt;
&lt;li&gt;Updating Bindings Succinctly&lt;/li&gt;
&lt;li&gt;Dispatching on available with switch &lt;/li&gt;
&lt;li&gt;Capitalization&lt;/li&gt;
&lt;li&gt;Comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expressions and Statements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A fragment of code that produces a value is called an expression.Expression is a piece of code that resolves to a value. Example: const number = 5; 5 is an expression and the whole const number = 5 is an statement.
Programs build statements which themselves sometimes is made out of statements and sometimes expressions contains by some other small expressions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bindings&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We know that new values can be made by old values and if new values aren't used immediately then it can disappear again. To catch and hold values , JavaScript Provides a thing called Binding or a variable. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
 `let today = 'day';&lt;br&gt;
 console.log (today);&lt;br&gt;
//day&lt;/p&gt;

&lt;p&gt;today ='night';&lt;br&gt;
console.log(today);&lt;br&gt;
//night&lt;br&gt;
`&lt;br&gt;
Binding doesn't contain the values , they grasp them with var, let, const.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binding Names&lt;/strong&gt;&lt;br&gt;
Rules for writing names : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can include numbers but cannot start with number eg: hello123 is good but 123hello is not accepted. &lt;/li&gt;
&lt;li&gt;may include $ and underScore(_) but except no other are taken. No Spaces are used.
-binding names or variable names cannot be used of the keywords eg : break case catch class const continue debugger default delete do else enum export extends false finally for
function if implements import interface in instanceof let
new package private protected public return static super
switch this throw true try typeof var void while with yield&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t worry about memorizing this list. When creating a binding produces an unexpected syntax error, see whether you’re trying to define a reserved word.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The collection of bindings and their values that exist at a given time is called the environment.When a program starts up, this environment is not empty. It always contains bindings that are part of the language standard, and most of the time, it also has bindings that provide ways to interact with the surrounding system. For example, in a browser, there are functions to interact with the currently loaded website and to read mouse and keyboard input.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;functions&lt;/strong&gt;&lt;br&gt;
functions are a piece of a program wrapped in a value. Values are given to a function called arguments. &lt;br&gt;
example: &lt;br&gt;
function sum() {&lt;br&gt;
...&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;console.log function&lt;/strong&gt;&lt;br&gt;
In the javascript we use console.log function to see what the output has come. It cannot be seen in the viewing area of the browser but can be see in the inspect of the browsers. f12 on windows and command-option-I on mac. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Return Value&lt;/strong&gt;&lt;br&gt;
When a function produces a value, it is said to return a value.&lt;br&gt;
example: console.log(Math.max(2,4))&lt;br&gt;
//4&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;&lt;br&gt;
In more than one statement, the statements are executed as if there are a story from top to bottom. &lt;br&gt;
example: let num = number(prompt("Pick a number"))&lt;br&gt;
console.log("your number is " + num)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conditional execution&lt;/strong&gt;&lt;br&gt;
 if there comes a choice then this execution can be used: &lt;br&gt;
  &lt;em&gt;if condition&lt;/em&gt;&lt;br&gt;
example: if(1+1=2) console.log("Its true")&lt;br&gt;
//Its true&lt;br&gt;
 if 1+2 isnt 2 then the console wouldnt have worked. &lt;br&gt;
for multiple choices example: &lt;/p&gt;

&lt;p&gt;let num = Number(prompt("Pick a number"));&lt;/p&gt;

&lt;p&gt;if (num &amp;lt; 10) {&lt;br&gt;
  console.log("Small");&lt;br&gt;
} else if (num &amp;lt; 100) {&lt;br&gt;
  console.log("Medium");&lt;br&gt;
} else {&lt;br&gt;
  console.log("Large");&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loops&lt;/strong&gt;&lt;br&gt;
to do a repeated work &lt;br&gt;
 &lt;em&gt;While loop&lt;/em&gt;&lt;br&gt;
we need is a way to run a piece of code multiple times. This form of control flow is called a loop.&lt;br&gt;
example:&lt;br&gt;
let number = 0;&lt;br&gt;
while (number &amp;lt;= 12) {&lt;br&gt;
  console.log(number);&lt;br&gt;
  number = number + 2;&lt;br&gt;
}&lt;br&gt;
// → 0&lt;br&gt;
// → 2&lt;br&gt;
//   … etcetera&lt;/p&gt;

&lt;p&gt;&lt;em&gt;do while&lt;/em&gt;&lt;br&gt;
In this loop atleast the loop will run atleast once.&lt;br&gt;
example:&lt;br&gt;
let yourName;&lt;br&gt;
do {&lt;br&gt;
  yourName = prompt("Who are you?");&lt;br&gt;
} while (!yourName);&lt;br&gt;
console.log(yourName);&lt;/p&gt;

&lt;p&gt;&lt;em&gt;for loop&lt;/em&gt;&lt;br&gt;
 example: &lt;br&gt;
for( var i=0;i&amp;lt;5;i++){&lt;br&gt;
...&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Indenting Code&lt;/strong&gt;&lt;br&gt;
Many coders uses tabs to indent their code to look nice and easier to read. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breaking out of a loop&lt;/strong&gt;&lt;br&gt;
To prevent from the loop that will run continuously so the break statement is used. &lt;br&gt;
example: &lt;br&gt;
for(let number=15; number=number+1){&lt;br&gt;
  if (number%7==0){&lt;br&gt;
console.log(number);&lt;br&gt;
break;&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
//21&lt;/p&gt;

&lt;p&gt;Imagine if the break statement wasn't here then the loop would've run infinite times so to prevent it, the break statement is used and if there want to continue for the other loops then the continue statement is used. continue;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating bindings Succinctly&lt;/strong&gt;&lt;br&gt;
(succinctly means brief or to the point)&lt;br&gt;
 Instead of number =number +1, we can also write number+=1 or number++ or number--. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dispatching on a value with switch&lt;/strong&gt;&lt;br&gt;
Instead of if condition to go into a decision. switch is more preferred.&lt;br&gt;
example:&lt;br&gt;
switch (prompt("What is the weather like?")) {&lt;br&gt;
  case "rainy":&lt;br&gt;
    console.log("Remember to bring an umbrella.");&lt;br&gt;
    break;&lt;br&gt;
  case "sunny":&lt;br&gt;
    console.log("Dress lightly.");&lt;br&gt;
  case "cloudy":&lt;br&gt;
    console.log("Go outside.");&lt;br&gt;
    break;&lt;br&gt;
  default:&lt;br&gt;
    console.log("Unknown weather type!");&lt;br&gt;
    break;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Capitalization&lt;/strong&gt;&lt;br&gt;
There are 4 types to write in JS:&lt;br&gt;
hellopeopleoftheworld&lt;br&gt;
hello_people_of_the_world&lt;br&gt;
HelloPeopleOfTheWorld&lt;br&gt;
helloPeopleOfTheWorld&lt;/p&gt;

&lt;p&gt;1st one is hard to read. 2nd one is difficult to write the underscore. The effective way to write in a JavaScript is the 4th one: capitalizing every initials of the word except the first word;it is also called camelCase. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;br&gt;
// is used for single line comment and /**/ is used for multiple line comment.&lt;br&gt;
Example: &lt;br&gt;
// this is a good code&lt;br&gt;
/*this code contains&lt;br&gt;
alot of defining terms&lt;br&gt;
to understand&lt;br&gt;
*/&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Tensorflow Lyrics Generation</title>
      <author>ashwins-code</author>
      <pubDate>Sun, 26 Dec 2021 11:02:58 +0000</pubDate>
      <link>https://dev.to/ashwinscode/tensorflow-lyrics-generation-342f</link>
      <guid>https://dev.to/ashwinscode/tensorflow-lyrics-generation-342f</guid>
      <description>&lt;p&gt;Hi! Welcome to this post about lyrics/text generation in Tensorflow&lt;/p&gt;

&lt;p&gt;The project described in this post can be found on my Github &lt;a href="https://github.com/ashwins-code/Tensorflow-Lyrics-Generator"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here this my Github profile &lt;a href="https://github.com/ashwins-code"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'd appreciate any feedback on anything on my profile and, if you look anything you see, please leave a star on it too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aim"&gt;
  &lt;/a&gt;
  Aim
&lt;/h2&gt;

&lt;p&gt;What is our aim in this post?&lt;/p&gt;

&lt;p&gt;We want to create a bot that, given a starting phrase, would generate its own lyrics, powered by a machine learning model that would have learned from the lyrics of previously written songs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-will-we-go-about-doing-this"&gt;
  &lt;/a&gt;
  How will we go about doing this?
&lt;/h2&gt;

&lt;p&gt;There are 3 main steps we have to take&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prepare our training data&lt;/li&gt;
&lt;li&gt;Build our machine learning model&lt;/li&gt;
&lt;li&gt;Train and use our model&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-will-our-model-work"&gt;
  &lt;/a&gt;
  How will our model work
&lt;/h2&gt;

&lt;p&gt;Before we do anything, we must think about how our model would work, since this would then tell us how we should go about preparing our training data.&lt;/p&gt;

&lt;p&gt;Our model will take a one-hot encoded sequence of characters and will try to predict the next character in the sequence, based on the characters before.&lt;/p&gt;

&lt;p&gt;Example...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input: "hello worl"
input -&amp;gt; model -&amp;gt; "d" (next predicted character)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;One-hot encoding is a way of vectorising data where the data can be categorised and each category has an integer ID.&lt;/p&gt;

&lt;p&gt;In our case, for the sequence of characters, we can assign each unique character their own ID (we have categorised the text into unique characters). &lt;/p&gt;

&lt;p&gt;For example...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"a" = 0
"b" = 1
"c" = 2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One-hot encoding takes these IDs and represents them as a vector. This vector has a length equal to the number of different categories. The vector consists of all zeroes except the index of the corresponding ID, which is populated with a 1.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to encode the letter "a"...&lt;/p&gt;

&lt;p&gt;We know it's ID is 0 and that there are 26 total categories (since there are 26 letters in the alphabet)&lt;/p&gt;

&lt;p&gt;So, the one-hot encoding would be a vector of length 26 with index 0 being a 1 and the rest being a 0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 0, 0, 0 ... 0, 0] //"a"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, for "b" we know the ID for it is 1, so the encoding would be a vector of length 26 and index 1 being a 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[0, 1, 0, 0 ... 0, 0] //"b"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#preparing-the-training-data"&gt;
  &lt;/a&gt;
  Preparing the training data
&lt;/h2&gt;

&lt;p&gt;For my project, I decided to use 8 Metallica songs as the dataset for the model to train on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;This is quite a small dataset for machine learning standards, so our model wouldn't produce amazing results. However, it allows for quicker training times and we would get to see results quicker. If you would like to have a much more accurate model, I would suggest using a larger dataset. &lt;/p&gt;

&lt;p&gt;I saved all the lyrics as text files for each song and named them as the following...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data1.txt
data2.txt
data3.txt
...
data8.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need to process out data into inputs and outputs.&lt;/p&gt;

&lt;p&gt;Our inputs are a sequence of characters and the outputs are characters that should come next in the input sequence. &lt;/p&gt;

&lt;p&gt;We can process our texts by taking each substring of a chosen length in our text and splitting it so that the last character is the output and the rest of the characters in the substring are the input sequence. &lt;/p&gt;

&lt;p&gt;For example, if there was a substring "tensorflow is cool", this would be split as such&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input sequence: "tensorflow is coo"
output: "l"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We do this process for every substring in our lyrics data.&lt;/p&gt;

&lt;p&gt;We can encode both the input and outputs and put them into input/output arrays.&lt;/p&gt;

&lt;p&gt;In my project, I chose for the input character sequence to be length 15. &lt;/p&gt;

&lt;p&gt;Here is the code for prepping our dataset&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;#returns the number of possible characters
&lt;/span&gt;    &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;#returns the list of all characters we will allow from our dataset (the lower case alphabet, spaces and new lines)
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyz &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;text_to_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#takes in a text and returns it as a sequence of one-hot encodings, representing each character in the text
&lt;/span&gt;    &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;one_hot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;one_hot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_hot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prep_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#this function takes the file name of where certain text data is stored and returns the input sequences array and output characters array
&lt;/span&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_to_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#one-hot encoding the text
&lt;/span&gt;    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#input sequence array
&lt;/span&gt;    &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#output character array
&lt;/span&gt;    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#loop for finding each substring of length 15
&lt;/span&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#input sequence
&lt;/span&gt;        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#output character
&lt;/span&gt;        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#input sequences
&lt;/span&gt;    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#output characters
&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#goes through all the dataset files and adds the inputs and outputs to x and y
&lt;/span&gt;        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prep_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"data&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-our-model"&gt;
  &lt;/a&gt;
  Building our model
&lt;/h2&gt;

&lt;p&gt;Now that we have prepared our data, we can build our model.&lt;/p&gt;

&lt;p&gt;Remember, our model will take a sequence of characters and will predict the next character in that sequence. &lt;/p&gt;

&lt;p&gt;When dealing with sequential data, it is best to use &lt;strong&gt;recurrent neural networks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you don't know how a normal neural network works, I would suggest researching how they work first. &lt;/p&gt;

&lt;p&gt;Recurrent neural networks are very useful when working with sequential data. &lt;/p&gt;

&lt;p&gt;In sequential data, each data point is influenced by the data points before it, so for predicting the next thing to come in a sequence, having context is crucial.&lt;/p&gt;

&lt;p&gt;Normal feed-forward neural networks simply can not model sequential data, since they only pass data from layer to layer, so no notion of time is considered.&lt;/p&gt;

&lt;p&gt;Recurrent neural networks, however, have layers that loop their outputs back into themselves, which allows for the network to have context.&lt;/p&gt;

&lt;p&gt;The layer looks at each element/time-step in the sequence and produces an output and what is known as a &lt;strong&gt;hidden state&lt;/strong&gt;. This hidden state is then passed back into the layer when it looks at the next time step, which preserves context. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ka_Yk6PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckfiyq0rd6meq0xk7hqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ka_Yk6PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckfiyq0rd6meq0xk7hqk.png" alt="Diagram of RNN" width="880" height="231"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-unrolled.png"&gt;https://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-unrolled.png&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#vanishing-gradients"&gt;
  &lt;/a&gt;
  Vanishing Gradients
&lt;/h4&gt;

&lt;p&gt;RNNs, however, suffer from "short term memory loss".&lt;/p&gt;

&lt;p&gt;This means that, information from far back in the sequence gets lost as the time-step increases. This is caused by &lt;strong&gt;vanishing gradients&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When a neural network trains, it calculates the derivative/gradient of its loss function with respect to all its weights. This gradient is then used to adjust the weights. As the loss is backpropagated through each layer, the gradient gets smaller and smaller, meaning that it will have a small effect on the weights in those layers. The early layers of a neural network do very little learning because of this.&lt;/p&gt;

&lt;p&gt;With RNNs, this vanishing gradient means that early time-steps in a sequence and "forgot" about by the network, so have no influence in the output.&lt;/p&gt;

&lt;p&gt;This can be fixed by using LSTMs and GRUs, which are special types of RNNs which solve the vanishing gradient problem. They have gates which determine what to preserve or remove from the hidden states it receives, which allow it to have "long term memory".&lt;/p&gt;

&lt;p&gt;This post &lt;a href="https://towardsdatascience.com/illustrated-guide-to-recurrent-neural-networks-79e5eb8049c9"&gt;here&lt;/a&gt; explains RNNs to greater detail.&lt;/p&gt;

&lt;p&gt;With the theory out the way, we can use Tensorflow to build our model. &lt;/p&gt;

&lt;p&gt;The code should be self-explanatory if you are familiar with the Tensorflow API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_model&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LSTM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;return_sequences&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bidirectional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LSTM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"softmax"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;losses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CategoricalCrossentropy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optimizers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Adam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;train_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Training..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"save"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#training-and-using-our-model"&gt;
  &lt;/a&gt;
  Training and using our model
&lt;/h2&gt;

&lt;p&gt;To train our model, all we have to do is add a few more lines to our code.&lt;/p&gt;

&lt;p&gt;Here is what our final code for training our model will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#train.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;#returns the number of possible characters
&lt;/span&gt;    &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;#returns the list of all characters we will allow from our dataset (the lower case alphabet, spaces and new lines)
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyz &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;text_to_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#takes in a text and returns it as a sequence of one-hot encodings, representing each character in the text
&lt;/span&gt;    &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;one_hot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;one_hot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_hot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prep_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#this function takes the file name of where certain text data is stored and returns the input sequences array and output characters array
&lt;/span&gt;    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_to_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#one-hot encoding the text
&lt;/span&gt;    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#input sequence array
&lt;/span&gt;    &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#output character array
&lt;/span&gt;    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#loop for finding each substring of length 15
&lt;/span&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#input sequence
&lt;/span&gt;        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#output character
&lt;/span&gt;        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_model&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LSTM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;return_sequences&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bidirectional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LSTM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_character_count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"softmax"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;losses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CategoricalCrossentropy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optimizers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Adam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;train_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Training..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"save"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#input sequences
&lt;/span&gt;    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#output characters
&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#goes through all the dataset files and adds the inputs and outputs to x and y
&lt;/span&gt;        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prep_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"data&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;train_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Name that file "train.py"&lt;/p&gt;

&lt;p&gt;And now all we need to do is use our model.&lt;/p&gt;

&lt;p&gt;We want our bot to ask the user for an input string and we will use our model to produce some lyrics.&lt;/p&gt;

&lt;p&gt;However, since our model only produces one letter at a time, we would need to do the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Start with input sequence
2. Pass input sequence to model to predict next character
3. Add this character to the input sequence and drop off the first letter of the sequence
4. Repeat steps 2 and 3 however times you want to produce a set of lyrics
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#run.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;train&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text_to_vector&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autocorrect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Speller&lt;/span&gt;
&lt;span class="n"&gt;spell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Speller&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#inp = input sequence
&lt;/span&gt;    &lt;span class="c1"&gt;#len = no. of characters to produce
&lt;/span&gt;    &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_alphabet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inp&lt;/span&gt; &lt;span class="c1"&gt;#final output
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_to_vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#encoding the input
&lt;/span&gt;        &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_dims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#formatting it so it matches the input shape for our model
&lt;/span&gt;        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#passing the input to our model
&lt;/span&gt;        &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#decoding our output to a letter
&lt;/span&gt;        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="c1"&gt;#adding the letter to our output string
&lt;/span&gt;        &lt;span class="n"&gt;inp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="c1"&gt;#adding the letter to the input sequence
&lt;/span&gt;        &lt;span class="n"&gt;inp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="c1"&gt;#dropping off the first letter of input sequence
&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#return spell checked output
&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"save"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"============================"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter seed phrase: "&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"============================"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are producing text on character-level, there are bound to be a quite a few spelling mistakes. I decided to use an autocorrect library in order to clean up our resulting text.&lt;/p&gt;

&lt;p&gt;Here are the results&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python run.py
[...Tensorflow warnings]

============================
Enter seed phrase: Never will it mend
Never will it mend
now the truth of me
of live
all silence the exist
cannot kill the the family
battery
never
fire
to begin whipping one
no nothing no the matters breath
oh it so met mor the role me can see
and it just free the find
never will the time
nothing is the ear fire
truth wind to see
man me will the death
writing dawn aninimine in me
cannot justice the battery
pounding either as taken my stream
to the will is the existing there is bore
make it our lothenent
born one row the better the existing fro
============================

============================
Enter seed phrase: hold my battery of breath
hold my battery of breath of eyes to set death
oh straw hat your humanity
late the ust comes before but they su
never cared to be
i the estimate it life the lost fill dead
so red
so true
battery
no nothing life now i me crossing ftin
dare
so true myself in me
now pain i mean
so net would
to be
no ripped to are

so prmd

imply solute more is to you hear
taken my end
truth the within
 so let it be worth
tro finding
something
mutilation cancellation cancellation
austin
so let it be resting  spouses the stan

serve goth
============================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the resulting text doesn't make too much sense...&lt;/p&gt;

&lt;p&gt;However, it can string together some phrases that make sense.&lt;/p&gt;

&lt;p&gt;This can be improved by implementing a model to produce text on a word level or using a larger dataset. &lt;/p&gt;

&lt;p&gt;You could also look into using technologies like GPT, which has billions of parameters and produces extremely human-like text.&lt;/p&gt;

</description>
      <category>tensorflow</category>
      <category>python</category>
      <category>machinelearning</category>
      <category>textgeneration</category>
    </item>
    <item>
      <title>UseEffect: Is it really Effective?</title>
      <author>Rajshekhar Yadav</author>
      <pubDate>Sun, 26 Dec 2021 10:09:59 +0000</pubDate>
      <link>https://dev.to/iamrajshekhar/useeffect-is-it-really-effective-4e3l</link>
      <guid>https://dev.to/iamrajshekhar/useeffect-is-it-really-effective-4e3l</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-are-hooks"&gt;
  &lt;/a&gt;
  What Are Hooks
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-useeffect"&gt;
  &lt;/a&gt;
  What is useEffect
&lt;/h3&gt;

&lt;p&gt;If you have been working with class component you would have performed side effects in your component like updating Ui, fetching data from api or subscribing to any changes. Since the render method is too early to perform side effects we have lifecycle method in class component.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;ComponentDidMount&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ComponentDidUpdate&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ComponentWillUnmount&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You must have been concerned about how useEffect would handle all of this. Let's get started without further ado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OARkAm5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640505845676/uGHSIaJ7B.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OARkAm5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640505845676/uGHSIaJ7B.gif" alt="alright-then-jim-carrey.gif" width="250" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-useeffect"&gt;
  &lt;/a&gt;
  How to use useEffect
&lt;/h3&gt;

&lt;p&gt;UseEffect accept two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Callback&lt;/strong&gt;: It is a function where we put write the side - effect  logics.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependency&lt;/strong&gt; : It is an optional array of dependency. Callback function got executed whenever these dependency changes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//Callback&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's have a look at all of the scenarios with some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;When the dependency is not provided&lt;/strong&gt;: This side-effect runs after every rendering.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App.js: useEffect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SafeAreaView&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;backgroundStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sectionTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hi&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Press me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SafeAreaView&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we check at the logs, we can see that the side-effect is called whenever the count changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt; LOG  App.js: useEffect
 LOG  App.js: useEffect
 LOG  App.js: useEffect
 LOG  App.js: useEffect
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;When the dependency array is empty&lt;/strong&gt;: This side-effect will call first time only.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App.js: useEffect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we look into logs, side-effect got called only one time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt; LOG  Click Me
 LOG  Click Me
 LOG  Click Me
 LOG  Click Me
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When configured in such a way, the useEffect() executes the callback just once, after initial mounting. We can say it will work like componentDidMount() &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;When the dependency array have some parameter&lt;/strong&gt;: This side-effect runs whenever the parameter changes .
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCountDown&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App.js: useEffect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SafeAreaView&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sectionTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hi&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sectionTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;ticking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Increment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Increment Count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Decrement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Decrement Count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setCountDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countDown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SafeAreaView&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you closely look into console, You will find whenever the value of &lt;code&gt;count&lt;/code&gt; changes, useEffect got called only then.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt; LOG  App.js: useEffect
 LOG  Decrement Count
 LOG  Decrement Count
 LOG  Decrement Count
 LOG  Decrement Count
 LOG  Increment Count
 LOG  App.js: useEffect
 LOG  Increment Count
 LOG  App.js: useEffect
 LOG  Increment Count
 LOG  App.js: useEffect
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;So you can see it will work the same way like &lt;em&gt;ComponentDidUpdate&lt;/em&gt; work in class component&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you must be thinking, what about side-effect cleanup? Class component has a separate method to deal with it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sSE6-DXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640422721410/rccEv6Lo9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sSE6-DXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640422721410/rccEv6Lo9.gif" alt="tenor.com" width="640" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Side-Effect Cleanup&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some side effects need a cleanup, like canceling any api call while un-mounting, closing connection or clearing timers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We can achieve this by returning a cleanup function from &lt;code&gt;&lt;br&gt;
 useEffect() callback&lt;/code&gt;.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This is your side-effect logic&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Side-effect cleanup&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},[&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cleanup works in following way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;While mounting the component, &lt;code&gt;useEffect()&lt;/code&gt; invokes the callback having the side-effect. &lt;code&gt;cleanup&lt;/code&gt; function is not called.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;On later renderings, before invoking the next side-effect callback, useEffect() invokes the cleanup function from the previous side-effect execution, then runs the current side-effect.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;At the end, after unmounting the component, &lt;code&gt;useEffect()&lt;/code&gt; invokes the cleanup function from the latest side-effect.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me show you some basic code to explain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App.js: useEffect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App.js: cleanup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SafeAreaView&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sectionTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hi&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Increment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Increment Count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SafeAreaView&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look into the logs, cleanup function is getting called every time   before invoking the next side-effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt; LOG  App.js: useEffect
 LOG  Increment Count
 LOG  App.js: cleanup
 LOG  App.js: useEffect
 LOG  Increment Count
 LOG  App.js: cleanup
 LOG  App.js: useEffect
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-case-of-raw-useeffect-endraw-"&gt;
  &lt;/a&gt;
  Use case of &lt;code&gt;useEffect()&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Updating Ui whenever the state changes.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*When we want to perform any action once, especially when the app mount first time. We can prefer useEffect. *&lt;/p&gt;

&lt;p&gt;Let us consider an example , we want to fetch list of newsfeed while loading the newsfeed screen.&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newsFeed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNewsFeed&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchNewsFeed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/employees&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newsFeedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setNewsFeed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newsFeedData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;//  can not be async&lt;/span&gt;
    &lt;span class="nx"&gt;fetchNewsFeed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Can invoke async function&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;useEffect(callback, dependencies) is the hook that manages the side-effects in functional components. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Callback argument is a function to put the side-effect logic. &lt;/li&gt;
&lt;li&gt;Dependencies is a list of dependencies of your side-effect: being props or state values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;useEffect(callback, dependencies) invokes the callback after initial mounting, and on later renderings, if any value inside dependencies has changed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;useEffect(callback, dependencies) can be used in following ways  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;initial mounting(ComponentDidMount),&lt;/li&gt;
&lt;li&gt;Managing state changes (ComponentDidUpdate) &lt;/li&gt;
&lt;li&gt;For side-effect cleanup (ComponentWillUnmount)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#related-link"&gt;
  &lt;/a&gt;
  Related Link
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/hooks-overview.html"&gt;React-Hooks-Documentation&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;Hooks-API-Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYAC9n_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640504504534/xPnxYRU7b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYAC9n_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640504504534/xPnxYRU7b.gif" alt="thanks.gif" width="480" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this post helped you understand the basic idea of useEffect(). Feel free to add your suggestions. &lt;br&gt;
Follow me on  &lt;a href="https://twitter.com/yrajshekhar231"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>reactnative</category>
      <category>react</category>
    </item>
    <item>
      <title>Deploy ASP.NET CORE Applications on Centos 8</title>
      <author>uthman</author>
      <pubDate>Sun, 26 Dec 2021 09:09:30 +0000</pubDate>
      <link>https://dev.to/uthmanrahimi/deploy-aspnet-core-applications-on-centos-8-43n2</link>
      <guid>https://dev.to/uthmanrahimi/deploy-aspnet-core-applications-on-centos-8-43n2</guid>
      <description>&lt;p&gt;A couple of weeks ago I needed to deploy an &lt;code&gt;ASP.NET Core&lt;/code&gt; application on a &lt;code&gt;centos 8&lt;/code&gt; machine and that was the first time I wanted to use Linux because I had no experience working with Linux, it took me a whole day to finish this task.&lt;br&gt;
In this article, I am going to share whatever you need to know about deploying the asp.net core application on a Linux machine.&lt;/p&gt;

&lt;p&gt;First of all, if you are using Windows or Mac OS and you want to have a Linux OS you can use &lt;strong&gt;VirtualBox&lt;/strong&gt; which is free and open-source to run a Linux OS as a gust on your Windows.&lt;/p&gt;

&lt;p&gt;In order to install a package, you need to use its command which is like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf install PackageName

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To deploy the &lt;code&gt;ASP.NET Core&lt;/code&gt; application we need to install some packages. These packages are required and we have to install them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;- SDK&lt;/li&gt;
&lt;li&gt;- AspNetCoreRuntime&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open a terminal and run the following command to install them :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf install dotnet-sdk-5.0
sudo dnf install aspnetcore-runtime-5.0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;PackageManager for &lt;code&gt;CentOs 8&lt;/code&gt; is &lt;code&gt;dnf&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; is for &lt;code&gt;CentOs 7&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#install-nginx"&gt;
  &lt;/a&gt;
  Install Nginx
&lt;/h2&gt;

&lt;p&gt;I am using &lt;code&gt;Nginx&lt;/code&gt; as a web server but you can choose &lt;code&gt;Apache&lt;/code&gt; if you do not want to use &lt;code&gt;Nginx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So use below command to install &lt;code&gt;nginx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation is finished, you need to enable and start &lt;code&gt;Nginx&lt;/code&gt;. To enable and  run  &lt;code&gt;Nginx&lt;/code&gt; (or any other services) you can use the below command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable nginx

sudo systemctm start nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will enable and start &lt;code&gt;Nginx&lt;/code&gt;. But if you want to make sure that it is running, you can check its status by using the below command to see its status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl status nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;bear in mind that whenever you want to check the status of a service you can use the above command and I think it's one of the most used commands at the beginning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get a result like below, it means &lt;code&gt;Nginx&lt;/code&gt; is working and it's ready to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9e1jTp0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9worl6fncrta96pnevvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9e1jTp0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9worl6fncrta96pnevvt.png" alt="Image description" width="864" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good job, we have installed all the things that are required to deploy our application, next we have to create a new service to run our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-nginx"&gt;
  &lt;/a&gt;
  Configure Nginx
&lt;/h2&gt;

&lt;p&gt;The next step is configuring &lt;code&gt;Nginx&lt;/code&gt;  to forward HTTP Requests to our &lt;code&gt;ASP.NET Core&lt;/code&gt; application, to do this we should modify its default configuration which is located in &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;br&gt;
run following command to open it and modify it like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/nginx/nginx.conf

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will open the file and now replace its content with the following :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;location / {
    proxy_pass http://0.0.0.0:5000;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To verify if the change we applied is fine and there is no mistake in our &lt;code&gt;syntax&lt;/code&gt;, run &lt;code&gt;sudo nginx -t&lt;/code&gt;, if the test is successful then we need to reload &lt;code&gt;nginx&lt;/code&gt;: &lt;code&gt;sudo nginx -s reload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you open a browser and enter &lt;code&gt;http:localhost&lt;/code&gt; you should see the default page of &lt;code&gt;Nginx&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-service"&gt;
  &lt;/a&gt;
  Create a new Service
&lt;/h2&gt;

&lt;p&gt;Up until now we installed the required packages and configured &lt;code&gt;Nginx&lt;/code&gt;, now we should create a new service to run our application.&lt;/p&gt;

&lt;p&gt;To create a new Service File, use the following command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/systemd/system/myapp.service

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add following example to it, then save it by &lt;code&gt;ctrl+x&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Unit]
Description=Example .NET Web API App running on CentOs 8

[Service]
WorkingDirectory=/var/www/myapp
ExecStart=/usr/bin/dotnet /var/www/myapp/myapp.dll
Restart=always
# Restart service after 10 seconds if the dotnet service crashes:
RestartSec=10
KillSignal=SIGINT
SyslogIdentifier=dotnet-example
User=www-data
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And copy published Project to &lt;code&gt;var/www/myapp&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;www-data&lt;/code&gt; user must exist, otherwise your service could not be run. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have done all the things above, now we should enable and start our  service to run the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable myapp.service
sudo systemctl start myapp.service

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running it, make sure it's running by checking its status &lt;code&gt;sudo systemctl satatus myapp.service&lt;/code&gt; , if you get a green &lt;code&gt;running&lt;/code&gt; result, it is working and you can access it by entering &lt;code&gt;http:localhost:5000&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redirect-traffic-to-5000"&gt;
  &lt;/a&gt;
  Redirect Traffic to 5000
&lt;/h2&gt;

&lt;p&gt;If you want to access your project on &lt;code&gt;port 80&lt;/code&gt; and also access to it from other computers, you will need to add below line in your &lt;code&gt;appSetting.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "Urls": "http://0.0.0.0:5000",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this way, we just need to enter Server IP Address in browser, &lt;code&gt;Nginx&lt;/code&gt; will redirect to port 5000.&lt;/p&gt;

</description>
      <category>aspnetcore</category>
      <category>linux</category>
      <category>centos</category>
      <category>netcore</category>
    </item>
    <item>
      <title>How to make Floating animation in HTML CSS</title>
      <author>Suyash Vashishtha</author>
      <pubDate>Sun, 26 Dec 2021 09:08:03 +0000</pubDate>
      <link>https://dev.to/suyashvash/how-to-make-floating-animation-in-html-css-51da</link>
      <guid>https://dev.to/suyashvash/how-to-make-floating-animation-in-html-css-51da</guid>
      <description>&lt;p&gt;Animations are one of the most attractive things when it comes to Websites. Even having some little minimalistic animations can make your website much more soothing and attractive.&lt;/p&gt;

&lt;p&gt;In this blog, we will see how to we can make a little floating animation in HTML CSS only.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7t4JoSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbbacauh9lidxgsy27zf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7t4JoSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbbacauh9lidxgsy27zf.gif" alt="Floating image demo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gif is from my React JS OTT webapp &lt;a href="https://ethrex-watch.web.app/"&gt;Link here&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;Looks cool enough for loading screens right ? You can also use it for some on page element animations.&lt;br&gt;
``&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-jump-into-development-part-"&gt;
  &lt;/a&gt;
  Let's jump into Development part !
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#-html"&gt;
  &lt;/a&gt;
  - HTML
&lt;/h3&gt;

&lt;p&gt;Put a simple image inside of a div. This image will be the one we are going to make a float.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-css"&gt;
  &lt;/a&gt;
  - CSS
&lt;/h3&gt;

&lt;p&gt;Design your parent div with a flex (recommended way but totally optional).&lt;br&gt;
Then make a &lt;code&gt;@keyframe&lt;/code&gt; with an animation -&lt;/p&gt;

&lt;pre&gt;
@keyframes floater {
  0%{transform: translateY(-10%);transition: ease 0.5s;}
  50%{transform: translateY(10%);transition: ease 0.5s;}
}
&lt;/pre&gt;

&lt;p&gt;Now connect your animation with you're image class. And put default   translateY to -10% and transition ease 0.5s for smooth animation&lt;/p&gt;

&lt;pre&gt;
.float-area{
  height:100vh;
  display: flex;
  flex-direction:column;
  align-items: center;
  justify-content: center;
}

.floating-img{
  transform: translateY(-10%);
  animation: floater 1.5s infinite;
  transition: ease 0.5s;
  width: 80px;
  height:80px;
}

&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Source code -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/suyashvash/embed/eYGeQzW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-poof-youre-image-is-floating-like-a-charm-"&gt;
  &lt;/a&gt;
  And Poof ! You're image is floating like a charm !
&lt;/h3&gt;

&lt;p&gt;Now go on and play with the values and make it more interesting according to your needs :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading my blog! Please drop a Like and Comment if you found it useful&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>animation</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why is Web 3.0 a backstab to the internet world?</title>
      <author>Arkadeep Nag</author>
      <pubDate>Sun, 26 Dec 2021 08:48:47 +0000</pubDate>
      <link>https://dev.to/arkadeepnag/why-is-web-30-a-backstab-to-the-internet-world-3l94</link>
      <guid>https://dev.to/arkadeepnag/why-is-web-30-a-backstab-to-the-internet-world-3l94</guid>
      <description>&lt;p&gt;Web 3.0 is a technology of the internet that promises to replace the web 2.0 technology soon and it has some problems.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  1
&lt;/h1&gt;

&lt;p&gt;The first problem can be analyzed from our home.&lt;br&gt;
Why do we need parents? To take care of us I believe and have a check on us (One of the primary actions of a parent)&lt;br&gt;
Now take web 3.0, if you are set anonymous, i.e. no one knows anything about you. Then don’t you think that if you ever do a crime on the internet,  you cannot be traced and the victim can never get justice?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  2
&lt;/h1&gt;

&lt;p&gt;I believe that the sites like Google, Facebook, YouTube make your stay in their site by using ML and your data but have you ever thought that the very efficient results you get are because of that. The ML models scan your information to give you the relevant information and save a lot of your time &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  3
&lt;/h1&gt;

&lt;p&gt;Though your data is not saved in a centralized server of any corporation it is there in some server and from there, anyone can download your data and moreover you will not know who has taken your data&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  4
&lt;/h1&gt;

&lt;p&gt;The rapid development of the internet is because of the simple dev development tactics required in it. However, in web3.0 changing or developing becomes very hard and thus this speed of development will eventually be diminished&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  5
&lt;/h1&gt;

&lt;p&gt;In web 2.0 alone thousands of scams and frauds are happening around the world, where it is centralized then think what can happen when the web will be decentralized in web 3.0&lt;/p&gt;

&lt;p&gt;With these many disadvantages and the data shifting totally out of the hands of any parent organization, the internet may get disgusting and not so good as it is now. &lt;/p&gt;

&lt;p&gt;So we must look forward to developing web 2.0 's technology to get better results&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>internet</category>
    </item>
    <item>
      <title>Shell-Backdoor for Hacking</title>
      <author>Kaixin</author>
      <pubDate>Sun, 26 Dec 2021 08:41:44 +0000</pubDate>
      <link>https://dev.to/kaixinn/shell-backdoor-14ln</link>
      <guid>https://dev.to/kaixinn/shell-backdoor-14ln</guid>
      <description>&lt;p&gt;I created this script to help make it easier for you to directly attack index.html / index.php / phpmyadmin on the website 😄&lt;br&gt;
for the advantages of the features of this script I have completed everything. you can check the features below 😄&lt;br&gt;
I optimize for updates as soon as possible, for a better experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github Repo: &lt;a href="https://github.com/SourCode-Z/Shell-Backdoor"&gt;Shell Backdoor&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Password shell-backdoor&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;username : meow404&lt;/li&gt;
&lt;li&gt; password : penucuriCode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8gAgJIlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3psjnodw45wt8jvp312.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gAgJIlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3psjnodw45wt8jvp312.png" alt="Image description" width="729" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nvy-d1y0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw2wvuybu2nr12y3bra8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nvy-d1y0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw2wvuybu2nr12y3bra8.png" alt="Image description" width="698" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What should have a company to work on in?</title>
      <author>Manu Martinez</author>
      <pubDate>Sun, 26 Dec 2021 08:41:43 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/what-should-have-a-company-to-work-on-in-16be</link>
      <guid>https://dev.to/whitehatdevv/what-should-have-a-company-to-work-on-in-16be</guid>
      <description>&lt;p&gt;Yeah!!! It should be your first question when you started reading this &lt;em&gt;post series&lt;/em&gt; 😄, it means what should have a company to &lt;strong&gt;love&lt;/strong&gt; me. &lt;/p&gt;

&lt;p&gt;Let me start telling that I have just rejected tons of job &lt;strong&gt;positions&lt;/strong&gt;, as I said before I don't choose a job only by the salary, it should be the last weight into your &lt;strong&gt;decision&lt;/strong&gt; 💻. I mean, I prefer to have a really enjoyable working environment than have an awful one, it means feeling exactly you want everyday.&lt;/p&gt;

&lt;p&gt;There are a lot of &lt;strong&gt;companies&lt;/strong&gt; in the world with different background and opportunities 🏛, but unfortunately I have heart a lot: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will pay you &lt;em&gt;whatever you want&lt;/em&gt; if you &lt;strong&gt;work&lt;/strong&gt; on my &lt;strong&gt;company&lt;/strong&gt; 😞&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or maybe, the typical phrase: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We &lt;strong&gt;want&lt;/strong&gt; the best one ▲.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#nevertheless-what-does-it-mean-"&gt;
  &lt;/a&gt;
  Nevertheless, what does it mean 😅?
&lt;/h2&gt;

&lt;p&gt;It means exactly that they will always take into account your knowledge, they don't care about your &lt;em&gt;experience, background, mindset&lt;/em&gt;, they only want you to &lt;em&gt;put the fire away&lt;/em&gt; 😏. They don't care about you, you are practically judge of your knowledge, maybe you have less experience than another candidate, but you have more practical use cases and you are able to &lt;strong&gt;learn in half time&lt;/strong&gt;, but it doesn't care, they are looking at the &lt;strong&gt;present&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you get a job &lt;strong&gt;there&lt;/strong&gt;, you will only be asked for &lt;em&gt;solutions&lt;/em&gt; 🧐, and after each sprint you will get a pat on the back 😞. Mainly you are working such a robot, you get requirements and are asked for a &lt;em&gt;solution&lt;/em&gt;. I think it's really bored, I'm sure you will get out ASAP. &lt;/p&gt;

&lt;p&gt;I hate this type of &lt;em&gt;companies&lt;/em&gt; where your job is the most important &lt;strong&gt;thing&lt;/strong&gt;, otherwise, there are some companies (unfortunately lesser 😁) that really appreciate your background, experience and the most important thing, &lt;strong&gt;your mindset&lt;/strong&gt;, yeah, I know, the only needed thing is to have wanted. You are able to learn whatever you need, it only takes some time, these types of company allow you to grow your professional career really faster that another ones.&lt;/p&gt;

&lt;p&gt;I mean to appreciate when a company is asking about your &lt;em&gt;mindset&lt;/em&gt;, I assure you that you will get a really confortable working &lt;strong&gt;environment&lt;/strong&gt; where you will be able to learn everyday, 😇 these are the keys I'm looking for when I receive a new job opportunity. I always keep in mind this phrase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are the best you will get paid as one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all, it's my opinion about new job positions, if you like this post please share with your friends and give us a feedback about it. We really appreciate it.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>blog</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Encode - Decode</title>
      <author>Kaixin</author>
      <pubDate>Sun, 26 Dec 2021 08:37:43 +0000</pubDate>
      <link>https://dev.to/kaixinn/encode-decode-3ddp</link>
      <guid>https://dev.to/kaixinn/encode-decode-3ddp</guid>
      <description>&lt;p&gt;In computers, encoding is the process of putting a sequence of characters&lt;br&gt;
(letters, numbers, punctuation, and certain symbols)&lt;br&gt;
into a specialized format for efficient transmission or storage.&lt;br&gt;
Decoding is the opposite process --&lt;br&gt;
the conversion of an encoded format back into the original sequence of characters.&lt;/p&gt;

&lt;p&gt;This script was made by myself without the intervention of others.!&lt;/p&gt;

&lt;p&gt;Github Repo: &lt;a href="https://github.com/SourCode-Z/Encode-Decode"&gt;Encode - Decode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>HTML-Encrypted</title>
      <author>Kaixin</author>
      <pubDate>Sun, 26 Dec 2021 08:33:36 +0000</pubDate>
      <link>https://dev.to/kaixinn/html-encrypted-2203</link>
      <guid>https://dev.to/kaixinn/html-encrypted-2203</guid>
      <description>&lt;p&gt;Protect your HTML-code by using encryption.&lt;br&gt;
Your website will be shown as normal but the HTML-code will be encrypted by Javascript.&lt;/p&gt;

&lt;p&gt;This script was made by myself without the intervention of others.!&lt;br&gt;
Protect your HTML-code by using encryption. Your website will be shown as normal but the HTML-code will be encrypted by Javascript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link HTML encrypted: &lt;a href="https://sourcode-z.github.io/HTML-Encrypted/"&gt;encrypted your Code&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Showcase&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaOLLpNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/632fjoxefau50981n170.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaOLLpNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/632fjoxefau50981n170.jpg" alt="Image description" width="880" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if u wat use my HTML Encrypt for ur page please add Credit&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>html</category>
    </item>
  </channel>
</rss>
