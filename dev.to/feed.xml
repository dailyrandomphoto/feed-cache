<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The current state of RuntDeale!</title>
      <author>Calin Baenen</author>
      <pubDate>Tue, 15 Jun 2021 10:36:18 +0000</pubDate>
      <link>https://dev.to/baenencalin/the-current-state-of-runtdeale-4h6o</link>
      <guid>https://dev.to/baenencalin/the-current-state-of-runtdeale-4h6o</guid>
      <description>&lt;p&gt;So... RuntDeale could be further along than I want it to be...&lt;br&gt;
BUT, I am happy with what I got now, considering I've been moving it from language to language constantly (first it started as a web-game in JS, then I made a prototype in Python, then I tried to move to Java, then I eventually, after taking a bit of a break from it, I moved to GoLang... it was working well there, until I found out the &lt;a href="https://github.com/gen2brain/raylib-go"&gt;Go bindings&lt;/a&gt; for &lt;a href="https://www.raylib.com/"&gt;Raylib&lt;/a&gt; were broken... so then I moved to C, but that was just beyond my understanding, so... FINALLY, I ended up with C++).&lt;/p&gt;

&lt;p&gt;Wow, that was a lot (in the thought portion).&lt;br&gt;
For the Go version, I've put up two gamedev bug logs on &lt;a href="https://www.youtube.com/channel/UCSwxv-A5IL6gTswguxGW0lg"&gt;my YouTube channel&lt;/a&gt;.&lt;br&gt;
For the C++ version, I recently released a video showing that the C (not C++) bindings for Raylib work perfectly fine, and I'm happy to be using them in my game.&lt;br&gt;
The video can be found &lt;a href="https://www.youtube.com/watch?v=1y28YL6juSo"&gt;here (RuntDeale C++ game demo (ver 0.0.0) - Sprites + Audio.)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thumbnail for the video also includes a watermark for the game that I made recently.&lt;br&gt;
The watermark, and the Tweet I put it in can be found &lt;a href="https://twitter.com/BaenenCalin/status/1397502021725532161"&gt;here&lt;/a&gt;.&lt;br&gt;
This is the artwork that the watermark rests on-top of:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x24LA279--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltltno49rpl1wvb2jjh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x24LA279--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltltno49rpl1wvb2jjh4.png" alt="Artwork of Rainville from RuntDeale. Rainville finally has a clearing between its storming clouds."&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
On top of all of this, I've been trying to create clever ways to cut down on my "code footprint", since I still want my game's code to be readable (even if no one except me is interested in it), and one clever way I've decided to solve that issue is by making a custom form of Ini for my game's use case.&lt;br&gt;
I'm planning for it to have "synonym keys" (so I don't have to write multiple lines with similar keybindings), mapping features, and other stuff in that vein.&lt;/p&gt;

&lt;p&gt;Anyways, this is getting pretty long, so I'll leave it here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-readingcheers"&gt;
  &lt;/a&gt;
  &lt;center&gt;Thanks for reading!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>cpp</category>
      <category>gamedev</category>
      <category>watercooler</category>
      <category>raylib</category>
    </item>
    <item>
      <title>Mario in JavaScript using KaboomJS (video)</title>
      <author>Ania Kubow</author>
      <pubDate>Tue, 15 Jun 2021 09:59:27 +0000</pubDate>
      <link>https://dev.to/ania_kubow/mario-in-javascript-using-kaboomjs-video-2b3g</link>
      <guid>https://dev.to/ania_kubow/mario-in-javascript-using-kaboomjs-video-2b3g</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2nucjefSr6I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video I show you how to build a Mario in JavaScript using the Kaboom.js library in my code editor of choice. If you want to see the full course on FreeCodeCamp, click here: &lt;a href="https://www.youtube.com/watch?v=4OaHB0JbJDI"&gt;https://www.youtube.com/watch?v=4OaHB0JbJDI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the full course I use a preconfigured environment to code Mario. In this tutorial I create the game from scratch using my code editor of choice. &lt;/p&gt;

&lt;p&gt;Final code here: &lt;a href="https://github.com/kubowania/mario"&gt;https://github.com/kubowania/mario&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imgur: &lt;a href="https://imgur.com/a/F8Jkryq"&gt;https://imgur.com/a/F8Jkryq&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;⭐ In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool"&gt;http://bit.ly/tabnine-top-tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ You can get a blockchain domain with my affiliate link here: &lt;a href="http://bit.ly/get-a-crypto-domain"&gt;http://bit.ly/get-a-crypto-domain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow"&gt;https://www.buymeacoffee.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips"&gt;https://bit.ly/JS-tips&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-find-me-on"&gt;
  &lt;/a&gt;
  You can also find me on:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/ania_kubow"&gt;https://twitter.com/ania_kubow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram: &lt;a href="https://instagram.com/aniakubow"&gt;https://instagram.com/aniakubow&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>kaboomjs</category>
    </item>
    <item>
      <title>How to add a preview of your React (or any other) site when sharing it</title>
      <author>Erik Karlsson</author>
      <pubDate>Tue, 15 Jun 2021 09:41:50 +0000</pubDate>
      <link>https://dev.to/erikkarlsson/how-to-add-a-preview-of-your-react-or-any-other-site-when-sharing-it-2fhf</link>
      <guid>https://dev.to/erikkarlsson/how-to-add-a-preview-of-your-react-or-any-other-site-when-sharing-it-2fhf</guid>
      <description>&lt;p&gt;Are you struggling with having your website preview looking something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzUFufdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo3slvkn6lyt04t5kre7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzUFufdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo3slvkn6lyt04t5kre7.png" alt="No picture in preview"&gt;&lt;/a&gt; &lt;br&gt;
Whenever you're sharing it on linkedin/facebook/etc, when you're really looking for something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_eXapdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm503wacw75zcjpkf2ys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_eXapdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm503wacw75zcjpkf2ys.png" alt="Man in picture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had this exact same issue and solved it. Let me show you how.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The magic is&lt;/strong&gt; all in the &lt;code&gt;index.html&lt;/code&gt; file. Sites such as Linkedin and facebook, and even Discord, use something called the Open Graph Protocol, and this allows you to specify how you want your preview to look like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This you will&lt;/strong&gt; specify in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag where you have your usual &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags  such as &lt;code&gt;&amp;lt;meta charset="utf-8" /&amp;gt;&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;The syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Title-name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"File-path"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Canonical-url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;These four tags&lt;/strong&gt; are required. There's also optional tags, the most commonly used being &lt;code&gt;og:description&lt;/code&gt;. You can read more about all the types of tags &lt;a href="https://ogp.me/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The image can&lt;/strong&gt; be anything you want - from very abstract to an actual preview of your site. I made mine by squeezing up my site and finding the right place to screen dump, then I put it in the &lt;code&gt;assets&lt;/code&gt; folder, and I declared it by:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;property="og:image" content="https://erikkarlsson.dev/assets/prev.png"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Together with everything else in the header it looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Erik Karlsson"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Portfolio page made by Erik in React."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://erikkarlsson.dev/assets/prev.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://erikkarlsson.dev"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which looks like this when sharing it on Linkedin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qowobql7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v7x8s7mhbw0xg1f54c4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qowobql7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v7x8s7mhbw0xg1f54c4.png" alt="After"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's how you do it! Check out &lt;a href="https://developers.facebook.com/docs/sharing/webmasters/"&gt;this&lt;/a&gt; if you want to learn more about this topic.&lt;/p&gt;

</description>
      <category>react</category>
      <category>seo</category>
      <category>html</category>
      <category>opengraph</category>
    </item>
    <item>
      <title>Making Friendly CSS With Tailwind CSS</title>
      <author>Mihaela</author>
      <pubDate>Tue, 15 Jun 2021 09:37:24 +0000</pubDate>
      <link>https://dev.to/workshub/making-friendly-css-with-tailwind-css-3me2</link>
      <guid>https://dev.to/workshub/making-friendly-css-with-tailwind-css-3me2</guid>
      <description>&lt;p&gt;Writing CSS can aggravate developers, but with tailwind, CSS becomes more friendly to use.&lt;br&gt;
In this article, I will be taking you on a journey into the utility first framework, “Tailwind.”&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-tailwind-css"&gt;
  &lt;/a&gt;
  What is Tailwind CSS?
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://tailwindcss.com/"&gt;official documentation&lt;/a&gt;, Tailwind CSS is a utility-first CSS framework for rapidly building custom user interfaces. Tailwind enables you to write inline styling and achieve a fantastic user interface without leaving your HTML code and writing a single line of CSS.&lt;/p&gt;

&lt;p&gt;In contrast to other CSS frameworks like Bootstrap or Materialize CSS, Tailwind CSS doesn’t come with predefined or built-in components. Instead, Tailwind CSS provides you with a set of CSS helper classes that enables you to create a custom design with ease.&lt;/p&gt;

&lt;p&gt;In my opinion, most sites built with Bootstrap always look alike and have the same feel. But Tailwind CSS is not opinionated, and it allows you to create your unique design.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-a-project-with-tailwind-css"&gt;
  &lt;/a&gt;
  Setting up a project with Tailwind CSS.
&lt;/h2&gt;

&lt;p&gt;Learn how to get Tailwind CSS up and run your project.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-tailwind-via-cdn"&gt;
  &lt;/a&gt;
  Using Tailwind via CDN
&lt;/h3&gt;

&lt;p&gt;Using tailwind via CDN is excellent if you want to set up a simple project or quick demo quickly. But note that many great tailwind features are not available via CDN.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#here-is-the-latest-default-configuration-via-cdn"&gt;
  &lt;/a&gt;
  Here is the latest default configuration via CDN:
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#html-starter-template"&gt;
  &lt;/a&gt;
  HTML starter template
&lt;/h3&gt;

&lt;p&gt;This is what your HTML5 doctype looks like when you include tailwind CDN.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset="UTF-8" /&amp;gt;
 &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
 &amp;lt;link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet"&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Welcome to Tailwind CDN&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-tailwind-via-npm"&gt;
  &lt;/a&gt;
  Install Tailwind via npm
&lt;/h3&gt;

&lt;p&gt;Installing tailwind via npm or yarn gives you access to  tailwind awesome features, unlike using tailwind via CDN.&lt;/p&gt;

&lt;p&gt;Before you install tailwind via npm,  create a new package.json file by using the npm command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then Install tailwind  via npm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install tailwindcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#include-tailwind-in-your-css"&gt;
  &lt;/a&gt;
  Include Tailwind in your CSS
&lt;/h3&gt;

&lt;p&gt;The next step is to include Tailwind in your CSS. You can do that by creating a new CSS folder. If you don’t have one, then you create a CSS file. You can name it whatever you like, but I would be naming it &lt;code&gt;style.css&lt;/code&gt; for the sake of the project.&lt;/p&gt;

&lt;p&gt;Add the following to the  &lt;code&gt;style.css&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; /* ./css/style.css */
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-postcss-plugins"&gt;
  &lt;/a&gt;
  Add postcss plugins
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install postcss-cli autoprefixer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-your-configuration-file"&gt;
  &lt;/a&gt;
  Create your configuration file
&lt;/h3&gt;

&lt;p&gt;To complete the tailwind setup, we will create a configuration file that enables you to customize your tailwind project.&lt;/p&gt;

&lt;p&gt;use this command to create a configuration file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;code&gt;tailwind.config.js&lt;/code&gt; file at the root of your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#processing-css-with-tailwind"&gt;
  &lt;/a&gt;
  Processing CSS with Tailwind
&lt;/h3&gt;

&lt;p&gt;You can add tailwind and autoprefixer to your PostCSS configuration by creating a  &lt;code&gt;postcss.config.js&lt;/code&gt; file at the root of your project.&lt;/p&gt;

&lt;p&gt;add this to your postcss.config.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  //postcss.config.js
  module.exports = {
     plugins: [
        require('tailwindcss'),
        require('autoprefixer'),
       ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In package.json, insert the following build script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "build": "postcss css/style.css -o build/style.css"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To execute this script, type in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-an-indexhtml-file"&gt;
  &lt;/a&gt;
  Create an index.html File
&lt;/h3&gt;

&lt;p&gt;Let’s create a new file index.html in the build folder and insert the following HTML code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="UTF-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
        &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
        &amp;lt;title&amp;gt;Tailwind CSS Demo&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div class="h-64"&amp;gt;
            &amp;lt;div class="p-4 m-4 bg-purple-600"&amp;gt;
                &amp;lt;h1 class="text-2xl font-bold text-white"&amp;gt;Tailwind CSS Demo&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="p-4 m-4 bg-purple-300 h-full"&amp;gt;
                &amp;lt;h2 class="text-purple-900"&amp;gt;Have much fun using Tailwind CSS&amp;lt;/h2&amp;gt;
            &amp;lt;/div&amp;gt;  
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#set-up-live-server"&gt;
  &lt;/a&gt;
  Set Up live server
&lt;/h3&gt;

&lt;p&gt;To set up a web server for our server, we are going to use a live server. To use a live server, install it via npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g live-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you start up the live server by typing this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;live-server build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should then be able to open the website by pointing the browser to URL 127.0.0.1:8080. &lt;/p&gt;

&lt;p&gt;The result can be seen below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3pyyQ78_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/c89d19a87dcb57b00601021c5ca44ce3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3pyyQ78_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/c89d19a87dcb57b00601021c5ca44ce3" alt="tailwind demo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#components-with-tailwind-css"&gt;
  &lt;/a&gt;
  Components With Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;Unlike other CSS frameworks like bootstrap, materialize CSS, etc., tailwind doesn’t come with predefined built-in components for different components like buttons, cards, navbar, etc. In this section, you will learn how to style your components with Tailwind CSS utility classes.&lt;br&gt;
we are also going to see how we can make friendly CSS with tailwind by building components and compare how it is written in tailwind and Vanilla CSS&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#component-1-button"&gt;
  &lt;/a&gt;
  Component 1: Button
&lt;/h3&gt;

&lt;p&gt;Let’s style a button.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#here-you-are-going-to-create-a-submit-button-and-also-style-it"&gt;
  &lt;/a&gt;
  Here, you are going to create a Submit button and also style it
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; //tailwind.css
 &amp;lt;button class="bg-blue-700 w-60 text-white border-2 border-blue-700 rounded py-3 
    hover:bg-red-500 hover:border-transparent"&amp;gt;
       Submit
 &amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The following utility classes are applied:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bg-blue-700&lt;/code&gt;: This class sets a blue background to the button. The value 700 is just a shade number that ranges from (50-900) .&lt;/p&gt;

&lt;p&gt;&lt;code&gt;w-60&lt;/code&gt; : This class represents the width of the button. The value 60 is equivalent to &lt;code&gt;15rem&lt;/code&gt;, which is also  &lt;code&gt;240px&lt;/code&gt; when converted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-white&lt;/code&gt;: This class set the text to white. It is equivalent to &lt;code&gt;color:white&lt;/code&gt; in vanilla CSS&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-2&lt;/code&gt;: This class set the border width to 2px&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-blue-700&lt;/code&gt;: This class sets the &lt;code&gt;border-color&lt;/code&gt; to blue. The value 700 is just a shade number, as earlier stated.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rounded&lt;/code&gt;: This class sets the &lt;code&gt;border-radius&lt;/code&gt; to  &lt;code&gt;0.25rem&lt;/code&gt;, which is also &lt;code&gt;4px&lt;/code&gt; when converted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;py-3&lt;/code&gt;: This class sets the &lt;code&gt;padding-top&lt;/code&gt; and &lt;code&gt;padding-bottom&lt;/code&gt;  to &lt;code&gt;0.75rem&lt;/code&gt; which is also &lt;code&gt;12px&lt;/code&gt; each when converted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hover:bg-red-500&lt;/code&gt;: This class turns the blue background red when it is hovered on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hover:border-transparent&lt;/code&gt;: This class makes the borders to be transparent when hovered on.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-result-should-look-like-this-in-tailwind-css"&gt;
  &lt;/a&gt;
  The result should  look like this in tailwind CSS:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kejg24fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/7043a21771b8e49433804d54630edbfb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kejg24fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/7043a21771b8e49433804d54630edbfb" alt="submit btn .png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-result-should-look-like-this-on-hover"&gt;
  &lt;/a&gt;
  The result should  look like this on hover:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEREYzvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/18486d56d9f8235768b62b902bc1fe2b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEREYzvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/18486d56d9f8235768b62b902bc1fe2b" alt="submit on hover.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#styling-with-vanilla-css"&gt;
  &lt;/a&gt;
  Styling With  Vanilla CSS
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //index.html
    &amp;lt;button class="button "&amp;gt;Submit&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //style.css

    .button{
      background-color: blue;
      width: 240px;
      color: white;
      border: 2px solid blue;
      border-radius:4px;
      padding-top: 12px;
      padding-bottom: 12px;
    }

    .button:hover{
       background-color: red;
      border: transparent
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The result should then look like this in vanilla CSS&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBPHUHKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/0335cef41f5da046a835cef8f9ea3d6f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBPHUHKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/0335cef41f5da046a835cef8f9ea3d6f" alt="Screenshot 2021-05-21 at 5.36.59 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result should  look like this on hover&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ygSEi2_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/49e0f74374e444322a633de07f04265d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygSEi2_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/49e0f74374e444322a633de07f04265d" alt="Screenshot 2021-05-21 at 5.37.07 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see how you created a button and styled it within tailwind CSS. you could also see how you wrote lesser code, and also it made inline styling more cleaner and readable&lt;br&gt;
Compare to regular CSS. We could see all the styling we had to do. Even if you try to style regular CSS inline, it will become cumbersome, and it won't be easy to read.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#component-2-a-card"&gt;
  &lt;/a&gt;
  Component 2 : A Card
&lt;/h4&gt;

&lt;p&gt;Finally, let’s take a look at how to style a card component with Tailwind’s utility classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //index.html
    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="UTF-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
        &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
        &amp;lt;title&amp;gt;Tailwind CSS Demo&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class="bg-gray-300"&amp;gt;
        &amp;lt;div class="bg-white mx-auto my-40 shadow-2xl  w-3/5 h-96 rounded flex "&amp;gt;
            &amp;lt;img src="https://i.pravatar.cc/200" alt="random avatar"&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;h1 class="font-bold text-2xl p-5 mt-20"&amp;gt;Hello! My Name is kaylie&amp;lt;/h1&amp;gt;
                &amp;lt;p class=" text-xl p-5 mt-2"&amp;gt;I am a lover of good things&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following utility classes are applied:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bg-gray-300&lt;/code&gt;: This class is set to the body to change the default white background to gray.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mx-auto&lt;/code&gt;: This class is set to move the div to the center. &lt;code&gt;mx&lt;/code&gt; represents &lt;code&gt;margin-right&lt;/code&gt; and &lt;code&gt;margin-left&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;my-40&lt;/code&gt;: This class is set to move the div from top and bottom &lt;code&gt;10rem&lt;/code&gt; each.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shadow-2xl&lt;/code&gt;: This class represents the box shadow of the card. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;w-3/5&lt;/code&gt;: This class sets the &lt;code&gt;width&lt;/code&gt; of the card to &lt;code&gt;60%&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rounded&lt;/code&gt;: This class sets the &lt;code&gt;border-radius&lt;/code&gt; to  &lt;code&gt;0.25rem&lt;/code&gt; which is also &lt;code&gt;4px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;h-96&lt;/code&gt;: This class sets the height of the card to &lt;code&gt;384px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;font-bold&lt;/code&gt;: This class sets the &lt;code&gt;font-weight&lt;/code&gt; to &lt;code&gt;bold&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-2xl&lt;/code&gt;: This class sets the  &lt;code&gt;font-size&lt;/code&gt; to &lt;code&gt;24px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p-5&lt;/code&gt;: This class sets the &lt;code&gt;padding&lt;/code&gt; to &lt;code&gt;20px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mt-20&lt;/code&gt;: This class sets the &lt;code&gt;margin-top&lt;/code&gt; to &lt;code&gt;80px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-xl&lt;/code&gt;: This class sets the  &lt;code&gt;font-size&lt;/code&gt; to &lt;code&gt;20px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mt-2&lt;/code&gt;: This class sets the &lt;code&gt;margin-top&lt;/code&gt; to &lt;code&gt;8px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The result should then look like this in tailwind CSS&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XVKlgL-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/a7bd6344c9a24700ed1ab161e1a4f6c7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XVKlgL-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/a7bd6344c9a24700ed1ab161e1a4f6c7" alt="Screenshot 2021-05-19 at 5.02.54 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#vanilla-css"&gt;
  &lt;/a&gt;
  Vanilla CSS
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //index.html
    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="UTF-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
        &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
        &amp;lt;title&amp;gt;Tailwind CSS Demo&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;div class="card"&amp;gt;
        &amp;lt;img src="https://i.pravatar.cc/200" alt="random avatar"&amp;gt;

        &amp;lt;div&amp;gt;
            &amp;lt;h1 class="card-h1"&amp;gt;Hello! My Name is kaylie&amp;lt;/h1&amp;gt;
            &amp;lt;p class="card-p"&amp;gt;I am a lover of good things&amp;lt;/p&amp;gt;
           &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#styling-with-vanilla-css"&gt;
  &lt;/a&gt;
  Styling With Vanilla CSS
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //style.css
    body{
      background: lightgray
    }
    .card{
      background-color: white;
      margin:40px auto;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      width: 60%;
      height: 384px;
      border-radius: 4px;
      display:flex;
    }
    .card-h1{
      font-weight:bold;
      font-size: 24px;
      padding: 20px;
      margin-top: 80px;
    }
    .card-p{
      font-size:20px;
      padding: 20px;
      margin-top: 8px;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The result should look like this in Vanilla CSS&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ctkkFQa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/b242a70c875582dc4a9d511efd5b76e6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ctkkFQa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/b242a70c875582dc4a9d511efd5b76e6" alt="Screenshot 2021-05-19 at 5.47.23 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that you achieved the same result in the example above, though with a different method.&lt;br&gt;
This component example shows you the basics of how tailwind works in relation to Vanilla CSS. Now let me go further to explain why you should use Tailwind CSS in your next project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-use-tailwind-css"&gt;
  &lt;/a&gt;
  Why Use Tailwind CSS
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#responsiveness-to-the-core"&gt;
  &lt;/a&gt;
  Responsiveness to the core
&lt;/h3&gt;

&lt;p&gt;Gone are the days where you needed to write lots of media queries to build a responsive application. With Tailwind CSS, you can create a responsive design with ease in the class attribute. Tailwind CSS also uses a mobile-first approach in creating responsive applications. &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#there-are-five-breakpoints-by-default-inspired-by-common-device-resolutions"&gt;
  &lt;/a&gt;
  There are five breakpoints by default, inspired by common device resolutions:
&lt;/h5&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Breakpoint prefix&lt;/th&gt;
&lt;th&gt;Minimum width&lt;/th&gt;
&lt;th&gt;CSS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;640px&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@media (min-width: 640px) { ... }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;md&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;768px&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@media (min-width: 768px) { ... }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@media (min-width: 1024px) { ... }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;xl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1280px&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@media (min-width: 1280px) { ... }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;2xl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1536px&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@media (min-width: 1536px) { ... }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at an example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="UTF-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
        &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
        &amp;lt;title&amp;gt;Tailwind CSS Demo&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div class="lg:text-9xl md:text-5xl lg:font-extrabold md:font-bold text-center 
            mt-40"&amp;gt;Hello World&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above changes the text size based on the screen size. To see the responsiveness in action, check out this &lt;a href="https://codepen.io/amycruz/pen/dyvNdrw"&gt;codepen demo&lt;/a&gt; and try to adjust the screen size to see the responsiveness.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inline-pseudoclasses"&gt;
  &lt;/a&gt;
  Inline Pseudo-Classes
&lt;/h3&gt;

&lt;p&gt;One thing vanilla CSS inline styling can’t do is handling pseudo-classes such as &lt;code&gt;hover&lt;/code&gt;, &lt;code&gt;focus&lt;/code&gt;, and &lt;code&gt;active&lt;/code&gt; states. But with Tailwind CSS, you can apply pseudo-classes to an element in the class attribute itself.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;div class="bg-red-900 hover:bg-blue-900 mt-10 text-center"&amp;gt;
         &amp;lt;span class="text-5xl text-white hover:text-yellow-300 "&amp;gt;Hello world!&amp;lt;/span&amp;gt;
   &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrwTbaDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/cf0b3869641f039d535c57585477a98f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrwTbaDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/cf0b3869641f039d535c57585477a98f" alt="Screenshot 2021-05-21 at 1.47.32 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#on-hover"&gt;
  &lt;/a&gt;
  On hover
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcyTNl8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/c48fea2557fd75c7f2b89d8affc2031e" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcyTNl8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/c48fea2557fd75c7f2b89d8affc2031e" alt="Screenshot 2021-05-21 at 1.47.47 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could see the &lt;code&gt;background-color&lt;/code&gt; at &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;text-color&lt;/code&gt; at &lt;code&gt;white&lt;/code&gt; from the example above. On hover, the &lt;code&gt;background-color&lt;/code&gt; will change to &lt;code&gt;blue&lt;/code&gt; while the &lt;code&gt;text-color&lt;/code&gt; changes to &lt;code&gt;yellow&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h3&gt;

&lt;p&gt;Tailwind CSS has many advantages over other frameworks, and one of them is the customization options. Tailwind allows you to configure your utilities within a single &lt;code&gt;tailwind.config.js&lt;/code&gt; file.&lt;br&gt;
The customization file enables you to easily customize utilities such as colors, spacing, themes, etc. You can read more about customization &lt;a href="https://tailwindcss.com/docs/configuration"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, let’s override the tailwind default blue color already present in the default theme, so our custom values will override the default value. &lt;/p&gt;

&lt;p&gt;Here we will use the same numbered notation for the color shades to override the default blue color.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-raw-tailwindconfigjs-endraw-file-should-now-look-like-this"&gt;
  &lt;/a&gt;
  The &lt;code&gt;tailwind.config.js&lt;/code&gt; file should now look like this:
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    module.exports = {
      purge: [],
      theme: {
        extend: {
          colors: {
            blue: {
              '100': '#72c1df',
              '200': '#5bb7d9',
              '300': '#43add4',
              '400': '#2ca2ce',
              '500': '#1498c9',
              '600': '#1289b5',
              '700': '#107aa1',
              '800': '#0e6a8d',
              '900': '#0c5b79'
            },
          },
        },
      },
      variants: {},
      plugins: [],
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#tighten-up-long-class-lists-with-apply"&gt;
  &lt;/a&gt;
  Tighten up long class lists with @apply
&lt;/h3&gt;

&lt;p&gt;Tailwind CSS inline styling can become messy when the styling gets long. That is when @apply comes in. The @apply directives can also use to curb the repetition of classes that may occur in styling.  For example, if you were to give 2  HTML elements similar styling, the @apply can help you avoid repetition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //index.html
    &amp;lt;div class="btn"&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //style.css
    .btn {
       @apply my-2 px-4 py-2 border-2 border-blue-500 rounded-md bg-gradient-to-b 
         from-blue-600 to-blue-400 hover:from-blue-500 hover:to-blue-300 text-white shadow-l
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ease-of-use"&gt;
  &lt;/a&gt;
  Ease Of Use
&lt;/h3&gt;

&lt;p&gt;Tailwind CSS is extremely easy to use. At first, learning all the naming schemes might take a long time to grasp. But once you grasp it, you will know exactly how to configure the entire library to your satisfaction. The naming scheme is also one of the most important parts of tailwind. For example, &lt;code&gt;p-{n}&lt;/code&gt; for padding, the &lt;code&gt;-{n}&lt;/code&gt; for using a certain value for the utility. &lt;code&gt;md:&lt;/code&gt;for handling breakpoints, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-more-naming-problems"&gt;
  &lt;/a&gt;
  No More Naming Problems
&lt;/h3&gt;

&lt;p&gt;One thing I don’t fancy about vanilla CSS is the fact that I have to come up with unique class names for styling purposes. But with Tailwind CSS, you can do your styling right inside the HTML tag, and each inline styling is scoped to that specific tag.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Before picking up tailwind CSS, you have to be good with your vanilla CSS because you might end up using classes without knowing how they work.&lt;br&gt;
If you are good with Vanilla CSS and want a faster styling process, and you are also willing to invest time in learning utility classes, then tailwind CSS is an excellent choice.&lt;/p&gt;

&lt;p&gt;Tailwind CSS introduces a different approach of how other CSS framework works. It provides you with a set of utility classes that can be used to create a unique design with ease. &lt;br&gt;
Tailwind CSS is also not opinionated, so you are free to design your application the way you want.&lt;/p&gt;

&lt;p&gt;In this article, you have learned how to set up Tailwind CSS in your project. You have also seen how utility classes can be used in building components like buttons and cards. I also went further to give you practical reasons why you should use Tailwind CSS. To learn more about Tailwind CSS.&lt;br&gt;
The &lt;a href="https://tailwindcss.com/docs"&gt;official documentation&lt;/a&gt; has several additional resources, including examples, screencasts, and tutorials.&lt;br&gt;
Thanks for reading. I hope that I helped you learn something new today!&lt;/p&gt;

&lt;p&gt;Originally written by &lt;a href="https://blockchain.works-hub.com/users/4107661d-0fbf-412b-8341-ec9f76e4208e?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;AMAECHI AMARACHI&lt;/a&gt; for &lt;a href="https://blockchain.works-hub.com/learn/making-friendly-css-with-tailwind-css-66334?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;Blockchain Works&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css3</category>
      <category>frontenddevelopment</category>
      <category>webdev</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Beginners' Introduction to React Testing</title>
      <author>Mihaela</author>
      <pubDate>Tue, 15 Jun 2021 09:35:57 +0000</pubDate>
      <link>https://dev.to/workshub/beginners-introduction-to-react-testing-3493</link>
      <guid>https://dev.to/workshub/beginners-introduction-to-react-testing-3493</guid>
      <description>&lt;p&gt;Being a software developer the need to write code and deploy working code to production quickly and safely is needed especially on products that have crazy deadlines and delivery schedules. And it's a known fact that things do break! &lt;/p&gt;

&lt;p&gt;No matter the many years of experience one has things get complicated and a change made at some part of the code base like the way a function appends data to an object or processes a text could cause a bug in the system that could take days before an engineer can fix it, the need to monitor our codebase to make sure changes made to it do not affect the way the code base works currently is why we have tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro-to-testing"&gt;
  &lt;/a&gt;
  Intro to testing
&lt;/h3&gt;

&lt;p&gt;Creating software to solve problems or perform a task in a structured way is software engineering, creating/writing tests is a way to make sure that the programs developed work in that structured way and do not break regardless of the changes made to the codebase over time, it's a good way of being sure that different developers working on a single code base don’t create problems in the codebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-testing"&gt;
  &lt;/a&gt;
  Why testing
&lt;/h3&gt;

&lt;p&gt;Apart from the obvious reasons stated above, the writing test has a lot more advantages in the software development cycle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helps you see issues with your codebase:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've had occurrences that after working on my code base and I start writing my test, I realize that my function wasn't implemented in the best possible way and would be prone to errors in the future.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Saving time on debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running tests helps you make sure your codebase is working before entering production; this can save a lot of time in development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Confident your code won't break on production&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#test-cases"&gt;
  &lt;/a&gt;
  Test Cases
&lt;/h3&gt;

&lt;p&gt;A test case is a set of commands executed by software to verify that a particular function or feature is working correctly the way it was designed to function, this could contain test data, and conditions developed for that particular scenario or feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-test"&gt;
  &lt;/a&gt;
  What to test
&lt;/h3&gt;

&lt;p&gt;So what is meant to be tested? Basically, a test should be run to check the functionality of the app, building on our previous point. Running the test should give you the confidence that the app still functions the same way it intended while pushing to production, even after making changes to different parts of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-in-react"&gt;
  &lt;/a&gt;
  Testing in React
&lt;/h2&gt;

&lt;p&gt;Testing in React is done by making use of libraries, one of them being called ReactTestUtils, it makes it easier to test React components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;So let's look at a little example by testing a Button Component and see if it works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-component"&gt;
  &lt;/a&gt;
  A simple Component
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nx"&gt;Hey&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;m alive
     &amp;lt;/Button&amp;gt;
   )
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYujpTO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/9a9f6ad0e2ec490322d59863e137d5f3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYujpTO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/9a9f6ad0e2ec490322d59863e137d5f3" alt="Screenshot 2021-05-06 at 02.27.27.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to test the component we have to create our test file.&lt;/p&gt;

&lt;p&gt;Opening up our folder root directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir test&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd test&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;simple.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command creates our test file.&lt;/p&gt;

&lt;p&gt;Now we paste the following inside our file&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-scenario-1"&gt;
  &lt;/a&gt;
  Test Scenario 1
&lt;/h3&gt;

&lt;p&gt;This simple test is meant to  check if our component was rendered perfectly&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simpletestjs"&gt;
  &lt;/a&gt;
  Simple.test.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;render the button Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey i am alive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test above checks if the component can be rendered by checking if the component contains some preset Text.&lt;/p&gt;

&lt;p&gt;Let's break down the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Importing the needed tools we need from our library plus the component we are testing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;render the button Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;....&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part of the code is where we describe our test and what it does, and in the callback function, we declare our codebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey i am alive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part of the code gets the content from the page and checks if that content is what we are expecting.&lt;/p&gt;

&lt;p&gt;Running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAfkdSW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/649337ddbdf75c38fda4e2dfae303630" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAfkdSW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/649337ddbdf75c38fda4e2dfae303630" alt="Screenshot 2021-05-06 at 03.22.08.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generates this, here we can see our test has been running and we can count it as passing or passed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-scenario-2"&gt;
  &lt;/a&gt;
  Test Scenario 2
&lt;/h3&gt;

&lt;p&gt;Now we have been able to write our first test to see if a component has rendered, now we can move up and test components that have a bit of logic inside them.&lt;/p&gt;

&lt;p&gt;Our next example involves us passing two variables and setting the content to the sum of the two numbers.&lt;/p&gt;

&lt;p&gt;Now let's make the edits to our components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;number1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTotal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
       &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;setTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nx"&gt;Adds&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;total&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SNWmUJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/2ae3a9037e6267525f88cff0db0a9da5" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SNWmUJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/2ae3a9037e6267525f88cff0db0a9da5" alt="Screenshot 2021-05-06 at 13.18.58.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can test the component to see if the Button Component works the way it was meant to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAfkdSW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/649337ddbdf75c38fda4e2dfae303630" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAfkdSW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/649337ddbdf75c38fda4e2dfae303630" alt="Screenshot 2021-05-06 at 03.22.08.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through our codebase and see what each line does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;number1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We declare our component and set the number1 and number2 props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryAllByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;total&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to get the object of the &lt;/p&gt;
&lt;p&gt; tag with the testId&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryAllByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to get the object of the button  tag with the testId&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to simulate the click event by calling the &lt;code&gt;click&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`The total is : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now after clicking the button we are gonna expect the text to be The total is 6.&lt;br&gt;
The test passing means that the code works the way it's meant to.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-if-something-changes"&gt;
  &lt;/a&gt;
  What if something changes
&lt;/h3&gt;

&lt;p&gt;John is a new engineer coming into the company and feels like making some changes to the codebase lets see what he does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;number1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTotal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
       &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;setTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nx"&gt;Adds&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;total&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we change&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;setTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;setTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how that affects our codebase&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxUeLVMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/9be2241b6813b0ecb46d7cd3197b6f2e" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxUeLVMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/9be2241b6813b0ecb46d7cd3197b6f2e" alt="Screenshot 2021-05-06 at 15.59.31.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we see that our test is failing because our new engineer changes make the logic of the codebase faulty.&lt;/p&gt;

&lt;p&gt;So changes are made to the codebase to revert it to its previous version and the test runs again &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Let's walk through what we’ve learned so far, testing is programmatically checking if the code base still works after changes made to our codebase by either us or other engineers.&lt;/p&gt;

&lt;p&gt;Testing with react is done by tools that make it easier to perform this test, we simply mock the app functionality and expect it to create an expected result or outcome doing this ensures our code works perfectly.&lt;/p&gt;

&lt;p&gt;Originally written by &lt;a href="https://javascript.works-hub.com/users/8cedbde0-2e7b-4328-8741-f8c981f0b076?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;King Somto&lt;/a&gt; for &lt;a href="https://javascript.works-hub.com/learn/react-testing-a-beginners-intro-a9533?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;JavaScript Works&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tests</category>
      <category>webdev</category>
      <category>integrationtesting</category>
    </item>
    <item>
      <title>Still 100 CSS loaders for your next project</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 15 Jun 2021 09:22:13 +0000</pubDate>
      <link>https://dev.to/afif/still-100-css-loaders-for-your-next-project-57hp</link>
      <guid>https://dev.to/afif/still-100-css-loaders-for-your-next-project-57hp</guid>
      <description>&lt;p&gt;The fun continue with another collection of 100 CSS loaders!&lt;/p&gt;

&lt;p&gt;Always the same rule: &lt;strong&gt;one&lt;/strong&gt; div = &lt;strong&gt;one&lt;/strong&gt; loader.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-classic-iv"&gt;The Classic IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-colorful"&gt;The Colorful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-dots-iv"&gt;The Dots IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-dancers"&gt;The Dancers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-bars-iii"&gt;The Bars III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-line"&gt;The Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-dots-vs-the-bars-ii"&gt;The Dots vs The Bars II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-clones"&gt;The Clones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-nature-ii"&gt;The Nature II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-flipping-ii"&gt;The Flipping II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-famous"&gt;The Famous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-classic-iv"&gt;
  &lt;/a&gt;
  The Classic IV
&lt;/h3&gt;

&lt;p&gt;We have lost the control. I repeat, we have lost the control!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/JjWwWMO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-colorful"&gt;
  &lt;/a&gt;
  The Colorful
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzZdZej?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-dots-iv"&gt;
  &lt;/a&gt;
  The Dots IV
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBrLrox?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-dancers"&gt;
  &lt;/a&gt;
  The Dancers
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/VwpqpxB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-bars-iii"&gt;
  &lt;/a&gt;
  The Bars III
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYxvxrV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-line"&gt;
  &lt;/a&gt;
  The Line
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/mdWaWjv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-dots-vs-the-bars-ii"&gt;
  &lt;/a&gt;
  The Dots vs The Bars II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBrLrMo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-clones"&gt;
  &lt;/a&gt;
  The Clones
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/JjWwWmp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-nature-ii"&gt;
  &lt;/a&gt;
  The Nature II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/yLMGMQa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-flipping-ii"&gt;
  &lt;/a&gt;
  The Flipping II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/PopXpXr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-famous"&gt;
  &lt;/a&gt;
  The Famous
&lt;/h3&gt;

&lt;p&gt;You all liked The Ben loader so I have made another casting. It wasn't an easy task but some of them accepted to become loader (or maybe not...)&lt;/p&gt;

&lt;p&gt;Please no spoils on the comment section.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/VwpVaVa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYxQVYq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/poeQNRp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzZRGqj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;oof, I reached 400! Now it starts to get a bit challenging to create another collection of 100 CSS loaders but you can help with some ❤🦄 and also &lt;a href="https://www.buymeacoffee.com/afif"&gt;some coffees&lt;/a&gt;. I have read an article saying that virtual coffees can increase the productivity up to 50%. worth trying, no? 😜&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/still-100-underline-overlay-animations-the-advanced-css-collection-4mol" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Still 100 underline/overlay animations | The advanced CSS collection 🚀&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Start an instance on AWS EC2 - Hands on</title>
      <author>Ajit Singh</author>
      <pubDate>Tue, 15 Jun 2021 09:10:32 +0000</pubDate>
      <link>https://dev.to/this-is-learning/start-an-instance-on-aws-ec2-hands-on-2hb3</link>
      <guid>https://dev.to/this-is-learning/start-an-instance-on-aws-ec2-hands-on-2hb3</guid>
      <description>&lt;p&gt;In this exercise we will start a basic ec2 server and host a small server on it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Type AWS EC2 in the search console and go to the EC2 dashboard.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8OtEg2P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecmlp89jqnblcecl7v9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8OtEg2P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecmlp89jqnblcecl7v9i.png" alt="Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This will land you on EC2 dashboard from where you can see how many EC2 instances are running your keys etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--by56whPj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13p79es45ii6lgkxkhm9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--by56whPj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13p79es45ii6lgkxkhm9.png" alt="Ec2 dashboard"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Instances from the side bar it shows all EC2 instances you are running and click on launch instance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EZOVyY6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqdnx3erdpyh73gs56y8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EZOVyY6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqdnx3erdpyh73gs56y8.png" alt="EC2 instances dashborad"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This will take you to a list of available AWS instances there are four options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My AMI: My AMI has AMI instances created by you and saved, Right now we have nothing saved here so this will be empty &lt;/li&gt;
&lt;li&gt;AWS Marketplace: In AWS you can buy AWS instance with pre configured software's so that you don't have to set themselves like Wordpress, SQL, Ghost etc some of them are available free too
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdA0fETG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxv35l9verfmhyasph4f.png" alt="SQl"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SiI0PFSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xu5dm9ec9aazgssgjxc.png" alt="Wordpress AMI"&gt;
&lt;/li&gt;
&lt;li&gt;Community AMI: These are all the instances given by the community for free
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-QcM4J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kllt018cxxmqqp5lpdr.png" alt="Community AMI"&gt;
&lt;/li&gt;
&lt;li&gt;Quick start: This is what we use these are minimal AWS instances which can be started very fast with basic OS. Select the one highlighted in the below image
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LitWDA6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckuzl2406d34knugafhm.png" alt="Quick Start"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that select the instance type like how may CPU, RAM, Storage, bandwidth we want for the purpose of this tutorial we select t2.micro because its available in the free tier as evident by the the Free tier available badge&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-xz0HRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xu7p74udo1jm5iqgmuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-xz0HRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xu7p74udo1jm5iqgmuw.png" alt="Instance types"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the purpose of this tutorial we don't change anything in configure instance move to the bottom and in advances details paste the following script in it. These are the startup scripts which will run when we start our EC2 instance.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Use this for your user data (script from top to bottom)&lt;/span&gt;
&lt;span class="c"&gt;# install httpd (Linux 2 version)&lt;/span&gt;
yum update &lt;span class="nt"&gt;-y&lt;/span&gt;
yum &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; httpd
systemctl start httpd
systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;httpd
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;h1&amp;gt;Hello World from &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;hostname&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /var/www/html/index.html

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCcqyoZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3zdx52f3dbsqqewdwue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCcqyoZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3zdx52f3dbsqqewdwue.png" alt="Configure instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now we configure storage all the default settings work just fine. In future we will have an additional series on storage so don't worry about it now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KI48SxYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st7o5m0j8okmtuboamjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KI48SxYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st7o5m0j8okmtuboamjs.png" alt="Ec2 Storage"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We will add tags so that it is easier to identify and manage our instances like name, department, maintenance etc&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4tUvy39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b65l3ckra5tezfad32rq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4tUvy39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b65l3ckra5tezfad32rq.png" alt="Ec2 tags"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure Security group in here we define how our EC2 instance can be accessed. In this tutorial add a new rule select HTTP from  the type dropdown it will automatically allow everything via HTTP protocol its good here bit e can limit who can access our instance via HTTP and its not generally a good practice to give access to everyone via HTTP.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eihO1wzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nftufsi0bdzp2qu9oz4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eihO1wzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nftufsi0bdzp2qu9oz4z.png" alt="onfigure security group"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now to the final step we review if everything is alright. Just have a quick glace that all settings are done correctly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7IpdiCfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq9l3znup1nkrab9td6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7IpdiCfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq9l3znup1nkrab9td6f.png" alt="Review"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lets launch now but before launch AWS asks for a key which you download and use to access via SSH Download and keep the key safe as it only can be downloaded once. You can also select a previous key if you have a key generated already.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJHihwjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bczci97ai3st7gm3fz9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJHihwjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bczci97ai3st7gm3fz9k.png" alt="Launch"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Launch status page here you see a status of launched instance and some helpful resources to get you started. Click on view instances to go to the instances dahboard.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uv2r7bnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewdy456b5m6aunccv5cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uv2r7bnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewdy456b5m6aunccv5cu.png" alt="Launch status"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can see your instance running. Select the instance you will see details at the bottom. On the right side of public IPv4 address there is open address button click on it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uv2r7bnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewdy456b5m6aunccv5cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uv2r7bnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewdy456b5m6aunccv5cu.png" alt="Create instance dashboard"&gt;&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For now the link won't work because the link has https remove https form the link and there will be a screen like below image. This http server was setup in our startup bash script above there we start a http apache server and return  &lt;code&gt;echo "&amp;lt;h1&amp;gt;Hello World from $(hostname -f)&amp;lt;/h1&amp;gt;" &amp;gt;&lt;/code&gt; with hostname that is what is displayed&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VjygZkHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3j2byphfud2yppt7c8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjygZkHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3j2byphfud2yppt7c8b.png" alt="Website page"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally if you want to follow along with this series you are done. For others running an EC2 instance costs money so you can terminate the instance by selecting the instance and form the instance state dropdown select terminate instance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L46Zs8p7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbf0a0ne0ndnnyjl3zch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L46Zs8p7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbf0a0ne0ndnnyjl3zch.png" alt="Terminate instance"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next part of the series we will SSH into out instance and see our files and learn how to access remote PC.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>SpectaQL - generate static docs for a GraphQL schema</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Tue, 15 Jun 2021 08:46:50 +0000</pubDate>
      <link>https://dev.to/graphqleditor/spectaql-generate-static-docs-for-a-graphql-schema-i53</link>
      <guid>https://dev.to/graphqleditor/spectaql-generate-static-docs-for-a-graphql-schema-i53</guid>
      <description>&lt;p&gt;It's finally time to take a look at another useful library, this time we’ll check out SpectaQL, a Node.js library for generating static GraphQL API documentation. On GitHub its described as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A nice enhancement of DociQL&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;so before we get to SpectaQL and its features let’s take a look at what DociQL is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-foundation"&gt;
  &lt;/a&gt;
  The foundation
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DociQL&lt;/strong&gt; as the name suggests also deals with documentation. To be precise it fetches the schema from a GraphQL endpoint by using the introspection query and generates static documentation from it. It's supposed to help you save time and look good and it does just that, by using a well-known layout. It's also very flexible so you can easily customize it and create your own layout that looks exactly like you want.&lt;/p&gt;

&lt;p&gt;Looking at SpectaQL it's easy to see they wanted to take that approach and build on it. The first &lt;strong&gt;noticeable difference&lt;/strong&gt; is that it has more options to generate documentation from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a live GraphQL endpoint via the introspection query (so just like DociQL)&lt;/li&gt;
&lt;li&gt;a file containing an introspection query result&lt;/li&gt;
&lt;li&gt;a file with the schema definition in SDL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;That’s not all and &lt;strong&gt;SpectaQL provides you with a bunch of features&lt;/strong&gt;. Out of the box it gives you the same three column layout mentioned previously and it's also easily customizable. There’s quite a few more customization options though, DociQL only has some basic CLI configuration options, SpectaQL also lets you modify the CSS. Additionally you’re not limited to just what's in the introspection query or the schema, via examples you can include static metadata about your schema or you can use the custom generator plugin to dynamically generate examples for fields and arguments. &lt;/p&gt;

&lt;p&gt;For a clearer picture let’s sum up the features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's completely free (MIT license)&lt;/li&gt;
&lt;li&gt;can generate documentation from three types of sources (endpoint, file with a introspection query result or file with a schema definition)&lt;/li&gt;
&lt;li&gt;additional support for examples from static metadata or the dynamic example generator&lt;/li&gt;
&lt;li&gt;blacklisting for areas or single elements (for example you can tell it to hide all mutations)&lt;/li&gt;
&lt;li&gt;customizable styles by modifying the CSS&lt;/li&gt;
&lt;li&gt;markdown support&lt;/li&gt;
&lt;li&gt;live preview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOFGXphq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlocwu8n7m9u7vfd8v6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOFGXphq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlocwu8n7m9u7vfd8v6o.png" alt="SpectaQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#source-githubcomanvilcospectaql"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://github.com/anvilco/spectaql"&gt;github.com/anvilco/spectaql&lt;/a&gt;
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#you-can-have-it-both-ways"&gt;
  &lt;/a&gt;
  You can have it both ways
&lt;/h2&gt;

&lt;p&gt;In short SpectaQL has quite a few additional features while still giving you the neat looking one-page three-column documentation out of the box and without any hassle. It's easily customizable by design and the devs openly advocate forking it if you have some additional ideas on how to improve it or make it do something differently. So if you’re looking for a basic solution for getting documentation for your GraphQL API or if you want to get creative in terms of how you want it to look, SpectaQL has got you covered.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Michał Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" alt="New features of GraphQL Editor gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Sorting Algorithms Visualization: QuickSort, MergeSort, HeapSort, BubbleSort, InsertionSort</title>
      <author>Vladimir Nikitin</author>
      <pubDate>Tue, 15 Jun 2021 07:58:39 +0000</pubDate>
      <link>https://dev.to/loonywizard/sorting-algorithms-visualization-quicksort-mergesort-heapsort-bubblesort-insertionsort-25ha</link>
      <guid>https://dev.to/loonywizard/sorting-algorithms-visualization-quicksort-mergesort-heapsort-bubblesort-insertionsort-25ha</guid>
      <description>&lt;p&gt;Hi everyone! 👋🏻&lt;/p&gt;

&lt;p&gt;I'd like to share my new project about visualization of sorting algorithms&lt;/p&gt;

&lt;p&gt;Currently, there're five algorithms visualized: QuickSort, MergeSort, HeapSort, BubbleSort and InsertionSort&lt;/p&gt;

&lt;p&gt;This project helped me to understand how different sorting algorithms work and I will be happy if it this would be helpful for anybody&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/loonywizard/sorting-algos-visualizer"&gt;https://github.com/loonywizard/sorting-algos-visualizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live demo: &lt;a href="https://loonywizard.github.io/sorting-algos-visualizer"&gt;https://loonywizard.github.io/sorting-algos-visualizer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Never deploy AWS CDK Stacks in wrong account again</title>
      <author>Gernot Glawe</author>
      <pubDate>Tue, 15 Jun 2021 07:55:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/never-deploy-aws-cdk-stacks-in-wrong-account-again-22od</link>
      <guid>https://dev.to/aws-builders/never-deploy-aws-cdk-stacks-in-wrong-account-again-22od</guid>
      <description>&lt;p&gt;Working for different customers and of cause in different accounts for lets say development and production, it is &lt;em&gt;vital&lt;/em&gt; not to deploy in the wrong account!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taskfile"&gt;
  &lt;/a&gt;
  Taskfile
&lt;/h2&gt;

&lt;p&gt;This tool (taskfile.dev) allows preconditions for executing tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;deploy-prod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy Lambda&lt;/span&gt;
    &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;export CDK_DEFAULT_ACCOUNT={{.account}} &amp;amp;&amp;amp; npx cdk@{{.version}} deploy reporting&lt;/span&gt;
    &lt;span class="na"&gt;preconditions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'{{.account}}'&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'{{.accountprod}}'&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;]"&lt;/span&gt;
        &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Account&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;not&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;prod,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Halting"&lt;/span&gt;            
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy-prod&lt;/code&gt; - the Name of the Task&lt;br&gt;
&lt;code&gt;desc&lt;/code&gt; - ription&lt;br&gt;
&lt;code&gt;cmds&lt;/code&gt; - commands&lt;br&gt;
&lt;code&gt;{{.account}}&lt;/code&gt; - a variable &lt;br&gt;
&lt;code&gt;preconditions&lt;/code&gt; - only run this task if true&lt;/p&gt;

&lt;p&gt;Thats good, but how do I get the account number?&lt;/p&gt;

&lt;p&gt;You get the current account number with the STS simple/secure token services from aws. In the response, you query only the Account number, so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws sts get-caller-identity &lt;span class="nt"&gt;--query&lt;/span&gt; Account &lt;span class="nt"&gt;--output&lt;/span&gt; text
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Gives you the account number of the current credentials.&lt;/p&gt;

&lt;p&gt;For the CDK, you tell it with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LambdaStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CDK_DEFAULT_ACCOUNT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CDK_DEFAULT_REGION&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use the environment for account and region.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-together-in-the-taskfile"&gt;
  &lt;/a&gt;
  All together in the Taskfile
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://taskfile.dev&lt;/span&gt;

&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;CDK_DEFAULT_REGION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-west-1&lt;/span&gt;
&lt;span class="na"&gt;vars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-west-1&lt;/span&gt;
  &lt;span class="na"&gt;account&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws sts get-caller-identity --query Account --output text&lt;/span&gt;
  &lt;span class="na"&gt;accountdev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;accounttest&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;     
  &lt;span class="na"&gt;accountprod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;555555555555&lt;/span&gt;    
  &lt;span class="c1"&gt;# CDK Version&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v2.0.0-rc.7&lt;/span&gt;

&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;deploy-prod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy Lambda/Reporting Stack&lt;/span&gt;
    &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;export CDK_DEFAULT_ACCOUNT={{.account}} &amp;amp;&amp;amp; npx cdk@{{.version}} deploy reporting&lt;/span&gt;
    &lt;span class="na"&gt;preconditions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'{{.account}}'&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'{{.accountprod}}'&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;]"&lt;/span&gt;
        &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Account&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;nicht&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;prod,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Halting"&lt;/span&gt;       
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this setup, &lt;code&gt;task deploy-prod&lt;/code&gt; will only deploy on the configured prod account!&lt;/p&gt;

&lt;p&gt;Hope you find this helpful,&lt;/p&gt;

&lt;p&gt;Please contact me on twitter &lt;a class="mentioned-user" href="https://dev.to/megaproaktiv"&gt;@megaproaktiv&lt;/a&gt;
 or discuss here aber life, universe and AWS devops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@timmossholder?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Tim Mossholder&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/wrong-way?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazing tool &lt;a href="https://taskfile.dev/#/"&gt;https://taskfile.dev/#/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React 18 - What's New! </title>
      <author>Eftykhar Rahman</author>
      <pubDate>Tue, 15 Jun 2021 07:31:42 +0000</pubDate>
      <link>https://dev.to/iamraufu/react-18-what-s-new-2jam</link>
      <guid>https://dev.to/iamraufu/react-18-what-s-new-2jam</guid>
      <description>&lt;p&gt;React 17 was a bit of a bore for developers. There really wasn't a lot added but it's definitely not the case with react 18. In this article I am going to tell you some of the top updates and I'll show you how to get started using react 18 alpha today. Links to everything mentioned will be in the below.&lt;/p&gt;

&lt;p&gt;With React 18 there's a new Root API. Here's what you're used to seeing. We pass react &lt;em&gt;dom.render&lt;/em&gt; our app component and then &lt;em&gt;document.getElementById&lt;/em&gt; and our root element. So we're rendering our app component into our root element on the page. Pretty Simple!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDr1g8fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osjw14odqtt942mh4a4r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDr1g8fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osjw14odqtt942mh4a4r.PNG" alt="Image 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the new way. We have a root variable which is equal to a new method called create root. This is being passed our root element and then we call &lt;em&gt;root.render&lt;/em&gt; and pass our app component. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u1nvyjkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7ox115ivzoqohk5zom.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u1nvyjkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7ox115ivzoqohk5zom.PNG" alt="Image 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's accomplishing the same thing but in a different way. The old way is now called the Legacy Root API and It's still going to work in React 18 but will be deprecated at some point by using the new Root API. You're going to get access to all of the React 18 improvements including the concurrent features that we're going to talk about in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suspense"&gt;
  &lt;/a&gt;
  Suspense
&lt;/h2&gt;

&lt;p&gt;The suspense is finally over in this update we're going to get full support for suspense. Now what is suspense? As the name implies it suspends something until it's ready to be rendered. &lt;/p&gt;

&lt;p&gt;In this example, we have a component that needs time to fetch data before it's ready to be rendered. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tb1hq7yu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1ktrwt6luc2mz1li4n2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tb1hq7yu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1ktrwt6luc2mz1li4n2.PNG" alt="Image 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suspense will use the fallback until the data is returned and the components are rendered. It's important to note here that the random component here is not waiting on data but it's still going to be suspended until everything inside the suspense is ready to be rendered. And now suspense is going to be extremely useful with SSR or Server Side Rendering. Currently, with SSR you're going to get fully rendered HTML but your browser still has to load the JavaScript and hydrate the entire page before it can become interactive. Suspense could speed up this load time dramatically. &lt;/p&gt;

&lt;p&gt;Using the example from the React 18 working group repo here we have a page loading a navbar, a sidebar, a post and a comment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1Z7y8IB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0g2lttu9cdf1mx44lch.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1Z7y8IB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0g2lttu9cdf1mx44lch.PNG" alt="Image 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we really don't need the comments to load before the site becomes interactive. So we're going to suspend the comments. So that the viewer can start reading the article&lt;br&gt;
and then we'll load the comments in the background. &lt;/p&gt;

&lt;p&gt;Another cool thing about suspense is selective hydration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0tFFUKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d7sqjzrc7sl9xzglrpz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0tFFUKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d7sqjzrc7sl9xzglrpz.PNG" alt="Image 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example., we're suspending the sidebar and the comments. Hydration will begin on the first suspended component in the tree. So the sidebar will hydrate first but if the user tries to interact with the comments section, React will prioritize hydrating the comments instead of the sidebar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-batching"&gt;
  &lt;/a&gt;
  Automatic Batching
&lt;/h2&gt;

&lt;p&gt;In React 17 and earlier react with batch re-render updates during a browser event like a click. Here's an example from the docs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--beMfmqHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7px6m1ir5qhbdzwhbl27.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--beMfmqHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7px6m1ir5qhbdzwhbl27.PNG" alt="Image 6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in this handle click react will batch these two state updates into one single re-render.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfFwzcwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec0oi7k06ejr5pgpuoxj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfFwzcwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec0oi7k06ejr5pgpuoxj.PNG" alt="Image 7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you need to fetch data and then update the state these re-renders will not be batched.&lt;/p&gt;

&lt;p&gt;With react 18, If you're using the new Create Root API, all state updates will automatically be batched no matter when they happen. If you do have a critical component that you don't want to be batched. You can opt out of this by using &lt;em&gt;reactdom.flushsync&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concurrent-features"&gt;
  &lt;/a&gt;
  Concurrent Features
&lt;/h2&gt;

&lt;p&gt;There's some other concurrent features that are interesting but I haven't fully dug into them yet. One is &lt;em&gt;startTransition&lt;/em&gt;. This will tell React which updates are urgent and which can wait this will help the UI remain responsive. &lt;/p&gt;

&lt;p&gt;Then there's &lt;em&gt;useDeferredValue&lt;/em&gt;. This allows you to defer updates that are less important.&lt;/p&gt;

&lt;p&gt;And then &lt;strong&gt;&lt;/strong&gt; This coordinates the order of loading indicators.&lt;/p&gt;

&lt;p&gt;Obviously don't use React 18 in production yet. It's just an alpha status but start learning about these new features now. React 18 will go into public beta in a few months and then several weeks after that so get ready. It's really exciting.&lt;/p&gt;

&lt;p&gt;React 18 Resources Mentioned:&lt;br&gt;
The Plan for React 18 - &lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"&gt;https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html&lt;/a&gt;&lt;br&gt;
React 18 Working Group - &lt;a href="https://github.com/reactwg/react-18"&gt;https://github.com/reactwg/react-18&lt;/a&gt;&lt;br&gt;
React 18 Discussions - &lt;a href="https://github.com/reactwg/react-18/discussions"&gt;https://github.com/reactwg/react-18/discussions&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Make decisions as a team. Debate, then commit. (100 Bytes Of Wisdom: Day 57)</title>
      <author>Sam Jarman 👨🏼‍💻</author>
      <pubDate>Tue, 15 Jun 2021 07:30:35 +0000</pubDate>
      <link>https://dev.to/samjarman/make-decisions-as-a-team-debate-then-commit-100-bytes-of-wisdom-day-57-fec</link>
      <guid>https://dev.to/samjarman/make-decisions-as-a-team-debate-then-commit-100-bytes-of-wisdom-day-57-fec</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aGD1dg58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s6mvlt3oor37n327ptp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aGD1dg58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s6mvlt3oor37n327ptp.png" alt="Make decisions as a team. Debate, then commit."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Team cohesion during a project comes from healthy debate and then healthy commitment to the decision. I'm not gonna lie - it does suck to be the minority when it comes to a final decision, and they can grate on you over time. However, keeping your emotions and professionalism in check will mean a more cohesive team.  &lt;/p&gt;

&lt;p&gt;If you find yourself in the minority a lot, something to do would be to really think hard and work on trying to get a shared knowledge set with the others in your team. What do they know you don't? Or, perhaps, what do you know that they don't?&lt;/p&gt;

&lt;p&gt;Heads up: As with any terse bit of advice, there will be exceptions of course, and subtleties and nuance that can't possibly be captured in a Byte of Wisdom. This has been what I've experienced, I'd love to hear yours in the comments too!&lt;/p&gt;

&lt;p&gt;You can catch up with all the other bytes at &lt;a href="http://bytesofwisdom.com/"&gt;http://bytesofwisdom.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>journey</category>
      <category>advice</category>
    </item>
  </channel>
</rss>
