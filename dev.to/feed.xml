<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What features can a Blog Website Should Have?</title>
      <author>Himanshu</author>
      <pubDate>Sat, 11 Sep 2021 19:52:46 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/what-features-can-a-blog-website-should-have-3m2a</link>
      <guid>https://dev.to/hima_khaitan/what-features-can-a-blog-website-should-have-3m2a</guid>
      <description>&lt;h3&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h3&gt;

&lt;p&gt;One must wonder what features to include in a Blog Website. So did I. After a long run of thoughts I made this aesthetic looking website and named it &lt;strong&gt;The Chaotic&lt;/strong&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/TheChaotic"&gt;
        TheChaotic
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Chaotic is a Personal Blog Website 💻 made using MERN Stack. The theme of the website is set to aesthetic as well as inspiring🌱. To be more precise, the website is set to target Youth Audience as a whole. 🧲
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;

  &lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/Logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Idf6O9aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/Logo.png" width="200"&gt;&lt;/a&gt;
  &lt;br&gt;  
  The Chaotic - Blog Website
  &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;
&lt;a href="https://www.mongodb.com/" rel="nofollow"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkxXKTiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/mongodb.png" width="100"&gt;
&lt;/a&gt; 
&lt;a href="https://expressjs.com/" rel="nofollow"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6n_wHbQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/expressjs.png" width="100"&gt;
&lt;/a&gt;
 
&lt;a href="https://reactjs.org/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIyOZy5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/reactjs.png" width="60"&gt;&lt;/a&gt;
   
&lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psITFUtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/nodejs.png" width="60"&gt;&lt;/a&gt;
  
&lt;/p&gt;

&lt;h4&gt;
A Personal Blog Website Setup using &lt;a href="https://www.mongodb.com/mern-stack" rel="nofollow"&gt;MERN Stack&lt;/a&gt;.&lt;/h4&gt;
&lt;p&gt;
  
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/80a1153c429992993a5fc1d8009c2f9ed74f95263366dc21a2daec8fb25077c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d7570253230746f253230646174652d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/80a1153c429992993a5fc1d8009c2f9ed74f95263366dc21a2daec8fb25077c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d7570253230746f253230646174652d627269676874677265656e2e737667"&gt;&lt;/a&gt;
  
  &lt;a href="https://github.com/himakhaitan/TheChaotic/issues"&gt;&lt;img src="https://camo.githubusercontent.com/d9ac4d4824e2b7488101f456174c06f12daa873dc05ff0d5b3c6b18da341c3dc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f68696d616b68616974616e2f5468654368616f7469632e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/45b4ffbd594af47fe09a3432f9f8e122c6518aa6352b4ce453a1a2563da2905c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/himakhaitan/TheChaotic#description"&gt;Description&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#screenshot"&gt;Screenshot&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#installation-and-setup"&gt;Installation and Setup&lt;/a&gt; • &lt;a href="https://github.com/himakhaitan/TheChaotic#dependcies"&gt;Dependencies&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#license"&gt;License&lt;/a&gt; • &lt;a href="https://github.com/himakhaitan/TheChaotic#contribution"&gt;Contribution&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;h2&gt;
Screenshot&lt;/h2&gt;
&lt;p&gt;Below are some of the screenshots of UI from The Chaotic&lt;/p&gt;
&lt;h3&gt;
Home Page&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tadTdgXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Contact Page&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQgI3s61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Category Pages&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7ZqoAi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot4.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIwqGuV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot5.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
About Pages&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2k8KNFkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation and Setup&lt;/h2&gt;
&lt;h2&gt;
Dependencies&lt;/h2&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;This project uses an &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
&lt;h2&gt;
Contribution&lt;/h2&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/TheChaotic"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The Chaotic is a Personal Blog Website 💻 made using MERN Stack. The theme of the website is set to aesthetic as well as inspiring🌱. To be more precise, the website is set to target Youth Audience as a whole. 🧲&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h3&gt;

&lt;p&gt;The frontend of the website is made using ReactJs and backend is made up of NodeJs using ExpressJs. MongoDB is the powering database of the project.&lt;/p&gt;

&lt;p&gt;Backend Default URL - &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;br&gt;
Frontend Default URL - &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cloning-and-setting-up-the-project"&gt;
  &lt;/a&gt;
  Cloning and Setting up the Project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository using &lt;code&gt;git clone https://github.com/himakhaitan/TheChaotic.git&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd into Backend using &lt;code&gt;cd ./Backend&lt;/code&gt; and run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now change directory to Frontend &lt;code&gt;cd ../Frontend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have installed all the dependencies for the project. Now we have to configure our &lt;code&gt;.env&lt;/code&gt; file as per &lt;code&gt;sample.env&lt;/code&gt; for the Backend.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the Project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;cd into &lt;code&gt;Backend&lt;/code&gt; using &lt;code&gt;cd ./Backend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm run server&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd into &lt;code&gt;Frontend&lt;/code&gt; using &lt;code&gt;cd ../Frontend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm run start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Blogs Archive&lt;/li&gt;
&lt;li&gt;Tags Creation&lt;/li&gt;
&lt;li&gt;Blogs Search&lt;/li&gt;
&lt;li&gt;Contact Form Spam Protection&lt;/li&gt;
&lt;li&gt;Commenting&lt;/li&gt;
&lt;li&gt;Admin Panel&lt;/li&gt;
&lt;li&gt;Admin Authentication&lt;/li&gt;
&lt;li&gt;Categories wise sorting&lt;/li&gt;
&lt;li&gt;Image Uploads&lt;/li&gt;
&lt;li&gt;Social Sharing&lt;/li&gt;
&lt;li&gt;Authorship&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#status"&gt;
  &lt;/a&gt;
  Status
&lt;/h3&gt;

&lt;p&gt;Project is completely open source and it will be highly thankful if someone wants to contribute or point out any issues with the code. You can anytime open a new issue or create a pull request.&lt;/p&gt;

&lt;p&gt;To know more you can reach me through the Discord Server &lt;a href="https://discord.gg/SbD66RXr4W"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#my-github-profile"&gt;
  &lt;/a&gt;
  My Github Profile
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/1.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhPldnYX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
I'm a CSE geek 💻 from India who loves to code.&lt;/h4&gt;
&lt;p&gt;
  &lt;a href="https://github.com/himakhaitan/himakhaitanmailto:himanshukhaitan10@gmail.com"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYGaXB7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/mail.png"&gt;&lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/himanshu-khaitan-431666204/" rel="nofollow"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxIqX2ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/linkedin.png"&gt;&lt;/a&gt;  &lt;a href="https://www.instagram.com/hima_khaitan/" rel="nofollow"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hI5Nl9bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/insta.png"&gt;&lt;/a&gt;  
  &lt;a href="https://dev.to/hima_khaitan" rel="nofollow"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCiVUhCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/dev.png"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;An avid and passionate coder specializing in different languages. I love to build and design websites which the end user would enjoy using while keeping the website performant and the code clean. Up for freelance web development work and collaborating on exciting &lt;b&gt;Open Source &amp;amp; Personal&lt;/b&gt; projects.&lt;/p&gt;

&lt;h2&gt;
⚡ Stuff I Know&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/html5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPZScEHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/html5.png" height="40"&gt;&lt;/a&gt;      
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/css.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hgqiZ2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/css.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/sass.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhTwFUaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/sass.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/bootstrap.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JD5P6TZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/bootstrap.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/js.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUzycnHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/js.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/node.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dl1FdMRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/node.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/expressjs.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1s5LNAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/expressjs.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/postman.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TF-nvKo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/postman.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/react.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9ZJOFsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/react.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/mongo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dR-32qEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/mongo.png" height="40"&gt;&lt;/a&gt;    
&lt;br&gt;&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/c.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yepts2il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/c.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/cpp.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L31vmUlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/cpp.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/git.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1430J1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/git.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/github.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZEcRHGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/github.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/linux.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaHtEgGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/linux.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/heroku.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AjAmxEsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/heroku.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/figma.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TgXPEoiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/figma.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/canva.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WX5JulQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/canva.png" height="40"&gt;&lt;/a&gt;   
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/redux.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79n8UtTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/redux.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/next-js.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3iqizuMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/next-js.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/typescript.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTXDoHB---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/typescript.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/wordpress.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OH4C0ulq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/wordpress.png" height="40"&gt;&lt;/a&gt;    
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ce7b9188f079294587c7bcb5e720bd2a54a4a393913c48c78c6a1c939fcd93a0/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d3f757365723d68696d616b68616974616e267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;img src="https://camo.githubusercontent.com/ce7b9188f079294587c7bcb5e720bd2a54a4a393913c48c78c6a1c939fcd93a0/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d3f757365723d68696d616b68616974616e267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/73483d5bfe87818a76d1763bda2c4e0302643e7c1e8d36b1b6747062f5762a03/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d68696d616b68616974616e2673686f775f69636f6e733d7472756526686964655f626f726465723d74727565267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;img src="https://camo.githubusercontent.com/73483d5bfe87818a76d1763bda2c4e0302643e7c1e8d36b1b6747062f5762a03/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d68696d616b68616974616e2673686f775f69636f6e733d7472756526686964655f626f726465723d74727565267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h4&gt;
Happily turning coffee into code!✅
&lt;/h4&gt;

&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/himakhaitan"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#projects-i-am-working-on"&gt;
  &lt;/a&gt;
  Projects I am working on
&lt;/h3&gt;

&lt;p&gt;I am currently working on a MERN stack hospital management system fully equipped to manage modern day Hospitals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happily Turning Coffee into Code. 💻🌱&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>react</category>
      <category>webdev</category>
      <category>githunt</category>
    </item>
    <item>
      <title>Tips To Become Great and Skilled Programmer</title>
      <author>Coding Tricks</author>
      <pubDate>Sat, 11 Sep 2021 19:11:41 +0000</pubDate>
      <link>https://dev.to/codtrick/tips-to-become-great-and-skilled-programmer-2l67</link>
      <guid>https://dev.to/codtrick/tips-to-become-great-and-skilled-programmer-2l67</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>⌨️ An ACTUAL typewriter (that auto types and is interactive too!)  🤯 </title>
      <author>InHuOfficial</author>
      <pubDate>Sat, 11 Sep 2021 18:43:47 +0000</pubDate>
      <link>https://dev.to/inhuofficial/an-actual-interactive-typewriter-2hg9</link>
      <guid>https://dev.to/inhuofficial/an-actual-interactive-typewriter-2hg9</guid>
      <description>&lt;p&gt;A bit late to the party but here is my silly entry for the typewriter wars!&lt;/p&gt;

&lt;p&gt;And unlike everyone else...I built a typewriter!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;warning:&lt;/strong&gt; This will not be very accessible for screen reader users I am afraid.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/t4naug2y/7//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It is a little rough around the edges and way better on a PC, but it works and it will do for a quick idea (I say quick, it took ages!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-is-interactive"&gt;
  &lt;/a&gt;
  It is interactive
&lt;/h2&gt;

&lt;p&gt;Once the initial animation has played you can use it just like a typewriter! You may have to click on the typewriter to focus the fiddle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;on mobile:&lt;/strong&gt; there is an input you can focus to bring the keyboard up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-no-tutorial-this-time"&gt;
  &lt;/a&gt;
  What no tutorial this time?
&lt;/h2&gt;

&lt;p&gt;Nope, there is not a single piece of code here that I would want you to use in the real world!&lt;/p&gt;

&lt;p&gt;However I have taken the time to make sure that the key movements actually correspond to the keys on your keyboard, so I hope that you can forgive the shoddy code in exchange for the &lt;strong&gt;eternity&lt;/strong&gt; that it took me to label up all the parts of the SVG!&lt;/p&gt;

&lt;p&gt;Anyway, just have fun with it and at least I joined the fight, even if it was late!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Week 2 in Task force at awesomity and Code of Africa</title>
      <author>Ntwari Egide</author>
      <pubDate>Sat, 11 Sep 2021 18:11:44 +0000</pubDate>
      <link>https://dev.to/ntwariegide/week-2-in-task-force-at-awesomity-and-code-of-africa-46c3</link>
      <guid>https://dev.to/ntwariegide/week-2-in-task-force-at-awesomity-and-code-of-africa-46c3</guid>
      <description>&lt;p&gt;Tough, puissant, influential, dominant, long, energizing week, that is all I can say on this second week in Task force 3.0 at Awesomity and code of Africa.&lt;/p&gt;

&lt;p&gt;How?, on Monday we had a course with Yannick CTO &lt;a class="mentioned-user" href="https://dev.to/awesomity"&gt;@awesomity&lt;/a&gt;
 of git workflow, which was different from my poor practices. I learned many things to improve. In the afternoon we learned more about  virtual meeting etiquette which was about how to prepare yourself before, in, after meeting.&lt;/p&gt;

&lt;p&gt;Wait … no game ? Yeah, we had a game of lifting a stick with one finger which was tough at first, but easy after knowing the method to use.&lt;/p&gt;

&lt;p&gt;Ok, continue, We had a soft skills session with Axel about CoA values. I learned that before joining a company it is better to understand their values because you should know how the company lives day by day. We also learned intercultural communication with Anja which made me realise that I know the audience before using gestures and how cultures can affect someone in the workspace.&lt;/p&gt;

&lt;p&gt;No coding? Oooh, we did some tough but easy codewars, with Yannick we learned about containerizing, dockerization, documentation which was good to know because When I was a scrum master of 30 people at school it was hard to manage them, but today it can be easy because of what I learned with Yannick.&lt;/p&gt;

&lt;p&gt;In conclusion, This week was tough because we had to deliver a presentation on Friday, I had many things to say which made me not realize about time, I used 14min...Ooh instead of 4 min. Anyway I wish to become best in both soft and coding skills at the end of this 6 weeks program.&lt;/p&gt;

</description>
      <category>codeofafrica</category>
      <category>taskforce3</category>
      <category>awesomitylab</category>
      <category>codinglifestyle</category>
    </item>
    <item>
      <title>How to build your virtual workspace</title>
      <author>Kotbi Abderrahmane</author>
      <pubDate>Sat, 11 Sep 2021 18:04:56 +0000</pubDate>
      <link>https://dev.to/abdorah/how-to-build-your-virtual-workspace-84</link>
      <guid>https://dev.to/abdorah/how-to-build-your-virtual-workspace-84</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this article I will teach how  to use &lt;code&gt;Docker&lt;/code&gt; containers as a development workspace using a real word example. I will go through multiple &lt;code&gt;Dev Ops&lt;/code&gt; related topics. However, this is still an example that I have had the opportunity to work on during my open-sourcing journey.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-do-we-want-to-achieve"&gt;
  &lt;/a&gt;
  What do we want to achieve?
&lt;/h2&gt;

&lt;p&gt;One of the wonderful open source projects that I have got the opportunity to help in is &lt;a href="https://github.com/One-Language"&gt;&lt;strong&gt;the One Programming language&lt;/strong&gt;&lt;/a&gt; . The goal of this project is to create a programming language named &lt;strong&gt;One&lt;/strong&gt;. To build the project and run tests you must have a list of hard to install and configure dependencies on your machine, e.g. &lt;code&gt;Make&lt;/code&gt;, &lt;code&gt;LLVM&lt;/code&gt;, etc. Moreover, we wanted to make it easy for developers to get involved and contribute easily in the project. That's why we considered having a docker image to build the code and run tests as priority. Hence, we created this beautiful &lt;a href="https://hub.docker.com/r/onelangorg/one"&gt;image&lt;/a&gt; for our organization. &lt;/p&gt;

&lt;p&gt;In this article I am going to show you how we made it and also how you can make you own development image. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-the-raw-docker-endraw-image"&gt;
  &lt;/a&gt;
  Build the &lt;code&gt;Docker&lt;/code&gt; image
&lt;/h2&gt;

&lt;p&gt;First things first, we need to build the image. Indeed there is nothing special in this section, because we will only write a &lt;a href="https://github.com/One-Language/One/blob/master/Dockerfile"&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; for our image. Yet, what make this image special are the pieces of software that will include. Generally, you ought to setup packages required to run your project and your tests, along side with a version control system like &lt;code&gt;git&lt;/code&gt;. As far as I am concerned, I included the following packages in my lightweight &lt;code&gt;alpine&lt;/code&gt; base image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:latest&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; The One Programming Language&lt;/span&gt;

&lt;span class="c"&gt;# LLVM version&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; LLVM_VERSION=12.0.1&lt;/span&gt;

&lt;span class="c"&gt;# LLVM dependencies&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk &lt;span class="nt"&gt;--no-cache&lt;/span&gt; add &lt;span class="se"&gt;\
&lt;/span&gt;    autoconf &lt;span class="se"&gt;\
&lt;/span&gt;    automake &lt;span class="se"&gt;\
&lt;/span&gt;    cmake &lt;span class="se"&gt;\
&lt;/span&gt;    freetype-dev &lt;span class="se"&gt;\
&lt;/span&gt;    g++ &lt;span class="se"&gt;\
&lt;/span&gt;    gcc &lt;span class="se"&gt;\
&lt;/span&gt;    libxml2-dev &lt;span class="se"&gt;\
&lt;/span&gt;    linux-headers &lt;span class="se"&gt;\
&lt;/span&gt;    make &lt;span class="se"&gt;\
&lt;/span&gt;    musl-dev &lt;span class="se"&gt;\
&lt;/span&gt;    ncurses-dev &lt;span class="se"&gt;\
&lt;/span&gt;    python3 py3-pip &lt;span class="se"&gt;\
&lt;/span&gt;    git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next I setup the reaming packages, like &lt;code&gt;LLVM&lt;/code&gt; and &lt;code&gt;pre-commit&lt;/code&gt;. This last is a powerful framework for managing and maintaining multi-language &lt;code&gt;pre-commit&lt;/code&gt; hooks. It is an important addition to your open source project. Since &lt;code&gt;Git hook&lt;/code&gt; scripts are useful for identifying simple issues before submission to code review. We run our hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Build and install LLVM&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;wget &lt;span class="s2"&gt;"https://github.com/llvm/llvm-project/archive/llvmorg-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LLVM_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Error downloading LLVM version ${LLVM_VERSION}'&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;tar &lt;/span&gt;zxf llvmorg-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LLVM_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm &lt;/span&gt;llvmorg-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LLVM_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar.gz

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;llvm-project-llvmorg-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LLVM_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;mkdir &lt;/span&gt;build

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt;  /llvm-project-llvmorg-${LLVM_VERSION}/build&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;cmake ../llvm &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nt"&gt;-G&lt;/span&gt; &lt;span class="s2"&gt;"Unix Makefiles"&lt;/span&gt; &lt;span class="nt"&gt;-DLLVM_TARGETS_TO_BUILD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"X86"&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nt"&gt;-DLLVM_ENABLE_PROJECTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"clang;lld"&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nt"&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MinSizeRel &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Error running CMake for LLVM'&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;make &lt;span class="nt"&gt;-j&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;nproc&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Error building LLVM'&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;make &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Error installing LLVM'&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../.. &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; llvm-project-llvmorg-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LLVM_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CXX=clang++&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CC=clang&lt;/span&gt;

&lt;span class="c"&gt;# pre-commit installation&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pre-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now as everything is perfectly configured, you can copy your project directory, build the code, and run your tests while showing significant logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Work directory setup&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /One&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /One&lt;/span&gt;

&lt;span class="c"&gt;# CMake configuration &amp;amp; building&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;build
&lt;span class="k"&gt;RUN &lt;/span&gt;cmake &lt;span class="nt"&gt;--no-warn-unused-cli&lt;/span&gt; &lt;span class="nt"&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS&lt;/span&gt;:BOOL&lt;span class="o"&gt;=&lt;/span&gt;TRUE &lt;span class="nt"&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;:STRING&lt;span class="o"&gt;=&lt;/span&gt;Debug &lt;span class="nt"&gt;-DCMAKE_C_COMPILER&lt;/span&gt;:FILEPATH&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/gcc &lt;span class="nt"&gt;-DCMAKE_CXX_COMPILER&lt;/span&gt;:FILEPATH&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/g++ &lt;span class="nt"&gt;-H&lt;/span&gt;/One &lt;span class="nt"&gt;-B&lt;/span&gt;/One/build &lt;span class="nt"&gt;-G&lt;/span&gt; &lt;span class="s2"&gt;"Unix Makefiles"&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cmake &lt;span class="nt"&gt;--build&lt;/span&gt; ./build &lt;span class="nt"&gt;--config&lt;/span&gt; Debug &lt;span class="nt"&gt;--target&lt;/span&gt; all &lt;span class="nt"&gt;-j&lt;/span&gt; 6 &lt;span class="nt"&gt;--&lt;/span&gt;

&lt;span class="c"&gt;# Change directory to build&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /One/build&lt;/span&gt;

&lt;span class="c"&gt;# Running example input.one&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;./lexer ../src/input.one log
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;log

&lt;span class="c"&gt;# Running tests&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;./lexer_test
&lt;span class="k"&gt;RUN &lt;/span&gt;./parser_test
&lt;span class="k"&gt;RUN &lt;/span&gt;./argument_test

&lt;span class="c"&gt;# Tests Dashboard&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ctest --output-on-failure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-it-to-raw-dockerhub-endraw-"&gt;
  &lt;/a&gt;
  Deploy it to &lt;code&gt;DockerHub&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;To do so, you will need a &lt;code&gt;DockerHub&lt;/code&gt; account. Yet, only your account username and credentials are required. As we are going to deploy it using &lt;code&gt;GitHub Actions&lt;/code&gt;. Similarly to &lt;code&gt;pre-commit&lt;/code&gt;, using &lt;code&gt;GitHub Actions&lt;/code&gt;, or any &lt;code&gt;CI\CD&lt;/code&gt; tool is a good &lt;code&gt;Dev Ops&lt;/code&gt; practice. Especially that we are going to configure our image to run &lt;code&gt;pre-commit&lt;/code&gt; hooks, build the code, run tests, and deploy it the new image to &lt;code&gt;DockerHub&lt;/code&gt;. In fact, you will do very minor changes to the following &lt;a href="https://github.com/One-Language/One/blob/master/.github/workflows/docker-image.yml"&gt;&lt;code&gt;GitHub Workflow&lt;/code&gt;&lt;/a&gt; to use it in any other project.&lt;/p&gt;

&lt;p&gt;Let's begging by configuring the &lt;code&gt;GitHub Workflow&lt;/code&gt; that will run on every push or pull request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerize One Programming language&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Publish Docker image&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will add steps to configure needed &lt;code&gt;GitHub Actions&lt;/code&gt; to deploy to &lt;code&gt;DockerHub&lt;/code&gt;. Particularly, you won't need any other &lt;code&gt;GitHub Actions&lt;/code&gt;. Because, you already have a &lt;code&gt;Dockerfile&lt;/code&gt; with all the prerequisites!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up QEMU&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-qemu-action@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Docker Buildx&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We shall continue by Sign into our &lt;code&gt;DockerHub&lt;/code&gt; account:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to DockerHub&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.DOCKER_HUB_USERNAME}}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.DOCKER_HUB_PASSWORD}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we go to the next step you need to add &lt;code&gt;secrets.DOCKER_HUB_USERNAME&lt;/code&gt; and &lt;code&gt;secrets.DOCKER_HUB_PASSWORD&lt;/code&gt; to your &lt;code&gt;Github&lt;/code&gt; repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2i6f6qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwufx6cnb9h344tlppzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2i6f6qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwufx6cnb9h344tlppzs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, publish your new image named &lt;code&gt;onelangorg/one:latest&lt;/code&gt; to &lt;code&gt;DockerHub&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Push to DockerHub&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;onelangorg/one:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to configure cache so that you won't need to go with all the unnecessary configuration steps everytime. Also, this will decrease the run time dramatically. In my case without cache the run time is about two hours, but with cache it often doesn't surpass one minute and a half!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;          &lt;span class="na"&gt;cache-from&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;type=registry,ref=onelangorg/one:latest&lt;/span&gt;
          &lt;span class="na"&gt;cache-to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;type=inline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Consequently, you will cerate a &lt;code&gt;Docker&lt;/code&gt; &lt;a href="https://hub.docker.com/r/onelangorg/one"&gt;repository&lt;/a&gt; in your docker account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-it-as-a-workspace"&gt;
  &lt;/a&gt;
  Use it as a Workspace
&lt;/h2&gt;

&lt;p&gt;In this section you will need to pull the &lt;code&gt;docker&lt;/code&gt; image form &lt;code&gt;DockerHube&lt;/code&gt; have &lt;code&gt;VSCode&lt;/code&gt; with &lt;code&gt;Remote-Containers&lt;/code&gt; installed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rAWjTdtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elmj46w3491kbqx3df54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rAWjTdtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elmj46w3491kbqx3df54.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This awesome extension admit of getting into the &lt;code&gt;Docker&lt;/code&gt; container itself, by opening a &lt;code&gt;VSCode&lt;/code&gt; window inside it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJPaKGct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmmzpd6mgy2a35pxf5fy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJPaKGct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmmzpd6mgy2a35pxf5fy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Opening the new window attached to your container you can open the development directory:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_mhrT3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhnitytlgeoy3v8j9yql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_mhrT3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhnitytlgeoy3v8j9yql.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And Here you go you have a workspace configured and ready to use!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AVCMa6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5j8jg8wnkaooq4giyfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AVCMa6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5j8jg8wnkaooq4giyfo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that you come to the end of this article, you can see how important to use &lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;DockerHub&lt;/code&gt;, and &lt;code&gt;GitHub Actions&lt;/code&gt;. As well as how easy to use are they. These technologies helps developers to be more productive and not bother with the repetitive configuration of the workspace. On every pull request, we get an updated &lt;code&gt;Docker&lt;/code&gt; image with a clean code and successfully run tests thanks to &lt;code&gt;pre-commit&lt;/code&gt;, &lt;code&gt;Github Actions&lt;/code&gt;, and cache.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>github</category>
      <category>vscode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>CSS-Typography</title>
      <author>rohit-br-k</author>
      <pubDate>Sat, 11 Sep 2021 17:06:23 +0000</pubDate>
      <link>https://dev.to/rohitbrk/css-typography-24ai</link>
      <guid>https://dev.to/rohitbrk/css-typography-24ai</guid>
      <description>&lt;p&gt;Typography is a main thing when it comes to front-end designing.&lt;br&gt;
Here, we can look more into typography tips.👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fontfamily"&gt;
  &lt;/a&gt;
  Font-family 😊
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.In font-family, mostly we can use serif and sans-serif.sans- &lt;br&gt;
 serif is widely used in modern-websites and we can use serif &lt;br&gt;
 in luxury websites.&lt;br&gt;
2.In sans-serif , we can use Inter, Opensas, roboto, &lt;br&gt;
   Montserrat , worksans , lato etc&lt;br&gt;
3.In serif , we can use Merriweather, aleso, playfair-display, &lt;br&gt;
   cormorant , cardo, lora etc&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#fontsize"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  font-size😒&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.Normal text 16px-32px&lt;br&gt;
2.font-size of Long text can be more than 20px.&lt;br&gt;
3.Headlines 50px and font-weight:600&lt;br&gt;
4.For any text don't go more than font-weight:400 expect &lt;br&gt;
  headlines&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#paragraphs"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  paragraphs🤦‍♂️&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.Don't make paragraph so long and Use less than 75 characters &lt;br&gt;
 per line.&lt;br&gt;
2.if paragraphs are long , user's will find it difficult to &lt;br&gt;
 read the information that you are trying to convey through &lt;br&gt;
 it.&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#lineheight"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  line-height😢&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.For Normal text, line-height should be in between 1.5 and 2&lt;br&gt;
2.For big Text go for less than 2&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#letterspacing"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Letter-spacing👌&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.Decrease letter spacing in headlines&lt;br&gt;
2.For small headlines , make every letter in uppercase With &lt;br&gt;
  low letterspacing&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#dont-do"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Don't do🤞&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.Don't justify text&lt;br&gt;
2.Small blocks are fine&lt;br&gt;
3.Don't center long text blocks&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#thanks-so-much-for-your-awesome-time-lets-get-together-again-soon"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Thanks so much for your awesome time. Let's get together again soon.&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rohitbrk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Sense of time.py</title>
      <author>Code Ripper</author>
      <pubDate>Sat, 11 Sep 2021 16:51:06 +0000</pubDate>
      <link>https://dev.to/coderipper/sense-of-time-py-1i0f</link>
      <guid>https://dev.to/coderipper/sense-of-time-py-1i0f</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The trouble is, you think you have time. - Jack Kornfield&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is my first blog, thought of starting with a quote :-).&lt;/p&gt;

&lt;p&gt;With work from home being a new normal, we often get distracted by something and lost the track of time. Might Not be everyone, but people like me.&lt;/p&gt;

&lt;p&gt;Research studies have proven that &lt;strong&gt;A regular reminder of passage of time seems to have a definite good impact on one's efficiency and productivity&lt;/strong&gt;&lt;em&gt;(don't look it up!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I have decided to create a very simple background process that reminds you the time every quarter-hour.&lt;/p&gt;

&lt;p&gt;We are going to use python and crontab service in your MacOS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env python
import os
import time

# Say current time
os.system('say -v Samantha "The time is now ' + time.strftime("%I:%M %p") + '"')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Simple, indeed&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have used say-command, which is a CLI for &lt;a href="https://developer.apple.com/documentation/applicationservices/speech_synthesis_manager"&gt;Speech Synthesis Manager&lt;/a&gt;. &lt;em&gt;I didn't like the default high-pitched male voice, so I changed to &lt;code&gt;-v Samantha&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Put the above python snippet in a file, save it somewhere and copy the file path. In my case, it is &lt;code&gt;~/dev/scripts/sense_of_time.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we are gonna use &lt;a href="https://ole.michelsen.dk/blog/schedule-jobs-with-crontab-on-mac-osx/"&gt;crontab&lt;/a&gt; - &lt;em&gt;explained by one of my favourite blogger Ole Michelsen&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Open your terminal and run &lt;code&gt;crontab -e&lt;/code&gt; to edit the job list. it will be empty, if you don't have any job configured.&lt;/p&gt;

&lt;p&gt;We are gonna configure a new job now. Paste the below line in crontab job file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; */15 * * * * /usr/local/bin/python3 ~/dev/scripts/sense_of_time.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;*/15 * * * *&lt;/code&gt; - cron expression tells when the job should run. Change this expression if you want it to run at different time interval.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/usr/local/bin/python3&lt;/code&gt; - path of python binary, &lt;em&gt;change it if your path is different&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;~/dev/scripts/sense_of_time.py&lt;/code&gt; - path of your python file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, save and close the file to install the cronjob, if you are using vim, press ESC, type &lt;code&gt;:wq&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;you should see&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crontab -e
crontab: installing new crontab
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;When the time is *:15/30/45/00, you will get a voice reminder.&lt;/p&gt;

&lt;p&gt;How cool is that!&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>python</category>
    </item>
    <item>
      <title>Few tips to improve WebPage Performance</title>
      <author>Vamsi Tallam</author>
      <pubDate>Sat, 11 Sep 2021 16:38:07 +0000</pubDate>
      <link>https://dev.to/vamsitallam/few-tips-to-improve-webpage-performance-41e6</link>
      <guid>https://dev.to/vamsitallam/few-tips-to-improve-webpage-performance-41e6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#points-to-be-considered-while-optimizing-the-performance-of-a-webpage"&gt;
  &lt;/a&gt;
  Points to be considered while optimizing the performance of a webpage:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Images Optimisation&lt;/li&gt;
&lt;li&gt;Fonts Optimisation&lt;/li&gt;
&lt;li&gt;Optimizing CSS and JS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#image-optimisation"&gt;
  &lt;/a&gt;
  Image Optimisation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Choose the Right File Format (PNG, JPG, Webp, SVG, etc.)&lt;/li&gt;
&lt;li&gt;Compress the image appropriately&lt;/li&gt;
&lt;li&gt;Use appropriate dimensions for the image, also specify height and width attributes for the image&lt;/li&gt;
&lt;li&gt;Use Lazy loading for below-the-fold images. (You can use different 3rd party libraries like &lt;a href="https://luis-almeida.github.io/unveil/"&gt;Unveil&lt;/a&gt;, &lt;a href="https://github.com/aFarkas/lazysizes"&gt;lazysizes&lt;/a&gt;, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To achieve the above steps(except lazyloading) you can use the Cloudinary service. It will automatically serve the right file format and compress the image and serve the right quality based on the device.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonts-optimisation"&gt;
  &lt;/a&gt;
  Fonts Optimisation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use woff2 file format.&lt;/li&gt;
&lt;li&gt;Use font display swap CSS property in the font face to ensure that fonts remain visible while the fonts get downloaded&lt;/li&gt;
&lt;li&gt;Import only required fonts.&lt;/li&gt;
&lt;li&gt;preconnect the font domain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;link rel="preconnect" href="https://fonts.googleapis.com"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;preload the fonts as style as shown below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;link rel="preload" href="https://use.typekit.net/gwu7gbd.css" as="style" onload="this.onload=null;this.rel='stylesheet'" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use only the required glyphs while loading the fonts. For example, I am using only alphabets on my website, then I can load the fonts as shown below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&amp;amp;display=swap&amp;amp;text=ABCBEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqurstuvwxyz"&gt;https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&amp;amp;display=swap&amp;amp;text=ABCBEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqurstuvwxyz&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's better to use the required Unicodes only while loading the fonts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on best practices, visit this &lt;a href="https://web.dev/font-best-practices/"&gt;web.dev artcile&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimizing-css"&gt;
  &lt;/a&gt;
  Optimizing CSS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove Unused CSS. You can refer to &lt;a href="https://css-tricks.com/how-do-you-remove-unused-css-from-a-site/"&gt;this article&lt;/a&gt;  to know about the tools that can be helpful for removing unused CSS,&lt;/li&gt;
&lt;li&gt;Extract Critical CSS and inline the crititical CSS inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. Refer to &lt;a href="https://web.dev/extract-critical-css/"&gt;this article&lt;/a&gt; to know about the tools that help you to identify the critcial CSS.&lt;/li&gt;
&lt;li&gt;Defer the Non Critical CSS. Refer to &lt;a href="https://web.dev/defer-non-critical-css/#optimize"&gt;this article&lt;/a&gt; to know how to defer the unused CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#optimizing-js"&gt;
  &lt;/a&gt;
  Optimizing JS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Defer unused JavaScript&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code-split your bundle into multiple chunks&lt;/li&gt;
&lt;li&gt;Defer any non-critical JavaScript, including third-party scripts, using &lt;code&gt;async&lt;/code&gt; or &lt;code&gt;defer&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minimize unused polyfills&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a web worker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For More details on optimizing JS, you can refer to &lt;a href="https://web.dev/optimize-fid/"&gt;this article&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>performance</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Meeting Open Source for the first time in my life :)</title>
      <author>irenejoeunpark</author>
      <pubDate>Sat, 11 Sep 2021 16:35:44 +0000</pubDate>
      <link>https://dev.to/irenejoeunpark/meeting-open-source-for-the-first-time-in-my-life-3769</link>
      <guid>https://dev.to/irenejoeunpark/meeting-open-source-for-the-first-time-in-my-life-3769</guid>
      <description>&lt;p&gt;This is Irene Park, a student from Seneca College. &lt;br&gt;
In this time of era, with a tons of sources and data available, Open Source was got me very interested with the point where we can collaborate. Using existing sources to implement an application was very attractive. &lt;/p&gt;

&lt;p&gt;I am based in Toronto, Canada. Even during time of Covid, I live in Toronto. My home is Toronto :)&lt;/p&gt;

&lt;p&gt;I am looking forward to learn and collaborate with other students in the course. I want to implement a project that handles a big data if possible during the term. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/irenejoeunpark/tech-interview-handbook"&gt;https://github.com/irenejoeunpark/tech-interview-handbook&lt;/a&gt;&lt;br&gt;
Being honest, the title of the repo made me chose this. This repo has all useful algorithms, data structures and its implementations. With those source of study, it is helping developers with their technical interviews and also for practicing (for fun). &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Mocking using pytest</title>
      <author>suvhotta</author>
      <pubDate>Sat, 11 Sep 2021 16:19:21 +0000</pubDate>
      <link>https://dev.to/suvhotta/mocking-using-pytest-210</link>
      <guid>https://dev.to/suvhotta/mocking-using-pytest-210</guid>
      <description>&lt;p&gt;&lt;strong&gt;Pytest&lt;/strong&gt; is a unit test module in python.&lt;br&gt;
&lt;strong&gt;Mocking&lt;/strong&gt; is a way of mimicking the working of a service in &lt;br&gt;
a way to substitute for the real one.&lt;/p&gt;

&lt;p&gt;In this post I'll be focussing on mocking different types of methods present in a class. &lt;/p&gt;

&lt;p&gt;Class ABC has been defined in a python file python_class.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ABC__private_instance_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ABC__private_class_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ABC__private_static_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;static_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"static_method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;class_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"class_method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instance_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"instance method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__private_instance_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"private instance method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__private_class_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"private class method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__private_static_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"private static method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yeah I know this isn't how class methods and static methods should be used, but that's not on today's agenda.&lt;/p&gt;

&lt;p&gt;In the call method, we can see that there are 6 other methods being called. That's where we need to &lt;strong&gt;mock the methods - the place where they're being called/being used&lt;/strong&gt; instead of where they've been defined.&lt;/p&gt;

&lt;p&gt;But before that we need to install 2 packages: pytest, pytest-mock&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;python_class&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABC&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestPythonClass&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_all_methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"python_class.ABC"&lt;/span&gt;
        &lt;span class="n"&gt;instance_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.instance_method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;static_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.static_method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;class_method_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.class_method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;pvt_instance_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;._ABC__private_instance_method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;pvt_class_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;._ABC__private_class_method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;pvt_static_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;._ABC__private_static_method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;instance_mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;static_mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;class_method_mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;pvt_instance_mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;pvt_class_mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;mocker&lt;/strong&gt; is a fixture that is shipped with the pytest-mock module. We can simply pass it on as an argument during the test method definition without importing.&lt;/p&gt;

&lt;p&gt;In this way I've mocked 6 different types of methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;instance method&lt;/li&gt;
&lt;li&gt;class method&lt;/li&gt;
&lt;li&gt;static method&lt;/li&gt;
&lt;li&gt;private instance method&lt;/li&gt;
&lt;li&gt;private class method&lt;/li&gt;
&lt;li&gt;private static method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lemme know in case I missed something or I need to add anything.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>unittest</category>
      <category>pytest</category>
    </item>
    <item>
      <title>PolyFull - enhance js capabilities</title>
      <author>Giovanni Cardamone</author>
      <pubDate>Sat, 11 Sep 2021 16:14:33 +0000</pubDate>
      <link>https://dev.to/giovannicardamone/polyfull-enhance-js-functionalities-3bo</link>
      <guid>https://dev.to/giovannicardamone/polyfull-enhance-js-functionalities-3bo</guid>
      <description>&lt;p&gt;Javascript is a very nice language (at least for someone 😂) but it's still missing some core functionalities...&lt;/p&gt;

&lt;p&gt;are you wondering which functionality are missing in the language? well, to remove an element from an array like now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementYouWantToRemove&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and if you have to remove each occurrence of that element can be even worse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementYouWantToRemove&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;not sure why javascript doesn't have such a basic functionality, something like this will be great:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;well, i have a great news for you! 🔥&lt;/p&gt;

&lt;p&gt;this and many many other functionalities are available directly into the language throught &lt;a href="https://github.com/GiovanniCardamone/polyfull"&gt;polyfull&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;all you need to do to unlock that functionalities is to import it in the index of your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;polyfull&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠️ THIS IS INTENDED TO USE ONLY IN FINAL APPLICATIONS.&lt;/p&gt;

&lt;p&gt;if you use this in library, any other applications that use your library will have &lt;code&gt;polyfull&lt;/code&gt; injected as well.&lt;br&gt;&lt;br&gt;
please DO NOT use this if you are building a library, use this only where you have control of your node interpreter.&lt;br&gt;&lt;br&gt;
also, if you are using some other polyfiller, be sure that there is no overlaps, or something will broke. Thanks!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and you can use a lot of functionalities, here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;polyfull&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// ArrayConstructor&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [[1, 'a'], [2, 'b'], [3, 'c']]&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intersect&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [2, 3]&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3, 4]&lt;/span&gt;

&lt;span class="c1"&gt;// Array&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [1, 3]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;removeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [1, 2]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 3&lt;/span&gt;

&lt;span class="c1"&gt;// DateConstructor&lt;/span&gt;
&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; new Date(Date.now())&lt;/span&gt;

&lt;span class="c1"&gt;// Date&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 1970-01-01T01:00:00.000Z&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;isBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;isAfter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; how many ms passed from 1970? :D&lt;/span&gt;

&lt;span class="c1"&gt;// NumberConstructor&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; -789.0123&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 789.0123&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 89.0123&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 42&lt;/span&gt;

&lt;span class="c1"&gt;// Number&lt;/span&gt;
&lt;span class="mf"&gt;7.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 6&lt;/span&gt;
&lt;span class="mf"&gt;40.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goldenRation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [24.72~, 15.28~]&lt;/span&gt;
&lt;span class="mf"&gt;50.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 10&lt;/span&gt;

&lt;span class="c1"&gt;// Promise&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allProperties&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; { a: 1, b: 2 }&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allPropertiesSettled&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//   a: { status: 'fulfilled', value: 1 },&lt;/span&gt;
&lt;span class="c1"&gt;//   b: { status: 'rejected', reason: 2 }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// String&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; "olleh"&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;racecar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0x01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNumeric&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;polyfull&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POLYFULL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;

&lt;span class="c1"&gt;// And Many Many Others!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember to leave a ⭐ if you like it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/GiovanniCardamone/polyfull"&gt;https://github.com/GiovanniCardamone/polyfull&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>An opinionated look at Minimal API in .NET 6</title>
      <author>Oleksii Nikiforov</author>
      <pubDate>Sat, 11 Sep 2021 15:56:20 +0000</pubDate>
      <link>https://dev.to/nikiforovall/an-opinionated-look-at-minimal-api-in-net-6-33pd</link>
      <guid>https://dev.to/nikiforovall/an-opinionated-look-at-minimal-api-in-net-6-33pd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In this blog post, I share my thoughts on how to organize Minimal API projects to keep code structure under control and still get benefits from the low-ceremony approach.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Minimal API is a refreshing and promising application model for building lightweight Web APIs. Now you can create a microservice and start prototyping without the necessity to create lots of boilerplate code and worrying about too much about code structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Presumably, this kind of style gives you a productivity boost and flattens the learning curve for newcomers. So it is considered as a more lightweight version, but using Minimal API doesn't mean you have to write small applications. It is rather a different application model that one day will be as much powerful as MVC counterpart.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h2&gt;

&lt;p&gt;One of the problems with Minimal API is that &lt;code&gt;Program.cs&lt;/code&gt; can get to big. So initial simplicity may lead you to the &lt;a href="https://en.wikipedia.org/wiki/Big_ball_of_mud"&gt;big ball of mud&lt;/a&gt; type of solution. At this point, you want to use refactoring techniques and my goal is to share some ideas on how to tackle emerging challenges.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-building-minimal-api"&gt;
  &lt;/a&gt;
  Example: Building Minimal API
&lt;/h3&gt;

&lt;p&gt;I've prepared a demo application. I strongly recommend checking it before you move further.&lt;/p&gt;

&lt;p&gt;Source code can be found at GitHub: &lt;a href="https://github.com/NikiforovAll/minimal-api-example"&gt;NikiforovAll/minimal-api-example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h2&gt;

&lt;p&gt;My general recommendation is to write something that may be called Modular Minimal API or Vertical Slice Minimal API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-programcs-aka-composition-root-small"&gt;
  &lt;/a&gt;
  Keep Program.cs aka Composition Root small
&lt;/h3&gt;

&lt;p&gt;A Composition Root is a unique location in an application where modules are composed together. You should have a good understanding of what this application is about just by looking at it.&lt;/p&gt;

&lt;p&gt;You want to keep Program.cs clean and focus on high-level modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSerilog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSwagger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddCors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddCarter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseExceptionHandling&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSwaggerEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routePrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAppCors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapCarter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡Tip: One of the techniques you can apply here is to create extension methods for &lt;code&gt;IServiceCollection&lt;/code&gt;, &lt;code&gt;IApplicationBuilder&lt;/code&gt;. For Minimal API I would suggest using "file-per-concern" organization. See &lt;em&gt;ApplicationBuilderExtensions&lt;/em&gt; and &lt;em&gt;ServiceCollectionExtensions&lt;/em&gt; folders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
&lt;span class="nb"&gt;.&lt;/span&gt;
├── ApplicationBuilderExtensions
│   ├── ApplicationBuilderExtensions.cs
│   └── ApplicationBuilderExtensions.OpenAPI.cs
├── assets
│   └── run.http
├── Features
│   ├── HomeModule.cs
│   └── TodosModule.cs
├── GlobalUsing.cs
├── MinimalAPI.csproj
├── Program.cs
├── Properties
│   └── launchSettings.json
├── ServiceCollectionExtensions
│   ├── ServiceCollectionExtensions.Auth.cs
│   ├── ServiceCollectionExtensions.Logging.cs
│   ├── ServiceCollectionExtensions.OpenAPI.cs
│   └── ServiceCollectionExtensions.Persistence.cs
└── todos.db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is an example of how to add OpenAPI/Swagger concern:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.OpenApi.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceCollectionExtensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;WebApplicationBuilder&lt;/span&gt; &lt;span class="nf"&gt;AddSwagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;WebApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSwagger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="nf"&gt;AddSwagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddEndpointsApiExplorer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSwaggerGen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SwaggerDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;OpenApiInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Minimal API Demo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Minimal API Demo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Contact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;OpenApiContact&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Oleksii Nikiforov"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://github.com/nikiforovall"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#organize-endpoints-around-features"&gt;
  &lt;/a&gt;
  Organize endpoints around features
&lt;/h3&gt;

&lt;p&gt;A &lt;a href="https://github.com/DamianEdwards/MinimalApiPlayground"&gt;MinimalApiPlayground&lt;/a&gt; from Damian Edwards is a really good place to start learning more about Minimal API, but things start to get hairy (&lt;a href="https://github.com/DamianEdwards/MinimalApiPlayground/blob/main/src/Todo.Dapper/Program.cs"&gt;https://github.com/DamianEdwards/MinimalApiPlayground/blob/main/src/Todo.Dapper/Program.cs&lt;/a&gt;). Functionality by functionality you turn into a scrolling machine more and more - no good 😛. It means we need to organize code into manageable components/modules.&lt;/p&gt;

&lt;p&gt;Modular approach allows us to focus on cohesive units of functionality. Luckily, there is an awesome open source project - &lt;a href="https://github.com/CarterCommunity/Carter"&gt;Carter&lt;/a&gt;. It supports some essential missing features (Minimal API .NET 6) and one of them is module registration &lt;code&gt;ICarterModule&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MinimalAPI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Data.Sqlite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodosModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICarterModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;AddRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/todos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/todos/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/todos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/todos/{id}/mark-complete"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MarkComplete&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/todos/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DeleteTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SqliteConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QuerySingleOrDefaultAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"SELECT * FROM Todos WHERE Id = @id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SqliteConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM Todos"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;CreateTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SqliteConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QuerySingleAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"INSERT INTO Todos(Title, IsComplete) Values(@Title, @IsComplete) RETURNING * "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Created&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"/todos/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DeleteTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SqliteConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ExecuteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"DELETE FROM Todos WHERE Id = @id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NoContent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;MarkComplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SqliteConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ExecuteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"UPDATE Todos SET IsComplete = true WHERE Id = @Id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NoContent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Todo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;IsComplete&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡Tip: You can use &lt;em&gt;Method Group&lt;/em&gt; (C#) instead of lambda expression to avoid formatting issues and keep code clean. Also, it provides automatic endpoint metadata &lt;a href="https://github.com/dotnet/aspnetcore/issues/34540"&gt;aspnetcore#34540&lt;/a&gt;, that's cool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FROM&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/todos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SqliteConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM Todos"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// TO&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/todos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SqliteConnection&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM Todos"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To register modules you simply need to add two lines of code in &lt;code&gt;Program.cs&lt;/code&gt;. Modules are registered based on assemblies scanning and added to DI automatically, &lt;a href="https://github.com/CarterCommunity/Carter/blob/net6/src/Carter/CarterExtensions.cs"&gt;see&lt;/a&gt;. You can go even further and split Carter modules into separate assemblies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddCarter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapCarter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I recommend you to enhance your Minimal APIs with &lt;em&gt;Carter&lt;/em&gt; because it tries to close the gap between Minimal API and full-fledged ASP.NET MVC version. &lt;br&gt;
Go check out Carter on GitHub, &lt;a href="https://github.com/CarterCommunity/Carter"&gt;give them a Star&lt;/a&gt;, try it out!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high-cohesion"&gt;
  &lt;/a&gt;
  High cohesion
&lt;/h3&gt;

&lt;p&gt;Modules go well together with &lt;a href="https://jimmybogard.com/vertical-slice-architecture/"&gt;Vertical Slice Architecture&lt;/a&gt;. Simply start with &lt;code&gt;./Features&lt;/code&gt; folder and keep related models, services, factories, etc. together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Minimal API doesn't mean your application has to be small. In this blog post, I've shared some ideas on how to handle project complexity. Personally, I like this style and believe that one day Minimal API will be as much powerful as ASP.NET MVC.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hanselman.com/blog/carter-community-for-aspnet-core-means-enjoyable-web-apis-on-the-cutting-edge"&gt;https://www.hanselman.com/blog/carter-community-for-aspnet-core-means-enjoyable-web-apis-on-the-cutting-edge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CarterCommunity/Carter"&gt;https://github.com/CarterCommunity/Carter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AnthonyGiretti/aspnetcore-minimal-api"&gt;https://github.com/AnthonyGiretti/aspnetcore-minimal-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4ORO-KOufeU&amp;amp;ab_channel=NickChapsas"&gt;https://www.youtube.com/watch?v=4ORO-KOufeU&amp;amp;ab_channel=NickChapsas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bSJ5n7alhTs&amp;amp;ab_channel=dotNET"&gt;https://www.youtube.com/watch?v=bSJ5n7alhTs&amp;amp;ab_channel=dotNET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benfoster.io/blog/mvc-to-minimal-apis-aspnet-6/"&gt;https://benfoster.io/blog/mvc-to-minimal-apis-aspnet-6/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ploeh.dk/2011/07/28/CompositionRoot/"&gt;https://blog.ploeh.dk/2011/07/28/CompositionRoot/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>aspnetcore</category>
      <category>minimalapi</category>
    </item>
  </channel>
</rss>
