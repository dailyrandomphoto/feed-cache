<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>WAO: How do you release software?</title>
      <author>Nathan Kallman</author>
      <pubDate>Mon, 10 May 2021 18:00:47 +0000</pubDate>
      <link>https://dev.to/kallmanation/wao-how-do-you-release-software-56jm</link>
      <guid>https://dev.to/kallmanation/wao-how-do-you-release-software-56jm</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@michalmatlon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michal Matlon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/wrong-answer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#wrong-answers-only"&gt;
  &lt;/a&gt;
  Wrong Answers Only
&lt;/h1&gt;

&lt;p&gt;How do you release/deploy/package your software product (or service)?&lt;/p&gt;




&lt;p&gt;Comment your wrong answer!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>wronganswersonly</category>
    </item>
    <item>
      <title>Practicing Confidence for the Job Search</title>
      <author>Abbey Perini</author>
      <pubDate>Mon, 10 May 2021 17:54:37 +0000</pubDate>
      <link>https://dev.to/abbeyperini/practicing-confidence-for-the-job-search-38nj</link>
      <guid>https://dev.to/abbeyperini/practicing-confidence-for-the-job-search-38nj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#or-how-i-stopped-selfrejecting-and-embraced-selfpromotion"&gt;
  &lt;/a&gt;
  Or How I Stopped Self-Rejecting and Embraced Self-Promotion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWI2bTX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/315nalo5j30vfd8r5mri.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWI2bTX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/315nalo5j30vfd8r5mri.gif" alt="A gif of Moira Rose from Schitt's creek saying &amp;quot;one must champion oneself and say I am ready for this.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than anything else, this article is here to tell you that you should absolutely toot your own horn. Much like how everyone should discuss their salary but doesn't want to, promoting yourself to employers is an often uncomfortable necessity of getting a job and getting compensated fairly.&lt;/p&gt;

&lt;p&gt;Luckily, confidence is something you can practice. I'm not talking about "fake it 'til you make it." You'll need to find ways to inspire confidence in yourself independent of the job search. I recommend creating a daily practice of it, just like you would meditation.&lt;/p&gt;

&lt;p&gt;As always, please remember, a rejection usually has more to do with the hiring manager than you. It is probable that every interviewer you will ever speak to has not been trained in interviewing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practicing-confidence"&gt;
  &lt;/a&gt;
  Practicing Confidence
&lt;/h2&gt;

&lt;p&gt;Write it down - digitally or handwritten. Keep a wins folder with every message, email, photo, etc. that reminds you that you are good at doing things. You can also keep a daily gratitude log. In my case, I write down one thing I can celebrate about my day. Don't know where to start? Check out Julia Evans' &lt;a href="https://jvns.ca/blog/brag-documents/"&gt;brag documents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pick a goal - this one really depends on your personality. If you need smaller goals that you can check off, it might not be your main confidence builder. The productivity begets confidence begets productivity cycle can become a trap. I committed to "I will get a development role" after watching a Dolly Parton documentary where she stated that she knew she would make a music career happen before she even got to Nashville.&lt;/p&gt;

&lt;p&gt;Mantra - I'm a yoga teacher, so I love mantras. You can use mantras like "I am worthy" on a daily basis. Luvvie Ajayi Jones' book, Professional Troublemaker: The Fear-Fighter Manual, has instructions on how to write your own hype mantra, which will make you feel like a hero.&lt;/p&gt;

&lt;p&gt;Building things - I personally get a lot of my self-confidence from creating things. The one caveat I will give is that if you're job searching for a coding role, you probably want to build things without code in real life in your spare time to boost yourself up. Also, pick things that are bite sized and achievable. No need to stress yourself out with your hobbies too.&lt;/p&gt;

&lt;p&gt;Vision board - My vision board is on a wall near my desk. I represented future goals with pictures and included quotes and small craft projects to remind myself of the feeling I was trying to create within myself on a daily basis.&lt;br&gt;
Support network/hype person - Call your mom. Call your friends. Tweet a plea for help. Really lean on the people in your life when you need it. After a really tough rejection, sometimes the only thing that helped was my friends reminding me that they think I'm awesome.&lt;/p&gt;

&lt;p&gt;Rest and activities that refuel you - Exercise, yoga and meditation, outdoor hobbies, indoor hobbies, spending time with your family, friends and pets. Get away from the computer. Put a phone timer on your email and LinkedIn. Take it from me, you can't job search and practice coding 24/7 and it won't help you if you do.&lt;/p&gt;

&lt;p&gt;I also recommend finding networking groups of people with similar backgrounds going through the same job search - a little community goes a long way. Examples include &lt;a href="https://virtualcoffee.io"&gt;Virtual Coffee&lt;/a&gt;, &lt;a href="https://www.womenwhocode.com/"&gt;Women Who Code&lt;/a&gt;, and &lt;a href="https://www.blacksintechnology.net/"&gt;Blacks In Technology&lt;/a&gt;. Search online for more in your area and watch for recommendations on social media like LinkedIn and Twitter.&lt;/p&gt;

&lt;p&gt;Did I miss a way that you practice confidence or a networking group you love? Let me know with a comment below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-your-new-confidence"&gt;
  &lt;/a&gt;
  Applying your new confidence
&lt;/h2&gt;

&lt;p&gt;First, you need a couple go-to hits to get over that icky shameful feeling about self-promotion. It could be the summary statement at the top of your technical resume - what are 3 things you know you're good at? They can be soft skills or a tool, framework, or methodology that you're really comfortable using. Literally practice telling anyone that you're good at those things. Could be your spouse or friend, but you've gotta let them know that you are an excellent problem solver with mega Angular skills. Once it feels even slightly natural, you're ready to start applying it to the job search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-down-a-job-description"&gt;
  &lt;/a&gt;
  Breaking down a job description
&lt;/h2&gt;

&lt;p&gt;In my old role, I was responsible for reading a job description, pulling out the necessary information, and rewriting it so that when it was published on the internet, the recruiters would see the candidates with the best fit applying. Part of that was frequent calls with hiring managers to retool the original job description because the candidates submitted weren't what they were looking for. Here's how I flipped that for applying to jobs myself.&lt;/p&gt;

&lt;p&gt;The first thing I look at is the required requirements. Some companies will have a strict degree requirement. All of them will list a degree requirement. If I can speak to one bullet point in this section, I consider myself qualified to apply. &lt;/p&gt;

&lt;p&gt;If I can speak to a requirement like "experience with React," React becomes one of my keywords.&lt;/p&gt;

&lt;p&gt;Next I'll comb through preferred requirements, and if I can speak to one, I pull keywords from it as well. Then I'll look at the blurbs about the company and the role, to see if I can pull out any keywords from those. If there's not a descriptive blurb about the company and you want to go one step further, do research on their website, focusing especially on their listed goals, values, and mission statement.&lt;/p&gt;

&lt;p&gt;All of these keywords become jumping off points for explaining via a cover letter, resume, or interview question that you are the right person to hire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cover-letter%C2%A0"&gt;
  &lt;/a&gt;
  Cover letter 
&lt;/h2&gt;

&lt;p&gt;A caveat: I have seen people talk about tailoring their resume for each job they apply to. I cannot speak to the efficacy of cover letters or tailoring your resume, but here's how I wrote the cover letters I did bother to write. This could easily be applied to tailoring a resume.&lt;/p&gt;

&lt;p&gt;Make yourself a template to save yourself stress and the time it takes to consider your opening and closing lines. For some reason, every cover letter I wrote started with "I would relish the opportunity to discuss the [Software Developer] role in depth." Spend the rest of the cover letter telling your potential employer how your experience lines up with the keywords you pulled from the job description. For example, if my keywords were "Adobe Creative Suite" and "front-end development," I'd write "my portfolio has examples of my use of Adobe Create Suite in conjunction with my front-end development skills."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resume%C2%A0"&gt;
  &lt;/a&gt;
  Resume 
&lt;/h2&gt;

&lt;p&gt;There's lots of advice out there for writing an Applicant Tracking System (ATS) compatible resume, so I'm only going to speak about career changes and gaps.&lt;/p&gt;

&lt;p&gt;If you are changing careers, your experience in a different industry still applies. Especially if you've pulled some soft skill keywords from the job description and you can explain how you demonstrated them in your old role. However, years of professional experience are still years of professional experience. That alone shows that you are a reliable employee if nothing else. People have described my switch from recruiting admin to software developer as "a complete 180." I would say that role helped me hone many skills applicable to software development like keeping up with conflicting priorities, communicating professionally, and hunting down the answers I need when I have no idea where to start. Many of my interviewers agreed. &lt;/p&gt;

&lt;p&gt;If you're a stay at home parent returning to the workforce, come up with your story about it and start practicing it now. Include it in your resume with skills you currently use that can apply to a job. Include your volunteer work and any organizations you were a part of. Unfortunately, you will be asked inappropriate questions. Sometimes companies require an explanation for any gap as part of their onboarding if they have strict verification processes. "I chose to stay home and exclusively raise my children because it was the best option for my family, financially and otherwise" is a perfectly sufficient answer. More often, interviewers think it's ok to ask pointed, biased questions. It is perfectly fine for you to ask how those questions are relevant and only give your practiced explanation for the gap. In fact, biased assumptions about parenthood affecting your ability to work is probably a red flag about the company culture.&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
If you have a gap in employment for any other reason, you will have to practice an answer too. My gap was to get my yoga certification. When asked, I explained why I chose to pursue it when I did and why I chose to walk away from a yoga teacher career. I often describe how yoga helps me be a better person and employee. Just like with stay at home parents, if you don't want to explain in depth, "finding myself" is a perfectly acceptable answer. Some people know exactly what they want to do right off the bat and follow a linear career path. I don't think they are the majority.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-questions"&gt;
  &lt;/a&gt;
  Interview questions
&lt;/h2&gt;

&lt;p&gt;Practice your answers to questions you know you will be asked like "tell us a little about yourself." Practice working the keywords you pull from the job description and company site into your answers. The goal is to become comfortable describing yourself in a positive light when in an interview setting. Remember, you can always ask for a second to think or for your interviewer to repeat or clarify the question. Once you don't have to scramble for your answers to every single question, the pressure you feel walking into an interview is significantly lessened.&lt;/p&gt;

&lt;p&gt;Also, don't forget to practice confidence right before an interview! It's easy to give into the self-doubt monster 30 minutes before that zoom call, but once you break the cycle and remain calm through most of an interview, the job search gets that much easier.&lt;/p&gt;

&lt;p&gt;For developers looking for their first tech role, practice how to describe your learning process and saying "I don't know but here's how I would find out." You are also interviewing the company, and if they're only looking for someone that already knows all the answers, they're probably not going to find a candidate anytime soon and you don't want to work for them anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#networkingonline-presence"&gt;
  &lt;/a&gt;
  Networking/Online Presence
&lt;/h2&gt;

&lt;p&gt;Cold emailing/messaging is always awkward. Be nice and enthusiastic and don't be afraid to tell the person why you're contacting them, especially if it's because you think they're knowledgeable. You'll be surprised how many people love to hear you think they're an expert - they're probably not perfectly confident either!&lt;/p&gt;

&lt;p&gt;Share! Share! Share! You've got to practice your way out of that reticence to share. Tell everyone you know, "hey, I'm looking for a job right now." When you build or write a cool thing, share it on social media and show people! If you don't write, you could share your StackOverflow or Github. Explaining how your cool new app works to a layman, even if it's just your parents, will help you explain it in an interview.&lt;/p&gt;

&lt;p&gt;I did not feel 100% confident about the site and blog post I shared when I shared them, but they ended up being the catalyst that got me a job. Imperfect self-promotion will always win out over self-rejection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;References can be people you work with on coding projects. They don't have to be a former co-worker, so you can ask anyone you've worked with on an open source or volunteer project. Unless the company specifies that they want professional reference, they don't have to be someone you have worked with at all. I would avoid family members, but I've used friends as references plenty of times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now I hope you'll see a job description or interview as an opportunity to show your strengths rather than opportunities to fail. A job description should be a tool for you to use to show another human who happens to be your interviewer that you can most certainly hit the ground running if they hire you. A cover letter, thank you note, resume, or online presence should be full of shameless self-promotion.&lt;/p&gt;

&lt;p&gt;6 months ago, I would not have described myself as a confident person. The people who have met me in the last few months would disagree. All I did was commit to practicing confidence over self-rejection and self-doubt. Just like a meditation practice, the idea is to practice enough that confidence becomes a tool you can lean on when your brain wants to doubt you. There is something that makes you unique and a great person to hire. Tell everyone about it.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>career</category>
      <category>womenintech</category>
      <category>technology</category>
    </item>
    <item>
      <title>Modular Ducks - A design pattern for scalable redux architecture</title>
      <author>Ashish Ranjan</author>
      <pubDate>Mon, 10 May 2021 17:30:29 +0000</pubDate>
      <link>https://dev.to/code_ashish/modular-ducks-a-design-pattern-for-scalable-redux-architecture-4dna</link>
      <guid>https://dev.to/code_ashish/modular-ducks-a-design-pattern-for-scalable-redux-architecture-4dna</guid>
      <description>&lt;p&gt;I have worked with many different redux patterns and architectures, and I have found that none of them were perfectly ideal. The duck's pattern is prone to a circular dependency. The traditional folder-based approach requires you to separate action, reducers, selectors, etc into multiple files that can be cumbersome while making changes. &lt;br&gt;
&lt;a href="https://redux-toolkit.js.org/"&gt;Redux toolkit&lt;/a&gt; provides an opinionated wrapper around redux and lets us do more with less code. But the issue with the Redux toolkit is that the project structure becomes similar to ducks and is prone to a circular dependency. Redux toolkit has already warned us of this issue &lt;a href="https://redux-toolkit.js.org/usage/usage-guide#exporting-and-using-slices"&gt;here&lt;/a&gt;. &lt;br&gt;
In this article, I am trying to explain my architecture with the Redux toolkit which is circular dependency safe, and also handles refactoring with ease. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Slices&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Break your redux store based on the features of the app. With the Redux toolkit, we can use the &lt;code&gt;createSlice&lt;/code&gt; API to create actions, reducers, and selectors for an individual slice. &lt;/li&gt;
&lt;li&gt;One thing to keep in mind is no two slices should import from one another. There can be a case when we might have to trigger reducers in two slices based on one action. In that case, instead of importing action from one slice to another, create a common action using &lt;code&gt;createAction and this action will be registered in both the slices with&lt;/code&gt;extraReducers.&lt;/li&gt;
&lt;li&gt;Export the constant key from this file, to be used in `combine reducers to combine the reducers. Keeping the constant key in the slice file makes the store structure more predictable.&lt;/li&gt;
&lt;li&gt; Keep all the selectors for keys of a slice file in their respective slice file. &lt;code&gt;createGlobalStateSelector&lt;/code&gt; is a &lt;a href="//npmjs.com/package/create-global-state-selector"&gt;tiny npm library&lt;/a&gt; to generate global state selectors from the local slice selectors. This eases the refactoring effort by quite a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Common Actions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Based on the project structure we can have multiple common action files.&lt;/li&gt;
&lt;li&gt;Common action files should not import from any other file in the project directory.&lt;/li&gt;
&lt;li&gt;Common actions can be used inside slices, thunks, and our components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Common Selectors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just like common actions, we might need selectors from different slices to combine them into one selector (e.g. &lt;code&gt;createSelector&lt;/code&gt; from reselect).&lt;/li&gt;
&lt;li&gt;Keeping combined selectors of two different slices outside the slice file in a different slice file, removes the circular dependency issue.&lt;/li&gt;
&lt;li&gt;Common selectors file will import from slices file and will be used inside thunks and components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thunks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thunk actions (or any redux middleware functions) should not be kept in a slice file. Thunks have access to the global state and it might have to dispatch action for some other slice.&lt;/li&gt;
&lt;li&gt;You can create multiple files for thunk actions (it is always better to have multiple files than having one giant file). This can also be divided based on the features.&lt;/li&gt;
&lt;li&gt;Thunk action files can import from slice files (actions and selectors), common action files, and common selectors. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#import-diagram"&gt;
  &lt;/a&gt;
  Import diagram
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WU38_061--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afv23dd2964ri4rpsxsy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WU38_061--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afv23dd2964ri4rpsxsy.jpeg" alt="redux import diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// personalDetailsSlice.js

import { createSlice } from '@reduxjs/toolkit';
import createGlobalStateSelector from 'create-global-state-selector';
import { clearData } from './commonActions';

export const sliceKey = 'personalDetails';
const initialState = {
  name: 'Ashish',
  age: '26',
  isEligibleToDrink: false
};

const { actions, reducer } = createSlice({
  name: sliceKey,
  initialState,
  reducers: {
    setName(state, { payload }) {
      state.name = payload;
    },
    setAge(state, { payload }) {
      state.age = payload;
    },
    setDrinkingEligibilityBasedOnAge(state) {
      state.isEligibleToDrink = selectLocalAge(state) &amp;gt;= 18;
    }
  },
  extraReducers: {
    [clearData]: (state) =&amp;gt; {
      state.isEligibleToDrink = null;
      state.age = null;
      state.name = null;
    }
  }
});

function selectLocalName(state) {
  return state.name;
}
function selectLocalAge(state) {
  return state.age;
}
function selectLocalIsEligibleToDrink(state) {
  return state.isEligibleToDrink;
}

export default reducer;
export const { setName, setAge, setDrinkingEligibilityBasedOnAge } = actions;

export const { selectName, selectAge, selectIsEligibleToDrink } = createGlobalStateSelector(
  {
    selectName: selectLocalName,
    selectAge: selectLocalAge,
    selectIsEligibleToDrink: selectLocalIsEligibleToDrink
  },
  sliceKey
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// educationalDetailsSlice.js

import { createSlice } from '@reduxjs/toolkit';
import createGlobalStateSelector from 'create-global-state-selector';
import { clearData } from './commonActions';

export const sliceKey = 'educationalDetails';
const initialState = {
  qualification: 'engineering'
};

const { actions, reducer } = createSlice({
  name: sliceKey,
  initialState,
  reducers: {
    setQualification(state, { payload }) {
      state.qualification = payload;
    }
  },
  extraReducers: {
    [clearData]: (state) =&amp;gt; {
      state.qualification = null;
    }
  }
});

function selectLocalQualification(state) {
  return state.qualification;
}

export default reducer;
export const { setQualification } = actions;

export const { selectQualification } = createGlobalStateSelector(
  { selectQualification: selectLocalQualification },
  sliceKey
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// commonActions.js

import { createAction } from '@reduxjs/toolkit';

export const clearData = createAction('detail/clear');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// commonSelectors.js

import { createSelector } from '@reduxjs/toolkit';
import { selectAge } from './personalDetailsSlice';
import { selectQualification } from './educationalDetailsSlice';

export const selectIsEligibleToWork = createSelector(
  selectAge,
  selectQualification,
  (age, qualification) =&amp;gt; age &amp;gt;= 18 &amp;amp;&amp;amp; qualification === 'engineering'
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// thunks.js

import { fetchQualification } from './api';
import { selectName } from './personalDetailsSlice';
import { setQualification } from './educationalDetailsSlice';
import { clearData } from './commonActions';

export const getQualification = () =&amp;gt; (dispatch, getState) =&amp;gt; {
  const state = getState();
  const name = selectName(state);
  fetchQualification(name)
    .then(({ qualification }) =&amp;gt; dispatch(setQualification(qualification)))
    .catch(() =&amp;gt; dispatch(clearData()));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// store.js

import { createStore, combineReducers } from 'redux';
import personalDetailsReducer, { sliceKey as personalDetailsSliceKey } from './personalDetailsSlice';
import educationalDetailsSlice, { sliceKey as educationalDetailsSliceKey } from './educationalDetailsSlice';

const reducer = combineReducers({


});
const store = createStore(reducer);
export default store;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The above example can scale well for large-scale projects. If you worried about the import rules, check out the &lt;a href="https://www.npmjs.com/package/dependency-cruiser"&gt;Dependency cruiser&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Do share with us your way of creating a modular and scalable redux structure.&lt;br&gt;
If you're confused about anything related to this topic or have any questions. please comment below or reach out to me on Twitter &lt;a href="https://twitter.com/code_ashish"&gt;@code_ashish&lt;/a&gt;. 🙂&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks For Reading 😃
&lt;/h3&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Part 3: Get started with the Go Programming Language with Microsoft Learn! (no experience needed) </title>
      <author>Michael Crump</author>
      <pubDate>Mon, 10 May 2021 17:20:57 +0000</pubDate>
      <link>https://dev.to/azure/part-3-get-started-with-the-go-programming-language-with-microsoft-learn-no-experience-needed-2in7</link>
      <guid>https://dev.to/azure/part-3-get-started-with-the-go-programming-language-with-microsoft-learn-no-experience-needed-2in7</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;I'm back again with part 3 of this Go Lang series. I was always wanting to learn more about it but never dedicated the time. Fast-forward to today and I'm learning it live on my Twitch stream using &lt;a href="https://learn.microsoft.com"&gt;Microsoft Learn's&lt;/a&gt; free, online training platform. &lt;/p&gt;

&lt;p&gt;Follow along with the &lt;a href="https://docs.microsoft.com/en-us/learn/modules/go-control-flow/"&gt;MS Learn Module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this lesson, We cover how to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work with simple and compound if statements.&lt;/li&gt;
&lt;li&gt;Learn about switch statements and their features.&lt;/li&gt;
&lt;li&gt;Learn about loop statements and how Go creates them by using the for keyword.&lt;/li&gt;
&lt;li&gt;Learn about essential error-handling functions like defer, panic, and recover.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Video (19 mins)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MRavAhhge2w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Feel free to checkout my &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch streams&lt;/a&gt; as we learn about security and app development or you can watch the condensed version of all of my streams by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>opensource</category>
      <category>go</category>
    </item>
    <item>
      <title>Components are Pure Overhead</title>
      <author>Ryan Carniato</author>
      <pubDate>Mon, 10 May 2021 17:13:15 +0000</pubDate>
      <link>https://dev.to/this-is-learning/components-are-pure-overhead-hpm</link>
      <guid>https://dev.to/this-is-learning/components-are-pure-overhead-hpm</guid>
      <description>&lt;p&gt;A couple of years ago in the &lt;a href="https://betterprogramming.pub/the-real-cost-of-ui-components-6d2da4aba205"&gt;The Real Cost of UI Components&lt;/a&gt;, I explored the cost of components in JavaScript frameworks. I asked whether components were just overhead?&lt;/p&gt;

&lt;p&gt;And the answer was: it depends. The Virtual DOM library I tested, &lt;a href="https://github.com/localvoid/ivi"&gt;ivi&lt;/a&gt;, had no issues handling more components. But &lt;a href="https://lit.dev/"&gt;Lit&lt;/a&gt; and &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; were dramatically worse. They scaled back to almost &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; levels of performance as I broke them down to more components. All their non-VDOM performance benefits basically disappeared.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lsPYl5fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tse1znblcj62smmhyroe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsPYl5fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tse1znblcj62smmhyroe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The versions scale from "0" having the least number of components, through "1" which has a component per row, to "2" where each &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; is wrapped in a component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luckily for both of those frameworks, almost all benchmarks can be written as a single component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But when was the last time you wrote an app in a single component?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In their defense, 50,000 components on a page is a bit much. But this still illuminates an inevitable shortcoming we need to overcome. 2 years later I still stand by the conclusion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So I’m going to make a bold statement here for the Non-Virtual DOM crowd. I think Components should vanish in the same way as Frameworks. If the new world is compilers, we can do better. We can optimize along bundle chunk lines instead of ES modules. If Components are throw away think about how much overhead we could reduce by inlining them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But I've come to realize there is much more to this than performance.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#your-framework-is-pure-overhead"&gt;
  &lt;/a&gt;
  Your Framework is Pure Overhead
&lt;/h1&gt;

&lt;p&gt;This is not an appeal to the Vanilla JavaScript purists that lurk in the comments section on every site. Instead this an honest look at JavaScript frameworks from someone that builds them.&lt;/p&gt;

&lt;p&gt;When one says the &lt;a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead"&gt;Virtual DOM is pure overhead&lt;/a&gt; they are often referring to unnecessary object creation and diffing. And Rich Harris, creator of Svelte, covers this topic well.&lt;/p&gt;

&lt;p&gt;Of course, as shown above, there are Virtual DOM libraries faster than Svelte, so what gives?&lt;/p&gt;

&lt;p&gt;Consider this example from the article:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MoreRealisticComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Selected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nothing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSelected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The criticism is that on any state update a VDOM is forced to re-render everything. Only change your selection, but you still recreate the whole list again. However, most performant VDOM libraries can recognize that most of these VDOM nodes never change and cache them rather than recreate them each render.&lt;/p&gt;

&lt;p&gt;But more importantly, there is a solution to isolate updates that every React developer knows. No, it's not &lt;code&gt;useMemo&lt;/code&gt;. Create a child component.&lt;/p&gt;

&lt;p&gt;For the cost of almost nothing, a VDOM library can stop update propagation by wrapping this logic in a different component. A simple referential check of properties will tell it when to re-render. Unsurprisingly the VDOM can be pretty performant.&lt;/p&gt;

&lt;p&gt;Speaking of &lt;code&gt;useMemo&lt;/code&gt; some recent attention brought to the fact that &lt;a href="https://overreacted.io/before-you-memo/"&gt;it probably shouldn't the be the first thing you reach for&lt;/a&gt;. However, reactive libraries tend to memoize by default.&lt;/p&gt;

&lt;p&gt;In React or any other VDOM library when you want to break out of the update cycle structurally, you split out components and lift state. To improve initial render performance with a library like Svelte, you do the opposite and remove as many intermediate components as possible. &lt;/p&gt;

&lt;p&gt;Why? Because each component is a separate reactive scope. Often this means more than just creating the reactive scope. There is overhead to synchronizing updates between them. This is all corroborated by the benchmark at the beginning of the article.&lt;/p&gt;

&lt;p&gt;While we were busy focusing on how VDOM libraries do all this potentially unnecessary work, we weren't paying attention to our reactive libraries doing all this unnecessary memoization. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;So yes, your Reactive library is pure overhead too.&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#component-dx-gt-performance"&gt;
  &lt;/a&gt;
  Component DX &amp;gt; Performance
&lt;/h1&gt;

&lt;p&gt;When I look at both approaches I see the same problem. The way we structure Components has too much say in how our applications perform. This is a problem.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A component's purpose is more than just performance. The way our components are structured directly impacts the maintainability of our code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you have too few components you end up duplicating logic. The typical component has state and a view. The more complicated the control flow you have and the more nested state is, the more you will find the need to duplicate that logic in both. When a new requirement arises, as simple as say toggling visibility, you find yourself creating that same conditional in multiple places.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headerText&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;headerText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;How many different places are we doing additional checks due to &lt;code&gt;props.enabled&lt;/code&gt;? Can you find all 4? This isn't React specific. Equivalent code in Svelte touches 3 locations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conversely breaking things up into too many components leads to heavy coupling. Too many props to pass. This is often referred to as &lt;a href="https://kentcdodds.com/blog/prop-drilling"&gt;prop drilling&lt;/a&gt;. The indirection can make changing the shape of that state surprisingly complicated. There is potential to continue to pass down props no longer used, to pass down too few that get swallowed by default props, and for tracing to be further obscured by renaming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt; &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SwitchMessage&lt;/span&gt; &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SwitchButton&lt;/span&gt; &lt;span class="na"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SwitchMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The button is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SwitchButton&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#vanishing-components"&gt;
  &lt;/a&gt;
  Vanishing Components
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXkKPfuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpb41pm3auokrqf8fdq0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXkKPfuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpb41pm3auokrqf8fdq0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The future is in primitives. Primitives that are smaller than Components. Things like you find today in reactive systems. Things that might look like what you see in React Hooks and Svelte. With one exception. They are not tied to the component that creates them.&lt;/p&gt;

&lt;p&gt;The power of fine-grained reactivity and the reason for &lt;a href="https://github.com/solidui/solid"&gt;Solid&lt;/a&gt;'s unmatched performance are not fine-grained updates.  Too expensive at creation time. The real potential is that our updates are not tied to our components. And that goes beyond one implementation of the idea.&lt;/p&gt;

&lt;p&gt;Between reactive models and these hooks, we have converged a language for change: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;State&lt;/code&gt; -&amp;gt; &lt;code&gt;Memo&lt;/code&gt; -&amp;gt; &lt;code&gt;Effect&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or, if you prefer, &lt;code&gt;Signal&lt;/code&gt; -&amp;gt; &lt;code&gt;Derivation&lt;/code&gt; -&amp;gt; &lt;code&gt;Reaction&lt;/code&gt;. We don't need components anymore to describe our updates. This is the mismatch React developers intuitively feel with Hooks. Why do we need to keep track of both our components re-rendering and the closures over our Hooks?&lt;/p&gt;

&lt;p&gt;And typical Single File Components(SFCs) are just the opposite extreme where we are still imposing (unnecessary) boundaries by technology. Ever wonder why there is friction between JavaScript frameworks and Web Components? Too much conflated on a single concept.&lt;/p&gt;

&lt;p&gt;Every time we write a component there is this mental overhead on how we should structure our code. The choice doesn't feel our own. But it doesn't have to be that way.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-future-is-componentless"&gt;
  &lt;/a&gt;
  The Future is Component-less
&lt;/h1&gt;

&lt;p&gt;Not that we won't write re-usable components or templates. Just components will vanish, removing their impact on the output. That doesn't require a compiler to start. We can move to make components no heavier than a simple function call. That is essentially &lt;a href="https://github.com/solidui/solid"&gt;Solid&lt;/a&gt;, but that is only one way to attack this.&lt;/p&gt;

&lt;p&gt;We don't need separation to accomplish this either. It is unnecessary to hoist all our state into a state management tool playing puppeteer to our renderer. I'm proposing aggressive co-location. Modern frameworks have that right. Whether JSX or SFC we've been pulling it together and should continue to.&lt;/p&gt;

&lt;p&gt;Ultimately, if a compiler could look beyond the current file it was processing to use language to understand your whole app, think of the doors that would open. Our logic and control flows could solely define the boundaries. That's not just unlocking levels of performance, but freeing ourselves of the mental burden of ever worrying about this again.&lt;/p&gt;

&lt;p&gt;Wouldn't it be amazing to recapture the pure declarative nature of something like HTML in authoring our sites and applications? The unadulterated cut and paste bliss? I'm not certain where this goes, but it starts here.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>svelte</category>
    </item>
    <item>
      <title>365 Days of Blogging Challenge (or I transfer $1000 to your bank account)</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Mon, 10 May 2021 17:02:55 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9</link>
      <guid>https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9</guid>
      <description>&lt;p&gt;Everyone sometimes struggles with consistency. Do you want to develop a good habit but often fail after a few days? Well, &lt;strong&gt;you are not alone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To help myself with that (and possibly you), I come up with the idea of making a &lt;strong&gt;public commitment&lt;/strong&gt; and finding &lt;strong&gt;accountability partners&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public-commitment"&gt;
  &lt;/a&gt;
  Public commitment
&lt;/h3&gt;

&lt;p&gt;This post is my public commitment to writing and publishing articles daily for the next 365 days. It's well over any magic number you hear that is necessary to form a habit. For my liking, it's fair enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accountability-partners"&gt;
  &lt;/a&gt;
  Accountability partners
&lt;/h3&gt;

&lt;p&gt;To hold myself accountable (and to make you more interested in helping me stay consistent), &lt;strong&gt;I declare that I'll pay $1000 to one of my accountability partners&lt;/strong&gt; (by whom I mean anyone who comments on this post on dev.to) &lt;strong&gt;if I miss a day in publishing articles in the next year&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-rules"&gt;
  &lt;/a&gt;
  The rules
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;One article a day published, no excuses.&lt;/li&gt;
&lt;li&gt;No article published - a script chooses a random person from the comments section to transfer money to their bank account.&lt;/li&gt;
&lt;li&gt;The way of choosing a random person may change with time - I want to make it automated and public, to provide transparency and fairness (and to prove I'm taking it seriously!). Feel free to propose your ideas on how to approach this problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#join-me-in-the-challenge"&gt;
  &lt;/a&gt;
  Join me in the challenge
&lt;/h3&gt;

&lt;p&gt;I encourage all of you who want to develop a good habit of putting yourself out there to join the challenge. &lt;/p&gt;

&lt;p&gt;Of course, your numbers may be different. Maybe your goal is to publish just one article a week. Maybe $1000 is too much or too little to make you feel uncomfortable. &lt;/p&gt;

&lt;p&gt;Choose your perfect numbers and join me in the challenge!  If you struggle with this, &lt;a href="https://twitter.com/PJeziorowski"&gt;DM me on Twitter&lt;/a&gt;, and I'll do my best to help you come up with numbers that will work for you.&lt;/p&gt;

&lt;p&gt;And please, let me know what you think about this idea. Feedback highly appreciated!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Use Twitter to say Thank You!</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Mon, 10 May 2021 16:58:20 +0000</pubDate>
      <link>https://dev.to/jmfayard/use-twitter-to-say-thank-you-2f2j</link>
      <guid>https://dev.to/jmfayard/use-twitter-to-say-thank-you-2f2j</guid>
      <description>&lt;p&gt;The internet could use more gratitude: next time a blog post, GitHub project, podcast episode or YouTube video helps you, write a "Thank You" tweet to its content creator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-follow-me-on-twitter"&gt;
  &lt;/a&gt;
  Don't follow me on Twitter
&lt;/h2&gt;

&lt;p&gt;I am &lt;a href="https://twitter.com/jm_fayard/"&gt;@jm_fayard&lt;/a&gt; on Twitter, but don't follow me there, I have nothing new and interesting that fits in 140 characters.&lt;/p&gt;

&lt;p&gt;I have a love-hate relationship with Twitter: I spend more time there than I wished, I hate how it tends to make me angry and feel powerless, especially when I already feel down. Twitter gives a megaphone to Nazis and white supremacist to maximize user engagement and make its investors happy. It helps jerks to spend time harassing women. For much more on this topic, there is a wonderful book by Mike Montero called &lt;a href="https://www.amazon.com/Ruined-Design-Designers-Destroyed-World-ebook/dp/B07PS16XY9/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr="&gt;Ruined by Design: How Designers Destroyed the World, and What We Can Do to Fix It&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The counter-argument is that Twitter is just tool, that people can use wisely or badly.&lt;/p&gt;

&lt;p&gt;It's in part true, we do have a choice - for example to use it to express gratitude - but it's misleading because it's incomplete: Melvin Kranzberg's law of technology reminds us that the way we design our tools does matter,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Technology is neither good nor bad; nor is it neutral.&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Melvin_Kranzberg"&gt;Melvin Kranzberg&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conversations do not get better when thought is split in tiny bites, and attention is diverted by vanity metrics:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMlgpqh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117564975-43e86080-b0af-11eb-9abd-e5fa9cb8cfbe.png" class="article-body-image-wrapper"&gt;&lt;img alt="Experts say water is wet" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMlgpqh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117564975-43e86080-b0af-11eb-9abd-e5fa9cb8cfbe.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install the browser extension &lt;a href="https://bengrosser.com/projects/twitter-demetricator/"&gt;Twitter Demetricator&lt;/a&gt; and see how different it feels!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qFg_AXQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117564995-69756a00-b0af-11eb-9775-94102c1c398d.png" class="article-body-image-wrapper"&gt;&lt;img alt="Experts say water is wet" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qFg_AXQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117564995-69756a00-b0af-11eb-9775-94102c1c398d.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That being said, I have found a very satisfying use of Twitter. Not promoting my content, I genuinely dislike doing so - and I'm happy that DEV does it for me - but to say thank you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-twitter-to-say-thank-you"&gt;
  &lt;/a&gt;
  Use Twitter to say thank you
&lt;/h2&gt;

&lt;p&gt;Content creators don't get a lot of feedback that the work where they have put hard work was useful to someone. They got statistics about views and stuff, but that's not the same thing. Nothing beats a direct communication between two human beings.&lt;/p&gt;

&lt;p&gt;That's why it's such a simple and powerful hack: next time you find a blog post, a GitHub project, a podcast episode or a YouTube video that gave you a ton of value, find the Twitter handle of its creator and tell them &lt;em&gt;urbi and orbi&lt;/em&gt; that their work was meaningful to you!&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lkN8693J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565033-94f85480-b0af-11eb-932d-dfd4518960ef.png" class="article-body-image-wrapper"&gt;&lt;img alt="Thank you Kodein Koders" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkN8693J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565033-94f85480-b0af-11eb-932d-dfd4518960ef.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WciwnWDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565063-ba855e00-b0af-11eb-93bc-f88328049a82.png" class="article-body-image-wrapper"&gt;&lt;img alt="Thank you for your articles on Kotlin Native" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WciwnWDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565063-ba855e00-b0af-11eb-93bc-f88328049a82.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj1LKIgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565082-d38e0f00-b0af-11eb-96cf-a2c4edd72073.png" class="article-body-image-wrapper"&gt;&lt;img alt="Thank you" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj1LKIgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565082-d38e0f00-b0af-11eb-96cf-a2c4edd72073.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best part is that you don't have to care about metrics and reach. &lt;/p&gt;

&lt;p&gt;You will reach the content creator, and there is a high probability that she will be happy:&lt;/p&gt;

&lt;p&gt;See:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tViyDVBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565100-e99bcf80-b0af-11eb-9752-4f86b774a1a5.png" class="article-body-image-wrapper"&gt;&lt;img alt="Thank You - reply" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tViyDVBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565100-e99bcf80-b0af-11eb-9752-4f86b774a1a5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVRGwnNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565242-7c3c6e80-b0b0-11eb-915b-5aab39e7ea27.png" class="article-body-image-wrapper"&gt;&lt;img alt="Thank you reply" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVRGwnNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117565242-7c3c6e80-b0b0-11eb-915b-5aab39e7ea27.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#see-also"&gt;
  &lt;/a&gt;
  See also
&lt;/h2&gt;

&lt;p&gt;I enjoyed this article from &lt;a class="mentioned-user" href="https://dev.to/annajmcdougall"&gt;@annajmcdougall&lt;/a&gt;
 that teaches a skill crucial to spread joy around you: giving good compliments&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/annajmcdougall" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dChAXKCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--igVbxxeh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/442480/55f5ee59-cf98-4562-a41a-a3e9de03500d.jpg" alt="annajmcdougall image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/annajmcdougall/how-to-give-good-compliments-4ggl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Give Good Compliments&lt;/h2&gt;
      &lt;h3&gt;Anna J McDougall ・ Oct 26 '20 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#psychology&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#socialskills&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#selfimprovement&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>watercooler</category>
      <category>gratitude</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>Why are you using 'git pull' ?</title>
      <author>Nick Groos</author>
      <pubDate>Mon, 10 May 2021 16:54:11 +0000</pubDate>
      <link>https://dev.to/groos/why-are-you-using-git-pull-1p8i</link>
      <guid>https://dev.to/groos/why-are-you-using-git-pull-1p8i</guid>
      <description>&lt;p&gt;I have noticed that for whatever reason, new developers love to use &lt;code&gt;git pull&lt;/code&gt; for merging code. To get latest from another branch, they will do something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Switch to the other branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git pull&lt;/code&gt; the latest code for that branch&lt;/li&gt;
&lt;li&gt;Switch back to the working branch&lt;/li&gt;
&lt;li&gt;Merge the freshly pulled code into the working branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, &lt;code&gt;git pull&lt;/code&gt; can get the job done. And developers will go months or years unaware of the much more nimble &lt;code&gt;git fetch&lt;/code&gt;.  &lt;/p&gt;




&lt;p&gt;The problem is that the steps above require us to switch branches, a slow git operation, &lt;em&gt;two times&lt;/em&gt;. We can achieve the same outcome without switching branches by using &lt;code&gt;git fetch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch origin develop
git merge origin/develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have the latest from /develop into our current working branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The seemingly small efficiency gained from a workflow that uses &lt;code&gt;git fetch&lt;/code&gt; instead of &lt;code&gt;git pull&lt;/code&gt; will result in hours of saved time over the course of a project.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;For more context I recommend &lt;a href="https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch"&gt;this discussion about 'git fetch' vs 'git-pull'&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Displaying the active Amplify Environment alongside the current Git branch</title>
      <author>siegerts</author>
      <pubDate>Mon, 10 May 2021 16:50:10 +0000</pubDate>
      <link>https://dev.to/siegerts/displaying-the-active-amplify-environment-alongside-the-current-git-branch-4hmg</link>
      <guid>https://dev.to/siegerts/displaying-the-active-amplify-environment-alongside-the-current-git-branch-4hmg</guid>
      <description>&lt;p&gt;Working with a lot of Git branches can get a bit tricky when they align to different &lt;a href="https://docs.amplify.aws/cli/teams/overview"&gt;Amplify environments&lt;/a&gt;. I usually find myself checking &lt;code&gt;amplify status&lt;/code&gt; or &lt;code&gt;amplify env list&lt;/code&gt; to determine the active environment. Below is an approach that is a bit more dynamic and similar to what Git and Python virtual environments show while working in the terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;You'll need to have the below installed for the function to take effect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt; - used to determine the root directory of your Amplify project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stedolan.github.io/jq/download/"&gt;jq&lt;/a&gt; - helps with parsing JSON&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ohmyz.sh/"&gt;oh-my-zsh&lt;/a&gt; - managing terminal functions and themes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#display-the-active-amplify-raw-env-endraw-"&gt;
  &lt;/a&gt;
  Display the active Amplify &lt;code&gt;env&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Add the below into your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;. The output of the function can be adjusted depending on how you'd like to display the information. I display mine to the left of the current working directory by adjusting my zsh custom theme (below). This puts the environment name in a similar spot to where an active Python virtual environment name will show.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .zshrc&lt;/span&gt;

amplify_env &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git rev-parse &lt;span class="nt"&gt;--show-toplevel&lt;/span&gt; 2&amp;gt;/dev/null&lt;span class="si"&gt;)&lt;/span&gt; 

    &lt;span class="nv"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT_DIR&lt;/span&gt;/amplify/.config/local-env-info.json 

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;env_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$ENV&lt;/span&gt; | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;".envName"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; 
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"(🚀 &lt;/span&gt;&lt;span class="nv"&gt;$env_info&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function checks for the current working environment name in the &lt;code&gt;&amp;lt;project&amp;gt;/amplify/.config/local-env-info.json&lt;/code&gt; file. This approach requires a few extra steps but is quicker than re-computing on each terminal input using the &lt;code&gt;amplify status&lt;/code&gt; CLI command. &lt;/p&gt;

&lt;p&gt;After re-sourcing your &lt;code&gt;.zshrc&lt;/code&gt; (below), the environment function can be invoked by running &lt;code&gt;amplify_env&lt;/code&gt; in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-to-a-custom-theme"&gt;
  &lt;/a&gt;
  Adding to a custom theme
&lt;/h3&gt;

&lt;p&gt;If you're using &lt;code&gt;oh-my-zsh&lt;/code&gt;, then you can adjust your theme (or any theme) to add the output of the function so that it shows in the terminal prompts. The updated &lt;code&gt;PROMPT&lt;/code&gt; below now includes the Amplify environment function output (&lt;code&gt;${amplify_env}&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; ~/.oh-my-zsh/custom/themes/&amp;lt;my-custom-theme&amp;gt;.zsh-theme

- PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} '
&lt;span class="gi"&gt;+ PROMPT='$(amplify_env) ${ret_status} %{$fg[cyan]%}%c%{$reset_color%} '
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#amplify-raw-env-endraw-git-branch-"&gt;
  &lt;/a&gt;
  Amplify &lt;code&gt;env&lt;/code&gt; + Git branch = 🔥
&lt;/h3&gt;

&lt;p&gt;Now the environment is displayed alongside the Git branch that is active. This is a nice way to quickly determine if I need to switch branches or environments to match.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deGtjcSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5ubwg353cyb5ni0p00d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deGtjcSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5ubwg353cyb5ni0p00d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully that helps keep your Amplify environments visually in sync with your current Git branch 🌲.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>environments</category>
      <category>serverless</category>
    </item>
    <item>
      <title>What's new in LoadRunner Professional 2021 R1?</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Mon, 10 May 2021 16:46:06 +0000</pubDate>
      <link>https://dev.to/qainsights/what-s-new-in-loadrunner-professional-2021-r1-l07</link>
      <guid>https://dev.to/qainsights/what-s-new-in-loadrunner-professional-2021-r1-l07</guid>
      <description>&lt;p&gt;As you know, I publish &lt;a href="https://qainsights.com/whats-new-in-microfocus-loadrunner-professional-2021/" rel="noreferrer noopener"&gt;what's new in Micro Focus LoadRunner&lt;/a&gt; from past many years. This time as well, it is business as usual for LoadRunner What's New section. Last week, Micro Focus announced its first minor release for their performance testing solutions. In this blog, we are going to see what's new in LoadRunner Professional 2021 R1.&lt;/p&gt;

&lt;h2&gt;Say Hello to LoadRunner Professional 2021 R1&lt;/h2&gt;

&lt;p&gt;Micro Focus follows &lt;a href="https://calver.org" rel="noreferrer noopener nofollow"&gt;CalVer &lt;/a&gt;nomenclature for its products. Last year the nomenclature was Service Pack name, but this year it started following Release number. This minor release is called LoadRunner Professional 2021 R1. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/05/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2eX8ZB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/05/image-5.png" alt="What's new in LoadRunner Professional 2021 R1?"&gt;&lt;/a&gt;What's new in LoadRunner Professional 2021 R1?&lt;/p&gt;

&lt;h2&gt;What's new in LoadRunner Professional 2021 R1?&lt;/h2&gt;

&lt;h3&gt;DevWeb Protocol&lt;/h3&gt;

&lt;p&gt;Full code completion is now available in this patch for DevWeb. Auto completion expedites the process of scripting and debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/05/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1tt8g9Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/05/image.png" alt="Auto Complete in DevWeb"&gt;&lt;/a&gt;Auto Complete in DevWeb&lt;/p&gt;

&lt;p&gt;Now you can generate CA certificate to capture the HTTPS traffic. You can make use DevWebUtils.exe and generate the required certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/05/image-1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLCtbFNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/05/image-1-1024x138.png" alt="DevWeb CA Certificate Generation"&gt;&lt;/a&gt;DevWeb CA Certificate Generation&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;General Settings&lt;/strong&gt; under &lt;strong&gt;Recording Options&lt;/strong&gt;, now it is possible to &lt;strong&gt;generate cookies&lt;/strong&gt; and &lt;strong&gt;asynchronous WebRequest &lt;/strong&gt;steps. Also, you can configure the &lt;strong&gt;Charset &lt;/strong&gt;which  defaults to utf-8.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/05/image-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8uvhqVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/05/image-2.png" alt="DevWeb Settings"&gt;&lt;/a&gt;DevWeb Settings&lt;/p&gt;

&lt;p&gt;LoadRunner Developer is now supported on macOS 11 (Big Sur). DevWeb now supports for server-streaming gRPC requests.&lt;/p&gt;

&lt;h3 id="h-web-http-htmlprotocol"&gt;Web HTTP/HTMLProtocol&lt;/h3&gt;

&lt;p&gt;A small change in the Find and Replace user interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/05/image-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygBZ2XjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/05/image-3.png" alt="Quick Find"&gt;&lt;/a&gt;Quick Find&lt;/p&gt;

&lt;p&gt;For HTTPS Live Stream, it is now possible to configure the adaptive mode to tell LoadRunner to download only HLS video segments only when they are played.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web_stream_open();
...
...
web_stream_close();&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="h-truclient-protocol"&gt;TruClient Protocol&lt;/h3&gt;

&lt;p&gt;TruClient and Chromium browser have been updated to 83 and 88 versions respectively. Capture full replay snapshots now available. Also, this release supports Windows 20H2.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/05/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pea5NTam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/05/image-4.png" alt="TruClient full page snapshot settings"&gt;&lt;/a&gt;TruClient full page snapshot settings&lt;/p&gt;

&lt;h3&gt;Java Protocols&lt;/h3&gt;

&lt;p&gt;Java scripts can be run on Linux LGs for Java over HTTP, Java Record Replay, and Java Vuser. &lt;/p&gt;

&lt;h3 id="h-citrix-and-oracle-2-tier-protocols"&gt;Citrix and Oracle 2-tier Protocols&lt;/h3&gt;

&lt;p&gt;Citrix protocol now supports Tessaract 4.1.1 and Oracle protocol supports Oracle Database 19c.&lt;/p&gt;

&lt;h3&gt;Others&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Exceptional integration of VuGen with LoadRunner Enterprise and LoadRunner cloud&lt;/li&gt;
&lt;li&gt;Silk Performer integration&lt;/li&gt;
&lt;li&gt;JMeter 5.4 support &lt;/li&gt;
&lt;li&gt;Pacing runtime support for JMeter and Gatling scripts&lt;/li&gt;
&lt;li&gt;Linux LG support for Selenium scripts&lt;/li&gt;
&lt;li&gt;Visual Studio 2019 IDE support&lt;/li&gt;
&lt;li&gt;You need to have JRE installed, Micro Focus stopped shipping OpenJDK 32 bit in the installation package&lt;/li&gt;
&lt;li&gt;Round-robin allocation of Vusers across LGs&lt;/li&gt;
&lt;li&gt;Runtime collation is now default; this will save the time&lt;/li&gt;
&lt;li&gt;Transactions will be ordered in the order they executed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you upgraded to LoadRunner Professional 2021 R1 yet? Please let me know in the comments.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>testing</category>
      <category>webperf</category>
      <category>tools</category>
    </item>
    <item>
      <title>Top 5 hardest coding questions from recent FAANG interviews</title>
      <author>Erin Schaffer</author>
      <pubDate>Mon, 10 May 2021 16:33:21 +0000</pubDate>
      <link>https://dev.to/educative/top-5-hardest-coding-questions-from-recent-faang-interviews-2n67</link>
      <guid>https://dev.to/educative/top-5-hardest-coding-questions-from-recent-faang-interviews-2n67</guid>
      <description>&lt;p&gt;It seems like coding interviews are only getting harder, and preparing for them isn’t an easy task. There’s no limit to the kind of questions that may be presented to you in an interview, and many of them aren’t easy. The “hardest” questions will be different for each person. What comes easily to you may be extremely difficult for someone else, and vice versa. &lt;/p&gt;

&lt;p&gt;No matter what your “hardest” questions are, it’s crucial to prepare yourself for your coding interview. We talked to junior and senior developers for their take on the hardest coding interview questions, and we compiled the top five into a list. Today, we’ll explore that list in more detail and give you some tips on how to prepare.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#garbage"&gt;How to design a garbage collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coin"&gt;Coin change problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dining"&gt;Dining philosophers problem (multithreading)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practices"&gt;Why use these programming best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache"&gt;Implement LRU cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Next steps to prepare for interviews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-design-a-garbage-collector"&gt;
  &lt;/a&gt;
  How to design a garbage collector
&lt;/h2&gt;

&lt;p&gt;If you’ve never heard of it, the garbage collector problem is known to be very difficult. Garbage collection is a topic that most people don’t learn about in school, and the &lt;strong&gt;related material is extremely dense&lt;/strong&gt;. Learning about garbage collection involves a lot of theory, which can be overwhelming. No matter what language you work in, it’s crucial to know the ins and outs of your preferred language to solve this problem effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t be afraid to ask your interviewer questions as you work through this problem&lt;/strong&gt;. Remember that your interviewer is there to help you and wants to see you do well. It’s common for interviewers to give you little seeds of information to help push you in the right direction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Garbage collection questions are especially common in core and advanced Java interviews, but they are also important to know for other programming languages. &lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coin-change-problem"&gt;
  &lt;/a&gt;
  Coin change problem
&lt;/h2&gt;

&lt;p&gt;The coin change problem is commonly seen at Facebook and Amazon interviews. You’re given coins of different denominations and a total amount of money. From that, you need to &lt;strong&gt;write a function to compute the fewest number of coins that you need to make up that amount&lt;/strong&gt;. If you can’t reach the given amount of money with any combination of the coins, you return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are three ways you could solve this problem: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brute force&lt;/li&gt;
&lt;li&gt;Top-down Dynamic Programming with Memoization &lt;/li&gt;
&lt;li&gt;Bottom-up Dynamic Programming with Tabularization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at the bottom-up dynamic programming with tabularization solution in C++:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int countChange(int denoms[], int denomsLength, int amount) {
  // Edge cases
  if(amount &amp;lt;= 0 || denomsLength &amp;lt;= 0)
    return 0;

  int i, j, x, y;

  // We need n+1 rows as the table 
  // is constructed in bottom up 
  // manner using the base case 0 
  // value case (n = 0) 
  int lookupTable[amount + 1][denomsLength];

  // Fill the enteries for 0 
  // value case (n = 0) 
  for (i = 0; i &amp;lt; denomsLength; i++)
    lookupTable[0][i] = 1;

  // Fill rest of the table entries 
  // in bottom up manner 
  for (i = 1; i &amp;lt; amount + 1; i++) {
    for (j = 0; j &amp;lt; denomsLength; j++) {
      // Count of solutions including denoms[j] 
      x = (i - denoms[j] &amp;gt;= 0) ? lookupTable[i - denoms[j]][j] : 0;

      // Count of solutions excluding denoms[j] 
      y = (j &amp;gt;= 1) ? lookupTable[i][j - 1] : 0;

      // total count 
      lookupTable[i][j] = x + y;
    }
  }
  return lookupTable[amount][denomsLength - 1];
}

// Driver Code 
int main() { 
  int denoms[4] = {25,10,5,1};
  cout &amp;lt;&amp;lt; countChange(denoms, 4, 10) &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For each iteration of the inner loop, we get the solution with &lt;code&gt;denoms[j]&lt;/code&gt; and store it in &lt;code&gt;x&lt;/code&gt;. We also get the solution without &lt;code&gt;denoms[j]&lt;/code&gt; and store it in &lt;code&gt;y&lt;/code&gt;. By doing this, we’re able to reference earlier solutions to avoid duplicate computations.&lt;/p&gt;

&lt;p&gt;For each coin in the denomination, there can only be two possibilities: to include it or exclude it. We know that if the coin, &lt;code&gt;denom[j]&lt;/code&gt;, is larger than &lt;code&gt;amount&lt;/code&gt;, then &lt;code&gt;x&lt;/code&gt; is set to 0 since including it into consideration is impossible.&lt;/p&gt;

&lt;p&gt;The time complexity is *O(amount * denomsLength), which is the number of for loop iterations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Each of these three methods includes time complexity, meaning that time complexity is an important concept to understand to succeed at the coin change problem.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dining-philosophers-problem-multithreading"&gt;
  &lt;/a&gt;
  Dining philosophers problem (multithreading)
&lt;/h2&gt;

&lt;p&gt;The dining philosophers problem is commonly &lt;strong&gt;used in concurrent algorithm design to demonstrate issues with synchronization and the techniques to solve them&lt;/strong&gt;. The problem states that there are five philosophers sitting around a circular table. The philosophers must alternatively think and eat.&lt;/p&gt;

&lt;p&gt;Each philosopher has a bowl of food in front of them, and they require a fork in each hand to eat. However, there are only five forks available. You need to design a solution where each philosopher can eat their food without causing a deadlock. &lt;/p&gt;

&lt;p&gt;With this problem, it’s common for developers to overlook the idea that it’s not really asking about a real-world scenario, but rather illustrating the kinds of problems you could run into in threaded program executions and/or negligent handling of locks. The idea is to get you to think about limitations and proper ordering to accomplish this task in the most efficient way. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To prepare for this question, you should dive deeper into synchronization, concurrency control, and semaphores&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here are two possible ways to solve this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Limiting the philosophers that are about to eat&lt;/li&gt;
&lt;li&gt;Reordering the fork pick-up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at the reordering the fork pick-up solution in Java:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class DiningPhilosophers2 {

    private static Random random = new Random(System.currentTimeMillis());

    private Semaphore[] forks = new Semaphore[5];

    public DiningPhilosophers2() {
        forks[0] = new Semaphore(1);
        forks[1] = new Semaphore(1);
        forks[2] = new Semaphore(1);
        forks[3] = new Semaphore(1);
        forks[4] = new Semaphore(1);
    }

    public void lifecycleOfPhilosopher(int id) throws InterruptedException {

        while (true) {
            contemplate();
            eat(id);
        }
    }

    void contemplate() throws InterruptedException {
        Thread.sleep(random.nextInt(500));
    }

    void eat(int id) throws InterruptedException {

        // We randomly selected the philosopher with
        // id 3 as left-handed. All others must be
        // right-handed to avoid a deadlock.
        if (id == 3) {
            acquireForkLeftHanded(3);
        } else {
            acquireForkForRightHanded(id);
        }

        System.out.println("Philosopher " + id + " is eating");
        forks[id].release();
        forks[(id + 1) % 5].release();
    }

    void acquireForkForRightHanded(int id) throws InterruptedException {
        forks[id].acquire();
        forks[(id + 1) % 5].acquire();
    }

    // Left-handed philosopher picks the left fork first and then
    // the right one.
    void acquireForkLeftHanded(int id) throws InterruptedException {
        forks[(id + 1) % 5].acquire();
        forks[id].acquire();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this solution, you make any one of the philosophers pick up the left fork first instead of the right one. It doesn’t matter which philosopher you choose to be left-handed and made to pick up their left fork first. In our solution, we chose the philosopher with id=3 as our left-handed philosopher.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-these-programming-best-practices"&gt;
  &lt;/a&gt;
  Why use these programming best practices
&lt;/h2&gt;

&lt;p&gt;While learning about programming, you typically learn some “best practices.” &lt;strong&gt;The most efficient developers implement certain practices into their coding process, which helps them ensure that their code is the best it can be in both function and form&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;After years of experience with programming, you tend to know the practices you should avoid and the ones you should adopt. You may have a general idea of why some practices are better than others, but stumble when it’s time to explain the reasoning. &lt;/p&gt;

&lt;p&gt;A few examples of best practices include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comment your code often&lt;/li&gt;
&lt;li&gt;Recognize and remove duplicate code&lt;/li&gt;
&lt;li&gt;Group by features in React&lt;/li&gt;
&lt;li&gt;Avoid hidden structures in Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to prepare yourself for these questions is to &lt;strong&gt;refresh your memory on useful versus avoidable practices and the reasoning behind them&lt;/strong&gt;. Remember that during your interview, you can talk through these questions with your interviewer.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-lru-cache"&gt;
  &lt;/a&gt;
  Implement LRU cache
&lt;/h2&gt;

&lt;p&gt;The Least Recently Used (LRU) cache implementation question is asked in some Google, Microsoft, and Amazon interviews, but it’s &lt;strong&gt;not a very common question&lt;/strong&gt;. This question requires you to think deeper and combine two or more existing data structures. &lt;/p&gt;

&lt;p&gt;It’s important to read the problem slowly and make sure you understand what’s being asked of you. These questions typically ask you to do a few things. Once you’ve read the problem thoroughly, you can ask your interviewer to confirm that you’re going in the right direction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before tackling one of these problems, make sure you understand what &lt;em&gt;cache&lt;/em&gt; is&lt;/strong&gt;. LRU is a common caching strategy that defines the policy to remove elements from the cache to make room for new ones when the cache is full. This means that it discards the least recently used items first.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-to-prepare-for-interviews"&gt;
  &lt;/a&gt;
  Next steps to prepare for interviews
&lt;/h2&gt;

&lt;p&gt;The questions we covered today are just a few of the many difficult coding interview questions. The questions are supposed to be difficult, and they can even stump the most seasoned developers. It’s important to begin your interview prep early, so you have the opportunity to prepare as much as possible. A few more difficult problems include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find the median from a data stream&lt;/li&gt;
&lt;li&gt;Search in rotated sorted array&lt;/li&gt;
&lt;li&gt;Minimum knight moves&lt;/li&gt;
&lt;li&gt;And many more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Begin preparing for your coding interview today with Educative’s text-based interview prep course.  Our team of experts has incorporated the most commonly asked interview questions at top tech companies into a carefully crafted set of scenarios for you to learn from. You can practice as you learn with hands-on coding environments directly inside your browser. Our coding interview course has helped developers prepare for interviews with top tech companies like Netflix, Facebook, Microsoft, Amazon, and Google. &lt;/p&gt;

&lt;p&gt;By the end, you’ll be ready to interview with confidence!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-coding-interviews"&gt;
  &lt;/a&gt;
  Continue reading about coding interviews
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/ace-coding-interview"&gt;How to ace a coding interview even if you can’t solve the problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/apple-coding-interview-questions"&gt;Top 30 Apple Coding Interview Questions (with solutions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/cracking-top-facebook-coding-interview-questions"&gt;Cracking the top 40 Facebook coding interview questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>computerscience</category>
      <category>codinginterview</category>
    </item>
    <item>
      <title>The EsoList</title>
      <author>JavaCode7</author>
      <pubDate>Mon, 10 May 2021 16:26:49 +0000</pubDate>
      <link>https://dev.to/javacode7/the-esolist-3dk3</link>
      <guid>https://dev.to/javacode7/the-esolist-3dk3</guid>
      <description>&lt;p&gt;This is the EsoList, not the first (but probably the first on dev.to) community built list of amazing esolangs! Feel free to comment  on any of these so long as the comments are constructive. Enjoy!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#freakc"&gt;
  &lt;/a&gt;
  FreakC
&lt;/h1&gt;

&lt;p&gt;FreakC is a multi-paradigm esoteric scripting language. It is written in Batch, compiled to Batch and compatible with Batch codes and libraries. It adds certain features to Batch, but with excessive cursing which makes it an esolang. It is 100% open-source on Github, and open for anyone to contribute! The language is currently at v4.9.0 and is stable.&lt;/p&gt;

&lt;p&gt;Hello world:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Swear[fnc] Hello, World^!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;GitHub: &lt;a href="https://github.com/FreakC-foundation/FreakC"&gt;https://github.com/FreakC-foundation/FreakC&lt;/a&gt;&lt;br&gt;
Facebook: &lt;a href="https://www.facebook.com/FreakC-Programming-Language-111425377421861"&gt;https://www.facebook.com/FreakC-Programming-Language-111425377421861&lt;/a&gt;&lt;br&gt;
Itch.io: &lt;a href="https://npmgames.itch.io/FreakC"&gt;https://npmgames.itch.io/FreakC&lt;/a&gt;&lt;br&gt;
Esolangs.org: &lt;a href="https://esolangs.org/wiki/FreakC"&gt;https://esolangs.org/wiki/FreakC&lt;/a&gt;&lt;br&gt;
Dev Article: &lt;a href="https://dev.to/freakcdev297/freakc-the-esolang-that-can-do-stuffs-3f9c"&gt;https://dev.to/freakcdev297/freakc-the-esolang-that-can-do-stuffs-3f9c&lt;/a&gt;&lt;br&gt;
Website: &lt;a href="https://freakc-foundation.github.io/"&gt;https://freakc-foundation.github.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>esoteric</category>
      <category>esolang</category>
    </item>
  </channel>
</rss>
