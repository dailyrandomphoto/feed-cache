<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to host a Next.js web apps with server-side rendering (SSR) in AWS Amplify</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Tue, 18 May 2021 23:31:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-host-a-next-js-web-apps-with-server-side-rendering-ssr-in-aws-amplify-3n3h</link>
      <guid>https://dev.to/aws-builders/how-to-host-a-next-js-web-apps-with-server-side-rendering-ssr-in-aws-amplify-3n3h</guid>
      <description>&lt;p&gt;No more waiting! It‚Äôs finally here, &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/05/aws-amplify-hosting-announces-server-side-rendering-support-for-next-js-web-apps/"&gt;AWS Amplify hosting for Next.js server-side rendering (SSR)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why this is great&lt;/strong&gt;: It‚Äôs no joke, I wait for this feature for &lt;em&gt;more than a year&lt;/em&gt;. And is finally here and is fast!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not so great&lt;/strong&gt;: Next 10.x.x was a huge leap forward. All things I wanted to try right off the bay and backed in my applications...But this will be on hold, as the time of writing, this launch only his support is for Next.js 9.x.x version. Considering version 10.x if from October 2020 I think the pace is a little &lt;/p&gt;

&lt;p&gt;To evaluate what type of rendering your application need, I recommend the post &lt;a href="https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation"&gt;Next.js: Server-side Rendering vs. Static Generation&lt;/a&gt; by &lt;a href="https://twitter.com/leeerob"&gt;Lee Robinson&lt;/a&gt;‚Äîand in the &lt;em&gt;real world&lt;/em&gt; sometimes you‚Äôll need both.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-webapp"&gt;
  &lt;/a&gt;
  The webapp
&lt;/h2&gt;

&lt;p&gt;For all purposes, you could do with your app or create a boilerplate new &lt;a href="https://nextjs.org/docs/basic-features/pages#server-side-rendering"&gt;NextJS with SSR&lt;/a&gt;. I created this barebones site that renders some info from the &lt;a href="https://pokeapi.co/"&gt;Pok√©API&lt;/a&gt;. This is the repository on GitHub:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ibrahimcesar"&gt;
        ibrahimcesar
      &lt;/a&gt; / &lt;a href="https://github.com/ibrahimcesar/nextjs-ssr-amplify-aws"&gt;
        nextjs-ssr-amplify-aws
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üëæ  Repository to test NextJS Server Side Rendering with AWS Amplify
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a href="https://amplify.aws/community" rel="nofollow"&gt;
    &lt;img alt="Amplify" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9uwzN3re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-amplify/community/raw/master/src/assets/images/logo-dark.png" width="60"&gt;
  &lt;/a&gt;
&lt;h1&gt;
  üëæ AWS Amplify NextJS SSR
&lt;/h1&gt;
&lt;blockquote&gt;Example of NextJS SSR example to deploy with AWS Amplify SSR Hosting using the Pok√©API&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/ellerbrock/typescript-badges/"&gt;&lt;img src="https://camo.githubusercontent.com/1d1f56c37cf5dfd1b9c3782a8d1d6fe07f8764e8c35f53ec90460e5b38cd8f7d/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f747970657363726970742f636f64652f747970657363726970742e7376673f763d313031" alt="TypeScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Developed in üáßüá∑ &lt;span&gt;Brazil&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://updown.io/akzp" rel="nofollow"&gt;Pok√©API Status Page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
Deploying&lt;/h2&gt;
&lt;h3&gt;
If you never used Amplify&lt;/h3&gt;
&lt;p&gt;You‚Äôll need to have the amplify &lt;a href="https://docs.amplify.aws/cli/start/install" rel="nofollow"&gt;installed and configured&lt;/a&gt;. Just follow the docs and you‚Äôll be ready to go. Or make sure you have the latest version.&lt;/p&gt;
&lt;h3&gt;
Amplify Init&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;‚ùØ amplify init
Note: It is recommended to run this &lt;span class="pl-c1"&gt;command&lt;/span&gt; from the root of your app directory

&lt;span class="pl-k"&gt;?&lt;/span&gt; Enter a name &lt;span class="pl-k"&gt;for&lt;/span&gt; the project pokessr

The following configuration will be applied:

Project information

&lt;span class="pl-k"&gt;|&lt;/span&gt; Name: pokessr

&lt;span class="pl-k"&gt;|&lt;/span&gt; Environment: dev

&lt;span class="pl-k"&gt;|&lt;/span&gt; Default editor: Visual Studio Code

&lt;span class="pl-k"&gt;|&lt;/span&gt; App type: javascript

&lt;span class="pl-k"&gt;|&lt;/span&gt; Javascript framework: react

&lt;span class="pl-k"&gt;|&lt;/span&gt; Source Directory Path: src

&lt;span class="pl-k"&gt;|&lt;/span&gt; Distribution Directory Path: build

&lt;span class="pl-k"&gt;|&lt;/span&gt; Build Command: npm run-script build

&lt;span class="pl-k"&gt;|&lt;/span&gt; Start Command: npm run-script start

&lt;span class="pl-k"&gt;?&lt;/span&gt; Initialize the project with the above configuration&lt;span class="pl-k"&gt;?&lt;/span&gt; Yes

Using&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ibrahimcesar/nextjs-ssr-amplify-aws"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;You can leave all build options as it is, because Amplify will automatically pick up as SSR and deploy it. For this to happen you also don‚Äôt need (or have to) choose a different export folder. If you clone my repo, you could check that I‚Äôm indeed using NextJS &lt;code&gt;10.0.0&lt;/code&gt; but, I cannot use any additional feature like the new &lt;code&gt;Image&lt;/code&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  Deploying
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#if-you-never-used-amplify"&gt;
  &lt;/a&gt;
  If you never used Amplify
&lt;/h3&gt;

&lt;p&gt;You‚Äôll need to have the amplify &lt;a href="https://docs.amplify.aws/cli/start/install"&gt;installed and configured&lt;/a&gt;. Just follow the docs and you‚Äôll be ready to go. Or make sure you have the latest version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amplify-init"&gt;
  &lt;/a&gt;
  Amplify Init
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ amplify init
Note: It is recommended to run this &lt;span class="nb"&gt;command &lt;/span&gt;from the root of your app directory
? Enter a name &lt;span class="k"&gt;for &lt;/span&gt;the project pokessr
The following configuration will be applied:
Project information
| Name: pokessr
| Environment: dev
| Default editor: Visual Studio Code
| App &lt;span class="nb"&gt;type&lt;/span&gt;: javascript
| Javascript framework: react
| Source Directory Path: src
| Distribution Directory Path: build
| Build Command: npm run-script build
| Start Command: npm run-script start

? Initialize the project with the above configuration? Yes
Using default provider  awscloudformation
? Select the authentication method you want to use: AWS profile
For more information on AWS Profiles, see:
https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html

? Please choose the profile you want to use amplify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Besides the name, &lt;code&gt;pokessr&lt;/code&gt;, I only choose my profile to deploy, called &lt;code&gt;amplify&lt;/code&gt; but you can deploy in whatever profile you configured. I accepted all defaults. Then amplify will create your environment:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Adding backend environment dev to AWS Amplify Console app: d31r520fbr96mj

‚†ô Initializing project in the cloud...

CREATE_IN_PROGRESS amplify-pokessr-dev-185133 AWS::CloudFormation::Stack Tue May 18 2021 18:51:41 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia) User Initiated
CREATE_IN_PROGRESS UnauthRole                 AWS::IAM::Role             Tue May 18 2021 18:51:45 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia)
CREATE_IN_PROGRESS AuthRole                   AWS::IAM::Role             Tue May 18 2021 18:51:45 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia)
CREATE_IN_PROGRESS DeploymentBucket           AWS::S3::Bucket            Tue May 18 2021 18:51:46 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia)
CREATE_IN_PROGRESS UnauthRole                 AWS::IAM::Role             Tue May 18 2021 18:51:46 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia) Resource creation Initiated
CREATE_IN_PROGRESS AuthRole                   AWS::IAM::Role             Tue May 18 2021 18:51:46 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia) Resource creation Initiated

‚†á Initializing project in the cloud...

CREATE_IN_PROGRESS DeploymentBucket AWS::S3::Bucket Tue May 18 2021 18:51:46 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia) Resource creation Initiated

‚†∏ Initializing project in the cloud...

CREATE_COMPLETE AuthRole   AWS::IAM::Role Tue May 18 2021 18:51:59 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia)
CREATE_COMPLETE UnauthRole AWS::IAM::Role Tue May 18 2021 18:51:59 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia)

‚†π Initializing project in the cloud...

CREATE_COMPLETE DeploymentBucket           AWS::S3::Bucket            Tue May 18 2021 18:52:08 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia)
CREATE_COMPLETE amplify-pokessr-dev-185133 AWS::CloudFormation::Stack Tue May 18 2021 18:52:10 GMT-0300 (Hor√°rio Padr√£o de Bras√≠lia)

‚úî Successfully created initial AWS cloud resources for deployments.
‚úî Initialized provider successfully.

Initialized your environment successfully.

Your project has been successfully initialized and connected to the cloud!

Some next steps:

‚Äúamplify status‚Äù will show you what you‚Äôve added already and if it‚Äôs locally configured or deployed
‚Äúamplify add &amp;lt;category&amp;gt;‚Äú will allow you to add features like user login or a backend API
‚Äúamplify push‚Äù will build all your local backend resources and provision it in the cloud
‚Äúamplify console‚Äù to open the Amplify Console and view your project status
‚Äúamplify publish‚Äù will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud

Pro tip:
Try ‚Äúamplify add api‚Äù to create a backend API and then ‚Äúamplify publish‚Äù to deploy everything
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What we are going to use is &lt;code&gt;hosting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And by zero configuration, you just need to connect your repository and the building settings will be set. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hOsVDlo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nplnbf5sqsoy4mkvrb8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOsVDlo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nplnbf5sqsoy4mkvrb8k.png" alt="Build settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can always have a look at how the build is going accessing the logs in the AWS Amplify console. For our purposes, see a &lt;code&gt;Starting SSR Build&lt;/code&gt; in your logs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2021-05-18T22:35:49.379Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Creating an optimized production build...
2021-05-18T22:35:58.592Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Compiled successfully
                                 info  - Collecting page data...
2021-05-18T22:35:59.098Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;0/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.480Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;7/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.600Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;14/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.706Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;21/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.797Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;28/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.797Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Finalizing page optimization...
2021-05-18T22:35:59.814Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: 
2021-05-18T22:35:59.860Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: Page                              Size     First Load JS
                                 ‚îå Œª /                             1.32 kB        68.7 kB
                                 ‚îú   /_app                         0 B            64.2 kB
                                 ‚îú Œª /[ditto]                      1.39 kB        68.7 kB
                                 ‚îú ‚óã /404                          2.76 kB        66.9 kB
                                 ‚îú ‚óè /pokemons/[name]              1.53 kB        68.9 kB
                                 ‚îú   ‚îú /pokemons/bulbasaur

                                 ‚îú   ‚îú /pokemons/ivysaur

                                 ‚îú   ‚îú /pokemons/venusaur

                                 ‚îú   ‚îî &lt;span class="o"&gt;[&lt;/span&gt;+22 more paths]

                                 ‚îî Œª /random                       1.39 kB        68.7 kB
                                 + First Load JS shared by all     64.2 kB
                                 ‚îú chunks/commons.b2f5db.js      13.5 kB
                                 ‚îú chunks/framework.149f13.js    42 kB
                                 ‚îú chunks/main.e0d560.js         6.8 kB
                                 ‚îú chunks/pages/_app.9245f7.js   865 B
                                 ‚îú chunks/webpack.f82c36.js      950 B
                                 ‚îî css/b8e1ed54af27c57535f7.css  897 B

2021-05-18T22:35:59.861Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: Œª  &lt;span class="o"&gt;(&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;  server-side renders at runtime &lt;span class="o"&gt;(&lt;/span&gt;uses getInitialProps or getServerSideProps&lt;span class="o"&gt;)&lt;/span&gt;
                                 ‚óã  &lt;span class="o"&gt;(&lt;/span&gt;Static&lt;span class="o"&gt;)&lt;/span&gt;  automatically rendered as static HTML &lt;span class="o"&gt;(&lt;/span&gt;uses no initial props&lt;span class="o"&gt;)&lt;/span&gt;
                                 ‚óè  &lt;span class="o"&gt;(&lt;/span&gt;SSG&lt;span class="o"&gt;)&lt;/span&gt;     automatically generated as static HTML + JSON &lt;span class="o"&gt;(&lt;/span&gt;uses getStaticProps&lt;span class="o"&gt;)&lt;/span&gt;
                                 &lt;span class="o"&gt;(&lt;/span&gt;ISR&lt;span class="o"&gt;)&lt;/span&gt;     incremental static regeneration &lt;span class="o"&gt;(&lt;/span&gt;uses revalidate &lt;span class="k"&gt;in &lt;/span&gt;getStaticProps&lt;span class="o"&gt;)&lt;/span&gt;

2021-05-18T22:35:59.993Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: Starting SSR Build...
2021-05-18T22:37:10.138Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: SSR Build Complete.
2021-05-18T22:37:11.159Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: &lt;span class="c"&gt;# Completed phase: build&lt;/span&gt;
2021-05-18T22:37:11.159Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: &lt;span class="c"&gt;## Build completed successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then you gave to wait a couple of minutes and your application you be on your custom domain or in the generate domain of Amplify. For this demonstration my web apps is &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/"&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h3&gt;

&lt;p&gt;The front page is itself server side generated:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will query in the Pok√©API and return all Pok√©mons until reaching the number or the maximum today. I placed &lt;code&gt;3000&lt;/code&gt; but as you can check, the actual number today is &lt;code&gt;1118&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you click in a Pok√©mon, I use a dynamic route in the file &lt;code&gt;ditto&lt;/code&gt; to generate the Pok√©mon by the name. Pok√©mon fans will get the reference. And &lt;code&gt;[ditto].tsx&lt;/code&gt; is also SSR.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemonData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ditto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But for fun I created a &lt;code&gt;random&lt;/code&gt; page... that renders a random Pok√©mons to test even better the SSR. It get all the possible Pok√©mons and returns one at random using &lt;code&gt;Math.random()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Pokedex&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemonData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ditto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And to test ISG (Incremental Static Generation) I created a folder called &lt;code&gt;pokemons&lt;/code&gt;. &lt;a href="https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration"&gt;Stable static generation was added to Next 9.3&lt;/a&gt; but my test doesn‚Äôt show that works right now with the Amplify SSR hosting, it defaults to the SSR. ISG is a mechanism to update existing pages, by re-rendering them in the background as traffic comes in using the property &lt;code&gt;revalidate&lt;/code&gt;. Also, another great use is, per example, you have a specific dataset of pages to generate at build time but you‚Äôll need on dynamic routes to be generated new pages as soon you publish another in your headless CMS or database. &lt;a href="https://github.com/serverless-nextjs/serverless-next.js/issues/804"&gt;ISG generated even a bounty as feature in another project&lt;/a&gt; and unlocks a lot of interesting use cases.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemonData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Pokedex&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pokemons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For my example, I generate at build time the first 25 Pok√©mons. See that my props are changing, I‚Äôm passing a dynamic date. But my first 25 Pok√©mons, starting with &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/bulbasaur"&gt;Bulbasaur&lt;/a&gt; and going up to &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/pikachu"&gt;Pikachu&lt;/a&gt;. They have a text &lt;code&gt;Generated at&lt;/code&gt; that will not revalidate at all (right now configured to re-validate at each 5 minutes &lt;code&gt;revalidate: 60 * 5&lt;/code&gt; in which it should change this date. But if you access any other Pok√©mon than the first 25, like the number 26, &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/raichu"&gt;Raichu&lt;/a&gt; or the 186, &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/scizor"&gt;Scizor&lt;/a&gt; will be server-side generated at the time and you‚Äôll see the date of any time you accessing again, so no ISG. This feature was not advertised but since it was stable at 9.3+ and I did not found work and it happens you are after this, you‚Äôll need to wait or surprise me show-me what I‚Äôm getting wrong here because I would love to have ISG already üòÄ&lt;/p&gt;



&lt;p&gt;I also created a private first component for YouTube embeds if you plan to use something like this in your Next app, check it out:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ibrahimcesar/why-i-made-my-open-source-react-component-private-by-default-an-open-source-story-1jja" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why I made my open source React component private by default: an Open Source story&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar „Éª May 18 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#privacy&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Please leave your thoughts, takes and insights in the comments! Or problems if you have one or the solution to ISG!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Our computers run on sand, a post about silicon.</title>
      <author>SciDroid</author>
      <pubDate>Tue, 18 May 2021 23:22:20 +0000</pubDate>
      <link>https://dev.to/scidroid/our-computers-run-on-sand-a-post-about-silicon-497h</link>
      <guid>https://dev.to/scidroid/our-computers-run-on-sand-a-post-about-silicon-497h</guid>
      <description>&lt;p&gt;&lt;cite&gt;Cover image by &lt;a href="https://www.pexels.com/es-es/@oksana-titova-19163191?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Oksana&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sand"&gt;
  &lt;/a&gt;
  Sand?
&lt;/h2&gt;

&lt;p&gt;Yes, although it seems incredible what I am saying our economy works with sand. well, not exactly, it is a component of sand called &lt;strong&gt;silicon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlYqsQ3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/sand.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlYqsQ3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/sand.jpg" alt="Sand"&gt;&lt;/a&gt; &lt;strong&gt;Sand, Photo by &lt;a href="https://www.pexels.com/@louis-965146"&gt;Louis&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-silicon"&gt;
  &lt;/a&gt;
  What is Silicon?
&lt;/h3&gt;

&lt;p&gt;Silicon is the most abundant chemical element in the world, this is formed in the megastars when two oxygen atoms are joined and when they explode in a supernova they spread all over the universe, this is the aspect of silicon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5j3MLkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/silicon.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5j3MLkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/silicon.jpg" alt="Silicon"&gt;&lt;/a&gt; &lt;strong&gt;Silicon, Photo by &lt;a href="https://www.freeimages.com/es/photographer/greschoj-64534"&gt;greschoj&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maybe at this moment you are saying &lt;strong&gt;&lt;em&gt;"That cannot be the most abundant element in the world, I have never seen that in my life"&lt;/em&gt;&lt;/strong&gt;, but it is because it is a block of pure silicon, the most common way to find it is in sand, this because it is a substance that does not corrode easily and with the passage of time most of the components of the sand go away but the silicon remains, well not exactly silicon, what really remains is silicon dioxide which is a mixture between silicon and oxygen, better known as quartz, and this is another very common way to find it, because normally this is found in forests as a kind of white rock that is found between stones or loose as crystals that are geometrically perfect and very transparent. In addition, silicon forms the silicates, some of which are the base of the terrestrial mantle, which makes it the most abundant material on the planet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-it-important"&gt;
  &lt;/a&gt;
  Why is it important?
&lt;/h3&gt;

&lt;p&gt;Silicon is important because it is the base of modern computing, which is why the most famous place for technology is called Silicon Valley. Its uses are very varied, have you ever played Minecraft or have you heard that if you melt sand you can make glass, this is because of the silicon dioxide that is in the sand, even make laser beams, or even the silicon that is used in breast augmentation and other procedures, the usefulness of silicon is almost infinite but what we are interested in is its use in technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-silicon-is-used-in-tech"&gt;
  &lt;/a&gt;
  How the silicon is used in tech?
&lt;/h2&gt;

&lt;p&gt;For this we are going to talk a little bit about the history of computing. Before, we had the abacus, which allowed us to do basic operations, but everything developed until we were able to make mechanical computers that allowed automatic operations, until we needed to make really complex calculations and vacuum tube computers were invented.&lt;/p&gt;

&lt;p&gt;But they were enormous, so transistor-based computers were created, which is a small electrical circuit with which we can control whether or not electricity passes through, but with the passage of time we needed more and more power, and we discovered that we could take silicon and make millions of microscopic transistors inside and thus microprocessors were born.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8cfKnJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/chips.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8cfKnJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/chips.jpg" alt="MicroChips"&gt;&lt;/a&gt; &lt;strong&gt;&lt;em&gt;MicroChips, Photo by &lt;a href="https://www.pexels.com/@shellystill"&gt; Shelly&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-you-transform-sand-into-processors"&gt;
  &lt;/a&gt;
  How do you transform sand into processors?
&lt;/h3&gt;

&lt;p&gt;The process is very complicated and very delicate to levels that something badly done can damage the chip completely, The first thing is to obtain pure silicon, this is usually done by taking the quartz and separating the silicon from the oxygen, you can use elements such as carbon.&lt;/p&gt;

&lt;p&gt;When you have the pure silicon you must crystallize it, and with a very delicate process to cut it, if you cut it badly it is possible that it breaks and it must have a thickness of a few millimeters, when it is ready the most difficult part arrives, a process called photolithography is made where the transistors are printed in the silicon wafer, and you must pass it through complex chemical and physical processes, in a wafer millions of transistors fit and according to the law of Moore every two years the amount of transistors that can fit in a chip doubles.&lt;/p&gt;

&lt;p&gt;But, we reach a point where it is increasingly difficult to make them smaller and it is a constant challenge for the creators of microprocessors.&lt;/p&gt;

&lt;p&gt;When a wafer is finished it looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a-40ybQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/plate.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a-40ybQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/plate.jpg" alt="Silicon Wafer"&gt;&lt;/a&gt; &lt;strong&gt;Silicon Wafer, Photo by &lt;a href="https://pixabay.com/users/fabersam-98886/"&gt;fabersam&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then it is only cut to make way for microprocessors.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>computerscience</category>
    </item>
    <item>
      <title>Customize your keyboard's layout using QMK</title>
      <author>Sherlock Codes</author>
      <pubDate>Tue, 18 May 2021 22:51:18 +0000</pubDate>
      <link>https://dev.to/sherlockcodes/customize-your-keyboard-s-layout-using-qmk-27fl</link>
      <guid>https://dev.to/sherlockcodes/customize-your-keyboard-s-layout-using-qmk-27fl</guid>
      <description>&lt;p&gt;I had several problems bringing my QMK layout to life on my keyboard. I bought the OLKB Planck from Drop and since I am a native spanish speaker, and some common spanish characters (√±, ¬®, ¬¥) were either missing or really hard to type, (not to mention I found the non-letter keys to be rather impractical) I decided to get into designing my own layout.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-qmk"&gt;
  &lt;/a&gt;
  Setup QMK
&lt;/h1&gt;

&lt;p&gt;I myself will only do this for Manjaro, but the &lt;a href="https://docs.qmk.fm/#/newbs"&gt;official tutorial&lt;/a&gt; will help you set up your system on your specific OS, so you can still follow along with me after setting QMK on your computer.&lt;/p&gt;

&lt;p&gt;As a prerequisite you'll need python and git installed in your system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-qmks-command-line-interface-cli"&gt;
  &lt;/a&gt;
  Install QMK's Command Line Interface (CLI)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;python3 -m pip install --user qmk 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-qmk"&gt;
  &lt;/a&gt;
  Setup QMK
&lt;/h2&gt;

&lt;p&gt;Run the following command and say yes to all&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qmk setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-own-keymap"&gt;
  &lt;/a&gt;
  Create your own keymap
&lt;/h2&gt;

&lt;p&gt;QMK, which you just installed, comes with a lot of layouts for your keyboard made by members of the community that forked &lt;a href="https://github.com/qmk/qmk_firmware"&gt;QMK's repo&lt;/a&gt; at &lt;code&gt;&amp;lt;directory_where_you_installed_qmk&amp;gt;/keyboards/your_keyboard/keymaps/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can create your own layout from any of this layouts, but what I recommend is looking for the folder named &lt;code&gt;default&lt;/code&gt;, which will contain the layout installed by default in your keyboard, and making a copy inside the same containing folder. You can name it however you want it.&lt;/p&gt;

&lt;p&gt;Inside this layout you'll see several files:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4psQYmtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/woetq588fen6922nd4zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4psQYmtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/woetq588fen6922nd4zh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You should only care about &lt;code&gt;keymap.c&lt;/code&gt; if you only want to change the layout. If you in the other hand wish to set special actions like for example "tapping shift two times to activate mayus" you will need to modify &lt;code&gt;config.h&lt;/code&gt; and &lt;code&gt;rules.mk&lt;/code&gt;. &lt;a href="https://beta.docs.qmk.fm/using-qmk/software-features/feature_tap_dance"&gt;See special actions&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-your-layout"&gt;
  &lt;/a&gt;
  Create your layout
&lt;/h3&gt;

&lt;p&gt;Inside &lt;code&gt;keymap.c&lt;/code&gt;, under the configuration part of the code, you should see commented how the final layout should look like and the matching keymap below it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzedrSY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7241a9tf5be39e34y3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzedrSY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7241a9tf5be39e34y3l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now is time to include your &lt;strong&gt;special characters&lt;/strong&gt; (if you want any). For your language's specific characters you will want to import them by importing it's language file (&lt;a href="https://beta.docs.qmk.fm/using-qmk/simple-keycodes/reference_keymap_extras"&gt;see what's your language file&lt;/a&gt;) under the &lt;code&gt;muse.h&lt;/code&gt; import statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="cp"&gt;#include QMK_KEYBOARD_H
#include "muse.h"
#include "keymap_spanish.h" --&amp;gt; /*Your file
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: if there are many layouts to import for your language, make sure the layout you are importing matches your system's keyboard layout (ie: you only have a spanish layout available in QMK that should smath Spain's spanish layout in contrast with Latin America's spanish layout).&lt;/p&gt;

&lt;p&gt;Now you should modify your layout accordingly by using the characters found in the &lt;code&gt;keymap_&amp;lt;your_language.h&amp;gt;&lt;/code&gt; file. If you can't find them on your computer's file system, here you have the language files, just use the variable names for your language's character (i.e: ES_NTIL --&amp;gt; √ë) on your layout like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtmmdUG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y15nvljh0h29vrprc98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtmmdUG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y15nvljh0h29vrprc98.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#declare-your-special-rules"&gt;
  &lt;/a&gt;
  Declare your special rules
&lt;/h3&gt;

&lt;p&gt;I myself will make my shift key to activate bloq mayus when tapped twice.&lt;/p&gt;

&lt;p&gt;Since we will be using "tap dance" special rules, we should enable them in our &lt;code&gt;rules.mk&lt;/code&gt; file by inserting the following line at the bottom of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
TAP_DANCE_ENABLE = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to set the time between tap and tap (tap = press of a key) we should add the following line at the bottom of the &lt;code&gt;config.h&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
#define TAPPING_TERM 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should declare the double-tap special action like this in above the declaration of the layout (the line that starts with &lt;code&gt;const uint16_t ...&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// Tap Dance Declarations&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;TD_LSFT_CAPS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Tap Dance Definitions&lt;/span&gt;
&lt;span class="n"&gt;qk_tap_dance_action_t&lt;/span&gt; &lt;span class="n"&gt;tap_dance_actions&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Tap once for shift, twice for Caps Lock&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TD_LSFT_CAPS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ACTION_TAP_DANCE_DOUBLE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KC_LSFT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KC_CAPS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;PROGMEM&lt;/span&gt; &lt;span class="n"&gt;keymaps&lt;/span&gt;&lt;span class="p"&gt;[][&lt;/span&gt;&lt;span class="n"&gt;MATRIX_ROWS&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;MATRIX_COLS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have your special actions declared, go ahead and include it as a key in your keyboard  like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7SuS8yN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om0vm5a1e57uz23oii8h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7SuS8yN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om0vm5a1e57uz23oii8h.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#install-your-new-keymap-settings"&gt;
  &lt;/a&gt;
  Install your new keymap settings
&lt;/h1&gt;

&lt;p&gt;After you are finished with your layout and special actions for your keymap, go ahead and put it inside your keyboad.&lt;/p&gt;

&lt;p&gt;In the home directory for your qmk installation (in my PC &lt;code&gt;lucas/qmk_firmware&lt;/code&gt;) open a terminal and follow this 2 steps:&lt;br&gt;
1- Compile your keymap so it can be installed in your keyboard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qmk compile -kb &amp;lt;kb_name&amp;gt;/&amp;lt;version&amp;gt; -km &amp;lt;keymap&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;&amp;lt;kb_name&amp;gt;&lt;/code&gt; is your keyboards name, where &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is your keyboard's version (only in case your keyboard has many versions like my planck). &lt;code&gt;&amp;lt;keymap&amp;gt;&lt;/code&gt; stands for the name you gave to your folder containing all your keymap's files.&lt;br&gt;
2- Flash your keyboard: once you have your compiled keymap for your keyboard, you should set your keyboard on &lt;em&gt;flash mode&lt;/em&gt;. This depends on our keyboard, but basically just google "flash mode " and that should do it. Once you got your keyboard to enter flash mode, but your keymap inside your keyboard with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qmk flash -kb &amp;lt;your_keyboard&amp;gt;/&amp;lt;version&amp;gt; -km &amp;lt;keymap&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Hope this tutorial was helpful.&lt;/p&gt;

</description>
      <category>espanol</category>
      <category>spanish</category>
      <category>qmk</category>
      <category>keyboard</category>
    </item>
    <item>
      <title>Android CodeView the easiest way to highlight text</title>
      <author>Amr Hesham</author>
      <pubDate>Tue, 18 May 2021 22:41:20 +0000</pubDate>
      <link>https://dev.to/amrdeveloper/android-codeview-the-easiest-way-to-highlight-text-3hbf</link>
      <guid>https://dev.to/amrdeveloper/android-codeview-the-easiest-way-to-highlight-text-3hbf</guid>
      <description>&lt;p&gt;Hi, I am Amr Hesham a Software Engineer, I am interested in Android and Compiler Development,&lt;/p&gt;

&lt;p&gt;In my first article, I wrote about how to use the CodeView library to create a syntax highlighter for programming languages with many extra features like autocomplete, change theme and syntax in the runtime,&lt;/p&gt;

&lt;p&gt;The first idea is to use it in Content sharing applications so for example like Twitter you can highlight hashtags, website URLs and you can also highlight emails, this feature can easily be done using CodeView in just 3 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#[a-zA-z0-9]+"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Patterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WEB_URL&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Patterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EMAIL_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add autocomplete for email providers like @gmail.com or @yahoo.com and the final result will be like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXylNI1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qyc64io4hyie8b166px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXylNI1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qyc64io4hyie8b166px.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second idea is to use CodeView with a searching feature to highlight all matched keyword in the content and you can easily highlight without&lt;br&gt;
searching in the positions in all content and add for example some HTML tags or Spans to highlight one word each time the user search for it,&lt;br&gt;
and this feature can easily be done using few methods.&lt;/p&gt;

&lt;p&gt;first, you need to create a Pattern for your search keyword, it can be a normal string or you can enable the user to search with regex, not just string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;keywordPattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Kotlin will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;keywordPattern&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to add this pattern to CodeView with the color you want to highlight with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keywordPattern&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to tell CodeView to highlight the new patterns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reHighlightSyntax&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;once the user changes the search keyword you just need to replace the old pattern with a new one and there are 2 ways to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keywordPattern&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can remove all the patterns from CodeView&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resetSyntaxPatternList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to add the new pattern and highlight&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newkeywordPattern&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reHighlightSyntax&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you have done, the final result will be like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VsYy35T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0a85kevxrmkgkata9zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VsYy35T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0a85kevxrmkgkata9zj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in your mind that CodeView has many features and you can use it in many different ideas I just give you 2 examples but here is more and more.&lt;/p&gt;

&lt;p&gt;you can use it in languages apps for example English app and with an error highlighter, you can highlight spell mistake words, or create a note app with English words on autocomplete ‚Ä¶etc.&lt;/p&gt;

&lt;p&gt;all you need is to use your imagination and creativity to create great features with CodeView.&lt;/p&gt;

&lt;p&gt;It‚Äôs very easy to use, well documented, has many examples on Github you can know how to download and use from the Github link:&lt;br&gt;
&lt;a href="https://github.com/amrdeveloper/codeview"&gt;https://github.com/amrdeveloper/codeview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and I hope you will enjoy creating your editor with CodeView üòã.&lt;/p&gt;

&lt;p&gt;Enjoy Programming üòã.&lt;/p&gt;

</description>
      <category>android</category>
      <category>codeview</category>
      <category>java</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>React vs Vue - Beginners Guide</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 18 May 2021 22:30:20 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/react-vs-vue-beginners-guide-4539</link>
      <guid>https://dev.to/ubahthebuilder/react-vs-vue-beginners-guide-4539</guid>
      <description>&lt;p&gt;React js and Vue js are arguably two of the most popular and widely used JavaScript frameworks (or libraries) today. &lt;strong&gt;But how do they compare to each other?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is a simple minimalistic framework (or library, whatever) used in building simple and reusable UI Components like buttons, forms, navbars and so on.&lt;/p&gt;

&lt;p&gt;You can make two or more similar UI elements which share the same properties and functionalities in a modular approach.&lt;/p&gt;

&lt;p&gt;React is currently used on the websites of many companies including popular companies like Facebook (it's creator), AirBnB and Uber and Netflix.&lt;/p&gt;

&lt;p&gt;Vue js is very similar to React in some ways. It is a framework used in  creating standalone and modular UI elements. It also utilizes the virtual DOM for rendering it's components to the real DOM.&lt;/p&gt;

&lt;p&gt;Though not as popular as React, Vue is also used by some big-shot corporations like Google (yep üòÑ), Nintendo, Behance and Apple.&lt;/p&gt;

&lt;p&gt;The main difference between both tools lie in their syntax, and that is what we'll be dissecting for the remainder of this article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-components-with-react"&gt;
  &lt;/a&gt;
  CREATING COMPONENTS WITH REACT
&lt;/h3&gt;

&lt;p&gt;When creating a UI component with React, here's some key points to note about it's syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Components in React are ussually defined as &lt;strong&gt;classes.&lt;/strong&gt; If you're coming from an ES6 background, this shouldn't be new to you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A XML-like Syntax called &lt;strong&gt;JSX&lt;/strong&gt; or &lt;strong&gt;JavaScript Extension&lt;/strong&gt; can be used to define the view of that Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Components can also be defined using a functional approach. These Component are called &lt;strong&gt;Functional Components.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class based Components can hold local properties (&lt;strong&gt;state&lt;/strong&gt;), Functional Components &lt;strong&gt;can't.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While state can be defined locally in a class Component, props can only be passed from the context of a parent element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use an external state manager like &lt;strong&gt;Redux&lt;/strong&gt; or define the state locally as you'll see in the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can define methods in a component class and call the method in the view of that component&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a typical syntax for defining a class-based button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;btnLabel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to it's minimalistic architecture, React ships well and is frequently used with other libraries like Redux (state manager), GraphQL (API development) and React-Router (Routing implementation) to build full-fledged websites.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-hooks"&gt;
  &lt;/a&gt;
  React Hooks
&lt;/h4&gt;

&lt;p&gt;ES6 classes are not the only way you can create Components that works with some local state in React. &lt;/p&gt;

&lt;p&gt;React provides some special Functions (*&lt;em&gt;hooks&lt;/em&gt;") which can be used to manage state data.&lt;/p&gt;

&lt;p&gt;Here's the same button component created with React Hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBtnLabel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setBtnLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Relative to ES6 React, here's some things to note about this code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The argument passed to &lt;strong&gt;useState&lt;/strong&gt; hook function is simply the &lt;strong&gt;initial state&lt;/strong&gt;. Just as you would define it in the constructor of a class Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two piece of data is obtained from the useState hook (via array Destructuring)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first is the actual state data and the second is the state updater function (synonymous to setState())&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: To learn about Array Destructuring and other ES6 Syntax, I'll highly recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React by Sleepless Yogi&lt;/a&gt; . You even get to learn React too! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In the view, an event (click, in our case) would trigger setBtnLabel hook to run and the argument passed will become the new state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So in a nutshell, hooks allow you create stateful React Components without using an ES6 Class.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-components-with-vue"&gt;
  &lt;/a&gt;
  CREATING COMPONENTS WITH VUE
&lt;/h3&gt;

&lt;p&gt;Unlike React js, Classes are not used to create Components in Vue. &lt;/p&gt;

&lt;p&gt;Each Vue component (which ends with a .vue extension) typically has three osections in it.&lt;/p&gt;

&lt;p&gt;The first section is the &lt;em&gt;template&lt;/em&gt; area which is for the template or view of that component. As expected, you define what elements you want this Component to render in the DOM.&lt;/p&gt;

&lt;p&gt;The second section is the &lt;em&gt;script&lt;/em&gt; section which holds the scripting and logic for that component. This includes any method you want to call from the view.&lt;/p&gt;

&lt;p&gt;The third section is the &lt;em&gt;style&lt;/em&gt; section which holds the styling and layout design (CSS, duh) of that Component.&lt;/p&gt;

&lt;p&gt;Like React, you can use an external state manager like &lt;strong&gt;Vuex&lt;/strong&gt; or define and manage  the state locally in the Component.&lt;/p&gt;

&lt;p&gt;The Async keyword is used in defining any method which will run asynchronously for example fetching data from an API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Again, like in React, properties passed from the context of a parent is called props while local properties is called state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The state of a Component is returned in the data method of that component, defined in the &lt;em&gt;script&lt;/em&gt; section.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to pass dynamic data to a Vue component, or attach some logic before some data renders, or maybe loop through data, you use a Vue directive. Examples are v-of, v-for, v-bind. There are many other directives for different tasks.&lt;/p&gt;

&lt;p&gt;Here is a typical code for defining a button component with Vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you noticed the similarlity between the Vue button component and the React button component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's why I love these two so much&lt;/strong&gt; üòç&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: Having strong knowledge of JavaScript (especially ES6) is great. Check out  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;React and Vue are immensely popular and they show no signs of slowing down. &lt;/p&gt;

&lt;p&gt;If you are an aspiring web developer looking for something to learn, you should really consider those two.&lt;/p&gt;

&lt;p&gt;If you benefitted from this article, you can support me üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learning OO Ruby</title>
      <author>Dorthy Thielsen</author>
      <pubDate>Tue, 18 May 2021 20:58:43 +0000</pubDate>
      <link>https://dev.to/dotnotation/learning-oo-ruby-24bf</link>
      <guid>https://dev.to/dotnotation/learning-oo-ruby-24bf</guid>
      <description>&lt;p&gt;This week I started learning about OOP in Ruby. At first when the idea of classes and objects were introduced in a very round about lecture, I was a little overwhelmed. However after just reading about it, it became so much easier and intuitive. Goes to show you that sometimes you need a different explanation from a different source. I will note that the instructor said they weren't feeling well, so that is probably  why the lecture was unsuccessful for myself. &lt;/p&gt;

&lt;p&gt;First we were introduced to writer/setter and reader/getter methods along with @instance_variables. It was great to finally have a way to call a variable outside of the method without making a global variable, which I have been told to never do. Basically the writer method sets up our instance variable. It takes a value and writes it into a variable or takes in an argument and sets that argument equal to a variable. You are setting a property to take parameters that will be used in your instance variable by each instance of the class. The reader method then returns the stored information of an instance variable. This is the part that allows us to call the instance variable outside the method anywhere in our program. Initially they had us writing each step out in a very long way&lt;br&gt;
ex.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When they were teaching this I immediately thought, "This seems like such a long way to write this code. There must be another way." To my relief, there is a simpler way to write all of this. Riding in on a noble steed was the attr_accessor, attr_reader, and attr_writer. This allows you to create attributes for each instance of your objects in one line of code instead of writing each reader and writer method yourself. Wouldn't you much rather write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;
  &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:page_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:genre&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt; 

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rather than write all of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author&lt;/span&gt;
    &lt;span class="vi"&gt;@author&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;page_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@page_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;page_count&lt;/span&gt;
    &lt;span class="vi"&gt;@page_count&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@genre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;genre&lt;/span&gt;
    &lt;span class="vi"&gt;@genre&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think everyone would answer that the first way looks so much better and less repetitive. Here we can replace six methods and combine them into one in the attr_accessor which creates the writer and reader methods for you. Also instead of having to write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can turn the reader method into an attr_reader and have all the code fit on one line. Easy peasy. Here is another example of utilizing all of these methods and also adding in some functionality into everything too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Shoe&lt;/span&gt;
  &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:material&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:condition&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:brand&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@brand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cobble&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Your shoe is as good as new!"&lt;/span&gt;
    &lt;span class="vi"&gt;@condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"new"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am excited to learn more about OOP and how to better write code.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>ruby</category>
      <category>oop</category>
    </item>
    <item>
      <title>Promise based Dialog in Vue 2</title>
      <author>Adam Kalinowski</author>
      <pubDate>Tue, 18 May 2021 20:30:40 +0000</pubDate>
      <link>https://dev.to/hardyng/promise-based-dialog-in-vue-2-22e3</link>
      <guid>https://dev.to/hardyng/promise-based-dialog-in-vue-2-22e3</guid>
      <description>&lt;p&gt;Dialogs visually exist "outside" application, and because of it, never really felt right for me to include them in places where they don't belong to. HTML regarding Dialogs is often placed in the root of the application or in the components where they are called from, and then, usually by portals, transferred to the top. Logic, which is controlling which dialog should pop up and when, is also, either in store or component, or maybe have its own service. Sometimes logic meant to control dialogs is lacking in features, and then, oops, we cannot open dialog &lt;em&gt;inside&lt;/em&gt; another dialog. Too bad if we need it.&lt;/p&gt;

&lt;p&gt;I feel like we can solve all the issues with simply handling dialogs as a function. We want dialog? Let's call it, and as a parameter put the component we want to display. We can wrap it in a promise, so we know exactly when the dialog is closed and with what result, and then make some calls based on that.&lt;/p&gt;

&lt;p&gt;To visualize how I imagine working with that I made snippet below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ConfirmDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The benefit of doing all the logic regarding dialogs by ourselves is that we have full control over this, we can add new features based on our needs, and make our dialogs look however we want. So, let's build it.&lt;/p&gt;

&lt;p&gt;First, we need to create Dialog Wrapper component. Its purpose is to provide basic styles and some logic for closing the dialog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dialog-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dialog-mask"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"$emit('close')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;component&lt;/span&gt; &lt;span class="na"&gt;:is=&lt;/span&gt;&lt;span class="s"&gt;"dialogComponent"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;close=&lt;/span&gt;&lt;span class="s"&gt;"response =&amp;gt; $emit('close', response)"&lt;/span&gt;
               &lt;span class="na"&gt;v-bind=&lt;/span&gt;&lt;span class="s"&gt;"props"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DialogWrapper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dialogComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;props&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.dialog-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dialog-mask&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can change styles so it fits you. You can also add additional logic, we can add animations and other features, but I wanted to keep it simple. You will be getting two props, &lt;code&gt;dialogComponent&lt;/code&gt; and &lt;code&gt;props&lt;/code&gt; (confusing, I know).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dialogComponent is Vue component which will be rendered inside&lt;/li&gt;
&lt;li&gt;props are props passed to &lt;code&gt;dialogComponent&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You close dialog by emitting event &lt;em&gt;close&lt;/em&gt;, and if you want to pass a value which will be used when resolving a promise - you pass data with the event, e.g. &lt;code&gt;$emit('close', 'success!')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let's make a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dialogComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogWrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;propsData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dialogComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// optional, instance of vue router&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// optional, instance of vuex store&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;$mount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will create a new Vue instance and append it to &lt;code&gt;document.body&lt;/code&gt;. It will use &lt;code&gt;DialogWrapper&lt;/code&gt; as main component, and will pass function parameters as props by using &lt;code&gt;propsData&lt;/code&gt; property. It will also listen for &lt;code&gt;close&lt;/code&gt; event to know where to destroy itself.&lt;/p&gt;

&lt;p&gt;It's important to add &lt;code&gt;router&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt; property when initializing component, if you're using it, because otherwise your components will have no access to &lt;code&gt;$store&lt;/code&gt; and &lt;code&gt;$router&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we have our dialog function working, but I cut a lot of code I'm using for conveniance of this article, and leave only the core logic. It's good idea to create another component - let's call it &lt;code&gt;DialogLayout&lt;/code&gt;, which will create actual white box with some padding. You can, if you want, put some more effort in that; for example, adding dialog title or close button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dialog-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.dialog-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can move into testing part of the article.&lt;/p&gt;

&lt;p&gt;Let's create example component which we will later pass as a &lt;code&gt;openDialog&lt;/code&gt; parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;DialogLayout&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"$emit('close', 'wow! success')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Close dialog&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/DialogLayout&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has button which will close the dialog with resolved value &lt;code&gt;'wow! success&lt;/code&gt;. It also uses &lt;code&gt;DialogLayout&lt;/code&gt; for some basic styling.&lt;/p&gt;

&lt;p&gt;Somewhere in our application we can call our function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onBtnClick&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// dialog is now closed&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 'wow! success'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although it requires some initial configuration, payback is huge. I'm using it for years now and it fits my needs perfectly. It's also easy to extend with additional features.&lt;/p&gt;

&lt;p&gt;It's important to note, that this dialog will not be animated. Animation can be added quite easily, but it's beyond scope of this article.&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading, and in case of any questions, please write comment or send me an email - &lt;a href="mailto:iam.adam.kalinowski@gmail.com"&gt;iam.adam.kalinowski@gmail.com&lt;/a&gt;. Have a nice day!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 raisons pourquoi j'aimes Laravel !</title>
      <author> </author>
      <pubDate>Tue, 18 May 2021 20:13:19 +0000</pubDate>
      <link>https://dev.to/ericcodeur/10-raisons-pourquoi-j-aimes-laravel-cc3</link>
      <guid>https://dev.to/ericcodeur/10-raisons-pourquoi-j-aimes-laravel-cc3</guid>
      <description>&lt;p&gt;Au cours des deux derni√®res ann√©es, j'ai essay√© plusieurs langages et frameworks de programmation. J'ai r√©alis√© des projets avec Django, Laravel, Ruby on Rails et Node.js avec Express.js&lt;/p&gt;

&lt;p&gt;J'ai ador√© tout ces frameworks. Ils sont tous matures et font tous le travail. En revanche, l'un de ces framework m'a s√©duit un peu plus que les autres ... Laravel.&lt;/p&gt;

&lt;p&gt;Voici les 10 raisons pour lesquelles je crois sinc√®rement que Laravel est g√©nial!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;PHP est g√©nial! Oui. Ceux qui pr√©tendent le contraire sont, d√©sol√©s de le dire, ignorants. Ils ignorent que PHP 3.0 est obsol√®te depuis longtemps et que PHP 8 est d√©sormais un langage POO complet, relativement rapide, mature, stable et tr√®s agr√©able √† utiliser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Le framework Laravel est pr√©cis√©ment construit en POO avec les derniers standards PHP. La syntaxe de Laravel est simple, claire et √©l√©gante.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il n'y a presque pas de code standard √† √©crire. Compar√© √† plusieurs autres frameworks, Laravel est livr√© avec une configuration de d√©marrage compl√®te. Gr√¢ce aux librairies de Laravel, d√©velopper une application web c'est simple et ultra rapide!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Il existe une panoplie de packages tiers. Pourquoi r√©-inventer la roue ? Utilisez un package existant et √©conomisez des heures et des heures de d√©veloppement... Un point fort en faveur de Laravel est que les packages tier Laravel sont maintenu, √† jour et pr√™t pour √™tre utilis√© sur des vraie projets! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Les cr√©ateurs de Laravel ont cr√©√© un √©co-syst√®me de produits professionnels qui compl√®te Laravel d'une mani√®re merveilleuse. Bien s√ªr, ces produits sont payants, mais en retour, ils sont pr√™ts pour la mise en production √† grande √©chelle et peuvent vous faire √©conomiser des centaines d'heures de d√©veloppement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il est √©galement possible de cr√©er des applications fullstack, c'est-√†-dire backend mais aussi frontend. Le code reste ex√©cut√© sur le serveur mais certains produits comme Livewire permettent de d√©velopper des UI interactives comme React mais en pur PHP, simple et facile et sans une ligne de code Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel prend √©galement en charge la cr√©ation de composants d'interface utilisateur. Il est donc possible d'int√©grer dans votre UI des widgets d√©j√† pr√©-d√©velopp√©s et cl√© en main qui peuvent √™tre install√©s en moins d'une minute et toujours en PHP pur et sans javascript. (ex. graphique chart, calendrier, datatable, ect.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel est open source mais il est d√©velopp√© par ces cr√©ateurs comme un produit pro. C'est-√†-dire que les retours clients sont pris en compte dans les d√©cisions et que des corrections et am√©liorations sont r√©guli√®rement publi√©es. Laravel peut se targuer d'√™tre √† jour avec les derni√®res technologies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Une documentation incroyables. Laravel a √† mon avis la meilleure documentation pour un framework backend. Tout est simple, clair et d√©taill√© avec des exemples. Les outils de recherche fonctionnent tr√®s bien, il est donc facile de trouver ce que vous recherchez. De plus, elle est r√©guli√®rement mis √† jour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;La communaut√© Laravel est g√©niale! Tout le monde est le bienvenu pour rejoindre la famille. Il n'y a pas de discrimination et pas de snobisme. Aucune question n'est consid√©r√©e comme stupide. Les gens veulent aider du mieux qu'ils peuvent.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;C'est tout :-)&lt;/p&gt;

&lt;p&gt;Si cela vous donne envie d'en savoir plus sur Laravel et pourquoi pas l'essayer. Vous pouvez commencer ici: &lt;a href="http://www.laravel.com"&gt;www.laravel.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Je publierai plusieurs articles dans les semaines √† venir sur Laravel. Vous pouvez me suivre si vous ne voulez rien manquer.&lt;/p&gt;

</description>
      <category>french</category>
      <category>php</category>
      <category>laravel</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Self hosting with Pi</title>
      <author>Mark</author>
      <pubDate>Tue, 18 May 2021 20:09:33 +0000</pubDate>
      <link>https://dev.to/markhelmsglitch/self-hosting-with-a-pi-1dpi</link>
      <guid>https://dev.to/markhelmsglitch/self-hosting-with-a-pi-1dpi</guid>
      <description>&lt;p&gt;Self Hosting! &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#cough-cough-this-might-take-a-while-it-did-for-me"&gt;
  &lt;/a&gt;
  (cough cough, this might take a while...    it did for me)
&lt;/h6&gt;

&lt;p&gt;If your looking for the end all be all self hosting guide this is not it, but it will at least give you a good idea of how to do it for your own situation you got going on. Through this guide you'll probably have a better understanding of how hosting works.&lt;/p&gt;

&lt;p&gt;First lets go over the steps we'll take for setting up this environment on a raspberry pi.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Linux&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling Wifi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Nginx and Node.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure UFW&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the router&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring Nginx config files to listen in on specified ports and folders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Register your site through google domains&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Point google domains at your device&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing Certbot for SSL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Serve to the WEB!&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of this tutorial is done from the Linux terminal and is under the assumption of using VS Code with SSH enabled or have access to an SSH client &lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-installing-linux"&gt;
  &lt;/a&gt;
  1. Installing linux
&lt;/h3&gt;

&lt;p&gt;Install Linux Server /Ubuntu 20.04 UTS using Raspberry Pi Imager&lt;/p&gt;

&lt;p&gt;You will have to download the Ubuntu 20.04 UTS image seperately&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OIZOYbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do27v35uf4lhp2k0zvok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OIZOYbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do27v35uf4lhp2k0zvok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-enabling-wifi"&gt;
  &lt;/a&gt;
  2. Enabling wifi
&lt;/h3&gt;

&lt;p&gt;How to Connect to WiFi from the Terminal in Ubuntu Linux&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Identify your wireless network interface name:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are several ways to identify your network interface name. You can use the ip command, the deprecated ipconfig command or check this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls /sys/class/net
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should give you all the available networking interface (Ethernet, wifi and loopback). The wireless network interface name starts with ‚Äòw‚Äô and it is usually named similar to wlan0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:~$ ls /sys/class/net
eth0 lo wlan0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Then Edit the Netplan configuration file with the wifi interface details&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/netplan/50-cloud-init.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;YAML files are very sensitive about spaces, indention and alignment. DONT USE TAB KEY FOR SPACING, use 4 (or 2, whichever is already used in the YAML file) spaces instead where you see an indention.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;network:

    ethernets:

        eth0:

            dhcp4: true

            optional: true

    version: 2

    wifis:

        wlan0:

            dhcp4: true

            optional: true

            access-points:

                "SSID_name":

password: "WiFi_password"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate the configuration using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo netplan generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now to apply this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo netplan apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should have network connected. &lt;/p&gt;

&lt;p&gt;If not restarting Linux should do the trick.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-installing-nginx-and-node"&gt;
  &lt;/a&gt;
  3. Installing Nginx and node
&lt;/h3&gt;

&lt;p&gt;just run the commands below one after the other&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install nginx
sudo apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-configuring-ufw"&gt;
  &lt;/a&gt;
  4. Configuring UFW
&lt;/h3&gt;

&lt;p&gt;This enables UFW to run and allows the ports that we need to communicate &lt;/p&gt;

&lt;p&gt;if you don't have VS Code installed on another computer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ufw enable

sudo ufw allow 443

sudo ufw allow ssh

sudo ufw allow from 0.0.0.0/24 to any port 22 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-configuring-the-router"&gt;
  &lt;/a&gt;
  5. Configuring the router
&lt;/h3&gt;

&lt;p&gt;log in to your router and enable the IP address to communicate only on port 443 for https access and SSL certs later on.&lt;/p&gt;

&lt;p&gt;Here is a link for that if you need help&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.netspotapp.com/how-to-log-into-router.html"&gt;https://www.netspotapp.com/how-to-log-into-router.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-configuring-nginx-config-files-to-listen-in-on-specified-ports-and-folders"&gt;
  &lt;/a&gt;
  6. Configuring Nginx config files to listen in on specified ports and folders
&lt;/h3&gt;

&lt;p&gt;Useful commands for managing Nginx and apply updates&lt;/p&gt;

&lt;p&gt;To restart and apply changes made&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tests if the current Nginx configuration is viable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nginx -T 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to apply changes as you go.&lt;/p&gt;

&lt;p&gt;Now go to file location:    /etc/nginx/sites-available/default &lt;/p&gt;

&lt;p&gt;and change the contents to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {

    root /usr/share/nginx/html;

    listen [::]:443 ssl ipv6only=on;
    listen 443 ssl;

    location / {
            proxy_pass http://Your IP Address:port number;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
    }   

}

server {

     if ($host = Yoursite.com) {
        return 301 https://$host$request_uri;
    } 

    listen 80 ;
    listen [::]:80 ;
    server_name Yoursite.com;
    return 404; 

    location / {  
            satisfy any;  
            allow 127.0.0.1;  
            deny all;  
            auth_basic "closed site";  
            auth_basic_user_file conf/htpasswd;  
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next go to file location /etc/nginx/nginx.conf&lt;/p&gt;

&lt;p&gt;and change that file as well to look like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {

    server {
    listen 80;
    }

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip off;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-registering-your-site-through-google-domains"&gt;
  &lt;/a&gt;
  7. Registering your site through google domains
&lt;/h3&gt;

&lt;p&gt;Log into/ register &lt;a href="http://domains.google.com/"&gt;domains.google.com&lt;/a&gt; and select Get a new domain, and continue through the process of obtaining your domain name. &lt;/p&gt;

&lt;p&gt;Once you have obtained your domain name:&lt;/p&gt;

&lt;p&gt;Go to google domains and log in ‚Üí select your domain of choice ‚Üí select DNS on the left side bar‚Üí select Dynamic DNS under Synthetic records ‚Üíselect add ‚Üí gather your Username and Password that google domains generates for your Dynamic DNS synthetic record&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp5I17n---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz6v1pyua0lxunq0zcus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp5I17n---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz6v1pyua0lxunq0zcus.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-point-google-domains-at-your-device"&gt;
  &lt;/a&gt;
  8. Point google domains at your device
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;  Have google domains point to and update the reported IP every  30 min. for dynamic IP address&lt;/p&gt;

&lt;p&gt;run this script from any directory of your choosing, it will run properly no matter where its stored&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/dns_update_script.sh
    wget https://username:password@domains.google.com/nic/update?hostname=yourdomain.com -qO dns_update_results.txt
    wget https://username:password@domains.google.com/nic/update?hostname=www.yourdomain.com -qO- &amp;gt;&amp;gt; dns_update_results.txt
    echo " Last run: `date`" &amp;gt;&amp;gt; dns_update_results.txt
chmod +x ~/dns_update_script.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script downloads the web pages to the text file (the first wget creates the text file, the second wget appends to the text file) and then I also append the current date and time to the text file.&lt;/p&gt;

&lt;p&gt;Remember to replace username:password with YOUR username and password that google domains provide when generating your DNS.&lt;/p&gt;

&lt;p&gt;Also do not forget to change &lt;a href="http://yourdomain.com"&gt;yourdomain.com&lt;/a&gt; &amp;amp; &lt;a href="http://www.yourdomain.com"&gt;www.yourdomain.com&lt;/a&gt; to the domain name of your site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; Setup a cron job to run the script at the start of every hour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;crontab -e
    0 * * * * ~/dns_update_script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-installing-certbot-for-ssl"&gt;
  &lt;/a&gt;
  9. Installing Certbot for SSL
&lt;/h3&gt;

&lt;p&gt;Follow the instructions that Certbot provides on there site&lt;/p&gt;

&lt;p&gt;&lt;a href="https://certbot.eff.org/instructions"&gt;https://certbot.eff.org/instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-serving-to-the-web"&gt;
  &lt;/a&gt;
  10. Serving to the WEB!
&lt;/h3&gt;

&lt;p&gt;serving your web app to the web with node.js and express or just a static site&lt;/p&gt;

&lt;p&gt;The default location to store your site should be: &lt;/p&gt;

&lt;p&gt;/usr/share/nginx/html&lt;/p&gt;

&lt;p&gt;From that directory you will add your static site or applications that run from your self hosted site&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  CONGRATULATIONS!!!
&lt;/h2&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;At this point you should be able to go to your browser an type in "yourdomain.com"&lt;/p&gt;

&lt;p&gt;and see your new website with HTTPS enabled and verified.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>nginx</category>
      <category>html</category>
    </item>
    <item>
      <title>How to use SVGR?</title>
      <author>Mihriban Alp</author>
      <pubDate>Tue, 18 May 2021 20:09:29 +0000</pubDate>
      <link>https://dev.to/mihrilp/how-to-use-svgr-25gj</link>
      <guid>https://dev.to/mihrilp/how-to-use-svgr-25gj</guid>
      <description>&lt;p&gt;Hey Everyone, this is my first post and i'll mention about &lt;a href="https://react-svgr.com/"&gt;SVGR&lt;/a&gt;. If you've never heard of it before, SVGR is an amazing tool that converts your SVGs into React components.&lt;/p&gt;

&lt;p&gt;There are a few ways for using SVGR:&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#1playground"&gt;
  &lt;/a&gt;
  1.Playground.
&lt;/h4&gt;

&lt;p&gt;You can use their online &lt;a href="https://react-svgr.com/playground/"&gt;playground&lt;/a&gt;. Enter your svg code in the left box (SVG INPUT) then you will see the converted React component on right box (JSX OUTPUT).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1ED_1vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58886855/117895443-08c07a00-b2c7-11eb-9d69-13eebdb304b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1ED_1vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58886855/117895443-08c07a00-b2c7-11eb-9d69-13eebdb304b4.png" alt="Playground - SVGR ‚Äî Firefox Developer Edition 5_10_2021 2_14_43 AM (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also create components for React-Native, TypeScript etc. You just need to mark from the left of the screen.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#2command-line"&gt;
  &lt;/a&gt;
  2.Command Line
&lt;/h4&gt;

&lt;p&gt;First you need to install the CLI tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @svgr/cli --save-dev
# or use yarn
yarn add @svgr/cli --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's think we have an svg named "my_icon.svg" in the project directory. If we write this command line to terminal we will get the code of the our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @svgr/cli my_icon.svg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SvgMyIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;
      &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 499.859 499.859&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M469.223 270.371c9.237-9.218 14.329-21.48 14.335-34.53.007-13.05-5.071-25.318-14.298-34.546a48.44 48.44 0 00-15.946-10.611l20.045-19.969c9.258-9.214 14.365-21.481 14.38-34.543s-5.062-25.342-14.298-34.578l-.519-.519a48.52 48.52 0 00-25.169-13.37c.56-2.968.857-6.007.86-9.094.015-13.06-5.063-25.339-14.298-34.573l-.637-.637c-9.221-9.221-21.48-14.299-34.52-14.299-8.804 0-17.248 2.323-24.645 6.665a48.603 48.603 0 00-11.268-17.559l-.42-.422c-19.033-19.03-50.004-19.033-69.039.001L163.331 148.244l16.204-66.917c6.402-26.44-8.045-53.401-33.605-62.715-14.384-5.242-30.346-4.048-43.792 3.271S79.026 41.96 75.618 56.886l-2.222 9.736C62.768 113.177 45.2 159.96 21.18 205.668 3.181 239.918-3.674 279.973 1.878 318.455c5.744 39.816 23.855 75.938 52.376 104.458 35.01 35.011 81.542 54.286 131.049 54.284h.126c49.552-.032 96.113-19.373 131.105-54.458l37.349-37.448zm-173.93 131.182c-29.328 29.406-68.353 45.616-109.883 45.644h-.106c-41.491 0-80.495-16.155-109.837-45.497-23.906-23.905-39.085-54.173-43.897-87.528-4.656-32.273 1.086-65.852 16.167-94.549 25.228-48.006 43.702-97.237 54.907-146.325l2.222-9.735c1.514-6.633 5.639-12.077 11.615-15.33s12.789-3.761 19.18-1.433c11.194 4.079 17.522 15.887 14.718 27.467l-28.77 118.803c-3.413 12.246 12.364 25.887 25.185 14.137L315 39.001c7.337-7.339 19.276-7.337 26.601-.014l.42.421c3.554 3.555 5.511 8.279 5.511 13.306s-1.958 9.752-5.511 13.307L238.659 169.382c-5.858 5.857-5.858 15.355 0 21.213s15.356 5.858 21.213 0l125.982-125.98c3.554-3.555 8.279-5.512 13.306-5.512s9.752 1.957 13.307 5.512l.637.637a18.695 18.695 0 015.512 13.327 18.697 18.697 0 01-5.544 13.317c-37.611 37.461-89.049 88.677-126.281 125.783-5.87 5.847-5.888 15.344-.042 21.214a14.953 14.953 0 0010.627 4.414c3.829 0 7.659-1.457 10.585-4.372 25.028-24.931 93.218-92.857 117.168-116.678 7.337-7.301 19.261-7.287 26.581.031l.518.519c3.561 3.561 5.518 8.294 5.512 13.329s-1.975 9.764-5.548 13.32c-36.483 36.339-94.262 93.883-130.424 129.934-5.869 5.848-5.887 15.345-.04 21.214a14.955 14.955 0 0010.626 4.413c3.829 0 7.66-1.458 10.586-4.373l68.783-68.524 9.78-9.68c7.337-7.262 19.245-7.229 26.544.068a18.691 18.691 0 015.511 13.316 18.685 18.685 0 01-5.518 13.303L332.675 364.072zM451.123 374.497c3.26-7.615-.271-16.433-7.886-19.692-7.616-3.262-16.433.27-19.693 7.886-5.032 11.754-12.214 22.345-21.346 31.477-11.157 11.156-24.34 19.323-39.184 24.274-7.859 2.621-12.105 11.116-9.484 18.976 2.096 6.284 7.948 10.258 14.228 10.258 1.573 0 3.173-.249 4.748-.774 19.3-6.438 36.428-17.042 50.906-31.521 11.845-11.847 21.169-25.602 27.711-40.884zM490.765 382.77c-7.615-3.264-16.433.261-19.697 7.876-7.009 16.349-17.003 31.079-29.704 43.78-14.772 14.772-32.148 25.807-51.644 32.796-7.798 2.796-11.854 11.384-9.058 19.183 2.196 6.126 7.967 9.941 14.121 9.941 1.68 0 3.389-.284 5.062-.884 23.698-8.496 44.804-21.895 62.732-39.823 15.412-15.411 27.545-33.301 36.064-53.173 3.264-7.614-.262-16.432-7.876-19.696z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SvgMyIcon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, but if we have more than one icon, converting them one by one can be a bit boring and exhausting. One of the best ways to using SVGR is add a script to your package.json to automate the SVG transformation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgr icons -d components/icons --icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the script below transforms each SVG in the "icons" folder by composing React in "components/icons".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run svgr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#3webpack"&gt;
  &lt;/a&gt;
  3.Webpack
&lt;/h4&gt;

&lt;p&gt;For install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @svgr/webpack --save-dev
# or use yarn
yarn add @svgr/webpack --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update your webpack.config.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;svg$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@svgr/webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import our SVGs as a React component and use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./my_icon.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
You can check the documentation for more üëâ  &lt;a href="https://react-svgr.com/docs/getting-started/"&gt;https://react-svgr.com/docs/getting-started/&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading üòä
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Cellular IoT?</title>
      <author>Rob Lauer</author>
      <pubDate>Tue, 18 May 2021 20:01:26 +0000</pubDate>
      <link>https://dev.to/blues/what-is-cellular-iot-286g</link>
      <guid>https://dev.to/blues/what-is-cellular-iot-286g</guid>
      <description>&lt;p&gt;To say we live in a wirelessly connected world feels like a bit of a cliche. Many of us start our days checking smartphones, accessorizing with wearables, and telling Alexa to "play top songs by Nickelback". Ok, maybe not so much that last one.&lt;/p&gt;

&lt;p&gt;The tin cans and wire of days gone by have been replaced by communication protocols like Wi-Fi, Bluetooth, and cellular to provide us seamless connectivity from home to work to...anywhere!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCj6brD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r94pbp9jhbi4fj568wl5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCj6brD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r94pbp9jhbi4fj568wl5.jpg" alt="blues wireless notecard in the desert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The cellular-enabled &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard&lt;/a&gt; from Blues Wireless. Not to scale.&lt;/em&gt; üòä&lt;/p&gt;

&lt;p&gt;IoT developers today have myriad choices when deciding &lt;a href="https://blues.io/blog/network-connectivity/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;which network connectivity option is best for them&lt;/a&gt;. When you add up all the pros and cons, many are surprised to find cellular as the logical path forward (if not for a primary connection, then as a fallback).&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;mature and ubiquitous means of connecting IoT devices&lt;/strong&gt; is prized for its reliability and reach, yet vilified for its traditionally obtuse pricing and relatively low data throughput.&lt;/p&gt;

&lt;p&gt;In this blog series we are demystifying cellular and taking a critical look at four key topics related to wireless in the Internet of Things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Cellular IoT? (that's today)&lt;/li&gt;
&lt;li&gt;The Advantages of Cellular IoT (coming soon!)&lt;/li&gt;
&lt;li&gt;Common Use Cases for Cellular IoT (coming soon!)&lt;/li&gt;
&lt;li&gt;Cellular IoT Network and Infrastructure Redundancy (coming soon!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-cellular-iot-anyway"&gt;
  &lt;/a&gt;
  So What is Cellular IoT Anyway?
&lt;/h2&gt;

&lt;p&gt;Cellular IoT technologies allow physical devices (e.g. sensors, actuators, and their host microcontrollers or single-board computers) to connect to a private network or the public Internet for the purpose of transmitting data.&lt;/p&gt;

&lt;p&gt;By leveraging the same infrastructure as mobile phones, cellular IoT takes advantage of the broad availability of existing cellular networks, but without the power requirements of traditional cellular applications. With 5G just around the corner, cellular IoT is well-positioned to take advantage of higher bandwidth solutions that would normally be allocated to Wi-Fi or wired Ethernet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lBK2V8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a16uw4h35ldgh2prgzhx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lBK2V8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a16uw4h35ldgh2prgzhx.jpg" alt="cell towers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image credit &lt;a href="https://unsplash.com/@riiyad"&gt;@riiyad&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we think about how cellular relates to the Internet of Things in particular, we stop thinking about just &lt;em&gt;person-to-device&lt;/em&gt; cellular connections and instead open up to &lt;em&gt;device-to-device&lt;/em&gt; connections (or device &amp;lt;--&amp;gt; person &amp;lt;--&amp;gt; device and every other iteration in between!).&lt;/p&gt;

&lt;p&gt;The opportunities for the IoT then become limitless. Connected IoT solutions can be everything from streetlights that are controlled automatically, to remotely-monitored parking garages, to agricultural applications that optimize irrigation and fertilizer usage, or Machine Learning solutions that predict anomalies in remote settings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-critical-role-of-ltem-and-nbiot"&gt;
  &lt;/a&gt;
  The Critical Role of LTE-M and NB-IoT
&lt;/h2&gt;

&lt;p&gt;Let's take a closer look at two key technologies underpinning cellular IoT: &lt;a href="https://en.wikipedia.org/wiki/LTE-M"&gt;LTE-M&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Narrowband_IoT"&gt;NB-IoT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While 2G/3G protocols are perfectly adequate for many IoT applications, modern IoT generally relies on LTE-M or NB-IoT. The rapid proliferation of these wireless standards is setting us up for a new dawn of IoT connectivity.&lt;/p&gt;

&lt;p&gt;These standards were designed from the start around low power consumption, embedded security, and reliability. Combining these technical advantages with existing ubiquitous cellular networks has provided the world with an unparalleled choice for remote IoT connectivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ltem"&gt;
  &lt;/a&gt;
  What is LTE-M?
&lt;/h3&gt;

&lt;p&gt;You can probably hazard a guess that LTE-M is closely related to the popular LTE (Long-Term Evolution) wireless standard. The &lt;a href="https://en.wikipedia.org/wiki/List_of_countries_by_4G_LTE_penetration"&gt;countries that support LTE&lt;/a&gt; encompass a vast list primarily comprised of the Americas and parts of Europe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrlkZHxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9oykcud9u1wi3rwv39ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrlkZHxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9oykcud9u1wi3rwv39ex.png" alt="LTE-M logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LTE-M effectively stands for "Long-Term Evolution for Machines" and allows for IoT devices to piggyback on existing LTE networks. It was designed in a power-conscious manner for applications that require low-to-medium data throughput. With a bandwidth of 1.4 MHz (compared to 20 MHz for LTE), LTE-M provides great range but less throughput than LTE (approximately 375KB down and 300KB up). LTE-M also offers cell tower handoff features, making it a great mobility solution (even across multiple regions).&lt;/p&gt;

&lt;p&gt;Asset tracking, wearables, home security, and home/business monitoring are all great examples of use cases for LTE-M in the IoT.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nbiot"&gt;
  &lt;/a&gt;
  What is NB-IoT?
&lt;/h3&gt;

&lt;p&gt;Considering the Internet of Things is literally part of the name, NB-IoT was designed for the IoT. NB-IoT stands for "Narrowband-IoT" and is great for areas without robust LTE coverage or when bandwidth requirements are relatively minimal. Again, per its name, NB-IoT uses just a &lt;em&gt;narrow band&lt;/em&gt; of the full bandwidth available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlBrr2wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w4zdhiukuv4yxtsedgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlBrr2wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w4zdhiukuv4yxtsedgt.png" alt="NB-IoT logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Available globally where GSM is the flag-bearer (such as much of Europe, Africa, and Asia), NB-IoT devices consume very little power and provide less data throughout than LTE-M (approximately 60KB down and 30KB up). Compared to LTE-M's bandwidth of 1.4 MHz, NB-IoT operates on 200 KHz, providing &lt;strong&gt;longer range and better indoor penetration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Certain use cases like smart cities (e.g. parking meters, utility monitoring), parking garages, indoor deployments, and agricultural settings are great examples of suitable NB-IoT implementations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-does-5g-fit"&gt;
  &lt;/a&gt;
  Where Does 5G Fit?
&lt;/h3&gt;

&lt;p&gt;We've all been subject to the hype around 5G. Some of it is warranted, but frankly the rest is a lot of marketing to get us to buy new phones.&lt;/p&gt;

&lt;p&gt;Like the other "xG" standards we've gotten used to (2G/3G/4G), 5G is another ladder rung towards faster and stronger network connections. As IoT deployments accelerate in scope and magnitude, one can imagine industrial applications comprised of thousands of devices that are pushing gigabytes of data every day. 5G will likely be our destination come that time.&lt;/p&gt;

&lt;p&gt;What about today? Are you likely to be live streaming 4K video with a Raspberry Pi Zero? Probably not, but the opportunity of 5G is intriguing as we look towards the greenfield future of IoT.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltem-and-nbiot-on-the-notecard"&gt;
  &lt;/a&gt;
  LTE-M and NB-IoT on the Notecard
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard from Blues Wireless&lt;/a&gt; provides cellular IoT connectivity in a low-power fashion using LTE-M, NB-IoT, and Cat-1 technologies. In global regions without these capabilities, coverage is supported by UMTS/HSPA+ and GSM/GPRS/EDGE wireless standards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psTC12-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l962ocpj0yh54tuhcq6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psTC12-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l962ocpj0yh54tuhcq6w.png" alt="blues wireless notecard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Notecard is a secure device-to-cloud data-pump that comes with 500 MB of data and 10 years of cellular service. It's a tiny 30mm x 34mm SoM and ships ready to embed in a project via its M.2 edge connector. To make prototyping IoT projects easier, Blues Wireless provides a series of expansion boards to host the Notecard called &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries#notecarrier"&gt;Notecarriers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Businesses love the Notecard for its straightforward pricing: &lt;strong&gt;$49 for 10 years of service and 500MB of data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Developers love the Notecard for its microcontroller- and single-board computer-agnostic approach (bring your own MCU or SBC!), its open source libraries for &lt;a href="https://github.com/blues/note-python"&gt;Python&lt;/a&gt;, &lt;a href="https://github.com/blues/note-c"&gt;C/C++&lt;/a&gt;, and &lt;a href="https://github.com/blues/note-arduino"&gt;Arduino&lt;/a&gt;, and its friendly JSON-in and JSON-out request/response interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An example of adding a "note", or an event, with the &lt;a href="https://dev.blues.io/reference/complete-api-reference/introduction/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard API&lt;/a&gt;:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   "req":"note.add",
   "body":{
      "temperature": 35.5,
      "humidity": 56.23
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Cellular IoT technologies like LTE-M and NB-IoT introduce significant advantages for remote IoT deployments. Growing to become an ideal option for a wide range of applications, especially those in mobile or otherwise unpredictable locations, cellular is a mature, reliable, and logical choice.&lt;/p&gt;

&lt;p&gt;Learn more about how Blues Wireless is making cellular IoT adoption easier for businesses AND developers with the &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard and Notecarrier&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>iot</category>
      <category>cellular</category>
      <category>cloud</category>
    </item>
    <item>
      <title>State Management With WebAssembly &amp; Rust</title>
      <author>Sean Watters</author>
      <pubDate>Tue, 18 May 2021 19:56:18 +0000</pubDate>
      <link>https://dev.to/seanwatters/state-management-with-webassembly-rust-5a1g</link>
      <guid>https://dev.to/seanwatters/state-management-with-webassembly-rust-5a1g</guid>
      <description>&lt;p&gt;Link to my original Medium post &lt;a href="https://seanwatters.medium.com/state-management-with-webassembly-rust-66d80432959f"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#object-oriented-state-management-with-webassembly-and-rust"&gt;
  &lt;/a&gt;
  Object Oriented State Management With WebAssembly and Rust
&lt;/h1&gt;

&lt;p&gt;State management in any application is always a &lt;em&gt;super&lt;/em&gt; fun problem to solve. When it comes to integrating WebAssembly with existing applications or starting from scratch with a new project, this problem gets even more interesting, but it‚Äôs not as complicated as it may seem.&lt;/p&gt;

&lt;p&gt;Before we jump in, I do want to make it known that this may not yet be the most performant solution for general state management (‚Äú&lt;em&gt;yet&lt;/em&gt;‚Äù is important there). Interop between JavaScript and WebAssembly still suffers some performance limitations when it comes to serialization and de-serialization of complex data structures, but it is &lt;a href="https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%f0%9f%8e%89/"&gt;improving&lt;/a&gt; and there are &lt;a href="https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md"&gt;proposals&lt;/a&gt; that are on their way that could have a significant, positive impact on performance.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#jumping-in"&gt;
  &lt;/a&gt;
  Jumping In
&lt;/h2&gt;

&lt;p&gt;For this example, we‚Äôre going to build a super basic counter application ‚Äî you‚Äôll be able to increment and decrement the count with ‚Äú+‚Äù and ‚Äú-‚Äù buttons. This will cover very surface level information and basic implementation, but won‚Äôt go deep into state management patterns like ‚Äú&lt;a href="https://facebook.github.io/flux/"&gt;flux&lt;/a&gt; with Rust,‚Äù or how to build your signup form; those are posts for another time, and I do plan on covering those topics in the next little while if folks find this walk-through helpful.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you‚Äôre feeling like, &lt;strong&gt;‚Äújust show me the code!‚Äù&lt;/strong&gt; you can view it &lt;strong&gt;&lt;a href="https://github.com/seanwatters/webassembly-and-rust-counter-app"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#high-level"&gt;
  &lt;/a&gt;
  High Level
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wo2COILd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AND-Ql5GM-mbSNOhSHqjTQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wo2COILd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AND-Ql5GM-mbSNOhSHqjTQA.png" alt="State Management Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the diagram above, we can think about our application as being three distinct parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The View ‚Äî our HTML document that a user would interact with&lt;/li&gt;
&lt;li&gt;The Link ‚Äî our JavaScript code that bridges the gap between our View and our State layer&lt;/li&gt;
&lt;li&gt;The State ‚Äî our Rust code that worries about application state and provides an interface for our JavaScript to read and write from&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The View layer is relatively simple ‚Äî a couple of buttons and a &lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; to render our counter state. The JavaScript necessary for hooking up our view to our application state is mostly generated by a Rust library called wasm_bindgen, but we will still need to utilize the generated bindings in our custom JavaScript.&lt;/p&gt;

&lt;p&gt;The state layer is the most interesting and complex of the three, but if implemented properly, can actually provide a very clean interface through which we interact with our application state.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h3&gt;

&lt;p&gt;First we‚Äôre going to create a basic vanilla JavaScript, WebAssembly &amp;amp; Rust project. You‚Äôll need to make sure that you have &lt;code&gt;rust&lt;/code&gt; installed via &lt;code&gt;rustup&lt;/code&gt; ‚Äî instructions &lt;a href="https://doc.rust-lang.org/book/ch01-01-installation.html"&gt;here&lt;/a&gt;. You‚Äôll also need to make sure that &lt;code&gt;wasm-pack&lt;/code&gt; is installed ‚Äî link &lt;a href="https://rustwasm.github.io/wasm-pack/installer/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We‚Äôll generate the project ‚Äî if you have difficulty with this step, you may need to use &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init rust-webpack counter-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then we‚Äôre going to build and run the project ‚Äî again, may need to use &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build &amp;amp;&amp;amp; npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see a blank page at &lt;code&gt;localhost:8080&lt;/code&gt; with &lt;code&gt;Hello world!&lt;/code&gt; logged in the console. If you take a look in the &lt;code&gt;src/lib.rs&lt;/code&gt; file, the default project is using the &lt;code&gt;web_sys&lt;/code&gt; and &lt;code&gt;wasm_bindgen&lt;/code&gt; Crates (Rust libraries) to generate this message.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;So now that we‚Äôve got our project up and running, we need to actually write some code. If you‚Äôre not yet familiar with Rust, I highly recommend reading through &lt;em&gt;&lt;a href="https://doc.rust-lang.org/book/"&gt;The Book&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We‚Äôre going to use some Object Oriented Programming paradigms to start out. &lt;a href="https://doc.rust-lang.org/book/ch17-00-oop.html"&gt;OOP in Rust&lt;/a&gt;, is an interesting animal, and isn‚Äôt necessarily the most idiomatic approach, but may be an easier transition for folks coming from OOP backgrounds. We‚Äôll cover a more functional style in a separate post.&lt;/p&gt;

&lt;p&gt;In our Object Oriented approach, we are going to use only Rust for state management, and won‚Äôt be using &lt;code&gt;web_sys&lt;/code&gt; to generate our HTML via JavaScript bindings.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;p&gt;First let‚Äôs create a new file called &lt;code&gt;counter_state.rs&lt;/code&gt; in our &lt;code&gt;src&lt;/code&gt; directory:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;There‚Äôs a bit going on here ‚Äî&lt;/p&gt;

&lt;p&gt;First we‚Äôre creating a public Rust &lt;code&gt;struct&lt;/code&gt;, then we are implementing that &lt;code&gt;struct&lt;/code&gt; using the &lt;code&gt;impl&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note: all structs with JavaScript bindings generated by wasm_bindgen must use the pub keyword.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The key indicator here that we‚Äôre using OOP-style Rust, is that in our &lt;code&gt;struct&lt;/code&gt; implementation, we are adding a public &lt;code&gt;new()&lt;/code&gt; method which will return an instance of the previously defined &lt;code&gt;CounterState&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition to the &lt;code&gt;new()&lt;/code&gt; method, we have also exposed three other public methods: &lt;code&gt;increment_counter()&lt;/code&gt;, &lt;code&gt;decrement_counter()&lt;/code&gt;, and &lt;code&gt;get_counter()&lt;/code&gt;. The &lt;code&gt;counter&lt;/code&gt; property on the &lt;code&gt;CounterState&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt; is private and isn‚Äôt exposed to the consumer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; we will also need to add this &lt;code&gt;counter_state&lt;/code&gt; module to our imports in the &lt;code&gt;src/lib.rs&lt;/code&gt; file. Add the line: &lt;code&gt;mod counter_state;&lt;/code&gt; to the top of your file below the other imports.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;The next step will be to update our &lt;code&gt;static/index.html&lt;/code&gt; file to include the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; elements, as well as the element where we‚Äôll display the counter state:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;Before we can create the JavaScript glue to connect the HTML &lt;em&gt;document&lt;/em&gt; to the Rust &lt;em&gt;state&lt;/em&gt; we will first need to update our &lt;code&gt;package.json&lt;/code&gt; file to provide access to our WebAssembly module by adding &lt;code&gt;"wasm": "file:pkg"&lt;/code&gt; to our dependencies ‚Äî you will also need to run &lt;code&gt;npm i&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Finally, we can add the JavaScript that will access our stateful WebAssembly module. It will go in the &lt;code&gt;js/counter.js&lt;/code&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;We will also need to update our &lt;code&gt;js/index.js&lt;/code&gt; file to import the &lt;code&gt;counter.js&lt;/code&gt; file, instead of the &lt;code&gt;pkg/index.js&lt;/code&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;In the &lt;code&gt;counter.js&lt;/code&gt; file, we‚Äôre importing the &lt;code&gt;CounterState&lt;/code&gt; JavaScript class that &lt;code&gt;wasm_bindgen&lt;/code&gt; has generated as a binding for our Rust &lt;code&gt;struct&lt;/code&gt;. The generated code looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;Because we now have access to this &lt;code&gt;class&lt;/code&gt; we also have access to the public methods on the Rust &lt;code&gt;struct&lt;/code&gt; ‚Äî what we‚Äôre doing on line 3 of the &lt;code&gt;counter.js&lt;/code&gt; file is creating an instance of the &lt;code&gt;struct&lt;/code&gt; in WebAssembly, and assigning it to a JavaScript variable using the &lt;code&gt;new()&lt;/code&gt; method we created in our &lt;code&gt;counter_state.rs&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;From here, we‚Äôre setting the initial text content of the &lt;code&gt;#counter&lt;/code&gt; HTML element using the &lt;code&gt;get_counter()&lt;/code&gt; method. We‚Äôre also adding event listeners to the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; elements in our HTML document, that will increment and decrement our counter‚Äôs state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;increment_counter()&lt;/code&gt; and &lt;code&gt;decrement_counter()&lt;/code&gt; methods both return the post-modification state of the private counter property, so we don‚Äôt need to use &lt;code&gt;get_counter()&lt;/code&gt; a second time.&lt;/p&gt;

&lt;p&gt;To validate that we‚Äôve successfully implemented the counter we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i &amp;amp;&amp;amp; npm run build &amp;amp;&amp;amp; npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout &lt;code&gt;localhost:8080&lt;/code&gt; and you should see something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fV2TQpA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1052/1%2Aq3uKJJWFK8XnLiHECBzorg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fV2TQpA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1052/1%2Aq3uKJJWFK8XnLiHECBzorg.png" alt='Number 42 with "+" and "-" buttons'&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Object Oriented state management with Rust and WebAssembly is not only very possible, it‚Äôs actually relatively straightforward to reason about. Similar to other state management solutions, you still are creating a persistent store of some kind, and making it available as a module to your renderer ‚Äî but with WebAssembly modules, you can get the performance boost for computation intensive methods, added type safety, and the other features that make Rust great.&lt;/p&gt;

&lt;p&gt;This example only covers surface level problem spaces. We‚Äôre not using complex types or having to manage serialization or de-serialization ‚Äî that does make things a little more complicated, but I will be writing another post that addresses all that in the context of &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; creation, in the coming weeks.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>webassembly</category>
    </item>
  </channel>
</rss>
