<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Live Coding &amp; Streaming - 10 Ways Developers Make Money Working from Home - E02</title>
      <author>Dan Fleser</author>
      <pubDate>Mon, 24 Jan 2022 08:01:40 +0000</pubDate>
      <link>https://dev.to/danfleser/live-coding-streaming-10-ways-developers-make-money-working-from-home-e02-1d0</link>
      <guid>https://dev.to/danfleser/live-coding-streaming-10-ways-developers-make-money-working-from-home-e02-1d0</guid>
      <description>&lt;p&gt;Live web development is a new and emerging source of income for web developers with the right skills.&lt;/p&gt;

&lt;p&gt;Real-time live demonstrations of building web applications can be a very engaging experience for beginner developers who try to learn how to build web applications.&lt;/p&gt;

&lt;p&gt;The goal is to show developers what the end-product should look like but also to help &amp;amp; engage them in their journey towards becoming great software engineers.&lt;/p&gt;

&lt;p&gt;Earn money from live coding, teaching other people how to code, or simply showing your skills in front of thousands of people.&lt;/p&gt;

&lt;p&gt;In this video series, I share the best ways and how to increase your money income as a web developer while working from home.&lt;/p&gt;

&lt;p&gt;Video Here: &lt;a href="https://youtu.be/d7jczFpBKl0"&gt;click me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 Subscribe to Dan Later - &lt;a href="https://bit.ly/31SdiZv"&gt;https://bit.ly/31SdiZv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Timeline - Live Coding &amp;amp; Streaming&lt;br&gt;
00:00 Intro&lt;br&gt;
00:23 Why live coding?&lt;br&gt;
00:36 Where to start?&lt;br&gt;
01:11 Introvert? No problem&lt;br&gt;
01:31 Listen to your audience&lt;br&gt;
01:41 Have fun coding&lt;br&gt;
01:52 Platforms to stream&lt;br&gt;
01:56 Make money coding live&lt;br&gt;
02:15 Set goals for your audience&lt;br&gt;
02:33 Acknowledge donations&lt;br&gt;
02:41 Subscriptions&lt;br&gt;
02:50 Mentoring sessions&lt;br&gt;
03:05 Outro&lt;/p&gt;

&lt;p&gt;Other parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running A Youtube Channel - &lt;a href="https://youtu.be/MMbp6eNk4Q8"&gt;https://youtu.be/MMbp6eNk4Q8&lt;/a&gt;
How did I start YouTube?
MrBeast YouTube Growth Success
YouTube Niches
Recording software for YouTube videos - Obs is free
Video editing software for YouTube videos - Davinci Resolve is Free
Increase YouTube content engagement&lt;/li&gt;
&lt;li&gt;Live Coding &amp;amp; Streaming - &lt;a href="https://youtu.be/d7jczFpBKl0"&gt;https://youtu.be/d7jczFpBKl0&lt;/a&gt;
Make money coding live
Set goals for your audience
Mentoring sessions&lt;/li&gt;
&lt;li&gt;Courses - &lt;a href="https://youtu.be/zs4abEW9nNk"&gt;https://youtu.be/zs4abEW9nNk&lt;/a&gt;
Why create a course?
Youtube videos
How to create a course?
Create a course outline
Grow an audience
Platforms to sell a course
Publish course to your own website
Create your own Newsletter
Ways to Get People to Buy Your Products
Post-launch Discounts&lt;/li&gt;
&lt;li&gt;Digital Products - &lt;a href="https://youtu.be/ORbLO2rjHaQ"&gt;https://youtu.be/ORbLO2rjHaQ&lt;/a&gt;
What products to create?
Why digital products?
Instant access
Where to sell?
How to create a product?
How to write a book Google Docs
Create page templates/Create page themes
What to do when you don’t have ideas? - boost ideas
Build an MVP
Create your own Newsletter
Growing Your Audience
Sell anything by Creating a Bundle&lt;/li&gt;
&lt;li&gt;Software-as-a-service - &lt;a href="https://youtu.be/lnwifUqJ7HU"&gt;https://youtu.be/lnwifUqJ7HU&lt;/a&gt;
What the hell is SaaS?
How to build a SaaS?
Ways to start
How to deal with competitors
Lean thinking
Build features that people actually use
How to Validate Feature and Product Ideas Before You Build
Choosing the Right Tech Stack for Your Project
Scaling tips
Trending Tech Stack
Choosing the Pricing model for your business
A typical validated learning process
Analysis Data
What is User testing?
What is Split testing?
Saas Marketing Examples&lt;/li&gt;
&lt;li&gt;Why&amp;amp;how To Blog - &lt;a href="https://youtu.be/E5XNUr04p7k"&gt;https://youtu.be/E5XNUr04p7k&lt;/a&gt;
Why start blogging?
Write articles
How to increase Motivation as a Blogger
Stop thinking and start doing
Find your audience
What do you need to start blogging?
How to create a blog?
How to grow an audience
Create an email newsletter
How to make money blogging?
How to add Ads on the blog
How to Affiliate and Market a blog?
Make money via Sponsored posts
How to promote services and products?
Create content and get paid&lt;/li&gt;
&lt;li&gt;Freelancing - &lt;a href="https://youtu.be/JjGTrdJkiJs"&gt;https://youtu.be/JjGTrdJkiJs&lt;/a&gt;
How to create a website
Be Professional - Register an LLC
Why choose Freelancing?
How to start freelancing
Outsourcing
How to create a good portfolio
What a great portfolio should contain
How to charge for a website
Hourly Pricing
Project-based Pricing
Value-based Pricing
How to get clients?
Tips - how to get more clients
What are Google Ads
Keywords to bid as a freelancer
How to get more sales/conversions
Linkedin Ads Tips
Linkedin InMail Ads Tips
Build your own website
Freelancing platforms
Get clients fast as a freelancer&lt;/li&gt;
&lt;li&gt;Working As A Professional Developer - &lt;a href="https://youtu.be/uJKVk7cv3Dw"&gt;https://youtu.be/uJKVk7cv3Dw&lt;/a&gt;
Opportunities When Starting Out
How to Prepare for a Job
Take Online Courses?
What College Taught Me
How to Learn Faster
Make Your Free Time Count
Effective Way to Improve Your Code by Reviewing Open Source Code
Start Creating an Mvp
Get Others Opinions
Find a Mentor
Create a Portfolio
Portfolio Website Checklist
Think Outside the Box
Be Professional
Job Application Tips
Tips for Great Job Interviews
Make Linkedin Profile Impressive&lt;/li&gt;
&lt;li&gt;Mentoring - &lt;a href="https://youtu.be/Ni6Jlkj4Xuo"&gt;https://youtu.be/Ni6Jlkj4Xuo&lt;/a&gt;
Monetize tutoring
Practice your skills
How much to Charge for online mentoring?
Provide value mentoring and people will come like a stream&lt;/li&gt;
&lt;li&gt;Contributing To Open Source - &lt;a href="https://youtu.be/qVN9FIY0j4Y"&gt;https://youtu.be/qVN9FIY0j4Y&lt;/a&gt;
What is Open Source?
Can you make money with Open Source?
Github Sponsors
How to Engage people to Finance your work?
Start a Patreon
Set monthly audience goals
Benefits of Open Source as a web developer
Create a premium version of the Open Source project
What is Freemium software&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Free alternative to GSuite</title>
      <author>Karol Wojdyła</author>
      <pubDate>Mon, 24 Jan 2022 07:53:47 +0000</pubDate>
      <link>https://dev.to/k4wo/free-alternative-to-gsuite-1d8b</link>
      <guid>https://dev.to/k4wo/free-alternative-to-gsuite-1d8b</guid>
      <description>&lt;p&gt;Google closes GSuite and from now all accounts will be transferred to Google Workspace, and therefore will cease to be free. Many people used GSuite only because it was a free service and you could connect your own domain to it. Probably some of you have asked yourself what to do in this situation - buy a paid account or look for another solution.&lt;/p&gt;

&lt;p&gt;If for some reason you don't want to pay for Workspace, I am here to help. You can look for other email provider that allows you to connect your own domain. I used to use Yandex mail - but some emails ended up in spam, so I gave up. This time I would like to use GMail so I decided to use an alias. I just need to put a contact on the website and it's nice if it's on the mayann.app domain. I know that if I answer an email, it will be from the GMail domain, but that is not so important to me.&lt;/p&gt;

&lt;p&gt;This solution gives me all the advantages of GMail and I use my domain. This is definitely not a perfect solution, the message passes through additional servers, so someone can know the content of the email and we are addicted to this intermediary. However, this does not discourage me, initially I used &lt;a href="https://improvmx.com/"&gt;improvmx.com&lt;/a&gt; and everything worked great, but after some time I decided to move to Cloudflare for two reasons - it is a large company, so there is less risk of a failure and I have everything in one place. Both sites are free, so you can try them out and choose a better solution.&lt;/p&gt;

&lt;p&gt;Setting up &lt;a href="https://developers.cloudflare.com/email-routing/enable-email-routing"&gt;Cloudflare Email Routing&lt;/a&gt; is easy. You enter the alias and the address to which the email will be redirected, and basically that's it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rbn7pngC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.mayann.app/assets/images/cloudflare_email_routing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rbn7pngC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.mayann.app/assets/images/cloudflare_email_routing.png" alt="Cloudflare Email Routing page screenshot" width="880" height="741"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an article from the series on how to maintain an indie startup at a minimum cost, in the next episode I will write how I keep a blog for free. Everything I write about is tested on my &lt;a href="https://mayann.app"&gt;random data generator&lt;/a&gt; indie startup.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#shortandtothepoint"&gt;
  &lt;/a&gt;
  #shortAndToThePoint
&lt;/h4&gt;

</description>
      <category>devjournal</category>
      <category>devops</category>
      <category>productivity</category>
      <category>shortandtothepoint</category>
    </item>
    <item>
      <title>How I want to become a better programmer in 2022</title>
      <author>𝕁𝕦𝕝𝕚𝕒 👩🏻‍💻</author>
      <pubDate>Mon, 24 Jan 2022 06:58:42 +0000</pubDate>
      <link>https://dev.to/yuridevat/how-i-want-to-become-a-better-programmer-in-2022-5aon</link>
      <guid>https://dev.to/yuridevat/how-i-want-to-become-a-better-programmer-in-2022-5aon</guid>
      <description>&lt;p&gt;At the beginning of my coding career, it was just about knowing a language perfectly and learning some soft skills and business skills to get a job. So in 2021 I gained knowledge in React, CSS, TailwindCSS, Scrum, GitHub and Git as well as mentoring and content creation. &lt;/p&gt;

&lt;p&gt;I achieved my goal of getting a job as a programmer in October 2021. In my current job I am working with new additional programming languages and tools such as Gitlab, Java Spring Boot, Angular, Angular Material, Bootstrap, SCSS and CMS.&lt;/p&gt;

&lt;p&gt;Now that I've spent some time with these different languages and tools, I've gotten a feel for what I enjoy and want to focus more on in my personal life, and what I don't enjoy as much (but still need to work with them on a project-by-project basis at work 😅).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-want-to-focus-on"&gt;
  &lt;/a&gt;
  What I want to focus on
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;React, TypeScript, Redux&lt;/li&gt;
&lt;li&gt;SCSS, A11Y&lt;/li&gt;
&lt;li&gt;Java (Spring Boot)&lt;/li&gt;
&lt;li&gt;deepen my knowledge about Scrum and project management&lt;/li&gt;
&lt;li&gt;contribute to Open Source&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After I feel confident in the above, I'd like to do a bit of work with AWS Lambda API Gateway as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-plan-to-do-so"&gt;
  &lt;/a&gt;
  The plan to do so
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#phase-1"&gt;
  &lt;/a&gt;
  Phase 1
&lt;/h3&gt;

&lt;p&gt;I want to watch and read a lot of tutorials (besides the official documentation of course), mainly on &lt;strong&gt;FreeCodeCamp&lt;/strong&gt; and &lt;strong&gt;FrontendMasters&lt;/strong&gt;, to learn what's out there, what's even possible with &lt;strong&gt;React&lt;/strong&gt; and then update my projects.&lt;/p&gt;

&lt;p&gt;Meanwhile, I want to learn &lt;strong&gt;TypeScript&lt;/strong&gt; so I can use it in my projects. TypeScript is becoming more and more required and moving from JavaScript to TypeScript in React doesn't seem that easy to me. But I will manage it.&lt;/p&gt;

&lt;p&gt;Also, I want to create another branch in all my projects where I will work with &lt;strong&gt;Redux&lt;/strong&gt; (which I will also learn) and &lt;strong&gt;SCSS&lt;/strong&gt;. This will give me a good understanding of the differences in working with Context API or Redux, and CSS or SCSS and I will be able to understand advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Finally, to take my projects to the next level, I would like to add &lt;strong&gt;Java Spring Boot&lt;/strong&gt; to the backend.&lt;/p&gt;

&lt;p&gt;Deepening my knowledge of &lt;strong&gt;Scrum&lt;/strong&gt; and &lt;strong&gt;project management&lt;/strong&gt; go hand in hand when I work on my projects as I work with GitHub projects, create flagged issues, track time, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-2"&gt;
  &lt;/a&gt;
  Phase 2
&lt;/h3&gt;

&lt;p&gt;The side projects I have right now aren't really that big. So I guess I will end up having to create another project to show what I have learned. I hope that this will be the case in 6 months. And I already have lots of ideas 🤓&lt;/p&gt;

&lt;p&gt;When I've deepened my knowledge enough in the above areas, I'll be ready to venture into &lt;strong&gt;Open Source&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-3"&gt;
  &lt;/a&gt;
  Phase 3
&lt;/h3&gt;

&lt;p&gt;If I feel comfortable with all the steps mentioned, it would be time to learn something new. I think I will start learning &lt;strong&gt;AWS Lambda API Gateway&lt;/strong&gt;, but let's see 😅&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-want-to-achieve"&gt;
  &lt;/a&gt;
  How I want to achieve
&lt;/h2&gt;

&lt;p&gt;I'm in the process of creating a plan on &lt;strong&gt;Notion&lt;/strong&gt; using a &lt;strong&gt;Kanban Board&lt;/strong&gt;, creating issues, and sorting through all the bookmarks I've saved over the past year (and there were many) and adding them to the issues I've created to stop being distracted by too much content.&lt;/p&gt;

&lt;p&gt;Each issue is assigned to a property like React, WebDev, Java, etc. and a priority. Right now the Issues are still too big, like &lt;em&gt;diving deeper into React&lt;/em&gt; and within that I created To Dos. This is not a good practice☝️.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ykNsZt1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqz7zf4yq074l3svaq2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykNsZt1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqz7zf4yq074l3svaq2v.png" alt="Image description" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It takes time to find a perfect solution, make issues as small as possible and have a good overview of them, sort them and decide how best to start and how to learn to make continuous progress.&lt;/p&gt;

&lt;p&gt;I think I will have it all figured out in a couple of weeks and will share my initial progress in my next article about my journey, which I will write quarterly. &lt;/p&gt;

&lt;p&gt;Planning is also something that should be learned. And this process is perfect to get better at project management and its tools 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-the-other-languages-and-tools-didnt-make-the-cut"&gt;
  &lt;/a&gt;
  Why the other languages and tools didn't make the cut
&lt;/h2&gt;

&lt;p&gt;After all this time, I quickly realized what I definitely don't enjoy. Even if you don't (yet) know what exactly interests you, it's at least a good start to know what doesn't interest you. That also gets you going in the right direction. &lt;/p&gt;

&lt;p&gt;I'm not interested in working with frameworks like Angular, Bootstrap, or a CMS. Those have their advantages, of course, but I just don't enjoy working with them. I want to do everything myself, I want to think for myself and fully understand what is going on. I can't achieve this feeling when I work with the above mentioned tools. And the most important thing is that I am happy at work, I feel challenged and I like what I do 🥰.&lt;/p&gt;

&lt;p&gt;I really like working with &lt;strong&gt;Gitlab&lt;/strong&gt;. It's huge and I feel like you can do a lot more than with GitHub, or it's more manageable, I don't quite know yet. That said, I'll stick with GitHub in private for now.&lt;/p&gt;

&lt;p&gt;As for &lt;strong&gt;TailwindCSS&lt;/strong&gt;, I like it a lot. But I rarely see it in the job description, SCSS on the other hand is seen a lot and is more complicated, so I want to focus on SCSS and can still work with TailwindCSS if needed since I know some of it already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-sum-it-all-up"&gt;
  &lt;/a&gt;
  To sum it all up
&lt;/h2&gt;

&lt;p&gt;From January I will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decide which programming languages, tools and skills I want to improve&lt;/li&gt;
&lt;li&gt;create a learning plan with a Kanban board on Notion&lt;/li&gt;
&lt;li&gt;create issues for all topics as small and clear as possible to get the most learning effect&lt;/li&gt;
&lt;li&gt;share my progress every 3 months to see how much progress I have made, what went really well, what I need to change or adjust &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My future is still unclear, but I have an idea of where I want to be at the end of 2022. I want to deepen my knowledge, improve it and take my journey as a developer in a certain direction.&lt;/p&gt;

&lt;p&gt;And now, let's get started and make progress. See you in 3 months 👋&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>career</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Simple Web scraping project using python and Beautiful soup</title>
      <author>Betty Kamanthe</author>
      <pubDate>Mon, 24 Jan 2022 06:53:04 +0000</pubDate>
      <link>https://dev.to/betty1999kamanthe/simple-web-scraping-project-using-python-and-beautiful-soup-33j3</link>
      <guid>https://dev.to/betty1999kamanthe/simple-web-scraping-project-using-python-and-beautiful-soup-33j3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9sNoINN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev5hmr5bfke1kre7v14i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9sNoINN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev5hmr5bfke1kre7v14i.png" alt="Web scraping a shopping site" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Web scraping is an automated method used to extract large amounts of data from websites. The data on the websites are unstructured. Web scraping helps collect these unstructured data and store it in a structured form.&lt;/p&gt;

&lt;p&gt;In this project I will show you how to scrape data from a Kenyan website called Jumia &lt;a href="https://www.jumia.co.ke/"&gt;https://www.jumia.co.ke/&lt;/a&gt;. The data we gather can be used for price comparison.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Website Inspection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The aim of this project is to scrape all products, their prices and rating. So first, we need to inspect the website, this is done by:&lt;/p&gt;

&lt;p&gt;1.Visiting this site &lt;a href="https://www.jumia.co.ke/all-products/"&gt;https://www.jumia.co.ke/all-products/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Right clicking and selecting &lt;strong&gt;inspect&lt;/strong&gt; or clicking &lt;strong&gt;ctrl+shift+i&lt;/strong&gt; to inspect the website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1CXIngi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa7gdo723ii1wkkpzi2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1CXIngi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa7gdo723ii1wkkpzi2t.png" alt="Inspect" width="880" height="432"&gt;&lt;/a&gt;&lt;br&gt;
3.Move the cursor around till a product is selected.Then search for the div tag that has the name, price and rating of the product.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7LnpKF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkh5ifau6o06cyy382bg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7LnpKF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkh5ifau6o06cyy382bg.png" alt="Web scraping" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write the code&lt;/strong&gt;&lt;br&gt;
We start by importing the necessary libraries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The requests library will make a GET request to a web server, which will download the HTML contents of a given web page for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;jumia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://www.jumia.co.ke/all-products/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parsing a page using BeautifulSoup&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jumia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsoup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'info'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the find_all method, which will find all the instances of the div tag that has a class called 'info' on the page.&lt;/p&gt;

&lt;p&gt;We now extract the name, price and rating.If you want to find the first instance of a tag, you can use the find method, which will return a single BeautifulSoup object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h3'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"prc"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'stars _s'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace() is an inbuilt function in the Python programming language that returns a copy of the string where all occurrences of a substring are replaced with another substring. &lt;/p&gt;

&lt;p&gt;We can now loop over all products on the page to extract the name, price and rating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h3'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"prc"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'stars _s'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Rating&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we are storing all these in a list called info.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loop over all pages&lt;/strong&gt;&lt;br&gt;
We have only scraped data from the first page. The site has 50 pages and when you click on the second page you notice that the url changes. So to get the new url we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://www.jumia.co.ke/all-products/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"?page="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"#catalog-listing"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is a simple string concatination. The code to loop through all the pages is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://www.jumia.co.ke/all-products/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"?page="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"#catalog-listing"&lt;/span&gt;
  &lt;span class="n"&gt;furl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;jsoup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;furl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsoup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'info'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h3'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"prc"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'stars _s'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'None'&lt;/span&gt;

      &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Rating&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;range() function goes up to but doesn't include the last number. The website has 50 pages this range is up to 51.&lt;br&gt;
Since some of the products have no ratings, we put it between try catch clause and print None in that instance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saving to csv&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'Product Name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Rating'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Ratings&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'products.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The whole code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://www.jumia.co.ke/all-products/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"?page="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"#catalog-listing"&lt;/span&gt;
  &lt;span class="n"&gt;furl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;jsoup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;furl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsoup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'info'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h3'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"prc"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'stars _s'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'None'&lt;/span&gt;

      &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Rating&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is a simple web scraping beginners project into data analytics. All the best in your journey.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Returning JSON from a PHP Script - Create Rest API in Php</title>
      <author>Shaswat Raj</author>
      <pubDate>Mon, 24 Jan 2022 06:41:01 +0000</pubDate>
      <link>https://dev.to/sh20raj/returning-json-from-a-php-script-create-rest-api-in-php-3gm5</link>
      <guid>https://dev.to/sh20raj/returning-json-from-a-php-script-create-rest-api-in-php-3gm5</guid>
      <description>&lt;p&gt;While you're usually fine without it, you can and should set the Content-Type header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;&lt;span class="cd"&gt;/** whatever you're serializing **/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type: application/json; charset=utf-8'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>json</category>
      <category>sh20raj</category>
      <category>api</category>
    </item>
    <item>
      <title>Send email using Spring boot Application</title>
      <author>Mohammed Riyas</author>
      <pubDate>Mon, 24 Jan 2022 06:15:49 +0000</pubDate>
      <link>https://dev.to/riyas07/send-email-using-spring-boot-application-5d3p</link>
      <guid>https://dev.to/riyas07/send-email-using-spring-boot-application-5d3p</guid>
      <description>&lt;p&gt;Hey amigos in this blog we gonna create an simple email sending springBoot Application.in this application i concentrated more in logical part. So i haven't give importance to design. My aim is to make as more simple and easy to understand. &lt;/p&gt;

&lt;p&gt;To send email using spring application first of all you need to make right sure that enable less Secure apps in G-mail. After that then only we can send email from our application. I drop a link for how to enable less secure app please follow up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/Ee7PDsbfOUI"&gt;https://youtu.be/Ee7PDsbfOUI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;lets start with HTML part...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;TODO supply a title&amp;lt;/title&amp;gt;
        &amp;lt;meta charset="UTF-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;form action="add"&amp;gt;
            &amp;lt;input type="text" name="username" placeholder="to whom you gonna send name"/&amp;gt;
            &amp;lt;input type="email" name="email" placeholder="email"/&amp;gt;
        &amp;lt;button type="submit"&amp;gt;submit&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing much complicated. iam just accepting the user name and email send it back to backend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.mail2.mail2.controller;

import com.mail2.mail2.dot.mailRequest;
import com.mail2.mail2.dot.mailresponse;
import com.mail2.mail2.service.mailService;
import java.util.HashMap;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class controller {
    @RequestMapping("/")
    public String aa()
    {
        return "createUser";
    }
    @RequestMapping("/add")
    public String sp(@RequestParam("username")String name,@RequestParam("email")String email)
    {
       mailresponse mr= sendEmail(email);
        return "success";
    }
    @Autowired 
    private mailService service;
    public mailresponse sendEmail(String request) {
          Map&amp;lt;String, Object&amp;gt; model = new HashMap&amp;lt;&amp;gt;();
        model.put("Name", "riyas");
        model.put("location", "Bangalore,India");
        return service.sendEmail(request, model);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;create a Mail Request and Mail Response class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.mail2.mail2.dot;

public class mailRequest {
      private String name;
    private String to;
    private String from;
    private String subject;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.mail2.mail2.dot;

public class mailresponse {
        private String message;
    private boolean status;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public boolean isStatus() {
        return status;
    }

    public void setStatus(boolean status) {
        this.status = status;
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let me explain how the backend code work. first in controller class we accepting the username and email String.then sending email String to sendEmail method. Then creating Map object and send it to sendEmail method in MailService class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.mail2.mail2.service;

import com.mail2.mail2.dot.mailRequest;
import com.mail2.mail2.dot.mailresponse;
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;

/**
 *
 * @author ELCOT
 */
@Service
public class mailService {
    @Autowired
    JavaMailSender sender;
    @Autowired
    Configuration config;
    public mailresponse sendEmail(String request, Map&amp;lt;String, Object&amp;gt; model) {
        mailresponse response = new mailresponse();
        MimeMessage message = sender.createMimeMessage();
        try {
            // set mediaType
            MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED,
                    StandardCharsets.UTF_8.name());
            // add attachment

            Template t = config.getTemplate("email-template.ftl");
            String html = FreeMarkerTemplateUtils.processTemplateIntoString(t, model);

            helper.setTo(request);
            helper.setText(html, true);
            helper.setSubject("created_successfully");
            helper.setFrom("muhammedriyas6262@gmail.com");
            sender.send(message);

            response.setMessage("mail send to : " + request);
            response.setStatus(Boolean.TRUE);

        } catch (MessagingException | IOException | TemplateException e) {
            response.setMessage("Mail Sending failure : "+e.getMessage());
            response.setStatus(Boolean.FALSE);
        }

        return response;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here we see. I created a email template page  in template folder in springboot application named emailtemplate.ftl extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&amp;gt;
&amp;lt;title&amp;gt;Java Techie Mail&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td align="center" valign="top" bgcolor="#838383"
                style="background-color: #838383;"&amp;gt;&amp;lt;br&amp;gt; &amp;lt;br&amp;gt;
                &amp;lt;table width="600" border="0" cellspacing="0" cellpadding="0"&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td align="center" valign="top" bgcolor="#d3be6c"
                            style="background-color: #d3be6c; font-family: Arial, Helvetica, sans-serif; font-size: 13px; color: #000000; padding: 0px 15px 10px 15px;"&amp;gt;

                            &amp;lt;div style="font-size: 48px; color:blue;"&amp;gt;
                                &amp;lt;b&amp;gt;Riyas Hacked&amp;lt;/b&amp;gt;
                            &amp;lt;/div&amp;gt;

                            &amp;lt;div style="font-size: 24px; color: #555100;"&amp;gt;
                                &amp;lt;br&amp;gt; Sending Email using Spring Boot with &amp;lt;b&amp;gt;FreeMarker
                                    template !!! &amp;lt;br&amp;gt;
                            &amp;lt;/div&amp;gt;
                            &amp;lt;div&amp;gt;
                                &amp;lt;h1&amp;gt;He fucked you${Name} , ${location}&amp;lt;/h1&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/table&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after email send successfully. iam just displaying the success message&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;TODO supply a title&amp;lt;/title&amp;gt;
        &amp;lt;meta charset="UTF-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;send successfully ...........&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you get an idea to make your own application. please ask queries and give suggestion through &lt;a href="mailto:muhammedriyas6262@gmail.com"&gt;muhammedriyas6262@gmail.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>An Introduction to Webpack</title>
      <author>Rishikrishna</author>
      <pubDate>Mon, 24 Jan 2022 06:12:20 +0000</pubDate>
      <link>https://dev.to/rishikrishna_r/an-introduction-to-webpack-406l</link>
      <guid>https://dev.to/rishikrishna_r/an-introduction-to-webpack-406l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-webpack"&gt;
  &lt;/a&gt;
  What is Webpack?
&lt;/h2&gt;

&lt;p&gt;Webpack is a bundling tool made from javascript. For instance, It can take up a collection of javascript files and produce a single output javascript file. It can bundle images, css files, javascript files, etc to produce static assets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-need-bundling"&gt;
  &lt;/a&gt;
  Why we need bundling?
&lt;/h2&gt;

&lt;p&gt;Without a module bundler like webpack, one would import packages using html script tags,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;Getting Started&amp;lt;/title&amp;gt;
    &amp;lt;script src="https://unpkg.com/lodash@4.17.20"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script src="./src/index.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This type of approach is not advisable since it has few drawbacks. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When unused scripts are included, unnecessary code is included.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When scripts are included in the wrong order, or if its missed, the application will fail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The packages are imported in the global namespace.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, if the application code is bundled with webpack, it uses a dependency graph to find out what packages are needed to use in the application and ignores the unused packages. It then uses this dependency graph to generate an optimised and minified bundle which will be executed in the correct order.&lt;/p&gt;

&lt;p&gt;Next, a module bundler can compile languages which cannot be understood by the browser like typescript with the use of transpilers like babel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-webpack"&gt;
  &lt;/a&gt;
  How to use webpack
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;npm install webpack webpack-cli --save-dev&lt;/code&gt; &lt;br&gt;
After adding these to package.json, webpack can be used from command line.&lt;/p&gt;

&lt;p&gt;Let's consider an example of using lodash in a project. Let's install lodash from npm.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install lodash&lt;/code&gt; (A modern JavaScript utility library delivering modularity, performance &amp;amp; extras.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import lodash from 'lodash';
import printMe from './print.js'

let value = lodash.join(['a', 'b', 'c'], '~');

console.log(value);
printMe();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's have another file named print.js, which exports a function to index.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;print.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default function printMe() {
    console.log('I get called in index.js');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we setup webpack.config.js file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;path&lt;/strong&gt; module provides utilities for working with file and directory paths&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const path = require('path');

module.exports = {
    entry: {
        index: './src/index.js',
    },
    output: {
        filename: 'main.js',
        path: path.resolve(__dirname, 'dist'),
    },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This specifies basically that index.js is our entry file and we want it to be compiled. We also specify that the compiled version be renamed as main.js and placed in subfolder dist, possibly where index.html is also placed.&lt;/p&gt;

&lt;p&gt;Now, we shall use webpack from command line,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx webpack&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will run webpack that is installed in the node_modules folder, starts with the index.js file and finds all require/import statements and replaces them with their appropriate code to create a single output file named main.js inside dist subfolder.&lt;/p&gt;

&lt;p&gt;Now this main.js file can be used in index.html file as such,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script defer src="main.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's webpack in a nutshell. We no longer populate packages in global namespace via external scripts. Any new packages or libraries will be added using require/import as opposed to external scripts.&lt;/p&gt;

&lt;p&gt;Note: By default, webpack uses production mode, which will produce minified output file. If you want the output file to be readable to developers, you can use development mode in webpack config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const path = require('path');

module.exports = {
    mode: 'development',
    entry: {
        index: './src/index.js',
    },
    output: {
        filename: 'main.js',
        path: path.resolve(__dirname, 'dist'),
    },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading the blog. Feel free to provide inputs and suggestions for any areas of improvement. :) &lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://webpack.js.org/guides/asset-management/"&gt;this&lt;/a&gt; guide if you want to learn about loading other assets like css files.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webpack</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ways to loop in an array using the different types of "FOR LOOP" in Javascript.</title>
      <author>Angelo Geant Gaviola</author>
      <pubDate>Mon, 24 Jan 2022 06:11:40 +0000</pubDate>
      <link>https://dev.to/kidxs/ways-to-loop-in-an-array-using-the-different-types-of-for-loop-in-javascript-1832</link>
      <guid>https://dev.to/kidxs/ways-to-loop-in-an-array-using-the-different-types-of-for-loop-in-javascript-1832</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As a developer, there are times you are going to encounter handling a set of data.&lt;/p&gt;

&lt;p&gt;That means there are times that you have to retrieve them and manipulate them for your program. &lt;/p&gt;

&lt;p&gt;Here in this article, I'm going to show you four different ways to loop in an array using the different types of for loops.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-loop-generic"&gt;
  &lt;/a&gt;
  For loop (generic)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;For loop&lt;/code&gt; is a loop that keeps executing itself until the condition gets filled. It also stops when a "break" statement gets executed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is what the syntax looks like:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;declaration&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;incrementation&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;first statement&lt;/code&gt; is about the declaration of the variable that you want as a counter --- something that you use to keep count of the iteration.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;second statement&lt;/code&gt; is about a condition that you need to get filled before stopping the loop.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;third statement&lt;/code&gt; is about adding value to the counter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// writes to output&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nl"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reference:&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#for-in-loop"&gt;
  &lt;/a&gt;
  For in loop
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;For in loop&lt;/code&gt; is a type of "FOR LOOP" that iterates over the indices in a array. It is similar to the normal "FOR LOOP" when executed, however, this is faster to write since it does the sizing of the length and incremental for us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is what the syntax looks like:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;grades&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Index: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; -- &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;grades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nl"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; 
&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt; 
&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt; 
&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reference:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-of-loop"&gt;
  &lt;/a&gt;
  For of loop
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;For of loop&lt;/code&gt; is a type of "FOR loop" that iterates over the values in the array. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is what the syntax looks like:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;grades&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nl"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;80&lt;/span&gt;
&lt;span class="mi"&gt;86&lt;/span&gt;
&lt;span class="mi"&gt;89&lt;/span&gt;
&lt;span class="mi"&gt;90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reference:&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#foreach-function"&gt;
  &lt;/a&gt;
  Foreach function
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Foreach&lt;/code&gt; is a method for array structures that takes a callback function for execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is what the syntax looks like:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;array.forEach(callbackfn);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;array&lt;/code&gt; - is the variable that contains your array.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;callbackfn&lt;/code&gt; - is the callback function taken as an input.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As one of my professors said &lt;em&gt;"There are many ways to kill a chicken"&lt;/em&gt; depending on what you want to accomplish.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is my first article, let me know if there's any mistakes or any improvements I should make, Thank you!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Best Practices for designing an UI</title>
      <author>Dumbo-programmer</author>
      <pubDate>Mon, 24 Jan 2022 05:56:57 +0000</pubDate>
      <link>https://dev.to/dumboprogrammer/best-practices-for-designing-an-ui-2g85</link>
      <guid>https://dev.to/dumboprogrammer/best-practices-for-designing-an-ui-2g85</guid>
      <description>&lt;p&gt;User Interface or UI for short and User experience UX for short.User Interface is the part the user sees or interacts with often called frontend.It doesn't matter if you use node or python as backend language.The only thing users cares about is how your website feels ,they describe it by looking at and using your website.&lt;/p&gt;

&lt;p&gt;Best Practices for Designing an Interface&lt;br&gt;
1.Keep the interface simple&lt;br&gt;
2.Create consistency and use common UI elements&lt;br&gt;
3.Be purposeful in page layout&lt;br&gt;
4.Strategically use color and texture&lt;br&gt;
5.Use typography to create hierarchy and clarity&lt;br&gt;
6.Make sure that the system communicates what's happening&lt;br&gt;
7.Think about the defaults.&lt;br&gt;
8.Think like an user:&lt;br&gt;
Like you don't know how anything works&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>ux</category>
    </item>
    <item>
      <title>An Advanced KeyListener for Java Swing</title>
      <author>omega ui</author>
      <pubDate>Mon, 24 Jan 2022 05:17:53 +0000</pubDate>
      <link>https://dev.to/omegaui/an-advanced-keylistener-for-java-swing-4ali</link>
      <guid>https://dev.to/omegaui/an-advanced-keylistener-for-java-swing-4ali</guid>
      <description>&lt;p&gt;An Open-Source Advanced KeyListener for the Java Swing Library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/omegaui/keystrokelistener"&gt;keystrokelistener&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>swing</category>
      <category>ui</category>
      <category>event</category>
    </item>
    <item>
      <title>PostgreSQL Uzak Bağlantı Açma</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Mon, 24 Jan 2022 04:25:04 +0000</pubDate>
      <link>https://dev.to/aciklab/postgresql-uzak-baglanti-acma-3dpj</link>
      <guid>https://dev.to/aciklab/postgresql-uzak-baglanti-acma-3dpj</guid>
      <description>&lt;p&gt;PostgreSQL sunucusu varsayılan ayarlarla kurulduğunda uzaktan bağlantıya kapalı olarak kurulmaktadır. Sadece kendisi üzerinden localhost(127.0.0.1) üzerinden 5432 portundan haberleşebilmektedir. Bunu tüm ağlar üzerinden veya spesifik ağlar üzerinden erişilecek şekilde açabilirsiniz. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#uzak-eri%C5%9Fime-izin-verilmesi"&gt;
  &lt;/a&gt;
  Uzak erişime izin verilmesi
&lt;/h1&gt;

&lt;p&gt;Uzaktan bağlantıya izin verilmesi için, &lt;strong&gt;/etc/postgresql/14/main/pg_hba.conf&lt;/strong&gt; dosyası içinde aşağıdaki satır düzenlenmesi gerekiyor: (normalde başında diyez var içinde de localhost yazıyor)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;listen_addresses = '*'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#uzak-eri%C5%9Fim-ip-veya-a%C4%9F-belirlenmesi"&gt;
  &lt;/a&gt;
  Uzak erişim IP veya ağ belirlenmesi
&lt;/h1&gt;

&lt;p&gt;Uzaktan bağlantı sağlayacak IP adresi veya IP adreslerinin bulunduğu ağ için &lt;strong&gt;/etc/postgresql/14/main/postgresql.conf&lt;/strong&gt; dosyasının en alt satırlarında bir yere aşağıdaki satır eklenmeli.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;host all all 0.0.0.0/0 md5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu satır eklendiğinde tüm ağlardan erişim sağlanabileceği gibi, güvenlik olarak sadece istenilen IP adresi veya ağ adresi yazılması daha uygun olacaktır.&lt;/p&gt;

&lt;p&gt;Tüm işlemler sonucunda postgresql servisini yeniden başlatmak yetecektir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu adımla birlikte uzaktaki herhangi bir SQL istemcisinden PostgreSQL sunucusuna sorgu atılabilmektedir.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>remote</category>
    </item>
    <item>
      <title>CSS Funstuff: Animated Halfway Borders</title>
      <author>RolandiXor (Roland L. Taylor)</author>
      <pubDate>Mon, 24 Jan 2022 04:04:06 +0000</pubDate>
      <link>https://dev.to/rolandixor/css-funstuff-animated-halfway-borders-24fp</link>
      <guid>https://dev.to/rolandixor/css-funstuff-animated-halfway-borders-24fp</guid>
      <description>&lt;p&gt;Hi! Been a minute, but I'm back with another CSS tutorial!&lt;/p&gt;

&lt;p&gt;This one will be pretty quick, but should give you a great launch point for extrapolating and creating something special.&lt;/p&gt;

&lt;p&gt;Now you probably know that you can add borders to specific sides of an element, using, for instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.border-top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wq_9Xw8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xvslpdgwx79utu1ulya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wq_9Xw8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xvslpdgwx79utu1ulya.png" alt="A screenshot of the result of the above code, showing a grey square, showing a thin white border at the top" width="420" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what you may not realize, is what happens when you add a very simple additional property: border-radius! Now, maybe this sounds super obvious, but just how cool it is, isn't obvious until you see it in action, so let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.border-top-round&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQnTiwyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgwfgge5f4r9hophk0s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQnTiwyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgwfgge5f4r9hophk0s5.png" alt="A screenshot of the above code, showing a grey circle with a thin, tapered, white border, at the top" width="445" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, isn't it? No?&lt;br&gt;
&lt;em&gt;Well let's make it so!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#animating-it-all"&gt;
  &lt;/a&gt;
  Animating it all:
&lt;/h2&gt;

&lt;p&gt;If the first bit wasn't all that impressive, maybe adding a little fun and flare should do the trick.&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BltiXtIt6LE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So what's the code for this one? Grab it here (it's free!):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rolandixor.gumroad.com/l/ozppku"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
      <category>design</category>
    </item>
  </channel>
</rss>
