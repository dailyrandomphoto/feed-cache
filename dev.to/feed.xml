<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>On #GumroadDay, my books are "pay what you want", minimum $1</title>
      <author>javinpaul</author>
      <pubDate>Wed, 07 Apr 2021 15:17:27 +0000</pubDate>
      <link>https://dev.to/javinpaul/on-gumroadday-my-books-are-pay-what-you-want-minimum-1-59m5</link>
      <guid>https://dev.to/javinpaul/on-gumroadday-my-books-are-pay-what-you-want-minimum-1-59m5</guid>
      <description>&lt;p&gt;Hello devs, just wanted to write a short post about Gumroad Day and an excllent opportunity to buy my books for just 1$ (minimum).  For #GumroadDay, both my books, &lt;strong&gt;&lt;a href="https://gumroad.com/l/QqjGH"&gt;Grokking the Java Interview&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://gumroad.com/l/hrUXKY"&gt;Grokking the Spring Boot Interview&lt;/a&gt;&lt;/strong&gt; are 'Pay What You Want, $1 minimum. Today only.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Grokking the Java Interview, $19.9 (normal price)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Grokking the Spring Bot Interview, $19.9 (normal price)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;More than 580+ Java developers have bought so far. Go see what they look like!&lt;/p&gt;

&lt;p&gt;Here is the link - &lt;strong&gt;&lt;a href="https://gumroad.com/javinpaul/"&gt;https://gumroad.com/javinpaul/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More than 150+ people have already bought my books in few hours and given only a few hours are left before #GumroadDay is over, I suggest all of my blog readers, fans, and followers to use this opportunity.&lt;/p&gt;

&lt;p&gt;Gumroad Day is a special day organized by Gumroad where Creators will keep all the earning, all the fees like transaction fee, Paypal fee will be paid by Gumroad. Many creators are offering their courses for huge discounts so that more people can benefit from their work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/l/hrUXKY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gj70avFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-1CEPeJjeoFk/YG23Acoh_-I/AAAAAAAAm_M/VesCLN2ZucUr69_2f9r5ZwqUpaxKBkyLQCLcBGAsYHQ/w640-h328/100%252Bsales%252Bon%252BGumroad%252BDay.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-grokking-the-java-interview-cover" class="anchor"&gt;
  &lt;/a&gt;
  What does Grokking the Java Interview cover?
&lt;/h3&gt;

&lt;p&gt;This is my first book in 10 years of blogging and it contains all the essential core Java topics you need to prepare to crack a Java developer interview. This is a 150+ pages book that contains frequently asked Java interview questions and their answers.&lt;/p&gt;

&lt;p&gt;Here is the list of core Java topics covered in this book:&lt;/p&gt;

&lt;p&gt;1. Object-Oriented Programming&lt;/p&gt;

&lt;p&gt;2. Java Fundamentals&lt;/p&gt;

&lt;p&gt;3. Java Collections&lt;/p&gt;

&lt;p&gt;4. Java Multithreading&lt;/p&gt;

&lt;p&gt;5. Garbage Collection&lt;/p&gt;

&lt;p&gt;6. JDBC&lt;/p&gt;

&lt;p&gt;7. Generics&lt;/p&gt;

&lt;p&gt;8. Design PAtterns&lt;/p&gt;

&lt;p&gt;9. Telephonic Interview Questions &lt;/p&gt;

&lt;p&gt;You can use this book to prepare for the Java interview in a guided and structured way. Java is vast and it's tough to crack Java interviews without proper preparation and this book helps you there. Whether you are a beginner looking for your first job or an experienced Java developer looking for your next job this book and questions will help you.&lt;/p&gt;

&lt;p&gt;Here is the link to learn more about the book - &lt;strong&gt;&lt;a href="https://gumroad.com/l/QqjGH"&gt;Grokking the Java Interview&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/l/QqjGH"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIZsRX2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-4r1BKDnO5dw/YG24fGKW1tI/AAAAAAAAm_U/f6hcE0oZ5fsFIVWpwBwsA4RqydHBiANawCLcBGAsYHQ/w376-h532/Cover4.jpg" alt="Gumroad day sale Grokking the Java interview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-grokking-the-spring-boot-interview-cover" class="anchor"&gt;
  &lt;/a&gt;
  What does Grokking the Spring Boot Interview cover?
&lt;/h3&gt;

&lt;p&gt;This is my second book to help Java developers in their interview preparation and this book covers Spring Framework, the most important skill for Java developers. When I released my first book, a lot of my readers and followers message me that to write a similar book but on the Spring framework. Since Spring is also vast like Java, it took me 5 months to write this book but I am very happy that it turns out to be a great resource for anyone preparing for Java + Spring boo interview as well for Spring certification.&lt;/p&gt;

&lt;p&gt;This is a 250+ pages book that contains frequently asked Spring, Spring Boot, and Spring Security interview questions and their answers.&lt;/p&gt;

&lt;p&gt;Here is the list of Spring Framework topics covered in this book:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Container, Dependency, and IOC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2. Spring Bean Lifecycle&lt;/p&gt;

&lt;p&gt;3. Aspect-Oriented Programming (AOP)&lt;/p&gt;

&lt;p&gt;4. Spring MVC&lt;/p&gt;

&lt;p&gt;5. Spring Boot Intro&lt;/p&gt;

&lt;p&gt;6. Spring Boot Auto Configuration&lt;/p&gt;

&lt;p&gt;7. Spring Boot Starter Dependency&lt;/p&gt;

&lt;p&gt;8. Spring Boot Actuator&lt;/p&gt;

&lt;p&gt;9. Spring Boot CLI&lt;/p&gt;

&lt;p&gt;10. Spring Boot Testing&lt;/p&gt;

&lt;p&gt;11. Spring Cloud Questions&lt;/p&gt;

&lt;p&gt;12. Spring Data JPA&lt;/p&gt;

&lt;p&gt;13. Spring Security&lt;/p&gt;

&lt;p&gt;You can use this book to prepare for the Spring Boot interview in a guided and structured way. Just like Java, Spring Framework is also vast and it's tough to crack Spring Boot interviews without proper preparation and this book helps you there.&lt;/p&gt;

&lt;p&gt;Whether you are a beginner looking for your first job or an experienced Java developer looking for your next job this book and questions will help you.&lt;/p&gt;

&lt;p&gt;Here is the link to learn more about the book - &lt;strong&gt;&lt;a href="https://gumroad.com/l/hrUXKY"&gt;Grokking the Spring Boot Interview&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/l/hrUXKY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9l3246e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-SUCq4J1lR5s/YG25uRFGFNI/AAAAAAAAm_c/OJnxMGSk1TQhTy-EEOwUhUlcJad2t6d9ACLcBGAsYHQ/w323-h485/Grokking%252BSpring%252BBoot%252BInterview%252BCover.jpg" alt="Gumroad day sale Grokking the Spring Boot  interview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all guys, this post means to be short because Gumroad day is just for one day and the prices will revert back to normal tomorrow. If you are preparing for Java and Spring Boot interviews then this is your best chance to grab your copy of my books. &lt;/p&gt;

&lt;p&gt;Here is the link - &lt;strong&gt;&lt;a href="https://gumroad.com/javinpaul/"&gt;https://gumroad.com/javinpaul/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>books</category>
      <category>programming</category>
      <category>springframework</category>
    </item>
    <item>
      <title>How to make a multi tenant website</title>
      <author>Manda Putra</author>
      <pubDate>Wed, 07 Apr 2021 14:54:27 +0000</pubDate>
      <link>https://dev.to/mandaputtra/how-to-make-a-multi-tenant-website-12ng</link>
      <guid>https://dev.to/mandaputtra/how-to-make-a-multi-tenant-website-12ng</guid>
      <description>&lt;p&gt;Today I'll tell how do I make wildcard subdomains and how do I handle the data between multiple user account. I thought it was hard, but turns out it is not (or maybe it is easy because I doing it wrong? I don't know).&lt;/p&gt;

&lt;p&gt;Every time I search about how to make a multi tenant website, there are 0 articles on how to build them. I always wonder how do they do their architecture etc.&lt;/p&gt;

&lt;p&gt;The key to this type of website architecture are just wildcard subdomain and reading the host on your code. As simple as that.&lt;/p&gt;

&lt;p&gt;The website requirement are :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It's blog platform&lt;/li&gt;
&lt;li&gt;Every user will have their own subdomain (zeke.bloggy.net, eren.bloggy.net, etc)&lt;/li&gt;
&lt;li&gt;Every subdomain had their own data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there are some steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#buy-a-domain-and-vps" class="anchor"&gt;
  &lt;/a&gt;
  Buy a Domain and VPS
&lt;/h2&gt;

&lt;p&gt;First you must own a domain name and VPS (Virtual Private Server). I do think that this could be done in with serverless too, I just didn't tried that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#point-your-domain-to-the-vps" class="anchor"&gt;
  &lt;/a&gt;
  Point your domain to the VPS
&lt;/h2&gt;

&lt;p&gt;On your domain registrar DNS Management There are 4 record that you should add. You also need your VPS IP address to point to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| domain     | record type | value                              | host                               | ttl   |
|------------|-------------|------------------------------------|------------------------------------|-------|
| bloggy.com | A Record    | 192.0.0.1                          | bloggy.com                         | 14400 |
| bloggy.com | CNAME       | bloggy.com                         | www                                | 14400 |
| bloggy.com | A Record    | 192.0.0.1                          | *                                  | 14400 |
| bloggy.com | TXT Record  | radom-value-provided-by-lestecrypt | radom-value-provided-by-lestecrypt | 14400 |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The IP address there are your VPS IP address the domain are your domain (till the end of this article we'll use bloggy.com)&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;TXT Record&lt;/strong&gt; will be given by LetsEncrypt when we need &lt;em&gt;https&lt;/em&gt;, I'll on the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-nginx-to-point-to-your-domain" class="anchor"&gt;
  &lt;/a&gt;
  Setup nginx to point to your domain
&lt;/h2&gt;

&lt;p&gt;Install Nginx.&lt;/p&gt;

&lt;p&gt;Apache, Nginx, or other web server thingy have their own syntax of configuration I used Nginx here. Use your own preferences&lt;/p&gt;

&lt;p&gt;The configuration I use for &lt;code&gt;bloggy.com&lt;/code&gt; are the same as article &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04"&gt;here&lt;/a&gt; try to follow that article guide (I want to keep this posts as short as possible)&lt;/p&gt;

&lt;p&gt;The difference is when I want to register  the wildcard subdomain. The certbot command I used are different.&lt;/p&gt;

&lt;p&gt;It is not :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo certbot --nginx -d bloggy.com -d www.bloggy.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo certbot --server https://acme-v02.api.letsencrypt.org/directory -d *.example.com --manual --preferred-challenges dns-01 certonly
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don't know why the &lt;code&gt;-d *.example.com&lt;/code&gt; won't work, seems like it is a domain registrar problem. I obtain this trick from &lt;a href="https://medium.com/@utkarsh_verma/how-to-obtain-a-wildcard-ssl-certificate-from-lets-encrypt-and-setup-nginx-to-use-wildcard-cfb050c8b33f"&gt;this article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For now, you will have a working wildcard subdomain and domain. Whether you visit &lt;code&gt;bloggy.com&lt;/code&gt;, &lt;code&gt;zeke.bloggy.com&lt;/code&gt;, &lt;code&gt;eren.bloggy.com&lt;/code&gt; you will see Nginx welcome page (If you use nginx)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handle-the-subdomain-on-your-code" class="anchor"&gt;
  &lt;/a&gt;
  Handle the subdomain on your code
&lt;/h2&gt;

&lt;p&gt;I use node.js (Express.js) for this, different app may have different syntax. But the rule are simple, read the hostname to get the account name and fetch the data;&lt;/p&gt;

&lt;p&gt;The app had 2 routes &lt;code&gt;home&lt;/code&gt; and &lt;code&gt;blog&lt;/code&gt; Here the simplest code possible&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zeke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;so zeke thing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eren&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;so eren thing 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Home route list all blog and account&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataBlog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Blog route only list the blog based on host account name&lt;/span&gt;
&lt;span class="c1"&gt;// You will see that we dont use params here, we use hostname&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="c1"&gt;// or 'x-forwarded-host'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accountName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// get the account name on domain.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accountName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accountData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;accountName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accountData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not Found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#proxy-your-web-app-with-nginx" class="anchor"&gt;
  &lt;/a&gt;
  Proxy your web app with nginx
&lt;/h2&gt;

&lt;p&gt;Node.js aren't like PHP it has its own web servers, but to contact with real world it needs proxy. So we just proxy it to our nginx.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;bloggy.com&lt;/code&gt; nginx configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# so the home route will be on bloggy.com&lt;/span&gt;
proxy_pass http://localhost:3000&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the wildcard &lt;code&gt;*.bloggy.com&lt;/code&gt; nginx configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# so the blog route will point to *.bloggy.com&lt;/span&gt;
proxy_pass http://localhost:3000/blog&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Every time you visit &lt;code&gt;bloggy.com/blog&lt;/code&gt; it will respond 'not found' but if you visit &lt;code&gt;zeke.bloggy.com&lt;/code&gt; it will fetch the data for 'zeke'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing" class="anchor"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;I hope this will help you to make your multi tenant website. Have a great day. I welcome every feedback you had! :D&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>server</category>
    </item>
    <item>
      <title>Basic Understanding of Decimal Floating-Point Number</title>
      <author>Zhi Song</author>
      <pubDate>Wed, 07 Apr 2021 14:37:47 +0000</pubDate>
      <link>https://dev.to/hibriansun/basic-understanding-of-decimal-floating-point-number-18lb</link>
      <guid>https://dev.to/hibriansun/basic-understanding-of-decimal-floating-point-number-18lb</guid>
      <description>&lt;p&gt;Owing to time constraints, the English version of the article is writing now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://translate.google.com/translate?sl=auto&amp;amp;tl=en&amp;amp;js=y&amp;amp;u=https%3a%2f%2fgithub.com%2fhibriansun%2fGSoCSwiftDraft%2fblob%2fmain%2fBasic%20Understanding%20of%20Decimal%20Floating-Point%20Number.md"&gt;Click here&lt;/a&gt; to translate the page into English version for the critical situation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p2pkFtbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/AQ5petHZW9FUrC4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p2pkFtbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/AQ5petHZW9FUrC4.png" alt="Basic Understanding of Decimal Floating-Point Number.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E5%87%A0%E4%B8%AA%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89" class="anchor"&gt;
  &lt;/a&gt;
  几个常量定义
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;b&lt;/code&gt;，基数[base]，为2或10&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p&lt;/code&gt;，精度[precision]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;emax&lt;/code&gt;，指数的最大可能值&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;emin&lt;/code&gt;，指数的最小可能值，对于所有类型，&lt;code&gt;emin = 1- emax&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#%E6%AF%8F%E7%A7%8D%E6%B5%AE%E7%82%B9%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA%E6%A0%BC%E5%BC%8F" class="anchor"&gt;
  &lt;/a&gt;
  每种浮点数值表示格式
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每一种浮点format都由&lt;strong&gt;基数，编码位数&lt;/strong&gt;(i.e binary*&lt;em&gt;64&lt;/em&gt;*)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于每一种浮点format，其数据域需要这样被表示&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;带符号的0和不带符号的0的floating number的形式为&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$&lt;br&gt;
  (−1)^s×b^e×m&lt;br&gt;
  $$&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;S: is 0 or 1

&lt;ol&gt;
&lt;li&gt;e: emin &amp;lt;= e &amp;lt;= emax&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;m is a number represented by a digit string of the form d0・d1 d2...dp-1 where di is an integer digit 0&amp;lt;= di &amp;lt;=b(therefor 0 &amp;lt;= m &amp;lt;=b) 

&lt;ol&gt;
&lt;li&gt;Two infinities, +∞ and −∞.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Two NaNs(两个非数字，Not a numbers), qNaN (quiet) and sNaN (signaling)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%AE%E7%82%B9%E6%A0%BC%E5%BC%8F-binary-floating-number" class="anchor"&gt;
  &lt;/a&gt;
  二进制浮点格式 Binary Floating Number
&lt;/h3&gt;

&lt;p&gt;二进制浮点格式的小数是我们熟知的小数表示方式，也是IEEE754-1985中小数表示的标准。&lt;/p&gt;

&lt;p&gt;一个二进制浮点数将会被表示成这种形式：&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38EWIZRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/25/5OPgZ67IXvTDjrU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38EWIZRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/25/5OPgZ67IXvTDjrU.png" alt="Screen Shot 2021-03-25 at 20.17.30.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;S: 符号位   1-bit&lt;/li&gt;
&lt;li&gt;E: 指数位   w-bit      E = e + bias&lt;/li&gt;
&lt;li&gt;T: 尾数       t-bit        t = p - 1, T = d1d2⋯dp−1   [di: s2进制]&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;binary16&lt;/th&gt;
&lt;th&gt;binary32&lt;/th&gt;
&lt;th&gt;binary64&lt;/th&gt;
&lt;th&gt;binary128&lt;/th&gt;
&lt;th&gt;binary{k}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;k, 32\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;113&lt;/td&gt;
&lt;td&gt;k-round(4log2 k)+13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emax&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;127&lt;/td&gt;
&lt;td&gt;1023&lt;/td&gt;
&lt;td&gt;16383&lt;/td&gt;
&lt;td&gt;2^{k-p-1}-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bias(辅助偏移值/置偏值)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;127&lt;/td&gt;
&lt;td&gt;1023&lt;/td&gt;
&lt;td&gt;16383&lt;/td&gt;
&lt;td&gt;emax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sign bit&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;round(4log2 k)−13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;td&gt;k-w-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#1-%E8%A7%84%E6%A0%BC%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0-normalized-number" class="anchor"&gt;
  &lt;/a&gt;
  1). 规格化浮点数 (normalized number)
&lt;/h4&gt;

&lt;p&gt;E为8位的无符号整数，表示范围为0～255，E-bias表示范围为-127 ～ 128&lt;/p&gt;

&lt;p&gt;但格式化浮点数要求 E0 ~ Ew-1 &lt;strong&gt;不全为0&lt;/strong&gt;(E为0, E-bias为-127)或&lt;strong&gt;不全为1&lt;/strong&gt;(E为255, E-bias为128)的情况，此时浮点数公式为：(-1)&lt;sup&gt;S&lt;/sup&gt; × 2&lt;sup&gt;E-bias&lt;/sup&gt; × m。&lt;/p&gt;

&lt;p&gt;E-bias: (-127, 128)&lt;/p&gt;

&lt;p&gt;T要求表示为&lt;strong&gt;大于等于1小于等于2&lt;/strong&gt;的科学计数法表示的小数&lt;/p&gt;

&lt;p&gt;S, E, T在相应块表示成二进制数&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;m = 1 + 2&lt;sup&gt;-t&lt;/sup&gt; T = 1 + ∑(i: 1 ~ t) 2&lt;sup&gt;-i&lt;/sup&gt;di&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;float(binary32): 9.0&lt;/p&gt;

&lt;p&gt;-&amp;gt; 转成二进制：1001.0&lt;/p&gt;

&lt;p&gt;-&amp;gt; 使用上述公式表示：-1&lt;sup&gt;0&lt;/sup&gt; * 2&lt;sup&gt;(3+127)&lt;/sup&gt; * 1.001  -&amp;gt;  -1&lt;sup&gt;0&lt;/sup&gt; * 2&lt;sup&gt;(130)&lt;/sup&gt; * 1.001 (bias: 127)&lt;/p&gt;

&lt;p&gt;-&amp;gt; 分区模型：&lt;/p&gt;

&lt;p&gt;S(+)      E(130)           T(1)&lt;/p&gt;

&lt;p&gt;0          10000010     00000000000000000000001&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Tip.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为什么会有&lt;code&gt;bias&lt;/code&gt;(kind of offset)存在？(Why does bisa exist?)&lt;/p&gt;

&lt;p&gt;对于E（指数）E是一个无符号整数所以E的取值范围为（0~ 255），但是在计数中指数是可以为负的，且出于范围对称考量，所以规定在存入E时，在它原本的值上加上中间数（127），在使用时减去中间数（127），这样E的真正取值范围就成了（-127~128）。&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-%E9%9D%9E%E8%A7%84%E6%A0%BC%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0-subnormalized-number" class="anchor"&gt;
  &lt;/a&gt;
  2). &lt;a href="https://stackoverflow.com/questions/8341395/what-is-a-subnormal-floating-point-number"&gt;非规格化浮点数 (subnormalized number) &lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;E0 ~ Ew-1为0(E为0, E-bias的exponent规定为-126[不是-127，出于无法表示的异常])的情况，此时leading bit从1变为0。&lt;/p&gt;

&lt;p&gt;因为 0&amp;lt;= T&amp;lt; 2&lt;sup&gt;t&lt;/sup&gt;, 1&amp;lt;= m &amp;lt; 2，规格化浮点数无法表示 0 ，因此规定：当一个数字的绝对值小于 b&lt;sup&gt;emin&lt;/sup&gt;时转为非规格化表示，浮点数的值由公式：(−1)&lt;sup&gt;S&lt;/sup&gt;×2&lt;sup&gt;emin−t&lt;/sup&gt;T = (-1)&lt;sup&gt;S&lt;/sup&gt;2&lt;sup&gt;emin&lt;/sup&gt;∑(i=1 ~ t) 2&lt;sup&gt;-i&lt;/sup&gt;di&lt;/p&gt;

&lt;p&gt;得到，此时0的表示是除了符号位之外的其他位全为0.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-%E7%89%B9%E6%AE%8A%E5%80%BC-special-values" class="anchor"&gt;
  &lt;/a&gt;
  3.） 特殊值 (Special Values)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;+∞&lt;/code&gt;：S -- 0   E -- Ei = 1  T = 0&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-∞&lt;/code&gt;:   S -- 1   E -- Ei = 1  T = 0&lt;/p&gt;

&lt;p&gt;NaN：E上每一位都为1，除去上面两个特殊值，都是NaN &lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/NaN#Quiet_NaN"&gt;quiet NaN 和 signaling NaN&lt;/a&gt;区别在于significand段的标记(flag)位&lt;/p&gt;

&lt;p&gt;quiet NaN不会引发任何额外的异常（ FPU 不会产生硬件异常），它们会在大多数操作中被使用。例外情况是，不能简单地将NaN原封不动地传递给输出，例如在格式转换或某些比较操作中。&lt;/p&gt;

&lt;p&gt;与此相反的则是signaling NaN&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E5%8D%81%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F-decimal-floatingpoint-format-number" class="anchor"&gt;
  &lt;/a&gt;
  十进制格式 Decimal Floating-Point Format Number
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#take-a-brief-look" class="anchor"&gt;
  &lt;/a&gt;
  Take a brief look
&lt;/h4&gt;

&lt;p&gt;Decimal Floating-Point format number has two encoding method, one called DPD(Densely Packed Decimal), and the other called BIS(a.k.a BID Binary Integer Decimal).&lt;/p&gt;

&lt;p&gt;十进制浮点格式数有两种编码方法，一种称为DPD(密集打包十进制为基数的小数)，另一种称为BIS(又名 BID 二进制整数表示的十进制为基数的小数)。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPvB-4a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/29/21H4dNkZb9FqeV5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPvB-4a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/29/21H4dNkZb9FqeV5.png" alt="Screen Shot 2021-03-29 at 20.04.12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#organization" class="anchor"&gt;
  &lt;/a&gt;
  Organization
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjv-pe_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/NpI4OVozBYEr6nP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjv-pe_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/NpI4OVozBYEr6nP.png" alt="Screen Shot 2021-03-30 at 16.23.14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;S: 符号位   1-bit&lt;/li&gt;
&lt;li&gt;Comb: 组合部分&lt;/li&gt;
&lt;li&gt;E: 指数位   w-bit      E = e + bias&lt;/li&gt;
&lt;li&gt;T: 尾数       t-bit        t = p - 1, T = d1d2⋯dp−1   [di: 2进制]&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;decimal32&lt;/th&gt;
&lt;th&gt;decimal64&lt;/th&gt;
&lt;th&gt;decimal128&lt;/th&gt;
&lt;th&gt;decimal{k}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;k, 32\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;9k/32-2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emax&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;td&gt;384&lt;/td&gt;
&lt;td&gt;6144&lt;/td&gt;
&lt;td&gt;3*2^(k/16+3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bias&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;398&lt;/td&gt;
&lt;td&gt;6167&lt;/td&gt;
&lt;td&gt;&lt;a href="#%E6%8C%87%E6%95%B0%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90"&gt;emax+p-2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sign bit&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;k/16+4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;15*k/16-10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#difference-between-bid-amp-dpd" class="anchor"&gt;
  &lt;/a&gt;
  Difference between BID &amp;amp; DPD
&lt;/h4&gt;

&lt;p&gt;BID编码与另一种DPD编码每一个部分都是最终编码成二进制进行存储，区别是在significand这段，BID编码是直接取科学计数法的有效数字部分将其转化二进制进行存储，DPD编码使用一个映射表，每3位10进制数字对应10位2进制数字，进行存储。&lt;/p&gt;

&lt;p&gt;对于十进制编码的方式，某些硬件上直接支持十进制处理，例如&lt;a href="https://en.wikipedia.org/wiki/Decimal_floating_point#Implementations"&gt;IBM的POWER系列&lt;/a&gt;，这时直接使用该标准对数字进行存储计算等处理，否则需要使用DPD编码转化二进制进行存储。&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#comb%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90" class="anchor"&gt;
  &lt;/a&gt;
  Comb部分解析
&lt;/h4&gt;

&lt;p&gt;针对两种情况：In both cases, the most significant 4 bits of the significand (which actually only have 10 possible values[0~9十个数字]) are combined with the most significant 2 bits of the exponent (3 possible values) to use 30 of the 32 possible values of a 5-bit field. The remaining combinations encode infinities and NaNs.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Combination field&lt;/th&gt;
&lt;th&gt;Exponent Msbits&lt;/th&gt;
&lt;th&gt;Significand Msbits&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;00mmm&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;0mmm&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01mmm&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;0mmm&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10mmm&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;0mmm&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1100m&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;100m&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1101m&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;100m&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1110m&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;100m&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11110&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;±Infinity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11111&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;NaN. Sign bit ignored. First bit of exponent continuation field determines if NaN is signaling.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;对于Significand Msbits 的 0 100在实际的significand表示中是不被表示的，这部分在结合部分(Comb)可以得出&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#dpd%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F" class="anchor"&gt;
  &lt;/a&gt;
  DPD(十进制编码格式)
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqKLZebx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/29/zlY3NkcSWo5yjas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqKLZebx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/29/zlY3NkcSWo5yjas.png" alt="Screen Shot 2021-03-29 at 20.40.26.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于Decimal64，Comb部分由5位构成，&lt;strong&gt;这五位分别来自于指数(E)和尾数(T)部分&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;G0G1 G2G3G4
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;G0G1是指数部分的最高两位&lt;/p&gt;

&lt;p&gt;G2G3G4是尾数的最高有效位&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;11 G2G3 G4
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;G2G3 : 指数部分最高两位&lt;/p&gt;

&lt;p&gt;G4: 8(10) + G4 (2)组成位数的最高有效数字&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1111 G4
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;表示特殊值，无穷大或NaN&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#bisaka-bid-binary-integer-decimal-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F" class="anchor"&gt;
  &lt;/a&gt;
  BIS(a.k.a. BID: Binary Integer Decimal 二进制编码格式)
&lt;/h5&gt;

&lt;p&gt;在二进制编码方案中，上图的comb和exponent部分才是真正的组合部分(RComb)，exponent 的具体位置由组合部分的前两个字节决定。&lt;/p&gt;

&lt;p&gt;对这种数字内存模型每个位编号，b0 b1...bk-1&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tf_NBis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/79ESOq5KtYdkuwL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tf_NBis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/79ESOq5KtYdkuwL.png" alt="Screen Shot 2021-03-30 at 09.23.18.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当b1b2 (2)   !=   11(2)，b1b2和其后的 w 位组成指数部分，剩下为尾数部分。&lt;/li&gt;
&lt;li&gt;当b1b2 (2)   ==   11(2)，b3b4 (2)   !=   11(2)，b3b4 和其后的 w 位组成指数部分，剩下为尾数部分。&lt;/li&gt;
&lt;li&gt;∞，NaN与十进制编码一致&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#%E6%8C%87%E6%95%B0%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90" class="anchor"&gt;
  &lt;/a&gt;
  指数部分解析
&lt;/h4&gt;

&lt;p&gt;指数部分由组合部分的两个比特和剩余的 w 个比特组成，由于组合部分的两个比特不可能为 11 ，组合部分中的指数部分共 3 种取值(00, 01, 10)。因此指数的所有可能取值总计有 3 * 2&lt;sup&gt;w&lt;/sup&gt; 种。&lt;/p&gt;

&lt;p&gt;十进浮点数的指数部分也和二进浮点数的指数部分一样，是由二进制表示的 E 减去一个置偏值 bias 。为什么置偏值不是恰好是 3 * 2&lt;sup&gt;w-1&lt;/sup&gt; ，这是因为此处的指数直接和 T 相乘，和二进浮点数乘以规格化(Normalizated)的 T 不同，这里没有规格化浮点数，因此置偏值比 3 * 2&lt;sup&gt;w-1&lt;/sup&gt; 多出来的部分就相当于规格化后多乘的值，这也是那个 bias = emax+p-2 中 p-2 的由来。&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E5%B0%BE%E6%95%B0%E9%83%A8%E5%88%86%E8%A7%A3%E6%9E%90" class="anchor"&gt;
  &lt;/a&gt;
  尾数部分解析
&lt;/h4&gt;

&lt;p&gt;尾数部分的最高位在组合部分中，剩余部分在最后的 t (Decimal64就是50) 个比特中。&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#bid%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F" class="anchor"&gt;
  &lt;/a&gt;
  BID(二进制编码格式)
&lt;/h5&gt;

&lt;p&gt;如果采用二进制编码方式， t直接按照二进制解析存入。&lt;/p&gt;

&lt;p&gt;拿Decimal64举例子，significand区域有50二进制位的存储空间，数字有10(significand中最高位0～9) * 2&lt;sup&gt;50&lt;/sup&gt; - 1种可能，但是数据大于10&lt;sup&gt;16&lt;/sup&gt;-1是非法的，标准将其当作是0&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#dpd" class="anchor"&gt;
  &lt;/a&gt;
  DPD
&lt;/h5&gt;

&lt;p&gt;使用此表表示数更能节省存储空间&lt;/p&gt;

&lt;p&gt;如果采用十进制编码方式，将 t 拆成十个十个一组，每组解码出 3 个十进制整数，和组合部分的一个数字拼接成一个十进制的数字，因此十进制编码方式的最大值为 (10&lt;sup&gt;3t/10+1&lt;/sup&gt;-1) * 10&lt;sup&gt;emax-p+1&lt;/sup&gt; 。&lt;/p&gt;

&lt;p&gt;具体如何将一组三个十进制数字(0~999)对应成一组10个二进制数字需要通过查询下表得知。&lt;/p&gt;

&lt;p&gt;&lt;u&gt;CHART FROM WIKIPEDIA&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIi-bUef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/K5uHE6tcX7eqrmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIi-bUef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.loli.net/2021/03/30/K5uHE6tcX7eqrmz.png" alt="Screen Shot 2021-03-30 at 16.35.54.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;左侧是经过DPD编码过的值，右侧是初始的三位十进制数字&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I.E. 我们来解释一下第三行&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;两侧绿色的abc，紫色的ghi，蓝色的f是同样的二进制数字，不过相对位置可能不同而已。&lt;/p&gt;

&lt;p&gt;左侧的DPD编码后的二进制数字序列&lt;code&gt;abcghf 1 0 1 i&lt;/code&gt;对应编码三位前十进制数，这三位十进制数表示成二进制分别为&lt;code&gt;0abc&lt;/code&gt; &lt;code&gt;100f&lt;/code&gt; &lt;code&gt;0ghi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如何使用公式来表达？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0abc&lt;/code&gt;(2) * &lt;strong&gt;100&lt;/strong&gt;(10) + &lt;code&gt;100f&lt;/code&gt;(2) * &lt;strong&gt;10&lt;/strong&gt;(10) + &lt;code&gt;0ghi&lt;/code&gt;(2) * &lt;strong&gt;1&lt;/strong&gt;(10)&lt;/p&gt;

&lt;p&gt;即&lt;/p&gt;

&lt;p&gt;[0b9b8b7](2) * &lt;strong&gt;100&lt;/strong&gt;(10) + [100b4](2) * &lt;strong&gt;10&lt;/strong&gt;(10) + [0b6b5b0](2) * &lt;strong&gt;1&lt;/strong&gt;(10)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E7%89%B9%E6%AE%8A%E5%80%BC-special-value" class="anchor"&gt;
  &lt;/a&gt;
  特殊值 (Special Value)
&lt;/h4&gt;

&lt;p&gt;和二进浮点数类似，当组合部分前 4 个比特均为 1 的时候该浮点数表示一个特殊值。其中，第 5 个比特为 0 则表示为无穷大，第 5 个比特为 1 则表示 NaN 。和二进浮点数类似的，第 5 个比特之后的一个比特如果为 0 则为 quiet NaN ，否则为 signaling NaN 。&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E5%8D%81%E8%BF%9B%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E5%80%BCvalue-of-decimal-floatingpoint-number" class="anchor"&gt;
  &lt;/a&gt;
  十进浮点数的值(Value of Decimal Floating-Point Number)
&lt;/h4&gt;

&lt;p&gt;(-1)&lt;sup&gt;S&lt;/sup&gt; * T * 10&lt;sup&gt;E - bias&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;其中的T和E的值都是由组合部分和各自延续部分(尾数)共同计算得出来的。&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#reference" class="anchor"&gt;
  &lt;/a&gt;
  Reference
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Decimal64_floating-point_format"&gt;decimal64 floating-point format - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Decimal_floating_point#Implementations"&gt;Decimal floating point - Wikipedia&lt;/a&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>swift</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Your manager can’t read your mind.</title>
      <author>Romina Suarez</author>
      <pubDate>Wed, 07 Apr 2021 14:18:06 +0000</pubDate>
      <link>https://dev.to/rowasc/your-manager-can-t-read-your-mind-1h6b</link>
      <guid>https://dev.to/rowasc/your-manager-can-t-read-your-mind-1h6b</guid>
      <description>&lt;p&gt;As a developer, something that always frustrated me was the fact that my managers didn’t seem to realize the disruption they caused. I would be working on a ticket, and someone would switch me to something else on short notice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here we go again. Stash my work. Create new branch. Understand what has to be done. Do it all over again once this one is done. Get asked why the ticket I had to drop isn’t finished yet. Well, because you gave me a different task, that’s why!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when I started managing people, I’d tell them to let me know if there was any problem, and to raise their concerns early if something wasn’t going to be finished on time.&lt;/p&gt;

&lt;p&gt;Time after time, I would be disappointed to hear that someone was delayed on a critical task because they were assigned a second task and dropped the first one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why didn’t you tell me?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oh, I thought you knew!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ah. The mythical mind reading manager. If you never lead a team, you probably assume information always gets to your manager first, including information about how you will proceed if given an ambiguous instruction like “hey, please fix this ticket” without any other specifications on when it is due, what the priority is, and if you should drop your tasks or not to attend to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You may think they know that when they tell you that, you will drop everything and do it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, very often, they don’t. This is especially true of newbie managers. Maybe because they assume there is enough trust that you would simply push back if you had a problem. Maybe because a PM or other member of the team sent you a ticket and told you to work on it without your manager being made aware. Maybe because they think you will work on it as soon as possible and nothing bad will happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They should know better. We should know better. But sometimes, we don’t.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I could write a blog for managers (and I might) about being specific when it comes to assigning work and what our expectations are… but I decided to write it for engineers because nobody ever tells us what we can do to make up for mistakes our managers make, or how to push them to improve, or even how we as developers can be better at asking the right questions to help us be more productive and less overwhelmed all the time.&lt;/p&gt;

&lt;p&gt;So. &lt;strong&gt;The next time you get a ticket assigned that would interfere with your work in progress, go ahead and ask&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Should I stop working on #this and get started on #newThing right away, or should I finish #this first?”&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;“If I drop #this, we may not make it to #that deadline, since I have to context switch 3x to work on #newThing and it takes some effort, is that okay with you?” …&lt;/p&gt;

&lt;p&gt;…or any other question that helps you figure out the best path forward.&lt;/p&gt;

&lt;p&gt;It may feel weird, but communicating your constraints is a good thing. Your manager may not have realized the problem that a new task would cause. Thanks to you, they may find a problem they had missed before around workflows, or they will learn how to plan better.&lt;/p&gt;

&lt;p&gt;They may tell you that YES, you need to drop your task. Or they may reconsider and reprioritize. But at least you will know, and they wont be able to ask you “why isn’t this other task done” 1 hour after they told you to context switch 😉&lt;/p&gt;

&lt;p&gt;They may even learn a thing or two about remote communications. As you do this, you may want to bring it up on a 1:1, and explain how you managed to stop context switching, or why context switching is problematic if it happens too often. I would expect any engineering manager to know this, but if they have forgotten how bad it can get… at least this will remind them to be careful when they assign work.&lt;/p&gt;

&lt;p&gt;On your end, by asking this questions you will know for sure when your task is urgent enough to drop everything and when it is only urgent because someone higher up the chain wants it ASAP. This is important, because it lets you make better decisions, too.&lt;/p&gt;

&lt;p&gt;Being the person who knows how to dig up important signal even in casual communications is a skill that will be incredibly useful as you progress in your career. You will understand how work flows from X to Y a lot better, and you will learn how to ask better, more insightful questions that help your team make better choices and be more productive.&lt;/p&gt;

&lt;p&gt;Let me know if you have had this problem, and how you approached it. I’d love to hear from you.&lt;/p&gt;




&lt;p&gt;This post is part of my series for remote software developers. You can check it out and subscribe here &lt;a href="https://rowasc.com/engineers-working-remotely/"&gt;https://rowasc.com/engineers-working-remotely/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>engineering</category>
      <category>remote</category>
      <category>communication</category>
    </item>
    <item>
      <title>Node.js 101 - Events</title>
      <author>Eric Chapman</author>
      <pubDate>Wed, 07 Apr 2021 14:09:35 +0000</pubDate>
      <link>https://dev.to/ericchapman/node-js-101-events-5bmo</link>
      <guid>https://dev.to/ericchapman/node-js-101-events-5bmo</guid>
      <description>&lt;h2&gt;Node.js Events&lt;/h2&gt;

&lt;p&gt;Much of the Node.js core is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called "emitters") emit named events that cause Function objects ("listeners") to be called.&lt;/p&gt;

&lt;p&gt;The following example shows a simple EventEmitter with a single listener that occur when for example a sale is made&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A new sale occur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The eventEmitter.on() method is used to register listeners, while the eventEmitter.emit() method is used to trigger the event.&lt;/p&gt;

&lt;h2&gt;Passing arguments to listeners&lt;/h2&gt;

&lt;p&gt;The eventEmitter.emit() method allows an arbitrary set of arguments to be passed to the listener functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`A new sale occur total of: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;599.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Node.j server work with eventEmitter&lt;/h2&gt;

&lt;p&gt;Now that we know about Node.js events. We are able to better understand the logic of the Node.js server object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// this will create a event name request&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// when Node.js server trigger a request event this message will display&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request received&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// this will loop and wait for events&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting for request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for today. Tomorrow the journey continue. Stay tune!&lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw" class="twitter-follow-button"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What would SQLite look like if written in Rust? — Part 3</title>
      <author>João Henrique Machado Silva</author>
      <pubDate>Wed, 07 Apr 2021 13:56:10 +0000</pubDate>
      <link>https://dev.to/thepolyglotprogrammer/what-would-sqlite-look-like-if-written-in-rust-part-3-ool</link>
      <guid>https://dev.to/thepolyglotprogrammer/what-would-sqlite-look-like-if-written-in-rust-part-3-ool</guid>
      <description>&lt;p&gt;Writing a &lt;a href="https://www.sqlite.org/arch.html"&gt;SQLite&lt;/a&gt; clone from scratch in Rust&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joaoh82/what-would-sqlite-look-like-if-written-in-rust-part-0-4f4k"&gt;← Part 0 — Overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joaoh82/what-would-sqlite-look-like-if-written-in-rust-part-1-2np4"&gt;← Part 1 — Understanding SQLite and Setting up CLI Application and REPL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/thepolyglotprogrammer/what-would-sqlite-look-like-if-written-in-rust-part-2-4g66"&gt;← Part 2 — SQL Statement and Meta Commands Parser + Error Handling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/joaoh82/rust_sqlite"&gt;View on Github (pull requests are more then welcome)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, slowly we are getting closer and closer to our objective. Which is to have a working simple relational database modeled after SQLite, meaning among other things, embedded into a single file. This time on top of all the research I had already mentioned in the previous articles of the series, I spent a lot of time just researching everything SQLite related. E.g.: &lt;a href="https://www.sqlite.org/docs.html"&gt;documentation&lt;/a&gt;, &lt;a href="https://sqlite.org/src/doc/trunk/README.md"&gt;code base&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=Jib2AmRb_rk"&gt;talks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also spent a lot of my time since the last chapter of the series understanding the data structures used on relational databases at their fundamental principles, how they are used on SQLite and what would be best way to approach them on the &lt;a href="http://www.sqlritedb.org/"&gt;SQLRite Project.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-structures-are-key-to-a-good-program" class="anchor"&gt;
  &lt;/a&gt;
  Data Structures are key to a good program.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uEDMmGCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ebuf7vcr82gzrup6n0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEDMmGCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ebuf7vcr82gzrup6n0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s &lt;a href="https://lwn.net/Articles/193245/"&gt;a quote from Linus Torvalds in 2006&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I’m a huge proponent of designing your code around the data, rather than the other way around, and I think it’s one of the reasons git has been fairly successful… I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his code or his data structures more important.&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Bad programmers worry about the code. Good programmers worry about data structures and their relationships.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you need more, here is &lt;a href="http://doc.cat-v.org/bell_labs/pikestyle"&gt;one from Rob Pike in 1989&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Data dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident.&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Data structures, not algorithms, are central to programming.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think those guys know what they are talking about when it comes to software, don’t you agree? Anyway, my take on what they mean by it is that &lt;strong&gt;good data structures makes coding easy to design and maintain&lt;/strong&gt;, whereas the best code in the world cannot make up for poor data structures. I think this also ties to what I said on &lt;a href="https://medium.com/the-polyglot-programmer/what-would-sqlite-look-like-if-written-in-rust-part-1-4a84196c217d"&gt;Part 1&lt;/a&gt;, &lt;em&gt;“If you spend enough time on planning, coding is easy”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So on this chapter of the series we will do a deep dive into the main data structures used on database design and hopefully we will get a better understanding on why they are used.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  So let’s get started!
&lt;/h1&gt;

&lt;p&gt;The first thing I would like to explore is a data structure called &lt;a href="https://en.wikipedia.org/wiki/B-tree"&gt;B-Tree&lt;/a&gt; which is a key piece of modern database design.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-start-by-talking-about-binary-search-trees" class="anchor"&gt;
  &lt;/a&gt;
  Lets start by talking about Binary Search Trees
&lt;/h1&gt;

&lt;p&gt;Traditionally sorted maps have been the domain of &lt;a href="https://en.wikipedia.org/wiki/Binary_search_tree"&gt;Binary Search Trees (BSTs)&lt;/a&gt;. There is no shortage of literature, implementations and promotions about BSTs in the the educational system. They are great to think about, have a great theoretical and practical applications, and have about a million different variations to satisfy your needs.&lt;/p&gt;

&lt;p&gt;The basic idea of a BST is that every element in the tree gets a single node. Each node has two pointers or children, a left child node and a right child node. Nodes in the sub-tree to the left must contain elements that are smaller then the parent, and nodes to the right must contain elements that are larger. This makes search fairly straight-forward: start at the “root” of the tree and compare the element in that node to your search key. Then recursively search either the left or right tree accordingly (or stop if you find an exact match).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XqNT8Iw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/macnusprtqreincebqnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XqNT8Iw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/macnusprtqreincebqnp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are several “types” of BSTs. For example if you use a &lt;a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree"&gt;Red-Black-Tree&lt;/a&gt;, then every basic operation (search, insert, remove) will take l&lt;a href="https://en.wikipedia.org/wiki/Time_complexity#Logarithmic_time"&gt;ogarithmic time&lt;/a&gt; worst-case, which is great!&lt;/p&gt;

&lt;p&gt;But BST have some serious practical issues when it comes to how computers actually work. A lots of applications, like databases and file systems, are not bound by how fast the CPU can execute instructions, but actually by how fast it can access the data on disk. Bottom line is that modern CPUs now a days go so fast that the data that they’re working with has to be &lt;em&gt;really&lt;/em&gt; fast and close to CPU to actually be used. Light only travels so fast! One other thing to take into account are the caches available to the CPUs that have a hierarchy that ranges from &lt;strong&gt;“very small and very fast” to “very large and very slow (relatively)”&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-caches-work-at-a-very-high-level" class="anchor"&gt;
  &lt;/a&gt;
  How do caches work? At a very high level…
&lt;/h2&gt;

&lt;p&gt;Caches usually work based on a time-space locality assumption. Ideally you would like for the data you need to be as close to each other as possible. For example, if you’re working with some data at location A right now, ideally you would want next data near location A. A great example of this assumption is something like looping over an array: every piece of data you want next is literally right next to the last one. &lt;strong&gt;So we can start to see how choosing the right data structure can make all the difference.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This assumption is usually implemented roughly like this: when location A in memory is requested, the CPU will check if it is in the fastest cache. If it is, great (cache hit)! If it’s not, too bad (cache miss), check the next (slower, bigger) level of cache. In the worst-case this bottoms out into your computer’s RAM (or worst, the disk!). When you &lt;em&gt;do&lt;/em&gt; find the data, it gets added to all the previous (smaller, faster) levels of cache, along with some of the data surrounding it. This operation then evicts some data that is determined to be unlikely to be needed. How exactly that works is out of the scope of this post, but the point is: &lt;strong&gt;cache hits are fast&lt;/strong&gt;, so we want to access data in a space-time local way. &lt;a href="http://surana.wordpress.com/2009/01/01/numbers-everyone-should-know/"&gt;To get an idea of scale, check out these numbers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started talking about BSTs and ended up talking about CPUs and Cache Hits and Misses. But how do BSTs accesses data? Basically randomly. Each node is allocated separately from every other node in the tree. So unlike an array, each node is in a separate location in memory and a search will amount to a series of random accesses. As a rough estimate, every time you go from a pointer to another you can expect a cache miss. &lt;strong&gt;Niet goed! (As the dutch would say!)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BSTs are actually very memory inefficient. Each node has &lt;em&gt;two&lt;/em&gt; pointers for every &lt;em&gt;single&lt;/em&gt; entry in the tree. So on a 64-bit that means you’ve got a 16-byte overhead for every element. To make it worst, half of those pointers are null. And that’s in the &lt;em&gt;best case scenario&lt;/em&gt;. When you factor in issues like padding and any extra metadata that nodes need to store (such as in a red-black tree), they are just terrible.&lt;/p&gt;

&lt;p&gt;To make things worst for BSTs, note that &lt;em&gt;every insertion&lt;/em&gt; triggers an allocation. Allocations are generally viewed as a slow thing to do, so if we can avoid them, we would!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B-Trees to the rescue!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-a-btree-and-why" class="anchor"&gt;
  &lt;/a&gt;
  What’s a B-Tree? And why?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGak3Fna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgzia29dodstiirmq70r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGak3Fna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgzia29dodstiirmq70r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;B-Tree&lt;/strong&gt; is a self-balancing &lt;a href="https://en.wikipedia.org/wiki/Tree_(data_structure)"&gt;tree data structure&lt;/a&gt; that maintains data sorted and allows for searches, sequential access, insertions and deletions in &lt;a href="https://en.wikipedia.org/wiki/Time_complexity#Logarithmic_time"&gt;logarithmic time&lt;/a&gt;. But wait?! Isn’t that exactly what a BST is? So why do I need a B-Tree?&lt;/p&gt;

&lt;p&gt;A B-Tree takes the idea of a BST, and roughly speaking, say &lt;em&gt;“how about we put some arrays in there, arrays are easy and computers love arrays, so why not?”.&lt;/em&gt; So instead of each node consisting of a single element with two children, a B-Tree have an array of elements with an array of children. All ordered!&lt;/p&gt;

&lt;p&gt;Basically, for some fixed constant &lt;em&gt;B&lt;/em&gt;, each node contains between &lt;em&gt;B-1&lt;/em&gt; and &lt;em&gt;2B-1&lt;/em&gt; elements in sorted order (root can have as few as one element). An &lt;em&gt;internal&lt;/em&gt; node (one which has children) with &lt;em&gt;k&lt;/em&gt; elements has &lt;em&gt;k+1&lt;/em&gt; children. In this way each element still has a “left” and “right” child, but for example the 2nd child contains elements strictly between the first and second element.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://en.wikipedia.org/wiki/B-tree"&gt;Knuth’s definition&lt;/a&gt;, a B-tree of order M is a tree which satisfies the following properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Every node has at most &lt;em&gt;m&lt;/em&gt; children.&lt;/li&gt;
&lt;li&gt; Every non-leaf node (except root) has at least ⌈M/2⌉ child nodes.&lt;/li&gt;
&lt;li&gt; The root has at least two children if it is not a leaf node.&lt;/li&gt;
&lt;li&gt; A non-leaf node with &lt;em&gt;k&lt;/em&gt; children contains &lt;em&gt;k&lt;/em&gt; − 1 keys.&lt;/li&gt;
&lt;li&gt; All leaves appear in the same level and carry no information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each internal node’s keys act as separation values which divide its subtrees. For example, if an internal node has 3 child nodes (or subtrees) then it must have 2 keys: _a1 and _a2. All values in the leftmost subtree will be less than _a1, all values in the middle subtree will be between _a1 and _a2, and all values in the rightmost subtree will be greater than _a2.&lt;/p&gt;

&lt;p&gt;Historically, ever since its &lt;a href="https://en.wikipedia.org/wiki/B-tree"&gt;invention in 1970, B-Trees&lt;/a&gt; have been very popular as a data structure stored on disk. This is because accessing disk can be a super slow operation, but with a B-Tree you get back big chunks at once, in contrast to a BST. &lt;strong&gt;It takes way less CPU time to search through your data than it does to read the data into memory from disk&lt;/strong&gt;. So if you for example take &lt;em&gt;B = 1000&lt;/em&gt;, then you can get a thousand entries in the tree at once and process them in RAM relatively fast. Your tree will also be &lt;em&gt;really&lt;/em&gt; shallow (not deep), specially in comparison to a BST, meaning each search will maybe hit the disk by following a pointer only a couple times. Sound familiar? This is the cache-hit problem that we were talking about just above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just so you could have an idea, here are some real numbers:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A 100,000 row SQLite database has a B-Tree with a depth 3. So to fetch a node we only need to read 3 pages or jump 3 times between nodes. If we had a BST we would have needed to do log(100000) / log(2) = 16 seeks! That’s more than five times as many. We definitely do not want that!&lt;/p&gt;

&lt;p&gt;That is all nice and very interesting, but enough theory about B-Trees and let’s take a look into how SQLite uses it. If you would like to more in depth about B-Tree the its implementation in different programming languages, I highly recommend taking a look at the &lt;a href="http://opendatastructures.org/ods-python/14_2_B_Trees.html"&gt;Open Data Structures.&lt;/a&gt; For another great source of information that gives a lot of background on B-Trees, &lt;a href="https://www.amazon.com/Art-Computer-Programming-Sorting-Searching/dp/0201896850"&gt;see Knuth, The Art of Computer Programming, Volume 3 “Sorting and Searching”, pages 471–479&lt;/a&gt;. &lt;strong&gt;Nice light reading…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQLite uses B-Trees to represent both tables and indexes. But SQLite actually uses two variants of B-Trees. Traditional B-Tree is used to store indexes and it is referred as &lt;a href="https://www.sqlite.org/fileformat2.html#btree"&gt;&lt;strong&gt;“Index B-Trees”&lt;/strong&gt;&lt;/a&gt;. And to store tables, SQLite uses a variation called B+ Tree, that is referred to as &lt;a href="https://www.sqlite.org/fileformat2.html#btree"&gt;&lt;strong&gt;“Table B-Trees”&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main difference is that a “Table B-Tree” or B+Tree uses a 64-bit signed integer key to reference the data in the Internal Nodes and all the data is actually stored in the Leaf Nodes. This 64-bit signed integer is referred to as “&lt;a href="https://www.sqlite.org/lang_createtable.html#rowid"&gt;ROWID&lt;/a&gt;”. Additionally, a leaf node may include a pointer to the next leaf node to speed sequential access. Now an “Index B-Tree” or just B-Tree uses arbitrary keys and does not store any data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some basic differences:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-------------------------------+----------------+-----------------+  
|               #               |      B-tree    |       B+ tree   |  
+-------------------------------+----------------+-----------------+  
| Pronounced                    | “Bee Tree”     | “Bee Plus Tree” |      
| Used to store                 | Indexes        | Tables          |      
| Internal nodes store keys     | Yes            | Yes             |      
| Internal nodes store values   | Yes            | No              |      
| Number of children per node   | Less           | More            |      
| Internal nodes vs. leaf nodes | Same struct    | Different struct|   
+-------------------------------+----------------+-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another important piece of information is that SQLite keeps one “Table B-Tree” in the database for each table in the database schema, including system tables such as &lt;a href="https://www.sqlite.org/schematab.html"&gt;sqlite_schema&lt;/a&gt;. SQLite also has a type of table called &lt;a href="https://www.sqlite.org/withoutrowid.html"&gt;WITHOUT_ROWID&lt;/a&gt;, but I won’t get into this right now. SQLite also keeps one “Index B-Tree” in the database for each index in the schema, including implied indexes created by UNIQUE constraints.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s try to visualize it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine that you have the following table stored in the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-------+-------+-------+-----+  
| ROWID | Name  | Marks | Age |  
+-------+-------+-------+-----+  
|     6 |  Jone |     5 |  28 |  
|    15 | Alex  |    32 |  45 |  
|    12 | Tom   |    37 |  23 |  
|    53 | Ron   |    87 |  13 |  
|    24 | Mark  |    20 |  48 |  
|    25 | Bob   |    89 |  32 |  
+-------+-------+-------+-----+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, the database creates a unique auto incrementing index (ROWID or uses the primary key) for each of the given record and convert relevant rows into a byte stream. Then it stores each of the key and record byte stream on a B+tree. Here, the ROWID is used as the key for indexing. The key and record byte stream altogether know as Payload. Resulting B+tree could be represented as follows.&lt;/p&gt;

&lt;p&gt;B+tree on SQLite Database&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXGXPABb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l098c51clvhc5vv2vtuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXGXPABb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l098c51clvhc5vv2vtuo.png" alt="B+tree on SQLite Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, all records are stored on leaf nodes of the B+tree or “Table B-Tree” and index or ROWID are used as the key to creating a B+tree. There are no records stored on &lt;em&gt;Internal nodes&lt;/em&gt;. And each of the leaf nodes have a reference to next record in the tree. This way the database can perform a binary search by using the index or sequential search by searching through every element and only traveling through the leaf nodes.&lt;/p&gt;

&lt;p&gt;If no indexing used, then the database will read each of these records to find the given record. When indexing enabled, the database creates a B-Tree or “Index B-Tree” for each of the indexed columns in the table as follows. In this example we are indexing the “Name” column and the column value is used as a key in the B-tree for indexing. The index is the reference to the actual data record in the “Table B-Tree”.&lt;/p&gt;

&lt;p&gt;Index B-Tree on SQLite Database&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DK6pZ28N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnk4jov83xbnb4cg5nfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DK6pZ28N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnk4jov83xbnb4cg5nfa.png" alt="Index B-Tree on SQLite Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When indexing is available, first the database engine will search a given key in corresponding Index B-Tree and get the index in logarithmic time. Then it performs another search in Table B-Tree or B+Tree by using already found index also in logarithmic time and returns the record.&lt;/p&gt;

&lt;p&gt;Since we didn’t really do any coding this time, here it is just a taste of how a Database is represented in the &lt;a href="https://sqlite.org/src/doc/trunk/README.md"&gt;SQLite codebase&lt;/a&gt;, which by the way is really well commented and documented.&lt;/p&gt;

&lt;p&gt;sqliteint.h&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8dt31RrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rtq50tg8wbf7zoofm98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8dt31RrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rtq50tg8wbf7zoofm98.png" alt="sqliteint.h"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is it, out beloved &lt;code&gt;Btree&lt;/code&gt;, representing the beginning of our database. If we dig deep into these properties we will start to see a lot of what we have been talking about in the post. I won’t do this here, but I highly recommend that you take a look at the &lt;a href="https://sqlite.org/src/doc/trunk/README.md"&gt;SQLite code&lt;/a&gt;, if you are curious.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;I am very big fan of the &lt;a href="https://en.wikipedia.org/wiki/First_principle"&gt;First Principles Approach&lt;/a&gt;. When applying First Principles you first try to Identify the problem you are trying to solve, define some constraints and assumptions. The good thing about defining constraints at the start is that by defining constraints you are basically defining what you cannot do. And if you define what you cannot do, what you can do becomes a lot more clear. After this first step you breakdown the problem into smaller pieces or its fundamental principles. And last but not least, create a new solution from scratch.&lt;/p&gt;

&lt;p&gt;This time we took a very important step towards understanding the problem, defining some constraints by defining some limitations of some data structures and even broke down the problem into smaller pieces like how to deal with tables and indexes.&lt;/p&gt;

&lt;p&gt;Now we are ready to decide how we are going to build a solution to the problem from scratch, meaning, how are we actually going to build our data structures in Rust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joaoh82/what-would-sqlite-look-like-if-written-in-rust-part-0-4f4k"&gt;← Part 0 — Overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joaoh82/what-would-sqlite-look-like-if-written-in-rust-part-1-2np4"&gt;← Part 1 — Understanding SQLite and Setting up CLI Application and REPL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/thepolyglotprogrammer/what-would-sqlite-look-like-if-written-in-rust-part-2-4g66"&gt;← Part 2 — SQL Statement and Meta Commands Parser + Error Handling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/joaoh82/rust_sqlite"&gt;View on Github (pull requests are more then welcome)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanna follow this track don’t forget to follow me here on Medium and also give a couple of claps!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-sources" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Additional sources:&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://jvns.ca/blog/2014/10/02/how-does-sqlite-work-part-2-btrees/"&gt;How does SQLite work? Part 2: btrees! (or: disk seeks are slow don’t do them!)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cglab.ca/~abeinges/blah/rust-btree-case/"&gt;Rust Collections Case Study: BTreeMap by Alexis Beingessner&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cstack.github.io/db_tutorial/parts/part7.html"&gt;Let’s Build a Simple Database — Part 7 — Introduction to the B-Tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://opendatastructures.org/ods-python/14_2_B_Trees.html"&gt;Open Data Structures — 14.2 B-Trees&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>rust</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learnings from Albert Einstein life</title>
      <author>manish srivastava</author>
      <pubDate>Wed, 07 Apr 2021 13:55:22 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/learning-from-albert-einstein-life-1pg3</link>
      <guid>https://dev.to/manishfoodtechs/learning-from-albert-einstein-life-1pg3</guid>
      <description>&lt;p&gt;Einstein a Jewish from Germany was working on Hitler's will at a German university. While at university, he despised the chemical laboratories that were developing weapons of war. He had no idea Hitler would use it to commit mass murders of Jews.&lt;/p&gt;

&lt;p&gt;Eddington, an English scientist was the first to explain his theory of gravity  over Newton's gravity laws . English people were not happy as Britain was war with Germany.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learning:&lt;/em&gt;&lt;br&gt;
(1) It's not the country but leaders who are right or wrong.&lt;br&gt;
(2) Science has no boundaries. Even learn from your enemies.&lt;br&gt;
(3) Laws can be overturned.&lt;/p&gt;

&lt;p&gt;Einstein never wears shocks .&lt;br&gt;
&lt;em&gt;Learning:&lt;/em&gt; clothes are for your convenience. It is not required that you wear the same clothes as the people around you.&lt;/p&gt;

&lt;p&gt;Einstein sleeps for ten hours everyday.&lt;br&gt;
 &lt;em&gt;Learning&lt;/em&gt; :Sleep as much as you want . You come up with brilliant ideas. In his dream, Einstein examined the theory of relativity.&lt;/p&gt;

&lt;p&gt;Einstein smoked a lot of pipe tobacco &lt;br&gt;
&lt;em&gt;Learning:&lt;/em&gt; Live life to the fullest&lt;/p&gt;

&lt;p&gt;Einstein spends 2-3 hours playing violin.&lt;br&gt;
&lt;em&gt;Learning:&lt;/em&gt; Music gives you the ability to think.&lt;/p&gt;

&lt;p&gt;Einstein eats insects from trees/ plants/ pots.&lt;br&gt;
&lt;em&gt;Learning:&lt;/em&gt; Consume nutritious foods&lt;/p&gt;

&lt;p&gt;Einstein never wanted his brain to be kept in a laboratory after his death. However, the post-mortem doctor took his brain and kept it in his basement for 45+ years for research. He chopped it into pieces before his death. His brain pieces are now on display in a museum.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learning:&lt;/em&gt; You don't know what people will do with your body after your death.&lt;/p&gt;

&lt;p&gt;Einstein said something in German as last words. Nurses in the United States were unable to understand his final words. As a result, no one knows what Einstein's final words were.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learning:&lt;/em&gt; Either die in your country or if in other country use there's language.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;manish srivastava&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anything you want to share?&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>Easily deploy TypeScript project to AWS Lambda using Github Actions</title>
      <author>Nir Hadassi</author>
      <pubDate>Wed, 07 Apr 2021 13:43:15 +0000</pubDate>
      <link>https://dev.to/aspecto/easily-deploy-typescript-project-to-aws-lambda-using-github-actions-10g1</link>
      <guid>https://dev.to/aspecto/easily-deploy-typescript-project-to-aws-lambda-using-github-actions-10g1</guid>
      <description>&lt;p&gt;I recently worked on a small TypeScript project which I wanted to deploy as a Lambda to AWS.&lt;/p&gt;

&lt;p&gt;My project had &lt;strong&gt;multiple files&lt;/strong&gt; and some &lt;strong&gt;npm dependencies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I found some resources online, but none of them really hit the spot.&lt;/p&gt;

&lt;p&gt;Some didn’t explain how to include the &lt;code&gt;node_modules&lt;/code&gt;, some didn’t explain how to do it with TypeScript and some just handled a single file.&lt;/p&gt;

&lt;p&gt;In this post, I’ll describe how to prepare the project for deployment and show a detailed example of doing it using Github Actions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-structure" class="anchor"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h1&gt;

&lt;p&gt;Let’s assume our project structure looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ├── package.json
 ├── tsconfig.json
 ├── node_modules
 │    ├── module_1
 │    ├── module_2
 │    └── etc..
 └── src
      ├── index.ts
      └── utils.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "compilerOptions": {
    "module": "commonjs",
    "target": "ES2017",
    "lib": ["ES2019"],
    "rootDir": "src",
    "outDir": "dist",
    "declaration": false, 
    "sourceMap": false,
    "inlineSources": false,
    "types": ["node"]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;index.ts&lt;/code&gt; contains as the main &lt;code&gt;handler&lt;/code&gt;, and uses &lt;code&gt;utils.ts&lt;/code&gt;, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { APIGatewayEvent, Context } from 'aws-lambda';
import { doSomething } from './utils';

export const handler = async (event: APIGatewayEvent, context: Context) =&amp;gt; { 
    doSomething();
    // Do some other stuff…
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#problem" class="anchor"&gt;
  &lt;/a&gt;
  Problem
&lt;/h1&gt;

&lt;p&gt;AWS Lamda can only run &lt;strong&gt;js&lt;/strong&gt; files!&lt;/p&gt;

&lt;p&gt;Also, AWS Lambda can’t install &lt;code&gt;node_modules&lt;/code&gt; for us.&lt;/p&gt;

&lt;p&gt;With the default settings, AWS Lambda supports either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploying a single &lt;code&gt;index.js&lt;/code&gt; file directly.&lt;/li&gt;
&lt;li&gt;Upload a &lt;strong&gt;zip&lt;/strong&gt; file containing all the project files, which has the &lt;code&gt;index.js&lt;/code&gt; in the zip root. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we need to zip the project correctly, without including the parent directory.&lt;/p&gt;

&lt;p&gt;We also need to make sure the &lt;code&gt;node_modules&lt;/code&gt; are part of this zip file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iMJnu7Vm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndo6g3lq3dersqz30j2n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iMJnu7Vm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndo6g3lq3dersqz30j2n.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prepare-for-deployment" class="anchor"&gt;
  &lt;/a&gt;
  Prepare for deployment
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-build-the-project" class="anchor"&gt;
  &lt;/a&gt;
  1. Build the project
&lt;/h2&gt;

&lt;p&gt;We will use TypeScript’s &lt;code&gt;tsc&lt;/code&gt; command to transpile the project into js files.&lt;/p&gt;

&lt;p&gt;After building, this will be our project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── package.json
├── tsconfig.json
├── node_modules
├── dist
│    ├── index.js
│    └── utils.js
└── src
     ├── index.ts
     └── utils.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-move-nodemodules-to-dist-folder" class="anchor"&gt;
  &lt;/a&gt;
  2. Move node_modules to dist folder
&lt;/h2&gt;

&lt;p&gt;As mentioned before, AWS Lambda can’t install the node_modules for us, so we need to assure they are located correctly before creating our zip file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-zip" class="anchor"&gt;
  &lt;/a&gt;
  3. ZIP
&lt;/h1&gt;

&lt;p&gt;The project needs to be zipped in the required structure, &lt;strong&gt;without the parent directory&lt;/strong&gt;. The easiest way I found to do it, is to run the following command from the project root:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ (cd dist &amp;amp;&amp;amp; zip -r ../function.zip .)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The zip is now ready for deployment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploy-using-github-actions" class="anchor"&gt;
  &lt;/a&gt;
  Deploy using Github Actions
&lt;/h1&gt;

&lt;p&gt;The deployment part will be done using &lt;a href="https://github.com/marketplace/actions/aws-lambda-deploy"&gt;appleboy/lambda-action&lt;/a&gt;, and can be easily substituted with a corresponding AWS CLI command, which comes preinstalled on Github Actions CI machines.&lt;/p&gt;

&lt;p&gt;Here’s a detailed example of a Github action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Deploy

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: yarn

        # build command should be set in your package.json scripts as: "build": "tsc"
      - name: Build
        run: yarn build

      - name: Move node_modules to dist
        run: mv node_modules dist/node_modules

      - name: Zip
        run: (cd dist &amp;amp;&amp;amp; zip -r ../function.zip .)

      - name: Deploy to AWS
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: my-cool-function
          zip_file: function.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! Your Lambda is now ready for work.&lt;/p&gt;

&lt;p&gt;We post tutorials like this weekly on Aspecto &lt;a href="https://www.aspecto.io/blog/?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=deploy-typescript-to-aws-lambda"&gt;blog&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Check out one of our latest tutorials - &lt;strong&gt;&lt;a href="https://www.aspecto.io/blog/how-to-send-large-sqs-sns-messages-with-node-js/?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=deploy-typescript-to-aws-lambda"&gt;How to Send Large SQS/SNS Messages with Node.js&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>tutorial</category>
      <category>aws</category>
      <category>github</category>
    </item>
    <item>
      <title>Voices from Women in the digital industry Pt. 3</title>
      <author>Annika_H</author>
      <pubDate>Wed, 07 Apr 2021 13:24:43 +0000</pubDate>
      <link>https://dev.to/s2engineers/voices-from-women-in-the-digital-industry-pt-3-4lpa</link>
      <guid>https://dev.to/s2engineers/voices-from-women-in-the-digital-industry-pt-3-4lpa</guid>
      <description>&lt;p&gt;&lt;em&gt;Illustration by &lt;a href="https://dribbble.com/shots/12233236-Writing-an-article-for-your-blog"&gt;Gloria Shugleva&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As part of International Women's Day, we at SinnerSchrader created an internal website that was filled with content from our employees. Among other things, we asked various women in leadership positions the same three questions. The answers were so inspiring that we didn't want to withhold them from the rest of the world. This time we have Kristina Schmidt's (Head of Talent Management) answers.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-female-leadership-mean-to-you" class="anchor"&gt;
  &lt;/a&gt;
  What does female leadership mean to you?
&lt;/h2&gt;

&lt;p&gt;For me, female leadership is a chance to create more diversity and perspectives. &lt;/p&gt;

&lt;p&gt;At the same time, it is also an opportunity to break down old leadership patterns and create new development opportunities, both for individuals and for us as an organization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-you-say-that-being-a-woman-has-influenced-your-way-of-leading-andor-did-you-have-to-acquire-or-drop-certain-qualities-to-be-successful" class="anchor"&gt;
  &lt;/a&gt;
  Would you say that being a woman has influenced your way of leading and/or did you have to acquire (or drop) certain qualities to be successful?
&lt;/h2&gt;

&lt;p&gt;It is not just being a woman, but my life experience, my history, my friends and family that have shaped and influenced my resilience and me significantly.&lt;/p&gt;

&lt;p&gt;It is also my boundaries that have made me learn by overstepping, that have made me have experiences and that have made me learn again and again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-would-you-like-to-tell-young-women-who-aim-to-take-a-leadership-role-in-the-future" class="anchor"&gt;
  &lt;/a&gt;
  What would you like to tell young women who aim to take a leadership role in the future?
&lt;/h2&gt;

&lt;p&gt;Take chances and be sure: every fall is an opportunity to learn, use your strengths, be brave and trust yourself! Find someone who supports you and your goals.&lt;/p&gt;

</description>
      <category>career</category>
      <category>interview</category>
      <category>motivation</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>Solving the Dominoes problem with Graph Theory and Typescript</title>
      <author>Kirk Shillingford</author>
      <pubDate>Wed, 07 Apr 2021 13:20:07 +0000</pubDate>
      <link>https://dev.to/kirkcodes/solving-the-dominoes-problem-with-graph-theory-and-typescript-45f2</link>
      <guid>https://dev.to/kirkcodes/solving-the-dominoes-problem-with-graph-theory-and-typescript-45f2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prelude" class="anchor"&gt;
  &lt;/a&gt;
  Prelude
&lt;/h2&gt;

&lt;p&gt;This is a very short article which talks about using graph theory to solve my latest code challenge.&lt;/p&gt;

&lt;p&gt;Every two weeks my online community group, &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt; picks a new challenge for us to work on together.&lt;/p&gt;

&lt;p&gt;This fortnight we've been working on the &lt;a href="https://exercism.io/tracks/javascript/exercises/dominoes"&gt;Dominoes problem&lt;/a&gt; on &lt;a href="https://www.exercism.io"&gt;https://www.exercism.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I tried to solve this &lt;a href="https://dev.to/kirkcodes/solving-the-dominoes-exercism-problems-with-active-patterns-in-f-384d"&gt;previously&lt;/a&gt; in F# without having to do any  recursion or traversals and that &lt;em&gt;almost&lt;/em&gt; worked.&lt;/p&gt;

&lt;p&gt;While looking at other implementations I stumbled upon &lt;a href="https://exercism.io/tracks/fsharp/exercises/dominoes/solutions/8d97e2a04a40484eae7cb0d6c30f515b"&gt;this solution&lt;/a&gt; which proposed that you could solve the problem by modelling the dominoes as a &lt;a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)"&gt;Graph&lt;/a&gt;. I liked the approach conceptually, but didn't want to just recreate the answer in F# again so I figured I'd try it with Typescript.&lt;/p&gt;

&lt;p&gt;So without further ado, let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#problem" class="anchor"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;p&gt;Paraphrasing exercism.io, "Write a function &lt;code&gt;canChain&lt;/code&gt; to determine whether a set of dominoes (an array of tuples) &lt;br&gt;
can be chained."&lt;/p&gt;

&lt;p&gt;e.g. The dominoes &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1, 2), (1, 3), (2, 3)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;can be chained together as &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1, 2) (2, 3) (3, 1)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;where each domino is joined at matching number terminals.&lt;/p&gt;

&lt;p&gt;Conversely the dominoes &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1, 2), (1, 3), (4, 4)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;cannot be chained because there is no domino&lt;br&gt;
that can connect to &lt;strong&gt;(4, 4)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some extra rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Empty arrays should return true &lt;/li&gt;
&lt;li&gt;The ends of the domino set should also match (making a perfect loop)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;canChain&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;canChain&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;canChain&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;canChain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;canChain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#methodology" class="anchor"&gt;
  &lt;/a&gt;
  Methodology
&lt;/h3&gt;

&lt;p&gt;We can model our set of dominoes as a graph where each domino represents two nodes (one for each number on the domino) and the edge/line/arrow that connects them.&lt;/p&gt;

&lt;p&gt;When two dominoes have the same number, that means at least one of their nodes overlap and they can be chained.&lt;/p&gt;

&lt;p&gt;Thus we can rephrase the problem of &lt;em&gt;"Can the dominoes chain?"&lt;/em&gt; to &lt;em&gt;"Do these nodes all connect?"&lt;/em&gt; and &lt;em&gt;"Can we get from any node to every other node and back to the start?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It turns out, in graph theory, this type of configuration already has a name: A Euler Graph. &lt;/p&gt;

&lt;p&gt;A Euler graph has a &lt;a href="https://en.wikipedia.org/wiki/Eulerian_path"&gt;Eulerian cycle&lt;/a&gt;, which is exactly what we just described:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a Eulerian cycle is a path starting and ending on the same vertex) that visits each edge exactly once? - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So all we need to do to prove if our dominoes can chain is to prove that the graph those dominoes&lt;br&gt;
represent has a Euler cycle.&lt;/p&gt;

&lt;p&gt;And THAT it turns out, also has a formal definition, &lt;strong&gt;Euler's Theorem&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A Connected graph has an Euler cycle if and only if every vertex has even degree".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So our solution now has two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Check if every vertex (number) in our set of dominoes has an &lt;strong&gt;even degree&lt;/strong&gt; (appears as a multiple of two).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check if the dominoes can be converted to a &lt;strong&gt;Connected&lt;/strong&gt; graph&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#implementation" class="anchor"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#establishing-our-domain" class="anchor"&gt;
  &lt;/a&gt;
  Establishing our domain
&lt;/h3&gt;

&lt;p&gt;Since it's Typescript, we'll start the way we always do by defining the types that establish the domain we're working with. We want to define what a Domino is (in this implementation) as well as some of the data structures related to Graph modelling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NodeNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Domino&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NodeNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NodeNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;EdgeSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Domino&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// A representation of the set of edges in a graph&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MatrixValue&lt;/span&gt;&lt;span class="p"&gt;[][];&lt;/span&gt; &lt;span class="c1"&gt;// Representation of a graph as a matrix of filled/unfilled cells&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][];&lt;/span&gt; &lt;span class="c1"&gt;// Representation as a list of connected nodes&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;MatrixValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Filled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Empty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NodeStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Visited&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not Visited&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;EulerCondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EdgeSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Functions that test our Euler's theory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The three types above, &lt;code&gt;EdgeSet&lt;/code&gt;, &lt;code&gt;AdjacencyMatrix&lt;/code&gt;, and &lt;code&gt;AdjacencyList&lt;/code&gt; represent three common ways of representing graphs. Our list of dominoes is passed into our code as an &lt;code&gt;EdgeSet&lt;/code&gt;; a sequence representing pairs of connected nodes.&lt;/p&gt;

&lt;p&gt;However to determine if we have a Eulerian cycle, we'll have to convert our &lt;code&gt;EdgeSet&lt;/code&gt; to an &lt;code&gt;AdjacencyMatrix&lt;/code&gt; and then convert that to an &lt;code&gt;AdjacencyList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So let's define some functions to do just that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-conversion-functions" class="anchor"&gt;
  &lt;/a&gt;
  Creating our conversion functions
&lt;/h3&gt;

&lt;p&gt;First we need to define two small helper functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// yes, this returns itself.&lt;/span&gt;

&lt;span class="c1"&gt;// simplifies an edgeset down to its unique nodes by converting to and from a set&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GetNodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EdgeSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;NodeNumber&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetNodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can define a function that converts an &lt;code&gt;EdgeSet&lt;/code&gt; into the appropriate &lt;code&gt;AdjacencyMatrix&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EdgeSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toMatrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ToMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodeToBool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodeNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// initial graph of all false values&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;initMatrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Empty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;domino&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Domino&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;domino&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nodeToBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nodeToBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Filled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nodeToBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nodeToBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Filled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addToMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initMatrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and a function that turns an &lt;code&gt;AdjacencyMatrix&lt;/code&gt; into an &lt;code&gt;AdjacencyList&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToAdjacencyList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyMatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toAdjacencyList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ToAdjacencyList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;row&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MatrixValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// add indexes&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Empty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// filter unfilled cells&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// keep indexes&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We won't dive too deep into the code behind these functions except to say that what matters most to us is the &lt;code&gt;AdjacencyList&lt;/code&gt;. An &lt;a href="https://en.wikipedia.org/wiki/Adjacency_list"&gt;Adjacent List&lt;/a&gt; is a way of representing finite graphs where each node in the list contains the set of nodes adjacent to that node.&lt;/p&gt;

&lt;p&gt;e.g. Earlier, we had the dominoes &lt;br&gt;
&lt;strong&gt;(1, 2), (1, 3), (4, 4)&lt;/strong&gt;&lt;br&gt;
We said that we could represent these in typescript as the EdgeSet&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[[1, 2], [1, 3], [4, 4]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But we could also put them in the shape of the AdjacencyList &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[[2, 3], [1], [1], []]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In this represantation, each item in the outer list represents a node, and each inner list is the the &lt;em&gt;adjacent&lt;/em&gt; nodes to that one.&lt;/p&gt;

&lt;p&gt;So we can read this adjacency list as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node 1 has nodes 2 and 3 adjacent to it&lt;/li&gt;
&lt;li&gt;Node 2 has node 1 adjacent to it&lt;/li&gt;
&lt;li&gt;Node 3 has node 1 adjacent to it&lt;/li&gt;
&lt;li&gt;Node 4 has no nodes adjacent to it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this corresponds perfectly to what we see looking at the original dominoes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implementing-our-search-function" class="anchor"&gt;
  &lt;/a&gt;
  Implementing our search function
&lt;/h3&gt;

&lt;p&gt;Now that we have a data structure showing our nodes and who they're adjacent to, we need a function that actually checks to see whether we can get to every node from any one starting node.&lt;/p&gt;

&lt;p&gt;There are a few options for what we can use to do this but here we'll be applying the &lt;a href="https://en.wikipedia.org/wiki/Depth-first_search#:~:text=Depth%2Dfirst%20search%20(DFS),along%20each%20branch%20before%20backtracking."&gt;Depth-First Search&lt;/a&gt;, a well known algorithm for traversing tree/graph data structures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Depth-first&lt;/em&gt; means it will travel all the way to the end of a 'tree' from the root before backtracking (unlike its counterpart, _Breadth-first search, which will check all paths on one level before going lower).&lt;/p&gt;

&lt;p&gt;So our depth-first search (dfs) function will (recursively) go from node to adjacent nodes as defined in our Adjacency list. To help it, we'll make an array representing all the nodes it's seen so far called &lt;code&gt;visited&lt;/code&gt;. Every time the dfs meets a node it hasn't encountered before it will update the array of visited nodes.&lt;/p&gt;

&lt;p&gt;If the dfs visits all available nodes as it traverses through the adjacenct list, then voila, that means the graph &lt;em&gt;must&lt;/em&gt; be connected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DFS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AdjacencyList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodeStatus&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;___&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;depthFirstSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DFS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Visited&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// get unvisited nodes&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;unvisitedNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;depthFirstSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unvisitedNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this implementation of dfs doesnt return a value, it simply updates the array of visited nodes. Then it checks to see if the current node has any adjacent nodes that haven't been visited, and recursively calls itself with those.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-our-euler-conditions" class="anchor"&gt;
  &lt;/a&gt;
  Defining our Euler Conditions
&lt;/h3&gt;

&lt;p&gt;Now that we've defined our data structures and our search function, it's finally time to put it together and create the function that will actually check to see if our Eulerian cycle exist. Each one is designed to accept the original list of dominoes and return whether our conditions were satisfied or not.&lt;/p&gt;

&lt;p&gt;First our &lt;code&gt;isConnected&lt;/code&gt; function which uses the code we defined above to determine if the domino array representing the &lt;code&gt;EdgeSet&lt;/code&gt; of a graph is a connected graph by checking if every node in the visited array .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isConnected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EulerCondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toAdjencyList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// time to spelunk&lt;/span&gt;
  &lt;span class="nx"&gt;depthFirstSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we make a function &lt;code&gt;allEvenDegree&lt;/code&gt; to see if our edges all have an even number of representations. We do this by folding the array of dominoes into a Map (object) of keys representing our nodes, and values representing the amount of times they appear in the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allEvenDegree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EulerCondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// adds to map of numbers in the domino set and how many times they appear&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NodeNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodeNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;nodeCounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// concat + flatten&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addToMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// fold into a map&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// back to array&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodeCounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#putting-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h3&gt;

&lt;p&gt;Finally, after all that, all that remains is to define our &lt;code&gt;canChain&lt;/code&gt; function that assembles all our logic into one conveniently exposed function. &lt;code&gt;canChain&lt;/code&gt; checks to see if a set or dominoes has all even degree &lt;strong&gt;and&lt;/strong&gt; (&amp;amp;&amp;amp;) is a connected graph.*&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canChain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EulerCondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allEvenDegree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isConnected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dominoes&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*If you remember, we said at the beginning that empty arrays should all evaluate to true, so we used an or (||) operation to stick that clause onto the rest of our &lt;code&gt;canChain&lt;/code&gt; operation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-resources" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion and Resources
&lt;/h2&gt;

&lt;p&gt;If you've made it this far, thank you for reading about my little exploration of graphs with Typescript. I just want to leave you with a few extra resources if this topic piqued your interests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tkshill/typescript_dominoes_exercism/blob/main/src/index.ts"&gt;Here&lt;/a&gt; is a link to full solution (with full notes)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=LFKZLXVO-Dg&amp;amp;t=704s"&gt;This video&lt;/a&gt; does a good job in my opinion of explaining all the basic Graph Theory terminology we touched on here.&lt;/li&gt;
&lt;li&gt;And &lt;a href="https://www.youtube.com/watch?v=52NDeYkVek0&amp;amp;t=608s"&gt;this video&lt;/a&gt; walks through using how to use an Adjacency list and depth-first search to find out if a graph is connected or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please leave a comment if you have an questions, queries, concerns, qualms, or critiques.&lt;/p&gt;

&lt;p&gt;Thank you for your time. :)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>exercism</category>
      <category>algorithms</category>
      <category>graphtheory</category>
    </item>
    <item>
      <title>PostgreSQL with Go in 2021</title>
      <author>Kushagra Mehta</author>
      <pubDate>Wed, 07 Apr 2021 13:05:40 +0000</pubDate>
      <link>https://dev.to/kushagra_mehta/postgresql-with-go-in-2021-3dfg</link>
      <guid>https://dev.to/kushagra_mehta/postgresql-with-go-in-2021-3dfg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;If you’re a modern web developer, it is inevitable to ignore a database for long as it plays an important part in the application.&lt;/p&gt;

&lt;p&gt;So in this post, I’ll be demonstrating how we can connect to a PostgreSQL database and perform basic SQL statements using Go.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You'll need &lt;a href="https://golang.org/dl/"&gt;Go version 1.16+&lt;/a&gt; and &lt;a href="https://www.postgresql.org/download/"&gt;PostgreSQL&lt;/a&gt; installed on your development machine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In order to connect with PostgreSQL we need driver, So we'll use &lt;a href="https://github.com/jackc/pgx"&gt;pgx&lt;/a&gt; as our driver.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#code-time" class="anchor"&gt;
  &lt;/a&gt;
  Code time 🚀
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#code-v01" class="anchor"&gt;
  &lt;/a&gt;
  Code &lt;em&gt;v0.1&lt;/em&gt; 🌎
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#aim" class="anchor"&gt;
  &lt;/a&gt;
  Aim
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Let's Start with a simple "Hello World.!" code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s create a new &lt;code&gt;main.go&lt;/code&gt; file. Within this, we’ll import a few packages and set up a simple connection to an already running local database. for this tutorial, I'm using &lt;code&gt;postgres&lt;/code&gt; as username, &lt;code&gt;123&lt;/code&gt; as password, &lt;code&gt;localhost&lt;/code&gt; network address, &lt;code&gt;:5432&lt;/code&gt; default port, and &lt;code&gt;test&lt;/code&gt; database.&lt;/p&gt;

&lt;p&gt;You can change according to your setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&amp;amp;...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open &lt;code&gt;main.go&lt;/code&gt; and write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/jackc/pgx/v4"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// Open up our database connection.&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pgx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"postgres://postgres:123@localhost:5432/test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// defer the close till after the main function has finished&lt;/span&gt;
    &lt;span class="c"&gt;// executing&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryRow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"select 'Hello, world!'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;pgx.Connec()&lt;/code&gt; establishes a connection with a PostgreSQL server with a connection string, this will return &lt;code&gt;pgx.Conn&lt;/code&gt; is a PostgreSQL connection handle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;conn.QueryRow()&lt;/code&gt; executes sql query on the database, After that we store the response of data using &lt;code&gt;.Scan()&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-v10" class="anchor"&gt;
  &lt;/a&gt;
  Code v1.0
&lt;/h2&gt;

&lt;p&gt;So, now that we’ve successfully created a connection and build hello world with the database. Now let's start with a table and perform some queries over it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aim" class="anchor"&gt;
  &lt;/a&gt;
  Aim
&lt;/h4&gt;

&lt;p&gt;Now we build a program where we can insert and fetch user data. We will understand various functions in the pgx package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-table-into-postgresql" class="anchor"&gt;
  &lt;/a&gt;
  Creating Table into PostgreSQL
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;USERS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;          &lt;span class="nb"&gt;SERIAL&lt;/span&gt;   &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;USERNAME&lt;/span&gt;    &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;UNIQUE&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Table name is &lt;code&gt;Users&lt;/code&gt; with &lt;em&gt;ID&lt;/em&gt; and &lt;em&gt;USERNAME&lt;/em&gt; columns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-user-struct" class="anchor"&gt;
  &lt;/a&gt;
  Creating user struct
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// User is the model present in the database&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt;       &lt;span class="kt"&gt;int&lt;/span&gt;    &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
    &lt;span class="n"&gt;UserName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inserting-user-into-database" class="anchor"&gt;
  &lt;/a&gt;
  Inserting User into database
&lt;/h3&gt;

&lt;p&gt;So if we want to store a user into the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//Creating temporary user object.&lt;/span&gt;
&lt;span class="n"&gt;tmpUser&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;UserName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Captain K"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;//Calling InsertUser Method&lt;/span&gt;
&lt;span class="n"&gt;InsertUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tmpUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;InsertUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pgx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Executing SQL query for insertion&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"INSERT INTO USERS(USERNAME) VALUES($1)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Handling error, if occur&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to insert due to: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insertion Succesfull"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#querying-multiple-rows" class="anchor"&gt;
  &lt;/a&gt;
  Querying Multiple Rows
&lt;/h3&gt;

&lt;p&gt;When we want to read all the users stored in the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetAllUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pgx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Execute the query&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"SELECT * FROM USERS"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to insert due to: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// carefully deferring Queries closing&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// Using tmp variable for reading&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

        &lt;span class="c"&gt;// Next prepares the next row for reading.&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// Scan reads the values from the current row into tmp&lt;/span&gt;
            &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%+v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// if any error occurred while reading rows.&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error will reading user table: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#querying-a-single-row" class="anchor"&gt;
  &lt;/a&gt;
  Querying a Single Row
&lt;/h3&gt;

&lt;p&gt;Find a user using user's ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetAnUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pgx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// variable to store username&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

    &lt;span class="c"&gt;// Executing query for single row&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryRow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"SELECT USERNAME WHERE ID=$1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error occur while finding user: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"User with id=%v is %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion 🎉
&lt;/h2&gt;

&lt;p&gt;In this post, we managed to set up a connection to a PostgreSQL and then perform some simple queries to that database and marshal the returned responses into a struct. This should hopefully give you everything you need in order to take things further and build your own Go applications on top of PostgreSQL.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/50666083/8791826"&gt;When to use db.Exec or db.Query ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We can use pgx and pgxpool interchangeably but &lt;a href="https://pkg.go.dev/github.com/jackc/pgx/v4@v4.11.0/pgxpool"&gt;pgxpool&lt;/a&gt; is a concurrency-safe connection pool for pgx. It is not safe for concurrent usage. Using a connection pool to manage access to multiple database connections from multiple goroutines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#recommended-reading-rest-server-with-go-in-5-minutes" class="anchor"&gt;
  &lt;/a&gt;
  Recommended Reading: &lt;a href="https://dev.to/kushagra_mehta/rest-server-with-go-in-5-minutes-3n8l"&gt;REST server with Go in 5 minutes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://medium.com/@amoghagarwal/insert-optimisations-in-golang-26884b183b35"&gt;post banner&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>go</category>
      <category>beginners</category>
      <category>database</category>
    </item>
    <item>
      <title>SES Email Tracking</title>
      <author>Vu Dao</author>
      <pubDate>Wed, 07 Apr 2021 13:04:02 +0000</pubDate>
      <link>https://dev.to/vumdao/ses-email-tracking-34</link>
      <guid>https://dev.to/vumdao/ses-email-tracking-34</guid>
      <description>&lt;p&gt;
  &lt;a href="https://dev.to/vumdao"&gt;
    &lt;img alt="SES Email Tracking" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPzfphMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/cover.png%3Fraw%3Dtrue" width="700"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Email tracking gives us the power to build and maintain relationships in this exceedingly crowded, competitive inbox environment And tracking bounced emails, this will be useful for us to track our bounce rate, and monitor our future campaigns in order to get the lowest bounce rate possible and have your emails correctly delivered.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Definition and causes of bounces: A bounce (or bounced email) refers to the situation where your email is rejected by your subscriber's email server.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Soft bounce: This is a temporary issue. The reasons are the following:

&lt;ul&gt;
&lt;li&gt;Your recipients' mailbox and/or your own inbox are full&lt;/li&gt;
&lt;li&gt;Your email message is too large and too heavy&lt;/li&gt;
&lt;li&gt;Your recipients' email server is down or offline&lt;/li&gt;
&lt;li&gt;A connection timeout occurred when Gmail tried to deliver your email&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Hard bounce: This is a permanent issue. The reasons are the following:

&lt;ul&gt;
&lt;li&gt;Your recipients' email address does not exist (anymore)&lt;/li&gt;
&lt;li&gt;The domains do not exist (anymore)&lt;/li&gt;
&lt;li&gt;Your recipients' email server has completely blocked email deliveries&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-this-document" class="anchor"&gt;
  &lt;/a&gt;
  What’s In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-Setup-Amazon-SES-to-send-detailed-notifications-about-your-bounces,-complaints,-and-deliveries"&gt;Setup Amazon SES to send detailed notifications about your bounces, complaints, and deliveries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-the-SNS-to-send-message-to-lambda-function"&gt;Create the SNS to send message to lambda function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-lambda-function-which-store-SES-notification-to-Dynamodb"&gt;Create lambda function which store SES notification to Dynamodb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Query-Bounce-Email-By-Using-AWS-CLI"&gt;Query Bounce Email By Using AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#setup-amazon-ses-to-send-detailed-notifications-about-your-bounces-complaints-and-deliveries" class="anchor"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Setup Amazon SES to send detailed notifications about your bounces, complaints, and deliveries&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45-E9iV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/enable_ses_sns.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45-E9iV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/enable_ses_sns.png%3Fraw%3Dtrue" alt="Alt-Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-sns-to-send-message-to-lambda-function" class="anchor"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create the SNS to send message to lambda function&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9GaClHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/sns_to_lambda.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9GaClHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/sns_to_lambda.png%3Fraw%3Dtrue" alt="Alt-Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-lambda-function-which-store-ses-notification-to-dynamodb" class="anchor"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create lambda function which store SES notification to Dynamodb&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict';
console.log('Loading function');

let doc = require('dynamodb-doc');
let dynamo = new doc.DynamoDB();
let tableName = 'ses-mailing';

exports.handler = (event, context, callback) =&amp;gt; {
    //console.log('Received event:', JSON.stringify(event, null, 2));
    const message = JSON.parse(event.Records[0].Sns.Message);

    var eventType = message.eventType;
    if (eventType == undefined) {
        eventType = message.notificationType;
    }
    switch(eventType) {
        case "Bounce":
            handleBounce(message);
            break;
        case "Complaint":
            handleComplaint(message);
            break;
        case "Send":
            handleDelivery(message);
            break;
        case "Delivery":
            handleDelivery(message);
            break;

        case "Open":
            handleOpen(message);
            break;

        default:
            callback("Unknown notification type: " + message.notificationType);
    }
};

function handleBounce(message) {
    const messageId = message.mail.messageId;
    const addresses = message.bounce.bouncedRecipients.map(function(recipient){
        return recipient.emailAddress;
    });
    const bounceType = message.bounce.bounceType;

    console.log("Message " + messageId + " bounced when sending to " + addresses.join(", ") + ". Bounce type: " + bounceType);

    for (var i=0; i&amp;lt;addresses.length; i++){
        writeDDB(addresses[i], message, tableName, "disable");
    }
}

function handleComplaint(message) {
    const messageId = message.mail.messageId;
    const addresses = message.complaint.complainedRecipients.map(function(recipient){
        return recipient.emailAddress;
    });

    console.log("A complaint was reported by " + addresses.join(", ") + " for message " + messageId + ".");

    for (var i=0; i&amp;lt;addresses.length; i++){
        writeDDB(addresses[i], message, tableName, "disable");
    }
}

function handleDelivery(message) {
    const messageId = message.mail.messageId;
    const deliveryTimestamp = message.mail.timestamp;
    const addresses = message.mail.destination;
    console.log("Message " + messageId + " was delivered successfully at " + deliveryTimestamp + ".");

    for (var i=0; i&amp;lt;addresses.length; i++){
        writeDDB(addresses[i], message, tableName, "enable");
    }
}
function handleOpen(message) {
    const messageId = message.mail.messageId;
    const deliveryTimestamp = message.open.timestamp;
    const addresses = message.mail.destination;
    console.log("Message " + messageId + " was opened at " + deliveryTimestamp + ".");

    for (var i=0; i&amp;lt;addresses.length; i++){
        writeDDB(addresses[i], message, tableName, "enable");
    }
}

function writeDDB(id, payload, tableName, status) {
    const tags = payload.mail.tags;
    var configuration_set = null;
    var source_ip = null;
    var from_domain = null;
    var tenant = null;

    if (tags != undefined ) {
        console.log('Received tags:', JSON.stringify(tags, null, 2));
        if ('ses:configuration-set' in tags) {
            configuration_set = tags['ses:configuration-set'].join(',');
        }
        if ('ses:source-ip' in tags) {
            source_ip = tags['ses:source-ip'].join(',');
        }
        if ('ses:from-domain' in tags) {
            from_domain = tags['ses:from-domain'].join(',');
        }
        if ('tenant' in tags) {
            tenant = tags['tenant'].join(',');
        }

    }

    var eventType = payload.eventType;
    if (eventType == undefined) {
        eventType = payload.notificationType;
    }

    const item = {
            UserId: id,
            eventType: eventType,
            from: payload.mail.source,
            messageId: payload.mail.messageId,
            timestamp: payload.mail.timestamp,
            state: status,
            configuration_set: configuration_set,
            source_ip: source_ip,
            from_domain: from_domain,
            tenant: tenant
        };
    const params = {
            TableName:tableName,
            Item: item
        };
    dynamo.putItem(params,function(err,data){
            if (err) console.log(err);
            else console.log(data);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DDB Result - Partition key| Sort key | Global secondary indexes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p5wU5Smo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/example_ddb.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p5wU5Smo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/example_ddb.png%3Fraw%3Dtrue" alt="Alt-text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkV2bDuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/ddb_index.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkV2bDuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ses-mail-tracking/blob/master/ddb_index.png%3Fraw%3Dtrue" alt="Alt-text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#query-bounce-email-by-using-aws-cli" class="anchor"&gt;
  &lt;/a&gt;
  Query Bounce Email By Using AWS CLI
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Use dynamodb query&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws --region=us-east-1 dynamodb query --select ALL_ATTRIBUTES --table-name ses-mailing --index-name eventType-timestamp-index --key-condition-expression "eventType = :e and #timestamp &amp;gt;= :t" --expression-attribute-names '{ "#timestamp": "timestamp"}' --expression-attribute-values  '{":e":{"S":"Bounce"}, ":t": {"S": "2021-04-04"}}' &amp;gt; mail-bounce.json
cat mail-bounce.json | jq  -r '.Items[] | [.from.S, .UserId.S, .timestamp.S] | @csv ' &amp;gt; mail-bounce.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Use dynamodb execute-statement&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws dynamodb execute-statement --statement "SELECT * FROM \"ses-mailing\".\"eventType-timestamp-index\" WHERE \"eventType\" = 'Bounce' AND \"timestamp\" &amp;gt;= '2021-04-05'" --region us-east-1 &amp;gt; ses.json
cat ses.json | jq -r '.Items[] | [([.UserId.S, .from.S, .timestamp.S] | join(","))] | @csv' | sort -r &amp;gt; bounce.list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#refs" class="anchor"&gt;
  &lt;/a&gt;
  Refs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sending email using the Amazon SES SMTP Interface with adding &lt;code&gt;CONFIGURATION_SET&lt;/code&gt;
&lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/examples-send-using-smtp.html"&gt;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/examples-send-using-smtp.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://vumdao.hashnode.dev/"&gt;Web&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>cloudopz</category>
      <category>ses</category>
    </item>
  </channel>
</rss>
