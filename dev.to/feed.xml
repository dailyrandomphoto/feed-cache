<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is an NFT token? It's all about the irreplaceable token</title>
      <author>cristopher salazar</author>
      <pubDate>Mon, 06 Dec 2021 08:30:17 +0000</pubDate>
      <link>https://dev.to/cristolazar/what-is-an-nft-token-its-all-about-the-irreplaceable-token-p5a</link>
      <guid>https://dev.to/cristolazar/what-is-an-nft-token-its-all-about-the-irreplaceable-token-p5a</guid>
      <description>&lt;p&gt;NFT token, which, like other cryptocurrencies, is active on the blockchain platform; These days it is one of the most popular and discussed concepts in the world of cryptocurrency. NFTs are a non-interchangeable and proprietary type of cryptocurrencies that can be used in a variety of contexts to make them unique.&lt;/p&gt;

&lt;p&gt;In this article, we intend to review the features and applications of these tokens. But before we begin, we need to mention the concept of interchangeability (if you are unfamiliar with the concept of tokens, it is best to read the article on the difference between coins and tokens first).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-interchangeability-mean"&gt;
  &lt;/a&gt;
  What does interchangeability mean?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCqcuD6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftcmtqu8tzx34u8h1d1q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCqcuD6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftcmtqu8tzx34u8h1d1q.jpg" alt="Alt Text" width="500" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fungibility means that one currency or asset can be exchanged for another currency of the same value. This asset also has the ability to be divided into smaller parts.&lt;/p&gt;

&lt;p&gt;To better understand this concept, imagine you have a 50,000 Toman banknote that you can exchange with a banknote of the same value. Or you can exchange it with banknotes with other amounts, the total of which is 50 thousand tomans.&lt;/p&gt;

&lt;p&gt;Therefore, your 50,000 Toman banknote, in addition to being replaceable with other banknotes of the same value; It can be divided into other amounts. So this banknote is a exchangeable currency.&lt;/p&gt;

&lt;p&gt;This example also applies to digital currencies such as Bitcoin, Ripple, Atrium, Bitcoin Cash and other cryptocurrencies. One bitcoin can be exchanged for another bitcoin and it can be divided into smaller parts (satoshi).&lt;/p&gt;

&lt;p&gt;In a nutshell, currencies that have one unit of equal value against another unit of the same currency are exchangeable or Fungible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-nft-token"&gt;
  &lt;/a&gt;
  What is an NFT token?
&lt;/h2&gt;

&lt;p&gt;Non-Fungible Token, or NFT‌ for short; An encrypted digital currency that issues a title deed to a digital work in the blockchain space.&lt;/p&gt;

&lt;p&gt;These tokens were originally developed based on the ERC721 standard, which is similar to the ERC20 standard, and were known as a specific atrium token. But now they are being developed on other blockchains as well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vwy06jEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkt7yes98j1voycaqpgo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vwy06jEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkt7yes98j1voycaqpgo.jpg" alt="Alt Text" width="500" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-features-of-nft-token"&gt;
  &lt;/a&gt;
  Main features of NFT token
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-irreplaceability"&gt;
  &lt;/a&gt;
  1. Irreplaceability
&lt;/h3&gt;

&lt;p&gt;This is the main feature of NFT tokens. These tokens cannot be exchanged for an asset like their own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-rarity"&gt;
  &lt;/a&gt;
  2. Rarity
&lt;/h3&gt;

&lt;p&gt;The developers of these tokens have the ability to produce them in large numbers, but their preference is to produce NFTs in limited numbers and to keep these tokens unique.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-indivisibility"&gt;
  &lt;/a&gt;
  3. Indivisibility
&lt;/h3&gt;

&lt;p&gt;NFT tokens cannot be broken down into smaller sections. NFT always remains a single token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-being-unique"&gt;
  &lt;/a&gt;
  4. Being unique
&lt;/h3&gt;

&lt;p&gt;These tokens have registered and immutable information and this information is the certificate of NFT authenticity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-nft-tokens"&gt;
  &lt;/a&gt;
  Advantages of NFT tokens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-are-transferable"&gt;
  &lt;/a&gt;
  1. are transferable
&lt;/h3&gt;

&lt;p&gt;These tokens can be bought and sold in certain markets and not in digital currency exchanges. The price of NFT is calculated based on its uniqueness.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-they-are-valid"&gt;
  &lt;/a&gt;
  2. They are valid
&lt;/h3&gt;

&lt;p&gt;As you know, there is no possibility of forgery in the blockchain space. Irreplaceable tokens are also active in this context; Therefore, their authenticity can be assured.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-right-of-ownership-is-reserved-in-them"&gt;
  &lt;/a&gt;
  3. The right of ownership is reserved in them
&lt;/h3&gt;

&lt;p&gt;The information cannot be changed or deleted after being registered in the blockchain blocks. Therefore, since NFT token data is stored on blockchains, it is not possible to change their original data under any circumstances, and the original rights of the original owner of the work are always protected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-differences-between-nft-tokens-and-fungible-tokens"&gt;
  &lt;/a&gt;
  What are the differences between NFT tokens and Fungible tokens?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUCFsWZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je26zsc5svfmbt3lall.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUCFsWZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je26zsc5svfmbt3lall.jpg" alt="Alt Text" width="500" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Non-Fungible tokens are fundamentally different from Fungible tokens. The main difference between these two types of digital currency tokens is in the same interchangeability that in NFT tokens it is not possible to exchange tokens with the same type (same value).&lt;/p&gt;

&lt;p&gt;These tokens also contain specific information that is recorded exclusively on them. The exclusivity of this information can be compared to the information on the plane ticket. Passenger information, exact travel time, travel destination and row and seat number are entered on the plane ticket and no one else can travel with that ticket. The data recorded on the NFT token is also exclusive to that particular token.&lt;/p&gt;

&lt;p&gt;Another difference between NFT and interchangeable tokens is the divisibility. NFT‌ tokens cannot be broken down into smaller pieces and always remain a single token.&lt;/p&gt;

&lt;p&gt;Finally, non-replaceable tokens contain more information than replaceable tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-uses-of-nft"&gt;
  &lt;/a&gt;
  What are the uses of NFT?
&lt;/h2&gt;

&lt;p&gt;NFT tokens can be used in a variety of contexts, and these tokens are not limited to a specific domain or the world of cryptocurrencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-registration-of-digital-artwork"&gt;
  &lt;/a&gt;
  1. Registration of digital artwork
&lt;/h3&gt;

&lt;p&gt;Artists working in the field of digital arts; They can use these tokens to register their works and no longer have to worry about copyright and theft of their works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-gaming-industry"&gt;
  &lt;/a&gt;
  2. The gaming industry
&lt;/h3&gt;

&lt;p&gt;Professional gamers can transfer their assets in the gaming world to various games through NFT tokens and use them in spaces where in-app purchases are limited.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-digital-assets"&gt;
  &lt;/a&gt;
  3. Digital assets
&lt;/h3&gt;

&lt;p&gt;Ownership of any digital asset, such as an Internet domain or a social media account, can be permanently registered in the name of a person or group through a non-exchangeable token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-physical-assets"&gt;
  &lt;/a&gt;
  4. Physical assets
&lt;/h3&gt;

&lt;p&gt;These tokens can even be used when trading non-digital assets, such as buying a house or car, and registering ownership of a property or car on a blockchain platform.&lt;/p&gt;

&lt;p&gt;The NFT token can also be used in the field of personal identification or registration of academic and personal documents. NFT has also received a great deal of attention from collectors in the field of collecting works. But these are just some of the uses of NFT, and certainly in the future these digital currency tokens will enter more domains and become more popular around the world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0q016eng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4bsdxer56f44olj2flh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0q016eng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4bsdxer56f44olj2flh.jpg" alt="Alt Text" width="500" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-successful-nft-token-projects-so-far"&gt;
  &lt;/a&gt;
  Some successful NFT token projects so far
&lt;/h2&gt;

&lt;p&gt;CryptoKitties: A platform for producing, buying and selling cats in the popular virtual cat Atrium blockchain game&lt;br&gt;
OpenSea: Active system for registering works of art and collectibles via NFT token&lt;br&gt;
Ethereum Name Service: The system for providing domain name services and registering them through NFTs&lt;br&gt;
Async.Art: A platform for registering and buying works of art by NFT&lt;br&gt;
Decentraland: A platform for virtual land distribution&lt;/p&gt;

&lt;p&gt;Origin Protocol, FLOW and Rarible projects, Azure Heroes and AlterVerse games, and programs such as NBA Top Shot and Dr. Seuss to present and record collectible digital assets are some of the other projects that have successfully used irreplaceable tokens to date. But due to the growing trend of people towards the blockchain world in various fields, as well as the growing popularity of NFT among different classes and fields, we will undoubtedly see a multiplication of Non-Fungible Token-based projects in the not-too-distant future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding remarks
&lt;/h2&gt;

&lt;p&gt;Considering the points we have made so far regarding the NFT token; The question arises as to why these tokens have not yet been properly raised and used in the world.&lt;/p&gt;

&lt;p&gt;The first reason is the substrate of irreplaceable tokens. Blockchains are a fascinating world for those with enough knowledge; But those who are not familiar with this technology and decentralized networks have not shown much interest in joining the users of these networks. NFT technology alone may be very enticing, but its platform has not yet been able to impress all individuals and groups.&lt;/p&gt;

&lt;p&gt;The next point is the decision of the developers to keep these tokens scarce. Because NFT tokens are growing and developing very slowly; Using them is costly and organizations and individuals are trying to use lower cost technologies and get less access to these digital ownership documents.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>Discover the Exclusive Secret to Developing a Successful Food Delivery App Now</title>
      <author>Sara Suarez</author>
      <pubDate>Mon, 06 Dec 2021 08:28:47 +0000</pubDate>
      <link>https://dev.to/suarezsara/discover-the-exclusive-secret-to-developing-a-successful-food-delivery-app-now-3d41</link>
      <guid>https://dev.to/suarezsara/discover-the-exclusive-secret-to-developing-a-successful-food-delivery-app-now-3d41</guid>
      <description>&lt;p&gt;In 2021, the revenue generated through online food delivery is projected to reach a whopping &lt;a href="https://www.statista.com/outlook/dmo/eservices/online-food-delivery/worldwide"&gt;USD 270,317 million&lt;/a&gt;. What’s more, the number of users in the online food delivery market is expected to surpass 2,638.1 million by 2025. Judging by these figures, it is safe to say that food delivery mobile apps are gaining massive popularity across the globe. A number of entrepreneurs are stepping into the hot market to leverage the opportunity. If you are wondering how to make a food delivery app, then read on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here are some secrets to ensure a successful food on-demand food delivery app development:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conduct Market Research&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Going for on-demand food delivery app development without doing proper market research is akin to taking a shot in the dark. There’s a lot of risks and dangers involved, and a successful app deployment can only be ensured if the marketing is backed by appropriate market research. Market research helps in analyzing what the customers are looking for. Once the customer expectations are known, the developer will be able to create the right solution. Moreover, nobody should develop an app without first understanding the competition. The better you know who you are competing with, the better will be your chances of developing a successful app. Explore the different strategies followed by your rivals and determine how they stand out. For instance, &lt;a href="https://eng.uber.com/uber-eats-graph-learning/"&gt;Uber Eats&lt;/a&gt; makes use of machine learning to make accurate predictions concerning how long it takes to cook, arrive, and deliver. These accurate estimates ensure happy and satisfied customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define the Scope of Features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The food delivery mobile app development strategy must involve the establishment of key features. Factors like the market, users, and the app itself must be considered in consolidation to offer customers a unique value, amazing usability, and seamless performance. Accessibility should also play a major role during app development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The essential features to bear in mind during on-demand food delivery app development are:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Value-driven push notifications to notify users about discounts, deals, and loyalty programs.&lt;/li&gt;
&lt;li&gt;Allowing users to view the location and contact information of the delivery agent.&lt;/li&gt;
&lt;li&gt;Real-time tracking of food orders using GPS with estimated waiting and delivery time.&lt;/li&gt;
&lt;li&gt;Simple and accessible payment getaways and mobile wallet software services.&lt;/li&gt;
&lt;li&gt;Social media integration with loyalty or discount programs and redeemable coupons.&lt;/li&gt;
&lt;li&gt;Contactless payment system through QR codes.&lt;/li&gt;
&lt;li&gt;Displaying restaurant ratings and reviews to help customers make better decisions.&lt;/li&gt;
&lt;li&gt;Ability to add items to the cart and schedule orders for a specific time.&lt;/li&gt;
&lt;li&gt;Order history page with previous orders, current orders, and delivery status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Find the Right Food Delivery Mobile App Development Partner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To develop a successful app, you need to find the right partner. It can be time-consuming to understand the tech stack, outline the development challenges, and other aspects. Businesspersons and entrepreneurs without proper backgrounds and domain knowledge can find it to be challenging. They can hire someone who can manage the app development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here are some of the available choices to consider:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Freelance developers:&lt;/strong&gt; If you have a tight budget or some level of expertise, then you can find freelancers for &lt;a href="https://www.damcogroup.com/food-delivery-app-development"&gt;on-demand food delivery app development&lt;/a&gt;. Make sure to verify the credentials and portfolio of the freelancers and ensure they have exposure to the food delivery industry.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;In-house team:&lt;/strong&gt; If you have a considerable budget, time, and space to accommodate a team, then in-house development would be an ideal choice for you. While it involves a significant investment such as hiring costs, operational costs, infrastructure, etc, it offers you more control over the delivery terms and deadlines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;App development companies:&lt;/strong&gt; You can outsource the food delivery mobile app development project to an experienced agency. Such agencies offer a team of experienced developers. You can find an app development agency that has proven experience in developing food delivery apps and expertise in leveraging modern technologies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Perform Thorough Quality Assurance Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the features and functions of the food delivery mobile app should be tested multiple times throughout the development process. You can hire a dedicated quality assistance expert for conceding extensive tests to make sure all the features within the application work how they are supposed to.&lt;/p&gt;

&lt;p&gt;If any bug is caught within the testing process, the app developers will get sufficient time to fix it before the application gets launched.&lt;/p&gt;

&lt;p&gt;Moreover, for checking compatibility, the app should be tested on multiple devices across different operating systems. Make sure to verify the quality and usability of the app on different devices such as smartphones and tablets. All the functions and features of the app should work uniformly across devices and operating systems.&lt;/p&gt;

&lt;p&gt;The competition in the food delivery app segment is cutthroat. However, do not let the competition discourage you from venturing into the profitable industry. Take your chances and leverage the tips mentioned above to get the food delivery mobile app development right the first time itself.&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>webdev</category>
      <category>android</category>
    </item>
    <item>
      <title>How I personalized my Hashnode blog and you can too! 🌟</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Mon, 06 Dec 2021 08:09:38 +0000</pubDate>
      <link>https://dev.to/avneesh0612/how-i-personalized-my-hashnode-blog-and-you-can-too-4l31</link>
      <guid>https://dev.to/avneesh0612/how-i-personalized-my-hashnode-blog-and-you-can-too-4l31</guid>
      <description>&lt;p&gt;Many people have asked me that how does my blog feels so similar to my portfolio and matches the theme even though it is built using Hashnode and I have done very little work for the blog.&lt;/p&gt;

&lt;p&gt;The answer is with custom CSS!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-hd0Ak5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/GxjCdYluvgQAAAAC/css-css-magic.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-hd0Ak5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/GxjCdYluvgQAAAAC/css-css-magic.gif" alt="CSS Magic" width="498" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-hashnode"&gt;
  &lt;/a&gt;
  What is Hashnode?
&lt;/h1&gt;

&lt;p&gt;For the readers who don't know about hashnode here is a little brief on what is Hashnode.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hashnode is a free developer blogging platform that allows you to publish articles on your domain and helps you stay connected with a global developer community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to know more about hashnode, check out there &lt;a href="https://hashnode.com/@avneesh0612/joinme"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#become-a-hashnode-ambassador"&gt;
  &lt;/a&gt;
  Become a Hashnode Ambassador
&lt;/h2&gt;

&lt;p&gt;We are going to add custom CSS to our blog, so you need to become an ambassador to be able to do that. You can become an ambassador &lt;a href="https://hashnode.com/ambassador"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we are ready, let's see how I customized my blog and how you can too! 🥳&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-blog-home-page"&gt;
  &lt;/a&gt;
  The blog home page
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#styling-the-header"&gt;
  &lt;/a&gt;
  Styling the header
&lt;/h2&gt;

&lt;p&gt;Go to your blog dashboard and click on Appearance&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02PamVv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638712676881/5vv0Wylg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02PamVv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638712676881/5vv0Wylg1.png" alt="image.png" width="529" height="694"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#changing-the-logo"&gt;
  &lt;/a&gt;
  Changing the logo
&lt;/h3&gt;

&lt;p&gt;In the appearance tab, you can select logos for dark mode and light mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq6lJuc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638712897880/A7bpgUYsa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq6lJuc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638712897880/A7bpgUYsa.png" alt="image.png" width="880" height="689"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I built these with Figma you can use any tool you like 😄&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#changing-the-color-of-the-header"&gt;
  &lt;/a&gt;
  Changing the color of the header
&lt;/h3&gt;

&lt;p&gt;Now let's get to the CSS part.&lt;/p&gt;

&lt;p&gt;There is an option to change the color of the header in the appearance tab itself but I will change it with CSS because I want different colors for light and dark mode. So scroll down and you will see an add custom CSS button. Toggle it on and click on update.&lt;/p&gt;

&lt;p&gt;Now click on &lt;strong&gt;Add Custom CSS&lt;/strong&gt;, you will be redirected to a page where you can write some code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snXZeAbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/y2JXkY1pXkwAAAAM/cat-computer.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snXZeAbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/y2JXkY1pXkwAAAAM/cat-computer.gif" alt="" width="220" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blog-header {
  background: #52dee5 !important;
}

.dark .blog-header {
  background: #0a192f !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click on Save styles, then Preview.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5N7uIqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638717306760/eLQacewh_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5N7uIqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638717306760/eLQacewh_.png" alt="image.png" width="383" height="86"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On seeing the preview, the header's color will be changed&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibWtZz9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638717377032/eP0J8hngV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibWtZz9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638717377032/eP0J8hngV.png" alt="image.png" width="880" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to you use your brand color's here instead of mine :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customizing-the-layout"&gt;
  &lt;/a&gt;
  Customizing the layout
&lt;/h2&gt;

&lt;p&gt;In the appearance tab, you have 3 layouts to choose from. I use the magazine layout. I would recommend you to use the magazine layout if you have quite a few articles &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zX7MKvXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638721032858/yKd0oPZp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zX7MKvXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638721032858/yKd0oPZp1.png" alt="image.png" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-the-theme"&gt;
  &lt;/a&gt;
  Changing the theme
&lt;/h2&gt;

&lt;p&gt;Inside custom CSS I am going to add colors, to different classes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background for the articles section-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-2j2uz3,
.blog-body,
.blog-featured-area {
  background: #93f8eb !important;
}

.dark .css-2j2uz3,
.dark .blog-body,
.dark .blog-featured-area {
  background: #222e50 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the preview, it will add colors for light and dark mode-&lt;/p&gt;

&lt;p&gt;Aqua for light mode-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qf_JnkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638757925255/Pf4uDpGvN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qf_JnkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638757925255/Pf4uDpGvN.png" alt="image.png" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blue Gray for dark mode-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Lr09t0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638758114995/98q-ZKVof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Lr09t0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638758114995/98q-ZKVof.png" alt="image.png" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;P.S Some CSS classes may differ due to layouts, so if you see that some stylings are not applied then get the class of that section and add it in there.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-author-and-footer-section"&gt;
  &lt;/a&gt;
  The author and footer section
&lt;/h3&gt;

&lt;p&gt;I am going to keep the same colors for the header, footer, and author container. So you can use the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blog-author-container,
.blog-header {
  background: #52dee5;
}

.dark .blog-author-container,
.dark .blog-header {
  background: #0a192f;
}

.blog-footer-area {
  border-color: #0a192f !important;
  background: #52dee5 !important;
}

.dark .blog-footer-area {
  border-color: #52dee5 !important;
  background: #0a192f !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To remove code duplication you can remove the styles for the &lt;code&gt;blog header&lt;/code&gt; that we added because I have added it together with the author container.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#load-more-button"&gt;
  &lt;/a&gt;
  Load more button
&lt;/h3&gt;

&lt;p&gt;I have also customized the load more button, so it looks like this-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SlxbEoTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638759144621/0KtTyGXKz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SlxbEoTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638759144621/0KtTyGXKz.png" alt="image.png" width="178" height="81"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get the same button to add the following styles-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-1swncjx {
  color: #222e50 !important;
  border-color: #222e50 !important;
}

.css-1swncjx:hover {
  background-color: #222e50 !important;
  color: #52dee5 !important;
}

.dark .css-1swncjx {
  color: #52dee5 !important;
  border-color: #52dee5 !important;
}

.dark .css-1swncjx:hover {
  background-color: #52dee5 !important;
  color: #222e50 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-scrollbar"&gt;
  &lt;/a&gt;
  The scrollbar
&lt;/h3&gt;

&lt;p&gt;Finally, on the homepage, I will change the scrollbar as the normal one looks boring-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  border-radius: 10px;
  background-color: #222e50;
}

::-webkit-scrollbar-thumb {
  border-radius: 10px;
  background: #52dee5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-code-for-home-page"&gt;
  &lt;/a&gt;
  Final code for home page
&lt;/h2&gt;

&lt;p&gt;My complete CSS looks like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-2j2uz3,
.blog-body,
.blog-featured-area {
  background: #93f8eb !important;
}

.dark .css-2j2uz3,
.dark .blog-body,
.dark .blog-featured-area {
  background: #222e50 !important;
}

.blog-author-container,
.blog-header {
  background: #52dee5;
}

.dark .blog-author-container,
.dark .blog-header {
  background: #0a192f;
}

.blog-footer-area {
  border-color: #0a192f !important;
  background: #52dee5 !important;
}

.dark .blog-footer-area {
  border-color: #52dee5 !important;
  background: #0a192f !important;
}

.css-1swncjx {
  color: #222e50 !important;
  border-color: #222e50 !important;
}

.css-1swncjx:hover {
  background-color: #222e50 !important;
  color: #52dee5 !important;
}

.dark .css-1swncjx {
  color: #52dee5 !important;
  border-color: #52dee5 !important;
}

.dark .css-1swncjx:hover {
  background-color: #52dee5 !important;
  color: #222e50 !important;
}

::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  border-radius: 10px;
  background-color: #222e50;
}

::-webkit-scrollbar-thumb {
  border-radius: 10px;
  background: #52dee5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-article-page"&gt;
  &lt;/a&gt;
  The article page
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#header"&gt;
  &lt;/a&gt;
  Header
&lt;/h2&gt;

&lt;p&gt;Since we are changing the header color via CSS and not in the appearance tab we need to add the same code in articles page also-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blog-header {
  background: #52dee5 !important;
}

.dark .blog-header {
  background: #0a192f !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#background-of-the-main-content"&gt;
  &lt;/a&gt;
  Background of the main content-
&lt;/h2&gt;

&lt;p&gt;To change the background of the main content i.e the text, image, reactions button, etc. we need to target the &lt;code&gt;blog-content-wrapper&lt;/code&gt; class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blog-content-wrapper {
  background: #52dee5;
}

.dark .blog-content-wrapper {
  background: #0a192f;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#divider-near-author-and-article-details"&gt;
  &lt;/a&gt;
  Divider near author and article details
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmf05PFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638765565195/Eiyoevk-G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmf05PFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638765565195/Eiyoevk-G.png" alt="image.png" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The contrast in this border is not very good, so I will change it to a brighter color-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-1pt9cni {
  border-color: #222e50 !important;
}

.dark .css-1pt9cni {
  border-color: #93f8eb !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#newsletter-and-audio"&gt;
  &lt;/a&gt;
  Newsletter and audio
&lt;/h2&gt;

&lt;p&gt;I use a gradient for the background of the two boxes and have some bright colors inside 🎉&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-1s4b5hj,
.blog-subscription-article-wrapper {
  background: linear-gradient(
    90deg,
    hsla(235, 100%, 78%, 1) 0%,
    hsla(222, 77%, 33%, 1) 100%
  );
}

.blog-subscription-form-message {
  /* email subscription form message */
  color: white !important;
}

.css-14lmbqe,
.blog-subscription-form-button {
  color: #2b2e35 !important;
}

.dark .css-14lmbqe,
.dark .blog-subscription-form-button {
  color: #93f8eb !important;
}

audio::-webkit-media-controls-play-button,
audio::-webkit-media-controls-panel {
  background-color: #93f8eb;
  color: white !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reaction-button"&gt;
  &lt;/a&gt;
  Reaction button
&lt;/h2&gt;

&lt;p&gt;Let's style our reaction buttons to make them pop a little bit-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-4wwro6 {
  border-color: #222e50 !important;
  color: #2b2e35 !important;
}

.dark .css-4wwro6 {
  border-color: #93f8eb !important;
  color: #93f8eb !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the buttons look better. Make sure to smash them 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWQtnO2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638766477040/dnf4ZmUvS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWQtnO2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638766477040/dnf4ZmUvS.png" alt="image.png" width="255" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sponsor-button"&gt;
  &lt;/a&gt;
  Sponsor button
&lt;/h2&gt;

&lt;p&gt;If you have hashnode sponsors enabled then you can add the stylings for it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-2enc5m {
  background-color: #222e50 !important;
  border-color: #222e50 !important;
  color: #52dee5 !important;
}

.dark .css-2enc5m {
  background-color: #52dee5 !important;
  border-color: #52dee5 !important;
  color: #0a192f !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us a nice and simple button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfaC0DIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638775502430/sJioEg9av.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfaC0DIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638775502430/sJioEg9av.png" alt="image.png" width="220" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;Now our comments look very plain so let us add some colors to it with the following code-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-3159x8 {
  background: #93f8eb !important;
}

.dark .css-3159x8 {
  background: #222e50 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;To create the links pop up and be more evident I am going to change their colors a bit-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.css-1azsmog a {
  color: #222e50 !important;
}

.dark .css-1azsmog a {
  color: #52dee5 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#replace-white-borders-in-light-mode"&gt;
  &lt;/a&gt;
  Replace white borders in light mode
&lt;/h2&gt;

&lt;p&gt;There were quite a few places in &lt;strong&gt;light mode&lt;/strong&gt; where the white border wasn't looking good so I changed their border color-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blog-similar-article-wrapper,
.css-6rnkih,
.css-h6a8j6,
.css-1s4b5hj,
.blog-subscription-article-wrapper {
  border-color: #222e50 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scrollbar"&gt;
  &lt;/a&gt;
  Scrollbar
&lt;/h2&gt;

&lt;p&gt;Like the home page add some styles for the scrollbar-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  border-radius: 10px;
  background-color: #0a192f;
}

::-webkit-scrollbar-thumb {
  border-radius: 10px;
  background: #52dee5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#footer"&gt;
  &lt;/a&gt;
  Footer
&lt;/h2&gt;

&lt;p&gt;Finally, I am gonna style the footer with some border and background-color-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blog-footer-area {
  border-color: #222e50 !important;
  background: #93f8eb !important;
}

.dark .blog-footer-area {
  border-color: #93f8eb !important;
  background: #222e50 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the CSS for articles page-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blog-header {
  /* header */
  background: #93f8eb !important;
}

.dark .blog-header {
  /* header dark */
  background: #222e50 !important;
}

.blog-content-wrapper {
  /* main content */
  background: #52dee5;
}

.dark .blog-content-wrapper {
  /* main content dark */
  background: #0a192f;
}

.css-1pt9cni {
   /*divider */
  border-color: #222e50 !important;
}

.dark .css-1pt9cni {
   /*divider dark */
  border-color: #93f8eb !important;
}

.css-1s4b5hj,
.blog-subscription-article-wrapper {
  /* email subscription and audio player background */
  background: linear-gradient(
    90deg,
    hsla(235, 100%, 78%, 1) 0%,
    hsla(222, 77%, 33%, 1) 100%
  );
}

.blog-subscription-form-message {
  /* email subscription form message */
  color: white !important;
}

.css-14lmbqe,
.blog-subscription-form-button {
  /* Newsletter form subscribe button */
  color: #2b2e35 !important;
}

.dark .css-14lmbqe,
.dark .blog-subscription-form-button {
  /* Newsletter form subscribe button dark */
  color: #93f8eb !important;
}

audio::-webkit-media-controls-play-button,
audio::-webkit-media-controls-panel {
  /* audio player */
  background-color: #93f8eb;
  color: white !important;
}

.css-4wwro6 {
  /* Reaction button */
  border-color: #222e50 !important;
  color: #2b2e35 !important;
}

.dark .css-4wwro6 {
  /* Reaction button dark */
  border-color: #93f8eb !important;
  color: #93f8eb !important;
}

.css-2enc5m {
  /* Sponsor button */
  background-color: #222e50 !important;
  border-color: #222e50 !important;
  color: #52dee5 !important;
}

.dark .css-2enc5m {
  /* Sponsor button dark */
  background-color: #52dee5 !important;
  border-color: #52dee5 !important;
  color: #0a192f !important;
}

.css-3159x8 {
  /* Comments */
  background: #93f8eb !important;
}

.dark .css-3159x8 {
  /* Comments dark */
  background: #222e50 !important;
}

.blog-footer-area {
  /* footer */
  border-color: #222e50 !important;
  background: #93f8eb !important;
}

.dark .blog-footer-area {
  /* footer dark */
  border-color: #93f8eb !important;
  background: #222e50 !important;
}

.css-1azsmog a {
  color: #222e50 !important;
}

.dark .css-1azsmog a {
  color: #52dee5 !important;
}

/* scrollbar */
::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  border-radius: 10px;
  background-color: #0a192f;
}

::-webkit-scrollbar-thumb {
  border-radius: 10px;
  background: #52dee5;
}

/* White borders */
.blog-similar-article-wrapper,
.css-6rnkih,
.css-h6a8j6,
.css-1s4b5hj,
.blog-subscription-article-wrapper {
  border-color: #222e50 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have also added a few comments for you all, so you can understand which class does what 🎉.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I would recommend you to change the colors a bit, try to tweak a few things, and make your blog unique to yourself so people can know that this is your website as soon as they see it. Also, make sure to hit the publish button when you are done. If you have customized your blog I would love to see them 👇.&lt;/p&gt;

&lt;p&gt;See you next time ✌️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://blog.avneesh.tech"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://links.avneesh.tech"&gt;Connect with me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hashnode.com"&gt;Hashnode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>styling</category>
      <category>css</category>
      <category>hashnode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Role of APIs in Blockchain and AI</title>
      <author>Rajat Thakur</author>
      <pubDate>Mon, 06 Dec 2021 07:52:05 +0000</pubDate>
      <link>https://dev.to/digitallyrajat/role-of-apis-in-blockchain-and-ai-2g6f</link>
      <guid>https://dev.to/digitallyrajat/role-of-apis-in-blockchain-and-ai-2g6f</guid>
      <description>&lt;p&gt;APIs are very important for websites and applications today and have also become indispensable for blockchain applications. But few people understand what they are and why they are essential for both users and businesses.&lt;/p&gt;

&lt;p&gt;There is nothing conceptually complicated about an API, including a blockchain API. The term stands for Application Programming Interface and represents a tool that hides complexity from developers, giving users the ability to interact with an application or website without problems.&lt;/p&gt;

&lt;p&gt;Reusable application components, send data to and from the application and extend application systems to partners.&lt;/p&gt;

&lt;p&gt;Some Examples of APIs&lt;/p&gt;

&lt;p&gt;APIs are one of the most convenient ways to programmatically interact with a given software component or resource.&lt;/p&gt;

&lt;p&gt;API not only helps users interact with applications but also allows two or more applications to interact with each other. Now that you are more familiar with the general concept, a blockchain API is nothing more than an API linked to a blockchain infrastructure or application.&lt;/p&gt;

&lt;p&gt;For a better and first-hand experience, I would like to share about my recent project- Newsdata.io which is a &lt;a href="https://newsdata.io/"&gt;news API&lt;/a&gt; platform. With the help of news API, users can fetch worldwide news data from the Newsdata.io news database.&lt;/p&gt;

&lt;p&gt;To better understand what an API is, imagine you are in a restaurant and have a menu in front of you. The kitchen, in this case, would be part of the application or system that will prepare your order, how can you communicate with him? Fortunately, there is the server, which acts as an API. It is the messenger who registers your request, forwards it to the kitchen, and then delivers the food or the answer to you.&lt;/p&gt;

&lt;p&gt;Likewise, a blockchain exchange API can help you access cryptocurrency price and performance data from the platform.&lt;br&gt;
Here’s another real API example: Imagine there are no travel restrictions related to COVID19 and you want to go on vacation. When you search for flights online, you will find many different options regarding destinations, departure and return dates and times, prices, and more.&lt;/p&gt;

&lt;p&gt;If you use an online travel service like Expedia, you will be able to analyze all of the options from a variety of airline databases. This is done through the API.&lt;/p&gt;

&lt;p&gt;An example of a similar blockchain API would be CoinMarketCap. It is one of the most popular and trusted cryptocurrency data providers. The website gets all of its data from APIs of different exchanges like Binance, Coinbase, Kraken, Bistamp, etc. The API for each exchange sends information back and forth.&lt;/p&gt;

&lt;p&gt;Developing blockchain software is quite difficult and involves several sophisticated elements. One of the most essential components is the blockchain API interface.&lt;/p&gt;

&lt;p&gt;You can think of them as services that allow blockchain users and developers to interact with the app in different ways. &lt;/p&gt;

&lt;p&gt;Here are some examples of blockchain API services:&lt;br&gt;
● An easy-to-use Bitcoin-related API that allows any website, for example, an online store, to receive payments in Bitcoin;&lt;br&gt;
● API for payment transactions from digital wallets;&lt;br&gt;
● API for querying blockchain data relating to blocks, transactions, etc.&lt;/p&gt;

&lt;p&gt;Note that decentralized applications (dApps) are nothing more than applications that interact with native blockchains, such as Ethereum or Algorand, via the API. This is why the latter is so important for the blockchain space.&lt;/p&gt;

&lt;p&gt;APIs may be created by others and sold or provided free of charge. Since APIs are essential for dApps and other blockchain use cases, having a decentralized API marketplace is very important. In a way, using blockchain for API management would be a great approach.&lt;/p&gt;

&lt;p&gt;Blockchain and Artificial Intelligence Can Leverage Data Through APIs&lt;/p&gt;

&lt;p&gt;APIs are about data. Many APIs revolve around blockchains or software data that can be categorized, distributed, compared, and analyzed in different ways.&lt;/p&gt;

&lt;p&gt;When it comes to huge amounts of data, the best way to analyze it is with artificial intelligence (AI) systems. A combination that includes blockchain and AI would certainly do the trick. It can enable a decentralized API marketplace for data sharing and processing.&lt;/p&gt;

&lt;p&gt;Although not focused on the blockchain industry, the platform can be used by third-party AI creators who develop systems and data models based on blockchain APIs.&lt;/p&gt;

&lt;p&gt;But above all, artificial intelligence encourages businesses and organizations to harness data and derive maximum benefit from it. Most companies are concerned about sharing data for privacy or regulatory reasons. However, wasting such valuable data is not a reasonable approach.&lt;/p&gt;

&lt;p&gt;AI engineers can develop models based on data shared by consumers of different products and services. Customers can find relevant models in the market. All models are accessible through simple APIs.&lt;/p&gt;

&lt;p&gt;Platforms rely on blockchain and smart contracts to automate various data processes. AI-based platforms use blockchain for API trading, which helps clients to buy and use market-relevant data APIs.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>ai</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>How to render a list with React</title>
      <author>Ustariz Enzo</author>
      <pubDate>Mon, 06 Dec 2021 07:49:43 +0000</pubDate>
      <link>https://dev.to/ziratsu/how-to-render-a-list-with-react-281e</link>
      <guid>https://dev.to/ziratsu/how-to-render-a-list-with-react-281e</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;You don't know how to &lt;em&gt;render a list with React&lt;/em&gt;? Jump in to learn how to do it!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-4QXMFnFr6g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-list"&gt;
  &lt;/a&gt;
  1. Create a list!
&lt;/h2&gt;

&lt;p&gt;Create a simple React app and add an h1 to your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;A React List&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a list, you need to use the state. Let's import it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you need to create some dummy data to feed our state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Txt 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Txt 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Txt 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating an ID like that isn't the best way to do it, but we'll see a tool later on that you can use in order to do it better. For now, let's keep it like that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-render-the-list-with-the-map-method"&gt;
  &lt;/a&gt;
  2. Render the list with the &lt;em&gt;map()&lt;/em&gt; method!
&lt;/h2&gt;

&lt;p&gt;Let's render the list with the &lt;em&gt;map()&lt;/em&gt; method. For each item, you'll render an &lt;em&gt;li&lt;/em&gt; that contains the text from the data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;A React List&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it's working, however in the console there'll be an error saying that each child in a list should have a unique "key" prop. &lt;br&gt;
React needs that key to understand what has been created, especially if something is deleted or modified.&lt;/p&gt;

&lt;p&gt;Therefore you can simply add the key prop to the &lt;em&gt;li&lt;/em&gt; tag with the &lt;em&gt;id&lt;/em&gt; from the data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you refresh the page, you'll no longer see the error in the console!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-theres-a-better-way-to-have-a-unique-id-for-each-of-the-items-in-your-list"&gt;
  &lt;/a&gt;
  3. There's a better way to have a unique id for each of the items in your list!
&lt;/h2&gt;

&lt;p&gt;As said before, the &lt;em&gt;id&lt;/em&gt; from the data isn't very secure since they're not unique if it's used in a huge app. In order to fix that, you'll add an &lt;em&gt;uuid&lt;/em&gt; package. In your terminal, install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;npm install uuid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, import it in your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, you can simply use that method in your data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Txt 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Txt 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Txt 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can log it to see the unique and strong ids this method creates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now know how to render a list with React! &lt;strong&gt;Well done!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>I'm Dreaming of a Wild PHP ❄️</title>
      <author>Anders Björkland</author>
      <pubDate>Mon, 06 Dec 2021 07:47:12 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/im-dreaming-of-a-wild-php-4b3i</link>
      <guid>https://dev.to/andersbjorkland/im-dreaming-of-a-wild-php-4b3i</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Just the Gist&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
PHP is used for the Web, mostly. Anything from personal websites to large-scale applications are written in PHP. It's also been used for Machine Learning, and in development and deployment tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-php-is-used-in-the-wild"&gt;
  &lt;/a&gt;
  How PHP is used in the Wild
&lt;/h2&gt;

&lt;p&gt;PHP is the language of the web. That is where it was first to be used, and its primarily where it is used today. From personal websites to enterprise applications, PHP is most places. There are also uses for PHP in other areas, such as the command line, and in the cloud. Would you believe there's a machine learning library for PHP? It sounds unbelievable, but there is. Today we take a look at some of the real world applications of PHP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-home-page"&gt;
  &lt;/a&gt;
  Personal Home Page
&lt;/h3&gt;

&lt;p&gt;Just PHP by itself can get you very far. It's a simple language, and it's easy to learn. A website owner can get a website up with a simple contact form. All that would be needed is a hosting service where the owner can put their PHP-file, and hook into an email service. Next, the owner may want to add some kind of authentication to their website, either they continue to use "vanilla" PHP or they can get a Content Management System (CMS).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A list of a few PHP CMS:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wordpress.org/"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/"&gt;Drupal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boltcms.io/"&gt;Bolt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joomla.org/"&gt;Joomla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://moodle.org/"&gt;Moodle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getgrav.org/"&gt;Grav&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://getgrav.org/"&gt;SilverStripe&lt;/a&gt;
☝ And these are all open source!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#news-sites-and-blogs"&gt;
  &lt;/a&gt;
  News sites and Blogs
&lt;/h3&gt;

&lt;p&gt;On 2nd of December we had a look at why PHP had become so popular. We saw that one of the reasons was WordPress. &lt;a href="https://wordpress.com/notable-users/"&gt;Notable users&lt;/a&gt; are New York Times, CNN and Forbes. Some use it for their profiles' blogs, others for their news sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#as-microservices"&gt;
  &lt;/a&gt;
  As micro-services
&lt;/h3&gt;

&lt;p&gt;There are endless possibilities for enterprises to build and combine whatever services they may need in a micro-service architecture. Laravel and Symfony can provide the structure for one of the services. Both are examples of PHP frameworks that can be used to build entire applications, or monoliths, but may as easily be used for a single purpose. Symfony started out with this component mindset from scratch, and Laravel has this potential as well. As long as they can provide an API, be it RESTful or GraphQL, it doesn't matter if the calling code is built in Java och C#. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#machine-learning"&gt;
  &lt;/a&gt;
  Machine Learning
&lt;/h3&gt;

&lt;p&gt;One prominent Machine Learning project is &lt;a href="https://rubixml.com/"&gt;RubixML&lt;/a&gt;. It's got tools for supervised and unsupervised learning, and it's used in a variety of domains. It's open source and free to use. Some use-cases for RubixML are: Image classification, text sentiment analysis, and image segmentation. If you are planning on doing Google's crash course in Machine Learning, perhaps an &lt;a href="https://github.com/RubixML/Iris"&gt;Iris Flower Classifier&lt;/a&gt; would be a good example to take a look at.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-so-much-more"&gt;
  &lt;/a&gt;
  And so much more
&lt;/h3&gt;

&lt;p&gt;We have not looked at the specific development tools that exists in PHP, such as unit and integration tests, static analysis tools, deployment tools, and so on. Let's just say, PHP has a great fauna of tools, and many projects are making use of them. We have seen personal sites and companies making use of PHP. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h2&gt;

&lt;p&gt;What uses do you have for PHP? Did I miss any big use cases? Is PHP better suited for monolith systems, or is it better for micro-services? Comment below and let us know what you think ✍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Crash Course in Machine Learning: &lt;a href="https://developers.google.com/machine-learning/crash-course"&gt;https://developers.google.com/machine-learning/crash-course&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;A list of frameworks for PHP: &lt;a href="https://en.wikipedia.org/wiki/Category:PHP_frameworks"&gt;https://en.wikipedia.org/wiki/Category:PHP_frameworks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A list of PHP Content Management Systems: &lt;a href="https://en.wikipedia.org/wiki/List_of_content_management_systems#PHP"&gt;https://en.wikipedia.org/wiki/List_of_content_management_systems#PHP&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Monolith vs microservices: &lt;a href="https://devops.com/microservices-vs-monoliths-which-is-right-for-your-enterprise/"&gt;https://devops.com/microservices-vs-monoliths-which-is-right-for-your-enterprise/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developing A Game Engine with Perl: Part 8 - Vim</title>
      <author>Shawn Holland</author>
      <pubDate>Mon, 06 Dec 2021 07:41:20 +0000</pubDate>
      <link>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-8-vim-2gj5</link>
      <guid>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-8-vim-2gj5</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;As Always...&lt;/a&gt; &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's step back from &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;typing code&lt;/a&gt; for a moment and talk about how that code is typed. There are &lt;a href="https://en.wikipedia.org/wiki/Source-code_editor#Notable_examples"&gt;many options&lt;/a&gt; for a developer to code with, and we all have a preference. It's not so much a matter of right and wrong, as it is of comfort and enjoyment. For me, I code in &lt;a href="https://www.vim.org/download.php"&gt;Vim&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXxsZ3CF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r64ntezh2wlam11ohdhc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXxsZ3CF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r64ntezh2wlam11ohdhc.jpeg" alt="" width="225" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-coding-in-vim-is-fun"&gt;
  &lt;/a&gt;
  ...and Coding in Vim is fun
&lt;/h2&gt;

&lt;p&gt;I was introduced to Vim back in college. Our school used &lt;a href="https://en.wikipedia.org/wiki/IBM_AIX"&gt;AIX&lt;/a&gt; for their server OS and we were taught to use Vim. This was also my first introduction to a Unix environment. Coming from a home Dos/Windows environment and entering the Unix world came with challenges. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://mamchenkov.net/wordpress/2004/05/10/vim-for-perl-developers/"&gt;Using Vim&lt;/a&gt; twisted my brain and took a bit to get use to. But today, after using it for many years, it often feels &lt;a href="https://www.youtube.com/watch?v=0KRxhNrtVIY"&gt;very rhythmic&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=iurhjlBum0o"&gt;fun&lt;/a&gt; to code. Also, not gonna lie, it kinda makes me feel that sense of "coolness" I got when watching &lt;a href="https://www.youtube.com/watch?v=Rn2cf_wJ4f4"&gt;Hackers&lt;/a&gt; for the first time. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LS6FsB3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wan5j8kutdpoihzkhsq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LS6FsB3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wan5j8kutdpoihzkhsq.gif" alt="Image description" width="480" height="360"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=p96KIwW5RIc"&gt;Hahaha...&lt;/a&gt; That movie does &lt;strong&gt;NOT&lt;/strong&gt; hold up well! Teenager me was so impressionable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$me-&amp;gt;hides_face_in_shame();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can verify my shame level using this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;
use warnings;
use Shameful::movies;

my $movie  = shift;
my $me     = new Shameful::movies();
my $shame  = $me-&amp;gt;watched($movie);
my $return = "Great Movie!";

if ($shame) {
    $return = $me-&amp;gt;hides_face_in_shame($movie);
}

print $return;
exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running that code prints out the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:~/Fake_But_Should_Be_Real_Scripts/ # 
perl i_loved_watching.pl Hackers

Hack the planet!... More like Hide your face bro!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ansi-in-vim"&gt;
  &lt;/a&gt;
  ANSI in Vim
&lt;/h2&gt;

&lt;p&gt;Working with ANSI codes directly in Vim I see a lot of &lt;code&gt;^[&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kU2bjP2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx03498arazf6pauu39z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kU2bjP2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx03498arazf6pauu39z.png" alt="Image description" width="474" height="265"&gt;&lt;/a&gt;&lt;br&gt;
Now this &lt;code&gt;^[&lt;/code&gt; isn't the same as &lt;code&gt;shift+6 and [&lt;/code&gt;. No, this represents the escape character and is highlighted blue in my Vim. If it was &lt;code&gt;shift+6 and [&lt;/code&gt; it would be coloured the same as regular text. Something very useful to know, you can type the escape character in Vim by pressing &lt;code&gt;ctrl+v&lt;/code&gt; and then the &lt;code&gt;escape&lt;/code&gt; key. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#i-split-vim-up-to-open-multiple-files"&gt;
  &lt;/a&gt;
  I split Vim up to open multiple files
&lt;/h2&gt;

&lt;p&gt;I use the &lt;code&gt;:split&lt;/code&gt; and &lt;code&gt;:vsplit&lt;/code&gt; command in Vim often to load in other files. Using &lt;code&gt;split&lt;/code&gt; will stack files above/below each other (split horizontally) and &lt;code&gt;vsplit&lt;/code&gt; does side by side (vertically). Sometimes I need to combine &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;vsplit&lt;/code&gt; to have 3 files at once. Switching between each file in (v)split can be done with &lt;code&gt;ctrl+w+w&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ufTfubZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89gr4cikr966i90xijah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ufTfubZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89gr4cikr966i90xijah.png" alt="Image description" width="880" height="884"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-colourful"&gt;
  &lt;/a&gt;
  So Colourful
&lt;/h2&gt;

&lt;p&gt;Vim supports colour schemes. It's something I don't change often, so I always forget and have to look it up. Since I just did it recently after &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-3-hardware-failure-server-upgrade-on1"&gt;upgrading the dev/test server&lt;/a&gt;, I'll share here with you all. You can change it with the :colorscheme command. The one I'm using is :colorscheme peachpuff. I also have syntax highlighting turned on with the :syntax on. I made it permanent by adding the commands to ~/.vimrc I code in &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;OpenSuSE Linux&lt;/a&gt;, Vim config files may vary with your OS. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dont-try-this-at-work"&gt;
  &lt;/a&gt;
  Don't try this at work
&lt;/h2&gt;

&lt;p&gt;Running a bulk search and replace can cause unexpected results if you're not careful. I know I'm thankful for &lt;a href="https://en.wikipedia.org/wiki/Undo#History"&gt;whoever invented undo&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WU8WiBEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y96str6utiqwochk8183.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WU8WiBEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y96str6utiqwochk8183.png" alt="Image description" width="488" height="408"&gt;&lt;/a&gt;&lt;br&gt;
There are &lt;a href="https://linux.die.net/man/1/sed"&gt;many ways&lt;/a&gt; to &lt;a href="https://linux.die.net/man/1/awk"&gt;search and replace&lt;/a&gt; the contents of a file in Linux and &lt;a href="https://perldoc.perl.org/perlrequick"&gt;Perl&lt;/a&gt;. However, when I'm in Vim, I often find it quickest to use the :%s command. Typically when I need to apply a search and replace to a whole file I use a command like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:%s/\^[//g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The format is &lt;code&gt;:%s/search_pattern/replace_with/g&lt;/code&gt; The search pattern I used in the above example is to find the escape character &lt;code&gt;^[&lt;/code&gt; I mentioned earlier and replace every occurrence with nothing &lt;code&gt;//g&lt;/code&gt;. I have to precede &lt;code&gt;^[&lt;/code&gt; with &lt;code&gt;\&lt;/code&gt; so the &lt;a href="http://vimdoc.sourceforge.net/htmldoc/pattern.html"&gt;regular expression search pattern&lt;/a&gt; knows it's a literal escape character. I type &lt;code&gt;^[&lt;/code&gt; using ctrl+v and pressing escape.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-you"&gt;
  &lt;/a&gt;
  How about you?
&lt;/h2&gt;

&lt;p&gt;Do you code in Vim? What sort of tricks and tips have you learned? What colorscheme do you prefer?&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-7-fork-3acm"&gt;Prev &amp;lt;&amp;lt; Part 7 - Fork&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Next &amp;gt;&amp;gt; Coming Soon&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>perl</category>
      <category>gamedev</category>
      <category>devjournal</category>
      <category>vim</category>
    </item>
    <item>
      <title>Advent of Code 2021 in Javascript: My beginner solutions (days 1-2)</title>
      <author>Rachel</author>
      <pubDate>Mon, 06 Dec 2021 07:34:12 +0000</pubDate>
      <link>https://dev.to/rachelg/advent-of-code-in-javascript-my-beginner-solutions-days-1-2-3dgk</link>
      <guid>https://dev.to/rachelg/advent-of-code-in-javascript-my-beginner-solutions-days-1-2-3dgk</guid>
      <description>&lt;p&gt;Hi dev.to!&lt;/p&gt;

&lt;p&gt;Since this is my first time doing Advent of Code, I thought it would be fun to document the experience as I go. So far it's been super fun solving the problems, especially since I have no classes to keep my brain busy over the summer... I'd been missing that feeling of satisfaction when your code works, and Advent of Code gives me just that, but in bite-sized pieces! 😁&lt;/p&gt;

&lt;p&gt;So, here are my solutions to the first two days of Advent of Code 2021. Just to note, I haven't looked at anyone else's solutions yet, so here you have my raw unfiltered thought process!! ✌️ Since I have limited maths and data manipulation skills (and I'm still learning Javascript), these solutions may be a bit simple/beginner level, but they do work and I think they're quite easy to read at least. Here we go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-one-sonar-sweep"&gt;
  &lt;/a&gt;
  Day One: Sonar Sweep
&lt;/h2&gt;

&lt;p&gt;(&lt;a href="https://adventofcode.com/2021/day/1"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-one"&gt;
  &lt;/a&gt;
  Part One
&lt;/h3&gt;

&lt;p&gt;In this problem, we are given a whole heap of numbers separated by new lines, that represent the depth of a submarine. We need to count &lt;strong&gt;the number of times the depth measurement increases from the previous measurement.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing to do is to convert the input we're given into a manageable format. First I copied the text from the input page into my Javascript file as a string literal and assigned it to a variable "input".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const input = `159 ...
// etc!
6568`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I collapsed the first 2000 lines in VS Code since that's how long it was. XD&lt;br&gt;
Next:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arr = input.split("\n").map(Number);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This converts the input into an array of strings using the separator "\n" (new line), then converts each string into a number. Now we just need to initialise a counter and iterate through the array, checking whether each value is larger than the previous one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let count = 0;

for (let i = 1; i &amp;lt; arr.length; i++) {
  if (arr[i] &amp;gt; arr[i - 1]) count++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start with index 1 because index 0 doesn't have any previous value to measure against.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(count);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can check the answer, which should be the value of 'count' :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-two"&gt;
  &lt;/a&gt;
  Part Two
&lt;/h3&gt;

&lt;p&gt;In this problem, we need to add each value to its previous and next values in a sliding window. Then we again need to give the number of times the resulting values increase.&lt;/p&gt;

&lt;p&gt;We already have the array ready to go, so now we just need to iterate through the list again starting with index 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let count = 0;

for (let i = 1; i &amp;lt; arr.length - 2; i++) {
  let a = arr[i] + arr[i + 1] + arr[i + 2];
  let b = arr[i - 1] + arr[i] + arr[i + 1];
  if (a &amp;gt; b) count++;
}

console.log(count);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to stop two indexes before the last index (i &amp;lt; arr.length - 2) because after that there won't be enough measurements to create a three-measurement sum. &lt;/p&gt;

&lt;p&gt;Ok, on to the next day :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-two-dive"&gt;
  &lt;/a&gt;
  Day Two: Dive!
&lt;/h2&gt;

&lt;p&gt;(&lt;a href="https://adventofcode.com/2021/day/2"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-one"&gt;
  &lt;/a&gt;
  Part One
&lt;/h3&gt;

&lt;p&gt;We're still in a submarine! But this time we need to learn how to steer it?? In this puzzle, we're again given input separated by new lines, but with added complexity. I won't get into detail as the puzzle instructions explain it very well.&lt;/p&gt;

&lt;p&gt;Basically, we need two counters: depth and horizontal position. These will be increased (or increased or decreased in the case of depth) as we iterate through the input. First off, we get organised by initialising our array and counters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arr = input.split("\n");

let depth = 0;
let horizontal = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have an array of strings looking like ["forward 5", "down 5", "up 3"] etc.. We need to split up the word and the number, so that we can work with each separately. I put each instruction into its own nested array like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newArr = arr.map((instruction) =&amp;gt; {
  return instruction.split(" ");
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now newArr will look something like: [["forward", "5"], ["down", "5"], ["up", "3"]]. All we have to do next is iterate through the array, checking the instruction and adjusting the associated counter accordingly. We can parse the number part of the instruction (which is currently a string at position [1] in each sub array) with parseInt(i[1]).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let i of newArr) {
  const num = parseInt(i[1]);

  if (i[0] === "forward") {
    horizontal += num;
  }
  if (i[0] === "up") {
    depth -= num;
  }
  if (i[0] === "down") {
    depth += num;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all that remains is to provide the depth multiplied by horizontal position.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(horizontal * depth);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Onwards!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-two"&gt;
  &lt;/a&gt;
  Part Two
&lt;/h3&gt;

&lt;p&gt;Part two is pretty straightforward; we just need to adjust the for loop a tiny bit. First we reset the depth and horizontal values and add in a new value: aim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;depth = 0;
horizontal = 0;
let aim = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now "down" and "up" will modify aim rather than depth, and "forward" will both increase the horizontal position and increase depth by the given value multiplied by the current value of aim. Luckily our array is already set up :) So:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let i of newArr) {
  const num = parseInt(i[1]);

  if (i[0] == "forward") {
    horizontal += num;
    depth += aim * num;
  }
  if (i[0] == "up") {
    aim -= num;
  }
  if (i[0] == "down") {
    aim += num;
  }
}

console.log(horizontal * depth);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And done!&lt;/p&gt;

&lt;p&gt;That was fun to write up, now I'm going to have a look at other people's cool answers and feel like a noob!&lt;/p&gt;

&lt;p&gt;Let me know if I should continue into days 3 &amp;amp; 4 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>adventofcode</category>
    </item>
    <item>
      <title>CI pipeline for Django Project</title>
      <author>Ranjeet Singh</author>
      <pubDate>Mon, 06 Dec 2021 07:32:37 +0000</pubDate>
      <link>https://dev.to/techonerd/ci-pipeline-for-django-project-5fb5</link>
      <guid>https://dev.to/techonerd/ci-pipeline-for-django-project-5fb5</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;Have Django project setup and test cases written to be used to check continuous integration and checking code against flake8.&lt;/p&gt;

&lt;p&gt;With this in mind follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create you Django project as usual &lt;code&gt;django-admin startproject &amp;lt;project_name&amp;gt;&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run your project with &lt;code&gt;python manage.py runserver&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initiate git in your project if not have it yet with &lt;code&gt;git init&lt;/code&gt; . &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure sensitive data like SECRET_KEYS and DEBUG_VALUE as environment variable in github repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaHm7b8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbsocd5roo7ubb5xlsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaHm7b8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbsocd5roo7ubb5xlsp.png" alt="secret variables setup in github repository" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now our project is all setup and running, we will take care of CI on each commit PUSH on github repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;Add the .yml file as follows .github/workflows/name.yml in the project. For more information refer to the official &lt;a href="https://docs.github.com/en/actions/learn-github-actions#creating-a-workflow-file"&gt;docs&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Django CI
on:
  push:
    branches:
      - '*'
      - '*/*'

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      env: # environment variable
        SECRET_kEY: ${{ secrets.SECRET_KEY }}
        DEBUG_VALUE: ${{ secrets.DEBUG_VALUE }}

      run: |
        python manage.py test
    - name: Lint with flake8
      run: |
        pip install flake8 
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We can run CI for various python versions.&lt;/li&gt;
&lt;li&gt;We can access secret variables as &lt;code&gt;${{secrets.&amp;lt;VARIABLE_NAME&amp;gt;}}&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Github &lt;a href="https://github.com/techonerd/API_Bank"&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;under &lt;a href="https://github.com/techonerd/API_Bank/blob/main/LICENSE"&gt;MIT license&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#collaborators"&gt;
  &lt;/a&gt;
  Collaborators
&lt;/h4&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dkaiamit"&gt;@dkaiamit&lt;/a&gt;
 &lt;a href="https://github.com/kido-kit-kat"&gt;@kido-kit-kat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding, happy hacking ^^&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>django</category>
      <category>python</category>
    </item>
    <item>
      <title>Understand your unauthenticated &amp; public AWS API Gateway exposure</title>
      <author>Lezgin Bakircioglu</author>
      <pubDate>Mon, 06 Dec 2021 07:07:10 +0000</pubDate>
      <link>https://dev.to/aws-builders/understand-your-unauthenticated-public-aws-api-gateway-exposure-2hm</link>
      <guid>https://dev.to/aws-builders/understand-your-unauthenticated-public-aws-api-gateway-exposure-2hm</guid>
      <description>&lt;p&gt;Have you ever had the need to quickly audit your unauthenticated &amp;amp; public exposure of your API Gateway resources to plan a implementation of AWS WAF (Web Application Firewall)?&lt;/p&gt;

&lt;p&gt;I had and I needed it to understand what API Gateway endpoints I would like to focus on for our AWS WAF rollout to minimize the risk of direct external threat / attack for the company I work for.&lt;/p&gt;

&lt;p&gt;Well, I actually changed my prioritization as we found that 7% of our API Gateways were not supposed to be public and were exposing us for to risk.&lt;/p&gt;

&lt;p&gt;It started with my colleague and I needing to do an inventory, We needed to understand our public exposed resources that were not protected by a authorization mechanism that is handled by AWS API Gateway (IAM, API keys etc).&lt;/p&gt;

&lt;p&gt;I quickly decided that we would not spend time on doing an inventory on what authorization each resource is configured with in all the 312 API Gateway endpoints in production.&lt;/p&gt;

&lt;p&gt;So I started to write a one-liner in bash using aws cli v2 (tested on Ubuntu 20.04 &amp;amp; macos big sur) to do that for me. Make sure to change the profile (three times in the one liner) and add --region if you need to use another one then your default configured.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws --profile AWS-PROFILE-CHANGE-ME apigateway get-rest-apis | grep \"id\"\: | awk -F '"' '{print $4}' | while read -r restApiId; do aws --profile AWS-PROFILE-CHANGE-ME apigateway get-resources --rest-api-id $restApiId | grep -B 4  resourceMethods|grep \"id\"\:|awk -F '"' '{print $4}' | while read -r resourceId; do for httpMethod in "GET" "PATCH" "PUT" "OPTION" "DELETE" "POST"; do  aws --profile AWS-PROFILE-CHANGE-ME apigateway get-method --rest-api-id $restApiId --resource-id $resourceId --http-method $httpMethod 2&amp;gt;&amp;amp;1 | grep -A 1 '"authorizationType": "NONE"' | grep '"apiKeyRequired": false' 2&amp;gt;&amp;amp;1 &amp;gt;&amp;gt; /dev/null  &amp;amp;&amp;amp; echo "APIGW $restApiId with RESOURCE ID $resourceId and HTTP METHOD $httpMethod IS PUBLIC AND NO API KEY" ; done ; done ; done  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expected output (if you have public resources)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APIGW XXXXXXXXXX with RESOURCE ID XXXXXXXXXX and HTTP METHOD GET IS PUBLIC AND NO API KEY
APIGW XXXXXXXXXX with RESOURCE ID XXXXXXXXXX and HTTP METHOD POST IS PUBLIC AND NO API KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case I had 9.6% of all AWS API Gateway endpoints in production that had one or more resources with an authorization setting set to none and no api key set. That is typically the case when you build a public services as long as they are suppose to be public, in our case we only had a few endpoints serving our customers so we did not expect more then 2%, we had now 7.6% more then expected.&lt;/p&gt;

&lt;p&gt;Based on that, we totally shifted the focus from addressing that instead of adding more layers of security (WAF in this case). With that said, if you have a pretty good feeling of how many endpoints and resources that should be public and unauthenticated, this one liner will give you a indication if your developers are doing the right thing managing their infrastructure.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>apigateway</category>
      <category>security</category>
      <category>secops</category>
    </item>
    <item>
      <title>Using GitHub Actions to Publish Doxygen Docs to GitHub Pages</title>
      <author>Jonah Lawrence</author>
      <pubDate>Mon, 06 Dec 2021 06:34:03 +0000</pubDate>
      <link>https://dev.to/denvercoder1/using-github-actions-to-publish-doxygen-docs-to-github-pages-177g</link>
      <guid>https://dev.to/denvercoder1/using-github-actions-to-publish-doxygen-docs-to-github-pages-177g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/doxygen-github-pages-deploy-action"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1cE-3SQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxxu8dgjat4dmlrz1pde.png" alt="Marketplace screenshot" width="739" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DenverCoder1/doxygen-github-pages-action"&gt;&lt;strong&gt;Doxygen GitHub Pages Deploy Action&lt;/strong&gt;&lt;/a&gt; is a new GitHub action for automating the process of making documentation using &lt;a href="https://www.doxygen.nl/index.html"&gt;Doxygen&lt;/a&gt; and publishing it to &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This action is a composite action using shell scripts for installing necessary tools and preparing docs and makes use of &lt;a href="https://github.com/JamesIves/github-pages-deploy-action"&gt;JamesIves/github-pages-deploy-action&lt;/a&gt; for deploying the docs to a GitHub Pages branch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-usage"&gt;
  &lt;/a&gt;
  Example Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Doxygen GitHub Pages Deploy Action&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DenverCoder1/doxygen-github-pages-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt;
          &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docs/html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DenverCoder1"&gt;
        DenverCoder1
      &lt;/a&gt; / &lt;a href="https://github.com/DenverCoder1/doxygen-github-pages-action"&gt;
        doxygen-github-pages-action
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GitHub Action for deploying Doxygen documentation to a GitHub pages branch
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Doxygen GitHub Pages Deploy Action&lt;/h1&gt;
&lt;p&gt;GitHub Action for making and deploying Doxygen documentation to a GitHub pages branch&lt;/p&gt;
&lt;h2&gt;
Basic Usage&lt;/h2&gt;
&lt;p&gt;To deploy docs on every push to the &lt;code&gt;main&lt;/code&gt; branch, create a new file in the &lt;code&gt;.github/workflows/&lt;/code&gt; directory called &lt;code&gt;doxygen-gh-pages.yml&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;Doxygen GitHub Pages Deploy Action&lt;/span&gt;

&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;push&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;branches&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;main&lt;/span&gt;

&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;deploy&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;runs-on&lt;/span&gt;: &lt;span class="pl-s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;steps&lt;/span&gt;:
      - &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;DenverCoder1/doxygen-github-pages-action@v1&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;github_token&lt;/span&gt;: &lt;span class="pl-s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Options&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;github_token&lt;/code&gt; (required): GitHub token for pushing to repo. See the &lt;a href="https://git.io/passing-token" rel="nofollow"&gt;docs&lt;/a&gt; for more info.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;branch&lt;/code&gt; (optional): Branch to deploy to. Defaults to &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;folder&lt;/code&gt; (optional): Folder where the docs are built. Defaults to &lt;code&gt;docs/html&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Advanced Usage&lt;/h2&gt;
&lt;p&gt;Here is an example of a &lt;code&gt;.github/workflows/doxygen-gh-pages.yml&lt;/code&gt; file with more advanced configuration:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;Doxygen GitHub Pages Deploy Action&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;push&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;branches&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;main&lt;/span&gt;
  &lt;span class="pl-ent"&gt;workflow_dispatch&lt;/span&gt;:

&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;deploy&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/DenverCoder1/doxygen-github-pages-action"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-the-making"&gt;
  &lt;/a&gt;
  In the Making
&lt;/h3&gt;

&lt;p&gt;First I needed to create a new repo with an &lt;code&gt;action.yml&lt;/code&gt; to start making the composite action.&lt;/p&gt;

&lt;p&gt;This action is the first action I have listed on the &lt;a href="https://github.com/marketplace/actions/doxygen-github-pages-deploy-action"&gt;Marketplace&lt;/a&gt;. In order to set up the listing properly, the following data appears at the top of the action file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Doxygen&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Pages&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Action'&lt;/span&gt;
&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Jonah&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Lawrence'&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Make&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;docs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Doxygen&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;then&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;generated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTML&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pages'&lt;/span&gt;
&lt;span class="na"&gt;branding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;upload-cloud"&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;purple"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the &lt;code&gt;github_token&lt;/code&gt;, &lt;code&gt;folder&lt;/code&gt;, and &lt;code&gt;branch&lt;/code&gt; used for deployment should be configurable, these three inputs were added to the action to allow these to be set in a workflow using the &lt;code&gt;with:&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;A&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;token&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pushing&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;repo.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Example:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://git.io/passing-token'&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Branch&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pushing&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pages&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;files'&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;gh-pages"&lt;/span&gt;
  &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Folder&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;where&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Doxygen&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;will&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;generate&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTML&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;build&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;files'&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;docs/html"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This action is a composite action. First we add a &lt;code&gt;runs&lt;/code&gt; property using &lt;code&gt;composite&lt;/code&gt;, then we add the steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;using&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;composite"&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following are the steps added to the action:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-checkout-repository"&gt;
  &lt;/a&gt;
  1. Checkout repository
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout repository&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;submodules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;true"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt; step is used to checkout the repository with any submodules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-install-doxygen"&gt;
  &lt;/a&gt;
  2. Install Doxygen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Doxygen&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sudo apt-get install doxygen -y&lt;/span&gt;
      &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doxygen is installed by running &lt;code&gt;apt-get install&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-generate-doxygen-documentation"&gt;
  &lt;/a&gt;
  3. Generate Doxygen Documentation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate Doxygen Documentation&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;doxygen&lt;/span&gt;
      &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doxygen documentation is generated by running &lt;code&gt;doxygen&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-nojekyll"&gt;
  &lt;/a&gt;
  4. Create .nojekyll
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create .nojekyll&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;touch ${{ inputs.folder }}/.nojekyll&lt;/span&gt;
      &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating a .nojekyll file ensures pages with underscores work on GitHub Pages.&lt;/p&gt;

&lt;p&gt;The folder where the documentation is built is where the &lt;code&gt;.nojekyll&lt;/code&gt; file will be created. The &lt;code&gt;folder&lt;/code&gt; input is used for this purpose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-deploy-to-github-pages"&gt;
  &lt;/a&gt;
  5. Deploy to GitHub Pages
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to GitHub Pages&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@3.7.1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ inputs.github_token }}&lt;/span&gt;
        &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ inputs.branch }}&lt;/span&gt;
        &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ inputs.folder }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://github.com/JamesIves/github-pages-deploy-action"&gt;JamesIves/github-pages-deploy-action&lt;/a&gt; action is used to deploy the documentation to GitHub Pages.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;folder&lt;/code&gt; input option determines which folder to deploy. By default, it is &lt;code&gt;docs/html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;branch&lt;/code&gt; input option determines which branch to deploy to. By default, it is &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;To see it in action, I have set up the action to run on my &lt;a href="https://github.com/DenverCoder1/C-Workshop"&gt;C-Workshop&lt;/a&gt; GitHub repository.&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>productivity</category>
      <category>github</category>
    </item>
    <item>
      <title>Getting Started with React.memo()</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 06 Dec 2021 06:33:20 +0000</pubDate>
      <link>https://dev.to/alexdevero/getting-started-with-reactmemo-41k3</link>
      <guid>https://dev.to/alexdevero/getting-started-with-reactmemo-41k3</guid>
      <description>&lt;p&gt;There are is a number of built-in tools to improve performance of React applications. One of these tools is high-order component &lt;code&gt;React.memo()&lt;/code&gt;. This tutorial will help you learn about &lt;code&gt;React.memo()&lt;/code&gt;. You will learn what it is, how it works and how to use it in your React apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-reactmemo"&gt;
  &lt;/a&gt;
  What is React.memo()
&lt;/h2&gt;

&lt;p&gt;Let's start with what &lt;code&gt;React.memo()&lt;/code&gt; is. It is a high-order component (&lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;HOC&lt;/a&gt;). A higher-order component is a function that takes another component and returns a new component. You can think about HOC as a wrapper that transforms some component you give it into a new component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-memo-helps"&gt;
  &lt;/a&gt;
  How memo() helps
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;React.memo()&lt;/code&gt; helps us increase performance of React apps by avoiding unnecessary renderings of components. Every time React has to decide whether to update the DOM, it compares the previous render with the new render. If these two renders are different, some data are different, React will re-render the DOM to update it.&lt;/p&gt;

&lt;p&gt;This is done in order to keep the UI in sync with the data. When this happens, React re-renders components that are currently rendered in the DOM. This can take some time and consume some resources, depending on how many components are rendered. The &lt;code&gt;React.memo()&lt;/code&gt; helps us make this process faster.&lt;/p&gt;

&lt;p&gt;When we wrap some component with &lt;code&gt;React.memo()&lt;/code&gt; three things will happen. First, React will render the component on the initial render as usually. After that, however, React will also memoize the component. React will store the result of that render in memory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#memo-and-memoization"&gt;
  &lt;/a&gt;
  memo() and memoization
&lt;/h3&gt;

&lt;p&gt;Interesting thing happens when something causes React to re-render the DOM. This time, with &lt;code&gt;memo()&lt;/code&gt;, React will not automatically re-render the component. Instead, it will check if the new props of the component are the same as of the memoized component from the previous render.&lt;/p&gt;

&lt;p&gt;If React recognizes that props of the component didn't change, it will reuse the memoized result of the previous render and skip re-rendering the component from scratch. React will basically re-use the "older" version of the component. When React uses the previous version of the component, it also re-uses whole content of that previous component.&lt;/p&gt;

&lt;p&gt;This means that if we have some computation in that component this compilation may not repeat itself, unless it is necessary, i.e. some external resource changed. This means that we can avoid not only unnecessary re-renders of component but, more importantly, repeating computations that are not necessary inside those component.&lt;/p&gt;

&lt;p&gt;What if the component props changed? React will re-render the component and run any necessary computations inside it. This, memoization with &lt;code&gt;memo()&lt;/code&gt;, works only with functional components. However, we can achieve this with class components if we use &lt;a href="https://reactjs.org/docs/react-api.html#reactpurecomponent"&gt;PureComponent&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h2&gt;

&lt;p&gt;One good thing on &lt;code&gt;React.memo()&lt;/code&gt; is that it is very easy to use. All we have to do is to take some functional component we want to memoize and wrap with &lt;code&gt;memo()&lt;/code&gt;. We can do this with new component we want to create as well as component that already exists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Functional component without memo():&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Functional component with memo():&lt;/span&gt;
&lt;span class="c1"&gt;// Import memo from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Wrap App component with memo():&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Create component and memoize it later:&lt;/span&gt;
&lt;span class="c1"&gt;// Import memo from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Memoize and export App component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppMemoized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#shallow-comparison-and-custom-comparison-function"&gt;
  &lt;/a&gt;
  Shallow comparison and custom comparison function
&lt;/h2&gt;

&lt;p&gt;By default, React does shallow comparison of props object when it compares props from the previous render and the next. This will be enough in most cases, if the props you are passing are simple, i.e. &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt1/"&gt;primitive data types&lt;/a&gt;. It may not be enough if you are working with complex props.&lt;/p&gt;

&lt;p&gt;For example, if you are passing objects or arrays through props, shallow comparison done by React will not be enough. React will probably fail to recognize that some object passed through props is the same as the previous. This is because when it comes to objects, React will compare references, not objects themselves.&lt;/p&gt;

&lt;p&gt;This will cause problems with shallow comparison. Let's say we create a new object that is the same as some other object. The fact is that these two objects will not be the same. They will have the same shape, contain the same data, but they will have different references.&lt;/p&gt;

&lt;p&gt;For React, and JavaScript as well, when it comes to objects, references are more important. When two references are different, shallow comparison will fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Compare "the same" objects:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// Or:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// Compare "the same" arrays:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// Or:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Use the same reference:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-custom-comparison-function"&gt;
  &lt;/a&gt;
  Using custom comparison function
&lt;/h3&gt;

&lt;p&gt;Fortunately, React allows us to use custom comparison function to check for props equality. So, if we know that we need more thorough comparison, we can provide &lt;code&gt;React.memo()&lt;/code&gt; with custom comparison function. This function comes as the second argument, right after the component we want to memoize.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Functional component with memo():&lt;/span&gt;
&lt;span class="c1"&gt;// Import memo from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create custom comparison function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Wrap with memo() and use custom comparison function:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;compareProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Pass compareProps as the 2nd argument&lt;/span&gt;

&lt;span class="c1"&gt;// Create component and memoize it later:&lt;/span&gt;
&lt;span class="c1"&gt;// Import memo from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Memoize with custom comparison function:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppMemoized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Pass compareProps as the 2nd argument&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to use custom comparison function, remember two important things. First, this function must always return a boolean. Second, it must return &lt;code&gt;true&lt;/code&gt; if previous props and next props are equal. Otherwise, it should return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-memo"&gt;
  &lt;/a&gt;
  When to use memo()
&lt;/h2&gt;

&lt;p&gt;Everything has some price. This is why before you try to use &lt;code&gt;memo()&lt;/code&gt; by default you should consider one thing. When you use it, React stores the result of rendering component in memory. If you decide to memoize a large number of components it will lead to more memory consumption.&lt;/p&gt;

&lt;p&gt;Another thing to consider is the comparison. When React compares previous and next props it requires some resources. This might not be such a big deal if your app is small or if you don't have too many memoized components. If you work on a bigger project, re-renders might be actually cheaper than memoization.&lt;/p&gt;

&lt;p&gt;The fact is that React is already doing a good job at optimizing rendering performance. So, before trying to memoize everything, profile your app and identify issues. If you find that some components render when it is not necessary, try using &lt;code&gt;React.memo()&lt;/code&gt;. Then, profile your app again and compare the results.&lt;/p&gt;

&lt;p&gt;Repeat this process with all components you want to try to memoize. If you see some meaningful improvements, keep the memoized version. Otherwise, if there is no improvement in performance or there is some penalty, just let the component re-render.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-rules-of-thumb"&gt;
  &lt;/a&gt;
  Some rules of thumb
&lt;/h3&gt;

&lt;p&gt;Aside to the above, there are some rules of thumb that can help you find components that might be worth memoizing. First, look for components that re-render often, usually with the same props. This often happens when component is forced to re-render by its parent component, even though the component itself didn't change.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;React.memo()&lt;/code&gt; can help you avoid these re-renders induced by parents. Second, try memoizing a component if the component always renders the same result given the same props. Third, your component renders a lot of UI. The more UI a component renders, the more expensive these renders usually are.&lt;/p&gt;

&lt;p&gt;In these cases, resources necessary for memoization and comparison check might be smaller than resources for subsequent re-renders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-getting-started-with-reactmemo"&gt;
  &lt;/a&gt;
  Conclusion: Getting started with React.memo()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;React.memo()&lt;/code&gt; can be very useful tool when we want to improve performance of our React apps. It makes it very easy to memoize components and avoid unnecessary re-renders. I hope that this tutorial helped you understand what &lt;code&gt;memo()&lt;/code&gt; is, how it works and how to use it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
