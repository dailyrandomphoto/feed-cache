<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I learned the foundations of UX design from Google and would recommend it to every designer!</title>
      <author>kiro mo</author>
      <pubDate>Sun, 18 Apr 2021 21:36:08 +0000</pubDate>
      <link>https://dev.to/kiromo/i-learned-the-foundations-of-ux-design-from-google-and-would-recommend-it-to-every-designer-5hmd</link>
      <guid>https://dev.to/kiromo/i-learned-the-foundations-of-ux-design-from-google-and-would-recommend-it-to-every-designer-5hmd</guid>
      <description>&lt;p&gt;Two weeks ago I finished my B. A degree at the University of Arts in Berlin as an interface designer and one week ago I decided to learn the Google UX Design Professional Certificate. &lt;a href="https://100daysofux.medium.com/i-started-learning-ux-design-from-google-and-here-are-my-impressions-of-day1-daac886ea74"&gt;This&lt;/a&gt; was my first blog about my first day in the training and my impressions.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RRyMB5B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/2.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RRyMB5B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/2.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to share with you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what I liked the most&lt;/li&gt;
&lt;li&gt;What I learned&lt;/li&gt;
&lt;li&gt;why I recommend it to others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I liked most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best part of the course for me where it was about accessibility! That's one thing that so many designers and so many developers don't pay attention to. And I think it's somehow part of the design ethic. You don't design for one group because they are the majority and not pay attention to the others because they are not!&lt;/p&gt;

&lt;p&gt;Designer should do like the bus driver in Berlin. If the driver sees that there is someone who is on chair then he opens the door for him first and then for others! that's how it should be. Let's include everyone and not design things that only affect the majority!&lt;/p&gt;

&lt;p&gt;Elise Roy Accessibility &amp;amp; Inclusive Design Lead at Google said about this, "It should be a normal part of your development process. It shouldn't be an add-on. It should be considered from the beginning."&lt;/p&gt;

&lt;p&gt;What I also really liked in the course, the part where it talks about difference between equity and equality and also the part by Catherine Courage, Vice President of User Experience at Google where it talks about overcoming impostor syndrome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;what did I learn:&lt;br&gt;&lt;/strong&gt;Here is the content, for the course, which is divided into 4 weeks. (I did it all in one week)&lt;/p&gt;

&lt;p&gt;Week 1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify and compare the disciplines within UX.&lt;/li&gt;
&lt;li&gt;Identify the factors that contribute to a good user experience design&lt;/li&gt;
&lt;li&gt;Review the common tasks of entry-level UX designers&lt;/li&gt;
&lt;li&gt;Review teams that UX designers frequently work with&lt;/li&gt;
&lt;li&gt;Explain how UX design jobs are impacted by company size and industry&lt;/li&gt;
&lt;li&gt;Explore job opportunities after completing the program&lt;/li&gt;
&lt;li&gt;Define the field of UX and explain its importance to consumers and businesses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Week 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define common terms used in UX design&lt;/li&gt;
&lt;li&gt;Describe user-centered design&lt;/li&gt;
&lt;li&gt;Explain common design frameworks&lt;/li&gt;
&lt;li&gt;Understand equity-focused design&lt;/li&gt;
&lt;li&gt;Describe the importance of accessibility in the design process&lt;/li&gt;
&lt;li&gt;Describe the importance of the Next Billion Users in UX design&lt;/li&gt;
&lt;li&gt;Explain the benefits of using design tools&lt;/li&gt;
&lt;li&gt;Identify common UX design tools&lt;/li&gt;
&lt;li&gt;Explain how UX designers think across platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WEEK 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe the phases of a design sprint&lt;/li&gt;
&lt;li&gt;Explain the importance of design sprints&lt;/li&gt;
&lt;li&gt;Plan a design sprint&lt;/li&gt;
&lt;li&gt;Explain the role of an entry-level UX designer during a design sprint&lt;/li&gt;
&lt;li&gt;Describe the importance of retrospectives after design sprints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Week 4:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe a UX design portfolio&lt;/li&gt;
&lt;li&gt;Create an online portfolio to showcase UX design work&lt;/li&gt;
&lt;li&gt;Recognize the fundamentals of a good portfolio&lt;/li&gt;
&lt;li&gt;Apply storytelling and branding elements to a UX design portfolio&lt;/li&gt;
&lt;li&gt;Apply proven writing methods to a UX design portfolio&lt;/li&gt;
&lt;li&gt;Explain how to build a professional design presence online&lt;/li&gt;
&lt;li&gt;Create or update professional profiles on social media&lt;/li&gt;
&lt;li&gt;Join and participate in online UX communities&lt;/li&gt;
&lt;li&gt;Explain impostor syndrome and how to overcome it&lt;/li&gt;
&lt;li&gt;Explore strategies for reaching out to potential mentors&lt;/li&gt;
&lt;li&gt;Discuss best practices for building a professional network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why I recommend it to others:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find the course very easy to understand, and you can always expand your knowledge by reading from other resources. I'm very satisfied so far, and I'm very excited about the rest.&lt;/p&gt;

&lt;p&gt;I have always read a lot aside the course. Here are articles that I would recommend to others:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://careerfoundry.com/en/blog/ux-design/ux-portfolio-examples-inspiration/"&gt;9 Of The Best UX Design Portfolio Examples From Around The Web&lt;/a&gt;&lt;br&gt;&lt;a href="https://uxplanet.org/what-type-of-designer-are-you-ef5052b67634"&gt;Three ways to know what kind of UX designer you are&lt;/a&gt;&lt;br&gt;&lt;a href="http://How%20to%20Overcome%20Imposter%20Syndrome%20as%20a%20New%20UX%20Designer"&gt;How to Overcome Imposter Syndrome as a New UX Designer&lt;/a&gt;&lt;br&gt;&lt;a href="https://uxplanet.org/my-senior-ux-designer-explains-the-user-centered-desing-process-with-examples-471f55e2658c"&gt;My Senior UX Designer explains the User-Centered Desing Process with examples&lt;/a&gt;&lt;br&gt;&lt;a href="https://www.interaction-design.org/literature/article/8-talks-by-women-to-inspire-ux-designers"&gt;8 Talks by Women to Inspire UX Designers&lt;/a&gt;&lt;br&gt;&lt;br&gt;Here is my certificate that I got today! There are 6 more parts in the training until I finish it, and I keep trying to get it all done in 100 days!&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AU4CgVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/3.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AU4CgVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/3.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>google</category>
    </item>
    <item>
      <title>Creating a Sleek Masonry Gallery with React and WebAssembly</title>
      <author>Remi van der Laan</author>
      <pubDate>Sun, 18 Apr 2021 21:25:35 +0000</pubDate>
      <link>https://dev.to/rvanderlaan/creating-a-sleek-masonry-gallery-with-react-and-webassembly-17p2</link>
      <guid>https://dev.to/rvanderlaan/creating-a-sleek-masonry-gallery-with-react-and-webassembly-17p2</guid>
      <description>&lt;p&gt;Myself and three others have been working on a tool called &lt;a href="https://allusion-app.github.io/"&gt;Allusion&lt;/a&gt; in our spare time: A free image organization application built for artists. It runs in Electron as a ReactJS application.&lt;br&gt;
One of its key components is the image gallery. Since users may import thousands of images, we can't just render them all using pure HTML and CSS. Over the course of the development, we tried out several out-of-the-box ReactJS packages (mainly &lt;a href="https://github.com/bvaughn/react-window"&gt;react-window&lt;/a&gt; and &lt;a href="https://bvaughn.github.io/react-virtualized/#/components/Masonry"&gt;react-virtualized&lt;/a&gt;) but none really suited our needs - be it their design or performance.&lt;br&gt;
In the end, we wrote our own super slick image gallery from scratch. It turned out quite nice, so I wanted to share our findings.&lt;/p&gt;

&lt;p&gt;The requirements we set for ourselves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep as much as possible off the main UI thread to keep everything snappy&lt;/li&gt;
&lt;li&gt;Keep computation time within a few milliseconds for up to ~10.000 images&lt;/li&gt;
&lt;li&gt;Configurable thumbnail sizes&lt;/li&gt;
&lt;li&gt;Three layout modes: A simple grid, vertical (column) masonry, horizontal (row) masonry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main caveat of our method is that it needs to know image resolutions beforehand, though it could probably be adapted to measure them on the fly too. This is what made the alternatives we tried feel clunky, so we have avoided doing that. Since we store the image dimensions in a database anyways, it's no problem for for our use-case. &lt;/p&gt;

&lt;p&gt;Our gallery is built-up out of three main sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The masonry layout algorithm itself, written in Rust&lt;/li&gt;
&lt;li&gt;The webworker and shared memory between the main thread and WASM&lt;/li&gt;
&lt;li&gt;The virtualized image renderer as a ReactJS component&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#masonry-algorithm-in-webassembly"&gt;
  &lt;/a&gt;
  Masonry algorithm in WebAssembly
&lt;/h1&gt;

&lt;p&gt;Rust was was something I wanted to get into for a while already, and it's a natural fit for WASM modules.&lt;br&gt;
The module is set-up with &lt;a href="https://github.com/rustwasm/wasm-pack"&gt;wasm-pack&lt;/a&gt; which outputs your WASM file along with TypeScript definitions as an easily importable ES6 module.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#transferring-data"&gt;
  &lt;/a&gt;
  Transferring data
&lt;/h2&gt;

&lt;p&gt;To provide the WASM package with the image dimensions it uses as input, we define a vector of &lt;code&gt;Transform&lt;/code&gt; structs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;src_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;src_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We chose to read the output of the layout computation from the same entry, for which we'll need some extra fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;src_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// input dimensions (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;src_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c"&gt;// output dimensions (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c"&gt;// output offset in the layout (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then define a &lt;code&gt;Layout&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;num_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;thumbnail_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// the desired output size&lt;/span&gt;
    &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c"&gt;// the amount of pixels in between two images&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back in JavaScript land, we ask for a pointer to that &lt;code&gt;items&lt;/code&gt; vector in WASM memory, and put our image dimensions in there one by one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.items&lt;/span&gt;&lt;span class="nf"&gt;.as_ptr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WASM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry_bg.wasm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items_ptr&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_ITEMS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;computeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Every item consists of 6 uint16s&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// I'll cover this method next!&lt;/span&gt;
  &lt;span class="c1"&gt;// And now we can do something with the layout!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getItemTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// same order as in Rust&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first, we allocated memory for the transforms anytime the layout is computed, but in practice, the layout is re-computed many times over. To eliminate some overhead, we just reserve a chunk of memory which we use for the lifetime of the module. With just a few megabytes we can support hundreds of thousands of images.&lt;br&gt;
One extra change was necessary: The top offset easily can grow beyond the &lt;code&gt;uint16&lt;/code&gt; of 65,536 pixels. For rows of 4 square images of 200px each, we reach that limit after only 81 rows. That's no good. Therefore, we moved the top offsets to a separate vector of unsigned &lt;code&gt;uint32&lt;/code&gt; values, which will last us over 5 million of such rows.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#layout-algorithms"&gt;
  &lt;/a&gt;
  Layout algorithms
&lt;/h2&gt;

&lt;p&gt;The vertical masonry layout is my personal favourite, so that's the one I'll be covering here. It's quite simple really: We determine the amount of columns that fit within the container width given the desired column width, and then iteratively place the images in the shortest column up to that point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTEp1psO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9po0njun3bhrq0mvfsqj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTEp1psO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9po0njun3bhrq0mvfsqj.gif" alt="Animation of the vertical masonry layout algorithm"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;compute_vertical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// First: Determine width of each column and initialize each column height at 0 pixels&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.thumbnail_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;item_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.padding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c"&gt;// Then loop over all images and place them in the shortest column&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.items&lt;/span&gt;&lt;span class="nf"&gt;.split_at_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.num_items&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_items&lt;/span&gt;&lt;span class="nf"&gt;.iter_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.top_offsets&lt;/span&gt;&lt;span class="nf"&gt;.iter_mut&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// take into account aspect ratio for the height&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.src_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;shortest_col_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;
                &lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;.enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;.min_by_key&lt;/span&gt;&lt;span class="p"&gt;(|(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;.map_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortest_col_index&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;top_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shortest_col_index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shortest_col_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nn"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nn"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.padding&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Return height of longest column&lt;/span&gt;
        &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.map_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Now, is this any good in practice? Well, I implemented the same layout computation function in TypeScript (transpiled down to JavaScript), and measured the performance of both for a gallery of 5000 images in release mode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4200hRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7qb6ifq6vyojdfwgqd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4200hRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7qb6ifq6vyojdfwgqd0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a solid 0.2ms faster! Yeah... WebAssembly might have been a little overkill for a simple O(1) calculation like this. It might be even worse than the TS equivalent, since we need to put all of the image dimensions in a buffer first. Though, it does pave the way for a more complex layout computation (I'll link to some resources at the end) for which I'm sure it would pay off.&lt;br&gt;
As for the high peaks in the WASM measurements, I'm not completely sure what causes those. I would have expected those to happen for the TS version instead, since Rust doesn't do garbage collection. I couldn't find any weird things happening in the glue code generated by &lt;code&gt;wasm-pack&lt;/code&gt; so I suspect it must be something from the WebAssembly runtime itself.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#webworker-with-shared-memory"&gt;
  &lt;/a&gt;
  WebWorker with shared memory
&lt;/h1&gt;

&lt;p&gt;Even though the computation only takes less than a millisecond on my machine, it might not on low-end devices or under heavy load.&lt;br&gt;
By computing the layout in a WebWorker, it won't interrupt the main UI thread, meaning that the application will stay responsive. &lt;br&gt;
We opted for setting up a WebWorker using &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;com-link&lt;/a&gt;, mainly for its ease of use.&lt;br&gt;
We don't want to copy the memory buffer every time a message is sent from the worker. Figuring out how to set up shared memory between the WASM memory in the worker and the main thread was the biggest time sink of this adventure. &lt;br&gt;
At first we sent the buffer as a &lt;a href="https://github.com/GoogleChromeLabs/comlink#comlinktransfervalue-transferables-and-comlinkproxyvalue"&gt;Transferrable&lt;/a&gt; but this stopped working in a recent release of Chrome. Instead, we configure the WASM memory to become a SharedArrayBuffer, which has the same capability. This is not supported out of the box: follow &lt;a href="https://rustwasm.github.io/wasm-bindgen/examples/raytrace.html"&gt;this guide&lt;/a&gt; to learn more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// masonry.worker.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;initializeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./wasm/masonry/pkg/masonry_bg.wasm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sharedArrayBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__wbindgen_export_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sharedArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_ITEMS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// MasonryWorkerAdapter.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./masonry.worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerAdapter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WorkerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerClass&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WorkerFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// And now here in the main thread we can access WASM memory that was initialized in the worker!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#virtualized-gallery-renderer"&gt;
  &lt;/a&gt;
  Virtualized gallery renderer
&lt;/h1&gt;

&lt;p&gt;The last step is to actually render the images in the layout that is computed. Since this is intended for a ReactJS application, the images are rendered as DOM nodes, but the same layout could also be used to render images in a canvas. &lt;br&gt;
We could just put all images in the DOM since the browser is very good at rendering only whatever visible is in the viewport. We can make it lots faster though, by only putting images that are visible in the viewport in the DOM tree. This is called "virtualized rendering". &lt;br&gt;
Any time the viewport dimensions change, or the user scrolls, or for any similar events, we have to re-evaluate which images to render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VirtualizedRenderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;VirtualizedRendererProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recompute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Find the top and bottom edge of the viewport in the layout (omitted for brevity: we do a binary search)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;startRenderIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endRenderIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;determineViewportRegion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// One div as the scrollable viewport&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onScroll&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* One div for the content */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerHeight&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startRenderIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endRenderIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileListIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startRenderIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItemLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileListIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting it all together, this is what we ended up with (links to a video on Imgur):&lt;br&gt;
&lt;a href="https://i.imgur.com/CALjWCT.mp4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZchRECG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg2kho6fsodndyl9s9tv.png" alt="Demo video"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Computing the masonry layout runs great performance-wise. It's also much smoother while scrolling and more flexible compared to popular packages available on NPM we tried out.&lt;br&gt;
Making use of WebAssembly was not really worth the hassle in the end, since the computation is fairly simple. Though, it was a good scope for a problem to learn some Rust for. Running the computation in a WebWorker makes all the difference though. Use workers, people!&lt;/p&gt;

&lt;p&gt;There are certainly improvements to be made. You could for instance only compute the layout for the relevant section of the viewport you are in. &lt;br&gt;
There are much bigger bottle necks in the code surrounding the layout computation through: It may take dozens of milliseconds to fetch thousands of images from the database and to insert their image resolutions into WASM memory. This could be solved by streaming in data as it is being fetched. For both of these it would add some unnecessary complexity for our current use case, so we're calling it a day at this point!&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://allusion-app.github.io/"&gt;The Allusion homepage&lt;/a&gt; - download it for free!&lt;/li&gt;
&lt;li&gt;The final implementation: &lt;a href="https://github.com/allusion-app/Allusion/blob/master/wasm/masonry/src/lib.rs"&gt;Masonry algorithm in Rust&lt;/a&gt;, &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/masonry.worker.ts"&gt;Webworker&lt;/a&gt;, &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/MasonryRenderer.tsx"&gt;Masonry renderer&lt;/a&gt; which makes use of the &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/VirtualizedRenderer.tsx"&gt;Virtualized renderer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Similar blogpost: &lt;a href="https://medium.com/@danrschlosser/building-the-image-grid-from-google-photos-6a09e193c74a"&gt;Building the Google Photos image grid&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webassembly</category>
      <category>webdev</category>
      <category>rust</category>
    </item>
    <item>
      <title>Crunch Pokemon Data with Python and Deta Base</title>
      <author>Ramki Pitchala</author>
      <pubDate>Sun, 18 Apr 2021 21:09:50 +0000</pubDate>
      <link>https://dev.to/ramko9999/crunch-pokemon-data-with-python-and-deta-base-2p</link>
      <guid>https://dev.to/ramko9999/crunch-pokemon-data-with-python-and-deta-base-2p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#crunch-pokemon-data-with-python-and-deta-base"&gt;
  &lt;/a&gt;
  Crunch Pokemon Data with Python and Deta Base
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setup-and-work-on-a-datastore-faster-than-pikachu"&gt;
  &lt;/a&gt;
  Setup and work on a datastore faster than Pikachu
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6RhuBDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ac2l5Bfc5dK9J3Tox" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6RhuBDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ac2l5Bfc5dK9J3Tox" alt="Photo by [Michael Rivera 🇵🇭](https://unsplash.com/@michaelrivera_ph) on [Unsplash](https://unsplash.com/photos/DypO_XgAE4Y)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://python.plainenglish.io/crunch-pokemon-data-with-deta-base-bd9c97d96ad3"&gt;Medium&lt;/a&gt;. If you prefer reading it from there, please do check it out.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Performance is a must when it comes to building software. However, in certain situations, the speed to set up and integrate new services for proof of concept evaluation or infrastructure is overlooked. Specifically, in the realm of databases, there are many options, but I find &lt;a href="https://www.deta.sh/"&gt;Deta&lt;/a&gt; to be most seamless to set up and use. Deta offers Deta Base (I will refer to it as Base), a NoSQL data store optimized for developer simplicity. In this article, I aim to show how to set up a Deta project and interact with your Base to store and manipulate Pokemon data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/139JVKQ8m6GeuQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/139JVKQ8m6GeuQ/giphy.gif" alt="Team Rocket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s get started!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Setup&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CRUD&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Querying&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;To begin, navigate to &lt;a href="https://web.deta.sh/"&gt;Sign Up&lt;/a&gt;, create a new account, and verify your account. Once you sign in, you should be on the following page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5N23vbyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3828/1%2ATgHKkBFeHYKwAqqRvEuaXg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5N23vbyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3828/1%2ATgHKkBFeHYKwAqqRvEuaXg.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the arrow in the top left, we will create a new project from scratch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEgbd72E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AO1mNYmNDwpWs8PAHjxTN1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEgbd72E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AO1mNYmNDwpWs8PAHjxTN1w.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter a name of your choice and hit create! A popup with your project key and project id will appear. Make sure you save the key!&lt;/p&gt;

&lt;p&gt;With the project key saved, create a new directory, walk into it and run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install flask deta&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt; is a web framework that we will use to create endpoints to listen to incoming requests. Based on the requests, we will interact with our remote database using the deta package.&lt;/p&gt;

&lt;p&gt;Here is how the folder structure will look like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.py

config.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In &lt;code&gt;config.py&lt;/code&gt;, we will store our project key&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DETA_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_COPIED_KEY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our project, we will create a Base called pokemon and utilize it to store, access, and manipulate Pokemon data. Before that, let’s go over the schema for a record in pokemon :&lt;/p&gt;

&lt;p&gt;Each record in a Base must correspond to a unique identifier called key. When we insert a Pokemon record into our Base, we will provide name as our key. As a result, if we needed to get information on Charizard, we just have to ask pokemon to find the associated record with Charizard as its key.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;app.py&lt;/code&gt;, let’s set up the Flask app and our connection to our Base, pokemon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DETA_KEY&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Deta&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;json.decoder&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONDecoder&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;deta_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Deta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DETA_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deta_project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pokemon"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONDecoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the data access and manipulations will occur through &lt;code&gt;db&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our setup is now complete! Onto the CRUD!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crud"&gt;
  &lt;/a&gt;
  CRUD
&lt;/h2&gt;

&lt;p&gt;CRUD is an acronym for creating, reading, updating, and deleting data in a database. We will explore how to perform each of the above operations in our pokemon Base. All the work will be done in &lt;code&gt;app.py&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insertion"&gt;
  &lt;/a&gt;
  Insertion
&lt;/h3&gt;

&lt;p&gt;Deta provides 2 ways of inserting data. The first is through the &lt;a href="https://docs.deta.sh/docs/base/sdk#put"&gt;&lt;code&gt;put&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;put&lt;/code&gt; is the faster method of insertion. If you call &lt;code&gt;put&lt;/code&gt; on a record that already exists in the base, &lt;code&gt;put&lt;/code&gt; will overwrite the record. In contrast, &lt;a href="https://docs.deta.sh/docs/base/sdk#put"&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt; is 2x slower than &lt;code&gt;put&lt;/code&gt;. In the case that you try to insert into the Base with an already existing key, it will throw an error.&lt;/p&gt;

&lt;p&gt;Let’s create an endpoint to insert a new Pokemon with &lt;code&gt;put&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is what the endpoint would look like using &lt;code&gt;insert&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;Deta also supports inserting multiple records at the same time with put_many. According to the documentation, it is possible to insert at most 25 items into the Base in a single call (&lt;a href="https://docs.deta.sh/docs/base/sdk#put-many"&gt;Deta Base SDK&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let’s test out what we have so far. Let’s insert the data for Pichu into the Base via an HTTP POST through &lt;code&gt;/pokemon&lt;/code&gt; on Postman.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfgY7ABK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2688/1%2AjXuk1uvzHgw_Oc54okwsqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfgY7ABK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2688/1%2AjXuk1uvzHgw_Oc54okwsqg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you hit send, navigate back to &lt;a href="https://web.deta.sh/home/Ramko9999/default"&gt;Deta&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_OK-bSmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3822/1%2AkelCdjWliRDu4ORQ2KUJSw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_OK-bSmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3822/1%2AkelCdjWliRDu4ORQ2KUJSw.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on your Base under the &lt;strong&gt;Bases&lt;/strong&gt; section. You will now be able to view the data in your Base.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMpSFpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2988/1%2AsaJ77wMEGlkTT5rq2vl_fw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMpSFpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2988/1%2AsaJ77wMEGlkTT5rq2vl_fw.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Pichu is in our pokemon Base!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#access"&gt;
  &lt;/a&gt;
  Access
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;a href="https://docs.deta.sh/docs/base/sdk/#get"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; method to access the record of a given key.&lt;/p&gt;

&lt;p&gt;Since our Pokemon name is the key, we can directly access its record by providing its name. We can test it with the following GET request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4i0s_CrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2686/1%2A97_qFgHmoKagFg7Dtknp0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4i0s_CrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2686/1%2A97_qFgHmoKagFg7Dtknp0w.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updation"&gt;
  &lt;/a&gt;
  Updation
&lt;/h3&gt;

&lt;p&gt;As stated previously in &lt;strong&gt;Insertion&lt;/strong&gt;, the &lt;code&gt;put&lt;/code&gt; function can be used for overwriting records. However, &lt;code&gt;put&lt;/code&gt; completely overwrites the record and can remove prior fields that are not part of the new updates. As result, if we want to partially update the record, we can use the &lt;a href="https://docs.deta.sh/docs/base/sdk#update"&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; function. In fact, &lt;code&gt;update&lt;/code&gt; also allows for fine-grained updations like incrementing values and appending, prepending, and removing elements in a list (&lt;a href="https://docs.deta.sh/docs/base/sdk#update"&gt;Deta Base SDK&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let’s make sure updating works with an example. First, I will insert the following data for Charizard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"region"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Johto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Charizard is from Kanto region
&lt;/span&gt;        &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Charizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"height"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"weight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;90.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# Charizard also Flying type
&lt;/span&gt;        &lt;span class="s"&gt;"evolution"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;region&lt;/code&gt; should be Kanto, and Charizard is also a flying type. Let’s update Charizard with a POST request to &lt;code&gt;/pokemon/update/Charizard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKG9K0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2682/1%2A2Os_Wp85latc_fOM2FQ0Lg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKG9K0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2682/1%2A2Os_Wp85latc_fOM2FQ0Lg.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a GET request to &lt;code&gt;/pokemon/Charizard&lt;/code&gt;, it is clear that &lt;code&gt;region&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSFRDtMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2710/1%2Amm-besOPWb3zpVmVk2NjhA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSFRDtMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2710/1%2Amm-besOPWb3zpVmVk2NjhA.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deletion"&gt;
  &lt;/a&gt;
  Deletion
&lt;/h3&gt;

&lt;p&gt;Deta provides &lt;a href="https://docs.deta.sh/docs/base/sdk#delete"&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;, a function that takes in a key and deletes the record associated with the key.&lt;/p&gt;

&lt;p&gt;If I wanted to delete Charizard, I would make an HTTP DELETE request to &lt;code&gt;/pokemon/delete/Charizard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have now explored how to insert, access, update and delete from our Base. Let’s learn how to query our Base.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying"&gt;
  &lt;/a&gt;
  Querying
&lt;/h2&gt;

&lt;p&gt;Prior to querying, make sure to fill up your Base with some more Pokemon.&lt;/p&gt;

&lt;p&gt;Querying is done through the &lt;a href="https://docs.deta.sh/docs/base/sdk#fetch"&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; method. To elaborate, fetch takes in a &lt;a href="https://docs.deta.sh/docs/base/sdk/#queries"&gt;query&lt;/a&gt; or a list of queries and accumulates a list of records whose fields match the query or queries.&lt;/p&gt;

&lt;p&gt;A query is nothing more than a dictionary where the mapping between the keys and values represents the query condition. For instance, suppose I wanted to get Blastoise’s record with a query instead of &lt;code&gt;get&lt;/code&gt;, here is how it would work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Blastoise"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;blastoise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We accumulate all the records with &lt;code&gt;name&lt;/code&gt; equal to Blastoise.&lt;/p&gt;

&lt;p&gt;It is also possible to query based on inequalities. For instance, we can query for all Pokemon that weigh greater than 100kg and are less than 1 meter tall.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"weight?gt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"height?lt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can append “?gt” and “?lt” at the end of numerical fields to query for records with respective values greater than or less than a threshold. There are a lot more suffixes that can be added to the end of a query field, so I recommend reading the documentation for your specific use case (&lt;a href="https://docs.deta.sh/docs/base/sdk/#queries"&gt;Deta Base SDK&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let’s create an endpoint that will return Pokemon which are of a parameter type.&lt;/p&gt;



&lt;p&gt;“?contains” checks if a provided query element exists in the list associated with the field. To provide an example, if I wanted all the fire-type Pokemon, I would send a GET request to &lt;code&gt;/pokemon/type/Fire&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are 13 Pokemon returned from the above request.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a little overwhelming since this query will return all the fire-type Pokemon in our Base. Deta also provides us with the ability to limit the number of query results with &lt;a href="https://docs.deta.sh/docs/base/sdk/#example-using-buffer-pages-1"&gt;buffer&lt;/a&gt;. Let’s set the buffer arg in fetch to 2.&lt;/p&gt;

&lt;p&gt;Now, we only get two records back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--25p6vM9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2692/1%2AZ-BgZLjSFIdWVceL8tqY-Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25p6vM9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2692/1%2AZ-BgZLjSFIdWVceL8tqY-Q.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, by changing the &lt;code&gt;pages&lt;/code&gt; argument in &lt;code&gt;fetch&lt;/code&gt;, it is possible to spread the result data over multiple pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My primary goal with this writing was to shed greater light on a database that you can set up and work on in the blink of an eye. It took hardly much time to create the project and based on the above examples, CRUD and Querying are as simple as they can get. For these reasons, Deta Base is perfect for proof of concepts, serverless applications, hackathons, and many more situations and projects that require simplicity and speed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.deta.sh/"&gt;&lt;strong&gt;Deta (Home):&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;&lt;strong&gt;Flask:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.deta.sh/docs/base/sdk"&gt;&lt;strong&gt;Deta SDK:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bulbapedia.bulbagarden.net/wiki/Main_Page"&gt;&lt;strong&gt;Bulbapedia:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>database</category>
      <category>python</category>
    </item>
    <item>
      <title>21 Popular JavaScript Libraries Every Web Developer Should Know</title>
      <author>Kingsley Ubah</author>
      <pubDate>Sun, 18 Apr 2021 21:08:57 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/21-popular-javascript-libraries-every-web-developer-should-know-5746</link>
      <guid>https://dev.to/ubahthebuilder/21-popular-javascript-libraries-every-web-developer-should-know-5746</guid>
      <description>&lt;p&gt;The JavaScript ecosystem is huge and keeps fostering. Tons of libraries, frameworks and tools are being coded up and deployed in projects to make dynamic websites. While some are fizzling in demand and use, others are growing more popular.&lt;/p&gt;

&lt;p&gt;Below are 21 libraries/frameworks all JavaScript developers consider for their project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ANGULAR JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Us5bQYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3o67imxmhk3vhsro48.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Us5bQYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3o67imxmhk3vhsro48.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angularjs.org/"&gt;Angular&lt;/a&gt;  is one of the oldest JavaScript libraries till date. Wait, Angular is actually a Framework, not a Library. It allows you create single-paged, client-side web applications. Angular is written in TypeScript and backed by Google.&lt;br&gt;
Some of the popular companies who use Angular are Google (obviously), PayPal and iTunes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VUE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiwk51p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6fm2640x1czbmql4uta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiwk51p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6fm2640x1czbmql4uta.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very similar to React,  &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;  is a front-end framework used to create single-paged applications with the popular component-based architecture. The upside with using Vue is that you write smaller amount to code compared to other UI libraries. Vue JS is growing stronger by the day, and is getting adopted at a quick rate.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UNDERSCORE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKQBT_-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9taytn1v7noffxrzllna.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKQBT_-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9taytn1v7noffxrzllna.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://underscorejs.org/"&gt;Underscore&lt;/a&gt;  is a lower level JavaScript library. Lower level in that it’s very close to vanilla JavaScript. All it does is provide you with some helpers and tools to create web applications faster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BABYLON JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUpfGGQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um4jtiiq8jhtsrt1o1y3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUpfGGQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um4jtiiq8jhtsrt1o1y3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a confession to make; I really love the name of this particular library. &lt;br&gt;
For the game developers, this name might not be a new one.  &lt;a href="//babylonjs.com"&gt;Babylon&lt;/a&gt;  is a full fledged 3D video game engine for creating complex and web-based 3D Video games.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REACT &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvl36uAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldlmp7oaymphh0rqclf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvl36uAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldlmp7oaymphh0rqclf1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is probably the one you were all waiting for.  &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt;  is one of the most popular JavaScript library in existence. You see those similar and cool looking buttons, or perhaps those nice looking navigation bars, or some cool modals you just can’t stop marvelling at?&lt;br&gt;
Chances are they were all made with React. React is a component-based UI library which allows you create reusable UI elements (components) for your website.  It is used by many companies, including Facebook, of course.&lt;/p&gt;

&lt;p&gt;For those of you looking to learn React, &lt;a href="https://gumroad.com/a/834147443"&gt;HTML to React&lt;/a&gt; is a brilliant course to go from knowing just HTML to knowing React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EMBER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB3tEfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9c3jdxlf87uob13e5sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB3tEfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9c3jdxlf87uob13e5sm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emberjs.com/"&gt;Ember&lt;/a&gt;  is a powerful JavaScript framework which helps developer to create websites without having to worry about the nitty-gritty of the process.&lt;br&gt;
It includes everything you need to create rich UIs and combine them to form a powerful and highly scalable website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BACKBONE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kUFwp7Uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxi71juwppnisfxz0tls.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kUFwp7Uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxi71juwppnisfxz0tls.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another cool name!&lt;br&gt;
 &lt;a href="s&amp;lt;br&amp;gt;%0Ahttp://backbonejs.org/"&gt;Backbone.js&lt;/a&gt;  is a very simple and straightforward JavaScript library and framework. Its biggest distinguishing feature is the fact that it can fit within a single JavaScript file. Backbone is a great option for those looking to build simple websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CLIPBOARD JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uztpPzun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ivkt0azu4zyzrh8qabk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uztpPzun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ivkt0azu4zyzrh8qabk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As its name already implies,  &lt;a href="https://clipboardjs.com/"&gt;Clipboard&lt;/a&gt;  allows you copy data from your site right off the bat! No need to install any additional dependency. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BABEL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnt3kqRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oosdzem1c08l7lwwhl4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnt3kqRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oosdzem1c08l7lwwhl4k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of us may be already be aware of the story of the tower of Babel in the bible. Creating a language division amongst the builders to cut of communication and create discordance. &lt;br&gt;
Well this tool is the solution to that problem, in the context of JavaScript. When creating code, browser compatibility is open an issue to consider. Older web browsers tend to be dropped in favour of newer ones, but not all users update. There are still machines and devices out there that are running old versions of web browsers.&lt;br&gt;
Babel is a JavaScript compiler which compiles your JS code to ES5 compliant nature. This means your code can run on new browsers such as Edge as well as older ones, such as IE 9.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SVELTE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjMJcYfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr6ayiac91wfogkk7m8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjMJcYfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr6ayiac91wfogkk7m8x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Svelte is a complete new approach to building user interfaces. While traditional frameworks like React and Vue are browser based, Svelte shifts that work into a compile step that happens when you build your app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LETTERING JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3UvFBSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9g0fjy3o4d37yjqwe2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3UvFBSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9g0fjy3o4d37yjqwe2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://letteringjs.com/"&gt;Lettering&lt;/a&gt;  is an interesting JavaScript library for texts. You can style and layout individual texts on your page, including implementing some cool transitions and animations. Lettering JS is a jQuery plug-in. Hence, it requires jQuery to work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CHARTIST JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcRlh5lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie8xb5rifpgfr2j66z8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcRlh5lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie8xb5rifpgfr2j66z8e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ah, here is something for the data analysts!&lt;/em&gt;&lt;br&gt;
 &lt;a href="http://gionkunz.github.io/chartist-js/"&gt;Chartist&lt;/a&gt;  is a nice JavaScript library for creating simple, responsive and customizable charts for your website. Chartist uses SVG to render them; hence, your charts can also obey custom CSS rules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DROPZONE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X8UVUQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojvoa77etqz95jkwxacd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X8UVUQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojvoa77etqz95jkwxacd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.dropzonejs.com/"&gt;Dropzone&lt;/a&gt;  allows you implement “drag and drop” features on your website. It is also highly customizable with custom code. It’s lightweight, doesn’t depend on any other library (like jQuery). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;THREE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFR01VFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs9vmy6nmj1ssxl3wupt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFR01VFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs9vmy6nmj1ssxl3wupt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aha! Something to make some cool, eye-catching stuff.&lt;/em&gt;&lt;br&gt;
 &lt;a href="https://threejs.org/"&gt;Three js&lt;/a&gt;  is an immensely popular JavaScript 3D library for creating visual effects on your website. It is a great option for those looking to create 3D visualizations without the need for heavy-duty game engines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jQUERY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mV9B2xPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9m3itbrjnmn0h0smzo70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mV9B2xPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9m3itbrjnmn0h0smzo70.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;  is one of the oldest yet most popular JavaScript libraries still in existence. You’ve probably already heard of the DOM, which stands for Document Object Model. jQuery is perfect and quite reputed for manipulating the DOM. You can also dothings like  HTML events, animations and effects, CSS manipulation, and AJAX calls. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LODASH&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZBJ4bne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kblqxhradrsamy8k4d4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZBJ4bne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kblqxhradrsamy8k4d4x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you think of this library, you think of utilities.  &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;  is an immensely useful library which contains and provides utility functions which you call into your code to perform a specific task. Saving your time you would have wasted in writing it yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PIXI JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHEevDu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgn4qzhnvkykzy3olr8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHEevDu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgn4qzhnvkykzy3olr8o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Named after the popular movie animation studio Pixar,  &lt;a href="https://www.pixijs.com/"&gt;Pixi&lt;/a&gt;  is an open source 2D engine used to create beautify, eye-catching animations on your website. Pixi uses WebGL, and uses HTML canvas if the former is not supported.&lt;br&gt;
PixiJS is made of multiple consumable components that can be installed in your project with NPM/Yarn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;D3 JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQree49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsl4q9wdjx5dt3k4nqia.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQree49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsl4q9wdjx5dt3k4nqia.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt;  is a JavaScript library for manipulating documents based on the nature of data received.&lt;br&gt;
It stands for “Data Driven Documents”, which kind of explains its task. The library uses pre-built functions to select DOM elements, create SVG objects, style them and add transitions and other effects. These objects can also be styled using pure CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOCKET.IO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-QfHo5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4w39wc2zuv9fq1pue54.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-QfHo5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4w39wc2zuv9fq1pue54.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should know that by default, the connection between the browser and web server is closed once the server responds with data. So how do you keep the connection open so data can seamlessly flow bi-directionally without having to make new requests in the process?&lt;br&gt;
Socket.io, based on web sockets, is a JavaScript libabry which enables event-based two-way communication between the browser and the web server. It utilizes a node.js server.&lt;br&gt;
&lt;a href="https://socket.io/"&gt;https://socket.io/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MATH JAX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfyMiqoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/321zbut9fny7bt182l34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfyMiqoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/321zbut9fny7bt182l34.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ah, good old maths.&lt;/em&gt;&lt;br&gt;
As its name suggests,  &lt;a href="https://www.mathjax.org/"&gt;MathJAX&lt;/a&gt;  simply allows you to include mathematics in your pages. This includes special math notations and symbols. MathJax automatically formats the mathematical symbols and equations that you enter in HTML and problem components using LaTeX notation into beautiful math. A MathJax equation can appear with other text in the paragraph (inline) or on its own dedicated line (block).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MODERNIZR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwVWe92l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r7lli7bg4gxatinm82d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwVWe92l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r7lli7bg4gxatinm82d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://modernizr.com/"&gt;Modernizr&lt;/a&gt;  is a libary of tests. Features like CSS transform, web sockets, CSS transitions and animations can be tested on the browser using special properties from Modernizr. &lt;br&gt;
There are over 260 features which can be tested using this utility.&lt;/p&gt;

&lt;p&gt;Which of these are your favourite? Let me know in the comments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P/S&lt;/em&gt;: I recently launched my Web Development Beginners Guide eBook for Absolute Beginners. Check it out here - &lt;a href="https://gumroad.com/l/WebDevBeginners"&gt;Web Development - The Beginners Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Free Games For Your Computer in 2021</title>
      <author>TechBrandUp</author>
      <pubDate>Sun, 18 Apr 2021 21:07:43 +0000</pubDate>
      <link>https://dev.to/techbrandup/free-games-for-your-computer-in-2021-2njg</link>
      <guid>https://dev.to/techbrandup/free-games-for-your-computer-in-2021-2njg</guid>
      <description>&lt;p&gt;There are many reasons why you should get free downloads of software games. The reason for that is that these types of games have often been called demos or test versions of full versions which can cost quite a bit of money. If you just spend a few minutes downloading games and trying them out, you can actually save quite a bit of money while playing them. That means the games are often free downloads and will be quite enjoyable while playing them as well.&lt;/p&gt;

&lt;p&gt;Some people do not think of the concept of games being free as a benefit of downloading software games. For those individuals, they might consider it something like playing an older version of a game that costs a lot of money to purchase in order to play &lt;a href="https://techbrandup.blogspot.com/2021/01/pubg-mobile-kr-2021-free-download.html"&gt;Pubg for PC - techbrandup&lt;/a&gt;. However, if you consider the fact that this is one of the best ways you can obtain these software games at no cost then you will see how it can be quite a benefit. In fact, it can help you save a lot of money while you are playing the games. It also means you can play on as many computers as you like without having to pay for each one separately.&lt;/p&gt;

&lt;p&gt;There are many different types of software games that can be downloaded. For example, you can get games that are based on movies such as James Bond or Indiana Jones as well as board games, word games, puzzles, and so forth. You can get games that are entirely for single players such as solitaire. No matter what type of game you want to download, you will find it is relatively easy to find something that you like. You can usually find everything you need right there on the World Wide Web at very reasonable prices.&lt;/p&gt;

&lt;p&gt;What types of games are available as free downloads? There are quite a few great choices. For example, action games such as Mario and Pac-Man are very popular. They are among the most well-known games on the market and are always available as free downloads from the Internet. In addition, countless classic board games can be found as free downloads.&lt;/p&gt;

&lt;p&gt;A good number of these software games are programmed in a way that makes them very easy to play. This is why they are so popular. They offer you the option of playing them with a gamepad of some kind or with your keyboard. Sometimes you can find them with a mouse as well. The reason why they are so popular is that they offer you a way to play the software without having to purchase any additional hardware.&lt;/p&gt;

&lt;p&gt;How do you know if software games are going to be what you need? That is a question you will need to answer before you start looking for them. For example, if your computer is slow, then you probably will not be interested in downloading games. However, if your computer is running so fast that you frequently have to reboot it, then you may find yourself very interested in software games. However, you should look at your own personal preferences first.&lt;/p&gt;

&lt;p&gt;There are many sites that offer a free download of games for your computer. Often times you will find these offered for different software titles. This is very convenient because you can choose which ones you would like to download and save the file to your computer.&lt;/p&gt;

&lt;p&gt;Final Words&lt;/p&gt;

&lt;p&gt;Software games are a great download because you can download them absolutely free and download as many as you want to visit &lt;br&gt;
&lt;a href="https://techbrandup.blogspot.com/"&gt;this website&lt;/a&gt;. Many of them are even free trials so that you can try them out before purchasing them. This is a very good way to get software games for free.&lt;/p&gt;

</description>
      <category>games</category>
      <category>freegames</category>
      <category>pubgkr</category>
      <category>techbrandup</category>
    </item>
    <item>
      <title>My Top 5 Methods To Develop UIs Faster in ReactJS</title>
      <author>Abdul Basit</author>
      <pubDate>Sun, 18 Apr 2021 20:52:55 +0000</pubDate>
      <link>https://dev.to/abdulbasit313/my-top-5-methods-to-develop-uis-faster-in-reactjs-4blg</link>
      <guid>https://dev.to/abdulbasit313/my-top-5-methods-to-develop-uis-faster-in-reactjs-4blg</guid>
      <description>&lt;p&gt;In an IT setup when a team comes up with a product idea, the first thing they do is the paperwork. Yes, they go through some documentation like feasibility reports, use cases, offering features, market research, and other related aspects of it.&lt;/p&gt;

&lt;p&gt;After all the documentation stuff is done, they ask designers to design the application’s UI. As soon as the design is ready, frontend developers are asked to develop the UI of the app while the backend developer works on its APIs.&lt;/p&gt;

&lt;p&gt;So being a frontend developer, let me walk you through the top 5 methods that I keep in mind and personally follow them to build UIs faster in ReactJS app, it may include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Method#1 Analyze The Design&lt;/li&gt;
&lt;li&gt;Method#2 Build Site Data&lt;/li&gt;
&lt;li&gt;Method#3 Set State&lt;/li&gt;
&lt;li&gt;Method#4 Integrate ESLint&lt;/li&gt;
&lt;li&gt;Method#5 Integrate Storybook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#method1-analyze-the-design-understand-the-designing-stuff"&gt;
  &lt;/a&gt;
  Method#1: Analyze The Design, Understand The Designing Stuff
&lt;/h2&gt;

&lt;p&gt;In this method, you have to analyze the design and think of various patterns to build the app’s UI. I spend at least 30 minutes analyzing and think of different strategies and patterns I can apply. I analyze the design based on three things, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Searching For Wrappers&lt;/strong&gt; - What do I mean by wrapper here? &lt;em&gt;Wrapper&lt;/em&gt; is something that takes &lt;code&gt;children&lt;/code&gt; as &lt;code&gt;props&lt;/code&gt;. Let's say if we have a &lt;em&gt;modal&lt;/em&gt; on 3 three different places in our app that has the same design for &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;close icon&lt;/em&gt; and &lt;em&gt;margin&lt;/em&gt;, &lt;em&gt;paddings&lt;/em&gt;.
For that, I will make a &lt;code&gt;ModalWrapper&lt;/code&gt; component. Similarly, we can make a wrapper for cards.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me walk you through one more example.&lt;/p&gt;

&lt;p&gt;Let's say we have the same header and footer on each screen, so we make a layout wrapper something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Footer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reusable Components&lt;/strong&gt; - My second step is, I try to note down what I can reuse in my application. For example, &lt;em&gt;buttons&lt;/em&gt;, &lt;em&gt;input&lt;/em&gt; with &lt;em&gt;labels&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt;, etc. The main idea of noting down all the reusable components is to create consistency and save time by not writing the same line of code again and again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reusable components are one that changes via &lt;code&gt;props&lt;/code&gt;. (Wrappers are also reusable components but it takes children so l call it wrapper)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Understanding The Grid System&lt;/strong&gt; - Designers build site using a grid. It will help us to make site responsive easily when it comes to smaller devices. Understanding the grid system is really
important for responsiveness.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to make site responsive, we use &lt;em&gt;flex&lt;/em&gt;, &lt;em&gt;grid&lt;/em&gt;, or &lt;em&gt;width in percentages&lt;/em&gt; for responsiveness depends on the scenario.&lt;/p&gt;

&lt;p&gt;This is the only method that is going to take much of our time among all other methods. But, there is a reason for it. It sets the roadmap throughout the app and helps us structure our code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method2-build-site-data-use-the-dummy-data"&gt;
  &lt;/a&gt;
  Method#2: Build Site Data, Use The Dummy Data
&lt;/h2&gt;

&lt;p&gt;While building &lt;code&gt;UIs&lt;/code&gt; we often come across a list of &lt;code&gt;data&lt;/code&gt;, since we don't have &lt;code&gt;APIs&lt;/code&gt; ready, so in order to keep the process smooth and fast, I create the &lt;em&gt;dummy data&lt;/em&gt; and &lt;code&gt;map&lt;/code&gt; it, where needed. And also, put it in a new folder created by the name &lt;strong&gt;site-data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we will be integrating APIs, we will be deleting folders inside &lt;code&gt;site-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But how you are gonna manage the &lt;strong&gt;site-data&lt;/strong&gt;, it’s totally up to your choice!&lt;/p&gt;

&lt;p&gt;Below is the snippet of how I build the &lt;em&gt;site data&lt;/em&gt; folder for an example data (on the left) that I often encounter practically when designing the UIs:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SaLwhunm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb9tmkqv5tcaqh3hfp8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SaLwhunm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb9tmkqv5tcaqh3hfp8u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an object there something like this and export it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Phone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234567&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234567&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;....&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;employess&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This practice helps you to make your components clean and having a light version of CMS (if you like) for your app that can be easily managed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method3-set-the-state-dealing-with-overtime-data-changes"&gt;
  &lt;/a&gt;
  Method#3: Set The State, Dealing With Overtime Data Changes
&lt;/h2&gt;

&lt;p&gt;So whenever you come across a part of the design of an app that has to be interactive, especially using forms, checkboxes, dropdown, etc. Always try to set up a state for them to get the changed data from the users.&lt;/p&gt;

&lt;p&gt;In the case of &lt;code&gt;forms&lt;/code&gt;, I use &lt;code&gt;console.log&lt;/code&gt; for all the &lt;em&gt;form's values input&lt;/em&gt; on the &lt;code&gt;submit&lt;/code&gt; button. It has been really super helpful and fast when I have to integrate the APIs.&lt;/p&gt;

&lt;p&gt;Here is the example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserProfile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;oldPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;newPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;
    &lt;span class="nx"&gt;setUserProfile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSaveProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userProfile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userProfile&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#method4-integrate-eslint-consistency-is-the-key"&gt;
  &lt;/a&gt;
  Method#4: Integrate ESlint, Consistency Is The Key
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Eslint&lt;/em&gt; really helps us to make our code consistent. They don't let us have unused &lt;code&gt;imports&lt;/code&gt; or &lt;code&gt;variables&lt;/code&gt; and force us to follow consistency all over the app. If single quotes then we have to use single quotes all over the app for &lt;em&gt;Javascript&lt;/em&gt; and double quotes for &lt;em&gt;attributes&lt;/em&gt; like &lt;code&gt;className&lt;/code&gt; and &lt;code&gt;props&lt;/code&gt; etc. &lt;/p&gt;

&lt;p&gt;Most of the time, I use the &lt;em&gt;Airbnb ESlint&lt;/em&gt; code convention to reduce the number of errors on the spot while saving a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method5-integrate-storybook-fast-visual-testings"&gt;
  &lt;/a&gt;
  Method#5: Integrate Storybook, Fast Visual Testings
&lt;/h2&gt;

&lt;p&gt;Storybook is great when we are building themes. It helps us build and test our component in isolation, by changing its props and responsiveness. It can serve other purposes as well, such as maintaining a component library, series of same designed components, sharing it within the team to get feedback, and so on.&lt;/p&gt;

&lt;p&gt;When to use Storybook?&lt;/p&gt;

&lt;p&gt;It really depends on requirements and kind of project we are working on. I don't use storybook for small apps or landing pages that consist of couple of screens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-sum-up"&gt;
  &lt;/a&gt;
  To Sum Up…
&lt;/h3&gt;

&lt;p&gt;Each of these methods has been practically implemented by myself and has been proven useful to build the UIs faster in ReactJS.&lt;/p&gt;

&lt;p&gt;I hope this article will help you to build UIs in ReactJS. If my experience and knowledge that I’ve shared helped you in any way, please comment below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Manage Multiple SSH Key Pairs</title>
      <author>Joseph Midura</author>
      <pubDate>Sun, 18 Apr 2021 20:49:28 +0000</pubDate>
      <link>https://dev.to/josephmidura/how-to-manage-multiple-ssh-key-pairs-1ik</link>
      <guid>https://dev.to/josephmidura/how-to-manage-multiple-ssh-key-pairs-1ik</guid>
      <description>&lt;p&gt;I recently overheard someone say that he uses the same SSH key for all of his accounts, which is a bad idea from a security perspective. Additionally, Bitbucket &lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/"&gt;recommends&lt;/a&gt; users replace their SSH keys once a year for security. When I first started managing multiple SSH key/password combinations on my personal machine, I learned best practices from a variety of sources. I’m writing this information down in one place for the benefit of others. &lt;/p&gt;

&lt;p&gt;My current OS of choice is MacOS, but these instructions should work for any *nix system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first"&gt;
  &lt;/a&gt;
  First
&lt;/h3&gt;

&lt;p&gt;Open terminal to generate a new SSH key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-keygen -t rsa -f key_name -b 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is what each flag means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-t specifies the algorithm that makes the key. &lt;/li&gt;
&lt;li&gt;-f specifies a custom name for the key, and an alternate location if it’s in the form of a path. &lt;/li&gt;
&lt;li&gt;personal_key is the name of the key. Make this as specific as possible.&lt;/li&gt;
&lt;li&gt;-b specifies how many bits long the key will be. One of the servers I SSH into requires a 4096 bit key, so I use that for all of my keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I always use a key name that is specific and makes sense to me. This makes key management easier in the long term.&lt;/p&gt;

&lt;p&gt;You should use a passphrase when prompted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second"&gt;
  &lt;/a&gt;
  Second
&lt;/h3&gt;

&lt;p&gt;When you complete the first step two files are created: key_name and key_name.pub. The first is your private key and the second is your public key. &lt;br&gt;
Create a known_hosts file for each account you have because it makes diagnosing issues easier when you have multiple keys. Ideally the name of this file is similar enough to the key name that you aren’t confused later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch known_hosts_keyname 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#third"&gt;
  &lt;/a&gt;
  Third
&lt;/h3&gt;

&lt;p&gt;The config file sets options for each host. Create a comment using the # at the start of a line to label each host. I label each key for visual neatness and to avoid confusion as the list of keys gets longer over time. Create the config file if it doesn’t already exist and then open it for editing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--quFlfXxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/josephmidura/markdown/blob/main/multiple-ssh-keys/config.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--quFlfXxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/josephmidura/markdown/blob/main/multiple-ssh-keys/config.png" alt="alt text" title="config"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here is the breakdown of what each line means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The URL on the HostName line is the base URL where the repository resides. For example, if you have a personal account on github with personal projects, the URL will be github.com. &lt;/li&gt;
&lt;li&gt;Host is a pattern matcher that is used to differentiate between these sets of configurations. Keep it the same as the HostName so it matches hosts in connections correctly without additional specification. &lt;/li&gt;
&lt;li&gt;User for git based systems will be git. The value of User will be different if you connect to something else (i.e.  ec2-user for connecting to an Amazon AWS EC2 instance)&lt;/li&gt;
&lt;li&gt;IdentityFile asks for the location of the identity key we made. Type in the respective path here.&lt;/li&gt;
&lt;li&gt;UserKnownHostsFile specifies an exact location to store all hosts you connect to when you’re using that profile. Provide the respective paths here and choose a unique known hosts file name (see step 2 above) so that troubleshooting and key maintenance over time is easier.&lt;/li&gt;
&lt;li&gt;IdentitiesOnly specifies that only the keys provided must be used to connect to a host, even if another service like the ssh-agent offers a key for use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fourth"&gt;
  &lt;/a&gt;
  Fourth
&lt;/h3&gt;

&lt;p&gt;Add keys to ssh agent if passphrase was used. Skip to the next step if you didn't use a passphrase. Start the ssh agent in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eval "$(ssh-agent -s)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add &lt;strong&gt;private&lt;/strong&gt; keys to the agent in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-add -K path_to_private_keyname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the -K option works only on mac for keychain access.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fifth"&gt;
  &lt;/a&gt;
  Fifth
&lt;/h3&gt;

&lt;p&gt;Add &lt;strong&gt;public&lt;/strong&gt; Keys to clipboard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat key_name.pub | pbcopy 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, paste the public key into the appropriate account&lt;/p&gt;

&lt;p&gt;With multiple keys, I have the option of creating new keys as needed to keep each connection secure. If I have a single compromised key, then I only worry about changing that single key. My config file then makes it easy for me to use multiple keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/"&gt;Bitbucket documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;Github documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>ssh</category>
    </item>
    <item>
      <title>Let's go beyond console.log statements. (There is more to console object than what meets the eye. )</title>
      <author>Rishabh Jain</author>
      <pubDate>Sun, 18 Apr 2021 20:36:38 +0000</pubDate>
      <link>https://dev.to/jrishabh55/let-s-go-beyond-console-log-statements-there-is-more-to-console-object-that-meets-the-eye-5536</link>
      <guid>https://dev.to/jrishabh55/let-s-go-beyond-console-log-statements-there-is-more-to-console-object-that-meets-the-eye-5536</guid>
      <description>&lt;p&gt;&lt;code&gt;consoel.log()&lt;/code&gt; is one of the most important and early learned debugging tool that we have when working with &lt;code&gt;javascript&lt;/code&gt;. The tool become one of the most essential part of the development. Most developers start their debugging with &lt;code&gt;console.log()&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Today in this tutorial let's go beyond the &lt;code&gt;console.log()&lt;/code&gt; and learn what more &lt;code&gt;console&lt;/code&gt; object can do for us and increase our productivity/proficiency with console. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#different-type-of-logging"&gt;
  &lt;/a&gt;
  Different type of logging.
&lt;/h1&gt;

&lt;p&gt;With &lt;code&gt;console&lt;/code&gt; object we have more than just &lt;code&gt;log&lt;/code&gt; statements, some of them are &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consolewarn"&gt;
  &lt;/a&gt;
  console.warn()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.warn()&lt;/code&gt; is very useful when you wanna signify that something is not right with the code but its not bad enough to be classified as error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_A9YTFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc54ve4k3tx3cs444lre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_A9YTFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc54ve4k3tx3cs444lre.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleerror"&gt;
  &lt;/a&gt;
  console.error()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.error()&lt;/code&gt; is a useful statement when we wanna signifies that something is broken in our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is an error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6gTZbFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1db9y6gxjwt86fxt3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6gTZbFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1db9y6gxjwt86fxt3h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoleassert"&gt;
  &lt;/a&gt;
  console.assert()
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.assert()&lt;/code&gt; is a conditional error printer which can be helpful in verity of situations. it accepts 2 parameters 1st of which is our condition. If &lt;code&gt;true&lt;/code&gt; the error message will not print. if &lt;code&gt;false&lt;/code&gt; error message will be logged to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This error message will show up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This error message will not show up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibCwoUx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/784zj23rx36jyttkst8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibCwoUx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/784zj23rx36jyttkst8f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consolecount-consolecountreset"&gt;
  &lt;/a&gt;
  console.count, console.countReset
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.count()&lt;/code&gt; is one of the more important functions that is provided by &lt;code&gt;console&lt;/code&gt; object. It can be used as counter that is incremented by one every time its been called and &lt;code&gt;console.countReset()&lt;/code&gt; can be used to reset the counter.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can use it to count a number of iterations in a loop. &lt;/li&gt;
&lt;li&gt;We can use it to see how many times a function has been called.&lt;/li&gt;
&lt;li&gt;etc
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculateSomeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;calculateSomeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter x has been reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJFgK0Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxpzxpnvf2yxaks7rjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJFgK0Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxpzxpnvf2yxaks7rjr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIe5mHjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9muh128cpcen30vvj7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIe5mHjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9muh128cpcen30vvj7x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoletime-consoletimeend"&gt;
  &lt;/a&gt;
  console.time(), console.timeEnd()
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt; are very important functions provided to us by &lt;code&gt;console&lt;/code&gt; object. The two functions can be used to start and stop a timer. The timer can be helpful in performance tests and more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;forLoopTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;forLoop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;forLoopTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#consolegroup-consolegroupend"&gt;
  &lt;/a&gt;
  console.group(), console.groupEnd()
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt; are fairly useful tools when you want to encapsulate some logs together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqDeBn9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxetvtladbmxo7eusi02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqDeBn9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxetvtladbmxo7eusi02.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's go crazy and nest them for helping in nesting we can pass labels in each group which will act as our identifiers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tiAP-iFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8s30g3z4fqs57valq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tiAP-iFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8s30g3z4fqs57valq2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoletable"&gt;
  &lt;/a&gt;
  console.table()
&lt;/h1&gt;

&lt;p&gt;Since the day i found out about &lt;code&gt;console.table()&lt;/code&gt; i fell in love with it. Have an array you need to look at in a good symmetrical way?, have an object ? &lt;code&gt;console.table()&lt;/code&gt; have you covered. It expects two arguments  &lt;code&gt;tableData&lt;/code&gt; and &lt;code&gt;tableColumn&lt;/code&gt; . The first argument &lt;code&gt;tableData&lt;/code&gt; is required but 2nd argument is optional and specifies which columns do you want to display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rishabh Jain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;designation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sen Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7aRo-lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbjcbv00qqocfkrmxya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7aRo-lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbjcbv00qqocfkrmxya.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's say from the above example we only wanna show &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rishabh Jain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;designation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sen Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHYeZPab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/490e9s1ej7lzpk43dwkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHYeZPab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/490e9s1ej7lzpk43dwkb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoletrace"&gt;
  &lt;/a&gt;
  console.trace()
&lt;/h1&gt;

&lt;p&gt;A lot of times it happens that we need to know where a specific function is called or we need to know where a function is. &lt;code&gt;console.trace()&lt;/code&gt; can be extremely useful when you wanna know when your functions are being called. You can also pass an optional label to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myNewHOF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;myNewHOF&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXXXrCLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nqcgog9kgztib74yjzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXXXrCLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nqcgog9kgztib74yjzl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#format-your-output"&gt;
  &lt;/a&gt;
  Format your output
&lt;/h1&gt;

&lt;p&gt;With this trick you can style your output the way you want it to.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Specifier&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;Formats the value as a string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%i or %d&lt;/td&gt;
&lt;td&gt;Formats the value as an integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;Formats the value as a floating point&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;Formats the value as an expandable DOM element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%O&lt;/td&gt;
&lt;td&gt;Formats the value as an expandable JS Object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;Applies CSS style rules to the output string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%c Lets change this to cool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;font-weight: bold; color: blue; background: cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFpdifrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efgz1u0apg1i9fs4aj2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFpdifrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efgz1u0apg1i9fs4aj2z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did i miss something?, Let me know in the comments below...&lt;/p&gt;

&lt;p&gt;Thank you for reading the article. Please let me know in comments how can i improve this and what else do you want me to write about.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What are metadata and meta tags</title>
      <author>Magda Rosłaniec</author>
      <pubDate>Sun, 18 Apr 2021 19:53:52 +0000</pubDate>
      <link>https://dev.to/makneta/what-are-metadata-and-meta-tags-3c3</link>
      <guid>https://dev.to/makneta/what-are-metadata-and-meta-tags-3c3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-metadata"&gt;
  &lt;/a&gt;
  What is metadata?
&lt;/h2&gt;

&lt;p&gt;Metadata is data about data. It means that it's usually a short description or summary that describes the content. &lt;/p&gt;

&lt;p&gt;When we are learning HTML we usually omit that part as not so important because it is something we can't see on our websites. But it can be read by search engines so metadata is important for SEO purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-add-metadata-to-our-websites"&gt;
  &lt;/a&gt;
  How do we add metadata to our websites?
&lt;/h2&gt;

&lt;p&gt;The place for metadata is in the head of our HTML document. There, we're supposed to add Meta Tags. &lt;/p&gt;

&lt;p&gt;When we use code editors with Emmet, we usually can produce the skeleton of our HTML file typing only !, so we often don't think about meta tags. We already have things like the character set used in the page (charset tag), the version of Internet Explorer (http-equiv="X-UA-Compatible", content="IE=edge") and set the viewport to the device-with that helps with making our website responsive.&lt;/p&gt;

&lt;p&gt;Let's look at the file produced with Emmet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have the title tag there. Always remember to add your title. For SEO purpose it is good to start the title from a keyword but it shouldn’t be overloaded with keywords. The length of the title should be less than 60 characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-other-meta-tags-can-we-use"&gt;
  &lt;/a&gt;
  What other meta tags can we use?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;description&lt;/strong&gt; - it’s a summary of your page, you can write to your users to encourage them to click, you can use keywords here as well as add an offer or a discount. &lt;br&gt;
&lt;strong&gt;author&lt;/strong&gt; - here you can add the author of the website&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;meta name="description" content="This is the description of a site that would be seen in the google search"&amp;gt;
 &amp;lt;meta name="author" content="Your name"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meta tags are not only important for SEO purposes but also to prepare nice shareable social media objects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prepare-nice-social-media-cards-using-meta-tags"&gt;
  &lt;/a&gt;
  How to prepare nice Social Media cards using Meta Tags?
&lt;/h2&gt;

&lt;p&gt;A few years ago Facebook introduced Open Graph meta tags. Thanks to them we can control how URLs of our website are displayed on Social Media. &lt;/p&gt;

&lt;p&gt;Open Graph tags has got &lt;strong&gt;og:&lt;/strong&gt; before tag’s property&lt;/p&gt;

&lt;p&gt;Mostly used tags are:&lt;br&gt;
&lt;strong&gt;og:title&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=”og:title” content=”Title of the content” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;og:url&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=”og:url” content=”https://yourwebsite.com” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;og:image *&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=”og:image” content=”https://yourwebsite.com/photo-link.png” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;og:type *&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=”og:type” content=”article or website” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;og:description&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=”og:description” content=”description you want to have on the social media card” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding those Open Graph tags you can check how your social media card will look like on this page: &lt;br&gt;
&lt;a href="https://www.opengraph.xyz/"&gt;https://www.opengraph.xyz/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>AWS Learn In Public Week 8, Elastic Beanstalk</title>
      <author>Harris Geo 👨🏻‍💻</author>
      <pubDate>Sun, 18 Apr 2021 19:53:31 +0000</pubDate>
      <link>https://dev.to/harrisgeo88/aws-learn-in-public-week-8-elastic-beanstalk-1hcb</link>
      <guid>https://dev.to/harrisgeo88/aws-learn-in-public-week-8-elastic-beanstalk-1hcb</guid>
      <description>&lt;p&gt;This has been an exciting week as London is starting to open up little by little. We agreed with the rest of my team at work that whoever wants can start to the office twice per week. Finally after a long winter of staying at home the whole day every day, we can start seeing some people again. The only downside of it is that it broke my routine of tweeting about AWS services.&lt;/p&gt;

&lt;p&gt;In this blog post we're going to talk about Beanstalk which is a really interesting service as it can glue the majority of the stuff you need when creating an environment. I don't understand why not everyone uses it. &lt;/p&gt;

&lt;p&gt;Definitely once I finish this project and get my certification this will be one of the first services that I'm going to dive deep into it. Without further ado let's check it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-beanstalk"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1381582874453942272"&gt;AWS Beanstalk&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  What is AWS Elastic Beanstalk?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A platform as a service for deploying applications to AWS&lt;/li&gt;
&lt;li&gt;It is a layer for configuring how to use other services like EC2, Auto Scaling Groups, Load Balancers, RDS etc.&lt;/li&gt;
&lt;li&gt;Using Elastic Beanstalk is free but you only pay for the underlying resources&lt;/li&gt;
&lt;li&gt;Elastic Beanstalk is a managed service and can also be used for deployment strategies&lt;/li&gt;
&lt;li&gt;The idea behind it is that the developer is responsible for the code and Beanstalk for the infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#there-are-3-architecture-models"&gt;
  &lt;/a&gt;
  There are 3 architecture models
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Single Instance Deployment which is great for dev environments&lt;/li&gt;
&lt;li&gt;Load Balancer with Auto Scaling Groups which is the standard model for production web apps&lt;/li&gt;
&lt;li&gt;Auto Scaling Groups only which is mainly for analytics and workers services&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can version our applications to environments and promote them to the next environment until we reach production. We can customise these stages to whatever we want. e.g. dev - staging - prod. Rollback feature is also available&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-options"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1382320050892328967"&gt;Deployment options&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#all-at-once"&gt;
  &lt;/a&gt;
  All at once
&lt;/h3&gt;

&lt;p&gt;We have the "&lt;strong&gt;all at once&lt;/strong&gt;" option where you can deploy all instances in one go.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This option has downtime but it is the fastest way to deploy&lt;/li&gt;
&lt;li&gt;It is great for dev environments that require quick iterations and also there are no additional costs to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rolling"&gt;
  &lt;/a&gt;
  Rolling
&lt;/h3&gt;

&lt;p&gt;We have the &lt;strong&gt;rolling&lt;/strong&gt; option where slow update the current instances with new once until our application only contains the new code. Let's say our app has 4 instances. 2 of them are going to be updated (below capacity) with the new version and then the next 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rolling-with-additional-batches"&gt;
  &lt;/a&gt;
  Rolling with additional batches
&lt;/h3&gt;

&lt;p&gt;We have the &lt;strong&gt;rolling with additional batches&lt;/strong&gt; option. Here we use the same logic as before but instead of updating the current instances, we add a few extra. The deployment is longer, has small extra costs but is good for production&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immutable"&gt;
  &lt;/a&gt;
  Immutable
&lt;/h3&gt;

&lt;p&gt;We have the &lt;strong&gt;immutable&lt;/strong&gt; option where we spin up a complete new set of instances (double the amount in total) and once the new version is out and running, we terminate the old ones. This option has 0 downtime, is great for prod but is quite costly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blue-green-deployments"&gt;
  &lt;/a&gt;
  Blue / Green deployments
&lt;/h3&gt;

&lt;p&gt;Finally we have the &lt;strong&gt;blue / green deployment&lt;/strong&gt; option&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We create a new env with the new app version (green) and direct 10% of the traffic to it&lt;/li&gt;
&lt;li&gt;The old env (blue) will handle 90% of the traffic&lt;/li&gt;
&lt;li&gt;We setup weighted policies in Route53&lt;/li&gt;
&lt;li&gt;Once we are happy, Beanstalk can swap urls&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#beanstalk-under-the-hood"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1383032620066439172"&gt;Beanstalk under the hood&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's talk a bit more about how AWS Beanstalk works under the hood. It basically relies on AWS CloudFormation to provision any other AWS services (Infrastructure As Code). To do that we can define a .ebextensions folder inside which we provision any service we want&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-docker-with-beanstalk"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1383800508247277576"&gt;Running Docker with Beanstalk&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#single-docker-container"&gt;
  &lt;/a&gt;
  Single Docker Container
&lt;/h3&gt;

&lt;p&gt;Single Docker for simple setups where we run our app as a single Docker container.&lt;/p&gt;

&lt;p&gt;We provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Dockerfile&lt;/code&gt; which will be used to build and run our container&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; v1 file for existing images which can be in ECR or Dockerhub&lt;/li&gt;
&lt;li&gt;Uses EC2 under the hood&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#multi-docker-container"&gt;
  &lt;/a&gt;
  Multi Docker Container
&lt;/h3&gt;

&lt;p&gt;Multi Docker which runs multiple containers per EC2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will create and ECS cluster, EC2 instances for it, a Load Balancer in High Availability mode, task definitions and execution.&lt;/li&gt;
&lt;li&gt;It requires a &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; v2 config file at the root of the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multi Docker also uses the &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; v2 config file to generate the ECS task definition. We need to have our docker images prebuilt and stored in ECR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I really don't understand why not more people use Beanstalk. It really simplifies the whole deployment process and putting all the services together.&lt;/p&gt;

&lt;p&gt;On the surface this looks really really simple but Beanstalk is just the tip of the iceberg. Next week we are going to talk about CloudFormation and a little bit of Cloudfront.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>learninpublic</category>
      <category>beanstalk</category>
    </item>
    <item>
      <title>Dynamic Dimension React Container with Transition Effect - Part 2, Resize Observer</title>
      <author>AnxinYang</author>
      <pubDate>Sun, 18 Apr 2021 19:49:49 +0000</pubDate>
      <link>https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-part-2-resize-observer-5h18</link>
      <guid>https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-part-2-resize-observer-5h18</guid>
      <description>&lt;p&gt;In part one, we create a dynamic dimension container that can handle child elements with static dimensions.&lt;/p&gt;

&lt;p&gt;In this part, we are going to create a dynamic dimension container that can handle child elements that have dynamic dimension.&lt;/p&gt;

&lt;p&gt;In order to do that, we need use the Resize Observer API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-resize-observer-api"&gt;
  &lt;/a&gt;
  What is Resize Observer API?
&lt;/h3&gt;

&lt;p&gt;In short term, it's like the &lt;code&gt;onresize&lt;/code&gt; event that trigger when, instead of the browser viewport, a document dimension have changed.&lt;/p&gt;

&lt;p&gt;For more detail, please refer to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h3&gt;

&lt;p&gt;First, let's create a hook with Resize Observer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useResizeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRect&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="c1"&gt;//Clean up observer&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="c1"&gt;// Element has changed, disconnect old observer&lt;/span&gt;
    &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ResizeObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// inlineSize and blockSize in entry.borderBoxSize and contentBoxSize&lt;/span&gt;
      &lt;span class="c1"&gt;// inlineSize means height when write-mode is horizontal, and width when write-mode is vertical.&lt;/span&gt;
      &lt;span class="c1"&gt;// blockSize means width when write-mode is horizontal, and height when write-mode is vertical.&lt;/span&gt;
      &lt;span class="c1"&gt;// So, for the sake of simplicity, I will use getBoundingClientRect&lt;/span&gt;
      &lt;span class="nx"&gt;setRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// disconnect when component is unmounted&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You can use &lt;code&gt;inlineSize&lt;/code&gt; and &lt;code&gt;blockSize&lt;/code&gt; in &lt;code&gt;entry.borderBoxSize&lt;/code&gt; and &lt;code&gt;entry.contentBoxSize&lt;/code&gt;. However, they represent height or width depend on &lt;code&gt;write-mode&lt;/code&gt; of target element.&lt;/p&gt;

&lt;p&gt;And &lt;code&gt;entry.contentRect&lt;/code&gt; may be deprecated in future versions.&lt;/p&gt;

&lt;p&gt;Therefore, for the sake of simplicity, I will use getBoundingClientRect here.&lt;/p&gt;

&lt;p&gt;Now, let's use this hook in the container we created in &lt;a href="https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-47a9"&gt;part1&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DynamicContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useResizeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.3s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fit-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fit-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is a demo, try hover the mouse over the dropdown items.&lt;br&gt;
The dropdown item will change it's text to random length string when hovered.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hprsv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you all!&lt;/p&gt;

</description>
      <category>observer</category>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to MySQL replication</title>
      <author>Klim Markelov</author>
      <pubDate>Sun, 18 Apr 2021 19:12:19 +0000</pubDate>
      <link>https://dev.to/tutelaris/introduction-to-mysql-replication-97c</link>
      <guid>https://dev.to/tutelaris/introduction-to-mysql-replication-97c</guid>
      <description>&lt;p&gt;Hello, ultra devs! 👋🏻⚡️&lt;br&gt;
Today I would like to talk about Replication and how it works in MySQL.&lt;/p&gt;

&lt;p&gt;Let's start from the beginning. If you know what replication is, feel free to skip the next chapter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-replication"&gt;
  &lt;/a&gt;
  What is replication?
&lt;/h3&gt;

&lt;p&gt;Basically, a replication mechanism means storing some copy of data on multiple machines. &lt;em&gt;"How is it different from backups?"&lt;/em&gt; you may wonder. Replication is a bit more than that. When a backup is just a snapshot of the data in a certain time, replication helps you to not only keep the copy of the data in real-time ensuring availability but also facilitate the overload on the database providing both reading and writing to the client and therefore increase throughput. Also, replication helps you to distribute your data storage across the globe decreasing the response time for clients from different parts of the world.&lt;/p&gt;

&lt;p&gt;In this article, we will be talking about &lt;strong&gt;leader-based&lt;/strong&gt; replication, and to continue our journey into this world, it's required to introduce several terms:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Leader (master)&lt;/em&gt; – part of the replication system eligible to write and read from the database.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Follower (replica)&lt;/em&gt;  – part of the replication system eligible &lt;em&gt;only to read&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically, &lt;em&gt;leader&lt;/em&gt; is responsible for all inserts, updates, deletes, and once these changes go through the &lt;em&gt;leader&lt;/em&gt;, it transfers these changes to all its &lt;em&gt;followers&lt;/em&gt; that are responsible for reads and never writes.&lt;/p&gt;

&lt;p&gt;Here is a simple example of single-leader replication with two followers:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_mLINe07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pcwa3h4dw2fdqssu7jo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_mLINe07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pcwa3h4dw2fdqssu7jo.png" alt="Pic.1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-it-works-in-mysql"&gt;
  &lt;/a&gt;
  How it works in MySQL?
&lt;/h3&gt;

&lt;p&gt;Ok, now we know what replication is, but how it actually works in MySQL? How data got transferred from leader to followers and how MySQL keeps the consistency between them?&lt;/p&gt;

&lt;p&gt;Imagine the situation that dev.to is powered by MySQL. You just wrote the article and clicked on the &lt;strong&gt;Publish&lt;/strong&gt; button. Here is what happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data comes to the leader and get saved in the database;&lt;/li&gt;
&lt;li&gt;The leader saves data changes in the special file called &lt;strong&gt;binary log&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Follower copies changes in &lt;strong&gt;binary log (binlog)&lt;/strong&gt; to its own file called &lt;strong&gt;relay log&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Follower replays these changes from &lt;strong&gt;relay log&lt;/strong&gt; to its own data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p41VEOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rjg8cotgwpe2cpesq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p41VEOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rjg8cotgwpe2cpesq0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, to synchronize &lt;strong&gt;relay log&lt;/strong&gt; with leader's &lt;strong&gt;binary log&lt;/strong&gt;, MySQL starts a worker thread that is called &lt;em&gt;I/O follower thread&lt;/em&gt;. It's basically an ordinary client connection to the leader that starts reading its &lt;strong&gt;binary log&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Digging a bit into details, we can ask a quite reasonable question: in which format do &lt;strong&gt;binary log&lt;/strong&gt; and &lt;strong&gt;relay log&lt;/strong&gt; store the data?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#replication-types"&gt;
  &lt;/a&gt;
  Replication types
&lt;/h3&gt;

&lt;p&gt;Currently, MySQL supports two types of replication: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Statement-based replication;&lt;/li&gt;
&lt;li&gt;Row-based replication.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#statementbased-replication"&gt;
  &lt;/a&gt;
  Statement-based replication
&lt;/h4&gt;

&lt;p&gt;So, as it's clear from the name, &lt;strong&gt;statement-based replication&lt;/strong&gt; records the whole query that changed the state of the data in &lt;strong&gt;binlog&lt;/strong&gt;. So, when a follower decides to synchronize its data with the leader, it copies the query and replays it by executing this query and applying changes to its own data.&lt;/p&gt;

&lt;p&gt;This kind of replication is very easy to implement and has multiple advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It still works when the schema is different on the leader and the follower;&lt;/li&gt;
&lt;li&gt;It's easy to audit and debug;&lt;/li&gt;
&lt;li&gt;It requires not that much disk space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, with &lt;em&gt;great advantages comes great disadvantages&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Non-deterministic functions&lt;/em&gt;. With non-deterministic functions, it can come up with different data on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;. By non-deterministic functions I mean function like the following: &lt;code&gt;CURRENT_USER()&lt;/code&gt;, &lt;code&gt;RAND()&lt;/code&gt;, &lt;code&gt;IS_FREE_LOCK()&lt;/code&gt; and so on. Executing them first on &lt;strong&gt;leader&lt;/strong&gt; and then on &lt;strong&gt;follower&lt;/strong&gt; can lead to inconsistent data;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Performance penalty&lt;/em&gt;. Imagine if you execute the following query:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;post_statistics&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;statistics_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;without having an index on the &lt;code&gt;status&lt;/code&gt; field, and after pressing 'Enter' you just went for a tea (a hypothetical situation, I know, you probably drink coffee). The query got executed on &lt;strong&gt;leader&lt;/strong&gt;, consuming all available CPU, and then &lt;strong&gt;follower&lt;/strong&gt; picked up the baton, copied the query to its &lt;strong&gt;relay log&lt;/strong&gt;, and cheerfully ate all CPU as well;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Triggers and stored routies&lt;/em&gt;. Triggers and stored routines, as well as &lt;em&gt;Non-deterministic functions&lt;/em&gt;, can cause a lot of problems with different side-effects on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, &lt;strong&gt;Statement-based replication&lt;/strong&gt; has its own advantages, but big disadvantages. Therefore not every database supports this type of replication, but in the case of MySQL, up until &lt;strong&gt;MySQL 5.0&lt;/strong&gt;, this type of replication was the only one supported.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#rowbased-replication"&gt;
  &lt;/a&gt;
  Row-based replication
&lt;/h4&gt;

&lt;p&gt;Compare to &lt;strong&gt;Statement-based replication&lt;/strong&gt;, &lt;strong&gt;Row-based replication&lt;/strong&gt; stores the actual data changes in &lt;strong&gt;binary log&lt;/strong&gt;, but not the query. So, when a &lt;em&gt;follower&lt;/em&gt; replicates the data, it doesn't execute the query, but applies the changes to each record it was applied to on &lt;em&gt;leader&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's consider the advantages of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Less CPU intensive&lt;/em&gt;. If we execute the query, described in &lt;strong&gt;Statement-based replication&lt;/strong&gt; chapter, &lt;strong&gt;follower&lt;/strong&gt; does not replay this query, but copy the value and apply the change to its own data record. So, the query gets executed once and doesn't consume all available CPU;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Helps to find data inconsistency&lt;/em&gt;. Since &lt;strong&gt;Row-based replication&lt;/strong&gt; stores the changes only, when &lt;strong&gt;follower&lt;/strong&gt; replays these changes and tries to apply to the data that exists on &lt;strong&gt;leader&lt;/strong&gt; but doesn't exist on &lt;strong&gt;follower&lt;/strong&gt;, it throws the error. Meanwhile &lt;strong&gt;statement-based replication&lt;/strong&gt; proceeds with what it has and keeps the inconsistency hidden, complicating the ability to find the point of failure and fix it;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No non-deterministic behavior&lt;/em&gt;. Compare to &lt;strong&gt;statement-based replication&lt;/strong&gt;, if you execute the query that has &lt;em&gt;Non-deterministic functions&lt;/em&gt;, it ends up with the same result for both &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looks nice, that's what we were expecting from replication, right? But along with the advantages come disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;High disk space consumption&lt;/em&gt;. Yeah, we just talked about &lt;em&gt;Less CPU consuming&lt;/em&gt; for this replication, but this doesn't work for all queries. Imagine if you have the following statement:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'draft'&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'published'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Considering the fact, that the &lt;code&gt;posts&lt;/code&gt; table has about &lt;em&gt;1.000.000&lt;/em&gt; of &lt;em&gt;Published&lt;/em&gt; posts, this query becomes quite expensive, since it requires storing &lt;em&gt;1.000.000&lt;/em&gt; of changes in &lt;strong&gt;binary/replication log&lt;/strong&gt; files;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Does not allow different schemas&lt;/em&gt;. Sometimes it might be useful when you have different schemas on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt; (I don't know about these cases, but they definitely exist). As it was described above, &lt;strong&gt;row-based replication&lt;/strong&gt; throws an error in case of data inconsistency, caused by different schemas;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Statement is not included in the &lt;strong&gt;binary log&lt;/strong&gt;&lt;/em&gt;. It can be not a problem at all until you try to debug or audit what's going on and what query caused damage to your database. &lt;strong&gt;Row-based replication&lt;/strong&gt; makes it hard to analyze.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we are fluent in replication process language. Everything is clear. Hold on, on the picture of replication example, we can see one &lt;strong&gt;leader&lt;/strong&gt; and two &lt;strong&gt;followers&lt;/strong&gt;. Can we do things differently?🕵️‍♀️ &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mysql-supported-topologies"&gt;
  &lt;/a&gt;
  MySQL supported topologies
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#singleleader-replication"&gt;
  &lt;/a&gt;
  Single-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KfreKPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/481z07e9as3fxomjn2gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KfreKPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/481z07e9as3fxomjn2gu.png" alt="Single-leader topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This type of replication is the most common one. It is useful when you have a lot of reads but not that many writes. You can distribute users reads among &lt;strong&gt;followers&lt;/strong&gt; load-balancing them and therefore providing better response time. With this replication topology, you can easily add one more &lt;strong&gt;follower&lt;/strong&gt; to it. Also, this topology prevents a lot of problems that multiple leaders topology have (will be described in &lt;em&gt;Leader-leader replication&lt;/em&gt;), since it has only one &lt;strong&gt;leader&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#leaderleader-replication"&gt;
  &lt;/a&gt;
  Leader-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0SfY08K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uge6q3vos5g12bkaomel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0SfY08K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uge6q3vos5g12bkaomel.png" alt="Leader-leader replication"&gt;&lt;/a&gt;&lt;br&gt;
As it is visible from the picture, this topology involves two &lt;strong&gt;leaders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This topology is useful when you have different data centers in different locations and you need to provide fast writes to both regions.&lt;/p&gt;

&lt;p&gt;But with this advantage comes a great cost. Suppose, we have a table &lt;code&gt;post_statistics&lt;/code&gt; and you just realized that the number of posts with &lt;strong&gt;Published&lt;/strong&gt; &lt;code&gt;status&lt;/code&gt; is triple more than it's actually written in table and you decide to fix the situation. So, you connect to MySQL and execute the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts_statistics&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'published'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meanwhile, somebody from a different part of the world just published his/her first post (just like me) and triggered the following query to be executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts_statistics&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose, the original number of posts was 10k. Due to replication lag, databases ended up with two different numbers: 30.001 and 30.003. And no errors were thrown. &lt;/p&gt;

&lt;p&gt;This is a big disadvantage of this topology, and in practice, it brings more problems than advantages. But if you ended up with this topology, it's better to add few more replicas to it 😁&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HOZp8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/523qvnf7soz5qxkhxwcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HOZp8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/523qvnf7soz5qxkhxwcu.png" alt="Leader-leader with replicas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#activepassive-leaderleader-replication"&gt;
  &lt;/a&gt;
  Active-passive leader-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJxfUaxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hos5gxyt01k0zihf5ahf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJxfUaxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hos5gxyt01k0zihf5ahf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Active-passive leader-leader replication&lt;/em&gt; topology one server takes the role of the &lt;strong&gt;leader&lt;/strong&gt; and another one takes the role of the &lt;strong&gt;follower&lt;/strong&gt;. But in comparison to the ordinary &lt;em&gt;leader-follower topology&lt;/em&gt;, it allows you to swap easily the &lt;strong&gt;leader&lt;/strong&gt; responsibility from one server to another. &lt;/p&gt;

&lt;p&gt;It's useful in many cases. For example, if you execute &lt;code&gt;ALTER TABLE&lt;/code&gt; that locks the whole table for reads and writes, you can stop the replication process, easily swap &lt;strong&gt;leader&lt;/strong&gt; responsibility, execute &lt;code&gt;ALTER TABLE&lt;/code&gt; on the passive server, then swap the responsibility back, restore replication process, and execute &lt;code&gt;ALTER TABLE&lt;/code&gt; on the remaining server. It can help you to keep your service alive while executing that expensive query.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-topologies"&gt;
  &lt;/a&gt;
  Other topologies
&lt;/h4&gt;

&lt;p&gt;There are many other topologies that are supported by MySQL:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Replication Ring topology 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IN-8DWtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8x5ik6ozxn5i0d07h7o.png" alt="Replication Ring topology"&gt;
&lt;/li&gt;
&lt;li&gt;Tree of pyramid topology
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsDaUqxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwwivdpuap96gfjxrbnp.png" alt="Tree of pyramid topology"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And many others. You can choose the best topology that fits your purposes or create your own. This is the list 👆🏻 of the most common topologies used in MySQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Replication&lt;/strong&gt; is a mechanism of having a consistent copy of the data storage. It provides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data distribution;&lt;/li&gt;
&lt;li&gt;Load balancing;&lt;/li&gt;
&lt;li&gt;Backups;&lt;/li&gt;
&lt;li&gt;High availability and failover.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Leader-based replication&lt;/em&gt; consists of &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;. Both of them have their own journal of changes: &lt;strong&gt;binary log&lt;/strong&gt; and &lt;strong&gt;relay log&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two types of replication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Statement-based replication&lt;/strong&gt;. It's represented in queries itself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Row-based replication&lt;/strong&gt;. It's represented in direct data changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are multiple topologies for replication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Leader-follower topology;&lt;/li&gt;
&lt;li&gt;Leader-leader topology;&lt;/li&gt;
&lt;li&gt;Leader-leader active-passive topology;&lt;/li&gt;
&lt;li&gt;Ring topology;&lt;/li&gt;
&lt;li&gt;Tree of Pyramids topology.
And many specialized topologies together with custom ones.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! Thank you for your attention! I hope you liked this post 😌&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>replication</category>
      <category>distributedsystems</category>
    </item>
  </channel>
</rss>
