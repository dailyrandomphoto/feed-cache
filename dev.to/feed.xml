<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Big Data Analytics Options on AWS | AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Thu, 04 Nov 2021 06:36:03 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/big-data-analytics-options-on-aws-aws-white-paper-summary-59l2</link>
      <guid>https://dev.to/awsmenacommunity/big-data-analytics-options-on-aws-aws-white-paper-summary-59l2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As the world becomes more digital, the amount of data created and collected constantly grows and accelerates. Analysis of this ever-growing data becomes a challenge with traditional analytical tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Big data tools and technologies offer opportunities to analyze data efficiently so you can better understand customer preferences, gain a competitive advantage in the marketplace, and grow your business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS provides a broad platform of managed services to help you build, secure, and seamlessly scale end-to-end big data applications quickly and with ease.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-aws-advantage-in-big-data-analytics"&gt;
  &lt;/a&gt;
  The AWS advantage in big data analytics
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Analyzing large datasets requires significant compute capacity that can vary in size, based on the amount of input data and the type of analysis. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For mission-critical applications on a more traditional infrastructure, system designers have no choice but to over-provision, because a surge in additional data due to an increase in business needs must be something the system can handle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;on AWS, you can provision more capacity and compute in a matter of minutes, meaning that your big data applications grow and shrink as demand dictates, and your system runs as close to optimal efficiency as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, you get flexible computing on a global infrastructure with access to the many different geographic Regions that AWS offers, along with the ability to use other scalable services that augment to build sophisticated big data applications. These other services include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Simple Storage Service (Amazon S3) to store data&lt;/li&gt;
&lt;li&gt;AWS Glue to orchestrate jobs to move and transform the data easily&lt;/li&gt;
&lt;li&gt;AWS IoT, which lets connected devices interact with cloud applications and other connected devices&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As the amount of data being generated continues to grow, AWS has many options to get that data to the cloud, including secure devices like AWS Snow Family to accelerate petabyte-scale data transfers, delivery streams with Amazon Kinesis Data Firehose to load streaming data continuously, migrating databases using AWS Database Migration Service, and scalable private connections through AWS Direct Connect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As mobile continues to rapidly grow in usage, you can use the suite of services within the AWS Mobile Hub to collect and measure app usage and data, or export that data to another service for further custom analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These capabilities of AWS make it an ideal fit for solving big data problems, and many customers have implemented successful big data analytics workloads on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following services for collecting, processing, storing, and analyzing big data are described in order:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-kinesis"&gt;
  &lt;/a&gt;
  Amazon Kinesis
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis is a platform for streaming data on AWS that makes it easy to load and analyze streaming data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis also enables you to build custom streaming data applications for specialized needs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Kinesis, you can ingest real-time data such as application logs, website clickstreams, Internet of Things (IoT) telemetry data, and more into your databases, data lakes, and data warehouses, or build your own real-time applications using this data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis enables you to process and analyze data as it arrives and respond in real-time instead of having to wait until all your data is collected before the processing can begin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently there are four pieces of the Kinesis platform that can be utilized based on your use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Kinesis Data Streams enables you to build custom applications that process or analyze streaming data.&lt;/li&gt;
&lt;li&gt;Amazon Kinesis Video Streams enables you to build custom applications that process or analyze streaming video.&lt;/li&gt;
&lt;li&gt;Amazon Kinesis Data Firehose enables you to deliver real-time streaming data to AWS destinations such as such as Amazon S3, Amazon Redshift, OpenSearch Service, and Splunk.&lt;/li&gt;
&lt;li&gt;Amazon Kinesis Data Analytics enables you to process and analyze streaming data with standard SQL or with Java (managed Apache Flink).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-managed-streaming-for-apache-kafka-amazon-msk"&gt;
  &lt;/a&gt;
  Amazon Managed Streaming for Apache Kafka (Amazon MSK)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK is a fully managed service that makes it easy for you to build and run applications that use Apache Kafka to process streaming data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apache Kafka is an open-source platform for building real-time streaming data pipelines and applications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon MSK, you can use native Apache Kafka APIs to populate data lakes, stream changes to and from databases, and power machine learning and analytics applications&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-lambda"&gt;
  &lt;/a&gt;
  AWS Lambda
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS Lambda enables you to run code without provisioning or managing servers. You pay only for the compute time you consume – there is no charge when your code is not running. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Lambda, you can run code for virtually any type of application or backend service – all with zero administration. Just upload your code and Lambda takes care of everything required to run and scale your code with high availability. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can set up your code to automatically trigger from other AWS services or call it directly from any web or mobile app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-elastic-map-reduce-amazon-emr"&gt;
  &lt;/a&gt;
  Amazon Elastic Map Reduce (Amazon EMR)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon EMR is the industry-leading cloud big data platform for processing vast amounts of data using open source tools such as Apache Spark, Apache Hive, Apache HBase, Apache Flink, Apache Hudi, and Presto. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EMR makes it easy to set up, operate, and scale your big data environments by automating time-consuming tasks like provisioning capacity and tuning clusters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With EMR you can run petabyte-scale analysis at less than half of the cost of traditional on-premises solutions and over 3x faster than standard Apache Spark.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EMR does all the work involved with provisioning, managing, and maintaining the infrastructure and software of a Hadoop cluster.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-glue"&gt;
  &lt;/a&gt;
  AWS Glue
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS Glue is a serverless data integration service that makes it easy to discover, prepare, and combine data for analytics, machine learning, and application development. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Glue provides all of the capabilities needed for data integration. It both visual and code-based interfaces to make data integration easier.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-lake-formation"&gt;
  &lt;/a&gt;
  AWS Lake Formation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS Lake Formation is an integrated data lake service that makes it easy for you to ingest, clean, catalog, transform, and secure your data and make it available for analysis and machine learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lake Formation gives you a central console where you can discover data sources, set up transformation jobs to move data to an S3 data lake, remove duplicates and match records, catalog data for access by analytic tools, configure data access and security policies, and audit and control access from AWS analytic and machine learning services.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-machine-learning"&gt;
  &lt;/a&gt;
  Amazon Machine Learning
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS offers the broadest and deepest set of machine learning services and supporting cloud infrastructure, putting machine learning in the hands of every developer, data scientist, and expert practitioner. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you build an ML-based workload in AWS, you can choose from three different levels of ML services to balance speed-to-market with level of customization and ML skill level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Artificial Intelligence (AI) services&lt;/li&gt;
&lt;li&gt;ML services&lt;/li&gt;
&lt;li&gt;ML frameworks and infrastructure&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-dynamodb"&gt;
  &lt;/a&gt;
  Amazon DynamoDB
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon DynamoDB is a fast, fully-managed NoSQL database service that makes it simple and cost effective to store and retrieve any amount of data, and serve any level of request traffic. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DynamoDB helps offload the administrative burden of operating and scaling a highly-available distributed database cluster. This storage alternative meets the latency and throughput requirements of highly demanding applications by providing single-digit millisecond latency and predictable performance with seamless throughput and storage scalability.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-redshift"&gt;
  &lt;/a&gt;
  Amazon Redshift
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift is a fast, fully-managed, petabyte-scale data warehouse service that makes it simple and cost-effective to analyze all your data efficiently using your existing business intelligence tools. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is optimized for data sets ranging from a few hundred gigabytes to a petabyte or more, and is designed to cost less than a tenth of the cost of most traditional data warehousing solutions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-opensearch-service-opensearch-service"&gt;
  &lt;/a&gt;
  Amazon OpenSearch Service (OpenSearch Service)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon OpenSearch Service (OpenSearch Service) makes it easy to deploy, operate, and scale OpenSearch Service for log analytics, full text search, application monitoring, and more. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OpenSearch Service is a fully managed service that delivers the OpenSearch Service easy-to-use APIs and real-time capabilities along with the availability, scalability, and security required by production workloads. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The service offers built-in integrations with OpenSearch Dashboards, Logstash, and AWS services including Amazon Kinesis Data Firehose, AWS Lambda, and Amazon CloudWatch so that you can go from raw data to actionable insights quickly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-quicksight"&gt;
  &lt;/a&gt;
  Amazon QuickSight
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon QuickSight is a scalable, serverless, embeddable, machine learning-powered business intelligence (BI) service built for the cloud. It makes it easy for all employees within an organization to build visualizations, perform ad hoc analysis, and quickly get business insights fromtheir data, anytime, on any device.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon QuickSight enables organizations to scale their business analytics capabilities to hundreds of thousands of users, and delivers fast and responsive query performance by using a robust in-memory engine (SPICE).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-compute-services-amazon-elastic-compute-cloud-amazon-ec2-instances-amazon-elastic-container-service-amazon-ecs-and-amazon-elastic-kubernetes-service-amazon-eks-are-available-for-selfmanaged-big-data-applications"&gt;
  &lt;/a&gt;
  Amazon Compute Services (Amazon Elastic Compute Cloud (Amazon EC2) instances, Amazon Elastic Container Service (Amazon ECS), and Amazon Elastic Kubernetes Service (Amazon EKS) are available for self-managed big data applications.)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon EC2, with instances acting as AWS virtual machines, provides an ideal platform for operating your own self-managed big data analytics applications on AWS infrastructure. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Almost any software you can install on Linux or Windows virtualized environments can be run on Amazon EC2, and you can use the pay-as-you-go pricing model.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-athena"&gt;
  &lt;/a&gt;
  Amazon Athena
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Athena is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Athena is serverless, so there is no infrastructure to setup or manage, and you can start analyzing data immediately. You don’t need to load your data into Athena, as it works directly with data stored in S3. Just log into the Athena Console, define your table schema, and start querying. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Athena uses Presto with full ANSI SQL support and works with a variety of standard data formats, including CSV, JSON, ORC, Apache Parquet, and Apache Avro.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solving-big-data-problems-on-aws"&gt;
  &lt;/a&gt;
  Solving big data problems on AWS
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#example-1-queries-against-an-amazon-s3-data-lake"&gt;
  &lt;/a&gt;
  Example 1: Queries against an Amazon S3 data lake
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDqilq0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15bucjnqb49uqbb1ptng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDqilq0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15bucjnqb49uqbb1ptng.png" alt="Image description" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data lakes are an increasingly popular way to store and analyze both structured and unstructured data. &lt;/li&gt;
&lt;li&gt;If you use an Amazon S3 data lake, AWS Glue can make all your data immediately available for analytics without moving the data. &lt;/li&gt;
&lt;li&gt;AWS Glue crawlers can scan your data lake and keep the AWS Glue Data Catalog in sync with the underlying data. &lt;/li&gt;
&lt;li&gt;You can then directly query your data lake with Amazon Athena and Amazon Redshift Spectrum. &lt;/li&gt;
&lt;li&gt;You can also use the AWS Glue Data Catalog as your external Apache Hive Metastore for big data applications running on Amazon EMR.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example-2-capturing-and-analyzing-sensor-data"&gt;
  &lt;/a&gt;
  Example 2: Capturing and analyzing sensor data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UhGuF2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d2gir7ovg4niiqexpym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UhGuF2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d2gir7ovg4niiqexpym.png" alt="Image description" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The process begins with each A/C unit providing a constant data stream to Amazon Kinesis Data Streams. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the Amazon Kinesis Data Streams-provided tools such as the Kinesis Client Library or SDK, a simple application is built on Amazon EC2 to read data as it comes into Amazon Kinesis Data Streams, analyze it, and determine if the data warrants an update to the real-time dashboard. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This data flow needs to occur in near real time so that customers and maintenance teams can be alerted quickly if there is an issue with the unit. Additionally, there will be lots of potential access to this data from the following sources:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Customers checking on their system via a mobile device or browser&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintenance teams checking the status of its fleet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data and intelligence algorithms and analytics in the reporting platform spot trends that can be then sent out as alerts, such as if the A/C fan has been running unusually long with the building temperature not going down.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DynamoDB was chosen to store this near real-time data set because it is both highly available and scalable; throughput to this data can be easily scaled up or down to meet the needs of its consumers as the platform is adopted and usage grows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The reporting dashboard is a custom web application that is built on top of this data set and run on Amazon EC2. It provides content based on the system status and trends as well as alerting customers and maintenance crews of any issues that may come up with the unit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The customer accesses the data from a mobile device or a web browser to get the current status of the system and visualize historical trends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To read from the Amazon Kinesis stream, there is a separate Amazon Kinesis-enabled application that probably runs on a smaller EC2 instance that scales at a slower rate. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data is transformed by the Amazon Kinesis-enabled application into a format that is suitable for long-term storage, for loading into its data warehouse, and storing on Amazon S3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift is again used as the data warehouse for the larger data set. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For visualizing the analytics, one of the many partner visualization platforms can be used via the OBDC/JDBC connection to Amazon Redshift. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#example-3-sentiment-analysis-of-social-media"&gt;
  &lt;/a&gt;
  Example 3: sentiment analysis of social media
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZoNZtl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzonoafjs85myfhms1ax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZoNZtl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzonoafjs85myfhms1ax.png" alt="Image description" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, deploy an Amazon EC2 instance in an Amazon VPC that ingests tweets from Twitter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, create an Amazon Kinesis Data Firehose delivery stream that loads the streaming tweets into the raw prefix in the solution's S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S3 invokes a Lambda function to analyze the raw tweets using Amazon Translate to translate non-English tweets into English, and Amazon Comprehend to use natural language-processing (NLP) to perform entity extraction and sentiment analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A second Kinesis Data Firehose delivery stream loads the translated tweets and sentiment values into the sentiment prefix in the S3 bucket. A third delivery stream loads entities in the entities prefix in the S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This architecture also deploys a data lake that includes AWS Glue for data transformation, Amazon Athena for data analysis, and Amazon QuickSight for data visualization. AWS Glue Data Catalog contains a logical database used to organize the tables for the data in S3. Athena uses these table definitions to query the data stored in S3 and return the information to an Amazon QuickSight dashboard. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As more and more data is generated and collected, organizations are facing a growing big data ecosystem where new tools emerge and become outdated very quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With a broad set of managed services to collect, process, and analyze big data, AWS makes it easier to build, deploy, and scale big data applications. This enables you to focus on business problems instead of updating and managing these tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS provides many solutions to address your big data analytic requirements. Most big data architecture solutions use multiple AWS tools to build a complete solution. The result is a flexible big data architecture that is able to scale along with your business.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/big-data-analytics-options/welcome.html?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>bigdata</category>
      <category>analytics</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Writing your first Client-Server Program</title>
      <author>Abdul Samad</author>
      <pubDate>Thu, 04 Nov 2021 06:32:28 +0000</pubDate>
      <link>https://dev.to/iabdsam/writing-your-first-client-server-program-5a0b</link>
      <guid>https://dev.to/iabdsam/writing-your-first-client-server-program-5a0b</guid>
      <description>&lt;p&gt;Your Professor asked you to prepare a basic client-server program for the lab next week or maybe you are yourself starting Socket programming, what's better than writing the first program and learning along that.&lt;/p&gt;

&lt;p&gt;The source files are located on &lt;a href="https://github.com/iabdsam/basic-client-server"&gt;Github&lt;/a&gt; if you need them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-quick-theory"&gt;
  &lt;/a&gt;
  The quick theory
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-socket-"&gt;
  &lt;/a&gt;
  what is a socket ?
&lt;/h3&gt;

&lt;p&gt;well, its (an integer and) a file descriptor through which we do our desired communication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-communication-looks-like-important"&gt;
  &lt;/a&gt;
  what does communication looks like ? (important)
&lt;/h3&gt;

&lt;p&gt;Server - &lt;strong&gt;&lt;code&gt;Bind()s&lt;/code&gt;&lt;/strong&gt; socket to an address and port, this socket then &lt;strong&gt;&lt;code&gt;listen()s&lt;/code&gt;&lt;/strong&gt; for incoming, then &lt;strong&gt;&lt;code&gt;accept()s&lt;/code&gt;&lt;/strong&gt; the incoming request (from client).&lt;/p&gt;

&lt;p&gt;Client - &lt;strong&gt;&lt;code&gt;Connect()&lt;/code&gt;s&lt;/strong&gt; your socket via local address and port for a &lt;strong&gt;&lt;code&gt;listen()&lt;/code&gt;ing&lt;/strong&gt; socket to &lt;strong&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-happens-after-connect-and-accept-"&gt;
  &lt;/a&gt;
  what happens after connect() and accept() ?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;accept()&lt;/code&gt; returns a new socket to be used for communicating to that particular accepted client.&lt;br&gt;
In client side, the same socket used to &lt;code&gt;connect&lt;/code&gt; is used to communicate.&lt;br&gt;
now you can &lt;code&gt;send()&lt;/code&gt; and &lt;code&gt;recv()&lt;/code&gt; from both sides.&lt;/p&gt;

&lt;p&gt;What is the first thing that you need? &lt;strong&gt;Headers!&lt;/strong&gt;&lt;br&gt;
We will be using the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets build both sides one-by-one&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverc"&gt;
  &lt;/a&gt;
  Server.c
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sockID1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A stream socket has been created in PF_INET(internet) domain.&lt;/p&gt;

&lt;p&gt;Now, we have to bind our socket to an address and port. But, the &lt;code&gt;bind()&lt;/code&gt; function asks for one struct (of &lt;code&gt;sockaddr&lt;/code&gt; type) that has all that info. Instead we pass it &lt;code&gt;sockaddr_in&lt;/code&gt; casted to &lt;code&gt;sockaddr&lt;/code&gt; because it is more specific to our needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// sets IPv4&lt;/span&gt;
&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//htonl - host to network long, htons - host to network short&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We filled the structure. Here, &lt;code&gt;INADDR_ANY&lt;/code&gt; automatically fills a default Ip address since we don't want to bind it to particular one.&lt;/p&gt;

&lt;p&gt;5200 is the port number that we will be using. You can use your own (make sure it is not reserved) (use the same in client).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Bind Failed to Port 5200&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Bind Success to Port 5200&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Binded the socket, returns -1 if fails.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Listen Failed&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Listening...&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to accept an incoming request (&lt;code&gt;connect()&lt;/code&gt; from client).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;client_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;socklen_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_addr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sockID2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;client_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accepted a connection&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is interesting. The only thing &lt;code&gt;accept()&lt;/code&gt; needs from our server is &lt;code&gt;sockID1&lt;/code&gt;. &lt;code&gt;client_addr&lt;/code&gt; will contain info about the client it accepts and will be filled on function call.&lt;/p&gt;

&lt;p&gt;This returns a new socket (&lt;code&gt;sockID2&lt;/code&gt;) for us which will be used for sending and recieving from the client.&lt;/p&gt;

&lt;p&gt;The last step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;countR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;countS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"To Client : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"From Client : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to understand this yourself. &lt;code&gt;countR&lt;/code&gt; and &lt;code&gt;countS&lt;/code&gt; are there for error handling (&lt;code&gt;send&lt;/code&gt; and &lt;code&gt;recv&lt;/code&gt; give -1 on error). &lt;strong&gt;Sending or recieving the word "Close" is the exit condition.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What are we trying to do? First message to be sent by server. Client then recieves it  and sends something. Server then recieves it and sends ...........&lt;/p&gt;

&lt;p&gt;Finally&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Socket connection Closed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without scratching heads, lets move to client.c&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clientc"&gt;
  &lt;/a&gt;
  Client.c
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sockID1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//sets to IPv4&lt;/span&gt;
    &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//htonl - host to network long, htons - host to network short&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is same, because connection also requires the specifics of where and via-what to connect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Connect Failed&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Connected via Port 5200&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nearly identical to &lt;code&gt;bind()&lt;/code&gt;. Right. But remember, it complements the &lt;code&gt;accept()&lt;/code&gt; function in the server side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;countR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;countS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"From Server : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"To Server : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope its easier to see the logic now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Socket connection Closed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Done.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Move to the directory. Split your terminal. In one, run the server, then on other run the client. Happy connection !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/iabdsam/basic-client-server"&gt;Source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have tried to keep it as short as possible and only explain the things relevant to a first program.&lt;br&gt;
Questions &amp;amp; Suggestions are welcome.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>cpp</category>
      <category>opensource</category>
    </item>
    <item>
      <title>JavaScript Loose Equality vs Strict Equality check</title>
      <author>Swastik Yadav</author>
      <pubDate>Thu, 04 Nov 2021 06:10:40 +0000</pubDate>
      <link>https://dev.to/swastikyadav/javascript-loose-equality-vs-strict-equality-check-5k2</link>
      <guid>https://dev.to/swastikyadav/javascript-loose-equality-vs-strict-equality-check-5k2</guid>
      <description>&lt;p&gt;Hello Everyone!&lt;/p&gt;

&lt;p&gt;In this post we will explore the difference between JS &lt;strong&gt;loose equality (==)&lt;/strong&gt; and &lt;strong&gt;strict equality (===)&lt;/strong&gt; check.&lt;/p&gt;

&lt;p&gt;Here is the simplest definition&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Loose equality (==) checks for value only.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Strict equality (===) checks for value as well as DataType.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But wait, there is something more to it. Let's understand the workings of both of them one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strict-equality-"&gt;
  &lt;/a&gt;
  Strict Equality (===)
&lt;/h2&gt;

&lt;p&gt;Strict equality first checks for DataType, If datatype is same then it checks for value, else it returns false.&lt;/p&gt;

&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;55&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// false - Because datatype is different even though value is same.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UgzWPzTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://swastikyadav.com/static/fb13ed8d7700fdecf4b32f65f7626d8d/a331c/strict-equality.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UgzWPzTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://swastikyadav.com/static/fb13ed8d7700fdecf4b32f65f7626d8d/a331c/strict-equality.png" alt="strict-equality" width="800" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loose-equality-"&gt;
  &lt;/a&gt;
  Loose Equality (==)
&lt;/h2&gt;

&lt;p&gt;Loose equality works similar to strict equality. The only difference is that in loose equality if datatype is different, it performs an &lt;strong&gt;Implicit type conversion&lt;/strong&gt; and then compares the value.&lt;/p&gt;

&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;55&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// true - Because implicit conversion will change string "55" to number 55 then compare value.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKAGD7WA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://swastikyadav.com/static/f0c2fa74185081d24515567ac66d29ec/a331c/loose-equality.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKAGD7WA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://swastikyadav.com/static/f0c2fa74185081d24515567ac66d29ec/a331c/loose-equality.png" alt="loose-equality" width="800" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed or found this post helpful, please consider joining my weekly Newsletter below.&lt;/p&gt;

&lt;p&gt;Thank You for reading.&lt;/p&gt;




&lt;p&gt;I am starting a NewsLetter where I will share epic content on building your skillset. So, if this sounds interesting to you, subscribe here: &lt;a href="https://www.getrevue.co/profile/8020lessons"&gt;https://www.getrevue.co/profile/8020lessons&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Can you solve this interview problem?</title>
      <author>Shuvo</author>
      <pubDate>Thu, 04 Nov 2021 05:29:04 +0000</pubDate>
      <link>https://dev.to/0shuvo0/can-you-solve-this-interview-problem-4gaa</link>
      <guid>https://dev.to/0shuvo0/can-you-solve-this-interview-problem-4gaa</guid>
      <description>&lt;p&gt;So few days ago I applied to a MNC and I had some interesting problems to solve in given amount of time. So let me share one with you, see if you can solve this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-description"&gt;
  &lt;/a&gt;
  Problem Description
&lt;/h2&gt;

&lt;p&gt;So let's say we have a URL something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/0shuvo0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now they have converted the url to a base64 string.&lt;br&gt;
So the URL have become something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aHR0cHM6Ly9kZXYudG8vMHNodXZvMA==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now what they did was split the sting to multiple parts and convert into an array&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aHR0cH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M6Ly9kZX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YudG8vMHN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;odXZvMA==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But of course the madnesses doesn't stop here. Then the shuffled the array so it became something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M6Ly9kZX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aHR0cH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;odXZvMA==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YudG8vMHN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And lastly they have converted that array to a string.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-here-is-your-input"&gt;
  &lt;/a&gt;
  So here is your input
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[ '0LzFqZTFt', '9jb21tZW5', '8vMHNodXZvMC', '6Ly9kZXYudG', 'aHR0cHM' ]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Use the input to find the original URL programmatically&lt;/strong&gt; &lt;em&gt;you have 45 Minutes to do it.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#useful-javascript-functions-that-can-help-you"&gt;
  &lt;/a&gt;
  Useful JavaScript functions that can help you
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can convert your array to sting by calling &lt;strong&gt;join&lt;/strong&gt; method on it. Eg.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You can use &lt;strong&gt;atob&lt;/strong&gt; function to decode the base64 string.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#now-go-and-and-see-if-you-can-solve-this-best-of-luck"&gt;
  &lt;/a&gt;
  Now go and and see if you can solve this. Best of luck 👍
&lt;/h2&gt;


&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#was-it-useful-support-me-on-patreon"&gt;
  &lt;/a&gt;
  Was it useful? Support me on Patreon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/0shuvo0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZ1ZPOAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twjftovyevtqht7v3ley.png" alt="Patreon Logo" width="554" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Portfolio Web App Development using React, Typescript and Chakra UI</title>
      <author>Balram Rathore</author>
      <pubDate>Thu, 04 Nov 2021 05:04:45 +0000</pubDate>
      <link>https://dev.to/devstack06/portfolio-web-app-development-using-react-typescript-and-chakra-ui-99l</link>
      <guid>https://dev.to/devstack06/portfolio-web-app-development-using-react-typescript-and-chakra-ui-99l</guid>
      <description>&lt;p&gt;Hi guys, I have started a new video series for portfolio web app development using #react #ChakraUI and #Typescript. I will be going to cover the storybook too. If anyone is interested in this series, they can find the links below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introduction video: &lt;a href="https://youtu.be/-dxHHNgO1dg"&gt;https://youtu.be/-dxHHNgO1dg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Typescript overview video: &lt;a href="https://youtu.be/_Kha2yBztWI"&gt;https://youtu.be/_Kha2yBztWI&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQF_RUT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exc6xj9e3mbbeoejx3me.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQF_RUT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exc6xj9e3mbbeoejx3me.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Free Certification Courses for Developers 🔥</title>
      <author>Savio Martin</author>
      <pubDate>Thu, 04 Nov 2021 03:20:23 +0000</pubDate>
      <link>https://dev.to/saviomartin/free-certification-courses-for-developers-3378</link>
      <guid>https://dev.to/saviomartin/free-certification-courses-for-developers-3378</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋
&lt;/h2&gt;

&lt;p&gt;This is Savio here. 14 year old, building useful products. Helping people with tweets and blogs on web development, frotend tips, and interesting resources.&lt;/p&gt;

&lt;p&gt;Today, I'd like to share 7 Free Certification Courses for Developers Let's goooo 🚀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-freecodecamp"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.freecodecamp.org/learn/"&gt;FreeCodeCamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R00d_IcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4no7ov5d95xyq6f9ry1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R00d_IcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4no7ov5d95xyq6f9ry1.png" alt="FreeCodeCamp" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;FreeCodeCamp is one of the most popular sites offering free certification. FreeCodeCamp is a non-profit organization that consists of an interactive learning web platform, an online community forum, chat rooms, support etc. FreeCodeCamp is the best place to learn code free and earn certification.&lt;/p&gt;

&lt;p&gt;10 certifications available: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive Web Design&lt;/li&gt;
&lt;li&gt;JavaScript Algorithms and Data Structures&lt;/li&gt;
&lt;li&gt;Front End Development&lt;/li&gt;
&lt;li&gt;Data Visualization&lt;/li&gt;
&lt;li&gt;Backend Development&lt;/li&gt;
&lt;li&gt;Quality Assurance&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Data Analysis with Python&lt;/li&gt;
&lt;li&gt;Information Security&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-fundamentals-of-digital-marketing-by-google"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://learndigital.withgoogle.com/digitalgarage/course/digital-marketing"&gt;Fundamentals of digital marketing by Google&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Me5e2H0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gglcpxbllz3svtpdhtob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Me5e2H0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gglcpxbllz3svtpdhtob.png" alt="Fundamentals of digital marketing by Google" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There are 26 modules to explore, all created by Google trainers, packed full of practical exercises and real-world examples to help you turn knowledge into action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cognitive-class-by-ibm"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://cognitiveclass.ai/learn"&gt;Cognitive Class by IBM&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXjVwlqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5melniqyazhsmbtkjw9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXjVwlqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5melniqyazhsmbtkjw9v.png" alt="Cognitive Class by IBM" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn leading-edge technologies like Blockchain, Data Science, AI, Cloud, Serverless, Docker, Kubernetes and more... with certification fully free of charge. Build your career with skills employers seek.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-test-automation-university"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://testautomationu.applitools.com/"&gt;Test Automation University&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FaHwzoiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w8wttjes9zgciwmhv43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FaHwzoiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w8wttjes9zgciwmhv43.png" alt="Test Automation University" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free test automation courses with videos, transcripts, quizzes, credits, rank badges, and certificates! everything free thought by experts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-programming-essentials-in-python-by-cisco"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.netacad.com/courses/programming/pcap-programming-essentials-python"&gt;Programming Essentials in Python by Cisco&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ue0vvuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a0c6mizy2imf38t0hn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ue0vvuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a0c6mizy2imf38t0hn5.png" alt="Programming Essentials in Python by Cisco" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;75 hours long course led by leading developers teching Python, the versatile programming language completely free of charge and with certification.&lt;/p&gt;

&lt;p&gt;Course includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8 Modules&lt;/li&gt;
&lt;li&gt;Practice Labs&lt;/li&gt;
&lt;li&gt;Module Quizzes and Module Tests&lt;/li&gt;
&lt;li&gt;Summary Tests&lt;/li&gt;
&lt;li&gt;Final Exam&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-python-training-course"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://data-flair.training/python-course/"&gt;Python Training Course&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t36QkIVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxj4wk140ilavjd7pt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t36QkIVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxj4wk140ilavjd7pt6.png" alt="Python Training Course" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A perfect blend of in-depth Python theoretical knowledge and strong practical skills, this Free course for Python introduces real-time Python projects  to give you a headstart in learning Python and enables you to bag top Python jobs in the industry.&lt;/p&gt;

&lt;p&gt;Course includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5 real-time projects and 20 complementary projects&lt;/li&gt;
&lt;li&gt;100+ hrs of study material, practical codes, quizzes, interview guides&lt;/li&gt;
&lt;li&gt;case studies to gain expertise&lt;/li&gt;
&lt;li&gt;certificate&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-learn-by-kaggle"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.kaggle.com/learn"&gt;Learn by Kaggle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuKNVdGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxxs3mrbpbxhsbbrxrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuKNVdGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxxs3mrbpbxhsbbrxrh.png" alt="Learn by Kaggle" width="880" height="495"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;Gain the skills you need to do independent data science projects. They pare down complex topics to their key practical components, so you gain usable skills in a few hours (instead of weeks or months). The courses are free, and could earn certificates.&lt;/p&gt;

&lt;p&gt;Certifications available: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;Data Visualization&lt;/li&gt;
&lt;li&gt;Feature Engineering&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;Deep Learning&lt;/li&gt;
&lt;li&gt;Computer Vision&lt;/li&gt;
&lt;li&gt;Time Series&lt;/li&gt;
&lt;li&gt;Data Cleaning&lt;/li&gt;
&lt;li&gt;AI Ethics&lt;/li&gt;
&lt;li&gt;Geospatial Analysis&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;li&gt;Natural Language Processing&lt;/li&gt;
&lt;li&gt;Intro Intro to Game AI&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  👀 Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Yeah, that's a wrap. Hope you enjoyed the article. Do not hesitate to share your feedback. I am on Twitter &lt;a href="https://twitter.com/SavioMartin7"&gt;@saviomartin7&lt;/a&gt;. Give a follow!&lt;/p&gt;

&lt;p&gt;Follow me on Github &lt;a href="https://github.com/saviomartin"&gt;@saviomartin&lt;/a&gt;, Don't miss my amazing projects! 💯&lt;/p&gt;

&lt;p&gt;Feedbacks are greatly appreciated! 🙌 Have an amazing day!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Lets connect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/saviomartin"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saviomartin7"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS em and rem units #CSSforJS</title>
      <author>Zach Snoek</author>
      <pubDate>Thu, 04 Nov 2021 03:03:30 +0000</pubDate>
      <link>https://dev.to/zachsnoek/css-em-and-rem-units-cssforjs-5697</link>
      <guid>https://dev.to/zachsnoek/css-em-and-rem-units-cssforjs-5697</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is my first post in a series about topics covered in Josh Comeau's &lt;a href="https://css-for-js.dev/"&gt;CSS for JavaScript Developers&lt;/a&gt; course. These posts will be brief, polished versions of my notes. I'll write about new things I learned or deepen my understanding of something already familiar to me.&lt;/p&gt;

&lt;p&gt;In this post, we'll explore the &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units in CSS, covered in module 0 of the course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ems"&gt;
  &lt;/a&gt;
  Ems
&lt;/h2&gt;

&lt;p&gt;An &lt;code&gt;em&lt;/code&gt; is a unit relative to the &lt;code&gt;font-size&lt;/code&gt; of the current element. When used for the &lt;code&gt;font-size&lt;/code&gt; property, an &lt;code&gt;em&lt;/code&gt; is relative to the &lt;code&gt;font-size&lt;/code&gt; of the &lt;em&gt;parent&lt;/em&gt; element.&lt;/p&gt;

&lt;p&gt;For example, if an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; of &lt;code&gt;2em&lt;/code&gt;, the element's &lt;code&gt;padding&lt;/code&gt; will be 32 pixels (16 x 2):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/VwzPgjG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and its child has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;1.5em&lt;/code&gt;, the child's &lt;code&gt;font-size&lt;/code&gt; will be 24 pixels (16 x 1.5):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/abypXWE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If the element's  &lt;code&gt;font-size&lt;/code&gt; is not set, the closest ancestor with a &lt;code&gt;font-size&lt;/code&gt; gets used. Note that browsers have a default font size of 16 pixels out of the box, so &lt;code&gt;1em&lt;/code&gt; is generally equal to 16 pixels.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt;s are useful when scaling some property with the element's &lt;code&gt;font-size&lt;/code&gt;. Consider the following &lt;code&gt;.box&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create small, medium, and large boxes with these same proportions, we can alter the  &lt;code&gt;font-size&lt;/code&gt; of each &lt;code&gt;.box&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/porRGpR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-compounding-problem"&gt;
  &lt;/a&gt;
  The compounding problem
&lt;/h3&gt;

&lt;p&gt;Because &lt;code&gt;em&lt;/code&gt;s are relative, the value of an &lt;code&gt;em&lt;/code&gt; in descendant elements can compound. This can cause unexpected layout changes when a font size change ripples through descendant elements. For instance, if an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;2em&lt;/code&gt; and its child has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;1.5em&lt;/code&gt;, the child's font size is 48 pixels (16 x 2 x 1.5):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/mdMRZjO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rems"&gt;
  &lt;/a&gt;
  Rems
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;rem&lt;/code&gt;, short for "root em," is like an &lt;code&gt;em&lt;/code&gt;, but its value is relative to the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. So, if the root &lt;code&gt;font-size&lt;/code&gt; is 16 pixels, a value of &lt;code&gt;2rem&lt;/code&gt; is 32 pixels at every level in the DOM:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/wvqgLLy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rem&lt;/code&gt;s are always relative to the root element, so there isn't an issue with compounding. This makes them more predictable and consistent than &lt;code&gt;em&lt;/code&gt;s:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/oNeBrKx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;rem&lt;/code&gt;s to scale values globally by only changing the root &lt;code&gt;font-size&lt;/code&gt;. The following &lt;code&gt;article&lt;/code&gt; has many font sizes specified in &lt;code&gt;rem&lt;/code&gt;s, and we can use a media query to change all the sizes by setting the root &lt;code&gt;font-size&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/MWvJNYx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#em-and-rem-a11y-benefits"&gt;
  &lt;/a&gt;
  Em and rem a11y benefits
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;em&lt;/code&gt;s and &lt;code&gt;rem&lt;/code&gt;s help make our sites more accessible by respecting the user's default font size, set in their browser's settings. Using a fixed unit such as &lt;code&gt;px&lt;/code&gt; will override this setting, but &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; will scale it. This makes &lt;code&gt;rem&lt;/code&gt;s particularly good for typography because we can scale the user's font size preference globally without &lt;code&gt;em&lt;/code&gt; interference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; are relative units. An &lt;code&gt;em&lt;/code&gt; is generally relative to the current element's &lt;code&gt;font-size&lt;/code&gt;; when used for the &lt;code&gt;font-size&lt;/code&gt; property, it's relative to its parent's &lt;code&gt;font-size&lt;/code&gt;. A &lt;code&gt;rem&lt;/code&gt; is relative to the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element's &lt;code&gt;font-size&lt;/code&gt;, which is usually 16 pixels. Take caution when using &lt;code&gt;em&lt;/code&gt;s because of their compounding effect; &lt;code&gt;rem&lt;/code&gt;s are more predictable and increase accessibility by respecting the user's default font size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;Thanks for reading! If you enjoyed this post, connect with me on &lt;a href="https://www.linkedin.com/in/zach-snoek-5b327b179/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/zachsnoek"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://twitter.com/zach_snoek"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-for-js.dev/"&gt;Josh Comeau | CSS for JavaScript Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_-aDOAMmDHI"&gt;Kevin Powell | CSS em and rem explained #CSS #responsive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units"&gt;MDN | CSS values and units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"&gt;MDN | font-size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>cssforjs</category>
    </item>
    <item>
      <title>Java Tip: What are Methods, Functions, and Procedures?</title>
      <author>Edwin Torres ✨</author>
      <pubDate>Thu, 04 Nov 2021 02:43:16 +0000</pubDate>
      <link>https://dev.to/realedwintorres/java-tip-what-are-methods-functions-and-procedures-4nfm</link>
      <guid>https://dev.to/realedwintorres/java-tip-what-are-methods-functions-and-procedures-4nfm</guid>
      <description>&lt;p&gt;Methods 🦁, Functions 🐯, and Procedures 🐻, Oh My!&lt;/p&gt;

&lt;p&gt;Programmers often use these terms interchangeably. But there are differences among them. The following paragraphs describe methods, functions, and procedures in Java.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;method&lt;/strong&gt; in Java is a subroutine that is part of a &lt;em&gt;class&lt;/em&gt;. The subroutine is like a miniature program that can execute in other parts of the program. Methods promote code reuse and maintainability.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;method definition&lt;/em&gt; consists of the modifier, return type, name, parameter list, exception list, and body. The method name and parameter types form the &lt;em&gt;method signature&lt;/em&gt;. The method signature uniquely identifies the method for execution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Java also has &lt;em&gt;constructor methods&lt;/em&gt;. A constructor is a special method that creates an object of a class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two types of methods: &lt;em&gt;procedures&lt;/em&gt; and &lt;em&gt;functions&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#procedures"&gt;
  &lt;/a&gt;
  Procedures
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;procedure&lt;/strong&gt; is a method that does &lt;em&gt;not&lt;/em&gt; have a return value. To define a method to be a procedure, define the return type to be &lt;code&gt;void&lt;/code&gt;. An example of a built-in procedure in Java is &lt;code&gt;System.out.println()&lt;/code&gt;. This procedure simply outputs its parameter to the console, without returning a value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a method that &lt;em&gt;does&lt;/em&gt; have a return value. To define a method to be a function, set its return type to be the type of the value it is returning. An example of a built-in function in Java is &lt;code&gt;Math.pow()&lt;/code&gt;. This &lt;code&gt;Math&lt;/code&gt; function accepts two &lt;code&gt;double&lt;/code&gt; parameters and returns the first parameter raised to the power of the second parameter. The return type is &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;em&gt;user-defined&lt;/em&gt; methods are procedures and functions that &lt;strong&gt;you&lt;/strong&gt; define. Since Java only provides general-purpose methods, it is up to you to define methods that make sense for your programming project.&lt;/p&gt;

&lt;p&gt;If you liked this article &lt;em&gt;proceed&lt;/em&gt; to my Twitter profile &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; and follow me! 😊 &lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How to seamlessly exchange data between JavaScript environments</title>
      <author>Wynn Tee</author>
      <pubDate>Thu, 04 Nov 2021 02:22:55 +0000</pubDate>
      <link>https://dev.to/quantirisk/how-to-seamlessly-exchange-data-between-javascript-environments-32aa</link>
      <guid>https://dev.to/quantirisk/how-to-seamlessly-exchange-data-between-javascript-environments-32aa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#json-limitations"&gt;
  &lt;/a&gt;
  JSON limitations
&lt;/h2&gt;

&lt;p&gt;Wouldn't you find it strange if adults who are fluent in the same language spoke to each other using the vocabulary of a 3-year-old? Well, something analogous is happening when browsers and JavaScript servers exchange data using JSON, the de facto serialization format on the internet.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to send a &lt;code&gt;Date&lt;/code&gt; object from a JavaScript server to a browser, we would have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert the &lt;code&gt;Date&lt;/code&gt; object to a number.&lt;/li&gt;
&lt;li&gt;Convert the number to a JSON string.&lt;/li&gt;
&lt;li&gt;Send the JSON string to the browser.&lt;/li&gt;
&lt;li&gt;Revert the JSON string to a number.&lt;/li&gt;
&lt;li&gt;Realize the number represents a date.&lt;/li&gt;
&lt;li&gt;Revert the number to a &lt;code&gt;Date&lt;/code&gt; object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This roundabout route seems ludicrous, because the browser and server both support the &lt;code&gt;Date&lt;/code&gt; object, but is necessary, because JSON does not support the &lt;code&gt;Date&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;In fact, JSON does not support most of the data types and data structures intrinsic to JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPqrATBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoakh1kdpn6hx190d30i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPqrATBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoakh1kdpn6hx190d30i.png" alt="JavaScript data supported by JSON" width="320" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joss-as-a-solution"&gt;
  &lt;/a&gt;
  JOSS as a solution
&lt;/h2&gt;

&lt;p&gt;The aforementioned limitations of JSON motivated us to create the JS Open Serialization Scheme (JOSS), a new binary serialization format that supports almost all data types and data structures intrinsic to JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38FaVaKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm5uns2ksvso59eyxdrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38FaVaKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm5uns2ksvso59eyxdrj.png" alt="JavaScript data supported by JOSS" width="320" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JOSS also supports some often overlooked features of JavaScript, such as primitive wrapper objects, circular references, sparse arrays, and negative zeros. Please read the &lt;a href="https://github.com/quantirisk/joss/blob/main/SPECS.md"&gt;official specification&lt;/a&gt; for all the gory details.&lt;/p&gt;

&lt;p&gt;JOSS serializations come with the textbook advantages that binary formats have over text formats, such as efficient storage of numeric data and ability to be consumed as streams. The latter allows for JOSS serializations to be handled asynchronously, which we shall see in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-implementation"&gt;
  &lt;/a&gt;
  Reference implementation
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/quantirisk/joss"&gt;reference implementation&lt;/a&gt; of JOSS is available to be downloaded as an &lt;a href="https://github.com/quantirisk/joss/raw/main/joss.min.js"&gt;ES module&lt;/a&gt; (for browsers and Deno), &lt;a href="https://github.com/quantirisk/joss/raw/main/joss.node.min.js"&gt;CommonJS module&lt;/a&gt; (for Node.js), and &lt;a href="https://github.com/quantirisk/joss/raw/main/joss.iife.min.js"&gt;IIFE&lt;/a&gt; (for older browsers). It provides the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;serialize()&lt;/code&gt; and &lt;code&gt;deserialize()&lt;/code&gt; to handle serializations in the form of static data.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;serializable()&lt;/code&gt;, &lt;code&gt;deserializable()&lt;/code&gt;, and &lt;code&gt;deserializing()&lt;/code&gt; to handle serializations in the form of readable streams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate the syntax of the methods, allow us to guide you through an example in Node.js.&lt;/p&gt;

&lt;p&gt;First, we import the CommonJS module into a variable called &lt;code&gt;JOSS&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Change the path accordingly&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/to/joss.node.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we create some dummy data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;simples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;u2661 JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bigints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;72057594037927935&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1152921504606846975&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;sparse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
  &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]]),&lt;/span&gt;
  &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/ab+c/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To serialize the data, we use the &lt;code&gt;JOSS.serialize()&lt;/code&gt; method, which returns the serialized bytes as a &lt;code&gt;Uint8Array&lt;/code&gt; or &lt;code&gt;Buffer&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To deserialize, we use the &lt;code&gt;JOSS.deserialize()&lt;/code&gt; method, which simply returns the deserialized data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we inspect the original data and deserialized data, we will find they look exactly the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be evident by now that you can migrate from JSON to JOSS by replacing all occurrences of &lt;code&gt;JSON.stringify/parse&lt;/code&gt; in your code with &lt;code&gt;JOSS.serialize/deserialize&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readable-streams"&gt;
  &lt;/a&gt;
  Readable Streams
&lt;/h3&gt;

&lt;p&gt;If the data to be serialized is large, it is better to work with readable streams to avoid blocking the JavaScript event loop.&lt;/p&gt;

&lt;p&gt;To serialize the data, we use the &lt;code&gt;JOSS.serializable()&lt;/code&gt; method, which returns a readable stream from which the serialized bytes can be read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To deserialize, we use the &lt;code&gt;JOSS.deserializable()&lt;/code&gt; method, which returns a writable stream to which the readable stream can be piped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserializable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;finish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the deserialized data, we wait for the piping process to complete and read the &lt;code&gt;result&lt;/code&gt; property of the writable stream.&lt;/p&gt;

&lt;p&gt;Whilst writable streams are well supported in Deno and Node.js, they are either not supported or not enabled by default in browsers at the present time.&lt;/p&gt;

&lt;p&gt;To deserialize when we do not have recourse to writable streams, we use the &lt;code&gt;JOSS.deserializing()&lt;/code&gt; method, which returns a &lt;code&gt;Promise&lt;/code&gt; that resolves to the deserialized data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readable2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserializing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readable2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#servers"&gt;
  &lt;/a&gt;
  Servers
&lt;/h3&gt;

&lt;p&gt;In practice, we would serialize data to be sent in an outgoing HTTP request or response, and deserialize data received from an incoming HTTP request or response.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/quantirisk/joss"&gt;reference implementation&lt;/a&gt; page contains examples on how to use JOSS in the context of the &lt;a href="https://github.com/quantirisk/joss/#fetch-api"&gt;Fetch API&lt;/a&gt;, &lt;a href="https://github.com/quantirisk/joss/#deno-http-server"&gt;Deno HTTP server&lt;/a&gt;, and &lt;a href="https://github.com/quantirisk/joss/#nodejs-http-server"&gt;Node.js HTTP server&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-remarks"&gt;
  &lt;/a&gt;
  Closing remarks
&lt;/h2&gt;

&lt;p&gt;JOSS will evolve with the JavaScript specification. To keep track of changes to JOSS, please star or watch the &lt;a href="https://github.com/quantirisk/joss"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>deno</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Database Management Systems Pt. 1</title>
      <author>Adrian Brown</author>
      <pubDate>Thu, 04 Nov 2021 01:44:08 +0000</pubDate>
      <link>https://dev.to/cloudguruab/database-management-systems-pt-1-1k7f</link>
      <guid>https://dev.to/cloudguruab/database-management-systems-pt-1-1k7f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;Lets take a look at the ecosystem for databases and the tools that govern them.&lt;/p&gt;

&lt;p&gt;To note, a database is a collection of inter-related data which helps in efficient retrieval, insertion and deletion of data from database and organizes the data in the form of tables, views, schemas, reports and more.&lt;/p&gt;

&lt;p&gt;Looking at what database management systems can do we realize that these tools are used to manage our databases out of the box. &lt;/p&gt;

&lt;p&gt;In short, a database management system is the software used to efficiently and reliably handle data processing and management. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#by-the-end-of-this-tutorial-you-will"&gt;
  &lt;/a&gt;
  By the end of this tutorial, you will
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand the fundamentals of databases&lt;/li&gt;
&lt;li&gt;Working points of DBMS&lt;/li&gt;
&lt;li&gt;How to run simple Database queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#core-concepts"&gt;
  &lt;/a&gt;
  Core Concepts
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We must always be thinking about our data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#quick-use-cases"&gt;
  &lt;/a&gt;
  Quick use cases,
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Creation of a database&lt;/li&gt;
&lt;li&gt;Retrieval of information from the database&lt;/li&gt;
&lt;li&gt;Updating the database&lt;/li&gt;
&lt;li&gt;Managing a database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With DBMS's being so important in the management of our databases a DBMS will look to focus on the following problems: Redundancy of data, Inconsistency of Data, Difficult Data Access, Unauthorized Access, No Concurrent Access, No Backup and Recovery.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h5&gt;

&lt;p&gt;The structure of a DBMS is laid out in three levels which are known as your physical, conceptual and external levels. This can be looked at as a 3-tier'd architecture in relation to what a DBMS provides. &lt;/p&gt;

&lt;p&gt;Each level will serve a specific focus for a DBMS as the physical layer is the information about the location of database objects in the data store is kept. The conceptual level data is represented in the form of various database tables. At the external level objects will specify a view of the data in terms of conceptual level tables.&lt;/p&gt;

&lt;p&gt;As noted earlier, we must always think about our data. This is important walking through the 3-tier architecture as data independence states that changes in data at one level shouldn't affect another. &lt;/p&gt;

&lt;p&gt;Types of Data Independence: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Physical Data Independence: Any change in the physical location of tables and indexes should not affect the conceptual level or external view of data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conceptual Data Independence: The data at conceptual level schema and external level schema must be independent.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This concludes the first part of my series on Database Management Systems, I will be posting more on whats to be continued shortly!&lt;/em&gt; &lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hot Take: You Don't Need To Learn Everything (Yet)</title>
      <author>Tatiana</author>
      <pubDate>Thu, 04 Nov 2021 01:24:38 +0000</pubDate>
      <link>https://dev.to/tatianacodes/hot-take-you-dont-need-to-learn-everything-at-once-90</link>
      <guid>https://dev.to/tatianacodes/hot-take-you-dont-need-to-learn-everything-at-once-90</guid>
      <description>&lt;p&gt;Learners often begin their journey with a simple Google search: "How to become a software developer". That search often leads them to complicated skill trees listing hundreds of different technologies and concepts, a swath of Reddit posts, Medium articles, and YouTubers that claim that you need to know the frontend, backend, DevOps, 3 frameworks, 6 languages, and every data structure and algorithm you can think of in order to become a professional programmer.&lt;/p&gt;

&lt;p&gt;Job descriptions are no more helpful when a newbie is trying to understand what you &lt;strong&gt;must&lt;/strong&gt; learn in order to become a professional. Similarly to the above skill trees, job listings are often notorious for listing nearly every technology under the sun for a role. In fact, it's practically a meme these days.&lt;/p&gt;

&lt;p&gt;Not only is the idea that you need to know a heck of a lot to get hired discouraging, but it's &lt;em&gt;unrealistic&lt;/em&gt;. And we should change the narrative. &lt;/p&gt;

&lt;p&gt;Here's a little secret, for the uninitiated: &lt;em&gt;you don't need to know everything- yet&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-gud"&gt;
  &lt;/a&gt;
  Git Gud
&lt;/h2&gt;

&lt;p&gt;It can be overwhelming determining exactly what you should learn, given the above issues with skill trees and job descriptions. How can you possibly be proficient in 10 different technologies, languages, and frameworks? The real answer is- it's hard, nearly impossible to be good at &lt;em&gt;everything&lt;/em&gt;. So what can you do to be competitive, then? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer: Git gud&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I argue that &lt;strong&gt;depth &amp;gt; breadth&lt;/strong&gt; when it comes to gaining a strong programming foundation and working towards that first developer role. &lt;/p&gt;

&lt;p&gt;We've all heard of the following phrase (most often only the first clause):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A jack of all trades is a master of none&lt;/strong&gt;, &lt;em&gt;but oftentimes better than a master of one&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think the entire quote is valid, to a point. Developers inherently need to learn many different things in order to keep up with the ever changing landscape of technology. Being rigid in your stack might not be feasible when trying to reach for growth not only professionally, but technically. To be clear, I believe that in order to be a great developer, having the ability to learn a lot of different things is basically a requirement. So yes, as a professional, "oftentimes better than a master of one" is pretty key.&lt;/p&gt;

&lt;p&gt;But when you're just starting out, fundamentals and learning how to learn so you can be that great developer who can quickly ramp up on different technologies is far more important than trying to split your attention between multiple languages and tools. &lt;/p&gt;

&lt;p&gt;Let’s think back to that first clause of the above quote- “a jack of all trades is a master of none”. It’s very easy to learn the basics in many things, but to develop competency and prove that to employers means moving past those barebones basics. Similarly to tutorial hell, we want to avoid the trap of being a perpetual beginner, while still growing that mindset of being a perpetual &lt;em&gt;learner&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-all-transferable"&gt;
  &lt;/a&gt;
  It's all transferable!
&lt;/h2&gt;

&lt;p&gt;Believing that learners need not learn every new framework and tool of the month prior to searching for a job, or during their initial learning does not mean that those learners will be less equipped as professional developers. It also doesn't mean that one &lt;em&gt;shouldn't&lt;/em&gt; have that sense of curiosity about other technologies. Ideally, learners should strive to get into a mindset where they can easily transfer their skills in one framework or tool to another &lt;em&gt;if they need to&lt;/em&gt;. What's important is you have strong fundamentals.&lt;/p&gt;

&lt;p&gt;Core programming concepts are frequently transferable across languages. If you know how to write a loop in one language, it's really just a matter of learning the syntax to write it in another. You've done much of the heavy lifting of learning the &lt;em&gt;concept of a loop&lt;/em&gt; when you learned your first language. At this point, it's all about making sure what you type is syntactically valid.  At the end of the day, a language, framework, or technology is just a tool. But it's a lot easier to learn a new tool if you have &lt;strong&gt;strong&lt;/strong&gt; skills and depth in another already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rockstar-developer"&gt;
  &lt;/a&gt;
  The Rockstar Developer
&lt;/h2&gt;

&lt;p&gt;As I said above, we've all become familiar with the "rockstar ninja master Jedi" job listings that seem to ask for 10 years of experience in tools that have been around for 5 years, knowledge of four different languages, and 3-5 years of experience for an entry level role. &lt;/p&gt;

&lt;p&gt;I can understand the kind of anxiety this may inspire that leads one to believe that to have a shot at this field, you &lt;strong&gt;must&lt;/strong&gt; know tons of different tools and languages. That said, it may surprise you that often these things are wish lists, or things you'll get &lt;em&gt;paid to learn on the job&lt;/em&gt;. Now, is it great to know these tools, languages, and frameworks before you apply? Sure. That's absolutely a plus to know those things. But it's entirely possible to gain employment in roles outside of your preferred stack, and honestly, it's common.&lt;/p&gt;

&lt;p&gt;In my own experience, I was all in on the MERN stack. I was targeting companies that used that stack, for the most part. I had multiple interview processes (even getting to the final round!) where the stack was not MERN. My current employer uses a completely custom front/backend framework, TypeScript, and CoffeeScript. The only thing I had in common was that they used Node and MongoDB. &lt;/p&gt;

&lt;p&gt;I lacked confidence that I would do well in the role even though I knew my skills would be transferable. I got the job anyway despite not knowing any of those tools! I'm currently working with technologies such as Kafka and Redis, which are also completely new to me. Despite all of these technologies and tools that I didn't know prior to my role, I’ve been doing great. This isn’t to say that there haven’t been hiccups, but it’s nothing the documentation, drawing on my fundamentals, and asking great questions can’t solve. We should give ourselves more credit for being flexible and able to learn. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Being a developer is committing to a career of constantly learning. You'll probably find that you're learning daily in the first few months of your first job. It's more imperative to learn how to learn so you can tackle the novel challenges you will face as your team works on new projects, rather than trying to figure it all out ahead of time. You don't need to know everything in advance. You'll often find that your team, regardless of their individual seniority, is learning right alongside you, and if they're humble, they'll shout it from the rooftops.&lt;/p&gt;

&lt;p&gt;That said, don't sweat it when it comes to facing what seems like a mountain of "need to knows". Are all of these things great to know? Sure, knowing things well can be very helpful. &lt;/p&gt;

&lt;p&gt;But if you're just starting out and aren't strong in any given technologies just yet, laser-focus your learning commitments and get &lt;em&gt;really great&lt;/em&gt; at some key skills. Express your skills through some &lt;em&gt;really great&lt;/em&gt; projects. Honing in on fundamentals and core skills will pay dividends when the time comes to branch out after you get that first job, and propel you forward towards that first job &lt;em&gt;much&lt;/em&gt; faster than splitting your attention amongst an impossible number of tools too early. Git Gud- The rest will come. &lt;/p&gt;

&lt;p&gt;Let me know your thoughts about this searing hot take below. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>learning</category>
    </item>
    <item>
      <title>Yancy: What We Leave Behind</title>
      <author>Doug Bell</author>
      <pubDate>Thu, 04 Nov 2021 01:06:11 +0000</pubDate>
      <link>https://dev.to/preaction/yancy-what-we-leave-behind-509n</link>
      <guid>https://dev.to/preaction/yancy-what-we-leave-behind-509n</guid>
      <description>&lt;p&gt;When I started the &lt;a href="http://preaction.me/yancy"&gt;Yancy Content Management System&lt;/a&gt;, my goal was to see how easy it would be to build a generic admin editor on top of a &lt;a href="https://mojolicious.org"&gt;Mojolicious&lt;/a&gt; application database. Its design was, therefore, simple: A backend layer to talk to the database, a web application to view and edit the data, and an API controller to connect the two.&lt;/p&gt;

&lt;p&gt;Now, 4 years later, Yancy is on its way to becoming the M in Mojolicious &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Growing#Model-View-Controller"&gt;MVC&lt;/a&gt;. I added &lt;a href="http://preaction.me/yancy/perldoc/Yancy/Model/"&gt;Yancy::Model&lt;/a&gt; as a place to keep data logic without the overhead of &lt;a href="https://metacpan.org/pod/DBIx::Class"&gt;DBIx::Class&lt;/a&gt;, but having a layer between the database backend and the web API enables all sorts of fun things, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom validation&lt;/li&gt;
&lt;li&gt;Packing and unpacking of complex data&lt;/li&gt;
&lt;li&gt;Automatic joining of related data&lt;/li&gt;
&lt;li&gt;Secondary, read-only backends and failover&lt;/li&gt;
&lt;li&gt;Transparent caching&lt;/li&gt;
&lt;li&gt;Data versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these things can work across different backends: A caching module that uses Redis could be a frontend for a cache of a MySQL database or a Postgres database. The code only needs to be written once and made available on &lt;a href="https://cpan.org"&gt;CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the new APIs take the place of some existing APIs and features that will have to be removed. These features were added to serve the frontend, but are awkward and limited in power compared to customizing the model API. The main features that have been deprecated are: Filters, Views, and OpenAPI.&lt;/p&gt;

&lt;p&gt;Filters were added to enable the frontend to do password hashing. By adding &lt;code&gt;x-filter&lt;/code&gt; to the configuration, a field or a row could have one or more filters applied to it before being written to the database. With the addition of the model API, filters can be added more easily and explicitly by creating a &lt;a href="http://preaction.me/yancy/perldoc/Yancy/Guides/Model/#Starting-a-Custom-Model"&gt;custom Schema class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Views were a way to present subsets of data to a user through the frontend application. Instead of seeing all the raw information an application needs for a user, the editor could be made to show just the important information for the administrator or content manager. This, much like filters, can be done more robustly through the model API, or even directly through your database.&lt;/p&gt;

&lt;p&gt;Last, the &lt;a href="http://openapis.org"&gt;OpenAPI&lt;/a&gt; spec was how the frontend app analyzed the data schema to determine what it could do. However, since every schema can only do the same four operations (create, read, update, and delete), reading the OpenAPI spec to handle operations is needless complexity. The generated API could be used by more than just the Yancy editor, so the code for generating OpenAPI specs from Yancy schemas has been moved to &lt;a href="https://metacpan.org/pod/Yancy::Plugin::OpenAPI"&gt;the Yancy::Plugin::OpenAPI module on CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yancy v2 has been &lt;a href="https://github.com/preaction/Yancy/issues/25"&gt;planned and in development for quite a while&lt;/a&gt;, but it is nearing completion. When v2 is released, these deprecated features will be removed. What will remain is a leaner, easier-to-use content management system for the best web framework out there.&lt;/p&gt;

</description>
      <category>mojolicious</category>
      <category>perl</category>
      <category>webdev</category>
      <category>yancy</category>
    </item>
  </channel>
</rss>
