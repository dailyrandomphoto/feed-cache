<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS can help improve your HTML‚Åâ - Ep 2: buttons and links.</title>
      <author>InHuOfficial</author>
      <pubDate>Wed, 15 Dec 2021 13:07:06 +0000</pubDate>
      <link>https://dev.to/inhuofficial/css-can-help-improve-your-html-ep-2-buttons-and-links-21m9</link>
      <guid>https://dev.to/inhuofficial/css-can-help-improve-your-html-ep-2-buttons-and-links-21m9</guid>
      <description>&lt;p&gt;Part 2 of using CSS to make our HTML better!&lt;/p&gt;

&lt;p&gt;In this second part of this series we will be exploring how we can use CSS to ensure (and enforce) that we are using &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements correctly...you would be surprised how many developers get this wrong!&lt;/p&gt;

&lt;p&gt;If you missed part one you may need to have a quick read of that so you get the key concepts as I won't be repeating them in detail here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/using-css-to-prevent-html-errors-ep-1-alt-attributes-11o8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS can help improve your HTML‚Åâ - Ep 1: alt attributes&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Dec 11 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;All caught up? Great!&lt;/p&gt;

&lt;p&gt;Before we start part 2, it is worth mentioning (reiterating) that this concept relies on two style sheets.&lt;/p&gt;

&lt;p&gt;One for production (and development) and one for development &lt;strong&gt;only&lt;/strong&gt; (the one containing error messages).&lt;/p&gt;

&lt;p&gt;In the fiddles I have indicated which styles you would use in your &lt;strong&gt;production&lt;/strong&gt; stylesheet and which to use in your &lt;strong&gt;development&lt;/strong&gt; stylesheet!&lt;/p&gt;

&lt;p&gt;Right, with that reminder out of the way, let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-button-is-a-button"&gt;
  &lt;/a&gt;
  A button is a button!
&lt;/h2&gt;

&lt;p&gt;I know I keep saying it and I sound like a broken record but, a button is a button!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;They...just...won't...learn ü§¶‚Äç‚ôÇÔ∏è - a button is a &amp;amp;lt;button&amp;amp;gt;! [Series: Accessibility Rants]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª May 27 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;See, I told you I keep saying it!&lt;/p&gt;

&lt;p&gt;But what if we could guide our developers towards this logical conclusion using CSS?&lt;/p&gt;

&lt;p&gt;Well first thing is first, we can make it so our &lt;code&gt;.btn&lt;/code&gt; class &lt;strong&gt;only&lt;/strong&gt; works on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Try and use the &lt;code&gt;.btn&lt;/code&gt; class on anything else and it just won't work!&lt;/p&gt;

&lt;p&gt;but we can do better than that!&lt;/p&gt;

&lt;p&gt;What if we can also give our team a little bit of a warning to let them know they have used the wrong element?&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c"&gt;/* wrong element error highlighting */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#meaningful-error-messages"&gt;
  &lt;/a&gt;
  Meaningful error messages
&lt;/h3&gt;

&lt;p&gt;Now while adding outlines to stuff that is wrong is great, it isn't very informative.&lt;/p&gt;

&lt;p&gt;Luckily we can fix that also!&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;:after&lt;/code&gt; we can insert an error message&lt;/p&gt;

&lt;p&gt;So we end up with a selector to add an outline and another selector to add a warning that is the same but using the &lt;code&gt;:after&lt;/code&gt; pseudo selector.&lt;/p&gt;

&lt;p&gt;By utilising the &lt;code&gt;content&lt;/code&gt; property we can add a custom error message!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;/* outlines */&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="c"&gt;/* error message */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example-for-buttons"&gt;
  &lt;/a&gt;
  Example for buttons
&lt;/h3&gt;

&lt;p&gt;In this example we have a real button and a fake button made with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Notice how the real button works and the fake button has no styling as well as an error message!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/inhuofficial/embed/BawWjKg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#taking-it-one-step-further"&gt;
  &lt;/a&gt;
  Taking it one step further!
&lt;/h3&gt;

&lt;p&gt;I would argue that for most sites we can actually go one step further and completely do away with the &lt;code&gt;.btn&lt;/code&gt; class on our buttons!&lt;/p&gt;

&lt;p&gt;This helps with consistency, looks neater and enforces our policy of &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s for buttons!&lt;/p&gt;

&lt;p&gt;At this point we no longer even need an error check as we can only get styling on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;We can do this by using the element as the selector &lt;code&gt;button{}&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;However this may have one unintended consequence...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thats-great-but-we-often-style-anchors-like-buttons"&gt;
  &lt;/a&gt;
  That's great, but we often style anchors like buttons!
&lt;/h3&gt;

&lt;p&gt;And that is a valid point and nowadays, you are right!&lt;/p&gt;

&lt;p&gt;However we can recycle our selector from the first part so we can have a &lt;code&gt;.btn&lt;/code&gt; class &lt;strong&gt;only&lt;/strong&gt; on anchors (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;)!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c"&gt;/* our styles for buttons! */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This does mean we have to reintroduce our error checks though, but this time to ensure that we only use the &lt;code&gt;.btn&lt;/code&gt; class on an anchor!&lt;/p&gt;

&lt;p&gt;This raises an interesting question, do we want an error to show if we have a &lt;code&gt;.btn&lt;/code&gt; class on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;If we &lt;strong&gt;do&lt;/strong&gt; then our error selector just needs a subtle change&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will add our error messages to &lt;code&gt;&amp;lt;button class="btn"&lt;/code&gt;, which might be confusing.&lt;/p&gt;

&lt;p&gt;As it won't do any harm having the &lt;code&gt;.btn&lt;/code&gt; class on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (as we have no valid selector for it anyway) I would think it better to not show error messages in this instance.&lt;/p&gt;

&lt;p&gt;Yet again the power of CSS makes this relatively simple, we can add multiple items within our &lt;code&gt;:not&lt;/code&gt; selector!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is saying:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select all items with the &lt;code&gt;.btn&lt;/code&gt; class&lt;/li&gt;
&lt;li&gt;that are not (&lt;code&gt;:not()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;an anchor (&lt;code&gt;a&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;OR a button &lt;code&gt;,button&lt;/code&gt; (comma seperated).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#example-including-anchors"&gt;
  &lt;/a&gt;
  Example including anchors
&lt;/h3&gt;

&lt;p&gt;Bringing everything together we end up with the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/inhuofficial/embed/VwMperq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Looks great, but we can go &lt;strong&gt;even&lt;/strong&gt; further!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-we-only-want-valid-anchors"&gt;
  &lt;/a&gt;
  But we only want valid anchors
&lt;/h3&gt;

&lt;p&gt;Now that we have allowed the &lt;code&gt;.btn&lt;/code&gt; class to be added to anchors we have opened up another problem!&lt;/p&gt;

&lt;p&gt;The dreaded &lt;code&gt;&amp;lt;a href="#"&lt;/code&gt; or &lt;code&gt;&amp;lt;a href="javascript: void()&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;This anti-pattern has not been needed since HTML5 (you did read my rant on buttons I linked earlier didn't you?).&lt;/p&gt;

&lt;p&gt;So how can we fix this one?&lt;/p&gt;

&lt;p&gt;Well in part 1 we used attribute selectors &lt;code&gt;[attr]&lt;/code&gt; and once again they can come to our rescue!&lt;/p&gt;

&lt;p&gt;As this is a site wide error (it should never be used!) we can ignore the &lt;code&gt;.btn&lt;/code&gt; selector and just focus on anchors!&lt;/p&gt;

&lt;p&gt;The first one is easier to solve, we select any anchors with a &lt;code&gt;href="#"&lt;/code&gt; (and while we are at it an empty &lt;code&gt;href&lt;/code&gt; or missing &lt;code&gt;href&lt;/code&gt; too!)&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt; &lt;span class="c"&gt;/* A missing href attribute! */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="c"&gt;/* an empty (or null) href */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"#"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c"&gt;/* the anti pattern! */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That covers most of them, we just need to highlight the JavaScript anti-pattern!&lt;/p&gt;

&lt;p&gt;Yet again we covered this in part 1, we can use the "begins with" notation:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"javascript:"&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remember the "i" at the end to make it case insensitive.&lt;/p&gt;

&lt;p&gt;We used the "begins with" &lt;code&gt;^=&lt;/code&gt; syntax for this example as it doesn't have to be &lt;code&gt;javascript: void()&lt;/code&gt;, this way we can capture all JavaScript &lt;code&gt;href&lt;/code&gt;s no matter what function they call!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-for-valid-anchors"&gt;
  &lt;/a&gt;
  Example for valid anchors!
&lt;/h3&gt;

&lt;p&gt;Utilising the same system of using &lt;code&gt;:after&lt;/code&gt; we can add messages to our anchors as well!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/inhuofficial/embed/wvrJMQM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We can make this much better by having separate message depending on whether the problem is a missing &lt;code&gt;href&lt;/code&gt;, bad &lt;code&gt;href&lt;/code&gt; or the use of JavaScript. I haven't done that in the example but you would do it as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"missing href attr"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"#"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"anti-pattern on href detected"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"empty or null href"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"javascript:"&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"using javascript in href anti-pattern detected"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;A lot of what we learned in part 1 has carried over to part 2. &lt;/p&gt;

&lt;p&gt;It is just that our selectors have become a little more complex.&lt;/p&gt;

&lt;p&gt;But hopefully you can see how this allows us to enforce business style guides once again (having or not requiring a &lt;code&gt;.btn&lt;/code&gt; class on &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements for example). &lt;/p&gt;

&lt;p&gt;In the next part we are going to focus on document structure best practices and introduce some WAI-ARIA attributes and some tips and tricks with those!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for Reading!
&lt;/h2&gt;

&lt;p&gt;Thanks for reading, I hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;In fact to show my appreciation please do have a virtual ‚ù§ and ü¶Ñ to show how much it means to me!&lt;/p&gt;

&lt;p&gt;If you enjoyed this and want something just a &lt;em&gt;little&lt;/em&gt; (OK a &lt;strong&gt;lot&lt;/strong&gt; longer I have written) why not read my monster accessibility tips article:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility (a11y) tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jul 30 „Éª 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Have a great week!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>a11y</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Unit testing service workers</title>
      <author>Gaurav Behere</author>
      <pubDate>Wed, 15 Dec 2021 13:03:27 +0000</pubDate>
      <link>https://dev.to/gauravbehere/unit-testing-service-workers-l9j</link>
      <guid>https://dev.to/gauravbehere/unit-testing-service-workers-l9j</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Writing unit tests for service workers made easy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvfPVgTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seeklogo.com/images/J/jest-logo-F9901EBBF7-seeklogo.com.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvfPVgTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seeklogo.com/images/J/jest-logo-F9901EBBF7-seeklogo.com.png" width="272" height="300"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBz1FsE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/694/1%2AaO4HRVpU1zQ22rvhAeSK1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBz1FsE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/694/1%2AaO4HRVpU1zQ22rvhAeSK1w.png" width="694" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prelude"&gt;
  &lt;/a&gt;
  Prelude
&lt;/h2&gt;

&lt;p&gt;While service workers amaze us with its capabilities to cache requests, edit headers before putting requests on the network etc.&lt;br&gt;
I think you will agree that unit testing service workers is not straight-forward.&lt;br&gt;
The biggest question is 'what to mock?'&lt;/p&gt;

&lt;p&gt;A big shout out to Zack Argyle for writing &lt;a href="https://github.com/zackargyle/service-workers/tree/master/packages/service-worker-mock"&gt;Service Worker Mock&lt;/a&gt;. This library prepares all the mocks &amp;amp; lets your tests have an environment where you have the recipe to test your service worker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h2&gt;

&lt;p&gt;This code sample is an enhancement on top of &lt;a href="https://github.com/zackargyle/service-workers/tree/master/packages/service-worker-mock"&gt;Service Worker Mock&lt;/a&gt;. Service Worker Mock explains how to write unit tests for service works. &lt;code&gt;Since it is not maintained any more, I am writing this code sample to unblock ourselves from the current issues in that library.&lt;/code&gt;&lt;br&gt;
Tests are written using the sample service worker given at &lt;a href="https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/basic/service-worker.js"&gt;service worker example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-with-the-current-version-205-of-service-worker-mock"&gt;
  &lt;/a&gt;
  Problem with the current version (2.0.5) of service worker mock
&lt;/h2&gt;

&lt;p&gt;Object.assign(global, makeServiceWorkerEnv()) no longer puts EventTarget methods like addEventListener into the global scope because they are no longer "own" properties of ServiceWorkerGlobalScope&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workaround"&gt;
  &lt;/a&gt;
  Workaround
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make &lt;code&gt;addEventListener&lt;/code&gt; an enumerable property
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;beforeEach(() =&amp;gt; {
   const serviceWorkerEnv = makeServiceWorkerEnv();
   Object.defineProperty(serviceWorkerEnv, 'addEventListener', {
      value: serviceWorkerEnv.addEventListener,
      enumerable: true
   });
   Object.assign(global, serviceWorkerEnv)
   jest.resetModules();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-event-registration"&gt;
  &lt;/a&gt;
  Testing Event registration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should add listeners', async () =&amp;gt; {
  require('../src/sample-sw');
  await self.trigger('install');
  expect(self.listeners.get('install')).toBeDefined();
  expect(self.listeners.get('activate')).toBeDefined();
  expect(self.listeners.get('fetch')).toBeDefined();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-cache-deletion-on-activation"&gt;
  &lt;/a&gt;
  Testing cache deletion on activation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should delete old caches on activate', async () =&amp;gt; {
  require('../src/sample-sw');

  // Create old cache
  await self.caches.open('OLD_CACHE');
  expect(self.snapshot().caches.OLD_CACHE).toBeDefined();

  // Activate and verify old cache is removed
  await self.trigger('activate');
  expect(self.snapshot().caches.OLD_CACHE).toStrictEqual({});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-fetch-event-to-see-if-it-returns-cached-response"&gt;
  &lt;/a&gt;
  Testing fetch event to see if it returns cached response
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should return a cached response', async () =&amp;gt; {
  require('../src/sample-sw');

  const cachedResponse = { clone: () =&amp;gt; { }, data: { key: 'value' } };
  const cachedRequest = new Request('/test');
  const cache = await self.caches.open('TEST');
  cache.put(cachedRequest, cachedResponse);

  const response = await self.trigger('fetch', cachedRequest);
  expect(response.data.key).toEqual('value');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-if-fetch-event-makes-network-call-amp-updates-cache-also-test-any-custom-logic-like-appending-a-bearer-token-in-the-request"&gt;
  &lt;/a&gt;
  Testing if fetch event makes network call &amp;amp; updates cache. Also test any custom logic like appending a bearer token in the request
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should fetch and cache an uncached request and append the right auth token in the header', async () =&amp;gt; {
  const mockResponse = { clone: () =&amp;gt; { return { data: { key: 'value' } } } };
  global.fetch = (response) =&amp;gt; Promise.resolve({ ...mockResponse, headers: response.headers });

  require('../src/sample-sw');

  const request = new Request('/test');
  const response = await self.trigger('fetch', request);
  expect(response.clone()).toEqual(mockResponse.clone());

  expect(response.headers.get('authorization')).toBe('Bearer my secret auth');

  const runtimeCache = self.snapshot().caches.runtime;
  expect(runtimeCache[request.url]).toEqual(mockResponse.clone());
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-if-the-requests-to-the-external-domains-are-ignored"&gt;
  &lt;/a&gt;
  Testing if the requests to the external domains are ignored
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should ignore the requests to external world', async () =&amp;gt; {
  const mockResponse = { clone: () =&amp;gt; { return { data: { key: 'value' } } } };
  global.fetch = (response) =&amp;gt; Promise.resolve({ ...mockResponse, headers: response.headers });

  require('../src/sample-sw');

  const request = new Request('http://google.com');
  const response = await self.trigger('fetch', request);
  expect(response).not.toBeDefined();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E84qpuYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gauravbehere/unit-test-service-worker/main/coverage.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E84qpuYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gauravbehere/unit-test-service-worker/main/coverage.PNG" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epilogue"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h2&gt;

&lt;p&gt;Check out the code repo for this sample here:&lt;br&gt;
&lt;a href="https://github.com/gauravbehere/unit-test-service-worker"&gt;unit-test-service-worker&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why should you build for the Shopify App Store? (+How to Start)</title>
      <author>Erman K√ºpl√º</author>
      <pubDate>Wed, 15 Dec 2021 12:37:25 +0000</pubDate>
      <link>https://dev.to/analyzify/why-should-you-build-for-the-shopify-app-store-how-to-start-1k18</link>
      <guid>https://dev.to/analyzify/why-should-you-build-for-the-shopify-app-store-how-to-start-1k18</guid>
      <description>&lt;p&gt;I realize more and more that the Shopify market is being overlooked by developer communities. Whereas we have been active on the platform for almost a year now and &lt;strong&gt;can‚Äôt be happier&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In this post, I will try to give you some reasons why you should give Shopify's App Store a chance and shortly share our story and gainings. Feel free to ask your questions in the comments section, I will do my best to answer. &lt;/p&gt;

&lt;p&gt;Here is a quick summary of why this is a great market: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A rapidly growing market with over &lt;strong&gt;1.7 million stores&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;%0 commission&lt;/strong&gt; on Shopify App Store, &lt;/li&gt;
&lt;li&gt;84% Shopify Partners revenue growth (a 84% increase year-over-year)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;$12.5 billion&lt;/strong&gt; in revenue in 2020 and that is 4x the revenue of Shopify‚Äôs own platform. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs now get into the details. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopify-partners-ecosystem"&gt;
  &lt;/a&gt;
  Shopify Partners‚Äô Ecosystem
&lt;/h2&gt;

&lt;p&gt;It is no secret that Shopify became Shopify because of its partner ecosystem. It is one of the first companies who has an understanding of the value of partners and built an amazing API infrastructure. &lt;/p&gt;

&lt;p&gt;There are countless needs in the e-commerce field for merchants. But Shopify didn‚Äôt opt for   building everything, and Instead, they focused on the core business and left the rest for the partners. &lt;/p&gt;

&lt;p&gt;As an example, it is hard to believe that Shopify‚Äôs core product is missing too many important features, one of them being ‚ÄúSubscriptions‚Äù. You can not add a subscription feature to your e-commerce store if you are not using one of the apps. &lt;/p&gt;

&lt;p&gt;Shopify partners‚Äô ecosystem includes the following elements: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://apps.shopify.com/"&gt;Shopify Apps&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://themes.shopify.com/"&gt;Shopify Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://experts.shopify.com/"&gt;Shopify Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://help.shopify.com/en/affiliates"&gt;Shopify Affiliates&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are many other professionals or agencies that are not officially included in the ecosystem but still work as a ‚ÄúShopify Developer‚Äù or ‚ÄúShopify Agency‚Äù. This helps Shopify grow even more - and make merchants happy because there are 1000‚Äôs of professionals or resources available when they need help. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopify-app-store-as-a-market"&gt;
  &lt;/a&gt;
  Shopify App Store as a Market
&lt;/h2&gt;

&lt;p&gt;Merchants have a lot of needs - and they constantly search for apps to solve their problems and make their store better. &lt;/p&gt;

&lt;p&gt;At the moment, there are 6000+ apps in the app store. And a merchant uses 6 apps on average. It is not hard to build an app - or to be accepted to the app store. &lt;/p&gt;

&lt;p&gt;As far as I know, it is one of the rare ‚Äúapp stores‚Äù in the world that &lt;strong&gt;has 0% commission&lt;/strong&gt;. Shopify removed its 20% commission this summer. You don‚Äôt have to pay any commission if your annual revenue is under $1M. &lt;/p&gt;

&lt;p&gt;There are some giant players in the app store as well: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Klaviyo - recently valued at $4B+&lt;/li&gt;
&lt;li&gt;Privy - with over $2B+ valuation&lt;/li&gt;
&lt;li&gt;Bold Commerce - received $40M+ investment&lt;/li&gt;
&lt;li&gt;Oberlo - acquired by Shopify for $15m&lt;/li&gt;
&lt;li&gt;and many others. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, the Shopify app store is not only for big players. There are hundreds of independent developers who build on Shopify and achieve double-digit MRRs in such a short amount of time such as &lt;a href="https://twitter.com/gilgNYC/status/1470378485667483650?s=20"&gt;Gil&lt;/a&gt; and &lt;a href="https://www.indiehackers.com/post/bootstrapped-a-shopify-app-to-500-paying-clients-with-an-mvp-ama-7dbaf8084e"&gt;myself&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-shopify-apps"&gt;
  &lt;/a&gt;
  How to build Shopify apps?
&lt;/h3&gt;

&lt;p&gt;I am not a developer myself. However, I have only heard great things about Shopify‚Äôs API and how easy it is to build things for Shopify. They don‚Äôt have tech-stack requirements. &lt;/p&gt;

&lt;p&gt;You can literally build with any programming language and host your app anywhere you like. You will have to use Shopify‚Äôs API to authenticate and charge users. Shopify apps can work in an EMBEDDED or INDEPENDENT format that opens in a new tab. &lt;/p&gt;

&lt;p&gt;Here‚Äôs a GIF for you to see how it looks üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GhpnDncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ixn4oodxharjsxtlqzg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GhpnDncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ixn4oodxharjsxtlqzg.gif" alt="Shopify App Store Embedded Apps" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see on the example, our app Analyzify works in the EMBEDDED format while the other app opens in the new tab. Most apps choose the ‚ÄúNew Tab‚Äù solution. &lt;/p&gt;

&lt;p&gt;We firstly built Analyzify with Ruby &amp;amp; Rails - now we are switching to No-Code &amp;amp; Low-Code stack. I have seen many apps that use the Laravel framework. It is just about your t&lt;br&gt;
aste and capabilities. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#approval-process-amp-going-to-production"&gt;
  &lt;/a&gt;
  Approval Process &amp;amp; Going to Production:
&lt;/h3&gt;

&lt;p&gt;Our app was approved within 5 days. We initially received a rejection because of the wrong use of the payment gateway. We have made the asked changes and it got immediately approved. &lt;/p&gt;

&lt;p&gt;I can only say good things about Shopify Partners‚Äô support. They are very helpful and willing to answer the questions you should have. We have also got some support from Shopify developers‚Äô Slack group. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-sales-on-the-shopify-app-store"&gt;
  &lt;/a&gt;
  Getting Sales on the Shopify App Store:
&lt;/h3&gt;

&lt;p&gt;The app developers keep giving the same suggestion: ‚ÄúDon‚Äôt rely on the app store for the sales‚Äù. That‚Äôs true: while there are too many searches happening on the app store,you should still look for alternative customer acquisition channels. &lt;/p&gt;

&lt;p&gt;At Analyzify, we have only gone for organic channels such as content marketing, video marketing, SEO, and Shopify community forums. Many app developers are using Shopify App Store Ads that work with the PPC model. &lt;/p&gt;

&lt;p&gt;Merchants don‚Äôt really rely on the App Store, but instead, they search Google. You will find a lot of listicles like ‚ÄúThe Best Shopify Apps for X‚Äù. You will need to make yourself visible there - and probably make your own list just like we did: &lt;strong&gt;&lt;a href="https://analyzify.app/google-tag-manager-shopify/apps"&gt;Shopify Google Tag Manager Apps&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;I also see a lot of app developers who rely on merchants‚Äô communities such as Facebook &amp;amp; Slack Groups, Twitter conversations, Discord Channels, and so on. &lt;/p&gt;

&lt;p&gt;Depending on your competition, you might have to be a bit more creative and hard-working here. All will work if you create a &lt;strong&gt;good product&lt;/strong&gt; and make your &lt;strong&gt;clients happy&lt;/strong&gt;. Simple as that. &lt;/p&gt;

&lt;p&gt;As in almost every app store, &lt;strong&gt;reviews are crucial&lt;/strong&gt; on the Shopify app store as well. The merchants don‚Äôt tend to give reviews for regular apps and experiences. You need to provide exceptional customer support to get proper reviews. The sales will go way higher once you pass 10+ positive reviews. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woo8P5Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxrus7x6dwbswco63haw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woo8P5Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxrus7x6dwbswco63haw.jpeg" alt="Analyzify - Shopify Analytics App Reviews" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-apps-should-you-build-for-shopify"&gt;
  &lt;/a&gt;
  What kind of apps should you build for Shopify?
&lt;/h3&gt;

&lt;p&gt;Well, that‚Äôs a great question that everybody asks. There are several methods to start with: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serve to Shopify clients&lt;/strong&gt;. Provide services to them on your domain. That‚Äôll help you understand and get to know them. They will immediately start telling you ‚ÄúOnly if I had an app for X‚Äù, etc. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hang out in the &lt;strong&gt;Shopify community forums&lt;/strong&gt; &amp;amp; Reddit &amp;amp; Twitter. Merchants keep asking ‚ÄúIs there an app for X?‚Äù or complaining about the apps that they are using. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Study the app store. &lt;strong&gt;Check the apps with negative reviews&lt;/strong&gt; and try to understand if you can make that negative experience better. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep reading below - I‚Äôll mention some latest updates from the Shopify ecosystem. &lt;/p&gt;

&lt;p&gt;I would also recommend not to fear the competition. Of course, don‚Äôt go and create a ‚ÄúPage Builder App‚Äù where top developers have 2000+ reviews. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgVJhwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgz4f6qju9h2az2v9c6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgVJhwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgz4f6qju9h2az2v9c6.jpg" alt="Shopify App Store - Page Builders" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find a smaller competition and make things better. You will have the advantage of building from scratch and building the things the competitors are too busy to do. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#latest-updates-amp-opportunities-on-shopify-world"&gt;
  &lt;/a&gt;
  Latest Updates &amp;amp; Opportunities on Shopify World
&lt;/h2&gt;

&lt;p&gt;Shopify keeps opening new developer spaces for partners. They announced a few major upcoming changes in the latest Shopify unite event. You might want to take a closer look at that  because the existing Shopify partners are always too busy with their roadmap and clients. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;&lt;a href="https://www.shopify.com/partners/blog/shopify-online-store"&gt;Online Store 2.0&lt;/a&gt;: *&lt;/em&gt;&lt;br&gt;
They released a large update on how to build themes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Online Store 2.0 opens up massive opportunities for developers building themes and apps for Shopify merchants. We‚Äôve rebuilt the online store experience from the ground up, and are introducing a new set of developer tools to help you create amazing experiences for merchants and shoppers. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://themes.shopify.com/"&gt;Theme Store is back again&lt;/a&gt;: &lt;br&gt;
Shopify had closed their theme stores but now it is reopened. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://hydrogen.shopify.dev/"&gt;Headless Shopify (React!)&lt;/a&gt;: &lt;br&gt;
Well, of course, they are going after the headless market. They announced Shopify Hydrogen. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hydrogen's React-based framework for building custom storefronts on Shopify gives you everything you need to start fast, build fast, and deliver the best-personalized shopping experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NFTs: &lt;br&gt;
Shopify is also looking to integrate with the NFT market. They recently released &lt;a href="https://help.shopify.com/en/manual/products/digital-service-product/nfts"&gt;a BETA program for this&lt;/a&gt; - only available in the US for now. &lt;/p&gt;

&lt;p&gt;Final Words: &lt;/p&gt;

&lt;p&gt;I strongly recommend you build something on Shopify depending on your skills. Create an MVP version, watch the market closely and enter when you feel ready. &lt;/p&gt;

&lt;p&gt;We have reached 500+ merchants and over $15K MRR only in 8 months. This is huge for us considering it was our first attempt on the Shopify app store. Now we started building more apps and new features for our existing app. &lt;/p&gt;

&lt;p&gt;I am more than willing to answer your questions. Leave it in the comments section! &lt;/p&gt;

</description>
      <category>shopify</category>
      <category>shopifyapp</category>
      <category>shopifypartners</category>
      <category>analzify</category>
    </item>
    <item>
      <title>Streaming Data to OpenSearch</title>
      <author>Matt Lewis</author>
      <pubDate>Wed, 15 Dec 2021 12:24:02 +0000</pubDate>
      <link>https://dev.to/aws-heroes/streaming-data-to-opensearch-1gb2</link>
      <guid>https://dev.to/aws-heroes/streaming-data-to-opensearch-1gb2</guid>
      <description>&lt;p&gt;In previous posts I described how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aws-heroes/real-time-streaming-for-amazon-qldb-3c3c"&gt;Stream data from QLDB to DynamoDB&lt;/a&gt; to support single-digit latency and infinitely scalable key-value enquiries, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aws-heroes/streaming-data-from-amazon-qldb-to-elasticsearch-78c"&gt;Stream data from QLDB to ElasticSearch&lt;/a&gt; to support rich text search and downstream analytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was all created in a source code repository that anyone could try out for themselves. Recently, &lt;a href="https://twitter.com/sheenbrisals"&gt;Sheen Brisals&lt;/a&gt; wrote a great post on &lt;a href="https://betterprogramming.pub/why-serverless-teams-should-embrace-continuous-refactoring-217d4e67db5b"&gt;"Why Serverless Teams should embrace Continuous Refactoring"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given that, I thought I would go back and update the repository, in line with new features and changes over the past 12 months:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updating the QLDB permissions mode to &lt;code&gt;STANDARD&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Implementing fine grained access control for all functions accessing QLDB&lt;/li&gt;
&lt;li&gt;Updating to the latest version of Nodejs&lt;/li&gt;
&lt;li&gt;Switching from &lt;code&gt;webpack&lt;/code&gt; to &lt;code&gt;esbuild&lt;/code&gt; for tree shaking&lt;/li&gt;
&lt;li&gt;Migrating from ElasticSearch to OpenSearch&lt;/li&gt;
&lt;li&gt;Configuring Amazon Cognito authentication for OpenSearch Dashboards&lt;/li&gt;
&lt;li&gt;Implementing custom metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post focuses on the last three updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-opensearch-service"&gt;
  &lt;/a&gt;
  Amazon OpenSearch Service
&lt;/h2&gt;

&lt;p&gt;AWS &lt;a href="https://aws.amazon.com/blogs/aws/amazon-elasticsearch-service-is-now-amazon-opensearch-service-and-supports-opensearch-10/"&gt;announced&lt;/a&gt; on 8th Sept 2021 that they had renamed Amazon ElasticSearch Service to Amazon OpenSearch Service. This is an Apache 2.0-licensed fork of ElasticSearch that is community-driven and open source.&lt;/p&gt;

&lt;p&gt;In the previous deployment, ElasticSearch was configured to run within your VPC. This is still the recommended approach from a security standpoint. However, to make things simpler for people to get up and running, I wanted to deploy OpenSearch with a public endpoint instead. In addition, I wanted to protect access to OpenSearch Dashboards using Amazon Cognito.&lt;/p&gt;

&lt;p&gt;The full source code can be found at &lt;a href="https://github.com/AWS-South-Wales-User-Group/qldb-simple-demo"&gt;QLDB Simple Demo&lt;/a&gt;, but lets walk through the main steps involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-amazon-cognito"&gt;
  &lt;/a&gt;
  Setting up Amazon Cognito
&lt;/h2&gt;

&lt;p&gt;The first thing to setup in our &lt;code&gt;serverless.yml&lt;/code&gt; file is the Cognito User Pool. This provides the user directory to control access to OpenSearch Dashboards. The setup below asks for name and email attributes at sign up, as well as a username and password. The email will be verified by entering a code that is sent to the specified email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSUserPool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::UserPool&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;UsernameConfiguration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;CaseSensitive&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="na"&gt;AutoVerifiedAttributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
    &lt;span class="na"&gt;UserPoolName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;qldb-demo-user-pool&lt;/span&gt;
    &lt;span class="na"&gt;Schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDataType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
        &lt;span class="na"&gt;Mutable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;Required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDataType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
        &lt;span class="na"&gt;Mutable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;Required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is the UserPoolDomain. This provides a domain name to be used as part of the hosted UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSUserPoolDomain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::UserPoolDomain&lt;/span&gt; 
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;UserPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSUserPool&lt;/span&gt; 
    &lt;span class="na"&gt;Domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;qldb-opensearch-demo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, we define the Cognito Identity Pool. We use this to provide a way to grant temporary AWS credentials for users. This is necessary, as to support a public endpoint on the OpenSearch domain, we need to enable fine-grained access control or apply a restrictive access policy. We don't configure the CognitoIdentityProviders, as these will be created for us by the OpenSearch service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSIdentityPool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::IdentityPool&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;IdentityPoolName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;qldb-demo-identity-pool&lt;/span&gt;
    &lt;span class="na"&gt;AllowUnauthenticatedIdentities&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we create two roles, one for an authenticated identity, and one for an unauthenticated identity. The one for the authenticated identity is shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CognitoAuthorizedRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::IAM::Role"&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Allow"&lt;/span&gt;
            &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="na"&gt;Federated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;cognito-identity.amazonaws.com"&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sts:AssumeRoleWithWebIdentity"&lt;/span&gt;
            &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;StringEquals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
                &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;cognito-identity.amazonaws.com:aud"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
            &lt;span class="s"&gt;ForAnyValue:StringLike:&lt;/span&gt;
                &lt;span class="s"&gt;"cognito-identity.amazonaws.com:amr": authenticated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a trust policy for an authenticated role. It allows a federated user from &lt;code&gt;cognito-identity.amazonaws.com&lt;/code&gt; (the issuer of the OpenID Connect token) to assume this role. It also places a condition, that restricts the &lt;code&gt;aud&lt;/code&gt; of the token (the client ID of the relying party) to be the Cognito Identity Pool, and the &lt;code&gt;amr&lt;/code&gt; of the token contains the value &lt;code&gt;authenticated&lt;/code&gt;. When Amazon Cognito creates a token, it will set the &lt;code&gt;amr&lt;/code&gt; of the token to be either &lt;code&gt;unauthenticated&lt;/code&gt; or &lt;code&gt;authenticated&lt;/code&gt;. There is no policy attached to this identity, as we are going to control access to OpenSearch through a resource policy attached to the OpenSearch domain.&lt;/p&gt;

&lt;p&gt;After defining the two roles with the associated policies, we map them to the Identity Pool using an IdentityPoolRoleAttachment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;IdentityPoolRoleMapping&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::Cognito::IdentityPoolRoleAttachment"&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;IdentityPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
    &lt;span class="na"&gt;Roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;authenticated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoAuthorizedRole.Arn&lt;/span&gt;
        &lt;span class="na"&gt;unauthenticated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoUnAuthorizedRole.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then its time to define a role that the OpenSearch service can assume, that includes permissions to configure the Cognito user and identity pools and use them for authentication. This can be done using the &lt;code&gt;AmazonOpenSearchServiceCognitoAccess&lt;/code&gt; AWS-managed policy as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSCognitoRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AWS::IAM::Role'&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;RoleName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CognitoAccessForAmazonOpenSearch'&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2012-10-17'&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es.amazonaws.com&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;sts:AssumeRole'&lt;/span&gt;
    &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/"&lt;/span&gt;
    &lt;span class="na"&gt;ManagedPolicyArns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, its time to create the OpenSearch domain, with the &lt;code&gt;CognitoOptions&lt;/code&gt; referencing the role defined above, as well as the Cognito user and identity pool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OpenSearch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::OpenSearchService::Domain&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DomainName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#{AWS::StackName}"&lt;/span&gt;
    &lt;span class="na"&gt;EngineVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;OpenSearch_1.0'&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;CognitoOptions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;IdentityPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
        &lt;span class="na"&gt;RoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;OSCognitoRole.Arn&lt;/span&gt;
        &lt;span class="na"&gt;UserPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSUserPool&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;AccessPolicies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;AWS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoAuthorizedRole.Arn&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es:ESHttpGet&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es:ESHttpPost&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;AWS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
          &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;es:ESHttp*&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*&lt;/span&gt;
            &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;StringLike&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;aws:PrincipalArn"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::#{AWS::AccountId}:role/qldb-streams-es-lambda-role-${self:provider.stage}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All access to the domain is controlled through the resource policy that is applied. The first statement allows the authenticated Cognito user to access the domain. The second statement allows access to the domain from the execution role attached to the AWS Lambda function. You might notice that this is defined in a different way. A circular dependency exists, as the Lambda function needs the OpenSearch domain endpoint which is set up as an environment variable. Using a condition and the &lt;code&gt;aws:PrincipalArn&lt;/code&gt; key allows you to compare the ARN of the principal that made the request with the ARN specified in the policy at runtime, rather than at deployment time which otherwise failed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-opensearch-dashboard"&gt;
  &lt;/a&gt;
  Accessing OpenSearch Dashboard
&lt;/h2&gt;

&lt;p&gt;Now the stack is deployed, we can access the OpenSearch Dashboard. The easiest place to start is by launching the Hosted UI. You can find the link in the Cognito User Pool under App Client Settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6-_QJFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ojzhsvonhh4ovq4yp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6-_QJFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ojzhsvonhh4ovq4yp1.png" alt="Cognito Launch HostedUI" width="880" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will allow you to sign up and verify your new account with a code sent to your email address. Once verified and signed in, you can click the heading to visualise and analyse your data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyc368DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu1gxownymzf0e20n7zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyc368DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu1gxownymzf0e20n7zj.png" alt="OpenSearch Dashboards" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, click the button to add your data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEt46Bd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qovhkdf8b6kf29xy3x80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEt46Bd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qovhkdf8b6kf29xy3x80.png" alt="OpenSearch-Dashboards-AddData" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create an index pattern. If you are using the sample applications, then the index pattern is simply &lt;code&gt;licence&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fS6qoKVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/319f8hdke2bj2m5gsso0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fS6qoKVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/319f8hdke2bj2m5gsso0.png" alt="Define-Index-Pattern" width="880" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can go into &lt;code&gt;Dev Tools&lt;/code&gt; and run queries, use metrics aggregation and combine filter and query contexts amongst other features. You can also create visualisations from the raw data in OpenSearch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-cloudwatch-metrics"&gt;
  &lt;/a&gt;
  Custom CloudWatch Metrics
&lt;/h2&gt;

&lt;p&gt;In a previous blog post on &lt;a href="https://dev.to/aws-heroes/tips-to-prevent-a-serverless-wreck-15af"&gt;tips to prevent a serverless wreck&lt;/a&gt;, I strongly advocated the use of metrics to monitor an application. The CloudWatch Embedded Metric Format allows you to create custom metrics, that can be used for visualisations and alarming for real-time incident detection.&lt;/p&gt;

&lt;p&gt;In this sample application, an AWS Lambda function is used to consume an aggregated set of records from a Kinesis Data Stream, and write any new records (inserts, updates or deletes) to OpenSearch. Each request to OpenSearch hits a REST API endpoint, and returns an HTTP Status Code. We can use the returned HTTP Status Code as a custom metric as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMetricsLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-embedded-metrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMetricsLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNamespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OpenSearch Status Codes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putDimensions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`HTTP_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putMetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ProcessedRecords&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code sets the namespace to be 'OpenSearch Status Codes'. This is the name that will appear in custom namespaces in CloudWatch metrics. We use the returned status code as the dimension. A dimension is a name/value pair that is part of the identity of a metric. Each time we process a record, we use a count of 1 as the unit.&lt;/p&gt;

&lt;p&gt;This results in a log entry in CloudWatch that looks similar to below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"LogGroup"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"qldb-streams-es-dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ServiceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"qldb-streams-es-dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ServiceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AWS::Lambda::Function"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"StatusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"HTTP_200"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"executionEnvironment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AWS_Lambda_nodejs14.x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"memorySize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"functionVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$LATEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"logStreamId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021/12/11/[$LATEST]6924daa324e8482099ebcad5c1168c9a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"_aws"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Timestamp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1639244821514&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"CloudWatchMetrics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Dimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"LogGroup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"ServiceName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"ServiceType"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"StatusCode"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Metrics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ProcessedRecords"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"Unit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Count"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Namespace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OpenSearch Status Codes"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ProcessedRecords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When streaming records from Kinesis to OpenSearch, there were a handful of status codes commonly returned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP 200 - a successful update to an existing document with an HTTP POST&lt;/li&gt;
&lt;li&gt;HTTP 201 - a successful insert of a new document, or completely overwriting an existing document with an HTTP PUT&lt;/li&gt;
&lt;li&gt;HTTP 409 - an error where the version of the document attempted to be inserted is less than or equal to the one that already exists. This can happen as each data record produced by a QLDB stream is delivered to Kinesis at least once, the same records can appear multiple times, and there are no ordering guarantees. The sample application implements external versioning to resolve this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After streaming a number of records to OpenSearch, we can create a simple CloudWatch Dashboard from the custom metric that looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUsg1XhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkbstxlq56ib5ryx1bdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUsg1XhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkbstxlq56ib5ryx1bdg.png" alt="OpenSearch-Custom-Metrics" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So there we have it. This post has shown how to quickly get up and running with OpenSearch, configuring Cognito to protect OpenSearch Dashboards, and set up a custom CloudWatch Metrics dashboard for monitoring the HTTP Status Codes that are returned. Please reach out if you have any feedback or suggestions.&lt;/p&gt;

&lt;p&gt;To find out more, read the &lt;a href="https://qldbguide.com/"&gt;QLDB Guide&lt;/a&gt;, follow the curated list of articles, tools and resources at &lt;a href="https://github.com/mlewis7127/awesome-qldb"&gt;Awesome QLDB&lt;/a&gt; or try it out our online demo to see QLDB in action at &lt;a href="https://demo.qldbguide.com/"&gt;QLDB Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>int to double type casting</title>
      <author>Govind Vijay</author>
      <pubDate>Wed, 15 Dec 2021 12:23:58 +0000</pubDate>
      <link>https://dev.to/govvj/int-to-double-type-casting-27id</link>
      <guid>https://dev.to/govvj/int-to-double-type-casting-27id</guid>
      <description>&lt;p&gt;Hi all,&lt;br&gt;
Say you have a 4 byte integer and now you want to convert it to double. You might say that's easy, just add couple of zeros to the front. It's not that simple. Its only work for positive integers.&lt;/p&gt;

&lt;p&gt;For simplicity lets assume you have 4 bit integer and you want to convert it to 8 bit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Let a = -3 = (1101) -&amp;gt; 2's complement&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1101 -&amp;gt; 0010 (1s complement) + 1 -&amp;gt; 0011 -&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you just add zeros then it will become &lt;br&gt;
&lt;code&gt;a = (00001101) = 13&lt;/code&gt;&lt;br&gt;
So instead you take the most significant digit (i.e. 4th bit) and paste it to the new bits.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FBCKzK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cblnbtu1i5gyrempt6yd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FBCKzK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cblnbtu1i5gyrempt6yd.png" alt="copy msb bits" width="426" height="173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a = (11111101) = (00000010 + 1) = (00000011) = 3 -&amp;gt; -3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: when a = 13 we didn't do 2's complement because right most bit was zero.&lt;/p&gt;

</description>
      <category>computerscience</category>
    </item>
    <item>
      <title>Creating Custom Hooks with React.js</title>
      <author>Kuvam Bhardwaj</author>
      <pubDate>Wed, 15 Dec 2021 12:21:50 +0000</pubDate>
      <link>https://dev.to/kuvamdazeus/creating-custom-hooks-with-reactjs-50j6</link>
      <guid>https://dev.to/kuvamdazeus/creating-custom-hooks-with-reactjs-50j6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hooks were introduced quite a while ago in React. They enabled to tap into state &amp;amp; lifecycle methods WITHOUT using class components.&lt;/p&gt;

&lt;p&gt;In this post I will be showing you with the help of a common problem, how can you create a hook for your own. Let's Get Started üöÄ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;So let's suppose we're making a web app where we need to render different components depending upon the &lt;em&gt;screen width&lt;/em&gt; of the user.&lt;/p&gt;

&lt;p&gt;So we wrote this code to solve it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3KvUNB30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639565466322/E5D6QXY73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3KvUNB30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639565466322/E5D6QXY73.png" alt="arbitrary code to solve window screen width problem" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will work fine. Missing one crucial case, &lt;strong&gt;What if the user switches to landscape mode on its mobile?&lt;/strong&gt; The site will still be showing the mobile screen component &lt;em&gt;instead of showing the desktop or bigger screen component&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Of course, this problem can be solved with CSS &amp;amp; rather with 2-3 words with tailwind.&lt;br&gt;
The thing is, I want to show you another way of solving this problem &lt;strong&gt;The Reactive&lt;/strong&gt; way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-hook-component"&gt;
  &lt;/a&gt;
  Creating the Hook Component
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn_5F6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639567243778/DCTcoSMQF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn_5F6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639567243778/DCTcoSMQF.png" alt="useWindowWidth custom react hook" width="880" height="689"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-just-happened"&gt;
  &lt;/a&gt;
  What just happened?
&lt;/h3&gt;

&lt;p&gt;Here, if you look at the &lt;code&gt;useWindowWidth&lt;/code&gt; function, you'll notice that it's just a normal function that also happens to use other built-in hooks like &lt;code&gt;useState&lt;/code&gt; &amp;amp; &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What this function does is, it declares a state variable &lt;em&gt;in its scope&lt;/em&gt; with &lt;code&gt;useState&lt;/code&gt; calling it &lt;code&gt;width&lt;/code&gt; &amp;amp; its setter &lt;code&gt;setWidth&lt;/code&gt; and throws in the value of &lt;code&gt;window.screen.width&lt;/code&gt; as its initial state.&lt;/p&gt;

&lt;p&gt;Then, we call the &lt;code&gt;useEffect&lt;/code&gt; hook and add an event listener for the 'resize' event firing off a function that sets the value of &lt;code&gt;width&lt;/code&gt; whenever the browser window is resized.&lt;/p&gt;

&lt;p&gt;If you look closely at the &lt;code&gt;useEffect&lt;/code&gt; hook, you'll see an empty array which is there to indicate that &lt;em&gt;this &lt;code&gt;useEffect&lt;/code&gt; does not depend on any external value&lt;/em&gt; meaning that it will ONLY RUN ONCE even in occasional re-renders. &lt;strong&gt;This array is also called the DEPENDENCY ARRAY of the &lt;code&gt;useEffect&lt;/code&gt; hook&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, we return the &lt;code&gt;width&lt;/code&gt; value as the output of this function. Next time the browser window is resized, it will return a new value of &lt;code&gt;width&lt;/code&gt; representing the window's current screen width. And we know that whenever we associate &lt;code&gt;useState&lt;/code&gt; to a variable, &lt;em&gt;it causes a re-render in every location where the variable was referenced&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how it is working now:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXhktmBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im7.ezgif.com/tmp/ezgif-7-e7a77eaa5d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXhktmBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im7.ezgif.com/tmp/ezgif-7-e7a77eaa5d.gif" alt="working of custom hooks" width="600" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those of you thinking:&lt;br&gt;&lt;br&gt;
" Hey! but why we prefixed 'use' with the function's name in &lt;code&gt;useWindowWidth&lt;/code&gt;? "&lt;/p&gt;

&lt;p&gt;This is a text I extracted from the &lt;a href="https://reactjs.org/docs/hooks-custom.html#using-a-custom-hook"&gt;official documentation&lt;/a&gt; of React.js on custom hooks, have a look:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do I have to name my custom Hooks starting with ‚Äúuse‚Äù? Please do. This convention is very important. Without it, we wouldn‚Äôt be able to automatically check for violations of rules of Hooks because we couldn‚Äôt tell if a certain function contains calls to Hooks inside of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro
&lt;/h2&gt;

&lt;p&gt;The use of custom hooks is not limited to just this use case, you can apply it pretty much anywhere you like from auto-login functions to UI-related parts. Even making queries to the server on regular basis, that helps deliver a near-real-time experience to the end user. Possibilities are, as always, ENDLESS.&lt;/p&gt;

&lt;p&gt;So, that's all for today folks! hope you found it helpful :)&lt;/p&gt;




&lt;p&gt;If you like my posts, consider following :)&lt;/p&gt;

&lt;p&gt;Twitter -&amp;gt; &lt;a href="https://twitter.com/BhardwajKuvam"&gt;@BhardwajKuvam&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Github -&amp;gt; &lt;a href="https://github.com/kuvamdazeus"&gt;@kuvamdazeus&lt;/a&gt;&lt;br&gt;&lt;br&gt;
LinkedIn -&amp;gt; &lt;a href="https://www.linkedin.com/in/kuvambhardwaj"&gt;@kuvambhardwaj&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Portfolio -&amp;gt; &lt;a href="https://kuvambhardwaj.vercel.app"&gt;kuvambhardwaj.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/kuvam"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHOoTehh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lokbm1o1fdnkevsvr7m.png" width="453" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Development in Apple M1</title>
      <author>Emili Parreno</author>
      <pubDate>Wed, 15 Dec 2021 12:03:36 +0000</pubDate>
      <link>https://dev.to/eparreno/development-in-apple-m1-4d4l</link>
      <guid>https://dev.to/eparreno/development-in-apple-m1-4d4l</guid>
      <description>&lt;p&gt;I got a new laptop one week ago and I've been investigating different ways of setting up our dev environment. Here are my findings&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-machines"&gt;
  &lt;/a&gt;
  Virtual Machines
&lt;/h2&gt;

&lt;p&gt;There are different options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual Box doesn't work as of today in Apple M1&lt;/li&gt;
&lt;li&gt;Parallels, nice but you have to buy a license&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mac.getutm.app"&gt;UTM&lt;/a&gt;, very nice UI on top of QEMU. My preferred choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run ARM virtual machines, it's fast as hell, feels like a native app, probably having a M1 Max with 10 cores and 64Gb of RAM helps bit :) but I wanted to use mainly x86 VMs and they are not so fast. I'll definitely use UTM in the future for running ARM based VMs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;If you run everything inside Docker, it works out of the box. I didn't experience any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apples-rosetta"&gt;
  &lt;/a&gt;
  Apple's Rosetta
&lt;/h2&gt;

&lt;p&gt;It turns out that the best virtualisation software comes already with you default MacOS installation and it's called Rosetta!&lt;/p&gt;

&lt;p&gt;Here's how I set up my dev laptop &lt;/p&gt;

&lt;p&gt;Duplicate your Terminal or iTerm app and give it a different name&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KlV1Xgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7jtbbgix3s19gh75ehv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KlV1Xgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7jtbbgix3s19gh75ehv.png" alt="Image description" width="320" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ended up with&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--loxiuiXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gkem72xxsukti1lx03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--loxiuiXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gkem72xxsukti1lx03.png" alt="Image description" width="318" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the x86 terminal, get info details (CMD + i) and check "Open using Rosetta"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uTj6PZiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srebp6gu8wvrguznjfjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uTj6PZiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srebp6gu8wvrguznjfjt.png" alt="Image description" width="388" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. Yes, really, that's all you need. Open your x86 terminal and you have an emulated x86 environment that just works.&lt;/p&gt;

&lt;p&gt;If you install Hombrew in both envs it will be installed in different folders, the traditional &lt;code&gt;/usr/local/Cellar&lt;/code&gt; for Intel based and the new one &lt;code&gt;opt/hombrew/Cellar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have a check in my &lt;code&gt;.zshrc&lt;/code&gt; to load paths based on the arch. With that approach you need to be mindful about the arch you are running and loading the proper paths or executing the right code after login.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if [ $(arch) = 'arm64' ]; then
  ...
else
  ...
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also added &lt;code&gt;$(arch)&lt;/code&gt; to my prompt to know in which environment I am&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgVnPUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20taxcgaexwavzu4koay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgVnPUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20taxcgaexwavzu4koay.png" alt="Image description" width="289" height="81"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;If you install the same app or library in both environments they may clash. Let's say you install MySQL in both ARM and x86 using Homebrew and you want to link the binary, you should choose on what env you do it. Just be careful about that.&lt;br&gt;
For me hasn't been a problem because I mainly use x86 so I didn't install anything in the ARM env. Just avoid installing the same stuff in both envs.&lt;br&gt;
If you really need to use both arches, an alternative could be using Rosetta to emulate x86 and UTM to run ARM based VMs so you don't risk messing with duplicated libraries or apps.&lt;/p&gt;

</description>
      <category>apple</category>
      <category>m1</category>
      <category>silicon</category>
      <category>arm</category>
    </item>
    <item>
      <title>How to Build a Minimum Viable Product (MVP)</title>
      <author>Codica</author>
      <pubDate>Wed, 15 Dec 2021 11:56:47 +0000</pubDate>
      <link>https://dev.to/codicacom/how-to-build-a-minimum-viable-product-mvp-3lk1</link>
      <guid>https://dev.to/codicacom/how-to-build-a-minimum-viable-product-mvp-3lk1</guid>
      <description>&lt;p&gt;If you are a businessman who strives for a digital product, planning to build one is a matter of time. Until then, the idea is everything you got. So what comes next?&lt;/p&gt;

&lt;p&gt;Don't be in a rush to get your product to the buyers without testing it. An MVP approach comes as a great tool for everyone who wants to validate their business idea. This way, you will understand what users are ready to pay for once they open your website or app.&lt;/p&gt;

&lt;p&gt;Let‚Äôs finally get to know &lt;a href="https://www.codica.com/blog/how-to-create-minimum-viable-product/"&gt;how to build an MVP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Problem discovery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, make sure your product fixes any users‚Äô issues. According to &lt;a href="https://www.cbinsights.com/research/startup-failure-reasons-top/"&gt;CB Insights&lt;/a&gt;, lack of market demand is the second most common reason why startups fail.&lt;/p&gt;

&lt;p&gt;Several customer research insights you need to know before getting started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why do they need your product?&lt;/li&gt;
&lt;li&gt;How will your product help?&lt;/li&gt;
&lt;li&gt;What problems will it solve?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing what customers are dissatisfied with while using other products gives you a glimpse of a new market solution. That's how insightful feedback from a survey can help you define your product goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Conduct market research&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you‚Äôre outlining the product idea, you might find an already existing solution out there. So it‚Äôs time to exercise market analysis to outsmart your competitors.&lt;/p&gt;

&lt;p&gt;Take the other companies' products and investigate their strengths and weaknesses in-depth. Ideally, do a hands-on review. It helps you learn from others' mistakes, thus delivering a better alternative to the existing solutions.&lt;/p&gt;

&lt;p&gt;In case some competitors‚Äô features are better than yours, work further on your idea to bring substantial benefits to the customers.&lt;/p&gt;

&lt;p&gt;Market and competitor research will also help you find more details about your target audience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Prioritize your product's features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly, define the user flow. These are steps taken to get the right outcome while using an app or a website. Getting to know them enables you to outline the essential set of features.&lt;/p&gt;

&lt;p&gt;To order an Uber taxi, for instance, you should enter the pickup address, the destination, and then click ‚ÄúConfirm.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUqJZykn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pf5ks0fctezabxr185.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUqJZykn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pf5ks0fctezabxr185.jpg" alt="Image description" width="880" height="740"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In sum, you better get your product's features prioritized by their importance.&lt;/p&gt;

&lt;p&gt;And there's more to come. Value Proposition Canvas (VPC) will help you to ensure the product-market fit. Here are three key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jobs-to-be-done;&lt;/li&gt;
&lt;li&gt;Pains;&lt;/li&gt;
&lt;li&gt;Gains.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fill in each component above to define how an MVP can satisfy your customers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-2m72XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yxk285850unk8n2uqse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-2m72XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yxk285850unk8n2uqse.jpg" alt="Image description" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.strategyzer.com/canvas/value-proposition-canvas"&gt;https://www.strategyzer.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of Tesla VPC exercising the best fit to the market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2W0SFDEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fis2k3lwuxxy7fp3mui.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2W0SFDEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fis2k3lwuxxy7fp3mui.jpg" alt="Image description" width="880" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://designabetterbusiness.com/2017/10/12/how-to-really-understand-your-customer-with-the-value-proposition-canvas/"&gt;https://designabetterbusiness.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rank each point according to their value ‚Äî from "extra" to "must-have." So, features heavily dependent on customers' needs set the foundation for a unique selling point.&lt;/p&gt;

&lt;p&gt;Thus, prioritize the features by grouping them into "essentials," "cool-to-see," and "extras."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Create a prototype&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you finish the market research, it is time to put theory into action. To reduce expenses and save time, you can choose to &lt;a href="https://www.codica.com/blog/poc-vs-mvp/"&gt;create a prototype&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to test your idea, select the group of early adopters. They are potential customers waiting for someone to offer the desired product.&lt;/p&gt;

&lt;p&gt;At this point, you understand precisely whether your idea is worth investing more time and money in. Or vice versa, the cancellation of your product creation might seem more reasonable based on your research results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Build-measure-learn, repeat&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you kick off the &lt;a href="https://www.codica.com/services/custom-software-development/"&gt;development stage&lt;/a&gt;, you should continuously consider the feedback on your MVP. This approach can be set out in three words: &lt;strong&gt;Build-Measure-Learn&lt;/strong&gt; (BML).&lt;/p&gt;

&lt;p&gt;Such a feedback loop makes a whole point of the Lean Startup methodology.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="http://theleanstartup.com/principles"&gt;http://theleanstartup.com/principles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs take a look at all three cycle stages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We want to emphasize four options to develop a solution: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bring a technical co-founder&lt;/strong&gt;&lt;br&gt;
A tech startup is always a brainchild of business and science. That's why Apple's technical co-founder Steve Wozniak deserves so many credits. In other words, your tech co-founder will be in charge of the tech side of the process. Importantly, they should be inspired as much as you are.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pick a freelancer or a freelancing team&lt;/strong&gt;&lt;br&gt;
Alternatively to technical co-founders, you can hire contractual workers from dozens of websites like Upwork or Fiverr.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hire in-house developers&lt;/strong&gt;&lt;br&gt;
In contrast to previous options, you ‚Äãcan also hire a developer in-house. You can keep track of their progress at any moment. Meanwhile, this might also be expensive as an experienced specialist is keen on both exciting and high-paying projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find an MVP development company&lt;/strong&gt;&lt;br&gt;
Sufficient experience in &lt;a href="https://www.codica.com/services/mvp-development/"&gt;MVP development&lt;/a&gt; is a huge advantage to benefit from. So you will surely get what you need working with a software agency.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Measure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Blurred success indicators will prevent you from seeing the actual progress. That is why any product development involves calculating the results obtained within the build stage.&lt;/p&gt;

&lt;p&gt;Take into account Customer Acquisition Cost (CAC) and Average Revenue Per User (ARPU) measures. Let's see how we can calculate them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAC&lt;/strong&gt; - by dividing the whole amount spent on marketing and sales by the total number of customers acquired over a given time period.&lt;br&gt;
&lt;strong&gt;ARPU&lt;/strong&gt; - by dividing the revenue of a certain period by the total number of active users during that period.&lt;/p&gt;

&lt;p&gt;Their correlation will help you realize whether it is beneficial to go ahead with product development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Draw the line where your project should ‚Äúpersevere,‚Äù and where it should ‚Äúpivot.‚Äù&lt;/p&gt;

&lt;p&gt;Persevere means moving on, preventing the project from extras.&lt;/p&gt;

&lt;p&gt;At this point, your MVP is ready for release. All collected feedback can be used for the upcoming improvements.&lt;/p&gt;

&lt;p&gt;Pivot causes redirecting of the product strategy. So, you should change some features or rethink your development strategy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Collecting feedback is vital once you are done with the BML cycle. The most prominent example of doing so is interviewing the customers.&lt;/p&gt;

&lt;p&gt;Where to find the very first users? The most efficient ways are socials ‚Äî Facebook and Linkedin, for instance, Quora answers, forums, and Q&amp;amp;A websites like Reddit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs time to wrap our thoughts. An MVP concept helps you to exercise your idea prior to creating a fully-built product. It helps you avoid most pitfalls initially instead of fixing the project on the go with cost climbs.&lt;/p&gt;

&lt;p&gt;For more information concerning MVP development, read &lt;a href="https://www.codica.com/blog/how-to-create-minimum-viable-product/"&gt;our full blog article&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>mvp</category>
      <category>guide</category>
      <category>webdev</category>
    </item>
    <item>
      <title>For In and For Of in Javascript</title>
      <author>Ustariz Enzo</author>
      <pubDate>Wed, 15 Dec 2021 11:51:36 +0000</pubDate>
      <link>https://dev.to/ziratsu/for-in-and-for-of-in-javascript-1og2</link>
      <guid>https://dev.to/ziratsu/for-in-and-for-of-in-javascript-1og2</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow developers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's learn the differences between the loops &lt;em&gt;For... In&lt;/em&gt; and &lt;em&gt;For... Of&lt;/em&gt; in Javascript in less than a minute!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YHCaP7DA4AE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-for-of-loop"&gt;
  &lt;/a&gt;
  1. The &lt;em&gt;For... Of&lt;/em&gt; loop.
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;For... Of&lt;/em&gt; loop is used to iterate through iterable elements, for example arrays, strings, nodelists, etc. It has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// in the console :&lt;/span&gt;
&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will basicaly create a new constant for each element.&lt;/p&gt;

&lt;p&gt;If you use a string, it'll be exactly the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// in the console :&lt;/span&gt;
&lt;span class="c1"&gt;// "1"&lt;/span&gt;
&lt;span class="c1"&gt;// "2"&lt;/span&gt;
&lt;span class="c1"&gt;// "3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-the-for-in-loop"&gt;
  &lt;/a&gt;
  2. The &lt;em&gt;For... In&lt;/em&gt; loop.
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;For... In&lt;/em&gt; loop is used to iterate through an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tiger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;tiger&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tiger&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// in the console :&lt;/span&gt;
&lt;span class="c1"&gt;// "paws" 4&lt;/span&gt;
&lt;span class="c1"&gt;// "weight" 300&lt;/span&gt;
&lt;span class="c1"&gt;// "height" 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can access the property name with "prop" and/or the property value with tiger[prop].&lt;/p&gt;

&lt;p&gt;You now know the differences between these two &lt;em&gt;loops&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React JS Project With Dark Theme for Beginners</title>
      <author>Shaif Arfan</author>
      <pubDate>Wed, 15 Dec 2021 11:36:46 +0000</pubDate>
      <link>https://dev.to/shaifarfan08/react-js-project-with-dark-theme-for-beginners-4njc</link>
      <guid>https://dev.to/shaifarfan08/react-js-project-with-dark-theme-for-beginners-4njc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#artistic"&gt;
  &lt;/a&gt;
  Artistic üì∏
&lt;/h2&gt;

&lt;p&gt;Made with ‚ù§Ô∏è by &lt;a href="http://instagram.com/shaifarfan08/"&gt;Shaif Arfan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live preview: &lt;a href="https://wc-artistic.netlify.app/"&gt;https://wc-artistic.netlify.app/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch on YouTube: &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;https://youtu.be/DTR2IbNBfPA&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code: &lt;a href="https://github.com/ShaifArfan/artistic"&gt;https://github.com/ShaifArfan/artistic&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#project-description"&gt;
  &lt;/a&gt;
  Project Description
&lt;/h2&gt;

&lt;p&gt;Artistic is a landing page for a photography studio. This is a well-designed and &lt;code&gt;responsive&lt;/code&gt; landing page with &lt;code&gt;dark mode&lt;/code&gt; feature. The main purpose of this project is to show how to create a landing page with &lt;code&gt;dark mode&lt;/code&gt; feature using &lt;code&gt;ReactJs&lt;/code&gt;.&lt;br&gt;
We will be using React Context API to toggle &lt;code&gt;dark mode&lt;/code&gt; feature. Hope you enjoy it!.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-we-are-going-to-learnuse"&gt;
  &lt;/a&gt;
  What we are going to learn/use
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;ReactJs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/react-icons"&gt;React Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/react-scroll"&gt;React Scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More . . .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic ReactJs knowledge&lt;/li&gt;
&lt;li&gt;Basic HTML, CSS knowledge&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#starter-files"&gt;
  &lt;/a&gt;
  Starter files
&lt;/h2&gt;

&lt;p&gt;You can find all the starter files in &lt;code&gt;starter-files&lt;/code&gt; branch. You can to go to the &lt;code&gt;starter-files&lt;/code&gt; branch and &lt;code&gt;download zip&lt;/code&gt; the the starter files or You can clone the project and git checkout to &lt;code&gt;starter-files&lt;/code&gt; branch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;The recommended way to get started with the project is Follow the &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;YouTube tutorial&lt;/a&gt;. You will find all the step-by-step guides. Or you Can start the project on your own by following the guide below.&lt;/p&gt;

&lt;p&gt;After getting the starter files, you need to go the file directory and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and after that start the dev server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tools-used"&gt;
  &lt;/a&gt;
  Tools Used
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Images: &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;UI Design: &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Code Editor: &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#similar-projects"&gt;
  &lt;/a&gt;
  Similar Projects
&lt;/h2&gt;

&lt;p&gt;Here are some Similar projects that you might be interested.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ShaifArfan/AYANs-portfolio"&gt;Ayan's Portfolio - React JS Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShaifArfan/shaif-s-cuisine"&gt;Shaif's Cuisine - HTML, CSS project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShaifArfan/AMYs-Portfolio"&gt;Amy's Portfolio - HTML, CSS Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#q-how-can-i-get-started"&gt;
  &lt;/a&gt;
  Q: How can i get started?
&lt;/h3&gt;

&lt;p&gt;You can get started by following the &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;YouTube tutorial&lt;/a&gt; of this project. Here is the full tutorial video link: [coming soon].&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-what-i-need-to-start-the-project"&gt;
  &lt;/a&gt;
  Q: What i need to start the project?
&lt;/h3&gt;

&lt;p&gt;Just open your favorite code editor and follow along with the &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;YouTube Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-who-the-project-is-for"&gt;
  &lt;/a&gt;
  Q: Who the project is for?
&lt;/h3&gt;

&lt;p&gt;The project is for the people who wanna get more skilled in &lt;code&gt;ReactJs&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;If you have any feedback, please reach out to us at &lt;a href="http://instagram.com/web_cifar"&gt;@web_cifar&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;For support, join our &lt;a href="http://facebook.com/groups/webcifar"&gt;Community Group&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding! üöÄ&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 64 of 100 Days of Code &amp; Scrum: Dynamic OpenGraph Meta Tags Using next-seo</title>
      <author>Rammina</author>
      <pubDate>Wed, 15 Dec 2021 11:33:26 +0000</pubDate>
      <link>https://dev.to/rammina/day-64-of-100-days-of-code-scrum-dynamic-opengraph-meta-tags-using-next-seo-292n</link>
      <guid>https://dev.to/rammina/day-64-of-100-days-of-code-scrum-dynamic-opengraph-meta-tags-using-next-seo-292n</guid>
      <description>&lt;p&gt;Good day, everyone!&lt;/p&gt;

&lt;p&gt;I spent most of my day working on the &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;'s &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags using &lt;strong&gt;OpenGraph&lt;/strong&gt; attributes, as well as the Twitter counterparts. I utilized the &lt;code&gt;next-seo&lt;/code&gt; package to make it simpler to manage each page's &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags. Most of the challenge was making dynamic blog data display the appropriate card summary. At one point, I made a mistake deploying erroneous code the production, which took a while to display the correct values (embarrassing because other people could see it).&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I worked on static &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags for my &lt;a href="https://www.rammina.com"&gt;web development page&lt;/a&gt;. Not much work done, because it was also my physical therapy visit that day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continued learning &lt;strong&gt;OpenGraph&lt;/strong&gt; and the Twitter equivalent.&lt;/li&gt;
&lt;li&gt;used &lt;code&gt;next-seo&lt;/code&gt; package to manage &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; dynamically for blog posts retrieved from Ghost.&lt;/li&gt;
&lt;li&gt;preview images are now dynamic for each page.&lt;/li&gt;
&lt;li&gt;put temporary placeholder sections for &lt;strong&gt;Services&lt;/strong&gt; and &lt;strong&gt;Portfolio&lt;/strong&gt; pages to remove broken links.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! I wish you the best.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ogp.me/"&gt;The Open Graph Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/garmeeh/next-seo"&gt;next-seo | GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Build CLI Quiz App with nodeJs</title>
      <author>Khyati Baria</author>
      <pubDate>Wed, 15 Dec 2021 11:28:25 +0000</pubDate>
      <link>https://dev.to/khyatibaria/build-cli-quiz-app-with-nodejs-1e85</link>
      <guid>https://dev.to/khyatibaria/build-cli-quiz-app-with-nodejs-1e85</guid>
      <description>&lt;p&gt;In this blog, we will build a Food Fact CLI Quiz App in JavaScript. We will use repl.it to write a program. We will use two npm modules&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;readlineSync -It will have a conversation with the user via a console.&lt;/li&gt;
&lt;li&gt;chalk: It is used for Terminal string styling and adding colors.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#planning-our-cli-app"&gt;
  &lt;/a&gt;
  Planning our CLI App:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We ask the user to enter name&lt;/li&gt;
&lt;li&gt;Then we welcome the user&lt;/li&gt;
&lt;li&gt;We will display the Rules of the game to user&lt;/li&gt;
&lt;li&gt;Then we let users to play game&lt;/li&gt;
&lt;li&gt;Check that user has entered the correct answer&lt;/li&gt;
&lt;li&gt;We will print the current score of a user on every given answer&lt;/li&gt;
&lt;li&gt;We will display the total score of users at the end of the game&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now Let‚Äôs Start the Build We need to take the user input through the console so we will require npm package: readline-sync. Firstly we will install npm packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var readlineSync = require('readline-sync');
const chalk = require('chalk');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the above code in repl.it will automatically install these packages for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asking-user-their-name"&gt;
  &lt;/a&gt;
  Asking user their Name
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var userName= readlineSync.question( ("Please Enter Your Name?"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need a variable to store the name of the user so we will create a variable called userName.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#welcome-message-for-user"&gt;
  &lt;/a&gt;
  Welcome Message for User
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('WELCOME '+userName+ 'FOOD FACT QUIZ \n');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to display customize welcome message for every new user. For welcome message we need name of user with some greeting message. So we use string concatenation to show welcome message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-rules-of-the-game-to-the-user"&gt;
  &lt;/a&gt;
  Showing Rules of the game to the user
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  console.log ("RULES OF THE GAME ARE SIMPLE"); 
  console.log ("1). All the QUESTIONS are COMPULSORY");
  console.log ("2). If you answer RIGHT you score 2 Points");
  console.log ("3). If you answer WRONG you Lose 1 Point");
  console.log ("----------LET‚ÄôS START THE GAME------------");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use inbuilt JavaScript function console.log() to print Rules on screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-question-of-the-quiz"&gt;
  &lt;/a&gt;
  Adding Question of the quiz
&lt;/h2&gt;

&lt;p&gt;To store Questions of the quiz we create an array of an objects. And to ask question to user we use readlineSync.question(question).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var quesBank=[
  { question: `
  What country is renowned for chocolate?
  a) Finland
  b) Belgium
  c) Argentina\n`,
    answer: "b"
  },
  { question: `
  Which of these was called "food of the gods" in ancient India?
  a) Yogurt
  b) Potato
  c) Bread\n`,
    answer: "a"
  },
  { question: `
  Which is the most stolen food in the world?
  a) Candy
  b) Cheese
  c) Chips\n`,
    answer: "b"
  },
  { question: `
  One food that all races eat is what?
  a) Chocolate
  b) Bread
  c) Cheese\n`,
    answer: "b"
  }];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need a function which traverse throughout array of objects and displays the each question to user. So we need a for loop to access all elements inside an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function play(){
   for(var i=0; i&amp;lt;quesBank.length;i++){
     var currentItem= quesBank[i];
     check(currentItem.question, currentItem.answer)
   } }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#check-if-user-answer-is-correct"&gt;
  &lt;/a&gt;
  Check if user answer is correct
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function check(question, answer)
{
   var userAns=readlineSync.question(question);

   if( userAns.toUpperCase() === answer.toUpperCase())
   {
    console.log();
    console.log(chalk.green.italic.bold("Your are Right!!!!!"));
    console.log();
    score=score+2;
   } else{
    console.log();
    console.log(chalk.red.italic.bold("Your are Wrong!!!!!"));
    console.log();
    score=score-1;
  } 
  console.log(chalk.bgWhite.blue.bold("Your Total Score is:",score));
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a function that compares user answer with correct answers in array of objects. We need a variable to store the user answer. So we create variable userAns to store user answer. Here we use branching if user answer is correct we increment score of user by 2 and if answer is wrong user score is decrease by 1. Once all questions are answered by user we will display Total score at the end of quiz Game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So final program will look like this&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const chalk = require('chalk');
var readlineSync = require('readline-sync');
var score=0;

function Welcome()
{
var userName= readlineSync.question("Please Enter Your Name?");
console.log(chalk.yellowBright.bold('WELCOME'+userName+'FOOD FACT QUIZ \n'));
console.log(chalk.cyanBright.bold("RULES OF THE GAME ARE SIMPLE")); 
console.log(chalk.cyanBright("1). All the QUESTIONS are COMPULSORY"));
console.log(chalk.cyanBright("2). If you answer RIGHT you score 2 Points"));
console.log(chalk.cyanBright("3). If you answer WRONG you Lose 1 Point"));
console.log(chalk.yellowBright.bold("-------LETS START THE GAME------"));
}

var quesBank=[
  {
    question: `
    What country is renowned for chocolate?
    a) Finland
    b) Belgium
    c) Argentina\n`,
        answer: "b"
  },
  {
    question: `
    Which of these was called "food of the gods" in ancient India?
    a) Yogurt
    b) Potato
    c) Bread\n`,
        answer: "a"
  },
  {
    question: `
    Which is the most stolen food in the world?
    a) Candy
    b) Cheese
    c) Chips\n`,
        answer: "b"
  },
  {
    question: `
    One food that all races eat is what?
    a) Chocolate
    b) Bread
    c) Cheese\n`,
        answer: "b"
  }];

function check(question, answer)
{
   var userAns=readlineSync.question(question);
   if( userAns.toUpperCase() === answer.toUpperCase())
   {
    console.log(chalk.green.italic.bold("Your are Right!!!!!"));
    score=score+2;
   } else{
    console.log(chalk.red.italic.bold("Your are Wrong!!!!!"));
    score=score-1;
  } 
  console.log(chalk.bgWhite.blue.bold("Your Score is:",score));
  console.log();
  console.log(chalk.yellowBright.bold("------------------------------")); 
  console.log();
}

function play(){
   for(var i=0; i&amp;lt;quesBank.length;i++){
     var currentItem= quesBank[i];
     check(currentItem.question, currentItem.answer)
   }
}

Welcome();
play();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Thanks for reading. If you like this articles, consider following me.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cli</category>
      <category>node</category>
      <category>quizapp</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
