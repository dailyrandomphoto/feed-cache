<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>25+  JavaScript Project With Source Code to Build your Skills</title>
      <author>Neha Soni</author>
      <pubDate>Sun, 30 May 2021 05:01:11 +0000</pubDate>
      <link>https://dev.to/nehasoni__/25-javascript-project-with-source-code-to-build-your-skills-18e7</link>
      <guid>https://dev.to/nehasoni__/25-javascript-project-with-source-code-to-build-your-skills-18e7</guid>
      <description>&lt;p&gt;Hello amazing people,&lt;br&gt;&lt;br&gt;
If you are interested in becoming a web developer then JavaScript is one of the best and essential coding language you can learn, but getting familiar with JavaScript basics means using those skills to build JavaScript projects. So, in this blog post, I will share with you some HTML and Javascript projects with source code that can be used in your personalized Web Development projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-javascript-projects-for-beginners"&gt;
  &lt;/a&gt;
  Best JavaScript Projects for Beginners
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-counter-app"&gt;
  &lt;/a&gt;
  1.) Counter app
&lt;/h3&gt;

&lt;p&gt;This project will give you more practice working with the DOM. Here, the user can add the number of counts and also delete the counts.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) addEventListener()&lt;br&gt;
3.) textContent&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhrsIP3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621423093197/T6Xn5ykds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhrsIP3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621423093197/T6Xn5ykds.png" alt="Screenshot (255).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/LeCoding-tech/Counter-app"&gt;Counter App&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-background-color-change-app"&gt;
  &lt;/a&gt;
  2.) Background Color Change App
&lt;/h3&gt;

&lt;p&gt;In this app, the background color of the canvas changes when the user clicks on a button.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) eventListener()&lt;br&gt;
2.) Array&lt;br&gt;
3.) Math.random()&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVAsbGUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621423460649/GRFvC3Thu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVAsbGUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621423460649/GRFvC3Thu.png" alt="Screenshot (257).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/JS-Beginners/color-changing-app"&gt;Background color Changer App&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-calculator"&gt;
  &lt;/a&gt;
  3.) Calculator
&lt;/h3&gt;

&lt;p&gt;The main objective of this project is to perform the basic functionality(&lt;code&gt;+,-,*,/&lt;/code&gt;) of the calculator.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) DOM Manipulation&lt;br&gt;
2.) document.querySelector()&lt;br&gt;
3.) addEventListener()&lt;br&gt;
4.) Immediately Invoked Function Expressions&lt;br&gt;
5.) textContent&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fwid9fAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621424753025/qXTq33uNI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fwid9fAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621424753025/qXTq33uNI.png" alt="Screenshot (259).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/ayoisaiah/javascript-calculator"&gt;JavaScript Calculator&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-image-slider-project"&gt;
  &lt;/a&gt;
  4.) Image Slider Project
&lt;/h3&gt;

&lt;p&gt;The main functionality of this project is that , when an arrow is clicked, the next image in the array shows up.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) DOM Manipulation&lt;br&gt;
2.) Arrays&lt;br&gt;
3.) forEach()&lt;br&gt;
4.) eventListeners&lt;br&gt;
5.) JavaScript CSS Manipulation&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vIk--X7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621425429967/vtG_v4lMr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vIk--X7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621425429967/vtG_v4lMr.png" alt="Screenshot (261).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/JS-Beginners/background-image-slider-project"&gt;Image Slider&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-build-a-digital-clock"&gt;
  &lt;/a&gt;
  5.)  Build a Digital Clock
&lt;/h3&gt;

&lt;p&gt;The main objective of this project is to build a digital clock with date(Day, Month, Year).&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) setTimeInterval()&lt;br&gt;
2.) Date()&lt;br&gt;
3.) Arrays&lt;br&gt;
4.) innerHTML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5PCmH2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621426587066/lBQv6r4mA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5PCmH2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621426587066/lBQv6r4mA.png" alt="Screenshot (265).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/nehasoni05/Digital_Clock"&gt;Digital Clock&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-build-an-analog-clock"&gt;
  &lt;/a&gt;
  6.)  Build an Analog Clock
&lt;/h3&gt;

&lt;p&gt;The main objective of this project is to build a realtime analog clock using HTML, CSS, and Javascript.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) Date()&lt;br&gt;
3.) setInterval()&lt;br&gt;
4.) rotate()&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciuRfj6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621427148049/gWlO-pTSZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciuRfj6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621427148049/gWlO-pTSZ.png" alt="Screenshot (267).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/dgray0229/javascript-analog-clock"&gt;Analog Clock&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-loan-calculator"&gt;
  &lt;/a&gt;
  7.) Loan Calculator
&lt;/h3&gt;

&lt;p&gt;The main objective of this project is to calculate and displays the results for monthly payment, total payment, and total interest according to loan amount interest rate, and years to repay.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) setInterval()&lt;br&gt;
3.) Math.pow()&lt;br&gt;
4.) toFixed()&lt;br&gt;
5.) parseFloat()&lt;br&gt;
6.) DOM manipulation&lt;br&gt;
7.) JavaScript CSS Manipulation&lt;br&gt;
8.) eventListener()&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27zGt2HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621482096751/qP4S_ECju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27zGt2HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621482096751/qP4S_ECju.png" alt="Screenshot (271).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/CBStanley12/js-loan-calculator"&gt;Loan Calculator&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-guess-my-number"&gt;
  &lt;/a&gt;
  8.) Guess my number
&lt;/h3&gt;

&lt;p&gt;In this project you have to guess a number, if your PREDICTED NUMBER is equal to the SECRET NUMBER you won!!! ♥&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) Math.random()&lt;br&gt;
3.) eventListeners&lt;br&gt;
4.) textContent&lt;br&gt;
5.) Math.trunc()&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHBb4lQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621482617486/_R_NooU-r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHBb4lQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621482617486/_R_NooU-r.png" alt="Screenshot (273).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/08Gunjan/GUESS-MY-NUMBER"&gt;Guess my number&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-palindrome-checker"&gt;
  &lt;/a&gt;
  9.) Palindrome Checker
&lt;/h3&gt;

&lt;p&gt;A palindrome checker checks if a string is a palindrome or not. A palindrome is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) toUpperCase()&lt;br&gt;
3.) split()&lt;br&gt;
4.) reverse()&lt;br&gt;
5.) join()&lt;br&gt;
6.) innerHTML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l8-mLd_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621482985084/LxERejNpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l8-mLd_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621482985084/LxERejNpv.png" alt="Screenshot (275).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/AdishiSood/JavaScript-Projects/tree/main/Palindrome_Checker"&gt;Palindrome Checker&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-mobile-number-validator"&gt;
  &lt;/a&gt;
  10.) Mobile Number Validator
&lt;/h3&gt;

&lt;p&gt;This project lets you find out if the mobile number you have entered is active and able to receive calls or not.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) test()&lt;br&gt;
3.) forEach()&lt;br&gt;
4.) DOM manipulation&lt;br&gt;
5.)  event Listeners&lt;br&gt;
6.) innerHTML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L3yKLp6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621483309276/gw6ICU_Vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3yKLp6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621483309276/gw6ICU_Vr.png" alt="Screenshot (277).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/AdishiSood/JavaScript-Projects/tree/main/Mobile_Number_validator"&gt;Mobile Number Validator&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-roman-numeral-converter"&gt;
  &lt;/a&gt;
  11.) Roman Numeral Converter
&lt;/h3&gt;

&lt;p&gt;The main objective of this project is to convert arabic numbers to Roman numerals  or vice-versa.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) document.getElementById()&lt;br&gt;
2.) event Listeners&lt;br&gt;
3.) arabicToRoman()&lt;br&gt;
4.) romanToArabic()&lt;br&gt;
5.) objects&lt;br&gt;
6.) for loop&lt;br&gt;
7.) Math.floor()&lt;br&gt;
8.) indexOf()&lt;br&gt;
9.) replace()&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mmh4VI_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621483854397/HzkgU0wFf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mmh4VI_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621483854397/HzkgU0wFf.png" alt="Screenshot (279).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/AdishiSood/JavaScript-Projects/tree/main/Roman_Numeral_Converter"&gt;Roman Numeral Converter &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-weather-app"&gt;
  &lt;/a&gt;
  12.) Weather app
&lt;/h3&gt;

&lt;p&gt;This is an awesome project to build if you want to learn more about APIs and how to work with them&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) toFixed()&lt;br&gt;
3.) event Listeners&lt;br&gt;
4.) API&lt;br&gt;
5.) fetch()&lt;br&gt;
6.) then()&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88KRN1ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621485266043/B1Wc95Tn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88KRN1ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621485266043/B1Wc95Tn0.png" alt="Screenshot (281).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/Bhaskar-maity/Javascript-weather-app"&gt;Weather app &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-stopwatch"&gt;
  &lt;/a&gt;
  13.) Stopwatch
&lt;/h3&gt;

&lt;p&gt;The main objective of this project is to build a stopwatch that have a functionality like start,pause, and stop&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) document.getElementById()&lt;br&gt;
2.) parseInt()&lt;br&gt;
3.) setTimeout&lt;br&gt;
4.) innerHTML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---yanoa8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621486360383/qMrVydh4A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---yanoa8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621486360383/qMrVydh4A.png" alt="Screenshot (283).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak"&gt;Stopwatch&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-random-quote-generator"&gt;
  &lt;/a&gt;
  14.) Random Quote Generator
&lt;/h3&gt;

&lt;p&gt;The main objective of this project is to fetches a new random quote from an API, upon the click of a button, and displays it in the browser.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) document.getElementById()&lt;br&gt;
2.) async()&lt;br&gt;
3.) await&lt;br&gt;
4.) fetch()&lt;br&gt;
5.) Math.floor()&lt;br&gt;
6.) Math.random()&lt;br&gt;
7.) innerHTML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---z1lFNIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621486800935/Fz4mOMRFe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---z1lFNIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621486800935/Fz4mOMRFe.png" alt="image_1.png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/nehasoni05/Random_Quote_Generator"&gt;Random Quote Generator&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-bmi-calculator"&gt;
  &lt;/a&gt;
  15.) BMI Calculator
&lt;/h3&gt;

&lt;p&gt;The objective of this JavaScript project is to wire up a very basic JavaScript BMI Calculator.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) document.querySelector()&lt;br&gt;
2.) event listeners&lt;br&gt;
3.) parseInt()&lt;br&gt;
4.) toFixed()&lt;br&gt;
5.) innerHTML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z6dJEwvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621487215276/DiJ_Y6_-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z6dJEwvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621487215276/DiJ_Y6_-4.png" alt="Screenshot (287).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/JS-Beginners/BMI-calculator"&gt;BMI Calculator&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-tip-calculator"&gt;
  &lt;/a&gt;
  16.) TIP Calculator
&lt;/h3&gt;

&lt;p&gt;In this project, the user adds an amount and a tip percent and the calculator then outputs a total tip and bill amount.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) document.getElementById()&lt;br&gt;
2.) event listeners&lt;br&gt;
3.) Number()&lt;br&gt;
4.) DOM manipulation&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3giTxv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621487472283/kz0Ac6BIb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3giTxv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621487472283/kz0Ac6BIb.png" alt="Screenshot (289).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/JS-Beginners/percentage-tip-calculator"&gt;TIP Calculator&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-word-length-calculator"&gt;
  &lt;/a&gt;
  17.) Word Length Calculator
&lt;/h3&gt;

&lt;p&gt;In this project, the user enters the word and the calculator outputs its length.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) DOM manipulation&lt;br&gt;
2.) event listeners&lt;br&gt;
3.) length method&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f71OzHRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621609937078/LLfmK6Rrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f71OzHRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621609937078/LLfmK6Rrg.png" alt="Screenshot (297).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/JS-Beginners/word-count-tool"&gt;Word Length Calculator&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-day-of-the-week"&gt;
  &lt;/a&gt;
  18.) Day of the Week
&lt;/h3&gt;

&lt;p&gt;This project uses displays the day of the week along with a corresponding quote.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) DOM manipulation&lt;br&gt;
2.) Date() Object&lt;br&gt;
3.) switch statement&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZcC_9Nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621610479688/eN-ywzfPb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZcC_9Nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621610479688/eN-ywzfPb.png" alt="Screenshot (299).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/JS-Beginners/day-of-the-week-app"&gt;Day of the Week&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-covid19-tracker"&gt;
  &lt;/a&gt;
  19.) Covid-19 Tracker
&lt;/h3&gt;

&lt;p&gt;Using this website you can track corona cases in any country which you want.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) DOM manipulation&lt;br&gt;
2.) API&lt;br&gt;
     and much more...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sxi_lUpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621660257362/hKFuLsBg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sxi_lUpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621660257362/hKFuLsBg3.png" alt="Screenshot (314).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/Ashish2030/Corona-Tracker"&gt;Covid-19 Tracker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intermediate-javascript-projects"&gt;
  &lt;/a&gt;
  Intermediate JavaScript Projects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-discussion-portal"&gt;
  &lt;/a&gt;
  1.) Discussion Portal
&lt;/h3&gt;

&lt;p&gt;It is a portal where one user can add questions and the other user can respond to those questions and you can also search the question. Also once the query is resolved, the user can delete the added question and response.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) JavaScript CSS Manipulation&lt;br&gt;
2.) JavaScript DOM Manipulation&lt;br&gt;
3.) local storage&lt;br&gt;
4.) Jquery&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ycrt7yQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621651625504/TAkfq1fPD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ycrt7yQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621651625504/TAkfq1fPD.png" alt="Screenshot (301).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/AdishiSood/Discussion-App"&gt;Discussion Portal&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-quiz-app"&gt;
  &lt;/a&gt;
  2.) Quiz App
&lt;/h3&gt;

&lt;p&gt;Quiz apps are a fun way to improve your skills as a JavaScript developer. In this project, questions are dynamically generated using an object constructor. You have the 'Retake Quiz' option available at the end :)&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) JavaScript CSS Manipulation&lt;br&gt;
2.) JavaScript DOM Manipulation&lt;br&gt;
3.) event listeners&lt;br&gt;
4.) Math.random()&lt;br&gt;
5.) Objects&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfAetddH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621651925529/fs0IMLsVK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfAetddH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621651925529/fs0IMLsVK.png" alt="Screenshot (303).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code:-&lt;/strong&gt; &lt;a href="https://github.com/WebDevSimplified/JavaScript-Quiz-App"&gt;Quiz app&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-whack-a-mole-game"&gt;
  &lt;/a&gt;
  3.) Whack a Mole game
&lt;/h3&gt;

&lt;p&gt;Whac-A-Mole is a popular arcade game. When the Game Start, by clicking on the title, a Mole will "Pop" from a random Hole, with random duration. Every successful "Whack" will add 1 to the Score. The game ends after 10 seconds have passed.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) JavaScript CSS Manipulation&lt;br&gt;
2.) JavaScript DOM Manipulation&lt;br&gt;
3.) event listeners&lt;br&gt;
4.) Audio()&lt;br&gt;
4.) Jquery&lt;br&gt;
5.) local storage&lt;br&gt;
6.) switch statement&lt;br&gt;
7.) Math.random() , Math.round() and much more...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLGQOftK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621652753078/s1TLoVN8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLGQOftK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621652753078/s1TLoVN8x.png" alt="Screenshot (305).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code:-&lt;/strong&gt; &lt;a href="https://github.com/mitri-dvp/JavaScript-Whack-A-Mole"&gt;Whack a Mole&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-notes-app-project"&gt;
  &lt;/a&gt;
  4.) Notes App Project
&lt;/h3&gt;

&lt;p&gt;The objective of this JavaScript project is to create a notes application that uses local storage and allows for edits, among other things.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) JavaScript CSS Manipulation&lt;br&gt;
2.) JavaScript DOM Manipulation&lt;br&gt;
3.) event listeners&lt;br&gt;
4.) conditionals&lt;br&gt;
5.) Jquery&lt;br&gt;
6.) local storage&lt;br&gt;
      and much more...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQeN2uqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621653249971/lsVWi4DVT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQeN2uqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621653249971/lsVWi4DVT.png" alt="Screenshot (307).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code:-&lt;/strong&gt; &lt;a href="https://github.com/JS-Beginners/notes-app"&gt;Notes app&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-tetris-game"&gt;
  &lt;/a&gt;
  5.) Tetris Game
&lt;/h3&gt;

&lt;p&gt;Tetris is a surprising game. The aim of Tetris is simple; you bring down blocks from the top of the screen. You can move the blocks around, either left to right, and/or you can rotate them. Your objective is to get all the blocks to fill all the empty space in a line at the bottom of the screen; whenever you do this, you’ll find that the blocks vanish and you get awarded some points.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) HTML canvas&lt;br&gt;
2.) DOM Manipulation&lt;br&gt;
3.) Math.floor() , Math.random()&lt;br&gt;
4.) event listeners&lt;br&gt;
5.) Date()&lt;br&gt;
     and much more...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RJncg-Oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621653911780/uIJdiltoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RJncg-Oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621653911780/uIJdiltoj.png" alt="Screenshot (309).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code :-&lt;/strong&gt;  &lt;a href="https://github.com/nehasoni05/Tetris_Game"&gt;Tetris Game&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-music-player-app"&gt;
  &lt;/a&gt;
  6.) Music Player app
&lt;/h3&gt;

&lt;p&gt;In this application, you will be creating a music player with a clean user interface that can be used to play music in the browser. You will also implement features like seeking and volume control. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) Jquery&lt;br&gt;
2.) DOM Manipulation&lt;br&gt;
3.) Array of objects&lt;br&gt;
4.) event listeners&lt;br&gt;
5.) CSS Manipulation&lt;br&gt;
6.) setInterval(), clearInterval()&lt;br&gt;
7.) Math.floor() , Math.random()&lt;br&gt;
     and much more...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYtyiuDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621654487905/WOF2kV9rE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYtyiuDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621654487905/WOF2kV9rE.png" alt="music (2).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code :-&lt;/strong&gt;  &lt;a href="https://github.com/sayantanm19/js-music-player"&gt; Music Player&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-tic-tac-toe-game"&gt;
  &lt;/a&gt;
  7.) Tic Tac Toe Game
&lt;/h3&gt;

&lt;p&gt;The goal of the game is for players to position their marks so that they make a continuous line of three cells vertically, horizontally, or diagonally. An opponent can prevent a win by blocking the completion of the opponent's line.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) Jquery&lt;br&gt;
2.) DOM Manipulation &lt;br&gt;
3.) CSS Manipulation&lt;br&gt;
     and much more...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmoS5sRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621655301888/VLvwni9AO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmoS5sRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621655301888/VLvwni9AO.png" alt="Screenshot (312).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source code:-&lt;/strong&gt; &lt;a href="https://github.com/robhitt/tic-tac-toe-js"&gt;Tic Tac Toe&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-pomodoro-clock"&gt;
  &lt;/a&gt;
  8.) Pomodoro Clock
&lt;/h3&gt;

&lt;p&gt;The Pomodoro Technique is a time management method developed by Francesco Cirillo. The technique uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) DOM Manipulation&lt;br&gt;
2.) event listeners&lt;br&gt;
3.) switch statement&lt;br&gt;
4.) setInterval()&lt;br&gt;
     and much more...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--neg7-o4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621660867342/KSPmmpCus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--neg7-o4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621660867342/KSPmmpCus.png" alt="Screenshot (316).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source code :-&lt;/strong&gt; &lt;a href="https://github.com/builders/pomodoro-clock"&gt;Pomodoro Clock&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;### 9.) Filter Fun&lt;br&gt;
In this project, the user can upload a photo and apply various filters to it.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt;&lt;br&gt;
1.) HTML canvas&lt;br&gt;
2.) SimpleImage() object &lt;br&gt;
3.) getRed() ,getGreen(), getBlue() methods&lt;br&gt;
4.) Math.floor(), Math.random()&lt;br&gt;
   and much more....&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBIkpKNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621661266762/dOuofQrFk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBIkpKNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621661266762/dOuofQrFk.png" alt="Screenshot (318).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code:-&lt;/strong&gt; &lt;a href="https://github.com/nehasoni05/FilterFun"&gt;Filter Fun&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-rock-paper-scissors-game"&gt;
  &lt;/a&gt;
  10.) Rock, Paper, Scissors game
&lt;/h3&gt;

&lt;p&gt;Rock, paper, and scissors game is a simple fun game in which both the players have to make a rock, paper, or scissors. It has only two possible outcomes a draw, or a win for one player and a loss for the other player. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jm21FXPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621661813306/RwFHsmG7C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jm21FXPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621661813306/RwFHsmG7C.png" alt="Screenshot (320).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source code :-&lt;/strong&gt; &lt;a href="https://github.com/javitocor/Rock-Paper-Scissors-JS"&gt;Rock, Paper, Scissors&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-todo-list-project"&gt;
  &lt;/a&gt;
  11.)  To-Do List Project
&lt;/h3&gt;

&lt;p&gt;The main objective of this JavaScript Project is to wire up a todo list application.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Key concepts covered :-&lt;/strong&gt; &lt;br&gt;
1.) DOM Manipulation&lt;br&gt;
2.) Arrays&lt;br&gt;
3.) forEach()&lt;br&gt;
4.) eventListeners&lt;br&gt;
5.) Nested Functions&lt;br&gt;
6.) Local Storage API&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_kxx5I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621426017200/hM7KkXkBr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_kxx5I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621426017200/hM7KkXkBr.png" alt="Screenshot (263).png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/JS-Beginners/todo-list-project-2"&gt;To-Do List&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are lots of projects you can work on as a JavaScript developer. If you want to start a career as a web developer, building your own JavaScript projects is the best way to learn the language. As you start learning JavaScript and finish your first beginner-level projects, you will quickly feel more comfortable working independently. Also, you will surely find more fun project ideas as you go.&lt;/p&gt;

&lt;p&gt;So, which projects are you going to build next? Let me know in the comments below!&lt;br&gt;
😊&lt;/p&gt;

&lt;p&gt;If you liked this article, share it with others! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 🤝🤝
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-reactjs-3553"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Beautify Your GitHub Profile like a Pro</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 30 May 2021 04:55:22 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/beautify-your-github-profile-like-a-pro-5093</link>
      <guid>https://dev.to/ruppysuppy/beautify-your-github-profile-like-a-pro-5093</guid>
      <description>&lt;p&gt;If you have ever used &lt;strong&gt;GitHub&lt;/strong&gt;, you must have come across some impressive-looking profiles and thought "Damn! I want my profile to look like that." Well, this article will help you with precisely that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-add-a-raw-readme-endraw-"&gt;
  &lt;/a&gt;
  1. Add a &lt;code&gt;ReadMe&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;This is simply the easiest way to boost the visual appeal of your profile many folds. To create a &lt;code&gt;ReadMe&lt;/code&gt; for your &lt;strong&gt;GitHub&lt;/strong&gt; profile, create a new repository with your username. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lm3TVWg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prognnv0kl3t9o4y57te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lm3TVWg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prognnv0kl3t9o4y57te.png" alt="ReadMe Repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initialize the repository with a &lt;code&gt;ReadMe.md&lt;/code&gt; file and anything you write in the file will be shown in your &lt;strong&gt;GitHub&lt;/strong&gt; Profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwQfMWQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18md8cuyzdd4n4tzfyeq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwQfMWQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18md8cuyzdd4n4tzfyeq.PNG" alt="ReadMe Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ReadMe&lt;/code&gt; is the perfect place to describe yourself, list out your achievements and skills. You can also add badges like these to make your profile look even more attractive. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chf73s-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Linked_In-0077B5%3Fstyle%3Dfor-the-badge%26logo%3DLinkedIn%26logoColor%3Dwhite" alt="linked-in"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/ruppysuppy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---yDJLJ2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-000000%3Fstyle%3Dfor-the-badge%26logo%3DGitHub%26logoColor%3Dwhite" alt="github"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/tapajyotib/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg7TEMKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Instagram-E4405F%3Fstyle%3Dfor-the-badge%26logo%3Dinstagram%26logoColor%3Dwhite" alt="instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create the badge the syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;Badge Name&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Badge&lt;/span&gt; &lt;span class="na"&gt;Text&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;Background&lt;/span&gt; &lt;span class="na"&gt;Color&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;?style=for-the-badge&amp;amp;logo=&lt;span class="nt"&gt;&amp;lt;Icon&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;amp;logoColor=&lt;span class="nt"&gt;&amp;lt;Logo&lt;/span&gt; &lt;span class="na"&gt;Color&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the &lt;strong&gt;Github&lt;/strong&gt; badge would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;github&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/GitHub-000000?style=for-the-badge&amp;amp;logo=GitHub&amp;amp;logoColor=white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can browse through the list of available icons on &lt;a href="https://simpleicons.org/"&gt;Simple Icons&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-manage-your-repositories"&gt;
  &lt;/a&gt;
  2. Manage your &lt;em&gt;Repositories&lt;/em&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt; allows you to pin &lt;em&gt;Repositories&lt;/em&gt; and &lt;em&gt;Gists&lt;/em&gt; in your profile. This is a remarkable feature that enables you to display the things you want to showcase. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AaipZvZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqiqe58zim5qmijcp2zg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AaipZvZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqiqe58zim5qmijcp2zg.PNG" alt="Pinned repositories"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's also a good idea to add &lt;em&gt;details&lt;/em&gt;, &lt;em&gt;tags&lt;/em&gt; and &lt;em&gt;emojis&lt;/em&gt; to make the repository more engaging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMH5gEBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wa625c2laimozg15jyf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMH5gEBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wa625c2laimozg15jyf.PNG" alt="Repository with details"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uHlpiKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf06qycuobmhv71zrdo3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uHlpiKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf06qycuobmhv71zrdo3.PNG" alt="Repository with no details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the one with details is way more engaging than the one without any.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-contribute-contribute-and-contribute-some-more"&gt;
  &lt;/a&gt;
  3. &lt;strong&gt;Contribute&lt;/strong&gt;, &lt;strong&gt;Contribute&lt;/strong&gt; and &lt;strong&gt;Contribute&lt;/strong&gt; some more!
&lt;/h1&gt;

&lt;p&gt;This is simply the most important step to make your &lt;strong&gt;GitHub&lt;/strong&gt; look awesome! I get it, getting started is scary, so if you need help, check out this &lt;a href="https://dev.to/ruppysuppy/zero-to-hero-get-started-with-open-source-10b7"&gt;article on how to get started with &lt;strong&gt;Open Source Development&lt;/strong&gt;&lt;/a&gt;. You don't have to start with huge features or projects; begin with documentation fixes, then move on to tiny bug fixes and features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Source Development&lt;/strong&gt; can boost your profile regardless if you are going for a &lt;em&gt;job interview&lt;/em&gt; or &lt;em&gt;freelancing&lt;/em&gt;. After a few good contributions, you will start getting job offers from various companies. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtLhJ8FK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixcxnjh9u7azfsrboxt0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtLhJ8FK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixcxnjh9u7azfsrboxt0.PNG" alt="Open Source Contributions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One essential thing to keep in mind is: &lt;strong&gt;DO NOT TRY TO CHEAT THE PROCESS&lt;/strong&gt;. Every one of your contributions is listed on &lt;strong&gt;GitHub&lt;/strong&gt;. There are a lot of people who create fake issues to get a green dot for contribution. This only creates &lt;em&gt;negative impression&lt;/em&gt; on the person viewing your profile. If you keep making tiny incremental improvements, you will make it; if you try to use a shortcut, you will likely crash and burn. As the saying goes, "Slow and steady wins the race."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a student &amp;amp; freelancer who will soon start off as a Digital Nomad as soon as I graduate. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>markdown</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Answer: How to call CodeIgniter controller function from view</title>
      <author>emmanueldiogu</author>
      <pubDate>Sun, 30 May 2021 04:35:43 +0000</pubDate>
      <link>https://dev.to/emmanueldiogu/answer-how-to-call-codeigniter-controller-function-from-view-4m63</link>
      <guid>https://dev.to/emmanueldiogu/answer-how-to-call-codeigniter-controller-function-from-view-4m63</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/9986520/how-to-call-codeigniter-controller-function-from-view/67757667#67757667" rel="noopener noreferrer"&gt;
              &lt;span class="title-flare"&gt;answer&lt;/span&gt; re:  How to call codeigniter controller function from view
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;May 30 '21&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/9986520/how-to-call-codeigniter-controller-function-from-view/67757667#67757667" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          0
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;I know this question is old but it is still a relevant question. From my experience there are situations that warrant calling a function from view in your Codeigniter 4 app, I'll just advise that you keep it clean and minimal. Below is how I have called controller function from…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/9986520/how-to-call-codeigniter-controller-function-from-view/67757667#67757667" rel="noopener noreferrer"&gt;Open Full Answer&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>Don't Develop Just for Yourself - A Developer's Checklist to Accessibility</title>
      <author>Eevis (she/her)</author>
      <pubDate>Sun, 30 May 2021 03:51:54 +0000</pubDate>
      <link>https://dev.to/eevajonnapanula/don-t-develop-just-for-yourself-a-developer-s-checklist-to-accessibility-545k</link>
      <guid>https://dev.to/eevajonnapanula/don-t-develop-just-for-yourself-a-developer-s-checklist-to-accessibility-545k</guid>
      <description>&lt;p&gt;We, as developers, tend to develop sites unconsciously for people like ourselves. If we don't actively pay attention, the sites are often accessible only for certain types of people:  Sighted mouse-users, who have good fine motor skills and are good at using computers. &lt;/p&gt;

&lt;p&gt;It leads to moments where no one who navigates the web with only a keyboard (or keyboard simulating device) can access and interact with the site. It is a pretty big group of people!&lt;/p&gt;

&lt;p&gt;We have a responsibility to make sites that work for all of our users. In some cases, it is required by law, but it is not the only reason we should care. &lt;/p&gt;

&lt;p&gt;This blog post is aimed for those at the beginning of their accessibility journey. You might know some things, like "always provide an alt-text for an image," but are unsure what to write there. Or you don't have any idea how to know if your site is accessible at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Following this blog post won't make your site 100% accessible!&lt;/strong&gt; The goal of this post is to provide some information about some things to check manually after using some automated testing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyboard-navigation"&gt;
  &lt;/a&gt;
  Keyboard Navigation
&lt;/h2&gt;

&lt;p&gt;First of all, abandon your mouse for a second. Don't use it. Try to navigate through the website using only the keyboard. Try to complete every task user needs to be able to complete on the website. Can you do it? Can you see where you are at the moment? Is the focus indicator (yes, that thing many designers and developers like to remove) visible enough? &lt;/p&gt;

&lt;p&gt;If you can't use the whole website with only a keyboard, that is an accessibility and usability problem. However, one thing to note here is that keyboard interaction is not necessarily accomplished with just tab and enter, as it has been at some point. The general pattern goes, as &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav"&gt;WAI-ARIA Authoring Practices&lt;/a&gt; state:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A primary keyboard navigation convention common across all platforms is that the tab and shift+tab keys move focus from one UI component to another while other keys, primarily the arrow keys, move focus inside of components that include multiple focusable elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another thing to consider in this point is focus indicators. They should be visible, and even if the default focus indicator on the browser is sufficient to pass the WCAG-requirements, it might be hard to see. So I would recommend enhancing the focus indicator to be more visible. Just remember that the color of the indicator should have a sufficient contrast ratio with the adjacent background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-item-for-keyboard-navigation"&gt;
  &lt;/a&gt;
  Action Item for Keyboard Navigation
&lt;/h3&gt;

&lt;p&gt;Using only your keyboard, navigate through your site. Pay attention to navigation menus and other custom widgets that might lose focus because some elements are hidden incorrectly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is everything reachable and operable without a mouse? Can you see the focus every time?&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alttexts"&gt;
  &lt;/a&gt;
  Alt-Texts
&lt;/h2&gt;

&lt;p&gt;Another thing to check manually is alternative texts for the pictures. You might wonder, isn't it a thing automated testing catches? Well, yes. Automated testing tools crawl through the markup, and when they find an &lt;code&gt;img&lt;/code&gt;-element, they check if the &lt;code&gt;alt&lt;/code&gt;-attribute is present. They don't (and can't) check the quality of the alternative texts.&lt;/p&gt;

&lt;p&gt;Not all images need alternative texts; however, they do need the &lt;code&gt;alt&lt;/code&gt;-attribute. So for a purely decorative image, you need to provide an empty &lt;code&gt;alt&lt;/code&gt;-attribute. This "hides" the image from the screen reader so that it won't get read at all. &lt;/p&gt;

&lt;p&gt;You might ask, shouldn't screen reader users know about everything on the page? A person, who consumes the web by listening, might want to reduce the amount of information. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-item-for-alttexts"&gt;
  &lt;/a&gt;
  Action Item for Alt-Texts
&lt;/h3&gt;

&lt;p&gt;Go through every image on the page. You can use, for example, &lt;a href="https://chrispederick.com/work/web-developer/"&gt;Web Developer-extension&lt;/a&gt; or the developer tools and check the image's alt attribute. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is the text descriptive? Or is the picture decorative?&lt;/strong&gt; You can find more information on how you should write the alt-text for every type of image from &lt;a href="https://webaim.org/techniques/alttext/"&gt;WebAIM: Alternative Text&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-language"&gt;
  &lt;/a&gt;
  Page Language
&lt;/h2&gt;

&lt;p&gt;Another thing that automated tests catch, if it's missing, is the page language. Some of the project starters, such as &lt;code&gt;create-react-app,&lt;/code&gt; have the lang-attribute set automatically, but some (I'm looking at you, NextJS) don't.  &lt;/p&gt;

&lt;p&gt;If the site's language is English, you're pretty much okay with the automatic language (if it exists). However, if it is not, then you need to change it. The reason is that the language screen readers use for the page comes from that &lt;code&gt;lang&lt;/code&gt;-attribute. So if you have a page with content in Finnish, and there is that &lt;code&gt;en&lt;/code&gt;-attribute, a screen reader would pronounce every word with an English accent. That's not beautiful. Here's an example with another way around. It's almost as bad:&lt;/p&gt;


      
   

&lt;h3&gt;
  &lt;a href="#action-item-for-page-language"&gt;
  &lt;/a&gt;
  Action Item for Page Language
&lt;/h3&gt;

&lt;p&gt;Check the language of the page in the page's &lt;code&gt;html&lt;/code&gt;-attribute. You can do this from developer tools' Elements-tab. &lt;strong&gt;Is the language code the same as the primary language on the page?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-resizing"&gt;
  &lt;/a&gt;
  Text Resizing
&lt;/h2&gt;

&lt;p&gt;Some people increase the text size of the webpage with, for example, browser settings. It means that the content takes more space and might flow differently. Developers should test if the site is working when text size has been increased to at least 200%. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-item-for-text-resizing"&gt;
  &lt;/a&gt;
  Action Item for Text Resizing
&lt;/h3&gt;

&lt;p&gt;Have the webpage on two browsers open, preferably side by side. In the first browser, use browser's built-in zooming for testing by using CMD++ if you're using a Mac, and CTRL++ if you're using Windows or Linux. Increase the size to the maximum, which should be 200%. Compare the zoomed site and the one without a zoom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does your site still work? Is the text flowing okay? Does increasing the text size add horizontal scrolling? Is all the information still there?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#color-alone"&gt;
  &lt;/a&gt;
  Color Alone
&lt;/h2&gt;

&lt;p&gt;If color alone conveys meaning, there are lots of users who miss out on that information. For example, suppose there is a list of different activities, and their level of advancement is communicated only with a colored box. In that case, there are some groups of people who can't access that information. &lt;/p&gt;

&lt;p&gt;For example, a person who is color blind can't separate certain color combinations, and thus the information, when it's conveyed only with color, is not understandable. Also, for screen reader users, the color does not say anything; screen readers don't say anything about the web page's styles. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-item-for-color-alone"&gt;
  &lt;/a&gt;
  Action Item for Color Alone
&lt;/h3&gt;

&lt;p&gt;One thing that could be used as help for testing if the color alone is used to convey a meaning is to change the site into grayscale.&lt;br&gt;&lt;br&gt;

  How to turn a page grayscale?
  &lt;br&gt;
You can turn a page grayscale from the developer tools in Chrome and Edge from the "Rendering"-tab. You can find it with the same instructions as for the &lt;a href="https://www.youtube.com/watch?v=wIj-NymT5fY"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;-simulation&lt;/a&gt;. There is a header "Emulate vision deficiencies" on that tab, and you can choose Achromatopsia from the select.&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can you still understand all the information on the page?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-zooming"&gt;
  &lt;/a&gt;
  Mobile Zooming
&lt;/h2&gt;

&lt;p&gt;I remember, that at some point it was customary to add this &lt;code&gt;&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /&amp;gt;&lt;/code&gt; to disable the pinch-zoom on webpages. Nobody ever explained why it was, but it was everywhere I copied code to my projects. I didn't know then that it would make zooming on touch devices harder. &lt;/p&gt;

&lt;p&gt;Some people need to use zoom to see the elements on the page. Also, many people want to, for example, zoom in on pictures to see how they look in that picture or some other detail. And sometimes, the website is unusable without zooming. That is a thing that would need fixing from the developers' side, but things don't always happen too fast, so meanwhile, users would need to use the zoom.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-item-for-mobile-zooming"&gt;
  &lt;/a&gt;
  Action Item for Mobile Zooming
&lt;/h3&gt;

&lt;p&gt;Open your site or app on a mobile device. Try zooming in with your fingers. &lt;strong&gt;Can you do it?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#captions-and-transcripts"&gt;
  &lt;/a&gt;
  Captions and Transcripts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#captions"&gt;
  &lt;/a&gt;
  Captions
&lt;/h3&gt;

&lt;p&gt;Imagine if you couldn't hear the words said in the video. How would you then understand what is going on in that video? It can happen for numerous reasons. You could have a hearing-related disability or be in a crowded place where you don't want to turn the sound on.&lt;/p&gt;

&lt;p&gt;For these situations, captions are essential. Captions are a bit different from subtitles. They also contain information about important sounds on the video, and they identify the speaker if they're not easy to identify from the video. Captions can be either &lt;em&gt;closed&lt;/em&gt;, meaning they can be turned on, or &lt;em&gt;open&lt;/em&gt;, meaning they are always present. &lt;/p&gt;

&lt;p&gt;And a word about auto-captions: Please, no. The speech recognition algorithms aren't that good yet, and they produce lousy quality. Some even call them "auto-craptions." Suppose you don't have a hearing-related disability and haven't encountered this in your life. In that case, I have another example that could maybe give some context: Services like Netflix and subtitles (when the subtitle language is not English). I mean, at least for Finnish, the subtitles are often just crap. The reason is either using automated translations or not paying enough for professionals to do the translations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transcripts"&gt;
  &lt;/a&gt;
  Transcripts
&lt;/h3&gt;

&lt;p&gt;Transcripts are a way for DeafBlind users to understand what's going on in videos or audio content (say, podcasts). Also, for audio-only content, transcripts are the only way for Deaf people to get the message. &lt;/p&gt;

&lt;p&gt;If you're interested to learn more about captions, transcripts, and audio descriptions (which I'm not covering here), &lt;a href="https://webaim.org/techniques/captions/"&gt;WebAIM: Captions, Transcripts, and Audio Descriptions&lt;/a&gt; is a good resource on that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-item-for-captions-and-transcripts"&gt;
  &lt;/a&gt;
  Action Item for Captions and Transcripts
&lt;/h3&gt;

&lt;p&gt;Go through every piece of multimedia on your website. &lt;strong&gt;Are the captions and transcripts in place (depending on the media type)?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;In this blog post, I have introduced seven checks any developer can do to ensure that their website is a bit more accessible. Some of them take more time than others, but they're worth it!&lt;/p&gt;

&lt;p&gt;Do you have any tips for simple checks for accessibility problems that aren't easy to catch with automated tests?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav"&gt;WAI-ARIA Authoring Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webaim.org/techniques/alttext/"&gt;WebAIM: Alternative Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webaim.org/techniques/captions/"&gt;WebAIM: Captions, Transcripts, and Audio Descriptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wIj-NymT5fY"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;-simulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrispederick.com/work/web-developer/"&gt;Web Developer-extension&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@glenncarstenspeters?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Glenn Carstens-Peters&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>5 Common Mistakes When Using the Bootstrap Framework.</title>
      <author>Amran Hussein</author>
      <pubDate>Sun, 30 May 2021 02:33:54 +0000</pubDate>
      <link>https://dev.to/amran92/5-common-mistakes-when-using-the-bootstrap-framework-28c</link>
      <guid>https://dev.to/amran92/5-common-mistakes-when-using-the-bootstrap-framework-28c</guid>
      <description>&lt;p&gt;At first glance, this framework seems to us as simple and easy to deal with, and of course, it is so, and starting to use it is not difficult. Documenting this framework is well written and contains a lot of programming code related to HTML, CSS, and JavaScript. but some errors and problems may not be apparent or may be present in ambiguous use cases. Because the Bootstrap framework seems simple and easy to use, this framework spread like wildfire and many developers started using it, which led to many errors and some problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aI3k2z9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhsr5cfqlhjfkpcilbex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aI3k2z9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhsr5cfqlhjfkpcilbex.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Therefore, in this article, I will list 5 common mistakes that users of this framework make.&lt;/p&gt;

&lt;p&gt;Mistake 1: This framework was misunderstood in the first place.&lt;/p&gt;

&lt;p&gt;There are some misconceptions present in the minds of developers about this framework, and this may be because these concepts are not explicitly and clearly present in the framework site or because developers do not take the time to read the documentation of this framework. Developers may do a lot of things wrong and then blame the framework itself, so let us clarify some important facts.&lt;/p&gt;

&lt;p&gt;The Bootstrap framework is a comprehensive and integrated framework, but it is not bulky or massive. This framework comes with basic templates that contain many user interface components such as tables, forms, buttons, dropdowns, and much more. You can use these components to create an interface that works best for multiple browsers, devices, and dimensions.&lt;/p&gt;

&lt;p&gt;It is true that the framework will not do everything, but it provides a set of options for you to choose from, which helps developers focus on development more than design and helps them get a beautiful website in less time.&lt;/p&gt;

&lt;p&gt;Mistake 2: Thinking that you would not need to know CSS to use this framework.&lt;/p&gt;

&lt;p&gt;If you thought you would not need to know CSS to use this framework then you are wrong, as any web developer needs knowledge of CSS and HTML5. It is true that it saves you the trouble of dealing with some of the annoying CSS issues (such as the vendor prefixie) and gives you many default formats, but you must understand CSS. You may not need to know how media queries work, but you will of course need to know how responsive design works in general. Frameworks are not designed to teach you CSS, but they may help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYDc7n3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqtf4ypfcnz6m9nvl2l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYDc7n3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqtf4ypfcnz6m9nvl2l7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mistake 3: Changing the default CSS file for this frame.&lt;/p&gt;

&lt;p&gt;Let me make it simple and straightforward: Never modify bootstrap.css file.&lt;/p&gt;

&lt;p&gt;If you modify that file, things will become complicated, and you will destroy the design when you update Bootstrap files when a new version of this framework is released. You can replace the default formats of this frame with the formats you want (such as colors, margins, paddings) and there is no need to modify the bootstrap.css file at all.&lt;/p&gt;

&lt;p&gt;Do not know how to use LESS or SASS? No problem with that, all you must do is create the CSS file and put in it the formatting that you want to replace from the main bootstrap.css file. And as we mentioned earlier, knowing CSS is extremely important even if you think otherwise. You can create new CSS selectors or classes and put them in your HTML file to replace the default bootstrap layouts (do not forget to put your CSS file after the bootstrap default CSS files for everything to work correctly).&lt;/p&gt;

&lt;p&gt;Mistake 4: Using everything that the Bootstrap framework provides.&lt;/p&gt;

&lt;p&gt;I have mentioned said earlier that this framework is comprehensive and integrated and provides many user interface components and many HTML and CSS templates and JavaScript plugins as well. But you should not use everything that this framework offers if you will not need it for the project you are working on.&lt;/p&gt;

&lt;p&gt;This is especially true with JavaScript plugins, as you should choose only the plugins that you will need and you should not use everything because it looks beautiful and awesome, as this may overload your site and make it slow. So, you should first not insert the bootstrap.js file and create your site using only HTML and CSS and then add the components you need one by one.&lt;/p&gt;

&lt;p&gt;Mistake 5: complicating things with JavaScript and neglecting the "data-" attribute.&lt;/p&gt;

&lt;p&gt;Designers or beginners to JavaScript can easily create web pages using HTML, CSS, and Bootstrap. But if they are not good at programming, they may fall into the trap of misuse of JavaScript or even complicate matters. It is important to note that JavaScript plugins can be used using an API provided by the Bootstrap framework without having to write a single JavaScript line.&lt;/p&gt;

&lt;p&gt;For example, we can enable a modal dialog without writing a single line of JavaScript by using:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--arq2jZZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsma860t8dogis55yh4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--arq2jZZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsma860t8dogis55yh4c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On an element such as a button or anchor and passing additional values using the -data attributes. In the code below we specified an element with id "#myModal" and used the data-backdrop option to prevent the window from disappearing if the user clicked outside the window, and by using the data-keyboard option we disabled the escape button on the keyboard. That closes the window when pressed. And all of this was done using just one HTML line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9PXxiX0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xb8qih4uu5sptyg2jvl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PXxiX0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xb8qih4uu5sptyg2jvl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Create Your Own Snippets in VS Code</title>
      <author>hasanmn</author>
      <pubDate>Sun, 30 May 2021 01:50:06 +0000</pubDate>
      <link>https://dev.to/hasanmn/how-to-create-your-own-snippets-in-vs-code-1h0c</link>
      <guid>https://dev.to/hasanmn/how-to-create-your-own-snippets-in-vs-code-1h0c</guid>
      <description>&lt;p&gt;I am always looking for a new way to improve my workflow, to be more efficient. I found that using snippets is one of many things that surely can enhance my productivity. With snippets, using only several characters you get a chunk of codes that you often use. Certainly, there are a lot of snippet extensions in the VS Code marketplace. These snippets are super awesome, offering you a huge number of snippets; any snippet that you can imagine probably exists there. But, to be honest, I only use a few of them, and I have a hard time remembering their prefixes. I feel that it is better to create my own snippet that suits my own workflow, and hence I can remember easily.&lt;/p&gt;

&lt;p&gt;Here is how I create my own snippets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install  &lt;a href="https://marketplace.visualstudio.com/items?itemName=wware.snippet-creator"&gt;Snippet Creator Extension&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the editor, type a block of codes that you want to use as the snippet. Highlight them, open the command palette ( use &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt;), select &lt;code&gt;Create Snippet&lt;/code&gt;,  and just follow the suggested options.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_EBhMNxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niyb8hsw9aaorm5fqzo3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_EBhMNxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niyb8hsw9aaorm5fqzo3.gif" alt="Create Snippet"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modify the created snippet to further accommodate your needs. Open command palette and select &lt;code&gt;Preference: Configure User Snippets&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CsBWuEUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kdi764oax2rp42uvgm2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CsBWuEUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kdi764oax2rp42uvgm2.gif" alt="Modify Snippet"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can enjoy it. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKBVIOpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydt2i7leg70sk3uoge3l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKBVIOpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydt2i7leg70sk3uoge3l.gif" alt="Use Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>snippet</category>
      <category>extensions</category>
      <category>programming</category>
    </item>
    <item>
      <title>React Application Various Testing Options</title>
      <author>Animesh Kumar</author>
      <pubDate>Sun, 30 May 2021 00:40:56 +0000</pubDate>
      <link>https://dev.to/an1meshk/react-application-various-testing-options-543d</link>
      <guid>https://dev.to/an1meshk/react-application-various-testing-options-543d</guid>
      <description>&lt;p&gt;&lt;em&gt;Any post on testing libraries will be incomplete without Mike Cohn’s Test Pyramid diagram, so here it is:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6-Y9gag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0d447qk2tsl15lkaspg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6-Y9gag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0d447qk2tsl15lkaspg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Image source: &lt;a href="https://martinfowler.com/bliki/TestPyramid.html"&gt;https://martinfowler.com/bliki/TestPyramid.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need more unit tests, lesser integration tests, and even lesser end-to-end tests, why? as it costs time and money to write more integration and end-to-end tests. Also, unit tests are faster compared to other test siblings. And not to mention, no one wants to wait for hours for the CI-CD pipeline execution.&lt;/p&gt;

&lt;p&gt;Now getting back to our main topic, the bigger question is which library to use for unit, integration, and end-to-end testing? Well! there are various options available and everyone has their own view (which is great :D). Based upon my experience in creating enterprise-level modern JavaScript applications, the Single Page App (SPA), here is my opinionated view.&lt;/p&gt;

&lt;p&gt;Before, we dive deep in, here is the image that nicely illustrates the testing libraries per test tool abilities like test framework, assertion, test runner, mocking, code coverage (from left to right).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PI8e-CUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hbfhll4cr4c203idmx4a.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PI8e-CUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hbfhll4cr4c203idmx4a.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Image Source: &lt;a href="https://www.udemy.com/course/complete-react-developer-zero-to-mastery/"&gt;https://www.udemy.com/course/complete-react-developer-zero-to-mastery/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; is one of the libraries that provide various capabilities, which is shown in the above comparison. Jest (&lt;a href="https://www.npmjs.com/package/jest"&gt;4 million weekly downloads&lt;/a&gt;) is a powerful tool for writing unit tests for pure functions. However, for more complex scenarios, especially when working with React apps, &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt; (1 million weekly downloads) is an excellent choice.&lt;/p&gt;

&lt;p&gt;React Testing Library is built on top of DOM Testing Library, which helps writing tests using selectors. In places where you can’t use the React Testing Library, &lt;a href="https://enzymejs.github.io/enzyme/"&gt;Enzyme&lt;/a&gt; library can rescue you (though Enzyme is the competitor).&lt;/p&gt;

&lt;p&gt;So, with the help of Jest, React Testing Library, and Enzyme, one can pretty much cover any unit and integration test case scenarios. So, what about end-to-end testing? Well! &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; library is the best of the best choice.&lt;/p&gt;

&lt;p&gt;Awesome documentation, ease of implementation, less learning curve, I can’t even think of Selenium or any other library. Cypress has a nice interface where one can see the test execution with minimal test writing effort.&lt;/p&gt;

&lt;p&gt;So, with this are we done? of course not, with the growing popularity of microservice architecture, contract testing is an essential part of it. And &lt;a href="https://docs.pact.io/"&gt;Pact&lt;/a&gt; is the consumer-driven contract testing library that provides assurance that consumer application or provider service can be deployed to production without breaking each other’s trust or in other terms the contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have reached here, then I did a satisfactory effort to keep you reading. Please be kind to leave any comment or ask for any correction. &lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;https://martinfowler.com/articles/practical-test-pyramid.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>react</category>
    </item>
    <item>
      <title>Perfect Date: A Javascript and API Project</title>
      <author>Christine Contreras</author>
      <pubDate>Sat, 29 May 2021 23:17:00 +0000</pubDate>
      <link>https://dev.to/christinecontreras/perfect-date-a-javascript-and-api-project-1hng</link>
      <guid>https://dev.to/christinecontreras/perfect-date-a-javascript-and-api-project-1hng</guid>
      <description>&lt;p&gt;I am currently a Flatiron student. Our first phase focused on the fundamentals of Javascript and understanding APIs. At the end of this phase, we have to synthesize our learnings into a one-page app that interests us and showcases our understanding. I want to share an overview of my project as well as the two parts of the project that I struggled with but ultimately learned the most from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-api-and-why-they-are-amazing"&gt;
  &lt;/a&gt;
  What is an API and Why They Are Amazing
&lt;/h2&gt;

&lt;p&gt;Before I get into my project, let’s break down what an API is. API stands for “Application Programming Interface” and is an intermediary between two applications so that they can communicate with each other. &lt;/p&gt;

&lt;p&gt;Companies (like Google) or organizations (like Governments) use API’s to share information or functionality with us so we can use the data to build projects. There are &lt;a href="https://github.com/public-apis/public-apis"&gt;free API’s&lt;/a&gt; out there open to anybody who wants to use them.&lt;/p&gt;

&lt;p&gt;For this project, I used the &lt;a href="https://weatherstack.com/"&gt;Weatherstack API&lt;/a&gt;. They have a free version where you can view current weather but I paid to use their historical weather database. API’s make it easy for you to use by providing documentation on how to access the data and what data is available for use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perfect-date-overview"&gt;
  &lt;/a&gt;
  Perfect Date Overview
&lt;/h2&gt;

&lt;p&gt;I am currently in the beginning stages of planning a wedding and one of the main parts of a wedding you can’t control is the weather. But I can tilt the odds in my favor by picking a wedding date that has had historically good weather. That is where the concept for the Perfect Date app came from. It lets you plan big events, whether that’s a wedding or an awesome vacation, around historical weather data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#see-average-weather-data-by-location-and-month"&gt;
  &lt;/a&gt;
  See Average Weather Data By Location and Month
&lt;/h3&gt;

&lt;p&gt;The first part of my app is the form. You input your location, month, and timeframe you want to see weather data for. For the time frame, you can pick from last year through the past 5 years of weather data.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SeHJ7YcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/be83c8156ejhubh76wgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SeHJ7YcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/be83c8156ejhubh76wgz.png" alt="See Average Weather Data By Location and Month"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the API request is made a calendar view of the averages is created. The example below shows the average data for Miami from 2021-2020. For the icons and weather description, it is showing the mode for the aggregated data. If there is no mode then it shows the most recent icon and weather description.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zeOj2fCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqmm7izm2ksj07ji3as9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeOj2fCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqmm7izm2ksj07ji3as9.png" alt="Calendar View of Weather Data"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#see-breakdown-of-weather-date-for-a-specific-day"&gt;
  &lt;/a&gt;
  See Breakdown Of Weather Date For A Specific Day
&lt;/h3&gt;

&lt;p&gt;If you click “see details” on an individual day you can see the breakdown of weather data by year.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvMVSsDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl2hj5udz3ytq7rfs12t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvMVSsDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl2hj5udz3ytq7rfs12t.png" alt="See Breakdown Of Weather Date For A Specific Day"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#save-your-dates-and-compare"&gt;
  &lt;/a&gt;
  Save Your Dates and Compare
&lt;/h3&gt;

&lt;p&gt;If you click “save this date” it will save the data into a JSON server (a local one that I set up). Click “see all saved dates” and it will break down your saved dates by location. If you save multiple dates and locations it will break down the dates by location.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLrKFv8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ta73t85y3mbbk5tj6eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLrKFv8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ta73t85y3mbbk5tj6eu.png" alt="Save Your Dates and Compare"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#app-problems-and-solutions"&gt;
  &lt;/a&gt;
  App Problems and Solutions
&lt;/h2&gt;

&lt;p&gt;I thought about this app 24/7 for a week straight and how to make it work when I ran into a problem. This included jolting up in the middle of the night with solutions and writing them down so I can try them first thing in the morning. Two problems came up with this application that made me want to cry at times because I hadn’t learned about the solution in Flatiron yet.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problem-1-grouping-data-together-from-api"&gt;
  &lt;/a&gt;
  Problem #1: Grouping Data Together From API
&lt;/h3&gt;

&lt;p&gt;The first challenge I ran into was that the Weatherstack API only lets you fetch historical weather data 60 days at a time. That meant that depending on how many years of data you want to compare I had to make a separate fetch to the API for each year. So instead of averaging the data once it’s called from the API I needed to store and group the data accurately from each API call before I could average the data. &lt;/p&gt;

&lt;p&gt;The second part of this problem was grouping the dates accurately. I didn’t want to group each 1st of March together but each first Friday of the month together. They are not one in the same since dates move each year by one day or more depending on whether it’s a leap year. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My Solution
&lt;/h4&gt;

&lt;p&gt;I decided to create an array for each combination of week and day of the week in a month. Depending on the month you are looking at and in what year, the max amount of weeks to show on a calendar are 6 weeks. With 7 days in a week, it came out to 42 combinations. (Although I try to avoid declaring variables with var, in this case, it was the only way I could declare the variables and they still work for my solution).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//create arrays to push API data. array push corresponds with week and day of week the object falls on&lt;/span&gt;
&lt;span class="nx"&gt;Var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;week1Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then created two functions to help me figure out the week and day of the week a day falls on with the parameters of the month, year, day.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//day of week&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dayOfWeek&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dayOfWeek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dayOfWeek&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// week of month&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;weekOfMonth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I fetch from the API the date pulled in is formatted as a string in the format below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;historical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-03-01&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-03-01&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date_epoch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1614556800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;astro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunrise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;07:57 AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;07:30 PM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moonrise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10:18 PM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moonset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;09:41 AM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moon_phase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Waning Gibbous&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moon_illumination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mintemp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;maxtemp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;avgtemp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;totalsnow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunhour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uv_index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hourly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I needed to break up the date so I could then add it into my functions. Once the string was split, I was able to find the week and day of the week the date fell on. Then, I had to push the date into the accurate array. It was difficult for me to find online how to create and push data into a dynamic variable name. As stated above, the only method that worked was to set the initial arrays to vars instead of const and then push the date objects into each array using &lt;code&gt;window&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Ideally, I would have liked to not declare the empty arrays and just create each new empty array with a dynamic variable name as they came up. I could not figure out how to do that so this was my solution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//push each date into the right array&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;datesObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;datesObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateDayOfWeek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dayOfWeek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateMonth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;dateArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateWeekOfMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weekOfMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateDay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startDay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

               &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`week&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dateWeekOfMonth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dateDayOfWeek&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#problem-2-waiting-for-api-data-to-push-to-arrays-before-creating-averages"&gt;
  &lt;/a&gt;
  Problem #2: Waiting For API data to Push to Arrays Before Creating Averages
&lt;/h3&gt;

&lt;p&gt;Typically Javascript runs synchronously and in a single thread. That means that it waits for the code above it to finish before moving onto the next line of code. However &lt;code&gt;fetch&lt;/code&gt; is asynchronous. This means that Javascript doesn’t wait for an API fetch to be done before it runs the next line of code. This is typically a good thing for a website since you don’t know how long and if a fetch will come back and you don’t want a user waiting forever for the page to load. However, this project is solely about fetching API data and relies 100% on the API data.&lt;/p&gt;

&lt;p&gt;At first, the fetch request to the API would be sent but then my calendar would be created with blank &lt;code&gt;li&lt;/code&gt;’s because it would continue running my code without the API data in the corresponding arrays. Essentially I needed to stop the rest of my code from running and only continue once I fetched the API data. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My Solution
&lt;/h4&gt;

&lt;p&gt;The solution I found online was async functions. I will not try to claim all knowledge about async functions but found this &lt;a href="https://www.youtube.com/watch?v=T4ql-QWKlwk"&gt;video&lt;/a&gt; helpful in explaining async functions and how to create them. Essentially async functions let you use the keyword await. This lets the function “wait” for a promise to be given back before it runs the next line of code. This means I had to wrap my &lt;code&gt;fetchSubmit&lt;/code&gt; and &lt;code&gt;createDatesInCalendar&lt;/code&gt; functions each in a promise and pass them back into my async function. Once I created the async function it worked as intended!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//example of my createDatesInCalendar function wrapped in a promise&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDatesInCalendar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dayOfMonthArrays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;week1Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week1Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week2Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week3Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week4Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week5Day6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;week6Day6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

       &lt;span class="nx"&gt;dayOfMonthArrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="c1"&gt;//if array is empty create empty list item else create list item with array info&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dayOfMonthArrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="nx"&gt;emptyLi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
               &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dayOfMonthArrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="nx"&gt;createAverageObjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;

           &lt;span class="c1"&gt;//save arrays with API objects into new array so we can access data later&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dateArrayObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;

       &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;day averages function finished&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//how many times to fetch API data (fetch for each year of data). wait for fetches to be done before calculating averages&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeframeIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createDatesInCalendar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeframeIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createDatesInCalendar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeframeIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createDatesInCalendar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeframeIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createDatesInCalendar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numDays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createDatesInCalendar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Building this app was a great challenge and I loved doing it. I would like to make improvements to the app, such as organizing the saved dates page more and being able to select saved dates to compare them side by side. &lt;/p&gt;

&lt;p&gt;I am new to Javascript and API’s so if you know a better solution to my struggles please share them in the comments! I feel like the code above could be more DRY and/or shorter and am always looking to improve my coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>flatiron</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best Open Source Apps</title>
      <author>Abdallah Mohammed</author>
      <pubDate>Sat, 29 May 2021 22:17:20 +0000</pubDate>
      <link>https://dev.to/abdallahmoh/best-open-source-apps-619</link>
      <guid>https://dev.to/abdallahmoh/best-open-source-apps-619</guid>
      <description>&lt;h1&gt;
  &lt;a href="#rhyme-player"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/RhymePlayer/Rhyme-Player"&gt;Rhyme Player&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Rhyme Player is a great music player that supports multiple music file types it can play local music or music from the internet supporting &lt;code&gt;Light&lt;/code&gt; and &lt;code&gt;Dark&lt;/code&gt; Themes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3V2Uh-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77546233/119336809-60c78b00-bc8e-11eb-8051-95a2412f5e68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3V2Uh-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77546233/119336809-60c78b00-bc8e-11eb-8051-95a2412f5e68.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#penpot"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/penpot/penpot"&gt;PenPot&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Penpot - The Open-Source design &amp;amp; prototyping platform&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO9VsXEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fjgwdlvnvw55qj8c39.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO9VsXEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fjgwdlvnvw55qj8c39.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#akira"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/akiraux/Akira"&gt;Akira&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Akira is a native UI/UX Designing app for the linux users&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fliQMMkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/akiraux/Akira/master/data/screenshots/screenshot-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fliQMMkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/akiraux/Akira/master/data/screenshots/screenshot-1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brave-browser"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/brave/brave-browser"&gt;Brave Browser&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Three times faster than Chrome. Better privacy by default than Firefox. Uses 35% less battery on mobile.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlUBLSLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://brave.com/static-assets/images/optimized/desktop-hero-screenshot%401x.en.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlUBLSLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://brave.com/static-assets/images/optimized/desktop-hero-screenshot%401x.en.webp" alt="s"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/torvalds/linux"&gt;Linux&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Now this is not an app this is an Operating System that uses &lt;code&gt;unix&lt;/code&gt; as shell which is the same as &lt;code&gt;macos&lt;/code&gt; more private than &lt;code&gt;windows&lt;/code&gt; and works better&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L0MYHy35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5vy54tk6i2arj849knm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0MYHy35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5vy54tk6i2arj849knm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h1&gt;

&lt;p&gt;Visual Studio Code combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. It provides comprehensive code editing, navigation, and understanding support along with lightweight debugging, a rich extensibility model, and lightweight integration with existing tools.&lt;/p&gt;

&lt;p&gt;Visual Studio Code is updated monthly with new features and bug fixes. You can download it for Windows, macOS, and Linux on Visual Studio Code's website. To get the latest releases every day, install the Insiders build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwH9xgrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/35271042/118224532-3842c400-b438-11eb-923d-a5f66fa6785a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwH9xgrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/35271042/118224532-3842c400-b438-11eb-923d-a5f66fa6785a.png" alt="s"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Useful tips to prepare for the AWS Certified Developer Associate Exam</title>
      <author>Oxie Horlock</author>
      <pubDate>Sat, 29 May 2021 21:04:46 +0000</pubDate>
      <link>https://dev.to/aws-builders/useful-tips-to-prepare-for-the-aws-certified-developer-associate-exam-4b0f</link>
      <guid>https://dev.to/aws-builders/useful-tips-to-prepare-for-the-aws-certified-developer-associate-exam-4b0f</guid>
      <description>&lt;p&gt;Since I started working with Amazon Web Services (which is 1 year and 2 months ago), I knew I'd want to take an exam. I find that the process for exam preparation works very well for me, and allows me to have a structured learning programme. Besides, because of the multitude of AWS offerings, I wanted to limit the scope in some way, and even though the exams that I took still cover quite a wide range of services and products, I knew what I needed to focus on from the exam guide.&lt;/p&gt;

&lt;p&gt;Since I've been working as a developer for 5 years, I thought it'd be logical to take the AWS Certified Developer Associate Exam. I must admit that I had started preparing for the exam way too early - just a few months after I had my first hands-on AWS experience, and after having had a look at a few courses and exam questions, I realised I was missing foundational knowledge about the Cloud. That's why I decided to start with AWS Certified Cloud Practitioner Exam. It was very helpful for me because during the preparation process I gained indispensable knowledge of AWS Cloud concepts, security and the core services which we use at work.&lt;/p&gt;

&lt;p&gt;After that I started preparing for the AWS Certified Developer Associate Exam, which is quite technical, and requires some knowledge of AWS CLI and API methods. Below is the advice I'd give to anyone who would like to take this exam:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The most important thing is &lt;strong&gt;hands-on experience&lt;/strong&gt; using the AWS CLI, the console or with SDK (all of these can come up in the exam). In my experience, I think sometimes when you're not familiar with a technology, you tend not to pick up the tasks related to it, and worry that if you do, your colleagues will have to spend too much time explaining things to you. I had to change my way of thinking and pick up AWS related work even though at the beginning I had little idea of what that work would involve. Luckily, my teammates were very supportive, and little by little I was able to do tasks on AWS with more independence. Some of the useful tasks that I did that could come up in the exam were using Parallel Scans in DynamoDb and defining IAM permissions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;strong&gt;AWS learning resources&lt;/strong&gt; to the full. It's quite amazing how many excellent resources of different types there are to help you prepare for the exams. My favourite ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/training/self-paced-labs/"&gt;self-paced labs&lt;/a&gt; because they have different formats such as Hands-On Labs or Quest, and different levels. Some resources are not free here but you can pay for them with AWS credits. One way to get them is to attend AWS events.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.aws.training/LearningLibrary?query=&amp;amp;filters=Language%3A1&amp;amp;from=0&amp;amp;size=15&amp;amp;sort=_score"&gt;AWS Learning library&lt;/a&gt;. This is a part of the AWS Training and Certification portal, so you need to register there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attend &lt;a href="https://aws.amazon.com/events/"&gt;&lt;strong&gt;AWS events&lt;/strong&gt;&lt;/a&gt;. There are specific Training and Certification events, Dev Days and Online Tech Talks, as well as &lt;a href="https://aws.amazon.com/developer/community/usergroups/"&gt;AWS User Groups&lt;/a&gt; around the world, and they are free! Another good thing is that if you register for an event, you can later get access to the presentation slides and/or recordings. AWS Reinvent (and some other events) include Jams and Jam Lounges - they are sets of realistic AWS challenges of varying levels. You can do them on your own or in a team in an auto-provisioned AWS environment. You can also compete with other teams if you like. An example of task that came up in a Jam was to install a Cloudwatch Agent on a server.  Finally, my favourite AWS event has been &lt;a href="https://aws.amazon.com/gameday/?nc1=h_ls"&gt;AWS GameDay&lt;/a&gt; - an event where you have to solve a real world problem using AWS solutions in an account provisioned for you. &lt;a href="https://aws.amazon.com/events/summits/online/emea/"&gt;AWS Summit Online&lt;/a&gt; will include some hands-on labs so be sure to register soon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Blogging&lt;/strong&gt; turned out to be of great help during the exam preparation to reinforce the knowledge in written form. Even though the posts weren't very long, I found that when I was writing up about an AWS service or an aspect of it, I wanted to investigate things a bit more to ensure that what I wrote was correct. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are a lot of learning platforms that provide AWS exam preparation courses and practice tests. While some of them are excellent, others might not be that great. I think everyone who is preparing to sit an AWS exam should make use of &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Sample-Questions.pdf"&gt;&lt;strong&gt;AWS-provided sample exam questions&lt;/strong&gt;&lt;/a&gt; - the explanation of why each option is correct or incorrect is really handy and can itself serve as a source of learning. There is also a practice test that you can purchase in the training portal. It costs $20, and although you can take it as many times as you like, you have to pay every time. Because it's not free, I think it's best saved till the end of your preparation period.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's very important to be committed to learning. We all have busy lives, families and other matters to attend to, so passive learning such as listening to AWS podcasts or recordings of events described earlier can still help you to get ready to achieve AWS certification. I found this to be of great assistance when I wanted to get general understanding about a specific service I hadn't come across yet because albeit technical, the topics of some podcasts and events are high level and allow you to focus on a bigger picture while you're on the go. Attention Spanish speakers - an AWSome podcast is &lt;a href="https://aws-espanol.buzzsprout.com/"&gt;Charlas Técnicas&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I passed both AWS Certified Cloud Practitioner and Developer Associate exam. The skillsI obtained during the exam preparation is invaluable to me in my job (and it's nice to have the validation of your knowledge), and I feel that I have made a big step from where I was last year (a total AWS beginner with no knowledge of the Cloud whatsoever) to where I'm now - being able to develop, deploy, and debug AWS-based applications, and understand and use the most important Amazon Web Services and best practices. I'd encourage Software Developers who work with AWS or are only starting to do so, to challenge themselves, take the AWS Certified Developer Associate exam and I'm sure you'll deepen your knowledge of AWS Cloud.&lt;/p&gt;




</description>
      <category>aws</category>
      <category>exams</category>
    </item>
    <item>
      <title>Top 10 Websites for Developers</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Sat, 29 May 2021 20:43:05 +0000</pubDate>
      <link>https://dev.to/line/top-10-websites-for-developers-4b4l</link>
      <guid>https://dev.to/line/top-10-websites-for-developers-4b4l</guid>
      <description>&lt;p&gt;I would like to tell you that this is &lt;strong&gt;PART 3&lt;/strong&gt; of this series, Websites For Developers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#im-starting-a-free-opensource-forums-for-developers-please-donate-it-really-helps-a-shoutout-to-5-people-in-my-next-5-blogs-who-donates-you-can-donate-here-or-in-patreon"&gt;
  &lt;/a&gt;
  &lt;strong&gt;I'm starting a free Open-Source Forums For Developers, Please &lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt;, It Really Helps. A Shout-Out to 5 people in my next 5 blogs, who donates. You can donate here or in &lt;a href="https://patreon.com/chipoo"&gt;Patreon&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/chipoo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbRu8Puq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsekyopmfpf9b8uxedy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is our list of websites every developer should know-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;SlashDot&lt;/strong&gt;  ( &lt;a href="https://slashdot.org/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;SlashDot is a huge interactive source about all the latest blog posts and news stories related to technology and coding. With a real community vibe, SlashDot is run by a small group of editors and coders, with the help of the site’s robust community of readers.&lt;/p&gt;

&lt;p&gt;It is an amazing website, I recommend all of you to use this.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;A List Apart&lt;/strong&gt;   ( &lt;a href="https://alistapart.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A List Apart is a news source catering to people who make (design and build) websites. With a focus on web standards and best practices.&lt;/p&gt;

&lt;p&gt;This website should be in your bookmark, if you are a developer.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;SitePoint&lt;/strong&gt;   ( &lt;a href="https://www.sitepoint.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;SitePoint is another news publication targeted to web developers.  It is a respected source of news, trends, and opinions on all things web design and development.&lt;/p&gt;

&lt;p&gt;This website is full of free resources and most of them are very interesting.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;MIT Open Courseware&lt;/strong&gt;   ( &lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Get recorded lectures from MIT directly from its official website for free. These are the same lectures that they give to their real students.&lt;/p&gt;

&lt;p&gt;100% recommended for all of you.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;tuts+&lt;/strong&gt;   ( &lt;a href="http://net.tutsplus.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;tuts+ features tutorials on just about anything related to coding. They have tutorials for anything, a bug, a language tutorial or simply anything you ever need.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;6.&lt;strong&gt;Google Developers&lt;/strong&gt;   ( &lt;a href="https://developers.google.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The internet’s leading entity seeks to inspire coders with tutorials and tips. &lt;/p&gt;

&lt;p&gt;You guys can also get resources from google over there like google API etc. Make sure to visit this website.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;xkcd&lt;/strong&gt;   ( &lt;a href="https://xkcd.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A hilarious daily webcomic often related to computing created by Randall Munroe, xkcd had a rather humble beginning. You could have fun by being over there.&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Coding Horror&lt;/strong&gt;   ( &lt;a href="https://www.codinghorror.com/blog/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A fantastic blog about programming and human factors, Coding Horror is a blog started by Jeff Atwood back in 2004. Here he documents how his horrible times with python, just in like stackoverflow you could see this problems and can also see the solutions.&lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;Dev.to&lt;/strong&gt;   ( &lt;a href="https://dev.to/line"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Where you are, yes right now. This is also one of the best communities of developers. As you are reading this and other articles from some other amazing bloggers, you could gain a lot of knowledge by surfing dev.to.&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;programmerhumor.io&lt;/strong&gt;   ( &lt;a href="https://programmerhumor.io/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You are bored of programming, why not see some memes and have some relaxation. This is one of the best way for you to not stress. Laugh and enjoy. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#im-starting-a-free-opensource-forums-for-developers-please-donate-it-really-helps-a-shoutout-to-5-people-in-my-next-5-blogs-who-donates-you-can-donate-here-or-in-patreon"&gt;
  &lt;/a&gt;
  &lt;strong&gt;I'm starting a free Open-Source Forums For Developers, Please &lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt;, It Really Helps. A Shout-Out to 5 people in my next 5 blogs, who donates. You can donate here or in &lt;a href="https://patreon.com/chipoo"&gt;Patreon&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/chipoo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbRu8Puq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsekyopmfpf9b8uxedy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Again Saying &lt;a href="https://ko-fi.com/chipoo"&gt;Donating&lt;/a&gt; Will Really Make A Difference, or you get a &lt;a href="https://patreon.com/chipoo"&gt;membership here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create a binary decision tree in JavaScript</title>
      <author>Domagoj Štrekelj</author>
      <pubDate>Sat, 29 May 2021 20:40:32 +0000</pubDate>
      <link>https://dev.to/dstrekelj/how-to-create-a-binary-decision-tree-in-javascript-330g</link>
      <guid>https://dev.to/dstrekelj/how-to-create-a-binary-decision-tree-in-javascript-330g</guid>
      <description>&lt;p&gt;Stuck writing large and nested &lt;code&gt;if-else if-else&lt;/code&gt; conditions? Trouble following how all these different conditions interact and flow together? Here's a tool that can help: &lt;em&gt;decision trees&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Decision trees are a way to model conditional logic in a clear and composable way. Although commonly used in machine learning, they can be just as useful in more "typical" use cases which we will explore in this article.&lt;/p&gt;

&lt;p&gt;This article will provide a brief introduction into trees as a data structure and decision trees as a tool, as well as their application in software development.&lt;/p&gt;

&lt;p&gt;We will create a binary decision tree in JavaScript step-by-step and apply it to decide whether a value is a positive number, negative number, zero, or not a number at all.&lt;/p&gt;

&lt;p&gt;Read on to find out more!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-tree-data-structure"&gt;
  &lt;/a&gt;
  What is a tree data structure?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;tree&lt;/strong&gt; data structure is a type of data structure in which data - represented by &lt;strong&gt;nodes&lt;/strong&gt; - is connected in such a way that every node &lt;strong&gt;branches out&lt;/strong&gt; into zero or more &lt;strong&gt;child nodes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Visualising node connections gives the structure the appearance of a tree, hence the name.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ6TOXWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sft3w869b8kf71r43n0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ6TOXWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sft3w869b8kf71r43n0e.png" alt="An illustration of a binary tree data structure, with a red root node branching out into left and right blue child nodes; and each blue child node branching out into left and right green leaf nodes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-binary-tree-data-structure"&gt;
  &lt;/a&gt;
  What is a binary tree data structure?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;binary tree&lt;/strong&gt; data structure is a special type of tree data structure where &lt;strong&gt;every node can have up to two child nodes&lt;/strong&gt;: a &lt;strong&gt;left child node&lt;/strong&gt;, and a &lt;strong&gt;right child node&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A binary tree begins with a &lt;strong&gt;root node&lt;/strong&gt;. The root node can then branch out into left and right child nodes, each child continuing to branch out into left and right child nodes as well.&lt;/p&gt;

&lt;p&gt;Nodes that branch out into children are called &lt;strong&gt;non-leaf nodes&lt;/strong&gt;. Nodes without children are called &lt;strong&gt;leaf nodes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Going through the nodes of a binary tree - &lt;strong&gt;traversing&lt;/strong&gt; the tree - gives us the choice of moving to &lt;em&gt;either&lt;/em&gt; the left or right child node - a &lt;em&gt;binary choice -&lt;/em&gt; earning this type of tree the name &lt;em&gt;binary tree&lt;/em&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-decision-tree"&gt;
  &lt;/a&gt;
  What is a decision tree?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;decision tree&lt;/strong&gt; is a tool to help visualise &lt;em&gt;decisions&lt;/em&gt; and the &lt;em&gt;consequences&lt;/em&gt; of their &lt;em&gt;outcomes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At its simplest, a decision tree contains &lt;strong&gt;decision nodes&lt;/strong&gt; and &lt;strong&gt;outcome nodes&lt;/strong&gt; (also called &lt;em&gt;end nodes&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;Decision trees may also contain &lt;em&gt;chance nodes&lt;/em&gt;. Chance nodes serve as "weights" to favour one family of outcomes over another under certain conditions.&lt;/p&gt;

&lt;p&gt;There are many different ways to visualise decision trees, one example being flowchart symbols.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tmIISSE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri8sku7fofuwm93188o5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tmIISSE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri8sku7fofuwm93188o5.png" alt="An illustration of a binary decision tree which can be used to determine if a value is less than or equal to zero, in range of 1 to 10, in range of 11 to 20, or greater than 20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-binary-decision-tree"&gt;
  &lt;/a&gt;
  What is a binary decision tree?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;binary decision tree&lt;/strong&gt; is a decision tree implemented in the form of a binary tree data structure.&lt;/p&gt;

&lt;p&gt;A binary decision tree's &lt;em&gt;non-leaf nodes represent conditions&lt;/em&gt; and its &lt;em&gt;leaf nodes represent outcomes&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;By traversing a binary decision tree we can decide on an outcome under a given context and conditions.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-are-decision-tree-applications"&gt;
  &lt;/a&gt;
  What are decision tree applications?
&lt;/h2&gt;

&lt;p&gt;Decision trees can be applied for predictive modelling in statistics, data mining, and machine learning.&lt;/p&gt;

&lt;p&gt;Decision trees can also be applied in game development for building AIs and branching story paths, as well as general development scenarios where there is a need to handle large chains of interconnected conditional statements.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-turn-conditional-statements-into-binary-decision-tree-nodes"&gt;
  &lt;/a&gt;
  How to turn conditional statements into binary decision tree nodes?
&lt;/h2&gt;

&lt;p&gt;To turn conditional statements into binary decision tree nodes, we have to treat &lt;em&gt;conditional statements&lt;/em&gt; and &lt;em&gt;outcomes&lt;/em&gt; as &lt;em&gt;arguments&lt;/em&gt; passed to &lt;em&gt;decision functions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We will begin designing our decision tree data structure API by looking at conditional statements in our example.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;decideNumberSign&lt;/code&gt; function takes in a parameter &lt;code&gt;x&lt;/code&gt; and attempts to return its sign, 0 or &lt;code&gt;?&lt;/code&gt; if the sign cannot be determined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decideNumberSign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to making decisions based on a condition, we need to define an outcome for the case of the condition being true, and another outcome for the case of it being false. With that in mind, our decision node function would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Combining decision nodes would then look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To support more complex conditions and prevent evaluating conditions on nodes that won't be traversed, we can refactor our condition expressions into functions that will only be called when the node is reached:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isPositive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNegative&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isZero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPositive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isNegative&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the API finalised, we can implement the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conditionFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;trueOutcome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;falseOutcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;conditionFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;trueOutcome&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;falseOutcome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now build a decision tree out of decision nodes, but we can't traverse the tree just yet. To traverse the tree and reach a decision we must be able to test the conditions by calling them with a context.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-perform-binary-decision-tree-traversal"&gt;
  &lt;/a&gt;
  How to perform binary decision tree traversal?
&lt;/h2&gt;

&lt;p&gt;To traverse a binary decision tree we provide a context to the root node of the tree, which then calls its condition function and any decision node condition functions that follow as outcomes.&lt;/p&gt;

&lt;p&gt;Let's again start by outlining the API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberSignDecision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPositive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isNegative&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="nx"&gt;decide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numberSignDecision&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have to keep in mind that the outcome of our decisions - &lt;em&gt;our left and / or right child nodes&lt;/em&gt; - will either be a &lt;em&gt;new decision node&lt;/em&gt; (function) or &lt;em&gt;non-callable value&lt;/em&gt; (anything but a function).&lt;/p&gt;

&lt;p&gt;If the outcome of our decision is another decision node, we have to decide the new node's outcome for the current context until we reach a non-callable value.&lt;/p&gt;

&lt;p&gt;If the outcome of our decision node is a non-callable value we return the value.&lt;/p&gt;

&lt;p&gt;By deciding the outcome of every decision node we reach in that way, we will effectively traverse the decision tree and reach a decision.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;decide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, we're done! That's all there is to creating a simple binary decision tree in JavaScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#javascript-binary-decision-tree-example-code"&gt;
  &lt;/a&gt;
  JavaScript binary decision tree example code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Decision tree API&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conditionFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;trueOutcome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;falseOutcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;conditionFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;trueOutcome&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;falseOutcome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;decide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Example&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isPositive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNegative&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isZero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberSignDecision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPositive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isNegative&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;decision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;contextValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numberSignDecision&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/jr8de"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#homework-and-next-steps"&gt;
  &lt;/a&gt;
  Homework and next steps
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Improve the &lt;code&gt;decision()&lt;/code&gt; function to check whether the &lt;code&gt;conditionFunction&lt;/code&gt; argument is a function or not before calling it. This will make the function more robust and provide us with a way to short-circuit our decision with truthy or falsey values, which can be very useful for debugging purposes.&lt;/li&gt;
&lt;li&gt;Try turning our binary decision tree into an m-ary decision tree. M-ary decision trees can have more than two decision nodes. In their case we may not have &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; as outcomes, but rather &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; as well as any value in between which would represent how certain we are in the outcome.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you for taking the time to read through this article!&lt;/p&gt;

&lt;p&gt;Do you have any experience creating decision trees? Have you tried implementing one yourself?&lt;/p&gt;

&lt;p&gt;Leave a comment and start a discussion!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>computerscience</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
