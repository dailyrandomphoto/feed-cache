<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Abstraction Concept</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Mon, 07 Jun 2021 02:52:01 +0000</pubDate>
      <link>https://dev.to/amritanshu/abstraction-concept-17ep</link>
      <guid>https://dev.to/amritanshu/abstraction-concept-17ep</guid>
      <description>&lt;p&gt;Data abstraction is the process of hiding certain details and showing only essential information to the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;An abstract class may or may not have abstract methods but if there is an abstract method then all the child classes have to override it.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also do the partial implementation of Abstract Class methods&lt;/p&gt;

&lt;p&gt;Abstract class A -&amp;gt; with 30 abstract methods, now you know all the child have to inherit 30 of them but you can also make it work like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class B (child of class A) -&amp;gt; implement 20 methods.&lt;/li&gt;
&lt;li&gt;class C (child of class B or Grandchild of class A) -&amp;gt; implement 10 methods.&lt;/li&gt;
&lt;li&gt;So, it completes the abstract methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The abstract class gives features to child classes. So, we restrict object creation because the class is too generic.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Assume we have an Animal class&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class Animal { }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;when we create an Animal object we can not guess which animal?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Animal animal = new Animal();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZ6P98bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvcx7wx75vkap6pdfcbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZ6P98bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvcx7wx75vkap6pdfcbf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;cc- does it make any sense?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, to restrict this, we use abstract keyword.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Advice Needed 
➡️ Rails+React/Next.js: how to store code blocks so formatting persists?</title>
      <author>Annie Zheng</author>
      <pubDate>Mon, 07 Jun 2021 02:25:11 +0000</pubDate>
      <link>https://dev.to/bigfishh/rails-react-next-js-how-to-store-code-blocks-so-formatting-persists-2e83</link>
      <guid>https://dev.to/bigfishh/rails-react-next-js-how-to-store-code-blocks-so-formatting-persists-2e83</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr How should I approach storing code blocks in a react + rail application? If I were to store the code block data in the rails backend, which datatype should I store it as? And if on the frontend, would mdx files be the best solution?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m building a programming quiz application where a question has many answers and each answer (only one is correct) has an explanation. The question consists of the question itself and a code block, similar to what’s circled in orange in the following image: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5Mu9un0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zjwgavtjjmf75b6wbej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5Mu9un0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zjwgavtjjmf75b6wbej.png" alt="wireframe of the app that shows a sample question containing block of code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I want to practice building Rails+React (Next.js) applications, I thought that the questions would be stored on the backend. However, is that a good idea? If so, I’m wondering about what would be a possible way to store the code snippets given the Rails datatypes?&lt;/p&gt;

&lt;p&gt;Alternatively, I was also considering storing all the questions on the frontend. If I choose to do so, would mdx files be the best solution here?&lt;/p&gt;

&lt;p&gt;So, to sum up, which of the following solutions would be best here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storing code block as markdown files in the frontend&lt;/li&gt;
&lt;li&gt;Storing code block data in the backend&lt;/li&gt;
&lt;li&gt;Different solution altogether?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>help</category>
      <category>react</category>
      <category>nextjs</category>
      <category>rails</category>
    </item>
    <item>
      <title>Next JS - Intro And Setup</title>
      <author>Barnabas Babatunde</author>
      <pubDate>Mon, 07 Jun 2021 00:40:10 +0000</pubDate>
      <link>https://dev.to/barnabas19/next-js-intro-and-setup-51g4</link>
      <guid>https://dev.to/barnabas19/next-js-intro-and-setup-51g4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h3&gt;

&lt;p&gt;In this article, I am going to walk you through the introductory aspect of Next JS and how to setup a Next JS project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-next-js"&gt;
  &lt;/a&gt;
  What Is Next JS?
&lt;/h3&gt;

&lt;p&gt;Next JS is a framework (built on-top of React JS) that allows us to create pre-rendered React websites.&lt;br&gt;
Pre-rendering could either be by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Server Side Rendering (SSR), or&lt;/li&gt;
&lt;li&gt;Static Site Generation (SSG)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Server Side Rendering:&lt;/strong&gt;&lt;br&gt;
In Server Side Rendering, React components are rendered (think of it as 'translated') into &lt;strong&gt;HTML pages&lt;/strong&gt; on the server and sent to the browser whenever the browser requests for that particular component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Site Generation:&lt;/strong&gt;&lt;br&gt;
In Static Site Generation, React components are 'translated' into &lt;strong&gt;HTML pages&lt;/strong&gt; at &lt;strong&gt;build time.&lt;/strong&gt; These pages can then be deployed to the web.&lt;/p&gt;

&lt;p&gt;Next JS gives us the ability to use either of these methods. Whichever method you decide to use, one thing is sure:- &lt;strong&gt;Your React components have already been 'translated' into HTML by the time they arrive at the browser.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-use-next-js-over-traditional-react-js"&gt;
  &lt;/a&gt;
  Why Should You Use Next JS over Traditional React JS?
&lt;/h3&gt;

&lt;p&gt;React works by rendering components in the browser (client-side) unlike Next JS which does it on the server-side.&lt;/p&gt;

&lt;p&gt;Server-side rendering and Static Site Generation (in other words, using Next JS) helps to/provide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;improve a website's performance on the client-side. This is because the rendering is already done on the server, and the browser is relieved of the task of rendering the components. Better client-side performance!&lt;/li&gt;
&lt;li&gt;better Search Engine Optimization (SEO). This is because a fully rendered HTML page arrives at the browser, which is more acceptable to search engine crawlers. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
...And more!&lt;/p&gt;

&lt;p&gt;Ordinary React JS does not provide these juicy features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-do-away-with-react-js"&gt;
  &lt;/a&gt;
  Should You Do Away With React JS?
&lt;/h3&gt;

&lt;p&gt;Absolutely not. You need a good knowledge of React JS in order to work with Next JS. In fact, Next JS is simply a framework built on another framework: React JS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-setup-next-js"&gt;
  &lt;/a&gt;
  Let's Setup Next JS
&lt;/h3&gt;

&lt;p&gt;You will need Node JS, so ensure you have Node JS installed on your computer. If you don't, go to &lt;a href="https://nodejs.org"&gt;nodejs.org&lt;/a&gt; to download and install Node JS.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Setting Up&lt;/strong&gt;&lt;br&gt;
The easiest way to kickstart a Next JS application is by using the &lt;code&gt;create-next-app&lt;/code&gt; command. So:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;create a new folder anywhere you want on your computer and name it whatever you want. I named mine &lt;code&gt;demo&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_ODslCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33h9ywp1bl8z77aqhhxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_ODslCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33h9ywp1bl8z77aqhhxy.png" alt="folder location"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fire up your command line, and change your working directory to that folder by using the command: &lt;code&gt;cd ABSOLUTE_PATH_OF_YOUR_FOLDER&lt;/code&gt;. Make sure you are now within that folder, as should be indicated on your command line interface.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYK2X6-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4da2kpshtxq6q4mozerq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYK2X6-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4da2kpshtxq6q4mozerq.png" alt="command line"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that you already have &lt;code&gt;create-next-app&lt;/code&gt; cli in your Node JS environment. If you do not then run the command: &lt;code&gt;npm install -g create-next-app&lt;/code&gt;. This will allow you to use &lt;code&gt;create-next-app&lt;/code&gt; to setup a Next JS application anytime you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So currently, we are in our &lt;code&gt;demo&lt;/code&gt; folder. Now, create your boiler-plate application by running &lt;code&gt;npx create-next-app THE_NAME_OF_YOUR_APPLICATION&lt;/code&gt;. I will call mine &lt;code&gt;demo-app&lt;/code&gt;.&lt;br&gt;
You should see something like this running:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3AFGUcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/374z4wepw90of15q13jj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3AFGUcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/374z4wepw90of15q13jj.png" alt="Next JS setting up"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the process is completed, you should see a notice of completion - something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwAas-ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi5bmelklajl0wtkc7ji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwAas-ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi5bmelklajl0wtkc7ji.png" alt="Next JS setup completed"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check your project folder. You should see your boiler-plate application all nicely setup.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we want to build out our web application, so we open our boiler-plate folder using our favorite text editor. Mine is VS code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-walk-through-the-folders-and-files-in-our-next-js-boilerplate-application"&gt;
  &lt;/a&gt;
  Let's Walk Through The Folders and Files In Our Next JS Boiler-Plate Application.
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;node_modules:&lt;/strong&gt; This is where all the dependencies for our application are stored.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;pages:&lt;/strong&gt; This folder is where all our page components will be created. Every web page in Next JS has its corresponding React component. Currently, we have &lt;code&gt;index.js&lt;/code&gt; page component in the &lt;strong&gt;pages&lt;/strong&gt; folder. This &lt;code&gt;index.js&lt;/code&gt; is the landing page of our website.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;_app.js:&lt;/strong&gt; This is where all our page components are rendered. It is the root component of our application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;/api:&lt;/strong&gt; This is for our API endpoints.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;/public:&lt;/strong&gt; This is where all public assets are kept. Examples of public assets are images, or font files.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;/styles:&lt;/strong&gt; This contains styles for our web application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.gitignore:&lt;/strong&gt; For version control. Used to exclude files and folders from being committed and pushed to your remote git repository.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;package.json:&lt;/strong&gt; Helps you keep track of your application's dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;package-lock.json:&lt;/strong&gt; Helps to keep track of the exact version of every package(or dependency) that is installed in your application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;README.md:&lt;/strong&gt; Contains information about your application and its development.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#launching-our-application-in-our-browser"&gt;
  &lt;/a&gt;
  Launching Our Application In Our Browser
&lt;/h3&gt;

&lt;p&gt;Change directory to your new boiler-plate application, by running: &lt;code&gt;cd THE_NAME_OF_YOUR_APPLICATION&lt;/code&gt;. After that, run: &lt;code&gt;yarn dev&lt;/code&gt; or &lt;code&gt;npm run dev&lt;/code&gt;. This command invokes a local development server for us on port 3000. You can now see your website at this address: &lt;code&gt;http://localhost:3000/&lt;/code&gt;.&lt;br&gt;
Notice that the landing page is what is contained in our &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FyWEtbWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd5nmhp9zpr9g9u2ba68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FyWEtbWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd5nmhp9zpr9g9u2ba68.png" alt="website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In the last few minutes, we have gotten a soft introduction to Next JS, and we have learned how to setup a Next JS application using &lt;code&gt;create-next-app&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Step by step to install kubernetes cluster</title>
      <author>Mạnh Đạt</author>
      <pubDate>Mon, 07 Jun 2021 00:21:49 +0000</pubDate>
      <link>https://dev.to/datmt/step-by-step-to-install-kubernetes-cluster-1el4</link>
      <guid>https://dev.to/datmt/step-by-step-to-install-kubernetes-cluster-1el4</guid>
      <description>&lt;p&gt;This post was originally posted &lt;a href="https://datmt.com/linux/install-kubernetes-cluster-with-kubeadm-on-ubuntu-step-by-step/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;I've been trying installing a Kubernetes cluster for while following the official documentation without any success. It turned out the official documentation was missing some important steps (or they put the missing steps else where I couldn’t find). Anyways, if you are struggling to get a Kubernetes up and running, this step by step tutorial is for you.&lt;/p&gt;

&lt;p&gt;I’m going to setup a k8s cluster with 1 master node and 1 worker node. Once you have a master node up and running, adding one or more worker nodes does not require extra expertise.&lt;/p&gt;

&lt;p&gt;I also use VirtualBox running two identical Ubuntu 18.04 VM. I guess that the newer Ubuntu versions should work fine (haven’t tested).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-by-step-to-install-kubernetes-cluster"&gt;
  &lt;/a&gt;
  Step by step to install kubernetes cluster
&lt;/h2&gt;

&lt;p&gt;Here are the steps you need to run on all nodes&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-disable-swap"&gt;
  &lt;/a&gt;
  Step 1: Disable swap
&lt;/h3&gt;

&lt;p&gt;To disable swap, simply remove the line with swap in /etc/fstab&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;vim /etc/fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comment out the line with swap&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kfzs5ke7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datmt.com/wp-content/uploads/2021/06/image-12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kfzs5ke7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datmt.com/wp-content/uploads/2021/06/image-12.png" alt="disable swap"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-install-docker-run-time"&gt;
  &lt;/a&gt;
  Step 2: Install docker run time
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
 &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-transport-https &lt;span class="se"&gt;\&lt;/span&gt;
    ca-certificates &lt;span class="se"&gt;\&lt;/span&gt;
    curl &lt;span class="se"&gt;\&lt;/span&gt;
    gnupg &lt;span class="se"&gt;\&lt;/span&gt;
    lsb-release

curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class="nb"&gt;sudo &lt;/span&gt;gpg &lt;span class="nt"&gt;--dearmor&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /usr/share/keyrings/docker-archive-keyring.gpg

 &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
 &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;docker-ce docker-ce-cli containerd.io

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-3-configure-cgroup"&gt;
  &lt;/a&gt;
  Step 3: Configure cgroup
&lt;/h3&gt;

&lt;p&gt;Switch to root and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /etc/docker/daemon.json &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt;
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
&lt;/span&gt;&lt;span class="no"&gt;EOF

&lt;/span&gt;systemctl restart docker

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-install-kubeadm-kubelet-kubectl"&gt;
  &lt;/a&gt;
  Step 4: Install kubeadm, kubelet, kubectl
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;curl &lt;span class="nt"&gt;-fsSLo&lt;/span&gt; /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/kubernetes.list

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; kubelet kubeadm kubectl
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-mark hold kubelet kubeadm kubectl

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that's all the common commands you need to run on all nodes. Next comes the command you only run on the master node:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-start-master-node"&gt;
  &lt;/a&gt;
  Step 5: start master node
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubeadm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see similar message after a few minutes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGOjJu5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datmt.com/wp-content/uploads/2021/06/image-8-1024x626.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGOjJu5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datmt.com/wp-content/uploads/2021/06/image-8-1024x626.png" alt="kubeadm init successfully"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the &lt;code&gt;kubeadm join...&lt;/code&gt; command to later run on worker nodes.&lt;/p&gt;

&lt;p&gt;Finally, you need to install network plugin for the master node (super important!)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"https://cloud.weave.works/k8s/net?k8s-version=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;kubectl version | &lt;span class="nb"&gt;base64&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait for a few minutes for the master node to be ready. You can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and wait until the status of the master node is &lt;code&gt;Ready&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-join-the-cluster-on-worker-nodes"&gt;
  &lt;/a&gt;
  Step 6: Join the cluster on worker nodes
&lt;/h3&gt;

&lt;p&gt;Then, switch to the worker node and run the join command (the one you got after &lt;code&gt;kubeadm init&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubeadm &lt;span class="nb"&gt;join &lt;/span&gt;192.168.1.98:6443 &lt;span class="nt"&gt;--token&lt;/span&gt; 0mfz2s.4xt0waiyfnpxiyt9 &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:12e48d3bbfb435536618fc293a77950c13ac975fbea934c49c39abe4b7335ce1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back to the master node and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;watch kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will watch the cluster and after a few minutes, you should see all the nodes are ready:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0bSZI8Da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datmt.com/wp-content/uploads/2021/06/image-11-1024x629.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0bSZI8Da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://datmt.com/wp-content/uploads/2021/06/image-11-1024x629.png" alt="Cluster nodes area ready"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have successfully setup a kubernetes cluster&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>docker</category>
    </item>
    <item>
      <title>Connections and Sessions in TCP/IP</title>
      <author>Mahmoud EL-karuony</author>
      <pubDate>Sun, 06 Jun 2021 23:37:04 +0000</pubDate>
      <link>https://dev.to/mahmoudessa/connections-and-sessions-in-tcp-ip-3d7l</link>
      <guid>https://dev.to/mahmoudessa/connections-and-sessions-in-tcp-ip-3d7l</guid>
      <description>&lt;p&gt;TCP/IP is a connection-based protocol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To start any communication a connection must be arranged.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open a connection to start communications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Close a connection to end communications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meaning all communications between parties are arranged over a connection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A connection is established before any data transmission begins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Over TCP/IP, we'll always need to establish a connection between clients and servers in order to enable communications. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover:&lt;/p&gt;

&lt;p&gt;Deliveries over the connection are error-checked,&lt;br&gt;
If packets arrive damaged or lost, then they are resent (known as re-transmission).&lt;/p&gt;

&lt;p&gt;It's really important that we continually monitor what connections are opened and closed.&lt;/p&gt;

&lt;p&gt;between a recipient and sender because the more connection that we have open&lt;br&gt;
The more performance-based issues we may run into. &lt;/p&gt;

&lt;p&gt;We will always need to establish a connection from a client application to a PostgreSQL server Or MySQL server over TCP/IP in order to interact with it.&lt;/p&gt;

&lt;p&gt;We have this concept of a session,&lt;br&gt;
What a session is that marks the start and end of the connection.&lt;/p&gt;

&lt;p&gt;A session is essentially a period between the start and end of a connection that may we have between a client and a PostgreSQL server. &lt;/p&gt;

&lt;p&gt;Within a session, we encapsulate interactions between a client and a server in units that we call transactions. &lt;/p&gt;

&lt;p&gt;So when we start connecting: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connecting starts a session.&lt;/li&gt;
&lt;li&gt;Ending the connecting ends the session.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a database session, many transactions can occur during a given session.&lt;br&gt;
Each transaction does work to commit changes to the database (updating, inserting, or deleting records).&lt;/p&gt;

&lt;p&gt;Aside: the UDP Protocol:&lt;/p&gt;

&lt;p&gt;The internet also offers the UDP protocol. &lt;/p&gt;

&lt;p&gt;UDP stands for User Data-gram Protocol.&lt;/p&gt;

&lt;p&gt;UDP is much simpler than TCP: &lt;/p&gt;

&lt;p&gt;hosts on the network send data (in units called data-grams) without any connections needing to be established.&lt;/p&gt;

&lt;p&gt;TCP vs UDP:&lt;/p&gt;

&lt;p&gt;If TCP is like building highways between houses before sending packages between them, then UDP is much like sending over a carrier pigeon from one house to another in order to deliver packages &lt;/p&gt;

&lt;p&gt;You don't know whether the pigeon will head in the right way, drop your package along the way, or encounter an issue mid-travel. &lt;/p&gt;

&lt;p&gt;On the other hand, there is less overhead to use UDP than managing a connection over TCP / building a highway.&lt;/p&gt;

&lt;p&gt;When speed is more important than reliability, especially when applications need to stream very small amounts of information quickly (smaller packages of information mean fewer issues with reliability), then UDP is preferred. &lt;/p&gt;

&lt;p&gt;A lot of real-time streaming applications, (e.g. live TV streaming, Voice over IP (VoIP)) prefer UDP over TCP. &lt;/p&gt;

&lt;p&gt;Since UDP does not need to re-transmit lost data-grams, nor does it do any connection setup, there are fewer delays over UDP than TCP. &lt;/p&gt;

&lt;p&gt;TCP's continuous connection is more reliable but has more latency.&lt;/p&gt;

&lt;p&gt;Transactions:&lt;/p&gt;

&lt;p&gt;A transaction is a single logical unit of work that accesses and possibly modifies the contents of a database. &lt;/p&gt;

&lt;p&gt;Transactions access data using read and write operations. &lt;/p&gt;

&lt;p&gt;In order to maintain consistency in a database, before and after the transaction, certain properties are followed. &lt;/p&gt;

&lt;p&gt;These are called ACID properties.&lt;/p&gt;

&lt;p&gt;Transactions capture logical bundles of work&lt;/p&gt;

&lt;p&gt;Work is bundled into transactions so that in case of system failures, data in your database is still kept in a valid state (by rolling back the entire transaction if any part of it fails). &lt;/p&gt;

&lt;p&gt;To ensure a database is consistent before and after work is done to it, databases use atomic transactions, and actions like commits and rollbacks to handle failures appropriately.&lt;/p&gt;

&lt;p&gt;Why bundle work into transactions?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database systems can fail.&lt;/li&gt;
&lt;li&gt;We want the database to always be in a valid state. &lt;/li&gt;
&lt;li&gt;look into ACID properties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The relational database is transactional:&lt;/p&gt;

&lt;p&gt;All changes to data are made through units called transactions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Either a single change or multiple changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Executed in an ordered sequence.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An operation that either succeeds altogether or fails altogether as a unit.&lt;/p&gt;

&lt;p&gt;ACID properties of transactions&lt;/p&gt;

&lt;p&gt;In the context of transaction processing, the acronym ACID refers to the four key properties of a transaction: atomicity, consistency, isolation, and durability.&lt;/p&gt;

&lt;p&gt;Atomicity&lt;/p&gt;

&lt;p&gt;All changes to data are performed as if they are a single operation. That is, all the changes are performed, or none of them are.&lt;br&gt;
For example, in an application that transfers funds from one account to another, the atomicity property ensures that, if a debit is made successfully from one account, the corresponding credit is made to the other account.&lt;/p&gt;

&lt;p&gt;Consistency&lt;/p&gt;

&lt;p&gt;Data is in a consistent state when a transaction starts and when it ends.&lt;br&gt;
For example, in an application that transfers funds from one account to another, the consistency property ensures that the total value of funds in both the accounts is the same at the start and end of each transaction.&lt;/p&gt;

&lt;p&gt;Isolation&lt;/p&gt;

&lt;p&gt;The intermediate state of a transaction is invisible to other transactions. &lt;br&gt;
As a result, transactions that run concurrently appear to be serialized.&lt;br&gt;
For example, in an application that transfers funds from one account to another, the isolation property ensures that another transaction sees the transferred funds in one account or the other, but not in both, nor in neither.&lt;/p&gt;

&lt;p&gt;Durability&lt;/p&gt;

&lt;p&gt;After a transaction successfully completes, changes to data persist and are not undone, even in the event of a system failure.&lt;br&gt;
For example, in an application that transfers funds from one account to another, the durability property ensures that the changes made to each account will not be reversed.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>devops</category>
      <category>database</category>
    </item>
    <item>
      <title>How To connect Laravel Application to MySQL Database.</title>
      <author>Funke Olasupo</author>
      <pubDate>Sun, 06 Jun 2021 23:34:21 +0000</pubDate>
      <link>https://dev.to/roxie/how-to-connect-laravel-application-to-mysql-database-5han</link>
      <guid>https://dev.to/roxie/how-to-connect-laravel-application-to-mysql-database-5han</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Here is a simple guide on establishing a connection between your database(MySQL) and Laravel application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-creating-the-database"&gt;
  &lt;/a&gt;
  Step 1 : Creating the database
&lt;/h4&gt;

&lt;p&gt;This can be done either by a database manager eg phpMyAdmin or the Command Line Interface (CLI).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Database Manager(phpMyAdmin)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4DU7it70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/278cugzfuo2esh9dvnt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DU7it70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/278cugzfuo2esh9dvnt9.png" alt="Creating a database on phpMyAdmin"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Command Line Interface(CLI)&lt;br&gt;
A database can be created with the following command:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CREATE DATABASE db_name&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S: You have to log in to MySQL before you can create a database via any of these methods.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#step-2-update-env-configurations"&gt;
  &lt;/a&gt;
  Step 2:  Update .env configurations
&lt;/h4&gt;

&lt;p&gt;Laravel default environment file &lt;code&gt;.env&lt;/code&gt; contain some common configuration values that differ based on if your application runs locally or on a production server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S: This configuration values are based on my local machine , &lt;br&gt;
 yours may differ, do well to confirm.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update the &lt;code&gt;.env&lt;/code&gt; with the database name you want to connect to,as well as the other environment variables if they differ from the default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="no"&gt;DB_CONNECTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;
&lt;span class="no"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="no"&gt;DB_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;
&lt;span class="no"&gt;DB_DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="no"&gt;DB_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
&lt;span class="no"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;__Hurray! 🎉The laravel application is now properly connected to the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-migrationsoptional"&gt;
  &lt;/a&gt;
  Step 3: Migrations(optional)
&lt;/h4&gt;

&lt;p&gt;Laravel migrations simply allows you to easily perform certain actions to the database without going to the database manager (eg. phpMyAdmin). They can also serve as a version control for your database. They create tables, columns as well as modify them etc.&lt;/p&gt;

&lt;p&gt;Migrations are found in &lt;code&gt;database/migrations&lt;/code&gt; directory.&lt;br&gt;
Laravel application comes default with &lt;code&gt;user&lt;/code&gt; migration and it looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jK7d-Z_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lhvqe48rds9sxserv9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jK7d-Z_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lhvqe48rds9sxserv9h.png" alt="users default migration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be executed to the database with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S : Refresh your database , it has been updated with users' table and its properties.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKvNQx_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyuoqptyo06oneutvkqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKvNQx_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyuoqptyo06oneutvkqg.png" alt="users table om database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote an article to explain more on migrations &lt;a href="https://dev.to/roxie/adding-and-removing-columns-from-existing-tables-using-laravel-migrations-389g"&gt;here&lt;/a&gt;. You can also visit the laravel documentation &lt;a href="https://laravel.com/docs/8.x/migrations#introduction"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You're all set to continue building!😎&lt;br&gt;
Thank you for reading🤝&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>database</category>
      <category>mysql</category>
      <category>php</category>
    </item>
    <item>
      <title>Sharing my Free Open Source Anti-Procrastination app made in React Native &amp; Firebase (⚛ + 🔥)</title>
      <author>Joel Patrizio</author>
      <pubDate>Sun, 06 Jun 2021 22:50:05 +0000</pubDate>
      <link>https://dev.to/joelpatrizio/releasing-my-free-open-source-anti-procrastination-app-made-in-react-native-firebase-pd2</link>
      <guid>https://dev.to/joelpatrizio/releasing-my-free-open-source-anti-procrastination-app-made-in-react-native-firebase-pd2</guid>
      <description>&lt;p&gt;TL;DR: check it out at &lt;a href="https://dontwaste.today/?utm_source=dev&amp;amp;utm_medium=post&amp;amp;utm_campaign=launch"&gt;https://dontwaste.today/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFWhlnqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5jc5t9cpwqeftehiw1p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFWhlnqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5jc5t9cpwqeftehiw1p.png" alt="Don't Waste Today logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#short-intro"&gt;
  &lt;/a&gt;
  Short intro
&lt;/h2&gt;

&lt;p&gt;After 45 days and 176 hours in total, I'm finally done with my side-project app: &lt;strong&gt;A procrastination tracker that will randomly ask if you're procrastinating or not&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I started this mobile app as a learning project, and decided to release it as a free open-source thing. I've been working on it daily since the beginning, and thought it was going to take me just 2 weeks, but well... seems I'm not that good at estimating 😅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rz00xjSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3r573zle2qwyemt1j6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rz00xjSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3r573zle2qwyemt1j6g.png" alt="Screenshots from Don't Waste Today app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-app"&gt;
  &lt;/a&gt;
  About the app
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dontwaste.today/?utm_source=dev&amp;amp;utm_medium=post&amp;amp;utm_campaign=launch"&gt;Don't Waste Today!&lt;/a&gt; is a free and open source app that will:&lt;br&gt;
💡 Help you understand how often you procrastinate&lt;br&gt;
🎯 Tell you why you procrastinate&lt;br&gt;
📊 Give you the insights to take action to "unstuck" your life&lt;/p&gt;

&lt;p&gt;The process is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the days and time when you want to focus on your tasks&lt;/li&gt;
&lt;li&gt;You'll receive a notification asking if you are procrastinating&lt;/li&gt;
&lt;li&gt;If you are procrastinating, answer why&lt;/li&gt;
&lt;li&gt;Then you'll see an analysis and daily report of your performance and main reasons why you procrastinate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bp6ABKzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6t7noroudv70jbg3a9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bp6ABKzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6t7noroudv70jbg3a9s.png" alt="Don't Waste Today can help you with"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack
&lt;/h2&gt;

&lt;p&gt;⚛ React Native 0.63.4&lt;br&gt;
🧩 Redux&lt;br&gt;
🧩 Redux Persist&lt;br&gt;
🧩 Redux Thunk&lt;br&gt;
🔥 Firebase Auth&lt;br&gt;
🔥 Firebase Analytics&lt;br&gt;
🔥 Firebase Crashlytics&lt;br&gt;
🔥 Firebase Firestore&lt;br&gt;
🔥 Firebase Functions&lt;br&gt;
🔥 Firebase Remote-config&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_WgpQvmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neuc58xru6ry6gydtybg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_WgpQvmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neuc58xru6ry6gydtybg.png" alt="Don't Waste Today is available in App Store and Google Play"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-libraries"&gt;
  &lt;/a&gt;
  Main Libraries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-google-signin/google-signin"&gt;Google Sign In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/invertase/react-native-apple-authentication"&gt;Sign In With Apple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-navigation/react-navigation"&gt;react-navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zoontek/react-native-bootsplash"&gt;react-native-bootsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/indiespirit/react-native-chart-kit"&gt;react-native-chart-kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zo0r/react-native-push-notification"&gt;react-native-push-notification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-push-notification-ios/push-notification-ios"&gt;@react-native-community/push-notification-ios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vonovak/react-native-simple-toast"&gt;react-native-simple-toast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIU4pkKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw19v9dnhbvalisjcj59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIU4pkKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw19v9dnhbvalisjcj59.png" alt="Don't Waste Today dark mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h2&gt;

&lt;p&gt;If you like the app or find it useful, please consider leaving some feedback on the &lt;a href="https://www.producthunt.com/posts/don-t-waste-today"&gt;Product Hunt release&lt;/a&gt;. It could help Don't Waste Today grow over 200% 🙏&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-links"&gt;
  &lt;/a&gt;
  Some Links
&lt;/h3&gt;

&lt;p&gt;👨‍💻 &lt;a href="https://github.com/JoelGoalsWon/dontwaste-today"&gt;Source code&lt;/a&gt;&lt;br&gt;
🤖 &lt;a href="https://play.google.com/store/apps/details?id=com.procrastination.tracker.android"&gt;Google Play&lt;/a&gt;&lt;br&gt;
🍏 &lt;a href="https://apps.apple.com/app/id1564305737"&gt;App Store&lt;/a&gt;&lt;br&gt;
💻 &lt;a href="https://dontwaste.today/?utm_source=dev&amp;amp;utm_medium=post&amp;amp;utm_campaign=launch"&gt;Website&lt;/a&gt;&lt;br&gt;
🐈 &lt;a href="https://www.producthunt.com/posts/don-t-waste-today"&gt;Product Hunt&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>firebase</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Adding and Removing columns from existing tables using Laravel migrations.</title>
      <author>Funke Olasupo</author>
      <pubDate>Sun, 06 Jun 2021 22:35:54 +0000</pubDate>
      <link>https://dev.to/roxie/adding-and-removing-columns-from-existing-tables-using-laravel-migrations-389g</link>
      <guid>https://dev.to/roxie/adding-and-removing-columns-from-existing-tables-using-laravel-migrations-389g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#teaser"&gt;
  &lt;/a&gt;
  Teaser😎
&lt;/h3&gt;

&lt;p&gt;Have you been at that point where you finished setting up your database and realized you forgot to add a column 😨 or you put in a wrong column and you have to remove it 😣? Are you like me that usually refreshes the entire database for minor changes ? That's poor programming practice and what would you do if it was a company's database?&lt;br&gt;
Nevertheless, I discovered an easy way out so please, enjoy the read!😎&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Laravel migrations simply allows you to easily perform certain actions to the database without going to the database manager (eg. phpMyAdmin). They can also serve as a version control for your database. &lt;/p&gt;

&lt;p&gt;A default laravel migration file comes with a class definition containing both an &lt;code&gt;up()&lt;/code&gt; and a &lt;code&gt;down()&lt;/code&gt; method. The &lt;code&gt;up()&lt;/code&gt; method is run when migration executes to apply changes to the database while the &lt;code&gt;down()&lt;/code&gt; method is run to revert those changes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S: Ensure that you have connected your laravel application to database before proceeding. If you're not sure how to do that, &lt;a href="https://dev.to/roxie/how-to-connect-laravel-application-to-mysql-database-5han"&gt;here&lt;/a&gt; is a simple guide.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#generating-migrations"&gt;
  &lt;/a&gt;
  Generating Migrations
&lt;/h3&gt;

&lt;p&gt;A migration can be simply generated with the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S: Migration files are in the &lt;code&gt;database/migrations&lt;/code&gt; directory. The name of the table to be created is &lt;code&gt;tests&lt;/code&gt;, you can change it to any preferred name.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan make:migration create_tests_table 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Laravel will use the name of the migration to attempt to guess the name of the table and whether or not the migration will be creating a new table. If Laravel is able to determine the table name from the migration name, Laravel will pre-fill the generated migration file with the specified table.&lt;/p&gt;

&lt;p&gt;The migration file should look like this by default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateTestsTable&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Run the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Reverse the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dropIfExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S : &lt;code&gt;Schema::create&lt;/code&gt; is only used when a table is to be created initially. A common error is trying to use it to add a column to an existing table.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tests table that should have two columns, name(string) and age(integer) will be written in the &lt;code&gt;up() method&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-migrations"&gt;
  &lt;/a&gt;
  Running Migrations
&lt;/h3&gt;

&lt;p&gt;To execute migrations to the database, run this &lt;code&gt;Artisan&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command runs all outstanding migrations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S: Confirm the database that it's been updated with the columns and their respective types.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XRrp8aL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30x7zls62syw68tndsyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRrp8aL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30x7zls62syw68tndsyl.png" alt="The tests table has an id, name and gender column"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-migration-commands"&gt;
  &lt;/a&gt;
  Other Migration Commands
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;php artisan migrate:rollback&lt;/code&gt; : This rolls back the last batch of migrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;php artisan migrate:reset&lt;/code&gt; : This rolls back all your applications migrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;php artisan migrate:refresh&lt;/code&gt; : This rolls back all your migrations and execute the &lt;code&gt;migrate&lt;/code&gt; command. Its like recreating your entire database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;php artisan migrate:fresh&lt;/code&gt; : This drops all the tables and executes the &lt;code&gt;migrate&lt;/code&gt; command again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S: The rollback always executes the corresponding &lt;code&gt;down()&lt;/code&gt; method.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#updating-tables-adding-columns-to-an-existing-table"&gt;
  &lt;/a&gt;
  Updating Tables : Adding columns to an existing table.
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;gender(string)&lt;/code&gt; column is added to the &lt;code&gt;tests&lt;/code&gt; table by the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a migration file
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;php artisan make:migration add_gender_to_tests_table --table=tests&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;Schema::table&lt;/code&gt; in the &lt;code&gt;up()&lt;/code&gt; method which will be provided by default, columns can be added as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gender'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Setting up the rollback option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;down()&lt;/code&gt; method should also be updated because of rollbacks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dropColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gender'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now execute the migrations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run the migrations,  use this &lt;code&gt;Artisan&lt;/code&gt; command : &lt;br&gt;
&lt;code&gt;php artisan migrate&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S : Confirm that the gender column has been added to the tests table on your database.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sbv1uVki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8bikzomi0r4ijcoy6um.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sbv1uVki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8bikzomi0r4ijcoy6um.png" alt="gender column has been added as last column on tests table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Laravel places the added column last on the table, however it can be placed at any desired position on the table.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;gender&lt;/code&gt; to be placed after the &lt;code&gt;name&lt;/code&gt;, the &lt;code&gt;up() method&lt;/code&gt; would rather be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gender'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks more organized and better.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZjKZzIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1k5mrh1amd970w64dt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZjKZzIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1k5mrh1amd970w64dt5.png" alt="The test table has gender column after name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The gender column is successfully added to the tests table.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#updating-tables-removing-columns-from-an-existing-table"&gt;
  &lt;/a&gt;
  Updating Tables: Removing columns from an existing table.
&lt;/h3&gt;

&lt;p&gt;There are several ways to remove a column from a table.&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Remove a column&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To remove the &lt;code&gt;name&lt;/code&gt; column from &lt;code&gt;tests&lt;/code&gt; table:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the migration file with this  &lt;code&gt;Artisan&lt;/code&gt; command:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan make:migration drop_gender_from_tests_table &lt;span class="nt"&gt;--table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tests
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update the &lt;code&gt;up()&lt;/code&gt; method with column you want to drop.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dropColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Run migrations
Execute the migrations with this &lt;code&gt;Artisan&lt;/code&gt; command.
&lt;code&gt;php artisan migrate&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S : Confirm that the name column has been dropped on the tests table.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RkUhGCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nwkcslpco07mjwospjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RkUhGCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nwkcslpco07mjwospjw.png" alt="The tests table has dropped name column"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;P.S : A migrations file name is unique so every migration file should have different names when creating them.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.&lt;strong&gt;Remove multiple columns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to remove more than one column from your table , the same steps are followed as above but the &lt;code&gt;up()&lt;/code&gt; method is slightly different. The column names are passed into an array as a single argument to &lt;code&gt;dropColumn()&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dropColumn&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gender'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are the results on the database:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDups5KX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0sv6eqwknfbd3b282d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDups5KX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0sv6eqwknfbd3b282d.png" alt="The table has dropped age and gender "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Remove a column if it exists.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;As usual, follow the same guides as outlined in the first method of removing column with the only slight difference in the &lt;code&gt;up()&lt;/code&gt; method. However, the column will be checked if its existing before its dropped.&lt;br&gt;
The &lt;code&gt;up()&lt;/code&gt; method will be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="c1"&gt;//If the id column exists on tests table&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;hasColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;

                &lt;span class="c1"&gt;//drop the id column&lt;/span&gt;
                &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dropColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the migrations, here is the final output of our  database:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TVon1Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bz00rzlxdglikp19jj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TVon1Wk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bz00rzlxdglikp19jj5.png" alt="The id column is dropped"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The id, name, age and gender column is successfully removed from the table.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now, you don't need to refresh your database always for these minor changes😎&lt;br&gt;
This entire code is open source on &lt;a href="https://github.com/Roxie-32/update_migrations"&gt;Github&lt;/a&gt;😍.&lt;br&gt;
Thank you for reading🤝.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>database</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Django, HTMX and Alpine.JS: A Match Made In Heaven</title>
      <author>arcanemachine</author>
      <pubDate>Sun, 06 Jun 2021 22:35:36 +0000</pubDate>
      <link>https://dev.to/nicholas_moen/what-i-learned-while-using-django-with-htmx-and-alpine-js-24jg</link>
      <guid>https://dev.to/nicholas_moen/what-i-learned-while-using-django-with-htmx-and-alpine-js-24jg</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: &lt;em&gt;I am not, by any means, a seasoned veteran in this field. I am just an enthusiast trying to find a set of web technologies that work well together to create an environment that provides an immersive feel that matches that of a native app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you find any errors in this writeup, please feel free to correct me so that the work can more accurately reflect the truth.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to see HTMX and Alpine.JS in action together, &lt;a href="https://django-htmx-alpine.nicholasmoen.com/"&gt;click here&lt;/a&gt; to see a basic project I put together while using the two.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-htmx"&gt;What is HTMX?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-alpinejs"&gt;What is Alpine.JS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-use-htmx-and-alpinejs-together"&gt;Why Use HTMX and Alpine.JS Together?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-well-do-htmx-and-alpinejs-work-together"&gt;How Well Do HTMX and Alpine.JS Work Together?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes-on-using-htmx-with-django"&gt;Notes on Using HTMX with Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I've been trying to find a way to take the features of old-school server-driven frameworks such as Django, and find a way to provide a modern web experience such as the ones provided by the frontend Javascript frameworks such as React, Vue, Angular, and Svelte (among others). Namely, I want to be  able to update elements of the page while still preserving the state of the web application at any given time. I also want to benefit from the ease with which these frameworks allow you to add functionality to a web app without all the boilerplate. &lt;/p&gt;

&lt;p&gt;Django (and other server-side frameworks) can be made to play nice with these frontend frameworks, but this involves the use of a REST framework that restricts the usefulness of Django, particularly its ability to render HTML templates, and also its session management capabilites, which make it easy to manage user authentication and sessions. &lt;/p&gt;

&lt;p&gt;Although Django works very well for me, it still feels as though it was designed for a different era. By default, it produces plain HTML templates which contain links which, when clicked, will blank out the screen and fill it with a newly-fetched template. While there is no rule that it &lt;em&gt;must&lt;/em&gt; be used that way, this is how I have come to understand the flow of Django. There is &lt;code&gt;JSONResponse&lt;/code&gt;, but this requires the data to be processed, DOM elements manipulated, etc.&lt;/p&gt;

&lt;p&gt;What if there was a way to preserve the bulk of a given page's content, but easily swap certain parts of the page with new data?&lt;/p&gt;

&lt;p&gt;This is where HTMX comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-htmx"&gt;
  &lt;/a&gt;
  What is HTMX?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://htmx.org/"&gt;HTMX&lt;/a&gt; is described by its creator as "high power tools for HTML".&lt;/p&gt;

&lt;p&gt;It functions alot like an ajax or &lt;code&gt;fetch()&lt;/code&gt; call, but with a couple significant differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTMX allows for GET/POST/PUT/DELETE/etc. calls from any element, not just &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;HTMX allows you to specify a DOM target to replace with the newly-fetched data.&lt;/li&gt;
&lt;li&gt;Instead of fetching JSON data, HTMX (by default) expects to receive HTML content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these principles, HTMX helps to put some of the power back into your server-side framework (e.g. Django), since you are no longer required to process the incoming data. Just create a view that acts as a pseudo-endpoint, render the data into a template, and insert that into your target DOM element.&lt;/p&gt;

&lt;p&gt;Here is an example of how HTMX is used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button hx-post="/clicked"
        hx-swap="outerHTML"
        hx-target="#your-target-element"&amp;gt;
  Click Me
&amp;lt;/button&amp;gt;

&amp;lt;div id="#your-target-element"&amp;gt;
  This content will be replaced.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;hx-post&lt;/code&gt; allows you to specify the request method used (GET/POST/PUT/DELETE/etc.)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hx-target&lt;/code&gt; allows &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hx-swap&lt;/code&gt; describes how the incoming data will be placed in relation to the target element. The new data can be appended/prepended to the old data, it can replace the old data entirely, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, the addition of a few HTML attributes allows your HTML to become a lot more capable of producing an app-like experience.&lt;/p&gt;

&lt;p&gt;Although &lt;a href="https://django-htmx-alpine.nicholasmoen.com/"&gt;my demo project&lt;/a&gt; only uses HTMX before basic fetching and swapping, HTMX is a rather versatile library that can perform quite a few tasks. You can see some example's of HTMX's power on &lt;a href="https://htmx.org/examples/"&gt;its examples page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-alpinejs"&gt;
  &lt;/a&gt;
  What is Alpine.JS?
&lt;/h2&gt;

&lt;p&gt;In short, Alpine.JS is a lighter version of Vue.JS. It is a small library that allows you to easily add reactivity to your web apps (ie. change in state is immediately reflected in the application), as well as some other quality-of-life features.  Like HTMX, it is a Javascript library that is used by adding inline HTML attributes.&lt;/p&gt;

&lt;p&gt;Here is an example of a basic Alpine component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div x-data="myComponent()"&amp;gt;
  &amp;lt;div&amp;gt;
    The value is &amp;lt;span x-text="myValue"&amp;gt;&amp;lt;/span&amp;gt;.
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
function myComponent() {
  return {
    myValue: 5
  }
}

// The component will be rendered as "The value is 5."

&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alpine.JS can be used for transitions, conditional rendering, and event handling, iterate over arrays... It really is Vue's little sibling. Even the syntax is nearly identical: Compare the HTML syntax to create an event listener: &lt;code&gt;v-on:click&lt;/code&gt; (Vue) vs &lt;code&gt;x-on:click&lt;/code&gt; (Alpine). Alpine even borrows the same shorthand syntax (they both use &lt;code&gt;@click&lt;/code&gt; as shorthand to create a click event listener).&lt;/p&gt;

&lt;p&gt;So why use Alpine instead of just using Vue? Vue uses a virtual DOM (aka VDOM) to more efficiently manage the application state before updating the actual DOM. Anything that directly manipulates the DOM (e.g. jQuery) may cause problems with Vue because it uses a VDOM, which gets tripped up when something is manipulating the DOM directly without the VDOM knowing about it. Unlike Vue, Alpine does not use a VDOM, but instead manipulates the DOM directly. This should mean that any HTML templates fetched by HTMX should not interfere with Alpine's functionality as they would with a framework that uses a VDOM.&lt;/p&gt;

&lt;p&gt;Note that &lt;a href="https://krausest.github.io/js-framework-benchmark/current.html"&gt;Vue will generally beat Alpine in benchmarks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like the other frameworks, Alpine has a browser extension that allows you to detect, inspect, edit, and debug Alpine.js data and components. It is called &lt;em&gt;Alpine.js devtools&lt;/em&gt;, and it is available for both &lt;a href="https://chrome.google.com/webstore/detail/alpinejs-devtools/fopaemeedckajflibkpifppcankfmbhk"&gt;Chrome&lt;/a&gt; and &lt;a href="https://addons.mozilla.org/en-CA/firefox/addon/alpinejs-devtools/"&gt;Firefox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alpine also has a third-party state-management layer called &lt;a href="https://github.com/ryangjchandler/spruce"&gt;Spruce&lt;/a&gt; that provides a way for components to communicate with each other, and acts as a single source of truth for your app's data. It is like React Redux or Vuex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-htmx-and-alpinejs-together"&gt;
  &lt;/a&gt;
  Why Use HTMX and Alpine.JS Together?
&lt;/h2&gt;

&lt;p&gt;For my uses, HTMX does the work of swapping page elements, while Alpine is used for things like toggling navbars and modals, setting key event listeners to close the modals, and adding transition effects to both. I have found that HTMX does the bulk of the work when adding an SPA-like feel to a web app, while Alpine helps to improve the flow of the UI and reduce the amount of Javascript I need to write to do common tasks. Alpine also allows you to set event listeners on the window object, which is handy, for example, to use the Escape key to close a modal no matter what element is highlighted (the modal is also conditionally rendered using Alpine's &lt;code&gt;x-if&lt;/code&gt; attribute, so the listener is only enabled when the modal is active).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-well-do-htmx-and-alpinejs-work-together"&gt;
  &lt;/a&gt;
  How Well Do HTMX and Alpine.JS Work Together?
&lt;/h3&gt;

&lt;p&gt;Overall, I have found the two to work very well together. I have been able to easily work with both HTMX and Alpine.&lt;/p&gt;

&lt;p&gt;I did run into a few problems with the two libraries as I was creating my &lt;a href="https://django-htmx-alpine.nicholasmoen.com/"&gt;demo project&lt;/a&gt;, but I was unable to duplicate them when I was doing this writeup. (If you have run into any issues mixing the two, please share your experiences in the comments section.)&lt;/p&gt;

&lt;p&gt;For client-side form validation, I found that HTMX &lt;a href="https://htmx.org/docs/#validation"&gt;fires a few events related to form validation&lt;/a&gt;, but I found it easier just to handle the submission using Javascript + Alpine, and then use HTMX's Javascript API to call it after doing my validation. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form x-data="myForm()"
      @submit.prevent="submitForm"&amp;gt;
  &amp;lt;input type="text" id="my-text" name="mytext"&amp;gt;
  &amp;lt;input type="submit"&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;div id="form-result"&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
function myForm() {
  return {
    submitForm() {

      // get the value of #my-text
      let myText = document.querySelector(#my-text).value;

      // if myText is empty, do not continue
      if (!myText) {
        console.log('Something went wrong.');
        return false;
      } else {

        // submit the form using HTMX
        htmx.ajax(
          'POST',
          'https://your.server/form-url/', {
            target: '#form-result',
            values: { text: myText }
        });

      }
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#notes-on-using-htmx-with-django"&gt;
  &lt;/a&gt;
  Notes on Using HTMX with Django
&lt;/h2&gt;

&lt;p&gt;HTMX and Django make a great pair. You can render a response using a template with Django's &lt;code&gt;render&lt;/code&gt; function, or return an &lt;code&gt;HttpResponse&lt;/code&gt; with a string that bears a striking resemblance to JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.http import HttpResponse

def my_view(request, your_name):
    return HttpResponse(f"""
        &amp;lt;div&amp;gt;
          Hello, {your_name}!
        &amp;lt;/div&amp;gt;
    """)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can return scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.http import HttpResponse

def my_view(request, your_name):
    return HttpResponse(f"""
        &amp;lt;script&amp;gt;
          // this will execute immediately
          console.log("Hello, {your_name}!");
        &amp;lt;/div&amp;gt;
    """)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add status codes to your HTTP responses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_view(request, your_name):
    if not your_name.isalpha():
        response = HttpResponse("That's not a real name!")
        response.status_code = 400  # bad request
        return response
    return HttpResponse(f"""
        &amp;lt;div&amp;gt;
          Hello, {your_name}!
        &amp;lt;/div&amp;gt;
    """)  # HttpResponse returns status code 200 by default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that HTMX doesn't change the content if a 302 response is returned, so you can return 302 if you don't want the content to change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_view(request, your_name):
    if not your_name.isalpha():
        response = HttpResponse()
        response.status_code = 302
        return response
    return HttpResponse(f"""
        &amp;lt;div&amp;gt;
          Hello, {your_name}!
        &amp;lt;/div&amp;gt;
    """)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-a-csrf-token-header-to-your-htmx-requests"&gt;
  &lt;/a&gt;
  Adding a CSRF Token Header to Your HTMX Requests
&lt;/h3&gt;

&lt;p&gt;Because Django forms (and any other view that accepts a non-GET method) require a CSRF token, the following script must be included to the bottom of your body so that HTMX can automatically add the incoming CSRF token to its header so that Django will accept any non-GET requests from HTMX (credit to &lt;a href="https://www.mattlayman.com/blog/2021/how-to-htmx-django/"&gt;Matt Layman&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  document.body.addEventListener(
    'htmx:configRequest', (event) =&amp;gt; {
      event.detail.headers['X-CSRFToken'] = '{{ csrf_token }}';
  })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;HTMX and Alpine.JS work very well together and can let you achieve an immersive, fluid web experience. Thanks to HTMX, you can easily update fragments of a page instead of having to completely reload the page. With Alpine.JS, you get reactivity and other quality-of-life additions to your frontend experience. You also get to keep your DOM, and are not subject to the restrictions placed upon you by other frontend frameworks.&lt;/p&gt;

&lt;p&gt;Using these two libraries also allows you to keep your server-side framework and all its features, especially templating and session authentication.&lt;/p&gt;

&lt;p&gt;I will keep working with HTMX and Alpine.JS and hope that they will continue to work as well for me in the future as they have so far.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check out my &lt;a href="https://django-htmx-alpine.nicholasmoen.com/"&gt;demo project&lt;/a&gt; showing HTMX and Alpine.JS in action together.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>htmx</category>
      <category>alpine</category>
      <category>alpinejs</category>
    </item>
    <item>
      <title>How to Protect Your Python Code Health 🐍🩺</title>
      <author>sirfuzzalot</author>
      <pubDate>Sun, 06 Jun 2021 22:25:53 +0000</pubDate>
      <link>https://dev.to/sirfuzzalot/how-to-protect-your-python-code-health-5c2e</link>
      <guid>https://dev.to/sirfuzzalot/how-to-protect-your-python-code-health-5c2e</guid>
      <description>&lt;p&gt;Code can be long and complex. Let's configure a few good tools to help keep our Python codebase healthy. Flake8, Black, and isort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linting-and-formatting"&gt;
  &lt;/a&gt;
  Linting and Formatting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://flake8.pycqa.org/en/latest/"&gt;Flake8&lt;/a&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;linter&lt;/a&gt;. It's designed to find mistakes in your code that can later become bugs when your code is run.&lt;/p&gt;

&lt;p&gt;A formatter arranges our code so that it's more readable on the screen, but does not change what our code does. &lt;a href="https://black.readthedocs.io/en/stable/"&gt;Black&lt;/a&gt; and &lt;a href="https://pycqa.github.io/isort/"&gt;isort&lt;/a&gt; are formatters.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Let's install our linting and formatting tools. For a healthy coding environment use a virtual environment like &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; (&lt;code&gt;venv&lt;/code&gt; comes with Python).&lt;/p&gt;

&lt;p&gt;Create a virtual environment and activate it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# bash
python3 -m venv venv
source venv/bin/activate

# pwsh
py -3 -m venv venv
venv\Scripts\Activate.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Install the packages.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flake8 black isort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;You'll want to configure these tools a little to make them play nicely together.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#flake8"&gt;
  &lt;/a&gt;
  Flake8 📋
&lt;/h3&gt;

&lt;p&gt;There's a lot you can configure with &lt;strong&gt;Flake8&lt;/strong&gt;, but you don't have to. Add the bare minimum first to get &lt;strong&gt;Black&lt;/strong&gt; and &lt;strong&gt;Flake8&lt;/strong&gt; to cooperate (also we'll exclude a few directories from linting). In the root of your project create a file called &lt;code&gt;.flake8&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="c"&gt;# .flake8&lt;/span&gt;

&lt;span class="nn"&gt;[flake8]&lt;/span&gt;
&lt;span class="py"&gt;max-line-length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;
&lt;span class="py"&gt;extend-ignore&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;E&lt;/span&gt;&lt;span class="mi"&gt;203&lt;/span&gt;
&lt;span class="py"&gt;exclude&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;.git,&lt;/span&gt;
    &lt;span class="err"&gt;__pycache__,&lt;/span&gt;
    &lt;span class="err"&gt;build,&lt;/span&gt;
    &lt;span class="err"&gt;dist,&lt;/span&gt;
    &lt;span class="err"&gt;venv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#black"&gt;
  &lt;/a&gt;
  Black 🖊️
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt; is famous as a highly opinionated "uncompromising code formatter". While there are a few settings you can configure, nearly all of the formatting choices are made for you. That's actually half of its appeal. The other half is getting back all the time you previously used to tweak where this comma was or that spacing. Embrace the way &lt;strong&gt;Black&lt;/strong&gt; will do it all for you and you'll thank me later.&lt;/p&gt;

&lt;p&gt;In the root of your project create a file called &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pyproject.toml

[tool.black]
exclude = 'venv'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#isort"&gt;
  &lt;/a&gt;
  isort 🗂️
&lt;/h3&gt;

&lt;p&gt;Short for "import sort" or just "I Sort", this utility will arrange your module's imports in a consistent opinionated way, much like &lt;strong&gt;Black&lt;/strong&gt; does for the rest of your code.&lt;/p&gt;

&lt;p&gt;Let's configure &lt;strong&gt;isort&lt;/strong&gt; to play nicely with &lt;strong&gt;Black&lt;/strong&gt;. Add the following to our &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="c"&gt;# pyproject.toml&lt;/span&gt;

&lt;span class="nn"&gt;[tool.isort]&lt;/span&gt;
&lt;span class="py"&gt;profile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"black"&lt;/span&gt;
&lt;span class="py"&gt;multi_line_output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="py"&gt;skip&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["venv"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#checking-your-codes-health"&gt;
  &lt;/a&gt;
  Checking Your Code's Health 🩺
&lt;/h2&gt;

&lt;p&gt;Let's run our tools individually first.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m flake8

python -m black .

python -m isort .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now let's make this a little easier for ourselves by setting up a &lt;strong&gt;pre-commit hook&lt;/strong&gt;. In your project create a file called &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"----------------------"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"--- Pre-Commit Hook --"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"----------------------"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"📋 Flake8 📋"&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; flake8 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"No Errors"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"🖊️  Black 🖊️"&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; black &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"🗂️  isort 🗂️"&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; isort &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Imports Sorted"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"----------------------"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you run &lt;code&gt;git commit&lt;/code&gt; this script will run and check your code health before a commit is made. It will show you what issues &lt;strong&gt;Flake8&lt;/strong&gt; has found and it will format your code. You'll then get to go back and fix the issues. Finally, you'll run &lt;code&gt;git commit&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Here's what it looks like with errors.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;---------------------------&lt;/span&gt;
&lt;span class="nt"&gt;--------&lt;/span&gt; Pre-Commit Hook &lt;span class="nt"&gt;--&lt;/span&gt;
&lt;span class="nt"&gt;---------------------------&lt;/span&gt;
📋 Flake8 📋
.&lt;span class="se"&gt;\s&lt;/span&gt;rc&lt;span class="se"&gt;\p&lt;/span&gt;ackagecake&lt;span class="se"&gt;\_&lt;/span&gt;_main__.py:2:1: F401 &lt;span class="s1"&gt;'sys'&lt;/span&gt; imported but unused
.&lt;span class="se"&gt;\s&lt;/span&gt;rc&lt;span class="se"&gt;\p&lt;/span&gt;ackagecake&lt;span class="se"&gt;\_&lt;/span&gt;_main__.py:6:1: E302 expected 2 blank lines, found 1

🖊️  Black 🖊️
reformatted src&lt;span class="se"&gt;\p&lt;/span&gt;ackagecake&lt;span class="se"&gt;\_&lt;/span&gt;_main__.py
All &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; ✨ 🍰 ✨
1 file reformatted, 4 files left unchanged.

🗂️  isort 🗂️
Skipped 1 files
Imports Sorted

&lt;span class="nt"&gt;----------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here's what it will look like when you're code is healthy.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;---------------------------&lt;/span&gt;
&lt;span class="nt"&gt;--------&lt;/span&gt; Pre-Commit Hook &lt;span class="nt"&gt;--&lt;/span&gt;
&lt;span class="nt"&gt;---------------------------&lt;/span&gt;
📋 Flake8 📋
No Errors

🖊️  Black 🖊️
All &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; ✨ 🍰 ✨
5 files left unchanged.

🗂️  isort 🗂️
Skipped 1 files
Imports Sorted

&lt;span class="nt"&gt;----------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automation"&gt;
  &lt;/a&gt;
  Automation 🤖
&lt;/h2&gt;

&lt;p&gt;With code health, the more often you can check it the better. You've seen how to setup a &lt;strong&gt;Git hook&lt;/strong&gt;. Here's a few other ways to run &lt;strong&gt;Flake8&lt;/strong&gt;, &lt;strong&gt;Black&lt;/strong&gt;, and &lt;strong&gt;isort&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ide"&gt;
  &lt;/a&gt;
  IDE
&lt;/h3&gt;

&lt;p&gt;Your code editor likely integrates with these tools using only some light configuration. You'll benefit from spellcheck-like behavior from &lt;strong&gt;Flake8&lt;/strong&gt;, and format on save from &lt;strong&gt;Black&lt;/strong&gt; and &lt;strong&gt;isort&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some info on setting up &lt;a href="https://code.visualstudio.com/docs/python/linting"&gt;VSCode&lt;/a&gt; for linting and formatting.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#precommit"&gt;
  &lt;/a&gt;
  Pre-Commit
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://pre-commit.com/"&gt;Pre-Commit Framework&lt;/a&gt; is &lt;strong&gt;Git hooks&lt;/strong&gt; with super powers. Its easy setup and configuration give you access to an &lt;a href="https://pre-commit.com/hooks.html"&gt;extensive list of shared Git hooks&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cicd-pipelines"&gt;
  &lt;/a&gt;
  CI/CD Pipelines
&lt;/h3&gt;

&lt;p&gt;While a Git hook is great for catching errors before they go to GitHub/GitLab you still want the safety of your CI/CD Pipeline running these tools again. That's because sometimes people forget to configure their Git hooks 🙃.&lt;/p&gt;

&lt;p&gt;For our formatters, there is a special CI/CD mode that will throw an error when the formatting is incorrect.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; black &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--check&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; isort &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--check&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#source-code-example"&gt;
  &lt;/a&gt;
  Source Code Example 💻
&lt;/h2&gt;

&lt;p&gt;You're all set with the tools you'll need to keep your code healthy. Remember the goal is to make our code bug free, and easy to maintain. &lt;strong&gt;Flake8&lt;/strong&gt;, &lt;strong&gt;Black&lt;/strong&gt;, and &lt;strong&gt;isort&lt;/strong&gt; can help you get there.&lt;/p&gt;

&lt;p&gt;Check out &lt;strong&gt;packagecake&lt;/strong&gt; for an example of what we've covered here.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sirfuzzalot"&gt;
        sirfuzzalot
      &lt;/a&gt; / &lt;a href="https://github.com/sirfuzzalot/packagecake"&gt;
        packagecake
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Turn your Python package into a delicious cake 🎂
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Find out what type of cake your Python package is by running the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; python -m pip install packagecake
&amp;gt;&amp;gt;&amp;gt; python -m packagecake bake [your package name]
🍰
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Cover Photo Credit: &lt;a href="https://unsplash.com/@swimstaralex"&gt;Alexander Sinn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>python</category>
      <category>tutorial</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Stop using relative paths in your React Native imports. Use Aliases instead.</title>
      <author>Andres Urdaneta</author>
      <pubDate>Sun, 06 Jun 2021 22:16:43 +0000</pubDate>
      <link>https://dev.to/dev_astador/stop-using-relative-paths-in-your-react-native-imports-use-aliases-instead-47p5</link>
      <guid>https://dev.to/dev_astador/stop-using-relative-paths-in-your-react-native-imports-use-aliases-instead-47p5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#use-aliases-in-your-imports-with-babel"&gt;
  &lt;/a&gt;
  Use Aliases in your imports with Babel
&lt;/h2&gt;

&lt;p&gt;Instead of doing this in your imports i.e:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;import Component from '../../../components/shared/Header';&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You could do something like this from anywhere in your project i.e:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;import Component from 'components/shared/Header';&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or you could even go as deep as you want i.e:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;import Component from '@/shared/Header';&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You get the point... no more relative paths (&lt;code&gt;'../../../../../../'&lt;/code&gt;) to import any of your components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install required dependencies
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i babel-plugin-module-resolver metro-react-native-babel-preset
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Head over to your &lt;code&gt;babel.config.js&lt;/code&gt; file in your project root directory. (If it doesn't exist, create it)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the &lt;code&gt;module-resolver&lt;/code&gt; plugin to your plugins array like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    presets: ['module:metro-react-native-babel-preset']
    plugins: [
        [
            'module-resolver',
            {
                root: ['.'],
                extensions: ['.ios.js', '.android.js', '.js', '.ts', '.tsx', '.json'],
                alias: {
                    '@': './src/components',
                    'constants': './src/constants',
                    '##': './src/examples',
                },
            },
        ]
    ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure to provide the path you want to reference with an alias, and the alias name itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the example above now you're able to import files or modules like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import MyComponent from '@/MyComponent.js'
import MyConstantFile from 'constants/myConstant.js'
import MyExample from '##/MyExample.js'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I would love to engage with other developers like you. Get in touch on Twitter!&lt;/em&gt; &lt;a href="https://twitter.com/dev_astador"&gt;@dev_astador&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>babel</category>
    </item>
    <item>
      <title>Using Azure Bicep with GitHub Actions</title>
      <author>Olivier Miossec</author>
      <pubDate>Sun, 06 Jun 2021 21:14:22 +0000</pubDate>
      <link>https://dev.to/omiossec/using-azure-bicep-with-github-actions-4e0d</link>
      <guid>https://dev.to/omiossec/using-azure-bicep-with-github-actions-4e0d</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: this post was created just before the release of the 0.4 version of Bicep. In this version, a linter is available and reduces the need to use ARM-TTK.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Azure Bicep is ready for production. We can ask ourselves the question: How to set up a GitHub repository to deploy resources to Azure using Bicep with GitHub Actions.&lt;br&gt;
We need to imagine a clear and secure workflow. The main branch is our unique source of truth. What we have in our bicep files in this branch should be the exact mirror of what we have in Azure. &lt;br&gt;
In this situation, direct push to the main branch should be avoided. Instead, team members should use a dev branch to perform changes to Bicep files. Changes are then tested to see if there is anything wrong. Once tests are completed, a pull request will merge de changes to the main branch and start a deployment to Azure.&lt;/p&gt;

&lt;p&gt;For the illustration, we will try to deploy a Windows VM with a virtual network.&lt;/p&gt;

&lt;p&gt;To start, we need to create a branch protection rule for the master (or main) branch to ensure only pull requests are permitted and people do not push commit directly. &lt;br&gt;
In Github, you can go to settings, then branches, and create a new Branch protection rule. &lt;br&gt;
Click on the Add Rule button, add the name of the branch (master or main) et select Require to pull request reviews before merging (you may add include administrators if the account you use with Git is your administrator account)&lt;/p&gt;

&lt;p&gt;Now if you try to push a commit to your main branch you should have this error&lt;br&gt;
remote: error: GH006: Protected branch update failed for refs/heads/master.&lt;/p&gt;

&lt;p&gt;Now that we cannot push our commit directly to the main branch, we need to create a new branch with our content.&lt;br&gt;
We will start with a simple Linux VM with its VNET/Subnet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;param vmName string = 'linuxvm'
param vnetName string = '01-bicep-decompile-vnet'
param adminUser string = 'myUser'
param vmSize  string = 'Standard_B2ms' 

var nicName_var = '${vmName}-nic'
var osVhdName = '${vmName}-vhd'
var location = 'francecentral'


resource vnetName_resource 'Microsoft.Network/virtualNetworks@2020-05-01' = {
  name: vnetName
  location: location
  properties: {
    addressSpace: {
      addressPrefixes: [
        '172.16.5.0/24'
      ]
    }
    subnets: [
      {
        name: 'default'
        properties: {
          addressPrefix: '172.16.5.0/24'
        }
      }
    ]
    virtualNetworkPeerings: []
    enableDdosProtection: false
    enableVmProtection: false
  }
}

resource vmName_resource 'Microsoft.Compute/virtualMachines@2019-07-01' = {
  name: vmName
  location: location
  properties: {
    hardwareProfile: {
      vmSize: vmSize
    }
    storageProfile: {
      imageReference: {
        publisher: 'Canonical'
        offer: 'UbuntuServer'
        sku: '18.04-LTS'
        version: 'latest'
      }
      osDisk: {
        osType: 'Linux'
        name: osVhdName
        createOption: 'FromImage'
        caching: 'ReadWrite'
        managedDisk: {
          storageAccountType: 'Premium_LRS'
          id: resourceId('Microsoft.Compute/disks', osVhdName)
        }
        diskSizeGB: 30
      }
      dataDisks: []
    }
    osProfile: {
      computerName: vmName
      adminUsername: adminUser
      linuxConfiguration: {
        disablePasswordAuthentication: false
        provisionVMAgent: true
      }
      secrets: []
      allowExtensionOperations: true
      requireGuestProvisionSignal: true
    }
    networkProfile: {
      networkInterfaces: [
        {
          id: nicName.id
        }
      ]
    }
  }
}

resource nicName 'Microsoft.Network/networkInterfaces@2020-05-01' = {
  name: nicName_var
  location: location
  properties: {
    ipConfigurations: [
      {
        name: 'ipconfig1'
        properties: {
          privateIPAddress: '172.16.5.4'
          privateIPAllocationMethod: 'Dynamic'
          subnet: {
            id: vnetName_default.id
          }
          primary: true
          privateIPAddressVersion: 'IPv4'
        }
      }
    ]
    dnsSettings: {
      dnsServers: []
    }
    enableAcceleratedNetworking: false
    enableIPForwarding: false
  }
}

resource vnetName_default 'Microsoft.Network/virtualNetworks/subnets@2020-05-01' = {
  name: '${vnetName_resource.name}/default'
  properties: {
    addressPrefix: '172.16.5.0/24'
    delegations: []
    privateEndpointNetworkPolicies: 'Enabled'
    privateLinkServiceNetworkPolicies: 'Enabled'
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No, that we have our bicep file and our branch policy we need the tool to test the bicep file.&lt;/p&gt;

&lt;p&gt;To test our bicep file, we need to convert it into an ARM JSON template file and use ARM Template Toolkit to test it.&lt;br&gt;
The best option to use these tools with GitHub Actions is to use a container image to build a custom task. &lt;br&gt;
We will need, a docker file to create our image, an action.yml file to describe how the image will be used in the workflow, and a script to convert the bicep file and test it with ARM-TTK. &lt;/p&gt;

&lt;p&gt;Let start with the docker file. We need an image with Azure Powershell module, Bicep binary, and arm-ttk module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mcr.microsoft.com/azure-powershell:5.9.0-ubuntu-18.04

ENV PSModulePath /usr/local/share/powershell/Modules:/opt/microsoft/powershell/7/Modules:/root/.local/share/powershell/Modules

RUN pwsh -c install-module -name pester -force

RUN curl -Lo arm-ttk.zip https://azurequickstartsservice.blob.core.windows.net/ttk/latest/arm-template-toolkit.zip

RUN pwsh -c Expand-Archive ./arm-ttk.zip

RUN pwsh -c copy-item  -Path ./arm-ttk/arm-ttk/ -Destination /usr/local/share/powershell/Modules/ -recurse -force 


RUN curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64

RUN chmod +x ./bicep

RUN mv ./bicep /usr/local/bin/bicep

ADD entrypoint.ps1 /entrypoint.ps1

ENTRYPOINT ["pwsh", "/entrypoint.ps1"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This dockerfile is created inside a folder named armtest. &lt;/p&gt;

&lt;p&gt;Now, we need the entrypoint.ps1 file, the purpose of this script is to convert the bicep file and test the ARM template file with ARM-TTK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CmdletBinding&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;$true&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ValidateScript&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-Not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Test-Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="kr"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"File or folder does not exist"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;})]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.IO.FileInfo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="bp"&gt;$input&lt;/span&gt;&lt;span class="n"&gt;BicepFile&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="kr"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bicep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$input&lt;/span&gt;&lt;span class="nx"&gt;BicepFile&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"An error during bicep build:"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kr"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="nv"&gt;$templateFileName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Join-Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$input&lt;/span&gt;&lt;span class="nx"&gt;BicepFile.DirectoryName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-ChildPath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="bp"&gt;$input&lt;/span&gt;&lt;span class="n"&gt;BicepFile.basename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="s2"&gt;" 



try {

    get-item /usr/local/share/powershell/Modules/arm-ttk/

    import-module /usr/local/share/powershell/Modules/arm-ttk/arm-ttk.psd1

    &lt;/span&gt;&lt;span class="nv"&gt;$TestResultArray&lt;/span&gt;&lt;span class="s2"&gt; = Test-AzTemplate -TemplatePath &lt;/span&gt;&lt;span class="nv"&gt;$templateFileName&lt;/span&gt;&lt;span class="s2"&gt; -Skip Template-Should-Not-Contain-Blanks 

    if (&lt;/span&gt;&lt;span class="bp"&gt;$null&lt;/span&gt;&lt;span class="s2"&gt; -ne (&lt;/span&gt;&lt;span class="nv"&gt;$TestResultArray&lt;/span&gt;&lt;span class="s2"&gt; | Where-Object { -not &lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;.Passed })){

        Write-Output &lt;/span&gt;&lt;span class="nv"&gt;$TestResultArray&lt;/span&gt;&lt;span class="s2"&gt; | Where-Object { -not &lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;.Passed }

        throw "&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="s2"&gt;"

    }
}
catch {
    Write-Host "&lt;/span&gt;&lt;span class="nx"&gt;An&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;file:&lt;/span&gt;&lt;span class="s2"&gt;"
    Write-Host &lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;
    exit 1
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script takes a param, the path of the bicep file. It tries, then, to build it, converting it into an ARM JSON template file. The second part of the script tests the template using the ARM-TTK test-aztemplate cmdlet. &lt;br&gt;
To limit false positives, the script removes the tests on blank properties by using -Skip Template-Should-Not-Contain-Blanks. &lt;br&gt;
If one or more tests fails, the scripts will exist &lt;/p&gt;

&lt;p&gt;The last thing to do is to build the action metadata file. It defines how the workflow will be implemented in GitHub Action. This YAML will describe the input, the bicep file to test, and how to run the action, meaning which container to run with which arguments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AzureBicepTest'&lt;/span&gt;
&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;omiossec'&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Perform&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Bicep&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Tests'&lt;/span&gt;
&lt;span class="na"&gt;branding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;cloud'&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;blue'&lt;/span&gt;
&lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;bicepfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Bicep&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;test'&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./vm.bicep"&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;using&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;docker'&lt;/span&gt;
  &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Dockerfile'&lt;/span&gt;
  &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${{ inputs.bicepfile }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Github action to test the file is ready. We can set up our first workflow. We want to run this workflow against all branches &lt;br&gt;
To create the workflow you just need to create a ./github/workflows folder at the root of your repository and add a YAML file to describe what you want to achieve. &lt;/p&gt;

&lt;p&gt;If ARM-TTK finds an error, the workflow will report it. If not, we can merge the branch to the main branch. At this moment we can deploy to Azure. &lt;/p&gt;

&lt;p&gt;There is a required thing to do if we want to deploy to Azure, a service principal with the privilege to deploy objects in a resource group.&lt;/p&gt;

&lt;p&gt;First let's create the resource group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;New-AzResourceGroup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rg-test-bicep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;westeurope&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a service principal and assign it the role contributor on our resource group.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$servicePrincipal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;New-AzADServicePrincipal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-DisplayName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bicep-demo"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-SkipAssignment&lt;/span&gt;&lt;span class="w"&gt; 


&lt;/span&gt;&lt;span class="n"&gt;New-AzRoleAssignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-RoleDefinitionName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;contributor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-ServicePrincipalName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ServicePrincipal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ApplicationId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-ResourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rg-test-bicep'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will need to extract the secret&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$SecureStringBinary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Runtime.InteropServices.Marshal&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;SecureStringToBSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$servicePrincipal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

 &lt;/span&gt;&lt;span class="nv"&gt;$servicePrincipalSecret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Runtime.InteropServices.Marshal&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;PtrToStringBSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$SecureStringBinary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these elements, we can build the authentication object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$azureContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Get-AzContext&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nv"&gt;$servicePrincipalObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$servicePrincipal&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ApplicationId&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$servicePrincipalSecret&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;subscriptionId&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$azureContext&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;tenantId&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$azureContext&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tenant&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TenantId&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nv"&gt;$servicePrincipalObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConvertTo-Json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JSON data can be used in a GitHub secret that we can later use in our workflow. Simply go to the repository settings and then to secret. Add a new secret, AZURE_SP, and add the JSON data.&lt;/p&gt;

&lt;p&gt;The secret will be used in the second workflow, triggered by a pull request on the main branch.&lt;br&gt;
The task is deploying the bicep file, but first, we need to provide parameters to the bicep file during the deployment. Like in ARM templates, you can use the inline form or use a parameters file. &lt;br&gt;
For the parameter file, you can use the ARM Template file format, like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"contentVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"vmName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vmtest"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"vnetName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"test-vnet"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"adminUser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"adm-bicep"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create the workflow, to deploy resources to Azure. No need to create a custom action using Docker. We can use the &lt;a href="https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template"&gt;GitHub Action for Azure Resource Manager (ARM) deployment&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bicep-deploy&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-and-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

      &lt;span class="c1"&gt;# Checkout code&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@main&lt;/span&gt;

      &lt;span class="c1"&gt;# Log into Azure&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/login@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZURE_SP }}&lt;/span&gt;

      &lt;span class="c1"&gt;# Deploy Bicep file&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/arm-deploy@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;subscriptionId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;087f441f-6200-4226-bac3-22a1dbe98fae&lt;/span&gt;
        &lt;span class="na"&gt;resourceGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;rg-test-bicep'&lt;/span&gt;
        &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./vm.bicep&lt;/span&gt;
        &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./vm.parameters.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow uses the azure/login@v1 action to log in to Azure with the JSON object stored in the AZURE_SP secret variable and then use the azure/arm-deploy@1 to deploy the bicep file in the subscription using the parameter file we created earlier.&lt;/p&gt;

&lt;p&gt;This is a simple example of how you can use GitHub action to create a two steps workflow for your Bicep deployment. One step to control your modification and the other to deploy to Azure.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>bicep</category>
      <category>iac</category>
      <category>azuredevops</category>
    </item>
  </channel>
</rss>
