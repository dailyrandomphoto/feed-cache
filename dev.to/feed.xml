<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free React Responisve Travel Agency Website Design using Styled Components with ScrollReveal Animations✈️</title>
      <author>Kishan Sheth</author>
      <pubDate>Wed, 10 Nov 2021 16:00:15 +0000</pubDate>
      <link>https://dev.to/koolkishan/free-react-responisve-travel-agency-website-design-using-styled-components-with-scrollreveal-animations-3lpf</link>
      <guid>https://dev.to/koolkishan/free-react-responisve-travel-agency-website-design-using-styled-components-with-scrollreveal-animations-3lpf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-can-get-the-template-from-the-link-proivided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can get the template from the link proivided in the description of the video.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Styled Components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#libraries-and-assets-used-"&gt;
  &lt;/a&gt;
  Libraries and Assets Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React Icons&lt;/li&gt;
&lt;li&gt;Scroll Reveal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-learn-how-to-create-this-template-watch-the-complete-video-you-can-get-the-template-for-free-from-the-link-provided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  To learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PNw57niRrPk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-do-like-the-video-and-subscribe-to-the-channel-it-helps-and-motivates-me-to-create-more-content-like-this"&gt;
  &lt;/a&gt;
  Please do like the video and subscribe to the channel. It helps and motivates me to create more content like this.
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>angular</category>
    </item>
    <item>
      <title>Flight Bot: A chat bot to avoid a minor annoyance</title>
      <author>Albert Bennett</author>
      <pubDate>Wed, 10 Nov 2021 15:52:53 +0000</pubDate>
      <link>https://dev.to/albertbennett/flight-bot-a-chat-bot-to-avoid-a-minor-annoyance-2dpm</link>
      <guid>https://dev.to/albertbennett/flight-bot-a-chat-bot-to-avoid-a-minor-annoyance-2dpm</guid>
      <description>&lt;p&gt;If you learned something new feel free to connect with me on &lt;a href="https://www.linkedin.com/in/albert-bennett/"&gt;linkedin&lt;/a&gt; or follow me on dev.to :)&lt;br&gt;&lt;br&gt;
Hi there and welcome to another one of my blogs.&lt;br&gt;
This time I'd like to talk about a project that I had built for a Hackathon that was being hosted at work. The theme of the Hackathon was open, I mean there was a few category's to choose from to get some inspiration but.. . I decided to go my own way with it via the open category.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;The Projects Backstory&lt;/strong&gt;&lt;br&gt;
The tldr version is that I had tried to book flights a couple of years ago to go to visit Bran's Castle in Romania for Halloween and had gotten frustrated with how many sperate flight finding websites that I needed to search to book a flight. Up to that point I hadn't ever booked a flight and had gotten overwhelmed with the amount of choice, in the end I decided not to go.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Project Demo&lt;/strong&gt;&lt;br&gt;
Here is the flight finding bot in action (links to demo video)!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=mP-Vg0ME1so"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eY5O8VGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/mP-Vg0ME1so/0.jpg" alt="flight bot demo video" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the github links for the curious:&lt;br&gt;
Project repo:- &lt;a href="https://github.com/Albert-Bennett/flightbot"&gt;https://github.com/Albert-Bennett/flightbot&lt;/a&gt;&lt;br&gt;
API repo:- &lt;a href="https://github.com/Albert-Bennett/FlightBot.DatabaseSeeding"&gt;https://github.com/Albert-Bennett/FlightBot.DatabaseSeeding&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Project Tech Stack&lt;/strong&gt;&lt;br&gt;
Here is a list of what I had used to get the project working:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Microsoft Bot Framework (used to build the bot and conversation model)&lt;/li&gt;
&lt;li&gt;luis.ai (used to extract data from the users free text, although given the use case for luis in the project was limited it was still better that trying to parse the string manually)&lt;/li&gt;
&lt;li&gt;geonames API (used to search for a airports close to the users location and used to confirm search results. Alternates to this was the google maps api but, anyone could register as an airport on it so... I didn't use it)&lt;/li&gt;
&lt;li&gt;Amadeus API (the API that was used to find the flights, originally I had planned to use the skyscanner API but, they wouldn't let me access it)&lt;/li&gt;
&lt;li&gt;Azure SQL (used to map IATA codes. IATA codes are surprisingly hard to get a hold of and seeing as how I needed to use the geonames API to search for airports it didn't make much sense to not create a DB to hold those mappings. Also, there was a lot of APIs about there for searching for IATA codes but, a lot of them didn't have a free trial period)&lt;/li&gt;
&lt;li&gt;Azure Functions (used to create an API to update the IATA DB and also to search for IATA codes based on geoname id, name, location or IATA code (just in case someone wanted to search for a location based on IATA code))&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Challenges&lt;/strong&gt;&lt;br&gt;
The main challenge of this project was that part way through it my partner showed me an app for booking flights and how easy it was to use. It was a flight comparison website using the Amadeus API as well. It made me rethink the design of the chat bot, as well as a target audience for something like this. I think as programmers it is easy for us to take for granted how much of an advantage being tech savvy is, a previous role of mine training people to use computers at an employment center really made me appreciate how much more accessible the world is to us. Take someone like my mum for a moment, she is 65 years old, she has a phone and all she can use it for is making calls, taking pictures and on occasion accidently hang up on someone before getting frustrated by the amount of options that she has been presented with and struggling to figure out what had happened. &lt;br&gt;
I'm not trying to put her down here. She tries her best but, it is not what she is use to. As such I thought the advantage of using the format of a chat bot over an application is in its simplicity, it's straightforwardness so to speak. In my opinion a chat bot can be made much more accessible to the less tech literate by directing them toward a singular goal, presenting them with very straight forward questions and acting on their fallibility with follow-ups to the inputs and re-affirmations such that they don't get lost in the process. Although accommodating for something like this was much more work then what I had originally planned. State management was a particular pain point given how the flow of a more conversation heavy application needs to be able to remember certain parts of information and yet be able to go back to a previous state of the conversation.&lt;br&gt;&lt;br&gt;
Let me know what you guys think below I'd like to hear about what opinions that you have around the topics of chat bots and accessibility.&lt;br&gt;
Thanks for reading my blog post.&lt;/p&gt;

</description>
      <category>chatbot</category>
      <category>azure</category>
      <category>programming</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Scrape Data From Google</title>
      <author>SaaS.Group</author>
      <pubDate>Wed, 10 Nov 2021 15:49:58 +0000</pubDate>
      <link>https://dev.to/zoltan/scrape-data-from-google-9ij</link>
      <guid>https://dev.to/zoltan/scrape-data-from-google-9ij</guid>
      <description>&lt;p&gt;Scraping Google SERPs (search engine result pages) is as straightforward or as complicated as the tools we use. For this tutorial, we’ll be using Scrapy, a web scraping framework designed for Python. Python and Scrapy combine to create a powerful duo that we can use to scrape almost any website.&lt;/p&gt;

&lt;p&gt;Scrapy has many useful built-in features that will make scraping Google a walk in the park without compromising any data we would like to scrape.&lt;/p&gt;

&lt;p&gt;For example, with Scrapy all it takes is a single command to format our data as CSV or JSON files – a process we would have to code ourselves otherwise.&lt;/p&gt;

&lt;p&gt;Before jumping into the code itself, let’s first explore a few reasons a Google scraper can be useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.scraperapi.com/blog/scrape-data-google-search-results/"&gt;https://www.scraperapi.com/blog/scrape-data-google-search-results/&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>google</category>
      <category>tutorial</category>
      <category>scraping</category>
    </item>
    <item>
      <title>Create a virtual business card with Dev.page!</title>
      <author>Tim</author>
      <pubDate>Wed, 10 Nov 2021 15:35:50 +0000</pubDate>
      <link>https://dev.to/tevko/create-a-virtual-business-card-with-devpage-4o21</link>
      <guid>https://dev.to/tevko/create-a-virtual-business-card-with-devpage-4o21</guid>
      <description>&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/devpage?comment=1563689"&gt;Dev.page&lt;/a&gt; has finally launched, which means you can claim your username to get access to your own page with all of your relevant developer credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEhAW4m8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbjcpc52f0hzrinwxe08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEhAW4m8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbjcpc52f0hzrinwxe08.png" alt="A screenshot of a Dev.page profile" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This all-in-one free homepage for developers is a convenient way to organize all of your profiles: LinkedIn, Twitter, Codepen, Openbase, and even Dev.to!&lt;/p&gt;

&lt;p&gt;You can feature as many skills as you like, customize your bio with markdown, and choose a custom vanity URL (mine is &lt;a href="https://dev.page/tim/"&gt;https://dev.page/tim/&lt;/a&gt;) to help share your page with others.&lt;/p&gt;

&lt;p&gt;I like showcases like these in lieu of building a portfolio site, especially for developers who focus more on full stack and backend development. The team at Openbase has made this tool very easy to use, with no code or configuration required!&lt;/p&gt;

&lt;p&gt;Sign up and grab your username while it's still available!&lt;br&gt;
&lt;a href="https://dev.page/"&gt;https://dev.page/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wjf5Mvv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0pbne9fefupl19goo1o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjf5Mvv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0pbne9fefupl19goo1o.gif" alt="Dev.page from Openbase" width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>developer</category>
      <category>socialmedia</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Make a Headless CMS for Dating App Like Tinder </title>
      <author>Katarina Harbuzava</author>
      <pubDate>Wed, 10 Nov 2021 15:33:18 +0000</pubDate>
      <link>https://dev.to/anaflatlogic/how-to-make-a-headless-cms-for-dating-app-like-tinder-3083</link>
      <guid>https://dev.to/anaflatlogic/how-to-make-a-headless-cms-for-dating-app-like-tinder-3083</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hello, dear reader! Happy to see you in this article that, we are sure, you will find most helpful. The reasoning behind our assurance is simple: we'll show you the way to create a headless &lt;a href="https://flatlogic.com/blog/best-headless-cms/"&gt;CMS&lt;/a&gt; for a Tinder-like app that requires no, and we emphasize strongly – absolutely no, coding.&lt;/p&gt;

&lt;p&gt;You can do this using a brand new &lt;a href="https://flatlogic.com/generator"&gt;Full Stack Web Application Generator&lt;/a&gt; by Flatlogic, which gives you the most awesome of awesome powers – creating fully functional apps without writing a single line of code in a few easy steps. In fact, we have sat down with a person who has never written a single line of code in his life with the goal of creating a Tinder-like app to prove the above-mentioned point. And let us tell you that the point was proven right.&lt;/p&gt;

&lt;p&gt;But we are getting a little bit ahead of ourselves. Let’s get back on track, – “Why would you need a Tinder-like app in the first place?”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why create a Tinder-like dating app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tinder’s monthly traffic is about 75 million users around the world, and almost 8 million of them are from the United States.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.businessofapps.com/data/tinder-statistics/"&gt;https://www.businessofapps.com/data/tinder-statistics/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although such a question is deeply philosophical, there are actually a couple of pretty grounded reasons to create an app that allows you to choose between different variants of the same category, which is the stripped-down purpose of apps like Tinder. A couple of these reasons are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Creating a competing app&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, there is already &lt;a href="https://tinder.com/"&gt;Tinder&lt;/a&gt;. Yes, it is a hugely popular dating app, to say the least. The monthly traffic of Tinder is 75 million users around the world, and almost 8 million of them are from the United States. But here lies its most vulnerable point – its size does not allow it to be precise. To draw an analogy, using Tinder is like being in the open sea, trying to catch a specific species of fish. It is quite possible, but it is relatively less likely that you are going to catch that specific fish purely because of the wide array of fish that lives in the sea.&lt;/p&gt;

&lt;p&gt;And you can have all the necessary equipment (options like geolocation, age, ranges, etc. in this analogy), but there is still no way to secure more particularities. And that’s where your app can come into play. Your app can be more precise, give more search options such as, back to the analogy, you can be the fisher that fishes in the exact spots of the sea where the needed fish lives. Moreover, it is always good to have more players on the market in order to promote progress in the field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;It does not have to be about dating&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The overall stripped-down concept of Tinder, which we have mentioned in the previous point, is solid. It is a way to filter through great quantities of information. And that way, it allows you to not only train your on-the-spot decision-making skills but to do it quickly. Your Tinder-like app can be about pretty much anything: selling cars, adopting pets, or even choosing between job applicants. The possibilities are extremely varied.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Gamification possibilities&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Marketing is an undoubtedly important part of today’s business. And gamification is quite an effective marketing strategy, which allows your potential clients to engage more deeply in your product by interacting with it. And, once again Tinder-like apps give you an opportunity to gamify your potential client’s experience with the product. For example, an app like this can be made into a decision-based game.&lt;/p&gt;

&lt;p&gt;And that’s not even close to unlocking the full potential of such an app format. But we would be here all day and half a night if we tried to do it full justice. So, what we suggest is getting down to the actual way that you can greatly simplify the whole process of creating a Tinder-like app by effortlessly creating its CMS with the help of Flatlogic’s Full Stack Web Application Generator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating CMS with Web App Generator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we’ve already said, we’ve actually sat down with a person that has zero knowledge about coding to do this part of the whole process to prove that it is easy. And here’s a little walkthrough that this person has come up with after this experience that you can also follow to create your Tinder-like app if you would like to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step №1. Find Full Stack Web App Generator&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step is quite simple and straightforward. What you need to do is to go to flatlogic.com/generator and here you are. As you will see there, you are able to create apps on React, Vue, and Angular. Boldly press the “Create your app” button and go to Step №2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step №2. Name Your Project&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once again, a simple step, which as you will see, can be said of the whole process. What you need to do here is to name your project and go forward to the third step by pressing the “Next” button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step №3. Select Your Project’s Stack&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The third step leads you to the basis of the headless CMS for your dating app, which is the project’s stack. Flatlogic’s Full Stack Web Application Generator provides you with a multitude of Stack choices for backend, frontend, and database. The choices for the frontend are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The choices for backend are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java, Python, and .Net backends are under development now and will be available a bit later.  &lt;/p&gt;

&lt;p&gt;And as for databases, the present variants are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;PostgreSQL
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the free version of the Generator, you could use all of the variants of the backend stack, &lt;a href="https://flatlogic.com/blog/14-best-node-js-open-source-projects/?ref=morioh.com&amp;amp;utm_source=morioh.com"&gt;Node.js&lt;/a&gt; for the frontend and MySQL and PostgreSQL for the database. So, the choice kind of made itself when it came to our “lab rat’s” Tinder-like app. And, after that, it was up to the fourth step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step №4. Choose a design for your Tinder-like app’s CMS&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No app is truly finished without a nice and slick design. And that’s doubly true for Tinder-like apps, as to why would you want to find a partner on an unfinished building site? Well, once again, you could want to do that, and kudos to you for sticking to your own ways, but if we speak broadly, the chances of such an occasion are exceptionally slim. That’s why most apps have eye-pleasing designs that lure their customers in. And that’s also why Flatlogic’s Full Stack Web Application Generator provides an opportunity to choose from a number of ready-made designs and all you have to do is choose the one you find most fitting for your purposes.&lt;/p&gt;

&lt;p&gt;This is exactly what our inexperienced friend did, setting his choice on the transparent design version, judging that the dark tones of this option would fit rather nicely into the whole selection and matching process, as it would contrast beautifully with the bright and vibrant colors of the photos, whilst also complementing the dark ones. And that’s not mentioning that it was just very stylish. After that was done and dusted, it was time to go to step number 5.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwG7sQvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b59f8pbz5ccehg8pcgme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwG7sQvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b59f8pbz5ccehg8pcgme.png" alt="Image description" width="624" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6l4HVVbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys42ctmui0n7y6d7l3iu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6l4HVVbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys42ctmui0n7y6d7l3iu.png" alt="Image description" width="624" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step №5. Create the app’s database schema&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step was probably the most challenging for our inexperienced friend, as it was the closest one to the actual code writing. But, with a bit of tinkering around and a bit of a spark of excitement in the eyes, he got down to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWuTBcrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngpor6ed837uzg1uodyz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWuTBcrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngpor6ed837uzg1uodyz.png" alt="Image description" width="624" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing this step required was to select a ready-made scheme from the variants offered, which include such entrees as:&lt;/p&gt;

&lt;p&gt;·       Blank, which effectively means creating a Database Schema from scratch;&lt;/p&gt;

&lt;p&gt;·       E-commerce;&lt;/p&gt;

&lt;p&gt;·       Time tracking reports;&lt;/p&gt;

&lt;p&gt;·       Book store;&lt;/p&gt;

&lt;p&gt;·       Blog;&lt;/p&gt;

&lt;p&gt;·       Chat (messaging);&lt;/p&gt;

&lt;p&gt;·       Social Network.&lt;/p&gt;

&lt;p&gt;The closest thing to Tinder from the above-mentioned variants would actually be the Chat (messaging) option, as Tinder is not a full-blown social network, but rather a messaging app with an added layer of setting up and presenting profiles and other choice-related necessities. So, what is definitely needed in the case of creating a Tinder-like app is the ability to swipe left or right to make a negative or positive decision. An app like this would also need to be based on pictures and descriptions. Now we get on to setting up our Database Schema.&lt;/p&gt;

&lt;p&gt;We start with adding a couple of points to our “user” Table. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User ID, which would be of int Type and should be unique to each user;&lt;/li&gt;
&lt;li&gt;Liked Users, which would have similar attributes of int Type and is unique to each user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mVjduGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7vwgxwn6j0d9zy0z39x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mVjduGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7vwgxwn6j0d9zy0z39x.png" alt="Image description" width="624" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rest is already set up for our Tinder-like app in the Chat (messaging) database schema preset. After that, we just need to tinker with the chat rooms the tiniest bit.&lt;/p&gt;

&lt;p&gt;What we need to do in the chat rooms portion of our schema is also change its properties to int Type and give make each chat room unique as each dialogue between the users should be separate from the others and we do not need the ability to create group chats (we don’t judge and we are not prudes in any way, our app is just not of that variety).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNwqAeBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke4s3w0voqotobheik3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNwqAeBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke4s3w0voqotobheik3t.png" alt="Image description" width="624" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is pretty much it! All you need to do after that is to review your choices and press the “Create Project” button. After that, you just wait for Full Stack Web Application Generator to do its secret magic and download it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3d9WDF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifh0z6x9morvx8oe1rmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3d9WDF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifh0z6x9morvx8oe1rmn.png" alt="Image description" width="624" height="242"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As it comes to our inexperienced friend, he learned nothing new about actual coding, except that it can be done effortlessly and quickly with the help of Flatlogic’s Full Stack Web Application Generator. Especially when it comes to setting up database schemas, as it came off easy, but required just a smidgen of imagination. So, as you can see, using Flatlogic’s Full Stack Web Application Generator is so simple that even a person with no experience whatsoever in creating apps can do it.&lt;/p&gt;

&lt;p&gt;Now when your dating app like Tinder is created and ready for deployment and usage, don’t shy away from actually booting it up and seeing your marvelous results. You can see our finalized and usage-ready app on the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDkDuWAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/192r5jw0p19c36y9ieu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDkDuWAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/192r5jw0p19c36y9ieu4.png" alt="Image description" width="624" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that our educational article about building CMS for dating app like Tinder comes to an end, let’s set out a few take-away points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Apps like Tinder have quite a potential despite what you may initially think. Yes, its primary goal in the user’s mind is to find dates or people to chat with, but, as we’ve already discussed, its actual implementation can be much wider. And that’s because its primary function – simple “yes or no” voting, is easily understandable and highly usable. So, you can use it according to your project’s actual needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating a CMS for your Tinder-like app can be done pretty easily and effortlessly with the help of Flatlogic’s brand new &lt;a href="https://flatlogic.com/blog/full-stack-web-app-builder/"&gt;Full Stack Web App Generator&lt;/a&gt;. All you, as its creator, have to do is take five self-explanatory steps, that we have taken together in this article.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that’s it for today’s article. We really hope you have found the text useful. Create your own vibrant and beautiful CMS for your dating application with the help of Web Application Generator and feel free to read up on more of our articles!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>web</category>
    </item>
    <item>
      <title>Day 56/100 Bugs and Errors</title>
      <author>Rio Cantre</author>
      <pubDate>Wed, 10 Nov 2021 15:31:40 +0000</pubDate>
      <link>https://dev.to/riocantre/day-56100-bugs-and-errors-1o89</link>
      <guid>https://dev.to/riocantre/day-56100-bugs-and-errors-1o89</guid>
      <description>&lt;p&gt;"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it."&lt;/p&gt;

&lt;p&gt;– Brian Kernighan and P.J. Plauger, The Elements of Programming Style&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSq6YUni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b21xayyjkj0eeirw6gfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSq6YUni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b21xayyjkj0eeirw6gfb.png" alt="bugs" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>challenge</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Cloudflare Developer Challenge: Adding Rust to SvelteKit</title>
      <author>Rodney Lab</author>
      <pubDate>Wed, 10 Nov 2021 15:18:57 +0000</pubDate>
      <link>https://dev.to/askrodney/cloudflare-developer-challenge-adding-rust-to-sveltekit-3ehn</link>
      <guid>https://dev.to/askrodney/cloudflare-developer-challenge-adding-rust-to-sveltekit-3ehn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#cloudflare-developer-challenge"&gt;
  &lt;/a&gt;
  ✨ Cloudflare Developer Challenge
&lt;/h2&gt;

&lt;p&gt;The Cloudflare Developer Challenge was launched in the summer.  Basically you had to build an application which uses two services from Cloudflare's developer platform.  I built out &lt;a&gt;Narcissus as a proof of concept backendless blog&lt;/a&gt; stitching together some of my favourite tools, languages and services.  Spoiler alert: if you aren't new here, it won't surprise you to learn that I built it using SvelteKit and Rust! In this post I'll talk a little about the challenge and my entry.  I hope you find it interesting as well as useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdhDMHcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqsw0cs7xmtdj5y1wo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdhDMHcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqsw0cs7xmtdj5y1wo1.png" alt="Tweet from @Cloudflare mentioning that submissions for the challenge close on 1 November 2021 and including the #DeveloperChallenge (developer challenge) hashtag" width="880" height="637"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-this-project"&gt;
  &lt;/a&gt;
  😕 Why Choose this Project?
&lt;/h2&gt;

&lt;p&gt;I was quite excited when I saw the tweet announcing the Cloudflare Developer Challenge.  I had been using Cloudflare DNS and &lt;a href="https://rodneylab.com/how-to-setup-cloudflare-warp-openbsd/"&gt;Warp&lt;/a&gt; services for a while and had just started trying out Cloudflare Pages and Workers.  Because I love trying out new products and services I wanted to work with novel and interesting tools in this project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chosen-toolkit"&gt;
  &lt;/a&gt;
  Chosen Toolkit
&lt;/h3&gt;

&lt;p&gt;Here's what I decided to go with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vanilla-extract&lt;/strong&gt;: I simply love this tool for working with CSS.  &lt;a href="https://rodneylab.com/using-vanilla-extract-sveltekit/"&gt;vanilla-extract let's you write you CSS in TypeScript&lt;/a&gt;, making it easier to keep your styling consistent.  On top it makes theming easy, works on most modern platforms and separates styles and content into their own files.  These last two features made it ideal for this project as I wanted to build a demo site in Astro and other modern frameworks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;: Cloudflare had recently &lt;a href="https://blog.cloudflare.com/workers-rust-sdk/"&gt;added first-class support for Rust&lt;/a&gt; to Cloudflare Workers.  Cloudflare Workers are something like Lambda functions but &lt;a href="https://rodneylab.com/using-rust-cloudflare-workers/"&gt;compile to Web Assembly (WASM) and are optimised to run fast&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SvelteKit&lt;/strong&gt;: SvelteKit offers the &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;best developer experience&lt;/a&gt; currently.  Combining SvelteKit's modern Vite tooling and Svelte's ability to compile down to pure JavaScript, I would be able to build a fast site and do it quickly.  I got quick feedback with both development code updates reflected instantly in the browser and genuinely, blazingly fast cloud builds, letting me debug issues at warp speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Supabase&lt;/strong&gt;: you must have heard about the new open source alternative to Firebase.  Using Supabase with PostgreSQL &lt;strong&gt;Row Level Security&lt;/strong&gt; is ideal for this project.  Row Level security makes it easy to set access rules on the database itself rather than within your API code.  As an example you can build rules into your database only allowing a user to create new messages from their own account in a messaging app (as an example use case).  Then on top you can give only the selected recipients and sender read access to the underlying message data. This is a fantastic security addition as writing access rules within your own API can quickly become complex and error-prone as new features are merged.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#up-next"&gt;
  &lt;/a&gt;
  Up Next
&lt;/h3&gt;

&lt;p&gt;To sum up I tied all these tools and services together to create the API as a service.  Let's see what an API as a service is next and how it can be used to add fantastic features for increasing user engagement in a hassle-free way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-api-as-a-service"&gt;
  &lt;/a&gt;
  🌟 What is an API as a Service?
&lt;/h2&gt;

&lt;p&gt;An Application Programming Interface (API) let's you access a service from your own code.  You might already be familiar with Serverless environments where there is a server (somewhere) but the point is you do not have to maintain it or scale resources yourself when traffic ramps up — your service provider takes care of that for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EuzIKr2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtqgxasm9sa4u0h0dq8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EuzIKr2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtqgxasm9sa4u0h0dq8y.png" alt="Screenshot of Narcissus demo site with blog post meta including post views, likes and comments as well as a comment box" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this project I built a proof of concept for a &lt;strong&gt;backendless blog&lt;/strong&gt; site.  Here you neither have to code up all the logic needed to handle contact form messages, nor pass them on to a delivery service to check them for spam and &lt;strong&gt;filter out bots&lt;/strong&gt;.  On top you can &lt;strong&gt;forget about the database&lt;/strong&gt; too. Instead you just write REST API calls to a single service which runs &lt;strong&gt;Rust Cloudflare Workers&lt;/strong&gt;.  That service does a lot of the heavy lifting for you.  It's different to adding a comment service to your blog as you implement the front end yourself.  You can code it up efficiently and style it exactly how you or your client want it.  On top you pick and choose the features you want: likes and views, comments or contact form messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-narcissus"&gt;
  &lt;/a&gt;
  🖤 What is Narcissus?
&lt;/h2&gt;

&lt;p&gt;Narcissus is a proof of concept API as a service for websites.  You can build a static or server-side rendered site and integrate access to your data just by calling a REST endpoint.  For a static site you might opt to pull in data at build time so that even with JavaScript disabled visitors can see some available comments or likes.  With JavaScript enabled, a quick call to the Rust Cloudflare Worker gets the latest data from the &lt;strong&gt;Supabase database&lt;/strong&gt; onto your visitor's phone or computer screen.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XAdeoUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40p9z5bc47ymoagdxoxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XAdeoUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40p9z5bc47ymoagdxoxi.png" alt="Screenshot of Narcissus demo site with blog post, light theme, meta including post views, likes and comments at the top of a blog post article" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These features are provided by REST endpoints which the Rust Cloudflare Worker listens on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Message form&lt;/strong&gt; — lets website visitors send a message to admins. To avoid abuse by bots &lt;a href="https://www.hcaptcha.com/"&gt;hCaptcha runs a challenge&lt;/a&gt; in browser. On the Cloudflare worker side, there is also a check with the &lt;a href="https://akismet.com/"&gt;Akismet spam detection service&lt;/a&gt;. The worker sends you or admins the details of the message using a &lt;strong&gt;Telegram bot&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;View count&lt;/strong&gt; — page views are counted automatically and displayed, letting visitors know what the most popular content is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Likes&lt;/strong&gt; — the &lt;a href="https://github.com/rodneylab/narcissus"&gt;Cloudflare worker&lt;/a&gt; records new blog post likes to the &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt; — comments left by users on blog posts, like contact form messages are checked for spam and bots.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer friendly&lt;/strong&gt; — you style the pages and implement any or all of the features the way you want. Just fetch data from the &lt;strong&gt;API using REST&lt;/strong&gt; calls. Your site becomes &lt;strong&gt;backendless&lt;/strong&gt; and you save on having to configure and connect multiple services.  Add to your site today even though you plan to &lt;strong&gt;move to a new framework&lt;/strong&gt; soon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#possible-future-features"&gt;
  &lt;/a&gt;
  Possible Future Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Newsletter subscription handling, connecting to your preferred service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraphQL API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alternative &lt;a href="https://astro.build/"&gt;demo site built with Astro&lt;/a&gt; and &lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at the current &lt;a href="https://narcissus-blog.rodneylab.com/"&gt;live demo site running on Cloudflare Pages&lt;/a&gt;.  Also see the &lt;a href="https://github.com/rodneylab/narcissus"&gt;monorepo which is home to both the Cloudflare Worker code and the demo&lt;/a&gt; client sites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-your-website-pain-points"&gt;
  &lt;/a&gt;
  😢 What are your Website Pain Points?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cms8Sy1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f45274k3uknrb4uhhu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cms8Sy1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f45274k3uknrb4uhhu0.png" alt="Screenshot of Narcissus demo site blog post summary showing post title, meta (views, likes and comment) as well as a summary excerpt" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I mentioned a few possible new features above but even better would be to hear what your current pain points are.  What challenges do you face when you are creating and maintaining sites for yourself and clients?  If you could change one thing, what would it be? I would love you to leave a comment below or get in touch with me via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney on Twitter&lt;/a&gt; or &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;🏁 Cloudflare Developer Challenge: Summary&lt;/p&gt;

&lt;p&gt;
  position={1}&lt;br&gt;
    name="What is Narcissus?"&lt;br&gt;
    answer="Narcissus is a proof of concept backend as a service app which lets you create a blog site quicker by managing important blog features like comment and message forms as well as post views and likes."&lt;br&gt;
/&amp;gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#h2-cloudflare-developer-challenge-feedback"&gt;
  &lt;/a&gt;
  h2 🙏🏽 Cloudflare Developer Challenge: Feedback
&lt;/h1&gt;

&lt;p&gt;Have you found the post useful? Would you prefer to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a few dollars, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt; as well as other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>serverless</category>
      <category>javascript</category>
      <category>rust</category>
    </item>
    <item>
      <title>Recommended courses to learn web development + course giveaway</title>
      <author>Damian Demasi</author>
      <pubDate>Wed, 10 Nov 2021 15:03:19 +0000</pubDate>
      <link>https://dev.to/colocodes/recommended-courses-to-learn-web-development-course-giveaway-575h</link>
      <guid>https://dev.to/colocodes/recommended-courses-to-learn-web-development-course-giveaway-575h</guid>
      <description>&lt;p&gt;Becoming a web developer (or growing into that position) can trigger some extreme anxiety attacks and tsunami-like waves of uncertainty. This is why I would like to offer you a helping hand by recommending some of the best web development related courses I have taken so far.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Beware!&lt;/strong&gt; This is a marketing loaded post! Nevertheless, I think you will find it useful, and you will want to take the opportunity to &lt;strong&gt;win a free Udemy course&lt;/strong&gt;, so keep on reading!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/zrmTqopWm4W5cPg8Ah/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/zrmTqopWm4W5cPg8Ah/giphy.gif" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-am-i-to-give-you-my-opinion-about-courses"&gt;
  &lt;/a&gt;
  Who am I to give you my opinion about courses?
&lt;/h2&gt;

&lt;p&gt;First of all, I don't consider myself an expert on the web development subject. That being said, I've managed to finish several courses on &lt;a href="http://click.linksynergy.com/fs-bin/click?id=LO030NrbM0E&amp;amp;offerid=507388&amp;amp;type=3&amp;amp;subid=0"&gt;Udemy&lt;/a&gt;, as well as &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt; and &lt;a href="https://www.codecademy.com/learn"&gt;CodeCademy&lt;/a&gt;, which, in the end, allowed me to get a job as a software developer, changing my career path in my '40s.&lt;/p&gt;

&lt;p&gt;If you want to learn more about this process, you should check this post out:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/colocodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYbdtIsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2sZPQzQE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/420036/7f62b9dd-71f0-4e06-9466-1340b5d8a038.png" alt="colocodes"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/colocodes/how-ive-got-a-web-development-job-one-week-after-publishing-my-portfolio-3o6g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I’ve got a web development job one week after publishing my portfolio&lt;/h2&gt;
      &lt;h3&gt;Damian Demasi ・ Nov 1 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#portfolio&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-web-developer-road-map"&gt;
  &lt;/a&gt;
  The Web Developer road map
&lt;/h2&gt;

&lt;p&gt;Let's start with an overview of what a web developer needs to know in order to grow in its industry. I chose to start in the front-end because is easier to find jobs in (which does not mean it's easy, at all!), and I already have some of the back-end skills (although I will have to sharpen them in the near future).&lt;/p&gt;

&lt;p&gt;💡 There is a great software developer roadmap, built by Kamran Ahmed, that you can find &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;in his repository&lt;/a&gt;. I urge you to take a look at it to understand the dimension and extent of the web developer path.&lt;/p&gt;

&lt;p&gt;For simplicity sake, I will be focusing on these areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#about-free-courses"&gt;
  &lt;/a&gt;
  About free courses
&lt;/h2&gt;

&lt;p&gt;Free courses are great because, you guessed it, they are free. But, many free resources usually just scratch the surface of a topic, teaching you the minimum. This is far from ideal, and it will require a great deal of research on your part to fill in the knowledge gaps.&lt;/p&gt;

&lt;p&gt;I think free courses are a great way to start getting your feet wet on a topic, but they can only take you so far. This is why I would recommend doing them at the beginning. You will need to invest time and effort into researching by yourself (and practising as well) if you want to become proficient on that topic.&lt;/p&gt;

&lt;p&gt;In the end, free courses are inexpensive in regards to money, but they can be very expensive time-wise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeCodeCamp&lt;/strong&gt; has a &lt;a href="https://www.freecodecamp.org/learn"&gt;great curriculum&lt;/a&gt;, and I would recommend starting with the first three modules, in order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Responsive Web Design Certification&lt;/li&gt;
&lt;li&gt;JavaScript Algorithms and Data Structures Certification&lt;/li&gt;
&lt;li&gt;Front End Development Libraries Certification&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KuaSAqFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1zbjmz6obqhapyp90m4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuaSAqFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1zbjmz6obqhapyp90m4.png" alt="freeCodeCamp Curriculum" width="880" height="1186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All this content is far from enough, but is great to start working on becoming a web developer. I think doing these courses is a great foundation for what's next.&lt;/p&gt;

&lt;p&gt;You can also make some free courses on CodeCademy, but if you want the good stuff, you'll have to pay (monthly).&lt;/p&gt;

&lt;p&gt;There is also another free alternative: &lt;a href="https://www.theodinproject.com/paths"&gt;The Odin Project&lt;/a&gt;. This is more of a repository of content and links to different resources that will teach you how to become a web developer. It's not as structured as freeCodeCamp, but is a great resource to keep in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-paid-courses"&gt;
  &lt;/a&gt;
  About paid courses
&lt;/h2&gt;

&lt;p&gt;Paying for a course is something that many disregards because of the sole fact that you have to pay.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Why would I pay for something that can be found for free?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s a question many ask themselves (me included). The truth is that most of the content found in a paid course can also be found for free (especially on &lt;a href="https://www.youtube.com/results?search_query=web+development+course"&gt;YouTube&lt;/a&gt;), but it's scattered all over the place. Paying for a course is a way to be (almost) sure that the content will be &lt;strong&gt;free from gaps&lt;/strong&gt; and it’s well &lt;strong&gt;structured and in a single place&lt;/strong&gt;. This will save you a lot of ⏳ time, which in the end &lt;strong&gt;is more valuable than money&lt;/strong&gt; 💸.&lt;/p&gt;

&lt;p&gt;According to what I’ve seen out there, good paid courses do not go over $30. If you pay more than that, make sure the course covers more ground than the cheaper options, that its content is up to date, and that it's full of former students’ good reviews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT5LMGQS88EdeTeEk8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT5LMGQS88EdeTeEk8/giphy.gif" width="480" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a list of paid courses that I’ve taken (and, most of them, finished) in the last two years and that I can recommend. The list is ordered as I think is best to build the web development skillset from the ground up, especially once the free courses on freeCodeCamp are finished.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;👉 &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.221674&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgit-complete%2F"&gt;Git Complete: The definitive, step-by-step guide to Git&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.625204&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-web-developer-bootcamp%2F"&gt;The Web Developer Bootcamp 2021&lt;/a&gt; (another great alternative is &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.1565838&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-web-development-bootcamp%2F"&gt;The Complete 2022 Web Development Bootcamp&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.1026604&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fadvanced-css-and-sass%2F"&gt;Advanced CSS and Sass: Flexbox, Grid, Animations and More!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.851712&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-javascript-course%2F"&gt;The Complete JavaScript Course 2021: From Zero to Expert!&lt;/a&gt; (the best course on JavaScript I could find!)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.1362070&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-the-complete-guide-incl-redux%2F"&gt;React - The Complete Guide (incl Hooks, React Router, Redux)&lt;/a&gt; (I'm still doing this one).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, all of them are from Udemy. I just love that platform and I think is the best bang for your buck out there.&lt;/p&gt;

&lt;p&gt;If you choose to do all of them, it can take you from 6 months to a year, depending on your previous knowledge and skills.&lt;/p&gt;

&lt;p&gt;There are also other paid options, such as &lt;a href="https://teamtreehouse.com/"&gt;Team Treehouse&lt;/a&gt; and &lt;a href="https://www.codecademy.com/learn"&gt;CodeCademy&lt;/a&gt;, but I think they are expensive for what they offer, and not too different from the Udemy courses I mentioned earlier. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-your-own-adventure"&gt;
  &lt;/a&gt;
  Choose your own adventure
&lt;/h2&gt;

&lt;p&gt;Have you ever read a &lt;a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure"&gt;Choose your own adventure book&lt;/a&gt;? I feel being a self-taught developer is a lot like that. Many paths to choose from, some of them leading to dead ends, a handful leading to real transformation. This is why I wanted to give you my opinion and recommendation about the path you can take, so you don't stumble over the same stones I did in mine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Mbj4d03hCDv77RS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Mbj4d03hCDv77RS/giphy.gif" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#did-someone-mention-a-giveaway"&gt;
  &lt;/a&gt;
  Did someone mention a giveaway?
&lt;/h2&gt;

&lt;p&gt;So, let me be brutally honest: I'm in the process of building a following. People that share the same interests and values that I do. This is why I'm in the process of building an email list. I would love to share my posts with people genuinely interested in them, and sharing a newsletter among my email list is the best way I've found for doing so.&lt;/p&gt;

&lt;p&gt;Currently, as of 9th November 2021, I have only 4 subscribers, as you can see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hhp3FcND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytsqpfob5w19w2fds6pr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hhp3FcND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytsqpfob5w19w2fds6pr.png" alt="My subscribers" width="880" height="752"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would love to see that number passing the 100 by the end of the month (November 2021), so, if you haven't &lt;strong&gt;subscribed to &lt;a href="https://chipper-designer-8106.ck.page/1a819bffe8"&gt;my newsletter&lt;/a&gt;&lt;/strong&gt; yet, you have a chance to do so now! &lt;strong&gt;If the number of subscribers reaches 100 by the 30th of November 2021, I will give away one of the 5 Udemy courses I mentioned in the &lt;em&gt;About paid courses&lt;/em&gt; section to one of my subscribers (I'll select his or her name randomly from the list)&lt;/strong&gt;. I will be sending a newsletter announcing the winner, as well as in this post, so make sure to bookmark it.&lt;/p&gt;

&lt;p&gt;This is your opportunity to jumpstart your web development journey, so go for it! &lt;/p&gt;




&lt;p&gt;🗞️ &lt;strong&gt;NEWSLETTER -&lt;/strong&gt; &lt;em&gt;If you want to hear about my latest articles and interesting software development content, &lt;a href="https://chipper-designer-8106.ck.page/1a819bffe8"&gt;subscribe to my newsletter&lt;/a&gt;. &lt;strong&gt;I will be giving away a Udemy course among my newsletter subscribers&lt;/strong&gt; if we go over 100 during the month of November 2021!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;🐦 &lt;strong&gt;TWITTER -&lt;/strong&gt; &lt;em&gt;Follow me on &lt;a href="https://twitter.com/DamianDemasi"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>discuss</category>
      <category>giveaway</category>
    </item>
    <item>
      <title>CSS Animation / Keyframes, Perspective</title>
      <author>Dahye Ji</author>
      <pubDate>Wed, 10 Nov 2021 14:58:28 +0000</pubDate>
      <link>https://dev.to/daaahailey/css-animation-keyframes-perspective-358d</link>
      <guid>https://dev.to/daaahailey/css-animation-keyframes-perspective-358d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#keyframes"&gt;
  &lt;/a&gt;
  @keyframes
&lt;/h1&gt;

&lt;p&gt;It controls the intermediate steps in a CSS animation sequence by defining styles for keyframes along the animation sequence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;animationName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* It can have more properties in between like below*/&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;animation-name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;/* start */&lt;/span&gt;
&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;styles;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;styles;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* end */&lt;/span&gt;
&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;styles;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;code&gt;from&lt;/code&gt;&lt;/strong&gt;: a starting offset of 0%.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;to&lt;/code&gt;&lt;/strong&gt;: an ending offset of 100%.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;%&lt;/code&gt;&lt;/strong&gt;: A percentage of the time through the animation sequence at which the specified keyframe should occur.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-apply-animation"&gt;
  &lt;/a&gt;
  How to apply animation.
&lt;/h1&gt;

&lt;p&gt;Using animation makes CSS effects to work and move smoothly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#animationname"&gt;
  &lt;/a&gt;
  animation-name
&lt;/h2&gt;

&lt;p&gt;To call/play animation, you must define the name and need to use the name in @keyframes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* 키프레임 이름 == 애니메이션 이름 */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;styles;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;styles;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* 애니메이션 이름 */&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rules-for-naming-the-animation"&gt;
  &lt;/a&gt;
  rules for naming the animation.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* [ Good example ] */&lt;/span&gt;
&lt;span class="nt"&gt;animation-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;move&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* name starts with lowercase */&lt;/span&gt;
&lt;span class="nt"&gt;animtaion-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;_move&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* name starts with (_) */&lt;/span&gt;
&lt;span class="nt"&gt;animation-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-move&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* name starts with (-) */&lt;/span&gt;
&lt;span class="nt"&gt;animation-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;move1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;move2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* listing a few different animation-name */&lt;/span&gt;

&lt;span class="c"&gt;/* [ Bad example ] */&lt;/span&gt;
&lt;span class="nt"&gt;animation-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Name-yoon&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* name starts with uppercase */&lt;/span&gt;
&lt;span class="nt"&gt;animation-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;-name-yoon&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* name starts with special character */&lt;/span&gt;
&lt;span class="nt"&gt;animation-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;yoon&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* name starts with number */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#animationduration"&gt;
  &lt;/a&gt;
  animation-duration
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;animation-duration&amp;gt;&lt;/code&gt; sets the length of time that an animation takes to complete one cycle. You can only use positive number for it and if you set it wit 0(zero) or negative number, it won't be executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* [ Animation won't be executed ] */&lt;/span&gt;
&lt;span class="nt"&gt;animation-duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when the duration is 0 */&lt;/span&gt;
&lt;span class="nt"&gt;animation-duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-3s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when the duration is negative number */&lt;/span&gt;

&lt;span class="c"&gt;/* [ Animation will be executed ] */&lt;/span&gt;
&lt;span class="nt"&gt;animation-duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when the duration is positive number */&lt;/span&gt;
&lt;span class="nt"&gt;animation-duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;500&lt;/span&gt;&lt;span class="nt"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when the duration is is shorter than 1 second */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#animationiterationcount"&gt;
  &lt;/a&gt;
  animation-iteration-count
&lt;/h2&gt;

&lt;p&gt;When you execute the animation, it stops after it's played. &lt;code&gt;&amp;lt;animation-iteration-count&amp;gt;&lt;/code&gt; sets the number of times an animation sequence should be played before stopping. Default value for this property is 1 and if it's set to 0 or negative, it won't execute. If the value is rational number like 1.5, it will go back to the first frame while it's being played and if the value is infinite, it will play the animation infinitely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* [ Animation won't be executed ] */&lt;/span&gt;
&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when count is set to 0 */&lt;/span&gt;
&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when count is set to negative number */&lt;/span&gt;

&lt;span class="c"&gt;/* [ Animation will be executed ] */&lt;/span&gt;
&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when count is set to positive number */&lt;/span&gt;
&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when count is set to rational number */&lt;/span&gt;
&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* when count is set to infinite */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#animationdirection"&gt;
  &lt;/a&gt;
  animation-direction
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;animation-direction&amp;gt;&lt;/code&gt; sets whether an animation should play forward, backward or alternate back and forth between playing the sequence forward and backward.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 순방향 재생 */&lt;/span&gt;
&lt;span class="nt"&gt;animation-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 역방향 재생 */&lt;/span&gt;
&lt;span class="nt"&gt;animation-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 순방향 시작, 순방향-역방향 번갈아 재생 */&lt;/span&gt;
&lt;span class="nt"&gt;animation-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;alternate-reverse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 역방향 시작, 역방향-순방향 번갈아 재생 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#animationtimingfunction"&gt;
  &lt;/a&gt;
  animation-timing-function
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;animation-timing-function&amp;gt;&lt;/code&gt; sets how an animation progresses through the duration of each cycle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;cubic-bazier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;cubic-bazier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ease-in&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;cubic-bazier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;42&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ease-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;cubic-bazier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;58&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ease-in-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;cubic-bazier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;42&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;58&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#animationplaystate"&gt;
  &lt;/a&gt;
  animation-play-state
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;animation-play-state&amp;gt;&lt;/code&gt; sets whether an animation is running or paused.&lt;/p&gt;

</description>
      <category>css</category>
      <category>animation</category>
      <category>keyframes</category>
      <category>perspective</category>
    </item>
    <item>
      <title>How To Make a Simple Calendar using HTML, CSS, and Javascript</title>
      <author>keshavs759</author>
      <pubDate>Wed, 10 Nov 2021 14:34:48 +0000</pubDate>
      <link>https://dev.to/keshavs759/how-to-make-a-simple-calendar-using-html-css-and-javascript-4d9b</link>
      <guid>https://dev.to/keshavs759/how-to-make-a-simple-calendar-using-html-css-and-javascript-4d9b</guid>
      <description>&lt;br&gt;
&lt;br&gt;


&lt;p&gt;In this article, we will learn how to make a simple calendar in HTML, CSS, and Javascript.&lt;span&gt;Html calendar &lt;/span&gt;is one of the widely used widgets in any website or blog. It is easy as well as tricky at the same time to make a calendar using HTML, CSS, and Javascript. We will understand the logic behind the javascript calendar using code and a video attached with this article.&lt;/p&gt;

&lt;p&gt;To make this calendar using HTML, CSS and Javascript first we used static values and then styled it. We add some javascript later to make it dynamic. The major role is played by the javascript date object  &lt;strong&gt;Date()&lt;/strong&gt; and its function like &lt;strong&gt;getDay()&lt;/strong&gt;, &lt;strong&gt;getFullYear()&lt;/strong&gt;, &lt;strong&gt;getMonth()&lt;/strong&gt; etc. The code for this project is self-explanatory. Comments are used to explain the code as per requirements. We recommend you to watch the video along with the code to understand it better&lt;/p&gt;

&lt;p&gt;The video to make javascript calendar is,&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3exzyIuvIHg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Following is the code to make a simple calendar using HTML, CSS, and javascript:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/_vidyasheela/embed/GRvxaeR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;



&lt;p&gt;Download Link- &lt;a href="https://vidyasheela.com/component/simple-calendar-for-blogs"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For similar widgets and websites components visit &lt;a href="https://vidyasheela.com/website-components.php"&gt;here&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Also Read:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-responsive-about-us-page-in-html-and-css"&gt;How To make Responsive About Us page in HTML and CSS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-resonsive-404-page-not-found-in-html-and-css"&gt;How to make a Responsive 404 page not found in HTML and CSS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-a-basic-login-form-and-registration-form-using-html-and-css"&gt;How to make a basic login form and registration form using HTML and CSS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/best-contact-us-page-html-template"&gt;Best Contact Us Page HTML Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/free-best-login-page-templates-written-in-html-css-and-js-"&gt;Free Best Login Page Templates (Written in HTML, CSS, and JS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;









</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Designers Can Prevent User Errors</title>
      <author>Jordan Bowman</author>
      <pubDate>Wed, 10 Nov 2021 14:23:12 +0000</pubDate>
      <link>https://dev.to/jrdnbwmn/how-designers-can-prevent-user-errors-5dpb</link>
      <guid>https://dev.to/jrdnbwmn/how-designers-can-prevent-user-errors-5dpb</guid>
      <description>&lt;p&gt;The term "user error" implies that it's the &lt;em&gt;user's&lt;/em&gt; fault when they do something wrong. &lt;/p&gt;

&lt;p&gt;But in the vast majority of cases, the fault actually rests with the designer for having created an interface that is confusing or makes it too easy for the user to make a mistake.&lt;/p&gt;

&lt;p&gt;The solution to user errors is not to blame the user or try to train the mistakes out of them. The solution is to redesign the product in such a way that it prevents errors from occurring in the first place.&lt;/p&gt;

&lt;p&gt;There are lots of practical ways to do this, and we're going to cover some of the most effective ones in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventing-errors"&gt;
  &lt;/a&gt;
  Preventing errors
&lt;/h2&gt;

&lt;p&gt;First, let's talk through some preemptive ways you can help users avoid &lt;a href="https://www.nngroup.com/articles/slips/"&gt;errors&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-guardrails"&gt;
  &lt;/a&gt;
  Install guardrails
&lt;/h3&gt;

&lt;p&gt;Provide helpful constraints so that users can't make a wrong choice. It's not always a good idea to limit options for a user, but when there are clear rules for what works and what doesn't it's good to have guardrails in place to prevent mistakes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Phone number or credit card fields that don't allow alphabetic characters. Airline sites that don't allow you to pick a return date that falls before your departure date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#offer-suggestions"&gt;
  &lt;/a&gt;
  Offer suggestions
&lt;/h3&gt;

&lt;p&gt;Like constraints, suggestions can guide the user toward the correct use of your product. They can help avoid accidental errors, find what they want, and remember what options are available.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Google search results offering suggestions for spelling errors. Uber showing recent locations as possible destinations. Autocomplete with contextual suggestions while the user types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#choose-smart-defaults"&gt;
  &lt;/a&gt;
  Choose smart defaults
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://uxtools.co/blog/the-psychology-of-user-decisions/#optimize-the-default-experience"&gt;Good defaults&lt;/a&gt; are helpful because they teach users what a reasonable value would be for the given input. Pre-populating fields with the most common value or a personalized one provides context and helps them see when they're on the wrong track.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Using geolocation to determine what the likely departure location is on a flights app. Presets like &lt;span&gt;Tomorrow&lt;/span&gt; or &lt;span&gt;Next Week&lt;/span&gt; in a reminders app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#follow-conventions"&gt;
  &lt;/a&gt;
  Follow conventions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/videos/jakobs-law-internet-ux/"&gt;Jakob’s Law&lt;/a&gt; says “users spend most of their time on &lt;em&gt;other&lt;/em&gt; websites.” Your users have been trained by thousands of other sites and apps to expect things to work in a certain way. Not following these recognizable patterns often leads to errors.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Placing &lt;a href="https://uxtools.co/blog/ux-design-for-navigation-menus/"&gt;navigation menus&lt;/a&gt; in standardized places. Adapting content to typical &lt;a href="https://www.nngroup.com/articles/how-people-read-online/"&gt;scanning patterns&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#make-actions-clear"&gt;
  &lt;/a&gt;
  Make actions clear
&lt;/h3&gt;

&lt;p&gt;Your design should communicate how it can be used. That means that any &lt;em&gt;affordances&lt;/em&gt;—ways in which you can interact with the interface, like pushing a button—should have indications of how they can be used. If that isn't clear, users may make mistakes trying to interact with it, or skip it entirely.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Explanatory labels on form fields. Links and buttons that look distinct and clickable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#preview-results"&gt;
  &lt;/a&gt;
  Preview results
&lt;/h3&gt;

&lt;p&gt;Users might sometimes be unaware of the full impact of actions they're making. Letting them review what their changes will look like helps them see into the future and solve their own problems before they happen. This also allows them to play around and experiment without actually breaking anything.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Previewing an email before sending it out, or a blog post before publishing, or a page before printing. iOS showing you a preview of zoom settings before you submit the changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#give-realtime-warnings"&gt;
  &lt;/a&gt;
  Give real-time warnings
&lt;/h3&gt;

&lt;p&gt;Giving subtle, contextual warnings while a user is actively making an error can help them to quickly and accurately correct it. Install these warnings in areas where you know users are likely to make mistakes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Red highlights and negative numbers on Twitter when you've surpassed the character limit. MailChimp showing you whether or not you've met each password requirement with a checkmark as you're typing a new password.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#confirm-highstakes-actions"&gt;
  &lt;/a&gt;
  Confirm high-stakes actions
&lt;/h3&gt;

&lt;p&gt;A confirmation dialogue is a straightforward way to give the user a chance to pause and double-check their action. Keep in mind, though, that these confirmations disrupt a user's workflow; if they get asked "Do you really want to do that?" after every decision, the user will get annoyed and (worse) will eventually ignore these dialogues altogether. So only use confirmations on dangerous or destructive actions like deleting important information or assets.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Facebook double checking with the user before permanently deleting a conversation from Messenger. Gmail asking you if you want to include an attachment when your message mentions it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-to-do-when-a-mistake-happens"&gt;
  &lt;/a&gt;
  What to do when a mistake happens
&lt;/h2&gt;

&lt;p&gt;No matter how much you try to prevent it, users &lt;em&gt;will&lt;/em&gt; still make &lt;a href="https://www.nngroup.com/articles/user-mistakes/"&gt;mistakes&lt;/a&gt;. Our job as the designer is to provide a safety net to make errors less costly and to try to prevent the user from making the same mistake again in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-undo"&gt;
  &lt;/a&gt;
  Support undo
&lt;/h3&gt;

&lt;p&gt;Being able to undo recent actions is helpful and satisfying for users. This is a direct counter to errors and makes the user more confident since they know a mistake can easily be fixed. Note that features like a trash can also work like an undo because they allow you to revert changes by retrieving deleted items.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Email clients with the ability to undo sending an email. Multi-level undo actions in document apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#provide-error-feedback"&gt;
  &lt;/a&gt;
  Provide error feedback
&lt;/h3&gt;

&lt;p&gt;Clearly communicating the error is essential if you want to educate the user about what happened, what they can do about it, and how to avoid it in the future. A good error message will also the mistake seem less like a failure on the user's part and more like a cue for adjustment. Be friendly, positive, engaging, and helpful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Examples: Understandable inline form validation. A useful 404 page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#design-practices-to-implement"&gt;
  &lt;/a&gt;
  Design practices to implement
&lt;/h2&gt;

&lt;p&gt;Following these practices helps you figure out where users are likely to make mistakes and plan ahead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-user-testing"&gt;
  &lt;/a&gt;
  Do user testing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://uxtools.co/blog/best-ux-research-methods-in-a-pinch/#2-usability-test"&gt;User tests&lt;/a&gt; are the most reliable way to reveal obstacles, problems, and disconnects between &lt;a href="https://www.nngroup.com/articles/mental-models/"&gt;mental models&lt;/a&gt;. Set a user on a task, and it'll become immediately obvious when they struggle, fail, or get frustrated. Then you can either plan error prevention measures or (better yet) fix the design itself to help them avoid these mistakes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#utilize-metrics"&gt;
  &lt;/a&gt;
  Utilize metrics
&lt;/h3&gt;

&lt;p&gt;Metrics can be a cost-effective way of figuring out where your users are running into issues. Where are your users bouncing? Where are they spending unusual amounts of time? At what point are they leaving a workflow? Record the answers and utilize all the tactics above to prevent errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tying-it-off"&gt;
  &lt;/a&gt;
  Tying it off
&lt;/h2&gt;

&lt;p&gt;You may have noticed that most of these things also lift the general level of UX across the product. For example, offering suggestions helps the user get to results faster, previewing results allows for more user experimentation, and performing user tests reveals more than just error-prone areas.&lt;/p&gt;

&lt;p&gt;Try applying these principles in your next UX project and see if it makes a noticeable difference.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://uxtools.co/blog/how-designers-can-prevent-user-errors/"&gt;Originally published on uxtools.co&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9D0bpxg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1365410146453753859/Zhn32fxX_normal.jpg" alt="UX Tools profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        UX Tools
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @uxtoolsco
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How designers can prevent user errors:
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:05 PM - 10 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458420665401298944" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458420665401298944" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458420665401298944" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>ux</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>What is Data Lineage and How Can It Ensure Data Quality?</title>
      <author>Michael Bogan</author>
      <pubDate>Wed, 10 Nov 2021 14:15:02 +0000</pubDate>
      <link>https://dev.to/mbogan/what-is-data-lineage-and-how-can-it-ensure-data-quality-4bk0</link>
      <guid>https://dev.to/mbogan/what-is-data-lineage-and-how-can-it-ensure-data-quality-4bk0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Are you spending too much time tracking down bugs for your C-level dashboards? Are different teams struggling to align on what data is needed throughout the organization? Or are you struggling with getting a handle on what the impact of a potential migration could be?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data lineage&lt;/strong&gt; could be the answer you need for data quality issues. By improving data traceability and visibility, a data lineage system can improve data quality across your whole data stack and simplify the task of communicating about the data that your organization depends on.&lt;/p&gt;

&lt;p&gt;Hold on though—what exactly &lt;em&gt;is&lt;/em&gt; data lineage?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-data-lineage"&gt;
  &lt;/a&gt;
  What is Data Lineage?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Data lineage&lt;/strong&gt; is a representation of the flow of data through different systems and transformations. &lt;strong&gt;In a modern data stack, data is not stored solely in application databases&lt;/strong&gt;; this data flows from one application to another and from application databases to data warehouses, where it gets transformed and eventually consumed by any number of reporting tools and other downstream applications. &lt;/p&gt;

&lt;p&gt;This flow of data allows each system to access data in a format that makes sense for it. The source applications can optimize towards improving the performance of read-write transactions. At the same time, reporting clients can access denormalized data which is convenient for querying.&lt;/p&gt;

&lt;p&gt;Unfortunately, this convenience comes &lt;strong&gt;at the cost of traceability and visibility&lt;/strong&gt;. Once the data leaves the source database and undergoes any number of transformations, an additional layer has been added which can obscure the underlying data. Reporting teams often struggle to understand where their data is coming from or determining the right data to use for a given report. When they ask the application team, the team might tell them that the data doesn’t exist, as—after going through the transformation process—the terms used to refer to a piece of data have changed. &lt;/p&gt;

&lt;p&gt;Additionally, solving any bugs or problems takes longer and requires the involvement of three teams: the reporting team, the data warehouse team, and the application team. Typically, the burden of solving the issue falls onto the data team, who then need to dig through version control to try and understand why the problem arose in the first place. This slows down the development of new reports as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data lineage&lt;/strong&gt; solves these issues. Let’s discuss how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-data-lineage"&gt;
  &lt;/a&gt;
  Why use Data Lineage?
&lt;/h2&gt;

&lt;p&gt;By providing a clear representation of the flow of data, a data lineage system essentially allows you to have your cake and eat it too. You can have &lt;em&gt;both&lt;/em&gt; the separation of roles &lt;em&gt;and&lt;/em&gt; the performance of a data warehouse while still having &lt;strong&gt;clear data understanding and traceability&lt;/strong&gt; across all your systems and teams.&lt;/p&gt;

&lt;p&gt;Clear data understanding and traceability allow you to trace important data across the system. For example, this can allow you to verify that no personally identifiable information (PII) is leaving the application systems and being consumed where it should not be. It also allows you to see what data is frequently consumed downstream, giving visibility into the impact of any potential changes or migrations. Similarly, you can identify any unused information, allowing simple cleanup of unused tables or columns.&lt;/p&gt;

&lt;p&gt;By increasing data understanding, data lineage systems reduce incident response times and improve team communication. Instead of confused discussions about where a piece of data in a report comes from, the data lineage system makes it clear to all parties where the data comes from and how it is consumed. This speeds up both resolution of any errors and new development.&lt;/p&gt;

&lt;p&gt;Now that we know why data lineage is critical for the modern data stack, let’s look at the various types of data lineage systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-data-lineage"&gt;
  &lt;/a&gt;
  Types of Data Lineage
&lt;/h2&gt;

&lt;p&gt;There are two main categories of data lineage systems: &lt;strong&gt;active&lt;/strong&gt; and &lt;strong&gt;passive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;active&lt;/strong&gt; data lineage system is “active” because you must create it yourself. This is done by programming the relevant source and transformation information into the system or tagging your data with the appropriate metadata. One example of an active system is &lt;a href="https://atlas.apache.org/"&gt;Apache Atlas&lt;/a&gt;. A properly configured active data lineage system can provide traceability for your data to a very fine degree of detail. However, in order to gain those benefits, constant updating and maintenance are required. This adds complexity to your overall data infrastructure and can be time-consuming.&lt;/p&gt;

&lt;p&gt;In contrast, a &lt;strong&gt;passive&lt;/strong&gt; data lineage system attempts to understand your data on its own. Some passive systems look at the data coming from the data warehouse. Through &lt;strong&gt;pattern recognition&lt;/strong&gt;, a passive system attempts to recognize where that data is coming from and how it is being transformed. While this can work well for simpler data sets and transformations, it is inexact and can generate inaccurate results.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;parsing-based&lt;/strong&gt; system is another kind of passive data lineage system which generates lineage data by reverse-engineering your data warehouse. Rather than entering in the lineage data manually (active systems) or guessing based on data patterns (pattern recognition), a parsing-based data lineage system can see exactly where the data came from and how it is being consumed. &lt;a href="https://www.datafold.com/"&gt;Datafold&lt;/a&gt; is an example of this type of system. Datafold analyzes all the DQL code in your data warehouse and generates &lt;strong&gt;column-level lineage&lt;/strong&gt; graphs. This is significantly more detailed than table-level lineage and allows you to see exactly which column a given piece of data is sourced from and where it is consumed. This level of detail leads to improved outage response time, allows for faster troubleshooting, and decreases the frequency of breaking changes making it to production.&lt;/p&gt;

&lt;p&gt;With numerous &lt;a href="https://docs.datafold.com/integrations/data-warehouses"&gt;data warehouse integrations&lt;/a&gt;, Datafold is plug-and-play for many, and the generated lineage data is also accessible through the &lt;a href="https://docs.datafold.com/developer/datafold-api"&gt;Datafold API&lt;/a&gt;. As long as it has support for your data warehouse and related systems, a parsing-based data lineage system is the easy choice from an implementation and maintenance standpoint.&lt;/p&gt;

&lt;p&gt;This is all great, but what difference does data lineage make to my day-to-day? Let’s look at that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-data-lineage-ensure-daytoday-data-quality"&gt;
  &lt;/a&gt;
  How can Data Lineage Ensure Day-to-day Data Quality?
&lt;/h2&gt;

&lt;p&gt;The improved visibility and traceability from a data lineage system has (at least!) three clear effects on your operational day-to-day. &lt;/p&gt;

&lt;p&gt;First, it &lt;strong&gt;improves your team response time&lt;/strong&gt;. Investigating the cause of an error in a report no longer requires hours and the coordination of several separate teams. With full visibility into the flow of data across your entire data stack, errors can be investigated and resolved in record time.&lt;/p&gt;

&lt;p&gt;Second, it allows for the creation and maintenance of a &lt;strong&gt;common data vocabulary&lt;/strong&gt;. When the report team talks about views, it is clear to the application team what that means and where that data comes from. Similarly, the application team can now see exactly what data is being aggregated for that dashboard which informs all the company decisions and outlook. Over time, discrepancies in terminology can be mitigated or removed, allowing for smoother communication across the organization.&lt;/p&gt;

&lt;p&gt;Finally, the data lineage system allows teams to easily and effectively &lt;strong&gt;anticipate the effects of any potential changes or migrations&lt;/strong&gt;. Data schema changes and migrations can be planned out with certainty. Full traceability makes it easy to understand the downstream impact of any changes and to notify the appropriate parties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;In this article, we covered the basics of what data lineage is, why you might want to use one, the different types of data lineage, and how data lineage can improve your data quality each day. The addition of a data lineage system to your data stack can increase transparency and prevent headaches for your entire organization.&lt;/p&gt;

</description>
      <category>database</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
