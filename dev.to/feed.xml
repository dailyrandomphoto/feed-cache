<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My First PR in GIT-HUB</title>
      <author>| pro._.gramer |</author>
      <pubDate>Tue, 25 May 2021 03:52:20 +0000</pubDate>
      <link>https://dev.to/anushree71199/my-first-pr-in-git-hub-3lja</link>
      <guid>https://dev.to/anushree71199/my-first-pr-in-git-hub-3lja</guid>
      <description>&lt;p&gt;As a beginner every coder wonders " How should I start with Open Source? " and not a while ago I started learning about Open Source Fundamentals, guess what in these last few weeks I have more than 10 PRs merged in a JavaScript Project. I know it's not much right now but in my opinion Learning and Exploring are two things that are never going to be enough for a Passionate Coders. Wait till the end and find out how a noob coder made it to the world of contributions&lt;/p&gt;

&lt;p&gt;Reading this title you must be wondering what is this post about? So let me tell you I am going to talk about how to use GitHub effectively.&lt;/p&gt;

&lt;p&gt;Wait, what is GitHub? Aren't we suppose to cover that part first. So let me break it to you as simple as possible GitHub is like a place where you can help the coding community by contributing your valuable knowledge about specific skills. Technically speaking GitHub is a code hosting platform for version control and you can also collaborate on other projects by making valuable points about your changes, it lets you and others work together on projects from anywhere. &lt;/p&gt;

&lt;p&gt;If you are still looking for a simpler explanation check out my other post on &lt;a href="https://dev.to/anushree71199/explaining-git-to-a-10-years-old-5839"&gt;Explaining git to a 10 years old&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-dont-have-a-github-account-make-one-asap"&gt;
  &lt;/a&gt;
  If you don't have a GitHub account make one ASAP.
&lt;/h3&gt;

&lt;p&gt;As I said earlier GitHub is a code hosting platform so it needs some line of commands for you to learn and you should know how to use terminal(for linux), git-bash(for windows) to host your code on GitHub. If you need a post on that I can make you guys a cheat sheet for all the git commands that are used way too much along-with some solved errors.&lt;/p&gt;

&lt;p&gt;While using GitHub on your level and making it as effective as possible, I honestly came through many hurdles. But I tackled them by figuring them out on my own. Let's talk about when you open any other person's repository(just like there are files and folders in windows, repositories are files and folders for GitHub) what are your thoughts about that repository? If you think that you can make that repository look more better and it will help someone learn something new then you are at the right path. &lt;/p&gt;

&lt;p&gt;Firstly you should open up an Issue and tell the maintainer of that repository about the changes you are about to make so that if he finds it good enough you'll become an assignee, once you get that assignee label you can simply follow these steps and make your first PR:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork that repository make it your own git-hub's profile repository then save it on your local host using: 
&lt;code&gt;git clone your_own_link_of_the_repository&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Work on that first locally i.e on your local system by creating your own branch for that repository using:
&lt;code&gt;git checkout -b branch_name&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Make your changes then add them locally using:
&lt;code&gt;git add .&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Commit to all the changes by using:
`git commit -m "relevant message"
Here relevant message means:&lt;/li&gt;
&lt;li&gt;feat- added a new feature &lt;/li&gt;
&lt;li&gt;fix- fixed a bug &lt;/li&gt;
&lt;li&gt;test- everything related to testing &lt;/li&gt;
&lt;li&gt;refactor- change of code not any bug fixes or adding a new feat&lt;/li&gt;
&lt;li&gt;docs- updation in docs&lt;/li&gt;
&lt;li&gt;style- related to styling, designing &lt;/li&gt;
&lt;li&gt;chore- updating in build tasks, package manager, configurations related.&lt;/li&gt;
&lt;li&gt;After doing all these steps push your specific branch remotely i.e push it on your GitHub repository of the project using: 
&lt;code&gt;git push origin branch_name&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After pushing the branch make your first PR by clicking on the button "compare and create pull request". Well this is a tough part but I got you, here is a template you can use to describe the things&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Related Issue
  - Name of the issue for which you created this project

Closes: #[Issue Number]

### Describe the changes you've made
A brief description of all the changes that you made keep it short and brief but interesting.

### Describe if there is any unusual behaviour of your code(Write `NA` if there isn't)
If your projects has some sort of malfunctioning then mention them here. For example if your project as a web page is not responsive then describe that here.

### Checklist:

Example how to mark a checkbox:-
[x] My code follows the code style of this project.

- [ ] My code follows the style guidelines of this project.
- [ ] I have performed a self-review of my own code.
- [ ] I have commented my code, particularly in hard-to-understand areas.
- [ ] I have made corresponding changes to the documentation.
- [ ] New and existing unit tests pass locally with my changes.

### Screenshots
Put any screenshot(s) of the project here.

Showing your project's snap will make it more obvious that you performed all this on your own and its your idea to improvise that specific repository
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now the last tip from my side is when it's your first time here you are not recognised basically cause you don't have a network yet and no-one is willing to even see your projects, that's heart breaking but don't worry I'll tell you what participate in competitions like Hacktober fest, GirlScript Summer of Code, Cross Winter of Code. I've done all my contributions because of the help these platforms provided to noob coders like us. I've participated in these competitions and hopefully I did well. &lt;/p&gt;

&lt;p&gt;So let's not loose hope and try doing contributions as long as you can then someday you'll fall in love with Open Source Contributions. I would love to read your story someday :)&lt;/p&gt;

&lt;p&gt;Keep coding and Stay safe 💜&lt;/p&gt;

</description>
      <category>github</category>
      <category>bash</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Scrapping LINE stickers with Golang</title>
      <author>Jonathan Law</author>
      <pubDate>Tue, 25 May 2021 01:01:37 +0000</pubDate>
      <link>https://dev.to/jonathanlawhh/scrapping-line-stickers-with-golang-1437</link>
      <guid>https://dev.to/jonathanlawhh/scrapping-line-stickers-with-golang-1437</guid>
      <description>&lt;p&gt;Let's start by agreeing that Whatsapp does not have great stickers, but LINE does. For the people who have no idea what is LINE, or wonder what is so great about their stickers, &lt;a href="https://store.line.me/stickershop/product/17300/en"&gt;check one out here&lt;/a&gt;. Apart from that, this project would be useful for scrapping information if you are in that field.&lt;/p&gt;

&lt;p&gt;Here is the code at my &lt;a href="https://github.com/jonathanlawhh/line-sticker-downloader"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scrapping-web"&gt;
  &lt;/a&gt;
  Scrapping web
&lt;/h1&gt;

&lt;p&gt;Most of us know that there are great libraries in Python such as BeautifulSoup/bs4 and Selenium, Chrome extensions that can download all the media on a specific page, and I would encourage the use of these popular approaches.&lt;/p&gt;

&lt;p&gt;However today, the challenge of this project is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do it without a library&lt;/li&gt;
&lt;li&gt;Attempt to achieve concurrency/async (Downloading multiple stickers at once without waiting)&lt;/li&gt;
&lt;li&gt;(Optional) Package it so our non technical friends can use it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does it means to download it concurrently/async? It means we are not going to wait for one sticker to download and convert finish, then only proceed to the next one. &lt;br&gt;
Just like in school, the teacher (Madam Choo) will just give everyone available in the classroom one task to complete, while Madam Choo sits and wait for everyone to complete their own task and hand it back to her. On a normal program, Madam Choo would give one student a task, wait for that student to complete then only she will hand out the second task. In most cases this works fine, since that one student is good at what he is doing, however Madam Choo realizes she has a class of 12 students doing nothing all the while. If she could hand out the task for all 12 students (threads), her task would be completed quicker. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#why-golang"&gt;
  &lt;/a&gt;
  Why Golang
&lt;/h1&gt;

&lt;p&gt;Truth is it can be completed just with any other programming languages [NodeJS, C++, Python...]. So really there should not be any debate about this, but purely just for entertainment and learning purposes :)&lt;/p&gt;

&lt;p&gt;However what made Golang stand out from the rest would be the ability to achieve the 2nd and 3rd point easily. More importantly, Golang is built for Madam Choo to easily assign all her students a task at the same time.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#speedrun-tutorial"&gt;
  &lt;/a&gt;
  Speedrun tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rml111LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oztk6nb56os8zdrv4kc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rml111LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oztk6nb56os8zdrv4kc.gif" alt="Speedrun"&gt;&lt;/a&gt;&lt;br&gt;
Here is the code at my &lt;a href="https://github.com/jonathanlawhh/line-sticker-downloader"&gt;Github repo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-our-target"&gt;
  &lt;/a&gt;
  Understanding our target
&lt;/h2&gt;

&lt;p&gt;Before we start, we will need to understand a few things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our sticker shop is fortunately not client rendered with Javascript, so a basic curl will get all the required information without waiting for AJAX calls.&lt;/li&gt;
&lt;li&gt;We can parse through HTML tags and get the stickers we need, however we noticed that each sticker &lt;strong&gt;raw&lt;/strong&gt; information is in a custom HTML attribute called &lt;code&gt;data-preview='{}'&lt;/code&gt; . This allows us to parse that information as a JSON format.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;data-preview="{ "type" : "popup_sound", "id" : "312149456", "staticUrl" : "https://stickershop.line-scdn.net/stickershop/v1/sticker/312149456/iPhone/sticker@2x.png;compress=true", "fallbackStaticUrl" : "https://stickershop.line-scdn.net/stickershop/v1/sticker/312149456/iPhone/sticker@2x.png;compress=true", "animationUrl" : "", "popupUrl" : "https://stickershop.line-scdn.net/stickershop/v1/sticker/312149456/android/sticker_popup.png;compress=true", "soundUrl" : "https://stickershop.line-scdn.net/stickershop/v1/sticker/312149456/android/sticker_sound.m4a" }"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Images are in APNG (Animated PNG) format. We will need a GIF version of that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that set, lets start&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#start"&gt;
  &lt;/a&gt;
  Start
&lt;/h2&gt;

&lt;p&gt;1/ First we create an entry point that takes in a URL&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Entrypoint&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;consoleReader&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bufio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter Line Stickershop URL"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;inputUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;consoleReader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Check if input has at least a line store format&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"https://store.line.me"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;inputUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Invalid format"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2/ Then we create a scrap function, which uses built in http library to download the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3/ Once the download is completed, we will parse the body of the downloaded webpage. Remember we said that the raw information can be found in a custom attribute called &lt;code&gt;data-preview&lt;/code&gt;, without going too complicated, a regex call will be able to extract each occurrence if that attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rgx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`(data-preview='.*?')`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tmpExtracted&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rgx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindAllStringSubmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputHtml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpExtracted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c"&gt;// Parse the JSON here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4/ Before parsing the JSON, let us create a struct based on the needed information we have from data preview attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;DataPreview&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt;           &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
    &lt;span class="n"&gt;StickerType&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"type"`&lt;/span&gt;
    &lt;span class="n"&gt;PopupUrl&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"popupUrl"`&lt;/span&gt;
    &lt;span class="n"&gt;StaticUrl&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"staticUrl"`&lt;/span&gt;
    &lt;span class="n"&gt;AnimationUrl&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"animationUrl"`&lt;/span&gt;
    &lt;span class="n"&gt;SoundUrl&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"soundUrl"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5/ Great, now we just unmarshall the JSON into the DataPreview struct. &lt;/p&gt;

&lt;p&gt;6/ Next is to create a function to download the stickers concurrently. With Golang, this could be as easy as a few lines&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;downloadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;WaitGroup basically just tells Madam Choo how many students has she assigned the task to.&lt;/p&gt;

&lt;p&gt;7/ We know that There are 3 Url where we can use, PopupUrl for &lt;a href="https://store.line.me/stickershop/product/17300/en"&gt;big animated stickers&lt;/a&gt;, StaticUrl for &lt;a href="https://store.line.me/stickershop/product/2803/en"&gt;stickers that do not move&lt;/a&gt; and AnimationUrl for &lt;a href="https://store.line.me/stickershop/product/19770/en"&gt;normal sized stickers that are animated&lt;/a&gt;. Building a simple switch rule will help us identify which URL we should grab, and then again using HTTP library to download the GIF.&lt;/p&gt;

&lt;p&gt;8/ After downloading the GIF, I am using &lt;a href="https://sourceforge.net/projects/apng2gif/"&gt;APNG2GIF&lt;/a&gt; to convert the APNG to GIF. This is not the most ideal solution, but definitely the easiest.&lt;/p&gt;

&lt;p&gt;9/ Before we proceed asking for another URL from the user, Madam Choo wants to wait for all the students to complete their work.&lt;br&gt;
We need to add this into the async function to inform Madam Choo that its work is done&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Madam Choo will have to wait for everyone's work to be completed, before continuing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;10/ And basically we are done! We can quickly package it for Windows and send the compiled binary to our friends just by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go build main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#final"&gt;
  &lt;/a&gt;
  Final
&lt;/h1&gt;

&lt;p&gt;There you go, a quick program to scrap GIF for your pleasure. Although it may seem like a trivial thing to do, it makes a big difference when you are into gathering data for ML trainings or mass scrapping. The difference with and without async does affect the time it takes to achieve our goal at a scale.&lt;/p&gt;

&lt;p&gt;Thanks for reading up to here, hope you enjoyed this post!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>go</category>
      <category>rpa</category>
    </item>
    <item>
      <title>Perl Lists - a Partial Taxonomy</title>
      <author>Matthew O. Persico</author>
      <pubDate>Tue, 25 May 2021 00:58:54 +0000</pubDate>
      <link>https://dev.to/matthewpersico/perl-lists-a-partial-taxonomy-g8p</link>
      <guid>https://dev.to/matthewpersico/perl-lists-a-partial-taxonomy-g8p</guid>
      <description>&lt;p&gt;&lt;a href="https://phoenixtrap.com/"&gt;Mark Garder&lt;/a&gt; recently published the article &lt;a href="https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/"&gt;A list of Perl list processing modules&lt;/a&gt;, a detailed and factual, unopinionated listing of eight Perl modules that manipulate lists. So, naturally, when his factual, unopinionated listing was cross posted to &lt;a href="https://www.reddit.com/r/perl/comments/nfbhvt/a_list_of_perl_list_processing_modules/"&gt;Redit&lt;/a&gt;, the first comment was the emotional, highly opinionated: &lt;a href="https://www.reddit.com/r/perl/comments/nfbhvt/a_list_of_perl_list_processing_modules/gylv4co?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3"&gt;“So how do we go about fixing this mess? Because it is a mess.”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, the comment was mine.&lt;/p&gt;

&lt;p&gt;My intent was to see if we could create &lt;em&gt;One List:: To Rule Them All&lt;/em&gt;. Not only does it confuse people who want to learn Perl to have various list functions in different modules (and to have functions that share a name across modules work differently), but it also confuses Perl veterans. &lt;/p&gt;

&lt;p&gt;And yes, once again, that’s me.&lt;/p&gt;

&lt;p&gt;After some consideration, some education and a conversation with the &lt;a href="https://metacpan.org/author/PEVANS"&gt;current maintainer&lt;/a&gt; of &lt;a href="https://metacpan.org/pod/List::Util"&gt;List::Util&lt;/a&gt;, the module of list functions that come with Perl itself, it seemed to me that the first order of operations was to detail just how much of a “mess” this was. So, on Sunday afternoon, while waiting to go to the airport to pick up my son, and while watching Phil Mickelson winning the PGA championship at a record 50 years old, I put together the following spreadsheet:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/spreadsheets/d/11gI89kOJvm5b30jEWrLaL0D77sZnPKMhMeAP5WcFnzs/"&gt;https://docs.google.com/spreadsheets/d/11gI89kOJvm5b30jEWrLaL0D77sZnPKMhMeAP5WcFnzs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that this can serve a as reference for people to see what's available and where it is available. Yes, it may not have a long shelf life,  but I learned a bit more about the state of the &lt;code&gt;List::&lt;/code&gt; namespace. Hopefully, you'll learn a bit too.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>lists</category>
      <category>arrays</category>
      <category>hashes</category>
    </item>
    <item>
      <title>JavaScript Inheritance: the Dark Arts</title>
      <author>Nick Kelly</author>
      <pubDate>Tue, 25 May 2021 00:42:22 +0000</pubDate>
      <link>https://dev.to/nickkelly314/javascript-inheritance-the-dark-arts-1bh1</link>
      <guid>https://dev.to/nickkelly314/javascript-inheritance-the-dark-arts-1bh1</guid>
      <description>&lt;p&gt;Inheritance remains one of the most relied upon and misunderstood features of JavaScript to this day. Since ES2015 JavaScript developers have been able to ignore how the inheritance sausage is made by relying on the &lt;code&gt;class&lt;/code&gt; syntax that hides the nitty gritty details, until they run into its mind-bending edge cases.&lt;/p&gt;

&lt;p&gt;In this post we'll explore the secrets of JavaScript inheritance: &lt;code&gt;[[Prototype]]&lt;/code&gt; and constructors.&lt;/p&gt;

&lt;p&gt;But first, put your knowledge to the test:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-can-you-get-right"&gt;
  &lt;/a&gt;
  How many can you get right?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-overriding-getters-and-setters"&gt;
  &lt;/a&gt;
  1. Overriding getters and setters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Overriding getters and setters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SuperClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;SuperClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-deleting-from-a-class-instance"&gt;
  &lt;/a&gt;
  2. Deleting from a class instance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deleting from a class instance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// fn2() {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-deleting-from-an-object"&gt;
  &lt;/a&gt;
  3. Deleting from an object
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deleting from an object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// toString() {}&lt;/span&gt;
&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// toString() { [native code] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-overriding-constructors"&gt;
  &lt;/a&gt;
  4. Overriding constructors???
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Original Consturctor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Overridden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Overridden Constructor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "Original Constructor"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Overridden&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you got all of the above right then maybe you're already grizzled JavaScript veteran and know all the ins and outs of OOJS (Object Oriented JavaScript).&lt;/p&gt;

&lt;p&gt;For the rest of us, it's time to open Pandora's Box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;p&gt;In OOP (Object Oriented Programming), inheritance is the mechanism used build a new object or class ontop another object or class.&lt;/p&gt;

&lt;p&gt;JavaScript has inheritance but doesn't have "classes" like most other OO languages. Instead, JavaScript links objects together by &lt;a href="https://en.wikipedia.org/wiki/Prototype-based_programming"&gt;prototypes&lt;/a&gt;. Even in ES2015, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt; is mostly just syntactic sugar for objects with prototypal relationships.&lt;/p&gt;

&lt;p&gt;At a glance, OOJS using &lt;code&gt;class&lt;/code&gt; appears sane.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Sub&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// sub has access to properties on base&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// "hello world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But how does this really work? What is a "class" and how does &lt;code&gt;sub&lt;/code&gt; have access to &lt;code&gt;prop&lt;/code&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-prototype"&gt;
  &lt;/a&gt;
  Enter: [[Prototype]]
&lt;/h2&gt;

&lt;p&gt;JavaScript uses &lt;code&gt;prototypes&lt;/code&gt; to achieve inheritance. All objects have a &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;a href="https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots"&gt;internal slot&lt;/a&gt; which is the object being inherited from. Internal slots are internal to the JavaScript interpreter. Some internal slots are exposed via functions like &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; and many aren't exposed at all.&lt;/p&gt;

&lt;p&gt;An object's &lt;code&gt;[[Prototype]]&lt;/code&gt; can be null or another object which itself has a &lt;code&gt;[[Prototye]]&lt;/code&gt; slot. An object's linked list of &lt;code&gt;[[Prototype]]&lt;/code&gt;s (i.e. &lt;code&gt;myObject.[[Prototype]].[[Prototype]].[[Prototype]]...&lt;/code&gt;) is called its "prototype chain" and terminates with null.&lt;/p&gt;

&lt;p&gt;To lookup a property on an object the JavaScript interpreter performs a lookup on the top-level object, then that object's &lt;code&gt;[[Prototype]]&lt;/code&gt;, then &lt;code&gt;[[Prototype]].[[Prototype]]&lt;/code&gt;, and so on until reaching &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"&gt;&lt;code&gt;Object.create(proto)&lt;/code&gt;&lt;/a&gt; to create a new object with &lt;code&gt;proto&lt;/code&gt; as its &lt;code&gt;[[Prototype]]&lt;/code&gt; and use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf"&gt;&lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt;&lt;/a&gt; to get the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object &lt;code&gt;obj&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ancestor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ancestor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// child inherits from parent&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="c1"&gt;// parent inherits from ancestor&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ancestor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="c1"&gt;// ancestor inherits nothing&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ancestor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"&gt;&lt;code&gt;Object.setPrototypeOf(sub, base)&lt;/code&gt;&lt;/a&gt; to change the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object &lt;code&gt;sub&lt;/code&gt; to another object (or &lt;code&gt;null&lt;/code&gt;), &lt;code&gt;base&lt;/code&gt;. Notice - unlike static OO languages we can dynamically change inheritance heirarchies at runtime! For performance reasons this is &lt;em&gt;strongly&lt;/em&gt; advised against. According to Benedikt Muerer of v8, &lt;a href="https://youtu.be/IFWulQnM5E0?t=1669"&gt;a every time you change the prototype chain, a kitten dies&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "hello world"&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Objects created using the object literal syntax &lt;code&gt;{}&lt;/code&gt; inherit from JavaScript's base &lt;code&gt;Object.prototype&lt;/code&gt; which in-turn inherits from &lt;code&gt;null&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;Functions are a regular JavaScript objects, but with additional &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-function-objects"&gt;internal slots&lt;/a&gt;. Like regular objects they have properties and a &lt;code&gt;[[Prototype]]&lt;/code&gt; internal slot, but unlike other objects they are callable thanks to a &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist"&gt;&lt;code&gt;[[Call]]&lt;/code&gt; internal method&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Constructors are functions with some specific attributes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-constructors"&gt;
  &lt;/a&gt;
  Enter: Constructors
&lt;/h2&gt;

&lt;p&gt;Constructor functions compliment prototypes by making prototype configuration and object creation and inialisation easy and consistent. Inheritance can still be achieved without constructors (for example with &lt;code&gt;Object.create&lt;/code&gt;) but it's less common.&lt;/p&gt;

&lt;p&gt;Any non-arrow function (any function created with the &lt;code&gt;function&lt;/code&gt; keyword) can be used as a constructor. All non-arrow functions have a &lt;code&gt;prototype&lt;/code&gt; property, initialized to a new object with only one property &lt;code&gt;prototype.constructor&lt;/code&gt; whose value is the constructor function. Note that a function's &lt;code&gt;prototype&lt;/code&gt; property is NOT the same as that functions &lt;code&gt;[[Prototype]]&lt;/code&gt; internal slot.&lt;/p&gt;

&lt;p&gt;Constructors have to be called with a the &lt;code&gt;new&lt;/code&gt; operator (unless being used within another constructor function for inheritance) for the &lt;code&gt;this&lt;/code&gt; variable to be created and bound correctly. The &lt;code&gt;this&lt;/code&gt; object's &lt;code&gt;[[Prototype]]&lt;/code&gt; is set to the constructors &lt;code&gt;prototype&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;It's good practice to begin constructor names with an uppercase character so you know to call them with &lt;code&gt;new&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { constructor: f }&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="c1"&gt;// i.e. instance.[[Prototype]] === Constructor.prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called with &lt;code&gt;new&lt;/code&gt;, construtors implicitly return their &lt;code&gt;this&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;this_ref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
  &lt;span class="nx"&gt;this_ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// implicitly returns `this`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;this_ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"classes" created with the ES2015 (e.g. &lt;code&gt;class MyClass {...}&lt;/code&gt;) are also simply constructor functions (&lt;code&gt;typeof MyClass === 'function'&lt;/code&gt;) but whose internal slots are configured differently, such as &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-function-objects"&gt;&lt;code&gt;[[IsClassConstructor]]&lt;/code&gt;&lt;/a&gt; that &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist"&gt;causes classes to throw&lt;/a&gt; a &lt;code&gt;TypeError&lt;/code&gt; if called without the &lt;code&gt;new&lt;/code&gt; operator, unlike constructor functions not created with the &lt;code&gt;class&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;Given that instances created with the &lt;code&gt;new&lt;/code&gt; operator inherit from their constructors &lt;code&gt;prototype&lt;/code&gt; property, we can create functions on the &lt;code&gt;prototype&lt;/code&gt; property that will be inherited by the instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// 'hello'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#es2015-classes-without-es2015-syntax"&gt;
  &lt;/a&gt;
  ES2015 classes without ES2015 syntax
&lt;/h2&gt;

&lt;p&gt;Now that we know about prototypes and constructors we can replicate the ES2015 class functionality with constructor functions and prototypes.&lt;/p&gt;

&lt;p&gt;Using constructor-prototype syntax we have enormous flexibility in how we glue together our objects at the price of having to glue them together manually.&lt;/p&gt;

&lt;p&gt;We can manually accomplish what the ES2015 &lt;code&gt;class&lt;/code&gt; syntax does for us by maintaining the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Instance prototype chain&lt;/strong&gt;: &lt;code&gt;SubClass.prototype.[[Prototype]]&lt;/code&gt; must be set to &lt;code&gt;SuperClass.prototype&lt;/code&gt;. This sets up the prototype chain of instances constructed from &lt;code&gt;new SubClass(...)&lt;/code&gt; such that:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;subclass_instance.[[Prototype]]&lt;/code&gt; === SubClass.prototype&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;subclass_instance.[[Prototype]][[Prototype]]&lt;/code&gt; === SuperClass.prototype&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;subclass_instance.[[Prototype]][[Prototype]][[Prototype]]&lt;/code&gt; === Object.prototype&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;subclass_instance.[[Prototype]][[Prototype]][[Prototype]][[Prototype]]&lt;/code&gt; === null&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Constructor prototype chain&lt;/strong&gt;: &lt;code&gt;SubClass.[[Prototype]]&lt;/code&gt; must be set to &lt;code&gt;SuperClass&lt;/code&gt;. This means the &lt;code&gt;SubClass&lt;/code&gt; function inherits "static" properties from &lt;code&gt;SuperClass&lt;/code&gt; (properties on the SuperClass constructor function) such that:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SuperClass.staticProperty = 5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SubClass.staticProperty === 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Initialisation&lt;/strong&gt;: When the &lt;code&gt;SubClass&lt;/code&gt; constructor is called with &lt;code&gt;new&lt;/code&gt;, it needs to immediately call the &lt;code&gt;SuperClass&lt;/code&gt; constructor function binding its &lt;code&gt;this&lt;/code&gt; value (&lt;code&gt;SuperClass.call(this, ...)&lt;/code&gt;), in order to initialise &lt;code&gt;SuperClass&lt;/code&gt; on &lt;code&gt;this&lt;/code&gt; properly.

&lt;ul&gt;
&lt;li&gt;The ES2015 &lt;code&gt;class&lt;/code&gt; syntax forces us to call the super constructor using &lt;code&gt;super()&lt;/code&gt; at the beginning of our subclasses constructor function, or else the interpreter will throw an error. This is not forced in constructor-prototype syntax so we need to remember it ourselves! Otherwise our class instances will not be properly initialised.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our object relations for the model described above are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bxfJKGlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8kt8sxonyarp72uqti7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxfJKGlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8kt8sxonyarp72uqti7.png" alt="Inheritance Relations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't be intimidated by the number of objects and connections - if you can grok the diagram then you can derive an understanding of everything relating OOJS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-super-endraw-problem"&gt;
  &lt;/a&gt;
  The &lt;code&gt;super&lt;/code&gt; Problem
&lt;/h2&gt;

&lt;p&gt;The only &lt;code&gt;class&lt;/code&gt; functionality we can't &lt;em&gt;exactly&lt;/em&gt; replicate with constructors and prototypes is &lt;code&gt;super&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AnotherBase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;AnotherBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
  &lt;span class="c1"&gt;// "super" call, hardcoded to `Base`&lt;/span&gt;
  &lt;span class="c1"&gt;// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
  &lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// sub&lt;/span&gt;
&lt;span class="c1"&gt;// base&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AnotherBase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AnotherBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// sub&lt;/span&gt;
&lt;span class="c1"&gt;// base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without referencing the superclass, &lt;code&gt;Base&lt;/code&gt;, directly we have no way to determine where the current method under invocation sits in the prototype chain, and therefore can't lookup functions that are strictly higher in the prototype chain (i.e. a &lt;code&gt;super&lt;/code&gt; call).&lt;/p&gt;

&lt;p&gt;By referencing &lt;code&gt;Base&lt;/code&gt; directly in an attempt to replicate &lt;code&gt;super&lt;/code&gt;, we've destroyed our ability to safely change the prototype since our "super" call would be referencing a function we no longer inherit.&lt;/p&gt;

&lt;p&gt;With ES2015, we have a &lt;code&gt;super&lt;/code&gt; keyword that still works when we reassign &lt;code&gt;[[Prototype]]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AnotherBase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Sub&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// sup&lt;/span&gt;
&lt;span class="c1"&gt;// base&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AnotherBase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AnotherBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// sup&lt;/span&gt;
&lt;span class="c1"&gt;// another base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pre-es2015-classes-by-example"&gt;
  &lt;/a&gt;
  Pre ES2015 classes by example
&lt;/h2&gt;

&lt;p&gt;We'll code a simple inheritance example of 2 classes: a superclass &lt;code&gt;Animal&lt;/code&gt; and subclass &lt;code&gt;Dog&lt;/code&gt; using the relations described above. Each inheritance layer has 3 associated objects: the constructor function, prototype object and instance object.&lt;/p&gt;

&lt;p&gt;Our domain is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqnS7q8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gund5bcr9lkw9zp9qcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqnS7q8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gund5bcr9lkw9zp9qcs.png" alt="Animal-Dog-Uml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript, our objects will be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bv4bw0Fw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/447js740nodh2tup6790.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bv4bw0Fw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/447js740nodh2tup6790.png" alt="Animal-Dog-Inheritance-Relations"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @constructor Animal
 * @abstract
 *
 * @param {number} legs
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;legs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Abstract static property on Animal constructor
 * to be overridden by a property the subclasses constructor
 *
 * @abstract
 * @static
 * @type {string}
 */&lt;/span&gt;
&lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;species&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * getter on the animal prototype that retrieves the static, overridden
 * property from the subclasses constructor, `species`
 * 
 * @readonly
 * @type {string}
 * 
 * @example
 * const dog = new Dog()
 * dog.species; // calls `Animal.prototype.species` -&amp;gt; `Dog.species`
 */&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;species&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/** @returns {string} */&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// alternatively, `const SubClass = this.constructor`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;species&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Method on the Animal prototype, inherited by animal instances and subclasses
 * of Animal
 *
 * @param {string} food
 */&lt;/span&gt;
&lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Yum! eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="cm"&gt;/**
 * @constructor Dog
 *
 * Subclass of Animal
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;legs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// we run the inherited constructor, bound to `this`, to initialise our superclass properly&lt;/span&gt;
  &lt;span class="c1"&gt;// this effectively "subtypes" `this` to an instance of the superclass (`this` becomes a superset of the superclasses instances type)&lt;/span&gt;

  &lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Inherit staticically from Animal&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Inherit prototype from Animal&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @override
 * @type {string}
 */&lt;/span&gt;
&lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;species&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Override the `eat` method from `Animal.prototype`
 * Also call the super method
 *
 * @override
 *
 * @param {*} food
 */&lt;/span&gt;
&lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Woof!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// super call!&lt;/span&gt;
  &lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chicken&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 'Woof!'&lt;/span&gt;
&lt;span class="c1"&gt;// 'Yum! eating chicken'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;species&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 'Dog'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#access-to-inherited-properties"&gt;
  &lt;/a&gt;
  Access to inherited properties
&lt;/h2&gt;

&lt;p&gt;One of the most important things to understand when working directly with prototypes is how accessors and operators propagate. Of the following actions, only the &lt;code&gt;get&lt;/code&gt; accessor propagates up the prototype chain.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;accessor or operator&lt;/th&gt;
&lt;th&gt;propagates up the prototype chain&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'hello'&lt;/span&gt;

&lt;span class="c1"&gt;// the `delete` operator does not propagate&lt;/span&gt;

&lt;span class="c1"&gt;// calling delete on `prop` can have no effect on objects in its prototype chain&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'hello'&lt;/span&gt;

&lt;span class="c1"&gt;// similarly, the `set` accessor does not propagate&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;different&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;something&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;else&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#who-cares"&gt;
  &lt;/a&gt;
  Who cares?
&lt;/h2&gt;

&lt;p&gt;Most JavaScript application developers don't need to know its inheritance mechanism in great detail. Some of JavaScript's most flexible features, including prototype hacking, are considered footgun's to be avoided. If you feel the need to hack a prototype chain you're probably better off finding another way.&lt;/p&gt;

&lt;p&gt;Knowing about prototypes is more important when working in the broader ecosystem with packages or tooling or when monkeypatching libraries (modifying prototypes of objects from third party libraries).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-typescript-fit-into-this"&gt;
  &lt;/a&gt;
  How does TypeScript fit into this?
&lt;/h2&gt;

&lt;p&gt;Unfortunately, like a square peg into a round hole.&lt;/p&gt;

&lt;p&gt;TypeScript doesn't attempt to model the fine details of OOJS. It doesn't differentiate between properties on a class instance and properties on a classes prototype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;instanceProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;prototypeProperty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instanceProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// TypeScript sees instances of MyClass as equivalent to:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyClassInstance&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;instanceProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;prototypeProperty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// properties of the prototype and instance are merged together&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, TypeScript doesn't even allow adding &lt;code&gt;new&lt;/code&gt; signature to a constructor function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyConstructor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;// Type '() =&amp;gt; void' is not assignable to type 'new () =&amp;gt; {}'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use TypeScript on constructor functions have to resort to the unsafe &lt;code&gt;as unknown&lt;/code&gt; hack. The language server also won't tell us when our prototype is missing properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyInstanceAndPrototype&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="nx"&gt;methodOnPrototype&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyConstructor&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;MyInstanceAndPrototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyInstanceAndPrototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyConstructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyConstructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;MyConstructor&lt;/span&gt;

&lt;span class="c1"&gt;// Forgot to add `MyConstructor.prototype.methodOnPrototype`?&lt;/span&gt;
&lt;span class="c1"&gt;// There won't be any TypeScript error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#revisiting-our-examples"&gt;
  &lt;/a&gt;
  Revisiting our examples
&lt;/h2&gt;

&lt;p&gt;With our understanding of prototypes, constructors and property access, we can revisit our and understand initial examples&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation-1-overriding-getters-and-setters"&gt;
  &lt;/a&gt;
  Explanation: 1. Overriding getters and setters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Overriding getters and setters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SuperClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;SuperClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What went wrong?&lt;/p&gt;

&lt;p&gt;Writing this in pre-ES2015 syntax we have something close to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Overriding getters and setters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SuperClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SuperClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_value&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SuperClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SuperClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we have both &lt;code&gt;SubClass.prototype.value&lt;/code&gt; and &lt;code&gt;SuperClass.prototype.vaue&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;SubClass.prototype.value&lt;/code&gt; overrides &lt;code&gt;SuperClass.prototype.value&lt;/code&gt;. &lt;code&gt;SubClass.prototype.value&lt;/code&gt; has a setter with NO GETTER!! When we read &lt;code&gt;sub.value&lt;/code&gt;, we accessing &lt;code&gt;SubClass.prototype.value&lt;/code&gt; which has no getter and a value of undefined by default, and therefore returns &lt;code&gt;undefined&lt;/code&gt;. We never reach &lt;code&gt;SuperClass.prototype.value&lt;/code&gt;! This issue once cost me 4 hours in debugging hell.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#explanation-2-deleting-from-a-class-instance"&gt;
  &lt;/a&gt;
  Explanation: 2. Deleting from a class instance
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deleting from a class instance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// fn2() {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Writing this in pre-ES2015 syntax we have something close to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deleting from a class instance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// fn2() {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that with &lt;code&gt;class&lt;/code&gt; syntax, setting &lt;code&gt;property = ...&lt;/code&gt; within the class body is roughly equivalent setting &lt;code&gt;this.property = ...&lt;/code&gt; within the classes constructor. It places the property on the class instances.&lt;/p&gt;

&lt;p&gt;Conversely, &lt;code&gt;fn2() {}&lt;/code&gt; within the class body adds that function to the classes prototype &lt;code&gt;MyClass.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The delete operator does not propagate up the prototype chain. Therefore we delete &lt;code&gt;fn1&lt;/code&gt; since its on the class instance, but not &lt;code&gt;fn2&lt;/code&gt; since it's on the class prototype.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation-3-deleting-from-an-object"&gt;
  &lt;/a&gt;
  Explanation: 3. Deleting from an object
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deleting from an object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// toString() {}&lt;/span&gt;
&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// toString() { [native code] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to 2., but now we have an object instance &lt;code&gt;myObject&lt;/code&gt; with two functions. All objects created with the literal syntax &lt;code&gt;{}&lt;/code&gt; have their &lt;code&gt;[[Prototype]]&lt;/code&gt; equal to &lt;code&gt;Object.prototype&lt;/code&gt;. &lt;code&gt;Object.prototype&lt;/code&gt; has a &lt;code&gt;toString&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In our example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we override &lt;code&gt;Object.prototype.toString&lt;/code&gt; in the assignment of &lt;code&gt;myObject&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;logging &lt;code&gt;myObject.toString&lt;/code&gt; prints our overridden copy, &lt;code&gt;toString() {}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;we set &lt;code&gt;myObject.toString = undefined&lt;/code&gt;, which continues to override &lt;code&gt;Object.prototype.toString&lt;/code&gt; but now with a value of undefined.

&lt;ul&gt;
&lt;li&gt;logging &lt;code&gt;myObject.toString&lt;/code&gt; prints our overridden copy, &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;we delete &lt;code&gt;toString&lt;/code&gt; from &lt;code&gt;myObject&lt;/code&gt;. now &lt;code&gt;toString&lt;/code&gt; calls will propagate up the prototype chain.

&lt;ul&gt;
&lt;li&gt;logging &lt;code&gt;myObject.toString&lt;/code&gt; prints &lt;code&gt;Object.prototype.toString&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#explanation-4-overriding-constructors"&gt;
  &lt;/a&gt;
  Explanation: 4. Overriding constructors???
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Original Consturctor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Overridden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Overridden Constructor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// What gets logged?&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "Original Constructor"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// "Overridden Constructor"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// "false"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example is bogus. A special place in hell is reserved for people who reassign &lt;code&gt;Constructor.prototype.constructor&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructors have a &lt;code&gt;prototype&lt;/code&gt; property which becomes their instances &lt;code&gt;[[Prototype]]&lt;/code&gt; internal slot.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;prototype&lt;/code&gt; initially has a single property, &lt;code&gt;constructor&lt;/code&gt;, which points back to the original constructor function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Constructor.prototype.constructor&lt;/code&gt; is useful to superclasses to create new instances of &lt;code&gt;this&lt;/code&gt;'s class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, here's a &lt;code&gt;Container&lt;/code&gt; class that is safe to extend and still call &lt;code&gt;clone()&lt;/code&gt; on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// we rely on prototype.constructor not being overridden&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;)([...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;UserContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logoutAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/** ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserContainer&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users2&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;UserContainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As far as I'm aware there's no good reason to ever change &lt;code&gt;prototype.constructor&lt;/code&gt;, other than as a good April Fools joke.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Older libraries like &lt;code&gt;express&lt;/code&gt; still use prototypes and constructors. Check out &lt;a href="https://github.com/expressjs/express/blob/master/lib/request.js"&gt;Express.Request&lt;/a&gt; for an example. &lt;a href="https://github.com/expressjs/express/blob/master/lib/express.js#L46"&gt;Express uses Object.create()&lt;/a&gt; to use blueprint objects, &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt;, as the &lt;code&gt;[[Prototype]]&lt;/code&gt;s for the &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; of a request instance.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>oop</category>
      <category>prototypes</category>
    </item>
    <item>
      <title>Java Tutorial - 2 Control Flow (selection)</title>
      <author>nadirbasalamah</author>
      <pubDate>Tue, 25 May 2021 00:21:56 +0000</pubDate>
      <link>https://dev.to/nadirbasalamah/java-tutorial-2-control-flow-selection-2b7m</link>
      <guid>https://dev.to/nadirbasalamah/java-tutorial-2-control-flow-selection-2b7m</guid>
      <description>&lt;p&gt;The condition selection is a commonly used in Java to execute a certain code based on the specific condition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-statement"&gt;
  &lt;/a&gt;
  if Statement
&lt;/h2&gt;

&lt;p&gt;To create an &lt;code&gt;if&lt;/code&gt; statement, use this syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
    // code..
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the example of &lt;code&gt;if&lt;/code&gt; usage to detect a number is an even or odd number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Even number"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Even number

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the variable called &lt;code&gt;num&lt;/code&gt; is compared using &lt;code&gt;==&lt;/code&gt; operator to check if the result of &lt;code&gt;num % 2&lt;/code&gt; (num mod 2) is equals zero. If it is true, the &lt;code&gt;Even number&lt;/code&gt; text is printed out.&lt;/p&gt;

&lt;p&gt;This is the list of comparation operator that can be used in Java.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Equals to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Not equals to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than or equals&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than or equals&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The other operators like AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) and OR (&lt;code&gt;||&lt;/code&gt;) is available.&lt;/p&gt;

&lt;p&gt;The AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) operator is an operator that returns true if the two conditions returns true.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Condition&lt;/th&gt;
&lt;th&gt;Condition&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The OR (&lt;code&gt;||&lt;/code&gt;) operator is an operator that returns true if the one or two conditions returns true.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Condition&lt;/th&gt;
&lt;th&gt;Condition&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#if-else-statement"&gt;
  &lt;/a&gt;
  if else Statement
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement can be added with &lt;code&gt;else&lt;/code&gt; to execute another code if the condition inside &lt;code&gt;if&lt;/code&gt; is not match. Here it is the basic syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
    // code..
} else {
    // code..
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Even number"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Odd number"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Odd number

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on that code, the condition inside &lt;code&gt;if&lt;/code&gt; statement is not match because the result of &lt;code&gt;91 % 2&lt;/code&gt; is not equals zero then the code inside &lt;code&gt;else&lt;/code&gt; block is executed.&lt;/p&gt;

&lt;p&gt;The multiple condition selection is available with &lt;code&gt;if else if&lt;/code&gt; statement. Here it is the basic syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
    // code..
} else if (condition) {
    // code..
} else {
    // code..
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the example of the &lt;code&gt;if else if&lt;/code&gt; usage. In this case, the simple program is created to define the grade in letter based on the grade in number.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Condition&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0-50&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;51-65&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;66-79&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80-100&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// create an input&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a grade: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// get the grade in number from the input&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// define the grade in letter variable&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// condition selection&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Invalid grade"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// stop the execution using return&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print out the result&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The result is: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output (with the input):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter a grade: 77
The result is: B

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the &lt;code&gt;if else if&lt;/code&gt; selection is suitable for a range condition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;if else if&lt;/code&gt; statement is suitable for a condition that has a specific range.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#switch-case-statement"&gt;
  &lt;/a&gt;
  switch case Statement
&lt;/h2&gt;

&lt;p&gt;Another way to create a condition selection is using &lt;code&gt;switch case&lt;/code&gt;. This is the basic syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch(variable) {
    case condition:
        // code..
        break;
    case condition:
        // code..
        break;
    default:
        // code..
        break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the example of using &lt;code&gt;switch case&lt;/code&gt;. The program is created to define the topics that needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// create an input&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What do you want to learn? "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// convert the all letters in input to lowercase&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;learn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toLowerCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// condition selection&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;learn&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"front end"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Learn HTML, CSS and JS"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"back end"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Learn Java, PHP and Go"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"mobile"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Learn Android and iOS development"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Learn the related topics"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output (with the input).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;What do you want to learn? mobile
Learn Android and iOS development

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on that code, the &lt;code&gt;case&lt;/code&gt; keyword is used to define the case or condition. The &lt;code&gt;break&lt;/code&gt; keyword is needed to avoid the other code that is not match with the case condition being executed. The &lt;code&gt;default&lt;/code&gt; keyword is used to execute the code if the other cases is not match.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the switch case selection is suitable for a specific condition that is not a range condition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Check out this &lt;a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html"&gt;resource&lt;/a&gt; to learn more about condition selection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this article is helpful for learning the Java programming language. If you have any thoughts or comments you can write in the discussion section below.&lt;/p&gt;

</description>
      <category>java</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using ternaries for variable assignment in Python</title>
      <author>ryanharris.dev</author>
      <pubDate>Tue, 25 May 2021 00:14:23 +0000</pubDate>
      <link>https://dev.to/ryan_c_harris/using-ternaries-for-variable-assignment-in-python-34p2</link>
      <guid>https://dev.to/ryan_c_harris/using-ternaries-for-variable-assignment-in-python-34p2</guid>
      <description>&lt;p&gt;One of my favorite "tricks" as a programmer is to condense conditional logic (i.e. &lt;code&gt;if/else&lt;/code&gt; blocks) into one line when assigning variables. The &lt;a href="https://en.wikipedia.org/wiki/Ternary_operation"&gt;ternary operator&lt;/a&gt; makes this possible.&lt;/p&gt;

&lt;p&gt;If you come from a JavaScript background like I do, you may have seen this done before with a question mark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essentially, this means if data.response is defined we should assign isSuccess the value of true. Otherwise, we'll set it to false.&lt;/p&gt;

&lt;p&gt;Recently, I used a ternary operation in Python for the first time. While it, ultimately, works the same way I found the slight difference between languages interesting.&lt;/p&gt;

&lt;p&gt;To recreate the snippet above in Python, we could write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;is_success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the right-side of the assignment leads with the "truthy" value, as opposed to the value we're checking. It's not a big difference, but worth noting the difference in API.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; operator has a special place in my heart because I've used it so much. However, Python's ternary operator syntax is probably easier to read for beginners.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>¿Cómo empecé a programar? Mi (no tan) maravilloso viaje por el mundo de sistemas</title>
      <author>Bel Rey</author>
      <pubDate>Tue, 25 May 2021 00:09:59 +0000</pubDate>
      <link>https://dev.to/iamdoomling/como-empece-a-programar-mi-no-tan-maravilloso-viaje-por-el-mundo-de-sistemas-5glh</link>
      <guid>https://dev.to/iamdoomling/como-empece-a-programar-mi-no-tan-maravilloso-viaje-por-el-mundo-de-sistemas-5glh</guid>
      <description>&lt;p&gt;Mi nombre es Bel Rey, tengo 34 años, soy desarrolladora fullstack, co-founder en &lt;a href="https://courseit.io/"&gt;CourseIt&lt;/a&gt; y creadora de contenido en &lt;a href="http://teloexplicocongatitos.com"&gt;teloexplicocongatitos.com&lt;/a&gt;. Desde que decidí empezar a compartir contenido recibo por varios medios las mismas preguntas una y otra vez. Es lógico, y no me molesta para nada, porque yo también estuve ahí. Cuando se está empezando en un área es normal tener muchas dudas y pocas certezas, y algunas de estas no se resuelven simplemente googleando.&lt;/p&gt;

&lt;p&gt;Las preguntas más comunes son: &lt;strong&gt;"Como aprendiste a programar", "cómo conseguiste tu primer trabajo en tech" y "como empezaste a emprender"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Por eso para centralizar un poco estas respuestas decidí hacer un recuento corto de como fue mi trayectoria por la programación, centrándome en analizar las partes que yo creo fueron clave para mi desarrollo profesional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; Como toda historia personal, este recorrido va a &lt;strong&gt;estar minado de oportunidades y contextos que se me dieron a mi por una mezcla de suerte, privilegio y esfuerzo&lt;/strong&gt;. No podemos medir ninguna historia de éxito descontextualizada de estos factores. Incluso lo que para mi es el éxito no lo sea para otras personas. Lo que quiero decir con esto, es que solo cuento mi historia para exponer los diferentes caminos por los cuales uno puede hacer carrera, pero no quiero bajo ningún contexto que esto se considere una &lt;strong&gt;receta mágica,&lt;/strong&gt; ni un modelo a seguir y mucho menos que se frustren si sienten que no dan con el perfil que describo en mi historia. &lt;strong&gt;El punto de la diversidad es que cada vez tengamos más oportunidades al margen del contexto personal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Empecemos entonces por aclarar que es para mi el éxito. Yo me considero una persona exitosa si puedo vivir bien y en la mayor libertad posible, dentro de los límites obvios de la realidad. Me gusta viajar si tengo ganas de viajar (cuando no hay pandemia), quedarme en mi casa cuando tengo ganas y trabajar desde donde quiera. Me gusta pasar tiempo con mi familia y círculo cercano. No funciono bien en contextos rígidos con horarios fijos ni presencialidad obligatoria, pero si tengo que hacerlo me adapto porque a veces no queda otra.&lt;/p&gt;

&lt;p&gt;Prefiero, siempre dentro de lo posible, los espacios de trabajo estructurados y metódicos, que van bien de la mano con la cultura del trabajo asíncrono.&lt;/p&gt;

&lt;p&gt;Me gusta emprender porque me permite ejercer ciertas de estas libertades mientras creo productos interesantes, en los que disfruto trabajar y también porque me gusta generar oportunidades y espacios de trabajo que le sirvan a otras personas que tienen una idea similar del éxito.&lt;/p&gt;

&lt;p&gt;Aclaro todo esto porque van a notar durante esta historia que suelo gravitar hacia trabajos freelance o contractor y menos hacia trabajos en relación de dependencia, y ese es el motivo, pero de nuevo, &lt;strong&gt;es mi historia y no necesariamente tiene que ser la que ustedes quieran recorrer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ahora si, fin del disclaimer. Empecemos.&lt;/p&gt;

&lt;p&gt;Mi nombre es Belén Rey, nací, y al día de hoy vivo en Buenos Aires, Argentina. Más particularmente en CABA, que cuando yo era chica solía llamarse Capital Federal, pero ya en ese entonces era el territorio más privilegiado dentro del país. Crecí en una familia de clase media, mi viejo era gerente de sistemas en Disco, una cadena muy importante de supermercados. Mi mamá era ama de casa. Tuve una infancia digna de una sitcom de los 80.&lt;/p&gt;

&lt;p&gt;Allá por el 2006 egresé de la educación media, que acá en Argentina conocemos comúnmente como secundaria y me anoté a estudiar en la universidad. Mi primera opcion eran ponerme a hacer &lt;strong&gt;alguna carrera de sistemas para seguir el legado paterno&lt;/strong&gt;, mi segunda opción era estudiar diseño. Por ambas cosas tuve siempre afinidad y facilidad así que me daba igual. En realidad, sinceramente, &lt;strong&gt;mi primera opción era no hacer nada.&lt;/strong&gt; El 2005 fue un año muy difícil en mi familia, marcado por la enfermedad y la muerte y realmente no estaba en condiciones de elegir y enfrentar la responsabilidad de estudiar. Le rogué a mis viejos que me dejaran tomarme un año sabático, pero no hubo caso, &lt;strong&gt;tras muchas charlas de "mientras vivas bajo mi techo" cedí ante la presión de mi familia&lt;/strong&gt; y después de un par de vueltas me terminé anotando en una carrera al azar.&lt;/p&gt;

&lt;p&gt;Si hoy tuviera una máquina del tiempo volvería a ese momento en el tiempo, los sentaría a todos en la mesa del comedor y les diría &lt;strong&gt;que se dejen de joder&lt;/strong&gt;. Cuando uno está en el momento siempre siente esta presión de graduarse antes de los 22, antes de los 25, antes de los 30. Sentís que el tiempo se te escapa, que la vida se te escapa. &lt;strong&gt;En el transcurso de la vida te das cuenta que esos parámetros no significan nada.&lt;/strong&gt; Y en la medida de lo posible, siempre es bueno tomarse el tiempo para pensar las cosas. Que prefieren ustedes ¿Que los opere un cirujano que se graduó rápido pero secretamente quiere ser pianista o uno que se haya tomado el tiempo de descubrir su profesión? Yo voy con el segundo, sin dudarlo.&lt;/p&gt;

&lt;p&gt;Pero bueno, me anoté en una carrera al azar, empecé a cursar y decidí que la mejor forma de ganar control sobre mi vida &lt;strong&gt;era empezar a trabajar&lt;/strong&gt;. Conseguí por referencia de una profesora trabajo en una pyme local haciendo algo de diseño (era malísima) y frontend (en ese momento recién empezaba el auge del css). Con ese sueldo decidí pagarme los estudios en un instituto privado simplemente porque los horarios eran electivos y eso me permitía trabajar más tiempo.&lt;/p&gt;

&lt;p&gt;Me anoté entonces en la carrera de Desarrollo de Videojuegos, en Imagecampus. &lt;strong&gt;Ahí aprendí a programar en C#, C++. Aprendí POO, a hacer diagramas de flujo y organizar bases de datos relacionales&lt;/strong&gt;. También aprendí ciertos temas de matemáticas bastante avanzados que después se aplicaban en creación de shaders y otras aplicaciones dentro de lo que era la programación orientada a los videojuegos. Realmente una carrera apasionante que me dejó muchísimo. La abandoné en el último año porque no me banqué la presión de ser la única mujer en toda la institución. Si la hiciera hoy en día creo que sería diferente. Pero en ese momento yo tenía 19 o 20 años y no me banqué la hostilidad de algunos de mis compañeros. La institución no me dió apoyo, pero ahora entiendo que en ese momento &lt;strong&gt;tampoco supieron cómo&lt;/strong&gt;. Creo que hoy en día esos ambientes son mucho más amigables y tienen otras herramientas para manejar violencias y acosos.&lt;/p&gt;

&lt;p&gt;Mientras cursaba empecé a ejercer como &lt;em&gt;quality assurance&lt;/em&gt; en &lt;strong&gt;Gameloft&lt;/strong&gt;, una empresa que desarrolla videojuegos para celular y en ese momento tenía una gran presencia en Argentina. Para ingresar te tomaban una prueba donde medían tu atención al detalle y nivel de inglés. Acá voy a hacer un parate: &lt;strong&gt;si pueden, aprendan inglés&lt;/strong&gt;. Yo tuve la suerte de estudiarlo desde chica y realmente no puedo explicarles la cantidad de oportunidades que me dió. No importan las certificaciones ni los examenes internacionales, todo eso es brillantina. &lt;strong&gt;Aprendan inglés, leerlo, escribirlo y hablarlo con naturalidad, la diferencia que hace es enorme.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pero volviendo, la entrevista en &lt;strong&gt;Gameloft&lt;/strong&gt; era atención al detalle e inglés. Pasé y estuve trabajando ahí un buen tiempo. Nos capacitaban y el sueldo no estaba mal, pero no había mucha oportunidad de crecimiento tampoco, al menos no en esa área. En 2010 me fui a &lt;strong&gt;Globant&lt;/strong&gt;, también como QA. En &lt;strong&gt;Globant&lt;/strong&gt; me capacitaron en &lt;strong&gt;selenium y otras tecnologías de automation&lt;/strong&gt;, lo cual me permitió empezar a aplicar a trabajos mejor pagos.&lt;/p&gt;

&lt;p&gt;Particularmente me capacitaron en &lt;strong&gt;selenium usando java&lt;/strong&gt;, y también tuve bastantes capacitaciones todo lo que es el mundo de agile, que sinceramente no me parece demasiado útil pero suena bien en un CV.&lt;/p&gt;

&lt;p&gt;Para ese momento ya había dejado la carrera y me anoté en mi otro gran amor, diseño gráfico. No voy a entrar mucho en detalle sobre la carrera de diseño porque no es de lo que vinimos a hablar.&lt;/p&gt;

&lt;p&gt;Mientras estudiaba diseño me fui a mi siguiente trabajo, también como QA, pero esta vez full automation, en una software factory local llamada &lt;strong&gt;Teracode&lt;/strong&gt;. En &lt;strong&gt;Teracode&lt;/strong&gt; también me capacitaron, esta vez en &lt;strong&gt;behat, un framwork de Behaviour Driven Development para PHP. También me capacitaron en PHP, pero prefiero obviar eso en mi CV.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nunca me gustó el trabajo de QA. Quizás se estén preguntando por que no buscaba oportunidades de diseño. Les voy a decir la verdad, las buscaba, pero en ese punto &lt;strong&gt;me rendía mucho más a nivel económico y horarios&lt;/strong&gt; trabajar como QA dentro de la burbuja de sistemas. Los sueldos eran mucho mejores lo cual me permitía seguir pagando mis estudios, el alquiler y la comida. La pasión es algo muy lindo, pero en ese momento igual que siempre, decidí priorizar mi libertad.&lt;/p&gt;

&lt;p&gt;Las cosas en Teracode no iban bien porque la empresa empezó a tener problemas de liquidez y dejó de pagar los sueldos, pero ahí, en el segundo proyecto donde me asignaron conocí a quienes eventualmente se iban a convertir en mis socios: Diego y Caro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Éramos tres personas cansadas de trabajar por dos pesos y en malas condiciones cuando podíamos hacerlo precarizado pero en dólares&lt;/strong&gt;, por eso en 2013 unimos fuerzas, conseguimos nuestro primer cliente internacional, nos fuimos a Boston sin mucha idea de lo que estábamos haciendo y &lt;strong&gt;fundamos nuestra propia software factory: Fibury. Yo tenía en ese momento 25 años.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ninguno de los tres tenía mucha idea de como manejar una empresa, y uff, nos equivocamos varias veces, pero fue una gran experiencia. Tuvimos la suerte de contar con un buen equipo de profesionales que nos ayudó a navegar los mares de la AFIP, el BCRA, los cepos cambiarios y el interminable universo fiscal de la Argentina. &lt;strong&gt;Una experiencia muy enriquecedora y también muy estresante.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;En Fibury hice de todo, PHP, Java, Selenium, Behat, branding, UI, señalética y todo lo que mi abanico de habilidades ganadas a través de los años me permitió.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pasó el tiempo, nos aburguesamos, siempre ganándole a la inflación con la entrada constante de USD. La empresa se empezó a poner aburrida. A comienzos de 2018 y en el pico de mi aburrimiento decidí salir a buscar nuevos desafíos. Todavía sentía una deuda con la programación propiamente dicha, por eso me anoté en un &lt;strong&gt;bootcamp intensivo de desarrollo frontend&lt;/strong&gt;. Arrastré conmigo a mi mejor amiga Denise.&lt;/p&gt;

&lt;p&gt;Siempre digo que la experiencia bootcamp es 100% suerte y quien te toque en el puesto de profesor porque las instituciones no suelen dar apoyo desde lo técnico. Yo tuve muchisima suerte de encontrarme a &lt;a href="https://twitter.com/JuaniGallo"&gt;Juani Gallo&lt;/a&gt;, una de las personas &lt;strong&gt;con más capacidad pedagógica que conocí en la vida&lt;/strong&gt;. Y si no me creen a mi pueden ir a leer los tweets de otras personas:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Solo escribo este tweet para decir que los cursos de &lt;a href="https://twitter.com/courseitok?ref_src=twsrc%5Etfw"&gt;@courseitok&lt;/a&gt; son impecables y la forma en la que explica Juani Gallo es genial. Excelente inversión💪😼&lt;/p&gt;— Mauro (@devafterall) &lt;a href="https://twitter.com/devafterall/status/1367139385062420484?ref_src=twsrc%5Etfw"&gt;March 3, 2021&lt;/a&gt;
&lt;/blockquote&gt; 


&lt;blockquote&gt;
&lt;p&gt;Doy fe! Hice el de HTML y CSS, &lt;a href="https://twitter.com/JuaniGallo?ref_src=twsrc%5Etfw"&gt;@JuaniGallo&lt;/a&gt; es súper claro! Entendes sí o sí. Mientras ves la clase vas practicando y así, a tu ritmo, retrocediendo el video todo lo que haga falta. Para mí lo re contra vale.&lt;/p&gt;— Tati (@tatibalm) &lt;a href="https://twitter.com/tatibalm/status/1382734565123428357?ref_src=twsrc%5Etfw"&gt;April 15, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;En el bootcamp me fue muy bien, aprendí &lt;strong&gt;HTML, CSS, jQuery, React y Node.js.&lt;/strong&gt; Durante el tiempo que cursé practicaba constantemente todos los días, estaba absolutamente decidida a aprovechar la cursada y llevarme el mayor conocimiento posible. Agradezco haber tenido el apoyo de mi familia durante todo este proceso, que duró seis meses. Me bancaron en todas, pero sobre todo con el cuidado de mi casa y mi hijo, que en ese momento tenía menos de dos años. &lt;strong&gt;Las personas no deberíamos tener que elegir entre nuestra familia y nuestro éxito profesional,&lt;/strong&gt; pero lamentablemente las estructuras no siempre acompañan y quienes tenemos personas a cargo no siempre podemos darnos ciertos lujos. Yo tuve y tengo el privilegio de poder armar mi propia red de cuidado, pero estas oportunidades no se le deberían negar a nadie.&lt;/p&gt;

&lt;p&gt;Terminó el curso y yo volví a mi empresa, donde se me dió la chance de empezar a ejercer como desarrolladora frontend.&lt;/p&gt;

&lt;p&gt;Mi primera asignación en el mundo del front fue un proyecto nuevo con &lt;strong&gt;React Native&lt;/strong&gt;. Yo no sabía React Native pero había aprendido React a fondo. Tuve que hacer un challenge que era levantar el repo de una app en local, e implementar un sistema de login. Lo que más me costó del challenge fue la navegación &lt;strong&gt;porque venía del mundo del React Router y de pronto me encontré peleando con navigators&lt;/strong&gt;. Mi challenge no fue perfecto, pero estaba bien, me tomaron y además me asignaron en otro proyecto donde me capacitaron en &lt;strong&gt;Angular.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Por aquel momento dejé de ejercer como diseñadora. También estaba cada vez más aburrida. Empecé a buscar trabajos por fuera de la empresa y los encontré, siempre por referido o recomendación. Durante este periódo empecé a ejercer como ayudante en el bootcamp y también tuve la suerte de sumarme temporalmente al equipo de Acámica, para generar contenido y renovar la carrera de Desarrollo Web Fullstack (en el área de frontend). De hecho, si conocen a alguien que haya hecho la última versión de la carrera y haya entregado el proyecto gifOs, eso es parcialmente mi culpa, y en algún rincón de mi github privado todavía tengo el código de la versión prototipo. Si lo amaron (u odiaron) ya saben a quien culpar.&lt;/p&gt;

&lt;p&gt;Durante este tiempo me capacité sola en &lt;strong&gt;next.js y aprendí a usar bases de datos no relacionales, particularmente mongo&lt;/strong&gt;. Casi toda mi capacitación en estas tecnologías pasó por &lt;strong&gt;leer documentación&lt;/strong&gt; y algún que otro curso en oferta de Udemy.&lt;/p&gt;

&lt;p&gt;Las cosas siguieron así por un tiempo, hasta que en 2019 me reencontré con Juani, que estaba buscando gente para sumarse a &lt;strong&gt;&lt;a href="https://courseit.io/"&gt;CourseIt&lt;/a&gt;&lt;/strong&gt;, el emprendimiento que había empezado un tiempo antes. Me sumé, &lt;strong&gt;primero como ayudante en clase, después como desarrolladora&lt;/strong&gt;. Eventualmente me di cuenta que &lt;strong&gt;&lt;a href="https://courseit.io/"&gt;CourseIt&lt;/a&gt;&lt;/strong&gt; era el lugar donde yo quería estar y me fui de &lt;strong&gt;Fibury&lt;/strong&gt;. Esto no fue tan lineal y hubo otros factores en el medio, pero lo importante es que fue de comun acuerdo, &lt;strong&gt;la empresa había cumplido su ciclo&lt;/strong&gt;, y a mi me quedó toda la experiencia y una relación con Caro a quien siempre voy a considerar una de mis más grandes amigas. Te quiero ami, tirame unos freelos.&lt;/p&gt;

&lt;p&gt;Y esto nos trae a la historia contemporánea. A fines de 2019 para complementar mi trabajo en &lt;strong&gt;&lt;a href="https://courseit.io/"&gt;CourseIt&lt;/a&gt;&lt;/strong&gt; tomé un trabajo freelance para el Banco Patagonia. Tuve la oportunidad de trabajar en dos de sus proyectos donde apliqué mis conocimientos en React pero además aprendí mucho sobre integración con las apis de renaper y otros servicios de reconocimiento de datos. A mediados de 2020 tomé una posición part time como desarrolladora fullstack en Digiventures, una fintech local, donde al día de hoy soy parte del equipo de desarrollo. Tuve la suerte de que me confíen el desarrollo de un producto nuevo desde cero y además me deleguen &lt;strong&gt;el liderazgo del equipo, siendo mi primera oportunidad como líder técnica.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hace un mes, y como parte de CourseIt, tomé un proyecto corto para renovar y refactorizar la página web de una empresa que trabaja con Smart Contracts, asi que si me pongo pesada con el tema cripto ya saben por qué es.&lt;/p&gt;

&lt;p&gt;En CourseIt hago varias tareas, pero mayormente me dedico a desarrollar algunas features, diseñar las interfaces de usuario y curar contenido. &lt;strong&gt;Me divierte tener diferentes roles en diferentes equipos, pero a veces también me quema, porque el cambio de foco es constante&lt;/strong&gt;. Mi meta a corto plazo es ver CourseIt crecer más y más. &lt;strong&gt;¿Mi meta a largo plazo? Todavía no estoy segura&lt;/strong&gt;, pero probablemente incluya aprender más tecnologías, seguir desarrollando productos que aporten valor y no aburrirme en el proceso.&lt;/p&gt;

&lt;p&gt;Ahora si, hecho este recuento por mi vida profesional, que me interesa que se lleven:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Estudiar carreras terciarias / de grado en sistemas me dió &lt;strong&gt;una gran base lógica y algorítmica, buena estructura y forma para pensar los problemas y cero herramientas para salir a buscar un trabajo en el corto plazo&lt;/strong&gt;. ¿Recomiendo estudiar una carrera universitaria? Depende. &lt;strong&gt;Si buscan una salida laboral instantánea, no&lt;/strong&gt;. Si quieren profundizar en temas que aportan a una mejor búsqueda de soluciones y no se animan a hacerlo de forma autodidacta, haganlo, definitivamente todo suma.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para llegar a tener la libertad laboral que tengo hoy en día me tuve que fumar experiencias que no necesariamente hubiese elegido, sobre todo en mis primeros trabajos. &lt;strong&gt;No dejen pasar oportunidades esperando que se les dé el trabajo perfecto con el stack perfecto&lt;/strong&gt;, a veces una oportunidad que puede no resultar super atractiva a simple vista ofrece posibilidades de crecimiento y capacitación impensados&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No hay una sola forma de aprender a programar&lt;/strong&gt;. Ni de aprender nada, sinceramente. Mis habilidades vienen de una suma de educación formal, capacitaciones laborales, aprendizaje autodidacta y cursos. Todas las formas me aportaron diferentes conocimientos y perspectivas y no me arrepiento de ninguna.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mi opinión sobre los bootcamps es que si se van a meter a uno investiguen quien está a cargo de las clases. &lt;strong&gt;Y si no saben a donde ir vengan a &lt;a href="https://courseit.io/"&gt;CourseIt&lt;/a&gt;, donde ya vivimos todos los problemas que este formato educativo suele tener e intentamos constantemente mejorar y solucionarlos&lt;/strong&gt;. Pueden probar nuestros cursos gratuitos de &lt;a href="https://courseit.io/cursos/curso-gratuito-html-css"&gt;HTML y CSS&lt;/a&gt; o &lt;a href="https://courseit.io/cursos/algoritmos"&gt;Algoritmos&lt;/a&gt; antes de comprometerse con una suscripción mensual&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Estudiar cualquier cosa es más fácil si lo hacen con un grupo de apoyo. Yo tuve la suerte de coincidir con grandes personas que se convirtieron en grandes profesionales, pueden leer algunas de sus historias acá:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://dev.to/ddgn/cambiar-de-carrera-post-30-a08"&gt;https://dev.to/ddgn/cambiar-de-carrera-post-30-a08&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/cocotlandia/tu-primer-plan-de-carrera-personal-en-desarrollo-web-4ol5"&gt;https://dev.to/cocotlandia/tu-primer-plan-de-carrera-personal-en-desarrollo-web-4ol5&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  No dejen de lado los soft skills, &lt;strong&gt;las oportunidades de crecimiento no se dan solo por las habilidades técnicas&lt;/strong&gt;, muchas veces vienen de la mano de recomendaciones y contactos. Traten bien a la gente y se les van a abrir miles de puertas&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dentro de sus posibilidades aprendan inglés. Como sea, videos online, cursos, institutos, grupos de charla, etc&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No dejen pasar una oportunidad por más miedo que tengan. Es mejor probar y fallar, porque eso implica que también se puede probar y tener éxito. &lt;strong&gt;No probar es fallar automáticamente.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Y finalmente, no hay fórmulas mágicas ni trabajos perfectos&lt;/strong&gt;. Lo que a ustedes les sirva para progresar es válido, siempre que sea legal y no joda a nadie en el camino.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Espero que este post les de una perspectiva de cómo se puede ver la carrera de alguien que hace más de una década trabaja en este mundo, y como no siempre el camino es lineal. Si tienen dudas, comentarios o ganas de charlar me encuentran en &lt;a href="https://twitter.com/iamdoomling"&gt;twitter&lt;/a&gt; o en los comentarios :)&lt;/p&gt;

</description>
      <category>career</category>
      <category>spanish</category>
      <category>diversity</category>
    </item>
    <item>
      <title>Creating our own color theme in vscode</title>
      <author>vinay</author>
      <pubDate>Mon, 24 May 2021 23:21:23 +0000</pubDate>
      <link>https://dev.to/vinaybommana7/creating-our-own-color-theme-in-vscode-2b9m</link>
      <guid>https://dev.to/vinaybommana7/creating-our-own-color-theme-in-vscode-2b9m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-dilemma"&gt;
  &lt;/a&gt;
  the dilemma
&lt;/h1&gt;

&lt;p&gt;We've all been there. The need to please our eyes when you see a particular block of code. You like some nuances from a colour scheme and some things you just don't like at all. You like a colour scheme, use it for a while, but still there is that voice telling you that this can be better, your experience with writing code still needs improvement.&lt;/p&gt;

&lt;p&gt;This led me to edit out some of the colors I just don't like in some of the color themes I was using. At first I was drawn to the simplicity of &lt;a href="https://github.com/jamiewilson/predawn"&gt;Predawn&lt;/a&gt;. but the oranges didn't work for me. The minimalistic choice of colors is fine, but not good enough for me. Then I found &lt;a href="https://marketplace.visualstudio.com/items?itemName=CrazyFluff.bettermaterialthemedarkerhighcontrast"&gt;material darker with high contrast&lt;/a&gt;. but ugh the color palette is not minimalistic like predawn.&lt;br&gt;
like the italics on the theme for comments is so icky. Talking about colour palettes I know a better dark palette waiting anyway. &lt;a href="https://www.nordtheme.com"&gt;Nord&lt;/a&gt;. So one unproductive Saturday morning I forced myself to edit out the colour palette in settings(json).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0bqE-KQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46dl6gqnlqyrwj5giypl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0bqE-KQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46dl6gqnlqyrwj5giypl.png" alt="Nord Palette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOLGZL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz7p0b3if3dro0ckjt9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOLGZL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz7p0b3if3dro0ckjt9w.png" alt="Nord Palette"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;workbench.colorCustomizations:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;like the cursor colour, background, taking out the italics and stuff. Down the rabbit hole, I was reading on how to create your own color-scheme from an existing one.&lt;/p&gt;

&lt;p&gt;The Material Themes darker high contrast theme looked like a starting path for me to start tweaking, since the UI indicators and separation of high contrast colors is &lt;em&gt;good enough&lt;/em&gt; for me. enough of small talk let's get into the three easy steps of creating a color scheme&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;apply your own favourite color scheme by hitting
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cmd+shift+p &amp;gt; Preferences: Color theme &amp;gt; &amp;lt;select the theme&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;convert the existing theme to json format
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cmd+shift+p &amp;gt; Developer: Generate Color theme from Current settings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this will create an untitled file with particular color palette and settings for every customisable UI element in vscode.&lt;/p&gt;

&lt;p&gt;tweak the colors to your liking.&lt;/p&gt;

&lt;p&gt;some of the tweaks I've made are&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;colors: &lt;span class="o"&gt;{&lt;/span&gt;
// changed all blues to &lt;span class="c"&gt;#5E81AC like&lt;/span&gt;
&lt;span class="s2"&gt;"activityBarBadge.background"&lt;/span&gt;: &lt;span class="s2"&gt;"#5E81AC"&lt;/span&gt;,
// main editor background
&lt;span class="s2"&gt;"editor.background"&lt;/span&gt;: &lt;span class="s2"&gt;"#212121"&lt;/span&gt;,
// current line number to be more focused
&lt;span class="s2"&gt;"editorLineNumber.activeForeground"&lt;/span&gt;: &lt;span class="s2"&gt;"#eeffff"&lt;/span&gt;,
// list explorer items
&lt;span class="s2"&gt;"list.highlightForeground"&lt;/span&gt;: &lt;span class="s2"&gt;"#5E81AC"&lt;/span&gt;,
// didn&lt;span class="s1"&gt;'t like the terminal cursor colour
"terminalCursor.foreground": "#5E81AC",
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;removed every unnecessary italics (like in comments)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;convert the json to vscode color theme extension.
for this step you'll &lt;code&gt;npm&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;install yo and code-generator
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yo generator-code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;yo code&lt;/code&gt; and select color theme from list of options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJrZ1cyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsbjlzzw878qmzr2ezo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJrZ1cyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsbjlzzw878qmzr2ezo8.png" alt="yo code options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the prompt will ask you if you want to create color theme from an existing one or start afresh.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PZjjxE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie0j8je4zumtg2isbfyv.png" alt="afresh"&gt;
&lt;/li&gt;
&lt;li&gt;select create a fresh color theme and give some name to it.&lt;/li&gt;
&lt;li&gt;now go to &lt;code&gt;&amp;lt;theme-name&amp;gt;/themes/&amp;lt;theme-name&amp;gt;-color-theme.json&lt;/code&gt; and replace it with the &lt;code&gt;untitled&lt;/code&gt; file you've edited before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that your extension is ready, you may need to enable the theme and check it out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copy the entire folder &lt;code&gt;&amp;lt;theme-name&amp;gt;&lt;/code&gt; to &lt;code&gt;~/.vscode/extensions/&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &amp;lt;theme-name&amp;gt; ~/.vscode/extensions/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;restart the editor, and hit &lt;code&gt;cmd+shift+p &amp;gt; Preferences: color theme &amp;gt;&lt;/code&gt; you'll see your &lt;code&gt;&amp;lt;theme-name&amp;gt;&lt;/code&gt; there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The comprehensive way to create an extension can be found &lt;a href="https://code.visualstudio.com/api/get-started/your-first-extension"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;check out my color theme at &lt;a href="https://github.com/vinaybommana/predusk"&gt;predusk&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vinaybommana"&gt;
        vinaybommana
      &lt;/a&gt; / &lt;a href="https://github.com/vinaybommana/predusk"&gt;
        predusk
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      predawn and material high contrast theme for vscode
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'll try to publish the extension in vscode marketplace in the future, for now the theme lives on at Github.&lt;/p&gt;

&lt;p&gt;give a ❤️ if you like this article. let's discuss down below, which theme you are currently using ✨&lt;/p&gt;

</description>
      <category>vscode</category>
    </item>
    <item>
      <title>Sexy, accessible show-hide animations in any web framework</title>
      <author>Ben Holmes</author>
      <pubDate>Mon, 24 May 2021 23:18:22 +0000</pubDate>
      <link>https://dev.to/bholmesdev/sexy-accessible-show-hide-animations-in-any-web-framework-4hpk</link>
      <guid>https://dev.to/bholmesdev/sexy-accessible-show-hide-animations-in-any-web-framework-4hpk</guid>
      <description>&lt;p&gt;This entry comes from my web wizardry newsletter, where I explore evergreen solutions to common web dev problems (no matter your favorite framework). If you like what you see, &lt;a href="http://tinyletter.com/bholmesdev"&gt;&lt;strong&gt;go sign up for free&lt;/strong&gt;&lt;/a&gt; 🪄&lt;/p&gt;




&lt;p&gt;Using JS to show and hide something is a web dev rite of passage. Heck, it's the first demo that comes to mind when you think about "state management" (just behind building a counter 😆).&lt;/p&gt;

&lt;p&gt;But when you do the classic "hide whenever X variable is &lt;code&gt;false&lt;/code&gt;," there's some accessibility concerns you might be forgetting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can keyboard users still access that hidden element?&lt;/li&gt;
&lt;li&gt;do screen readers actually &lt;em&gt;know&lt;/em&gt; what your button is trying to show and hide?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't worry, I have the answers for you! Let's explore a universal solution you can bring to React, Svelte, Vue, etc, along with some debugging tips using a real screen reader 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-with-a-naive-solution"&gt;
  &lt;/a&gt;
  Starting with a naive solution
&lt;/h2&gt;

&lt;p&gt;Okay, wait, why isn't this post a 2 minute read? I just whipped up this fade transition in a CodePen and it works great!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bholmesdev/embed/XWMKqWj?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you don't recognize this meme, &lt;a href="https://knowyourmeme.com/memes/nileseyy-niles-disappears"&gt;go culture yourself&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I'll admit that a simple &lt;code&gt;opacity&lt;/code&gt; shift works pretty well for non-interactable elements like this &lt;code&gt;img&lt;/code&gt;. But what if you're &lt;strong&gt;showing and hiding clickable elements,&lt;/strong&gt; like a navigation bar of links?&lt;/p&gt;

&lt;p&gt;This can spell problems for those using keyboard navigation or screenreaders. It's (embarrassingly) a problem across some of my own sites that I'm working to fix, but it can be tricky to debug.&lt;/p&gt;

&lt;p&gt;Here's an example of hitting the &lt;code&gt;tab&lt;/code&gt; key through our &lt;a href="https://hack4impact.org"&gt;Hack4Impact.org&lt;/a&gt; site. I've adjusted the dropdown overlay to &lt;code&gt;opacity: 0.1&lt;/code&gt; to show which items are focused, but you can expect the same behavior for &lt;code&gt;opacity: 0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXoCXX3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bholmes.dev/assets/blog/show-hide-animation/show-hide-tab-focus-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXoCXX3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bholmes.dev/assets/blog/show-hide-animation/show-hide-tab-focus-demo.gif" alt="When hitting toggling the hamburger menu off on the Hack4Impact site, we see a faint focus ring over each link as we tab to these low opacity elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow either the focus ring around the elements, or the &lt;code&gt;activeElement&lt;/code&gt; query in the console view (which prints the element being focused)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Uh oh, I'm still able to focus and select these links! What's more, our &lt;code&gt;opacity&lt;/code&gt; solution poses a problem for visually impaired users, since they won't know that our visual &lt;code&gt;opacity&lt;/code&gt; shift &lt;em&gt;really&lt;/em&gt; means showing and hiding a dropdown.&lt;/p&gt;

&lt;p&gt;What we really want is the best of &lt;em&gt;all&lt;/em&gt; worlds:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A nifty fade in-and-out animation for sighted users&lt;/li&gt;
&lt;li&gt;The ability to focus interactable links and buttons &lt;em&gt;only&lt;/em&gt; when the element is revealed&lt;/li&gt;
&lt;li&gt;A callout for screenreaders whenever we show and hide something&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-accommodate-keyboard-users"&gt;
  &lt;/a&gt;
  ⌨️ Let's accommodate keyboard users
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; This section only applies when showing / hiding interactable elements like a list of links.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Focusing on that &lt;code&gt;tab&lt;/code&gt; key first, we need to find a way to make sure that a not-so-visible element can't be accessed at all.&lt;/p&gt;

&lt;p&gt;You might remember a nifty property for this already: &lt;code&gt;display: none&lt;/code&gt;. This makes element nonexistent in the document, right? &lt;/p&gt;

&lt;p&gt;Well it's worth a shot! Let's toggle to &lt;code&gt;display: none&lt;/code&gt; when our element is hidden, and add &lt;code&gt;display&lt;/code&gt; alongside &lt;code&gt;opacity&lt;/code&gt; in our list of transitions.&lt;/p&gt;

&lt;p&gt;We'll be using this basic navigation dropdown as fuel for the rest of our code examples. Nothing fancy on the JS + HTML sides! The important piece are those &lt;code&gt;.dropdown&lt;/code&gt; and &lt;code&gt;.dropdown.expanded&lt;/code&gt; selectors in our CSS. That's where we toggle between our &lt;code&gt;display&lt;/code&gt; states like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dropdown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dropdown.expanded&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* since we're using flexbox in our dropdown */&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* to (hopefully) fade from expanded to collapsed in 0.2 seconds */&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Full example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bholmesdev/embed/BaWzGpY?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But wait, where's our fade transition? Sorry to say this is the big limitation of the &lt;code&gt;display&lt;/code&gt; property: &lt;strong&gt;it cannot be used in CSS transitions&lt;/strong&gt; ( &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties"&gt;full list of animatable CSS properties here&lt;/a&gt;) This means, when we toggle off our &lt;code&gt;expanded&lt;/code&gt; class, it immediately switches to &lt;code&gt;display: none&lt;/code&gt; (ignoring our &lt;code&gt;0.2s&lt;/code&gt; transition) before our opacity has time to sexily fade out 😥&lt;/p&gt;

&lt;p&gt;What we need is a way to toggle off &lt;code&gt;display&lt;/code&gt; &lt;em&gt;only after&lt;/em&gt; our element fades out of view. And no, we can't use &lt;code&gt;keyframes&lt;/code&gt; to set up this sequence (&lt;a href="https://gist.github.com/Holben888/45fa3c0c5ea7bf0e2ef74b882a2e2522"&gt;here's the code you were probably about the try&lt;/a&gt; 😉). But fear not! There's a neat property called &lt;code&gt;visibility&lt;/code&gt; that can do exactly what we want. Just hot swap &lt;code&gt;display: none&lt;/code&gt; for &lt;code&gt;visibility: hidden&lt;/code&gt; and update the transition:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bholmesdev/embed/xxqOQrw?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;BAM!&lt;/em&gt; Our fade animation remains in-tact, but we've successfully hidden our element from keyboard-ists 👍&lt;/p&gt;

&lt;p&gt;You can click on that CodePen preview above and start hitting &lt;code&gt;tab&lt;/code&gt; to test our solution. Your focus should immediately jump from the hamburger button to the CodePen zoom controls, instead of trying to focus those invisible links. And once you focus the button, hit &lt;code&gt;space&lt;/code&gt;, and start &lt;code&gt;tab&lt;/code&gt;ing through, those links become selectable.&lt;/p&gt;

&lt;p&gt;💡 &lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is 1 subtle difference between &lt;code&gt;display: none&lt;/code&gt; and &lt;code&gt;visibility: hidden&lt;/code&gt;. When using the former, an element gets completely removed from the document, so any elements next to it will &lt;strong&gt;shift to take up the space it left behind.&lt;/strong&gt; By contrast, &lt;code&gt;visibility: hidden&lt;/code&gt; just hides the element visually, while &lt;strong&gt;leaving the gap&lt;/strong&gt; for where it used to sit. This prevents your website layout from shifting around when you toggle elements on and off.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%91%81-lets-accommodate-screen-readers"&gt;
  &lt;/a&gt;
  👁 Let's accommodate screen readers
&lt;/h2&gt;

&lt;p&gt;Okay, so we know what our website looks like... but what does it sound like? 🤔&lt;/p&gt;

&lt;p&gt;Well, I'd recommend breaking out a screen reader for this next part! You can reach for the VoiceOver tool if you're running MacOS, but there's also a &lt;a href="https://chrome.google.com/webstore/detail/screen-reader/kgejglhpjiefppelpmljglcjbhoiplfn"&gt;screen reader for Chrome&lt;/a&gt; you can try on any computer.&lt;/p&gt;

&lt;p&gt;If you're interested, you can follow along with this video walkthrough to see the &lt;a href="https://support.apple.com/guide/voiceover-guide/welcome/web"&gt;VoiceOver tool&lt;/a&gt; in action 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/21S1PFBxV6g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicating-toggle-states-with-raw-ariaexpanded-endraw-"&gt;
  &lt;/a&gt;
  Communicating toggle states with &lt;code&gt;aria-expanded&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Our navigation toggle button is the first issue to address. If you try expanding and collapsing our menu as-is, the screenreader won't read anything &lt;em&gt;new&lt;/em&gt; to the user. This is because, well, it's a plain old button at the moment. We need to tell our reader that it's &lt;em&gt;actually&lt;/em&gt; an on-off toggle.&lt;/p&gt;

&lt;p&gt;We can pull this off by adding an &lt;code&gt;aria-expanded&lt;/code&gt; attribute to our button. This boolean should call out whether our menu is in the "expanded" or "collapsed" state. Just set the initial state in our HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- collapsed by default --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Nav toggle"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle-dropdown"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And keep that value up-to-date wherever we're tracking button clicks. Here's a basic version for plain-JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.toggle-dropdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// toggle our CSS class&lt;/span&gt;
  &lt;span class="nx"&gt;dropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// and if our "expanded" class is turned on...&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// set aria-expanded to true&lt;/span&gt;
    &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aria-expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise it's false&lt;/span&gt;
    &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aria-expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bholmesdev/embed/RwpVqdb?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dh_q0Pzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bholmes.dev/assets/blog/show-hide-animation/aria-expanded-screenreader-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dh_q0Pzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bholmes.dev/assets/blog/show-hide-animation/aria-expanded-screenreader-demo.gif" alt='VoiceOver output as we toggle our button. Notice we get a new announcement for every click saying either "expanded" or "collapsed"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VoiceOver output as we toggle our button. Notice we get a new announcement for every click saying either "expanded" or "collapsed"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can also add the attribute &lt;code&gt;aria-haspopup="true"&lt;/code&gt; to your button. This will just added the word "popup" to the screenreader output to make behavior just a bit more understandable. Optional, but recommended!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focusing-our-dropdown-on-expanded"&gt;
  &lt;/a&gt;
  Focusing our dropdown on expanded
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; This should only be used when showing / hiding interactable elements. If you're just revealing images or paragraphs, the &lt;code&gt;aria-expanded&lt;/code&gt; piece should be sufficient!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now we're telling the user that they're expanding and collapsing something. But what is this &lt;em&gt;something&lt;/em&gt; their actually toggling?&lt;/p&gt;

&lt;p&gt;Sadly, there's no straightforward way to tell the user "you just expanded my fancy dropdown!" There &lt;em&gt;is&lt;/em&gt; an &lt;code&gt;aria-controls&lt;/code&gt; attribute you can try, but it's only supported by the premium &lt;a href="https://www.freedomscientific.com/products/software/jaws/"&gt;JAWS screen reader&lt;/a&gt; (which many users don't have access to).&lt;/p&gt;

&lt;p&gt;So, we're going to offer the next best thing: just focus the first element in our dropdown to read out the contents immediately. This means shifting keyboard focus (yes, visually impaired users tend to navigate navigate using a keyboard) from our menu button to our first link whenever &lt;code&gt;aria-expanded="true"&lt;/code&gt;. Of course, this only applies when revealing interactable elements like buttons or links, so it should&lt;/p&gt;

&lt;p&gt;Should be simple enough! Just add a call to &lt;code&gt;focus()&lt;/code&gt; whenever we expand the element, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// use firstElementChild to grab the first link&lt;/span&gt;
    &lt;span class="nx"&gt;dropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstElementChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aria-expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, this doesn't work super reliably when we have our fancy CSS transition. There's a chance we'll try to focus the first link while &lt;code&gt;visibility&lt;/code&gt; is still &lt;code&gt;hidden&lt;/code&gt;, which prevents our &lt;code&gt;focus()&lt;/code&gt; call from going through 😕&lt;/p&gt;

&lt;p&gt;Luckily, there's an easy way to "wait" on our CSS transition to finish before setting focus. We just need to listen for the &lt;code&gt;transitionend&lt;/code&gt; event on our dropdown like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transitionend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// instead of calling focus() in our 'click' listener,&lt;/span&gt;
    &lt;span class="c1"&gt;// we'll call it from here!&lt;/span&gt;
    &lt;span class="nx"&gt;dropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstElementChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this in place, we should get reliable link focusing with a matching screen reader output 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZQbrcvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bholmes.dev/assets/blog/show-hide-animation/show-hide-focus-first-link.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZQbrcvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bholmes.dev/assets/blog/show-hide-animation/show-hide-focus-first-link.gif" alt='VoiceOver output from hitting the toggle button. We see "Nav toggle, menu pop up collapsed, button" when expanded is false, and "Nav toggle, menu pop up expanded, button" when expanded is true'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finished product&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bholmesdev/embed/vYxKVgB?height=600&amp;amp;default-tab=result,js&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-this-to-your-favorite-framework"&gt;
  &lt;/a&gt;
  ⚙️ Applying this to your favorite framework
&lt;/h2&gt;

&lt;p&gt;We've covered a lot of ground using plain JS, but it's quick-and-easy to apply to any component framework!&lt;/p&gt;

&lt;p&gt;We just need a couple pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;an &lt;code&gt;expanded&lt;/code&gt; state variable&lt;/strong&gt; to keep track of showing / hiding&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;a callback to &lt;code&gt;focus()&lt;/code&gt; our first dropdown element on &lt;code&gt;transitionend&lt;/code&gt;.&lt;/strong&gt; For most frameworks, we can just attach a callback function to an element's &lt;code&gt;onTransitionEnd&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-react-solution"&gt;
  &lt;/a&gt;
  A simple React solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DropdownExample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setExpanded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focusFirstDropdownLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// if we apply this function to our dropdown,&lt;/span&gt;
    &lt;span class="c1"&gt;// the "target" should be a reference to the dropdown itself!&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstElementChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"toggle-dropdown"&lt;/span&gt;
          &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;haspopup&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
          &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Nav toggle"&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setExpanded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*toggle our "expanded" CSS class*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropdown expanded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*trigger our focus() once the dropdown's fade effect finishes*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onTransitionEnd&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;focusFirstDropdownLink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/projects"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty straightforward rewrite! The ability to bind our &lt;code&gt;focus()&lt;/code&gt; function to the &lt;code&gt;onTransitionEnd&lt;/code&gt; listener saves us a lot of work. We don't even need a &lt;code&gt;useRef&lt;/code&gt; to grab the element, in fact.&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/accessible-show-hide-react-4rv7m?file=/src/App.js"&gt;&lt;strong&gt;working sandbox demo&lt;/strong&gt;&lt;/a&gt; for you to try 🚀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svelte-example"&gt;
  &lt;/a&gt;
  Svelte example
&lt;/h3&gt;

&lt;p&gt;This should be equally trivial in Svelte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;    
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focusFirstDropdownLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// again, "target" should be a reference to our dropdown&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstElementChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle-dropdown"&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;{expanded}&lt;/span&gt; &lt;span class="na"&gt;aria-haspopup=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Nav toggle"&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; expanded = !expanded}&amp;gt;
        &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 448 512"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"bars"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--Note we can use class:expanded to bind our "expanded" CSS class to the "expanded" state variable--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dropdown"&lt;/span&gt; &lt;span class="na"&gt;class:expanded&lt;/span&gt; &lt;span class="na"&gt;on:transitionend=&lt;/span&gt;&lt;span class="s"&gt;{focusFirstDropdownLink}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/projects"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's another &lt;a href="https://svelte.dev/repl/daa482983cd84a199f34895cdd3a08f6?version=3.38.2"&gt;&lt;strong&gt;working sandbox demo&lt;/strong&gt;&lt;/a&gt; for you to try 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-a-little-something"&gt;
  &lt;/a&gt;
  Learn a little something?
&lt;/h2&gt;

&lt;p&gt;Glad to hear it! If you want more universal solutions like this, you can &lt;a href="https://tinyletter.com/bholmesdev"&gt;sign up for the web wizardry newsletter&lt;/a&gt; for some bi-weekly web sorcery 🔮&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>react</category>
      <category>svelte</category>
    </item>
    <item>
      <title>Some thoughts about productivity</title>
      <author>Burak Can Kahraman</author>
      <pubDate>Mon, 24 May 2021 22:25:58 +0000</pubDate>
      <link>https://dev.to/burakcank/some-thoughts-about-productivity-308k</link>
      <guid>https://dev.to/burakcank/some-thoughts-about-productivity-308k</guid>
      <description>&lt;p&gt;For the last couple of years, I have been in the Linux space and mostly tried to find the best distro, best file manager, best terminal etc. I was caught up in the loop of finding the best programs to handle a job. This approach, unless controlled, usually leads to low productivity in the long term.&lt;/p&gt;

&lt;p&gt;How so you might ask ? Well, this behavior is really relatable for some people. When I am talking about this subject, some of you might probably say, &lt;em&gt;"Oh yes I have been there"&lt;/em&gt;. In Linux world, there is even a term for this. &lt;em&gt;Ricing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ricing means tweaking the configuration of your working environment to suit your personal needs. At particular level, one might consider this useful, and it indeed is. There are some workflow approaches, shortcuts and others that helps the developer access files and folders faster, learn by muscle memory and perform some set of actions quicker. Past that particular level and you are now in the over-ricing zone. Where you are essentially tweaking every aspect of each program, work environment to your needs, but at the same time you are never satisfied so you keep tweaking and changing settings, configs and what not. It reduces your productivity and at the end of the day when you look back, you realize you have done nothing but tweaking some stuff to find the best work environment.&lt;/p&gt;

&lt;p&gt;This is what I call the loop &lt;em&gt;(referring to the Bandersnatch here)&lt;/em&gt;. You are in the &lt;em&gt;loop&lt;/em&gt;. You need to get out and you need to get sh*t done. Don't worry about using the best tool out there, don't try to find the absolute efficient program. Just get it done.&lt;/p&gt;

&lt;p&gt;This is in actuality a paradox. The paradox goes as such, &lt;em&gt;"The more choices you have, the less satisfied you are"&lt;/em&gt;. Seems about right when you think for a bit.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>linux</category>
    </item>
    <item>
      <title>Como transformar visual studio code em uma IDE [PT-Br]</title>
      <author>Gabriel Lamarth </author>
      <pubDate>Mon, 24 May 2021 22:24:43 +0000</pubDate>
      <link>https://dev.to/coodexpie/como-transformar-visual-studio-code-em-uma-ide-pt-br-3ale</link>
      <guid>https://dev.to/coodexpie/como-transformar-visual-studio-code-em-uma-ide-pt-br-3ale</guid>
      <description>&lt;h1&gt;
  &lt;a href="#suporte-para-linguagens"&gt;
  &lt;/a&gt;
  suporte para linguagens
&lt;/h1&gt;

&lt;p&gt;Abrindo o visual studio code (que aqui será chamado de vs code), selecione a opção mostrada na imagem, sem clicar nos nomes em azul.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTT1zk4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tllkx7pop07ptf17rkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTT1zk4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tllkx7pop07ptf17rkg.png" alt="pt 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A janela de extensões sera aberta&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QnSuoI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qutbwhexuwo4knd3b7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QnSuoI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qutbwhexuwo4knd3b7l.png" alt="pt 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecione as linguagens que você desejar instalar o suporte.&lt;/p&gt;

&lt;p&gt;eslint: javascript&lt;br&gt;
tslint: typescript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jbVN8Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8codtxvetvjoyd7kw8gz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jbVN8Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8codtxvetvjoyd7kw8gz.png" alt="pt 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No caso, irei instalar suporte para as linguagens python, javascript, html, css, javascript, c, c++ e c#. É sempre bom estar prevenido não é?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extenss%C3%B5es-extras"&gt;
  &lt;/a&gt;
  extenssões extras
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#beutify"&gt;
  &lt;/a&gt;
  beutify
&lt;/h2&gt;

&lt;p&gt;Deixar o código mais bonito é sempre bom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxVccLDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcbozljs8gzvnz0ndlze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxVccLDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcbozljs8gzvnz0ndlze.png" alt="pt 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-runner"&gt;
  &lt;/a&gt;
  code runner
&lt;/h2&gt;

&lt;p&gt;Com essa extensão, poderemos interpretar códigos no terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btCoDC-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbekqw1ozvmd8gzcbbvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btCoDC-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbekqw1ozvmd8gzcbbvm.png" alt="pt 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#instalando-extens%C3%B5es-essenciais"&gt;
  &lt;/a&gt;
  instalando extensões essenciais
&lt;/h1&gt;

&lt;p&gt;Primeiro vamos limpar a barra de pesquisa&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ueS4gJP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3z724lxjvd77k3tidlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueS4gJP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3z724lxjvd77k3tidlh.png" alt="pt 6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vemos as extenssões instaladas&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tA0xyWXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b7l1qtjdvpn16rp8xap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tA0xyWXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b7l1qtjdvpn16rp8xap.png" alt="pt 7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na barra de pesquisa, vamos escrever "code spell checker"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XLglhvgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goofd2b07nbjvxehjjd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XLglhvgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goofd2b07nbjvxehjjd8.png" alt="pt 8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essa extensão irá servir para auxiliar nos erros de escrita e dar nomes melhores às variáveis&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lRJJLSjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1xc3dbu7pbs93bhozva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRJJLSjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1xc3dbu7pbs93bhozva.png" alt="pt 9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com a extensão instalada, agora vamos instalar suporte ao português brasileiro, tanto na extensão quanto no proprio vs code.&lt;/p&gt;

&lt;p&gt;Pesquise "portuguese" na área de extenssões &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BzGyd5I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qwfqm4b1xw97wa7531p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BzGyd5I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qwfqm4b1xw97wa7531p.png" alt="pt 10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instale a extensão brazilian portuguese do code spell checker e o suporte fornecido pela microsoft.&lt;/p&gt;

&lt;p&gt;Com as extensões instaladas, a seguinte menssagem irá aparecer. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaAZFpED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djlw4yyki53muozildg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaAZFpED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djlw4yyki53muozildg1.png" alt="pt 11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basta selecionar "restart".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cores"&gt;
  &lt;/a&gt;
  cores
&lt;/h1&gt;

&lt;p&gt;Agora, já com o editor em português, vamos dar uma customizada no estilo e nas cores.&lt;/p&gt;

&lt;p&gt;Primeiro, vamos instalar o bracket pair colorizer, para adiscionar mais cores aos parenteses. Para isso, basta ir até a barra de pesquisa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBgB_47F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtqsbphq2vep0ud60oil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBgB_47F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtqsbphq2vep0ud60oil.png" alt="bcp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você pode escolher a verssão que você preferir.&lt;/p&gt;

&lt;p&gt;Vamos instalar o tema.&lt;/p&gt;

&lt;p&gt;Vá até o filtro, representado na imagem&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTfZWJjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rxuvp6ctdh5et0orov7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTfZWJjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rxuvp6ctdh5et0orov7.png" alt="filter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecione categorías -&amp;gt; themes&lt;/p&gt;

&lt;p&gt;O tema fica à seu critério. Eu particularmente escolhi o synthwave '84.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deixando-o-editor-inteligente"&gt;
  &lt;/a&gt;
  deixando o editor inteligente
&lt;/h1&gt;

&lt;p&gt;Vamos instalar agora o visual studio intelicode, para utilizarmos a auto-completação de código.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjDMF7oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfaqu0vhvsmi5p1vdhqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjDMF7oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfaqu0vhvsmi5p1vdhqc.png" alt="vsi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configurando"&gt;
  &lt;/a&gt;
  configurando
&lt;/h1&gt;

&lt;p&gt;Abra as configurações&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--itboniHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25paj6md8v9zjjgv1n5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--itboniHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25paj6md8v9zjjgv1n5w.png" alt="oc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ou prescione &lt;strong&gt;cntrl + ,&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pesquise por word wrap, e ative a opção a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLU_ZLYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5try04flnvom4png61zf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLU_ZLYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5try04flnvom4png61zf.png" alt="ww"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos ativar o tema.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qqFkJ_W4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwnb8vxie749c9zrcsoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqFkJ_W4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwnb8vxie749c9zrcsoy.png" alt="tm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, vamos ativar o autosave. Na opção "arquivos" ative a opção "salvar automaticamente"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ_4ea9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qelw5rcikz2ebo1w18mj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ_4ea9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qelw5rcikz2ebo1w18mj.png" alt="as"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por fim, vamos ativar a linguagem pt-br no code spell checker.&lt;/p&gt;

&lt;p&gt;Para isso, vá até a opção "extensões" na aba configurações.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnN7HP5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqwfy0vn4526kdnrfazz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnN7HP5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqwfy0vn4526kdnrfazz.png" alt="ex"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora, procure por "code spell checker"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umkOOwg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqoiivzau5yydpkmqf5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umkOOwg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqoiivzau5yydpkmqf5s.png" alt="csp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Altere a linguagem para pt-br&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2uuXdXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syjukqnfdsw5v82kybh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2uuXdXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syjukqnfdsw5v82kybh1.png" alt="tpb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dicas"&gt;
  &lt;/a&gt;
  dicas
&lt;/h1&gt;

&lt;p&gt;Pronto! Agorá você tem várias funcionalidádes legais para o seu editor de texto/IDE !&lt;/p&gt;

&lt;p&gt;Há uma gama enorma de extenssões extras além das que foram mostradas.&lt;/p&gt;

&lt;p&gt;Dentre elas, alguma merecem ser citadas:&lt;/p&gt;

&lt;p&gt;Material icons (tema de ícones)&lt;/p&gt;

&lt;p&gt;Node.js Exec (adiciona a função de executar um arquivo node prescinando &lt;strong&gt;f8&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Live server (Transmite um arquivo html ao vivo para o navegador, permitindo também css e javascript em arquivos separados)&lt;/p&gt;

&lt;p&gt;Git extension pack (adiciona uma série de funcionalidades relacioadas ao git)&lt;/p&gt;

&lt;p&gt;Entre outras.&lt;/p&gt;

&lt;p&gt;Faça uma breve  pesquisa para  saber as que melhor se encaixam no seu workflow.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>react-router: Three Route Rendering Methods (component, render, and children)</title>
      <author>Raynaldo Sutisna</author>
      <pubDate>Mon, 24 May 2021 22:14:00 +0000</pubDate>
      <link>https://dev.to/raaynaldo/react-router-three-route-rendering-methods-component-render-and-children-2eng</link>
      <guid>https://dev.to/raaynaldo/react-router-three-route-rendering-methods-component-render-and-children-2eng</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In the last post, I talked about &lt;a href="https://reactrouter.com/"&gt;react-router&lt;/a&gt; setup tutorial. If you don't read the previous post, click it &lt;a href="https://dev.to/raaynaldo/react-router-setup-5gml"&gt;here&lt;/a&gt;!. I want to add several important topics about Route Rendering Methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-rendering-methods"&gt;
  &lt;/a&gt;
  Route Rendering methods
&lt;/h2&gt;

&lt;p&gt;There are several ways to render Component or Tag HTML with a &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;. I used this way in my last post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing is wrong with this snippet, and the &lt;code&gt;&amp;lt;Home/&amp;gt;&lt;/code&gt; component will be rendered. However, you will not have access to &lt;a href="https://reactrouter.com/web/api/Route/route-props"&gt;three route props&lt;/a&gt; that are &lt;a href="https://reactrouter.com/web/api/match"&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://reactrouter.com/web/api/location"&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://reactrouter.com/web/api/history"&gt;&lt;code&gt;history&lt;/code&gt;&lt;/a&gt;. I will talk about these three props in the next post. Stay tuned! So, let's take a look at how we can access those props if we are using these three route rendering methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-component-raw-ltroute-componentgt-endraw-"&gt;
  &lt;/a&gt;
  1. Component &lt;code&gt;&amp;lt;Route component/&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The first rendering method is very simple. We just need to put the component as a prop in the &lt;code&gt;Route&lt;/code&gt; Component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lepIVjW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5gkz2b39b9hwt6972x9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lepIVjW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5gkz2b39b9hwt6972x9.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
There you go. You will get these props.&lt;/p&gt;

&lt;p&gt;Wait. How we can pass another prop to the component? The answer is we cannot use this rendering method. However, we can use &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-render-raw-ltroute-rendergt-endraw-"&gt;
  &lt;/a&gt;
  2. Render &lt;code&gt;&amp;lt;Route render/&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Using this rendering method, you will have access to use an inline function, and you can put another prop to your component. You can optionally pass the route props as function parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;
 &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt;
 &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routeProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Contact&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;routeProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;&amp;lt;Route render/&amp;gt;&lt;/code&gt;, you can also render HTML tag, and it does not require to render a component like &lt;code&gt;&amp;lt;Route component/&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;
 &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt;
 &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Adress: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I personally prefer to use this rendering method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-children-raw-ltroute-children-gt-endraw-"&gt;
  &lt;/a&gt;
  3. Children &lt;code&gt;&amp;lt;Route children /&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Basically, children and render methods are the same. Both of them receive a function, but if you are using children, it will be rendered if the path is not matched. Also, you should make sure that you are not using &lt;code&gt;&amp;lt;switch&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;About&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;About&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/portfolio"&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, when users hit the &lt;code&gt;/&lt;/code&gt; path, &lt;code&gt;&amp;lt;Portfolio/&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Contact/&amp;gt;&lt;/code&gt; components will be rendered because they use the children render method.&lt;br&gt;
To be honest, I'm not sure when I should use this method on a real project, but you can see the documentation &lt;a href="https://reactrouter.com/web/api/Route/children-func"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclucion"&gt;
  &lt;/a&gt;
  Conclucion
&lt;/h2&gt;

&lt;p&gt;These are three route rendering methods that you can use. At first, I was confused why there are so many ways to render the route. After I read the documentation several times, I got my "AHA" moment. I hope it would be helpful, and please leave a comment for questions or feedback! Happy Coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
