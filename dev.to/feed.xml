<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Solution: Furthest Building You Can Reach</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 26 Apr 2021 09:33:43 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-furthest-building-you-can-reach-1m24</link>
      <guid>https://dev.to/seanpgallivan/solution-furthest-building-you-can-reach-1m24</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/furthest-building-you-can-reach/discuss/1177243"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1642-medium-furthest-building-you-can-reach"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/furthest-building-you-can-reach/"&gt;Leetcode Problem #1642 (&lt;em&gt;Medium&lt;/em&gt;): Furthest Building You Can Reach&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.&lt;/p&gt;

&lt;p&gt;You start your journey from building 0 and move to the next building by possibly using bricks or ladders.&lt;/p&gt;

&lt;p&gt;While moving from building i to building i+1 (0-indexed),&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.&lt;/li&gt;
&lt;li&gt; If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Starting at building 0, you can follow these steps:&lt;br&gt;- Go to building 1 without using ladders nor bricks since 4 &amp;gt;= 2.&lt;br&gt;- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 &amp;lt; 7.&lt;br&gt;- Go to building 3 without using ladders nor bricks since 7 &amp;gt;= 6.&lt;br&gt;- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 &amp;lt; 9.&lt;br&gt;It is impossible to go beyond building 4 because you do not have any more bricks or ladders.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRyj8_rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://assets.leetcode.com/uploads/2020/10/27/q4.gif" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;heights = [14,3,19,3], bricks = 17, ladders = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= heights.length &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= heights[i] &amp;lt;= 10^6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= bricks &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= ladders &amp;lt;= heights.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The first realization should be that we always want to use our ladders to their best effect: where they would save us the most amount of bricks. Unfortunately, we can't just save the ladders for the largest gaps in the building heights, because we may not be able to reach them by using bricks.&lt;/p&gt;

&lt;p&gt;Since we can't find out how far we can go until we figure out where to place the ladders, and we can't figure out where to put the ladders until we see how far we can go, we'll have to move the ladders around as we go in order to maintain their maximum effect.&lt;/p&gt;

&lt;p&gt;To put this in terms of a coding solution, as we iterate through the building heights array (&lt;strong&gt;H&lt;/strong&gt;), we'll want to continuously make sure that the largest &lt;strong&gt;L&lt;/strong&gt; number of positive differences are occupied with ladders, allowing us the best use of our &lt;strong&gt;B&lt;/strong&gt; number of bricks.&lt;/p&gt;

&lt;p&gt;In general, this means that we should start iterating through &lt;strong&gt;H&lt;/strong&gt;, ignoring any difference (&lt;strong&gt;diff&lt;/strong&gt;) that is &lt;strong&gt;0&lt;/strong&gt; or less, and place a ladder whenever we have a positive difference. Once we've used up all the ladders, then we can start using bricks. If we come across a &lt;strong&gt;diff&lt;/strong&gt; that is larger than the smallest ladder that we're currently using, we should replace that ladder with bricks and move the ladder forwad to the current &lt;strong&gt;diff&lt;/strong&gt;. Otherwise we should use bricks for the current &lt;strong&gt;diff&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The second big realization at this point is that we need a &lt;strong&gt;min-heap&lt;/strong&gt; or &lt;strong&gt;min priority queue&lt;/strong&gt; in order to keep track of the heights of the ladders in use, so that we can always take the smallest one, thus keeping the ladders always on the largest diff values.&lt;/p&gt;

&lt;p&gt;If at any point we run out bricks, then we can't reach the next building and should &lt;strong&gt;return i&lt;/strong&gt;. If we're able to reach the end of &lt;strong&gt;H&lt;/strong&gt; without running out of bricks, we can &lt;strong&gt;return H.length - 1&lt;/strong&gt;, signifying that we reached the last building.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where N is the length of H&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(L)&lt;/strong&gt; to keep track of L number of ladder lengths&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The Javascript &lt;strong&gt;MinPriorityQueue()&lt;/strong&gt; npm package isn't as efficient as a &lt;strong&gt;min-heap&lt;/strong&gt;, but it is much more succinct, so I've included both versions of code for comparison.&lt;/p&gt;

&lt;p&gt;For C++, the &lt;strong&gt;priority_queue&lt;/strong&gt; defaults to a max order, so we can just invert the sign on the &lt;strong&gt;diff&lt;/strong&gt; values before insertion to effectively turn it into a min priority queue instead.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-minpriorityqueue"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ MinPriorityQueue():&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;furthestBuilding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MinPriorityQueue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-minheap"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Min-Heap:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;furthestBuilding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[,]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
        &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;furthestBuilding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;furthestBuilding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;H&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;L&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;H&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;H&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;H&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;L&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="no"&gt;L&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peek&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="no"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;furthestBuilding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                    &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Animating the TikTok Record Button in React &amp; Framer Motion</title>
      <author>Sam Piggott</author>
      <pubDate>Mon, 26 Apr 2021 09:29:05 +0000</pubDate>
      <link>https://dev.to/sam_piggott/animating-the-tiktok-record-button-in-react-framer-motion-4he9</link>
      <guid>https://dev.to/sam_piggott/animating-the-tiktok-record-button-in-react-framer-motion-4he9</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UnTBtDDyN2M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The TikTok record button is a deceivingly complicated UI element with some interesting moving parts, so I thought it would be perfect for a tutorial. In the guide above, we'll build a fully animated record button using nothing but React, Framer Motion (a fantastic animation library), and TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-files"&gt;
  &lt;/a&gt;
  Project Files
&lt;/h2&gt;

&lt;p&gt;All the project files are available to download and use yourself over on my website, &lt;a href="https://codesnap.io/course/react-bites/tiktok-record-button"&gt;CodeSnap.io.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/agitated-shockley-cdzuy"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;Thanks for watching - any and all feedback is greatly appreciated, and please share it around if you think it'll be useful to anybody else. If you're interested in learning more, I've got loads more video and written content over on my website, &lt;a href="https://codesnap.io"&gt;CodeSnap.io.&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basics of Kotlin - Part 4</title>
      <author>Chetan</author>
      <pubDate>Mon, 26 Apr 2021 08:44:53 +0000</pubDate>
      <link>https://dev.to/csj5483/basics-of-kotlin-part-4-2h81</link>
      <guid>https://dev.to/csj5483/basics-of-kotlin-part-4-2h81</guid>
      <description>&lt;p&gt;In the last article, we learnt about some basic concepts of Kotlin like conditional statements, loops and jump statements. Before reading this article make sure you had read the last article &lt;a href="https://dev.to/csj5483/basics-of-kotlin-part-3-1nia"&gt;Basics of Kotlin- Part 3&lt;/a&gt;. Let's learn more about Kotlin.&lt;/p&gt;

&lt;h3&gt;Functions:&lt;/h3&gt;

&lt;p&gt;Functions in any programming language is a group of an interrelated block of code that performs a specific task. Functions allow us to break a program into various small sub-module. Functions increase the readability of code, reusability of code, and makes a program easy to manage.&lt;/p&gt;

&lt;p&gt;In Kotlin &lt;b&gt;fun&lt;/b&gt; keyword is used to declare the function. There are two types of functions in Kotlin depending on whether it is available in the standard library or defined by the user.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;Standard library function:&lt;/h4&gt; Standard library function is built-in library functions that can be defined implicitly and available for use.&lt;/li&gt;&lt;/ul&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;){  
var number = 16
var result = Math.sqrt(number.toDouble())  
print("$result")  
}
Output : 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above code snippet :&lt;br&gt;
&lt;strong&gt;sqrt()&lt;/strong&gt; is a function defined in the library which returns the square root of a number.&lt;br&gt;
&lt;strong&gt;print()&lt;/strong&gt; function prints message to a standard output stream.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;User-Defined Functions:&lt;/h4&gt; User-defined functions are created by the user and can be used for advanced programming. Here functions are declared by using &lt;b&gt;fun&lt;/b&gt; keyword.&lt;/li&gt;&lt;/ul&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fun main(){
   functionName()
}
fun functionName(){
     //body of function
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we call the function into the main function to run codes inside the body functionName().&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Template for function in Kotlin:
fun functionName(argument name:argument type):return type{
      //body of function
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Below is an example of a user-defined function&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fun main() {
  val x=6
  val y=8
  println("Sum of $x and $y is "+add(x,y))
}
fun add(x:Int, y:Int):Int{
    return x+y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we create a function &lt;b&gt;add&lt;/b&gt; which is taking two arguments of int type and return type of this function is also int. We had called this function inside our main function.&lt;/p&gt;

&lt;h3&gt;Tail-recursion:&lt;/h3&gt;

&lt;p&gt;Kotlin supports a style of functional programming known as tail recursion. When we try to do a large number of recursive function call, we get an error &lt;b&gt;java.lang.StackOverflowError&lt;/b&gt;. To handle this Kotlin have tailrec function. When a function is marked with the &lt;b&gt;tailrec&lt;/b&gt; modifier and meets the required form, the compiler optimizes out the recursion, leaving behind a fast and efficient loop based version instead. Tail recursion follows one rule for implementation. This rule is as follow:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The recursive call must be the last call of the method&lt;/b&gt;. To declare a recursion as tail recursion we need to use tailrec modifier before the recursive function.&lt;/p&gt;

&lt;p&gt;For example, to calculate the factorial of any number we can use the below method:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;) {  
    val number = 10  
    val result: Long  
    result = factorial(number)  
    println("Factorial of $number = $result")  
}  

tailrec fun factorial(n: Int, run: Int = 1): Long {  
    return if (n == 1){  
        run.toLong()  
    } else {  
        factorial(n-1, run*n)  
    }  
}
Output : 
Factorial of 10 = 3628800
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;Lambda Expressions:&lt;/h4&gt;

&lt;p&gt;Lambda is a function that has no name. Lambda is defined with curly braces {} which takes variable as a parameter (if any) and body of the function. The body of the function is written after the variable (if any) followed by the -&amp;gt; operator.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Syntax of lambda expression:
{ variable -&amp;gt; body_of_function}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;b&gt;Lambda expression syntax&lt;/b&gt;&lt;br&gt;
The full syntactic form of lambda expressions is as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;val sum: (Int, Int) -&amp;gt; Int = { x: Int, y: Int -&amp;gt; x + y }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;A lambda expression is always surrounded by curly braces.&lt;/li&gt;
&lt;li&gt;Parameter declarations in the full syntactic form go inside curly braces and have optional type annotations.&lt;/li&gt;
&lt;li&gt;The body goes after an -&amp;gt; sign.&lt;/li&gt;
&lt;li&gt;If the inferred return type of the lambda is not Unit, the last (or possibly single) expression inside the lambda body is treated as the return value.&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Program for adding two numbers using lambda
fun main(args: Array&amp;lt;String&amp;gt;) {  
    println(sum(5,6))
}  
val sum = { x: Int, y: Int -&amp;gt; x + y }
Output : 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Exception Handling in Kotlin:&lt;/h3&gt;

&lt;p&gt;Exception in programming is defined as a run time problem that occurs in a program and leads to the termination of the program. Exceptions can occur due to less memory space, array out of bound, conditions like division by zero. To solve this type of error in the program exception handling is used.&lt;/p&gt;

&lt;p&gt;Exception handling is defined as a process which handles the runtime problems and also maintains the flow of the program during execution.&lt;/p&gt;

&lt;p&gt;In Kotlin all exception classes are descendants of class Throwable. Kotlin uses the 'throw' expression to throw an exception object.&lt;/p&gt;

&lt;p&gt;There are four types of keywords used in exception handling. These are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;try:&lt;/b&gt; try block contains a block of statements which might create the exception. It is always followed by either catch or finally or both.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;catch:&lt;/b&gt; It is used to catch an exception thrown from the try block.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;finally:&lt;/b&gt; It is used to checks whether the exception is handled or not.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;throw:&lt;/b&gt; It is used to throw an exception explicitly.&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example of try-catch
fun main (args: Array&amp;lt;String&amp;gt;){  
    try {   
        val res =  9/ 0  

    } catch (e: ArithmeticException) {  
        println(e)  
    }
}
Output :
java.lang.ArithmeticException: / by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can throw an exception explicitly by using the throw keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example of try-catch using throw keyword
fun main (args: Array&amp;lt;String&amp;gt;){  
    try {   
       println("Inside throw")
       throw Exception("Exception throwed")
} catch (e: Exception) {  
        println(e)  
    }
}
Output:
Inside throw 
java.lang.Exception: Exception throwed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for this article. We will continue in the next article.&lt;/p&gt;

&lt;p&gt;Happy Learning!&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>🧢 Stefan's Web Weekly #16</title>
      <author>Stefan Judis</author>
      <pubDate>Mon, 26 Apr 2021 08:25:56 +0000</pubDate>
      <link>https://dev.to/stefanjudis/stefan-s-web-weekly-16-4o4c</link>
      <guid>https://dev.to/stefanjudis/stefan-s-web-weekly-16-4o4c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-web-weekly-16"&gt;
  &lt;/a&gt;
  Welcome to Web Weekly 16!
&lt;/h2&gt;

&lt;p&gt;Hello friends! I just came back from a 40km bike ride to visit a friend who lives at Müggelsee, Berlin. It's such a lovely area! There are places in Berlin that feel like vacation, and that's one of them. &lt;/p&gt;

&lt;p&gt;It was a perfect Sunday. I hope you had a great weekend yourself!&lt;/p&gt;

&lt;p&gt;This week's Web Weekly includes...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;challenges of programming language design&lt;/li&gt;
&lt;li&gt;tips to make your language more inclusive&lt;/li&gt;
&lt;li&gt;a CSS property to style checkboxes and radio buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... and, as always, GitHub repositories, a new Tiny Helper and some music.&lt;/p&gt;

&lt;p&gt;Ready? Steady. Go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-there-be-another-http-method"&gt;
  &lt;/a&gt;
  Should there be another HTTP method?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bWDzp29D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/75TYreF8k51uqGI2VWjL8j/e02de03bca5cd217c30043e4d098d98e/Screenshot_2021-04-15_at_21.07.14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bWDzp29D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/75TYreF8k51uqGI2VWjL8j/e02de03bca5cd217c30043e4d098d98e/Screenshot_2021-04-15_at_21.07.14.png" alt="Enter HTTP search – A proposed new HTTP method that's intended to solve this problem."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Living in a RESTful world, I regularly use the HTTP methods &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;. There are more methods (&lt;code&gt;OPTIONS&lt;/code&gt; anyone?), but should there be a new one – &lt;code&gt;SEARCH&lt;/code&gt;? Tim Perry goes into HTTP details and explains the &lt;code&gt;SEARCH&lt;/code&gt; method proposal.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://httptoolkit.tech/blog/http-search-method/"&gt;Learn about SEARCH&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hidden-javascript-console-methods-in-chromefirefox"&gt;
  &lt;/a&gt;
  "Hidden" JavaScript console methods in Chrome/Firefox
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y196e2hX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4AIxvE4nq9YTszTKPcBZ9t/d35ed7173caa4b03c61ddf4bdef2826b/Screenshot_2021-04-18_at_20.16.12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y196e2hX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4AIxvE4nq9YTszTKPcBZ9t/d35ed7173caa4b03c61ddf4bdef2826b/Screenshot_2021-04-18_at_20.16.12.png" alt="Chrome JavaScript console showing the usage of monitorEvents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week &lt;a href="https://twitter.com/stefanjudis/status/1382936339126050816?s=20"&gt;I learned about the &lt;code&gt;monitorEvents&lt;/code&gt; method&lt;/a&gt;. It's available in Chrome's DevTool JavaScript console and offers a handy way to get information on an element's triggered JavaScript events. This discovery encouraged me to look at what's available in Chrome's and Firefox' JavaScript console.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://developer.chrome.com/docs/devtools/console/utilities/"&gt;Chrome's console methods&lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Helpers"&gt;Firefox' console methods&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-an-accidental-imagemagick-discovery-led-to-speakerdeckcom"&gt;
  &lt;/a&gt;
  How an accidental imagemagick discovery led to speakerdeck.com
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYsfOvuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4q59DjQJXIwfRH1UqLBZwV/78e67d557f6386a044cf11d22a094ece/Screenshot_2021-04-25_at_21.55.55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYsfOvuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4q59DjQJXIwfRH1UqLBZwV/78e67d557f6386a044cf11d22a094ece/Screenshot_2021-04-25_at_21.55.55.png" alt="Speaker Deck started as a happy accident. I mucked up a command line call to imagemagick and passed in the path to a PDF instead of an image. To my surprise, an image was returned. "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;John Nunemaker shared his story of building and selling speakerdeck.com to GitHub to later buy it back and then sell it again. 🤯 It's a fascinating read on building products with many learnings and advice.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://www.johnnunemaker.com/speakerdeck/"&gt;Read John' story&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenge-of-designing-a-programming-language"&gt;
  &lt;/a&gt;
  The challenge of designing a programming language
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzINAWDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/1xqqejX9yAPO2WxoKO4Q28/3a32610d2ba2cb358ce45d9fe9b3b5b3/Screenshot_2021-04-25_at_21.27.04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzINAWDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/1xqqejX9yAPO2WxoKO4Q28/3a32610d2ba2cb358ce45d9fe9b3b5b3/Screenshot_2021-04-25_at_21.27.04.png" alt="Incomplete list of mistakes in the design of CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Designing a programming language is hard! And it's particularly tough when the language is used on the web because then things are there to stay. Browsers and devices browsing the web are not following any versioning. If you ever thought "hmm, that's odd" when writing CSS, you will enjoy this list of "official" CSS design mistakes.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://wiki.csswg.org/ideas/mistakes"&gt;Learn about CSS design mistakes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-language-we-use-matters"&gt;
  &lt;/a&gt;
  The language we use matters
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htENkVPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/52c0HW6yjoz6WEd4jYFO4x/9b249396d46be5cc29f84037c6edcedb/Screenshot_2021-04-21_at_07.38.55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htENkVPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/52c0HW6yjoz6WEd4jYFO4x/9b249396d46be5cc29f84037c6edcedb/Screenshot_2021-04-21_at_07.38.55.png" alt="Language is ever-changing, so eliminating ableism from your vocabulary will be an ongoing process rather than a static victory. You may stumble, but checking in with disabled people is an effective way to find your footing and continuing to build a more inclusive vocabulary."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way we speak and the words we use do not only directly impact others but also how we think. The BBC published an eye-opening article on ableist language and its effects.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://www.bbc.com/worklife/article/20210330-the-harmful-ableist-language-you-unknowingly-use"&gt;Discover ableist language&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nerdy-emoji-details"&gt;
  &lt;/a&gt;
  Nerdy emoji details
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qpHSyjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3HNkrWJOmpSFtj1xROQPJK/e195cde2ae14b2d2d267408c99126107/Screenshot_2021-04-25_at_22.11.14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qpHSyjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3HNkrWJOmpSFtj1xROQPJK/e195cde2ae14b2d2d267408c99126107/Screenshot_2021-04-25_at_22.11.14.png" alt="I thought it might be fun sharing a few nitty-gritty details of how this “biggest innovation in human communication since the invention of the letter 🅰️” works under the hood."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's nothing better than a well-written article about Unicode. Nikita Prokopov explains nitty-gritty emoji details. Highly recommended!&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://tonsky.me/blog/emoji/"&gt;Learn how emojis work&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-newsletter-about-accessibility"&gt;
  &lt;/a&gt;
  A newsletter about accessibility
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu4fTgex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3x6zstoKGvoKVxKaY5dS6g/3dde56dc9e4e5f097803e652151a0f53/Screenshot_2021-04-25_at_23.06.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu4fTgex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3x6zstoKGvoKVxKaY5dS6g/3dde56dc9e4e5f097803e652151a0f53/Screenshot_2021-04-25_at_23.06.40.png" alt="Add punctuation to you your alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I found about Chris Ashton's accessibility newsletter "frequent11y" and subscribed right away. I learned quite a lot from his last edition.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://ashton.codes/week11y-issue-72/"&gt;Read the last weekly edition&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colorful-checkboxesradios-are-on-their-way"&gt;
  &lt;/a&gt;
  Colorful checkboxes/radios are on their way
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HW1746N2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/7kpGXJXcZUwHyy3fSi4pm6/b330063a062f70e02d9e2ebe4c226bea/Screenshot_2021-04-22_at_20.27.09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HW1746N2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/7kpGXJXcZUwHyy3fSi4pm6/b330063a062f70e02d9e2ebe4c226bea/Screenshot_2021-04-22_at_20.27.09.png" alt="A purple radio and checkbox input"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"On brand" form controls are important to many people. While I think it's not a big deal when checkboxes are not matching the website style guide, I implemented many custom controls for precisely that reason. Luckily, there's a new CSS property (&lt;code&gt;accent-color&lt;/code&gt;) on the horizon. It defines the highlight color of radios and checkboxes. 🎉&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://www.stefanjudis.com/snippets/how-to-style-and-define-the-color-of-radio-and-checkbox-inputs/"&gt;Learn more about accent-color&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-beauty-of-evergreen-resources"&gt;
  &lt;/a&gt;
  The beauty of evergreen resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQDX1kfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4nCtYY9hm82sHY6SdHaL14/b2529aec524e1674d7a384fe74036d4a/Screenshot_2021-04-25_at_21.09.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQDX1kfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4nCtYY9hm82sHY6SdHaL14/b2529aec524e1674d7a384fe74036d4a/Screenshot_2021-04-25_at_21.09.21.png" alt="Timeless Web Dev Articles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many web development articles become irrelevant quickly, but occasionally there are some evergreen gems. It's a valuable habit to bookmark these articles (&lt;a href="https://www.stefanjudis.com/resources/"&gt;find my favorites online&lt;/a&gt;). I came across Chris Coyier's list of timeless articles, and it's worth a look (and bookmark).&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://css-tricks.com/timeless-web-dev-articles/"&gt;Discover timeless articles&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-difficulties-of-finding-the-right-job"&gt;
  &lt;/a&gt;
  The difficulties of finding the right job
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5O6rqWUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/7vzubkV4orOH2PWYS4tpVs/a4dca62c1349a1d6456c2b1ed8495c40/Screenshot_2021-04-25_at_22.05.41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5O6rqWUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/7vzubkV4orOH2PWYS4tpVs/a4dca62c1349a1d6456c2b1ed8495c40/Screenshot_2021-04-25_at_22.05.41.png" alt="That's where our story starts. This post will include lessons I learned as a job seeker. As well as patterns I hope companies will address."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finding a job that fits is difficult. Interviews are stressful and not always fair. Laurie Barth describes her experience of looking for her next opportunity (she ended up at Netflix). Her article includes valuable insights for interviewees but also hiring managers like myself.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://laurieontech.com/posts/job-search/"&gt;Read Laurie's lessons learned&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reader-shout-out"&gt;
  &lt;/a&gt;
  Reader shout out 💙
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CPy_wIxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/GZngAFhDWAhvZAyn0VGEF/f49c2008c63f0a9d167571641b40ec2a/Screenshot_2021-04-25_at_22.34.23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CPy_wIxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/GZngAFhDWAhvZAyn0VGEF/f49c2008c63f0a9d167571641b40ec2a/Screenshot_2021-04-25_at_22.34.23.png" alt="Three avatars with the word Thank you below"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chris Ashton, Wojtek Jeremy Połowniak and @antodev89 not only shared my newsletter on social media, but they also agreed to be quoted on my site. Thank you so much, friends!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-new-tiny-helper"&gt;
  &lt;/a&gt;
  A new Tiny Helper
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3AibTRpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/2v7BEAmXCtMM8EYX5SkQIQ/370fe4c6790a8232800ef1fae5d6823f/Screenshot_2021-04-25_at_22.37.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3AibTRpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/2v7BEAmXCtMM8EYX5SkQIQ/370fe4c6790a8232800ef1fae5d6823f/Screenshot_2021-04-25_at_22.37.15.png" alt="Cumulative Layout Shift Debugger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cumulative Layout Shift (CLS) is one of Google Web Vitals metrics. The CLS debugger visualizes a website's layout shifts to make debugging easier.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://webvitals.dev/cls?ref=tiny-helpers"&gt;Debug CLS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find more single-purpose online tools on &lt;a href="https://tiny-helpers.dev/"&gt;tiny-helpers.dev&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-useful-projects-to-have-a-look-at"&gt;
  &lt;/a&gt;
  Three useful projects to have a look at
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/argyleink/transition.css"&gt;argyleink/transition.css&lt;/a&gt; – Drop-in CSS transitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/git-tips/tips"&gt;git-tips/tips&lt;/a&gt; – Most commonly used git tips and tricks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RH12503/triangula"&gt;RH12503/triangula&lt;/a&gt; – Generate high-quality triangulated art from images.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-quote-to-think-about"&gt;
  &lt;/a&gt;
  A quote to think about
&lt;/h2&gt;

&lt;p&gt;This week's quote comes from Mattias Ott. &lt;a href="https://matthiasott.com/notes/no-wrong-notes"&gt;He shared his thoughts on personal websites&lt;/a&gt;. There's no right or wrong, good or bad... your website belongs to you, and you can do whatever you want with it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A personal website ain't got no wrong words.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-song-that-makes-you-stop-coding"&gt;
  &lt;/a&gt;
  A song that makes you stop coding
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6KJlIXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/2nXecFa4NzScmXy1QClBAj/3e11e319c0f591c1f182da74ac1582f6/Screenshot_2021-04-25_at_22.45.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6KJlIXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/2nXecFa4NzScmXy1QClBAj/3e11e319c0f591c1f182da74ac1582f6/Screenshot_2021-04-25_at_22.45.52.png" alt="Marbert Rocel - Catch a bird cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week's song is another festival memory. 🙈&lt;/p&gt;

&lt;p&gt;Years ago, I was at the German Fusion festival. It was a bright and sunny morning. The dance floors were still full, and people tried to decide if they should continue dancing or instead get some rest after a magical sleepless night. &lt;/p&gt;

&lt;p&gt;Marbert Rocel entered the stage, and their funky and fun beats became my soundtrack of this festival. So good!&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://www.youtube.com/watch?v=D2PJ3Oi_VmM"&gt;Listen to "Mr. Beat"&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h2&gt;

&lt;p&gt;And that's a wrap for the sixteenth Web Weekly! If you enjoy my newsletter, I'd love you to tell others about it. ♥️&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/intent/tweet?text=I%20like%20@stefanjudis%20weekly%20newsletter&amp;amp;url=https://www.stefanjudis.com/blog/web-weekly-16/"&gt;Share it on Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Forward it to someone who might like it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're not a subscriber, &lt;a href="https://www.stefanjudis.com/newsletter/"&gt;you can change that&lt;/a&gt;! 😉&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Stay safe, and I'll talk to you next week!&lt;/strong&gt; 🎉 👋&lt;/p&gt;

&lt;p&gt;PS. I heard the cool kids use RSS. You can find &lt;a href="https://www.stefanjudis.com/feeds/"&gt;multiple feeds on my site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Eye and Eye</title>
      <author>Yared Henriquez Blanquicett</author>
      <pubDate>Mon, 26 Apr 2021 08:10:25 +0000</pubDate>
      <link>https://dev.to/yared17/eye-and-eye-2396</link>
      <guid>https://dev.to/yared17/eye-and-eye-2396</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/yared17/embed/RwKdbMx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>HTML+CSS - is it worth to start?</title>
      <author>Yuri Filatov</author>
      <pubDate>Mon, 26 Apr 2021 07:49:45 +0000</pubDate>
      <link>https://dev.to/filatovv/html-css-is-it-worth-to-start-4d3c</link>
      <guid>https://dev.to/filatovv/html-css-is-it-worth-to-start-4d3c</guid>
      <description>&lt;p&gt;If you are a beginner, you face to some problems such as &lt;strong&gt;Which language to choose"&lt;/strong&gt; and so on. Then you discover &lt;em&gt;(hopefully)&lt;/em&gt; that HTML and CSS are the easiest to "learn" &lt;em&gt;(I really try to avoid this word)&lt;/em&gt; and the creativiest direction at the same time, cause it is built on design and its solution. But then happens this: you discover that experts say nothing good about it and moreover it is not the programming lanuage at all..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-to-do"&gt;
  &lt;/a&gt;
  So... What to do?
&lt;/h3&gt;

&lt;p&gt;HTML and CSS can be names as &lt;strong&gt;base&lt;/strong&gt; or &lt;strong&gt;foundation&lt;/strong&gt; for real web development. You can try your best building you first simple website using just notepad app. Nobody says it's bad, if you study HTML and CSS, if it is not the end of your self-development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easy to learn. Each tag is understandable, the structure is usual for everyone.&lt;/li&gt;
&lt;li&gt;A lot of books are free available on the Internet to study or to find the meaning of each tag.&lt;/li&gt;
&lt;li&gt;Creativity. That won't be boring, I promise.&lt;/li&gt;
&lt;li&gt;Can be studied to check if programming is yours. If it is hard to you, then other languages will be impossible to you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, first of all if you try HTML and CSS forget about templates on the Internet. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The goal - to make yours. (individuality) &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#helpful-online-apps-to-create-your-website-layout"&gt;
  &lt;/a&gt;
  Helpful online apps to create your website layout
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://moqups.com"&gt;Moqups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.uxpin.com"&gt;UXPin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.figma.com"&gt;Figma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#where-to-make"&gt;
  &lt;/a&gt;
  Where to make?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Chrome Dev Tools - F12&lt;/li&gt;
&lt;li&gt;IDE: Intellij IDEA&lt;/li&gt;
&lt;li&gt;IDE: Webstorm&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start today, don't leave it until tomorrow and you will see that there is nothing hard. After HTML and CSS your direction will be PHP, JS and databases, so you can be a competitive web developer.&lt;/p&gt;

&lt;p&gt;The question I put into the heading is for you. If you are interested to be a web developer in the future, then of course, as a beginner you have to try. &lt;/p&gt;

&lt;p&gt;Good luck in your job!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to deploy a MERN Stack Application to the Server 🚀 | Video Tutorials</title>
      <author>Chaoo Charles</author>
      <pubDate>Mon, 26 Apr 2021 07:37:49 +0000</pubDate>
      <link>https://dev.to/chaoocharles/how-to-deploy-a-mern-stack-application-to-the-server-video-tutorials-56jk</link>
      <guid>https://dev.to/chaoocharles/how-to-deploy-a-mern-stack-application-to-the-server-video-tutorials-56jk</guid>
      <description>&lt;p&gt;Hello devs, in the following two video tutorials we are going to deploy a MERN backend(&lt;code&gt;node.js app&lt;/code&gt;) to &lt;code&gt;heroku&lt;/code&gt; and a MERN frontend(&lt;code&gt;React app&lt;/code&gt;) to &lt;code&gt;netlify&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case you are interested in learning how to create a &lt;code&gt;complete MERN stack app&lt;/code&gt; (&lt;code&gt;CRUD operations&lt;/code&gt; with &lt;code&gt;Auth&lt;/code&gt; and &lt;code&gt;deployment&lt;/code&gt;), you can watch the entire series on my channel &lt;a href="https://youtube.com/playlist?list=PL63c_Ws9ecIQkH5xD6JW4cf2VporjzSRW"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions you can leave them at the comment section below or find me on &lt;a href="https://twitter.com/ChaooCharles"&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy and always stay awesome 💙&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-deploying-the-backend"&gt;
  &lt;/a&gt;
  1. DEPLOYING THE BACKEND
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/R49qFTftImQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-deploying-the-frontend"&gt;
  &lt;/a&gt;
  2. DEPLOYING THE FRONTEND
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hw-Ki84QXmA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A React Hook to Animate the Page (Document) Title and Favicon</title>
      <author>Chris Frewin</author>
      <pubDate>Mon, 26 Apr 2021 07:26:07 +0000</pubDate>
      <link>https://dev.to/fullstackchris/a-react-hook-to-animate-the-page-document-title-and-favicon-kng</link>
      <guid>https://dev.to/fullstackchris/a-react-hook-to-animate-the-page-document-title-and-favicon-kng</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr-demo-npm-package-and-code"&gt;
  &lt;/a&gt;
  TL;DR - Demo, npm Package, and Code
&lt;/h1&gt;

&lt;p&gt;Here's a gif of what the hook looks like in action:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3fhAw55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arkyr32saj6trc4ivarr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3fhAw55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arkyr32saj6trc4ivarr.gif" alt="react-use-please-stay at work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://princefishthrower.github.io/react-use-please-stay/"&gt;The interactive demo is here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-use-please-stay"&gt;The npm package is here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/princefishthrower/react-use-please-stay"&gt;The GitHub Repo is here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#background-behind-reactusepleasestay"&gt;
  &lt;/a&gt;
  Background Behind react-use-please-stay
&lt;/h1&gt;

&lt;p&gt;Though I'm sure it's something I'm sure I've seen before, I stumbled upon an animated title and changing favicon while recently visiting the &lt;a href="https://shop.mikkeller.dk/"&gt;Dutch version of the Mikkeller Web Shop&lt;/a&gt;. The favicon changes to a sad-looking Henry (&lt;a href="https://www.google.com/search?q=henry+and+sally&amp;amp;sxsrf=ALeKk00N9zVdsht4oto1yj8qxXC7R5x-KQ:1619419497927&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=2ahUKEwjmyqnfp5vwAhVFCewKHbnJDLQQ_AUoAXoECAEQAw&amp;amp;cshid=1619419527383437&amp;amp;biw=1920&amp;amp;bih=969"&gt;Henry and Sally are the famous Mikkeller mascots&lt;/a&gt;), and the tab title swaps between: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Henry is Sad.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember your beers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not sure if the strange grammar is by design, but the whole thing cracked me up. 😂 After downloading the source and doing a bit of snooping around, (AKA by searching for &lt;code&gt;document.title&lt;/code&gt;), all I could manage to find was a file called &lt;code&gt;pleasestay.js&lt;/code&gt;, which contained the visibility change event listener, but it was all modularized and over 11000 lines long! It was definitely not in its usable form, and after a Google search, I could only find &lt;a href="https://gist.github.com/sonnm/fcaaf616e62cc46e8756599306f4e1ad"&gt;this GitHub gist with a JQuery implementation&lt;/a&gt; of the functionality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creation-of-the-package"&gt;
  &lt;/a&gt;
  Creation of the Package
&lt;/h1&gt;

&lt;p&gt;I have to admit - the little animation on Mikkeler's Shop &lt;em&gt;did&lt;/em&gt; pull me back to the site. At the very least, it's a nice touch that you don't see on very many websites. I thought it would make a great React hook - especially if I could make it configurable with multiple options and titles. So I built the &lt;a href="https://www.npmjs.com/package/react-use-please-stay"&gt;react-use-please-stay&lt;/a&gt; package to do just that!&lt;/p&gt;

&lt;p&gt;As I often do, I'm using my blog as a testbed for the hook. If you go to any other tab in your browser right now, you'll see my blog's favicon and title start animating.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#source-code-as-of-writing-this-post"&gt;
  &lt;/a&gt;
  Source Code as Of Writing this Post
&lt;/h1&gt;

&lt;p&gt;Again, the package is &lt;a href="https://github.com/princefishthrower/react-use-please-stay"&gt;completely open source&lt;/a&gt;, where you'll find the most up-to-date code, but if you'd like to get an idea of how the hook works right away, here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getFavicon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../helpers/getFavicon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AnimationType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../enums/AnimationType&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UsePleaseStayOptions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../types/UsePleaseStayOptions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useInterval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../useInterval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usePleaseStay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;animationType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AnimationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;faviconURIs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="nx"&gt;alwaysRunAnimations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;UsePleaseStayOptions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;AnimationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CASCADE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`You are using animation type '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;animationType&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' but passed more than one title in the titles array. Only the first title will be used.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// State vars&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shouldAnimate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShouldAnimate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// On cascade mode, we substring at the first character (0, 1).&lt;/span&gt;
  &lt;span class="c1"&gt;// Otherwise start at the first element in the titles array.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;titleIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTitleIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;faviconIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFaviconIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isAppendMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsAppendMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;faviconURIsState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFaviconURIsState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Ref vars&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalDocumentTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalFaviconHref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faviconRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLLinkElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Handler for visibility change - only needed when alwaysRunAnimations is false&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleVisibilityChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibilityState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;restoreDefaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setShouldAnimate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// The logic to modify the document title in cascade mode.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runCascadeLogic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;titleIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTitleIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isAppendMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;titleIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;titleIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;titleIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isAppendMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setIsAppendMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;titleIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAppendMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setIsAppendMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// The logic to modify the document title in loop mode.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runLoopLogic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;titleIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;setTitleIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;titleIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;titleIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// The logic to modify the document title.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifyDocumentTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Cascade letters in the title&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AnimationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;runCascadeLogic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// Loop over titles&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AnimationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;runLoopLogic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// The logic to modify the favicon.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifyFavicon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;faviconRef&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;faviconRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;faviconRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;faviconURIsState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;faviconIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;setFaviconIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;faviconIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;faviconURIsState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;faviconIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// The logic to restore default title and favicon.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;restoreDefaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setShouldAnimate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;faviconRef&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;faviconRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;originalDocumentTitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;originalFaviconHref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalDocumentTitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;faviconRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalFaviconHref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// On mount of this hook, save current defaults of title and favicon. also add the event listener. on un mount, remove it&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// make sure to store originals via useRef&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;favicon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFavicon&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favicon&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;We could not find a favicon in your application.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// save originals - these are not to be manipulated&lt;/span&gt;
    &lt;span class="nx"&gt;originalDocumentTitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;originalFaviconHref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favicon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;faviconRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favicon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// TODO: small preload logic for external favicon links? (if not a local URI)&lt;/span&gt;
    &lt;span class="c1"&gt;// Build faviconLinksState&lt;/span&gt;
    &lt;span class="c1"&gt;// Append current favicon href, since this is needed for an expected favicon toggle or animation pattern&lt;/span&gt;
    &lt;span class="nx"&gt;setFaviconURIsState&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;faviconURIs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;favicon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="c1"&gt;// also add visibilitychange event listener&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;visibilitychange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleVisibilityChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;visibilitychange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleVisibilityChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// State change effects&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Change in alwaysRunAnimations change the shouldAnimate value&lt;/span&gt;
    &lt;span class="nx"&gt;setShouldAnimate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alwaysRunAnimations&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Update title index&lt;/span&gt;
    &lt;span class="nx"&gt;setTitleIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;AnimationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CASCADE&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;animationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alwaysRunAnimations&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Change title and favicon at specified interval&lt;/span&gt;
  &lt;span class="nx"&gt;useInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;modifyDocumentTitle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// this is 1 because we append the existing favicon on mount - see above&lt;/span&gt;
      &lt;span class="nx"&gt;faviconURIsState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;modifyFavicon&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;shouldAnimate&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h1&gt;

&lt;p&gt;This was a fun little hook that took more than a few hours to work out all the kinks for. So far it has been stable on my site, and I'm open to pull requests, critiques, and further features!&lt;/p&gt;

&lt;p&gt;Cheers! 🍺&lt;/p&gt;

&lt;p&gt;-Chris&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS open source news and updates #65</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 26 Apr 2021 07:25:41 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-65-27bk</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-65-27bk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#april-26th-2021-instalment-65"&gt;
  &lt;/a&gt;
  April, 26th, 2021 - Instalment #65
&lt;/h2&gt;

&lt;p&gt;Newsletter #65. &lt;/p&gt;

&lt;p&gt;This week we have new projects covering security, AWS CDK, serverless and a very handy tool if you find yourself having to record your screen to do demos and wondering how to make sure you do not disclose sensitive information such as your AWS credentials. We have AWS and community blog posts covering Kubernetes, AWS Copilot, Rust, GraphQL, Apache Airflow, Linux, we have a couple of workshops on AWS Greengrass v2 and Observability on AWS and much more.&lt;/p&gt;

&lt;p&gt;I have one small ask this week. I would love to know if these weekly updates are useful, so please let me know via this very simple survey that will take you around 30 seconds to complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eventbox.dev/survey/TVWJXPA"&gt;Complete Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDK Day&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Later this week we have the second CDK Day, and over 3K people have so far sign up for this community organised event. There is still time to register, and this post from Ignacio Riesgo, will show you what you can expect during &lt;a href="https://aws.amazon.com/blogs/opensource/what-to-expect-at-cdk-day-2021/"&gt;CDK Day 2021&lt;/a&gt; - check out the full speaker sessions, there is just so much great content it is going to be even better than the first CDK Day!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: &lt;/p&gt;

&lt;p&gt;Meir Gabay, Brice Pellé, Imaya Kumar Jagannathan, Rodrigue Koffi, Rafael Pereyra, Joseph Keating, Matt Hedges, Carlos Santos, Matthew Ostovarpour, Dave Currie, Christopher Christou, Richard Elberger, Eric Johnson, Ignacio Riesgo, Ian Mckay, Dino Bektaš, Pahud Hsieh, James Pether Sörling, Gourav Das, Arseny Zinchenko, Justin Garrison, Dylan Anthony, Florian Clanet, Danny Steenman, Laimonas Sutkus and Dr Tony Hoang.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;censor-shell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fb"&gt;censor-shell&lt;/a&gt; AWS Hero Ian Mckay is back with another open source tool that I know I will be using. This handy little tool allows you to hide phrases (such as passwords or AWS credentials) that you do not want to display on the screen when you are recording/sharing your screen whilst doing demos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8RuW1Hj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/iann0036/iann0036/raw/master/static/censor-shell.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8RuW1Hj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/iann0036/iann0036/raw/master/static/censor-shell.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sonar-cloudformation-plugin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ff"&gt;sonar-cloudformation-plugin&lt;/a&gt; this came in from James Pether Sörling, and this project provides a Sonarqube cloudformation plugin that supports cfn-nag and checkov and  helps you to secure your development pipeline with static application security test (SAST) / Dynamic application security test (DAST), software composition analysis (SCA). James got in touch to say the latest updates:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Made it easier to handle false positives and override issues in cfn-nag (uses meta-data in cloudformation otherwise), also nice with an audit record who changed state of an detected issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;cdk-serverless&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fe"&gt;cdk-serverless&lt;/a&gt; the folks at Taimos have created this nice open source tool to facilitate the use of the AWS CDK in serverless architectures. They have put together this video to show you how to get started.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GGc0eg3E9MM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-image-moderation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fd"&gt;https://github.com/pahud/cdk-image-moderation&lt;/a&gt; Pahud Hsieh is back again this week, this time with an event-driven image moderation and notification service with AWS CDK. Once you deploy the sample code within the README.md, you can  upload any images into the defined bucket and you should be able to get the notification - in the example, they use Telegram chatrooms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhcWLJmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pahud/cdk-image-moderation/31e1900be4651b8b4b5956994ff30d1ed0fea0d6/images/cdk-image-moderation2.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhcWLJmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pahud/cdk-image-moderation/31e1900be4651b8b4b5956994ff30d1ed0fea0d6/images/cdk-image-moderation2.svg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-navbar-hue-safari-extension&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fc"&gt;aws-navbar-hue-safari-extension&lt;/a&gt; this is a very handy little tool from Dino Bektaš for those using Safari web browser to access AWS resources via the Console - it changes the AWS console's navbar color depending on the region you selected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B.AwsS3Backup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fo"&gt;B.AwsS3Backup&lt;/a&gt; this open source library from Laimonas Sutkus is a python based package that allows you to back up, restore, and seed S3 buckets. From the description, this project: "Sometimes you want to make a small modification to your S3 bucket, however it usually requires destruction of the bucket itself. This library allows you to do those small modifications without any headache. You can easily backup all your data to your local computer, delete the bucket, create a new one with desired modifications, and then simply restore it"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few weeks ago I shared an open source project from AWS Hero Ian Mckay called iamlive, an open source tool to help you generate basic IAM policies by from AWS client-side monitoring. This great post from Meir Gabay came up on my radar late last week, &lt;a href="https://aws-oss.beachgeek.co.uk/fn"&gt;Determining AWS IAM Policies According To Terraform And AWS CLI&lt;/a&gt; which is a nice post writing how to put this into practice as part of your CI/CD pipelines. In this post Meir uses Terraform, but you should be able to take this approach to whatever tool you are using. One of my favourite posts this week, so thank you Meir!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevSecOps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post from Gourav Das, &lt;a href="https://aws-oss.beachgeek.co.uk/fg"&gt;DevSecOps Introduction: Clear Instructions on How to Build a DevSecOps Pipeline in AWS [Part 1]&lt;/a&gt;, is Part One of a two part series on how to build a DevSecOps pipeline on AWS that uses many open source tools. Gourav provides associated source code and CloudFormation templates so you can reproduce this stack for yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoKEIzx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/images/gv93oOBCpSQa2kRIURhv0A8fVP33-n11633ax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoKEIzx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/images/gv93oOBCpSQa2kRIURhv0A8fVP33-n11633ax.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Istio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fi"&gt;Istio: external AWS Application LoadBalancer and Istio Ingress Gateway&lt;/a&gt; Arseny Zinchenko follows up on a previous post showing you how to run a service mesh on Amazon EKS, and walks you through how to add an AWS Application Load Balancer (ALB) before the Istio Ingress Gateway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fj"&gt;Living with Kubernetes: Cluster Upgrades&lt;/a&gt; this is the first of a series of posts from my colleague Justin Garrison, called Living with Kubernetes. In this post Justin shares some things that will guide you through common patterns to consider when upgrading Kubernetes in any environment. He covers a number of patterns for upgrading your clusterings, covering: In place, Blue/Green, Rolling and Canary. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL on Rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fk"&gt;Running GraphQL on Lambda with Rust&lt;/a&gt; Dylan Anthony explores writing API development using GraphQL in Rust. To quote Dylan:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I've been pleasantly surprised so far at how easy it's been to write a GraphQL API using Rust, much easier than doing so with the OpenAPI tools I've tested so far.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a short post, and Dylan provides source code for you to explore further if you want to dive deep.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copilot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of posts this week on AWS Copilot, a tool for developers to build, release and operate production ready containerized applications on Amazon ECS and AWS Fargate. &lt;a href="https://github.com/aws/copilot-cli/releases/tag/v1.5.0"&gt;v1.5.0&lt;/a&gt; was released a few weeks back, so what better way to celebrate that by reading these posts.&lt;/p&gt;

&lt;p&gt;First up we have &lt;a href="https://aws-oss.beachgeek.co.uk/fl"&gt;Pilot your containers like a boss with AWS Copilot!&lt;/a&gt; from Florian Clanet that is a great introduction, showing you how you can get started. The post shows you how to deploy a sample application using Copilot, and shares lots of great resources if you want to go further.&lt;/p&gt;

&lt;p&gt;Following Florian we have Danny Steenman writing, &lt;a href="https://aws-oss.beachgeek.co.uk/fm"&gt;Use AWS Copilot CLI to deploy containers on an existing infrastructure - Tutorial&lt;/a&gt;. In this tutorial Danny shows how you can easily deploy containers on your existing VPC with AWS Copilot CLI, using a sample Django application.&lt;/p&gt;

&lt;p&gt;So not one but two good reasons for you to try out AWS Copilot this week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ey"&gt;Automating your ELT Workflows with Managed Workflows for Apache Airflow - Part One&lt;/a&gt; this week I managed to get some time to write about one of my favourite open source projects, Apache Airflow. In this two part blog post I cover how you can use Apache Airflow to build a workflow to help you automate your ELT/ETL tasks using two AWS services, Amazon Athena and Amazon EMR. If you are currently using Apache Hive/Presto as part of your day to day data engineering/analytics work, then take a look to see if this might be a useful approach to automating some of your tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jas3Acm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/devday-elt-automation/main/images/demo-arch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jas3Acm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/devday-elt-automation/main/images/demo-arch.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workshops"&gt;
  &lt;/a&gt;
  Workshops
&lt;/h3&gt;

&lt;p&gt;The One Observability Demo Workshop was made available last year, and provides a workshop in multiple languages (English/Spanish/Korean/Japanese) that help you get hands on with monitoring and observability tools such as Prometheus, Grafana and OpenTelemetry. Last week Imaya Kumar Jagannathan, Rodrigue Koffi, and Rafael Pereyra put together this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f0"&gt;AWS One Observability Demo Workshop: What’s new with Prometheus, Grafana, and OpenTelemetry &lt;/a&gt; that goes into a little more detail about what this workshop covers, as well as announcing some new features of this workshop that have been recently added.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--it5SL7zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/16/ijaganna_One-Observability-Whats-New_f4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--it5SL7zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/16/ijaganna_One-Observability-Whats-New_f4.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also new this week was the &lt;a href="https://aws-oss.beachgeek.co.uk/fh"&gt;AWS IoT Greengrass v2 workshop&lt;/a&gt;. AWS IoT Greengrass is an Internet of Things (IoT) open source edge runtime and cloud service that helps you build, deploy, and manage device software. This workshop walks you through how to build an edge gateway running AWS IoT Greengrass Core software v2.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DTBkpXZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://greengrassv2.workshop.aws/images/architecture_diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DTBkpXZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://greengrassv2.workshop.aws/images/architecture_diagram.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-open-source-posts"&gt;
  &lt;/a&gt;
  AWS open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Amazon Corretto/OpenJDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/f7"&gt;TLS 1.0/1.1 changes in OpenJDK and Amazon Corretto&lt;/a&gt; I covered this in last weeks newsletter, but this week we have Dave Currie who dives a little deeper into what is changing and provides some useful tools to help you audit your environments so you can plan you upgrade. This is essential reading this week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python Flask&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/f1"&gt;Deploying Python Flask microservices to AWS using open source tools&lt;/a&gt; Joseph Keating and Matt Hedges show you how to deploy an API running in a microservice architecture, deploying a Python Flask application using Docker to containerise it and deploy on Amazon ECS and then using SoapUI to test it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VmdZw95N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/05/awsjoe_Flask-Microservice_f2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmdZw95N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/05/awsjoe_Flask-Microservice_f2.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplify DataStore&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amplify DataStore is a library that provides a programming model for leveraging shared and distributed data without writing additional code for offline and online scenarios. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ez"&gt;Connect Amplify DataStore with existing SQL datasources; adding offline and sync features in your application&lt;/a&gt; Brice Pellé shows you how you can use the Amplify CLI to build an AppSync API for your DataStore application, that connects to an existing Aurora MySql database using an AppSync Lambda resolver and an Amazon RDS Proxy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIQJNGlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/04/16/image-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIQJNGlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/04/16/image-15.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS SAM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fa"&gt;Optimizing serverless development with samconfig&lt;/a&gt; Eric Johnson with a post that shows you how you can optimise development time by customising the default settings for your serverless application by using the samconfig used by the AWS SAM cli. Eric provides some examples to show you how, &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Linux 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have not used Windows in a long time, but if this is your preferred developer setup then this post is going to interest you if you need to use that setup to develop, deploy or work on applications that use Amazon Linux2. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/f2"&gt;Developing on Amazon Linux 2 using Windows&lt;/a&gt; Carlos Santos and Matthew Ostovarpour show you how you can use a feature of Windows, the Windows Subsystem for Linux (WSL) and Visual Studio Code to work with Amazon Linux 2.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dj8oLjCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/04/19/developing-on-amazon-linux2-using-windows-overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dj8oLjCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/04/19/developing-on-amazon-linux2-using-windows-overview.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Toolkit for Visual Studio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/f5"&gt;AWS Toolkit for Visual Studio&lt;/a&gt; is an open source extension for Microsoft Visual Studio running on Microsoft Windows that makes it easier for developers to develop, debug, and deploy applications using. In this post &lt;a href="https://aws-oss.beachgeek.co.uk/f6"&gt;Introducing AWS Toolkit for Visual Studio support for AWS SSO and Assume Role with MFA&lt;/a&gt; Christopher Christou shows you how you can use this extension to configure two sets of credentials: one that makes use of MFA, and another that uses AWS SSO, showing you how to configure the Toolkit to use these credentials.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/f8"&gt;Monitoring your service mesh container environment using Amazon Managed Service for Prometheus&lt;/a&gt; Vikram Venkataraman, Sathiyan Baskaran, Naseer Sayyad, and Shivkumar Rajendran join forces to show you how you can deploy an application running on EKS, integrate the app with AppMesh, scrape the Prometheus metrics using Grafana Agent and then to ingest the metrics into Amazon Managed Service for Prometheus (AMP) and and then visualise them in Amazon Managed Service for Grafana (AMG). This builds upon last weeks post that announced Prometheus now has native AWS Signature v4 support, making this solution simpler to implement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdiwEu-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/04/20/Grafana-updated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdiwEu-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/04/20/Grafana-updated.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/f9"&gt;FreeRTOS.org update for Q1 2021&lt;/a&gt;  Richard Elberger provides a round up of all the key announcements, news and posts from Q1 2021 covering FreeRTOS. From using Visual Studio Code, AVR Controllers, SESIP certification and much more, if you work or are interested in the IoT/devices spaces, check this post out. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch AWS Cloud9 development environments with Amazon Linux 2 (AL2). Amazon Linux 2 is the next generation of Amazon Linux, a Linux server operating system from Amazon Web Services (AWS). It provides a secure, stable, and high performance execution environment to develop and run cloud and enterprise applications. AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages including JavaScript, Python, PHP, and more, so you don’t need to install files or configure your development machine to start new projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elasticsearch Service now supports open source Elasticsearch 7.10 and its corresponding version of Kibana. This minor release includes bug fixes and enhancements. In this new release, Elasticsearch improves indexing speed by up to 20% for certain use cases and more space efficient indices through higher compression of stored fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now publish the Redis slow log from your Amazon ElastiCache for Redis clusters to Amazon CloudWatch Logs and Amazon Kinesis Data Firehose. The Redis slow log provides visibility into the execution time of commands in your Redis cluster, enabling you to continuously monitor the performance of these operations. You can choose to send these logs in either JSON or text format to Amazon CloudWatch Logs and Amazon Kinesis Data Firehose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;If you missed Matt Asay's talk at the Cloud City Meetup last week, then you can relax, and watch it here. Well worth checking out this conversation about the complements and conflicts between the cloud and open source. It meanders over the past, present and future of open source in a cloud world, the evolution of business models and licenses, and the best models going forward for startups based on open source projects.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nx8-UxLz7qI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#podcast-of-the-week"&gt;
  &lt;/a&gt;
  Podcast of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PyTorch on AWS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Dr Tony Hoang's Artificial Intelligence podcast, &lt;a href="https://aws-oss.beachgeek.co.uk/fp"&gt;Open source model server for PyTorch on AWS - TorchServe&lt;/a&gt; Dr Hoang does a deep dive on PyTorch and TorchServe, covering what it is and how some customers are using it and the benefits they are seeing.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/0sryuht8jzTsjGmClGDXWb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Watch out for these events happening later this week and next. I am especially looking forward to CDK Day, so hope to see you there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDK Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;April 30th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Announced this week was the second &lt;a href="https://sessionize.com/cdkday/"&gt;CDK Day&lt;/a&gt;, which will be on April 30th. Check out &lt;a href="https://sessionize.com/cdkday/"&gt;the web page&lt;/a&gt; to find out more about the first CDK Day, which was incredible. This second event promises to be even better. The CFP is open until the 19th of March. Check out this supporting blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/4v"&gt;CDK Day CFP Is Open!!!!&lt;/a&gt; from Matt as to what to expect and what they are looking for when it comes to sessions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Rust Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 3rd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rust is a language empowering everyone to build secure, reliable, and efficient software. Rust is becoming more widely used in cloud native, powering everything from lightning-fast service meshes and powerful developer tools to internet-scale distributed databases.&lt;/p&gt;

&lt;p&gt;Come explore what makes Rust a fantastic choice for new cloud native development, and learn about how the community uses Rust today. Find out &lt;a href="https://aws-oss.beachgeek.co.uk/5y"&gt;more and register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 4, 2021 | 10:00AM - 6:00PM CEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Container Day x KubeCon is a fully live, virtual day of sessions all about Amazon EKS and Kubernetes at AWS, hosted by Brent Langston and Adam Keller of Containers from the Couch. At this Day Zero KubeCon event, the AWS Kubernetes team will be revealing new launches, demoing products and features, covering best practices, and answering your questions live on Twitch! If you have a question before the event, you can email the team at &lt;a href="mailto:awscontainerday@amazon.com"&gt;awscontainerday@amazon.com&lt;/a&gt; and maybe get them answered.&lt;/p&gt;

&lt;p&gt;Find out more and to register, &lt;a href="https://aws-oss.beachgeek.co.uk/cr"&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An Introduction to Amazon Managed Blockchain&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;5th May&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Managed Blockchain (AMB) is a fully managed service that makes it easier to build scalable blockchain networks using popular open source frameworks, including Hyperledger Fabric and Ethereum. AMB includes several features and enhancements beyond those provided by the open-source projects on which it is based. It supports public and private blockchain options, each of which favors different use cases. We review reference architectures outlining example applications on both Hyperledger Fabric and Ethereum. In this lecture, you will also hear several customer success stories building solutions on Amazon Managed Blockchain.&lt;/p&gt;

&lt;p&gt;Find out more and register &lt;a href="https://aws-oss.beachgeek.co.uk/dx"&gt;via this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building And Maintaining Your Own Secure Container OS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 13th 9am PST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curtis Rissi, a Principal Partner SA at AWS will walk attendees through the Bottlerocket (an open-source Linux-based operating system meant for hosting containers) build process, and provide some key use cases for customisation: how to add new configuration options; how to add new packages; how to configure your own update repositories; how to add security policy; and other common customisations. &lt;/p&gt;

&lt;p&gt;Find out more and to register, click &lt;a href="https://aws-oss.beachgeek.co.uk/ed"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile and Front-End Live&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 9:00 - 15:00 PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a LIVE streamed event on Twitch  focused on accelerating full-stack mobile and web development. Learn about AWS Amplify, a set of purpose-built tools and services for front-end web and mobile developers that simplify app development. Deep dive into GraphQL and AWS AppSync, a fully-managed GraphQL service that improves app performance and developer productivity.&lt;/p&gt;

&lt;p&gt;You can read more about what you can expect in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f4"&gt;Mobile and Front-End Live, May 25&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/f3"&gt;register via this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Getting started with Jenkins: Language Agent</title>
      <author>Ben Selby</author>
      <pubDate>Mon, 26 Apr 2021 07:18:11 +0000</pubDate>
      <link>https://dev.to/benmatselby/getting-started-with-jenkins-language-agent-5ghc</link>
      <guid>https://dev.to/benmatselby/getting-started-with-jenkins-language-agent-5ghc</guid>
      <description>&lt;p&gt;This post is going to get you running a language specific Jenkins Agent. In the example we are going to follow, we will setup a Jenkins Agent running &lt;a href="https://golang.org"&gt;Go&lt;/a&gt;. This means you will be able to run Go builds within your local Jenkins instance. This method can then be extrapolated to other languages.&lt;/p&gt;

&lt;p&gt;All of the example code used throughout this post is in a &lt;a href="https://github.com/benmatselby/jenkins-example"&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dockerfile"&gt;
  &lt;/a&gt;
  The Dockerfile
&lt;/h2&gt;

&lt;p&gt;Since we are building our own agent, we need to define a &lt;code&gt;Dockerfile&lt;/code&gt; that is based on a Jenkins agent. From that base, we will then install Go.&lt;/p&gt;

&lt;p&gt;From the &lt;a href="https://github.com/benmatselby/jenkins-example"&gt;example repo&lt;/a&gt;, let's look at the &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Source: https://github.com/benmatselby/jenkins-example/blob/main/agents/go/Dockerfile&lt;/span&gt;
&lt;span class="c"&gt;# Base Dockerfile image: https://hub.docker.com/r/jenkins/inbound-agent/dockerfile&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; jenkins/inbound-agent:4.7-1-jdk11&lt;/span&gt;

&lt;span class="c"&gt;# Where we are going to install Go.&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GO_INSTALL_PATH /home/jenkins/go&lt;/span&gt;

&lt;span class="c"&gt;# We need to add the GO_INSTALL_PATH to the PATH so `go` works.&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PATH /home/jenkins/bin:${GO_INSTALL_PATH}/bin:/usr/local/go/bin:$PATH&lt;/span&gt;

&lt;span class="c"&gt;# The version of Go we want to install&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GO_VERSION 1.16&lt;/span&gt;

&lt;span class="c"&gt;# Define the GOPATH&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GOPATH ${GO_INSTALL_PATH}&lt;/span&gt;

&lt;span class="c"&gt;# CI/CD platforms normally define CI=true, so let's follow suit&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CI true&lt;/span&gt;

&lt;span class="c"&gt;# Install Go&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sL&lt;/span&gt; https://dl.google.com/go/go&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.linux-amd64.tar.gz &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /tmp/go.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; /tmp &lt;span class="nt"&gt;-xf&lt;/span&gt; /tmp/go.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="nb"&gt;mv&lt;/span&gt; /tmp/go &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/pkg/&lt;span class="k"&gt;*&lt;/span&gt;/cmd &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/pkg/bootstrap &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/pkg/obj &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/pkg/tool/&lt;span class="k"&gt;*&lt;/span&gt;/api &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/pkg/tool/&lt;span class="k"&gt;*&lt;/span&gt;/go_bootstrap &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GO_INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/src/cmd/dist/dist &lt;span class="se"&gt;\
&lt;/span&gt;    /tmp/go.tag.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although the above code is curated, let's explain each stage.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To save us from installing a Jenkins Agent within the container, we are going to start with a Jenkins Agent as the base Docker image.&lt;/li&gt;
&lt;li&gt;We then define 5 environment variables that:

&lt;ul&gt;
&lt;li&gt;Explain where we are going to install Go.&lt;/li&gt;
&lt;li&gt;Puts the Go binaries in the &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Define the version of Go we want to build.&lt;/li&gt;
&lt;li&gt;Arguably you could define an &lt;code&gt;ARG&lt;/code&gt; here and override at build time.&lt;/li&gt;
&lt;li&gt;Define the &lt;code&gt;GOPATH&lt;/code&gt; using the &lt;code&gt;GO_INSTALL_PATH&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;li&gt;Most CI/CD systems will define &lt;code&gt;CI=true&lt;/code&gt;, so we are following suit.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The last block of code defines the installation commands required to install Go. Extra points for trying to streamline the image we are building by removing unnecessary files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-image"&gt;
  &lt;/a&gt;
  Building the image
&lt;/h2&gt;

&lt;p&gt;Now we have defined the image, we want to build it. The easiest way to build the image, is to run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-f&lt;/span&gt; agents/go/Dockerfile &lt;span class="nt"&gt;-t&lt;/span&gt; jenkins-agent:go agents/go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will take the Dockerfile defined by &lt;code&gt;-f&lt;/code&gt;, and call the image &lt;code&gt;jenkins-agent:go&lt;/code&gt; using the &lt;code&gt;-t&lt;/code&gt; argument. The last aspect of the command &lt;code&gt;agents/go&lt;/code&gt; explains the context that &lt;code&gt;docker build&lt;/code&gt; should build in (which is the folder the Dockerfile is defined in).&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://github.com/benmatselby/jenkins-example"&gt;benmatselby/jenkins-example&lt;/a&gt; repo, I've created a Make target that is agnostic of the language you may be using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="c"&gt;# Source: https://github.com/benmatselby/jenkins-example/blob/main/Makefile
# Find all the agents, which are all folders in the `agents` folder.
&lt;/span&gt;&lt;span class="nv"&gt;AGENTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;shell&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;${AGENT_PATH}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; find &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; d&lt;span class="nf"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# We then define a build target, which depends on the make targets defined by
# the $(AGENTS) variable.
&lt;/span&gt;&lt;span class="nl"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;build $(AGENTS)&lt;/span&gt;
&lt;span class="nl"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$(AGENTS) &lt;/span&gt;&lt;span class="c"&gt;##&lt;/span&gt;&lt;span class="nf"&gt; Build the Jenkins agents&lt;/span&gt;

&lt;span class="c"&gt;# This is the Make targets for each image found
&lt;/span&gt;&lt;span class="nl"&gt;$(AGENTS)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;##&lt;/span&gt;&lt;span class="nf"&gt; Build each Jenkins agent&lt;/span&gt;
  &lt;span class="c"&gt;# This is the docker command defined above, but with variables
&lt;/span&gt;  &lt;span class="nl"&gt;cd ${AGENT_PATH}/${@} &amp;amp;&amp;amp; docker build -t ${AGENT_NAME}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;${@} .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The more &lt;code&gt;Dockerfile&lt;/code&gt;s we add into the repo, e.g. Node, Python, PHP, etc, the command will still work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-agent"&gt;
  &lt;/a&gt;
  Running the agent
&lt;/h2&gt;

&lt;p&gt;Not to cover old ground, at this point you can re-use the "&lt;a href="https://dev.to/benmatselby/getting-started-with-jenkins-agents-5b5e"&gt;Getting started with Jenkins: Agents&lt;/a&gt;" post to connect your agent.&lt;/p&gt;

&lt;p&gt;Differences I would recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name your node after the language, so instead of &lt;code&gt;smith&lt;/code&gt; this would be called &lt;code&gt;go&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pulling-the-solution-together"&gt;
  &lt;/a&gt;
  Pulling the solution together
&lt;/h2&gt;

&lt;p&gt;If you have followed the previous post to setup your agent, you should now be able to define a new job with the &lt;code&gt;go&lt;/code&gt; label.&lt;/p&gt;

&lt;p&gt;Let's create a Freestyle project called &lt;code&gt;go-project&lt;/code&gt;. This time let's set the &lt;strong&gt;Restrict where this project can be run&lt;/strong&gt; to &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dq-7Vatr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uue20t5jaylyjmyv442f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dq-7Vatr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uue20t5jaylyjmyv442f.png" alt="Jenkins project for Go builds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave everything else as default (for this post, but feel free to play around later), and set the shell command to &lt;code&gt;go version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QgZQ348b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkr119u1kq8glfu81xps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QgZQ348b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkr119u1kq8glfu81xps.png" alt="Jenkins project for Go builds - The command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click &lt;strong&gt;Save&lt;/strong&gt;, and you will be taken back to the Job. Click &lt;strong&gt;Build Now&lt;/strong&gt;. After a few moments, you will See &lt;strong&gt;#1&lt;/strong&gt; appear in the &lt;strong&gt;Build History&lt;/strong&gt; on the left hand side. Click on the blue ball. You will see the version details for Go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuW3PUVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz2kgcdrpsr5eksrm8qy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuW3PUVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz2kgcdrpsr5eksrm8qy.png" alt="Jenkins project for Go builds - The output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you've now successfully:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defined a language specific agent: Go.

&lt;ul&gt;
&lt;li&gt;This could be any language or environment you require.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Built the docker image for the language specific agent.&lt;/li&gt;
&lt;li&gt;Connected the language specific agent to the Jenkins Controller.&lt;/li&gt;
&lt;li&gt;Run a job that has executed Go, in your agent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;p&gt;Want to go further? Then you could:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define more languages and play around with "tags" to make sure builds get directed to the correct agents.&lt;/li&gt;
&lt;li&gt;Use something like &lt;code&gt;ngrok&lt;/code&gt; to expose your installation back to GitHub, to get GitHub Events.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This was a quick overview for getting a language specific Jenkins agent connected to the Jenkins controller application.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@alschim?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Alexander Schimmeck&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/choice?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#see-also"&gt;
  &lt;/a&gt;
  See also
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/benmatselby/getting-started-with-jenkins-3a81"&gt;Getting started with Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/benmatselby/getting-started-with-jenkins-agents-5b5e"&gt;Getting started with Jenkins: Agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/benmatselby/docker-knowledge-to-get-you-through-the-day-47bl"&gt;Docker knowledge to get you through the day&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benmatselby.dev/post/build-tool-comparison/"&gt;Comparison: AWS CodePipeline, GitHub Actions, and Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>jenkins</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>docker</category>
    </item>
    <item>
      <title>Git Commands Cheat Sheet </title>
      <author>Danish Saleem</author>
      <pubDate>Mon, 26 Apr 2021 06:59:51 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/git-commands-cheat-sheet-2dke</link>
      <guid>https://dev.to/mrdanishsaleem/git-commands-cheat-sheet-2dke</guid>
      <description>&lt;p&gt;&lt;strong&gt;git init -&lt;/strong&gt; Create a new Git repository&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git clone -&lt;/strong&gt; Clone a repository&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git status -&lt;/strong&gt; Show state of current directory&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git log -&lt;/strong&gt; List the commit history&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git diff -&lt;/strong&gt; diff b/w working directory &amp;amp; index&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git show -&lt;/strong&gt; Display the content and metadata&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git branch -&lt;/strong&gt; List all branches in the repository&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git checkout [branch] -&lt;/strong&gt; Switch to a branch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git branch -d -&lt;/strong&gt; Delete a Branch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git branch -m -&lt;/strong&gt; Rename a branch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git merge [branch] -&lt;/strong&gt; Merge the specified branch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git add [file] -&lt;/strong&gt; Stage changes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git add . -&lt;/strong&gt; Stage everything&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git revert [file] -&lt;/strong&gt; Undo changes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git clean -n -&lt;/strong&gt; Show untracked files&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git commit --amend -&lt;/strong&gt; Replace the last commit&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git remote add -&lt;/strong&gt; connection to a remote repository git pull Fetch a repository&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git push -&lt;/strong&gt; Push a branch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git config --global user.name -&lt;/strong&gt; Define the author name to be used&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git reset -&lt;/strong&gt; Reset staging area to match most recent commit&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git fetch   -&lt;/strong&gt; Fetches a specific from the repo.&lt;/p&gt;

&lt;p&gt;Well this all I know if you know more git commands then kindly comment them below. Thanks 😊&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>devops</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>The Cloud Resume Challenge (series): Part 11 - JavaScript</title>
      <author>Lou (🚀 Open Up The Cloud ☁️)</author>
      <pubDate>Mon, 26 Apr 2021 06:49:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/the-cloud-resume-challenge-series-part-11-javascript-1f53</link>
      <guid>https://dev.to/aws-builders/the-cloud-resume-challenge-series-part-11-javascript-1f53</guid>
      <description>&lt;p&gt;Heyo cloud engineering friends! And I have just this morning hit publish on the next in a series of videos I've been putting out on the cloud resume challenge. &lt;/p&gt;

&lt;p&gt;If you've not already heard of &lt;a href="https://cloudresumechallenge.dev/"&gt;the cloud resume challenge&lt;/a&gt;, it's a free, online challenge started by the hero (AWS hero, and general cloud hero) Forest Brazeal to help people get into the cloud by giving you a real, hands-on project and challenge to complete. You can find &lt;a href="https://dev.to/forrestbrazeal/the-cloud-resume-challenge-503g"&gt;the original announcement post here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the last few parts of the series on YouTube I've been through most of the backend work (except the DynamoDB database), setting up an &lt;a href="https://www.youtube.com/watch?v=HOxsacd8Frw&amp;amp;t=37s"&gt;S3 bucket to host our website&lt;/a&gt;, and figuring out some of the more fiddly aspects, like &lt;a href="https://www.youtube.com/watch?v=MsFYWnjP39M"&gt;getting CORS configured on our API&lt;/a&gt;. Now, we're doing some front-end development, by &lt;a href="https://www.youtube.com/watch?v=PKp5J4OcStM"&gt;hooking up some JavaScript&lt;/a&gt; to our AWS Lambda function on our website. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PKp5J4OcStM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you're thinking about doing the challenge, or getting into cloud I can highly recommend it. &lt;/p&gt;




&lt;p&gt;Hey! 👋 If we haven't met, let me introduce myself, I'm &lt;a href="https://twitter.com/loujaybee"&gt;Lou&lt;/a&gt;, and I created &lt;em&gt;&lt;a href="http://thedevcoach.co.uk/"&gt;Open Up The Cloud&lt;/a&gt;&lt;/em&gt; to help you get your start, and grow your career in cloud 🚀. &lt;/p&gt;

&lt;p&gt;If you're interested in cloud, the best way to keep up-to-date with news, and everything I publish is via the &lt;a href="http://newsletter.thedevcoach.co.uk/"&gt;monthly cloud newsletter&lt;/a&gt;. And find &lt;em&gt;Open Up The Cloud&lt;/em&gt; on &lt;a href="https://www.youtube.com/channel/UCAklaE5D59xWtip-3Jwa7xA"&gt;YouTube&lt;/a&gt;, &lt;a href="https://twitter.com/openupthecloud"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/openupthecloud"&gt;Instagram&lt;/a&gt;... wherever you like hang out! 😄&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
      <category>aws</category>
      <category>serverless</category>
    </item>
  </channel>
</rss>
