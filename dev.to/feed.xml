<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Difference between Dialogflow CX vs Dialogflow ES</title>
      <author>Dhruv Rajkotia</author>
      <pubDate>Sat, 09 Oct 2021 14:37:16 +0000</pubDate>
      <link>https://dev.to/dhruv_rajkotia/difference-between-dialogflow-cx-vs-dialogflow-es-3n1k</link>
      <guid>https://dev.to/dhruv_rajkotia/difference-between-dialogflow-cx-vs-dialogflow-es-3n1k</guid>
      <description>&lt;p&gt;Google Dialogflow has introduced Dialogflow CX in December 2020. It is a powerful tool to build virtual agents. So Now Dialogflow has 2 versions one is Dialogflow ES(Older Version) and New is Dialogflow CX. So Now we have basic question arises what is a difference between Dialogflow versions(CX vs ES).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dialogflow ES&lt;/strong&gt; supported a flat structure of intents and implicit controls for conversation flows, mainly using contexts. This approach didn't scale well for building, understanding, and maintaining large agents with complex conversation flows. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dialogflow CX&lt;/strong&gt; addresses these issues by providing conversation flow controls in a more explicit and structured way. CX follows graphical structure which allows designing of complex conversation flows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notable-features-of-dialogflow-cx"&gt;
  &lt;/a&gt;
  Notable Features of Dialogflow CX
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#visual-flow-builder"&gt;
  &lt;/a&gt;
  Visual Flow Builder
&lt;/h4&gt;

&lt;p&gt;A new visual builder makes building and maintaining agents easier. Conversation paths are graphed as a state machine model, which makes conversations easier to design, enhance, and maintain. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WNaQJVPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdm62ylw4zd5we4ee2ot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WNaQJVPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdm62ylw4zd5we4ee2ot.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Console overview: &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/console"&gt;https://cloud.google.com/dialogflow/cx/docs/concept/console&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reusable-intents"&gt;
  &lt;/a&gt;
  Reusable Intents
&lt;/h4&gt;

&lt;p&gt;One of the main features of the CX is the Reusable Intents. Fulfillment is decoupled from intents, making intents a truly reusable component for multiple different conversational flows.&lt;/p&gt;

&lt;p&gt;In Dialogflow ES intent is tightly coupled with the fulfillment so it's too difficult to reuse it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#separate-flows-for-easier-collaboration-on-agents"&gt;
  &lt;/a&gt;
  Separate Flows for Easier Collaboration On Agents
&lt;/h4&gt;

&lt;p&gt;Separate flows let multiple teams work simultaneously. With Flows, you can partition your agent into smaller conversation topics. Different team members can work on different flows, which make Virtual Agent development very easy for the more complex conversation flow. Also It has versioning support at the flow level so you can run multiple versions based on your environments. In short, It allows modularization of bot for ease of management.&lt;/p&gt;

&lt;p&gt;For example, If you are creating an Agent for the Restaurants booking then it may create flows like order confirmation, order booking, Get Customer Details etc. So Here you can give the individual flows to different teams and speed up the development of the virtual agent. &lt;/p&gt;

&lt;p&gt;For more information regarding Flows: &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/console"&gt;https://cloud.google.com/dialogflow/cx/docs/concept/console&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#state-based-data-model"&gt;
  &lt;/a&gt;
  State Based Data Model:
&lt;/h4&gt;

&lt;p&gt;A state-based data model allows us to reuse intents, intuitively define transitions and data conditions, and handle supplemental questions.&lt;/p&gt;

&lt;p&gt;You can set conditions for each flow. A conditional trigger determines how the route will occur. For example, if a parameter equals a specific value, or if all parameters have been filled then route to the specific page or flow. I'll cover this topics in details for upcoming blog with some examples. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters-feature-enhancement"&gt;
  &lt;/a&gt;
  Parameters feature enhancement
&lt;/h4&gt;

&lt;p&gt;In Dialogflow CX thwy have come up with mainly 3 types of parameters. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Session Parameters&lt;br&gt;
Dialogflow Stores all the captured parameter through out the session so you can use the specific parameters in further flow. This feature in not available in the Dialogflow ES but you can do it via setting the long output context in Welcome intent. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intent Parameters&lt;br&gt;
Intents use parameters to extract data provided by end-users when intents are matched. The following data is used to define an intent parameter. Due to the short-lived life span of intent parameters, Dialogflow recommended to use the session parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Form Parameters&lt;br&gt;
For each page, you can define a form, which is a list of parameters that should be collected from the end-user for the page. It's kind of similar to the ES Slot fillings. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information regarding parameters: &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter"&gt;https://cloud.google.com/dialogflow/cx/docs/concept/parameter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: I'll create a separate blog to explain the dialogflow parameters with examples.&lt;/p&gt;

&lt;p&gt;Now that we have explored the newest features of Dialogflow CX, let’s look into the comparison between Dialogflow CX vs ES.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;ES Agent&lt;/th&gt;
&lt;th&gt;CX Agent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Editions&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dialogflow Essentials Edition&lt;/td&gt;
&lt;td&gt;Dialogflow CX Edition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This is the standard agent type that is suitable for small to medium and simple to moderately complex agents. &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter"&gt;Intents&lt;/a&gt; are the building blocks of conversation design, and &lt;a href="https://cloud.google.com/dialogflow/es/docs/contexts-overview"&gt;contexts&lt;/a&gt; are used to control conversation paths. The ES agent type is summarized in &lt;a href="https://cloud.google.com/dialogflow/es/docs/basics"&gt;Dialogflow ES basics&lt;/a&gt;.&lt;/td&gt;
&lt;td&gt;This is an advanced agent type that is suitable for large or very complex agents. &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/flow"&gt;Flows&lt;/a&gt; and &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/page"&gt;pages&lt;/a&gt; are the building blocks of conversation design, and &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/handler"&gt;state handlers&lt;/a&gt; are used to control conversation paths. The CX agent type is summarized in &lt;a href="https://cloud.google.com/dialogflow/cx/docs/basics"&gt;Dialogflow CX basics&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Agents per project&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Recommended agent size&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Up to medium size agents&lt;/td&gt;
&lt;td&gt;Up to very large&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Recommended agent complexity&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Up to moderately complex agents&lt;/td&gt;
&lt;td&gt;Up to highly complex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Integrations&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Many different telephony as well as text based integrations are available. Dialogflow ES supports telephony &lt;a href="https://cloud.google.com/dialogflow/es/docs/integrations"&gt;integrations&lt;/a&gt; with Genesys, Avaya, etc. Also possible to integrate with many popular conversation platforms like Google Assistant, Slack, Facebook Messenger, Kommunicate, and Google-contributed open-source integrations.&lt;/td&gt;
&lt;td&gt;Telephony &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/integration"&gt;integrations&lt;/a&gt; are available only for Avaya, Voximplant, Audio Codes and text based integrations are available for Dialogflow Messenger, Facebook Messenger and Line. The support for the rest of the platforms is not available yet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Language Support&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://cloud.google.com/dialogflow/es/docs/reference/language"&gt;Language support&lt;/a&gt; available for multiple languages.&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://cloud.google.com/dialogflow/cx/docs/reference/language"&gt;Language support&lt;/a&gt; available for fewer languages than DF ES.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;History feature&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The History page shows a simplified version of the conversations your agent has engaged in. These logs are chronological and intended to be an overview of how users interact with your agent.&lt;/td&gt;
&lt;td&gt;Not available in DF-CX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Agent building blocks&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Flat structure of intents&lt;/td&gt;
&lt;td&gt;Graph structure of flows and pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Conversation control&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Linear conversation paths that simulate nonlinear paths using intents as nodes and contexts to control paths&lt;/td&gt;
&lt;td&gt;State machine model with explicit conversation control using pages as nodes and state handlers to control paths&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Console user experience&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mostly text forms&lt;/td&gt;
&lt;td&gt;Visual graphs showing conversation paths and text forms for configurations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Intent reusability&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Intents are coupled with fulfillment, events, and responses; specific to a conversation state, so difficult to reuse&lt;/td&gt;
&lt;td&gt;Intents are simplified to remove this coupling and made highly reusable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Webhook Error handling&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Errors quietly ignored by agent, passed to API caller if present&lt;/td&gt;
&lt;td&gt;Explicit &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/handler#event-built-in"&gt;error event handling&lt;/a&gt; built-in to your agent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Parameter scope&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Can be scoped to &lt;a href="https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters"&gt;intent&lt;/a&gt;, &lt;a href="https://cloud.google.com/dialogflow/es/docs/contexts-input-output#param"&gt;context&lt;/a&gt;, or &lt;a href="https://cloud.google.com/dialogflow/es/docs/events-overview#param"&gt;event&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;Can be scoped to &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter#intent"&gt;intent&lt;/a&gt;, &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter#form"&gt;form&lt;/a&gt;, or &lt;a href="https://cloud.google.com/dialogflow/cx/docs/concept/parameter#session"&gt;session&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Pricing is more granular More economical. For  &lt;strong&gt;Text:&lt;/strong&gt; Production-ready quota $0.002 per request, For &lt;strong&gt;Audio input:&lt;/strong&gt; Production-ready quota $0.0065 per 15 seconds of audio, For &lt;strong&gt;Audio output:&lt;/strong&gt; Production-ready quota $4 to $16 per million characters&lt;/td&gt;
&lt;td&gt;Pricing is simplified 2.5 - 3 times higher than DF-ES For &lt;strong&gt;Text:&lt;/strong&gt; 1200 requests per minute $20 per 100 chat sessions, For &lt;strong&gt;Audio input/output:&lt;/strong&gt; 600 requests per minute $45 per 100 voice sessions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In conclusion, DialogFlow CX is an improved version of the Dialgoflow ES. CX has resolved all major drawbacks of the Dialogflow ES like improvement in slot filling, event handlers, parameters etc. But still it come up with the very high pricing rate as compare to ES. Based on my opinion both version has it's prons and cons. If you have very complex conversation flow then I suggest to go with the Dialogflow CX otherwise for simple flows Dialogflow ES is good enough. &lt;/p&gt;

&lt;p&gt;Thanks for reading this blog and Hope🤞 you liked it. I'm planning to create a series of blogs for Dialogflow CX concepts(Deeper Dive into Dialogflow CX). &lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://twitter.com/dhruv_rajkotia"&gt;FOLLOW&lt;/a&gt; me on twitter to get notify for my upcoming blogs regarding &lt;strong&gt;Deeper Dive into Dialogflow CX&lt;/strong&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/dialogflow#section-9"&gt;https://cloud.google.com/dialogflow#section-9&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/dialogflow/cx/docs"&gt;https://cloud.google.com/dialogflow/cx/docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/dialogflow/es/docs"&gt;https://cloud.google.com/dialogflow/es/docs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dialogflow</category>
      <category>nlp</category>
      <category>ai</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Units Guide, everything you need to know</title>
      <author>Amer Sikira</author>
      <pubDate>Sat, 09 Oct 2021 14:18:50 +0000</pubDate>
      <link>https://dev.to/amersikira/css-units-guide-everything-you-need-to-know-2kh4</link>
      <guid>https://dev.to/amersikira/css-units-guide-everything-you-need-to-know-2kh4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://webinuse.com/css-units-guide-everything-you-need-to-know/"&gt;webinuse.com&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
In CSS every property must have some value. Sometimes it’s a path, sometimes it’s color, sometimes it’s a string, but sometimes it’s a measurement unit. Today we are talking about the CSS units for measuring the length, width, and height of an element.&lt;/p&gt;

&lt;p&gt;There are a lot of CSS units that can be used for measurement, like: &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vw&lt;/code&gt;, etc. We can divide all these units into two groups:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Absolute units&lt;/li&gt;
&lt;li&gt; Relative units&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#1-absolute-css-units"&gt;
  &lt;/a&gt;
  1. Absolute CSS units
&lt;/h3&gt;

&lt;p&gt;Absolute units are the same on any device, regardless of size and settings. Depending on the purpose of our design we may use different units. Since they are not scaling with device size, absolute CSS units are not good for responsive design, while they are excellent for print.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#px"&gt;
  &lt;/a&gt;
  px
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;px&lt;/code&gt; stands for pixel and the visual size of a pixel varies depending on the screen resolution and quality. So &lt;code&gt;16px&lt;/code&gt; is not, visually, the same size on every screen. E.g. take bigger screens like 27″ or larger with 2560x1440px or even higher resolutions. If our text is 16px it will seem much smaller than it really is, and as a result, our UI might seem broken, which, then, affects UX.&lt;/p&gt;

&lt;p&gt;Regardless of this fact, a lot of developers still use px as their standard unit of measurement.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mmcmin"&gt;
  &lt;/a&gt;
  mm/cm/in
&lt;/h4&gt;

&lt;p&gt;We know these units from the real world, and it is not often that we see them used in the web world. But, these units are excellent for preparing our page for print. Because &lt;code&gt;mm&lt;/code&gt;, &lt;code&gt;cm&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt; are always the same, we can use &lt;code&gt;@media print&lt;/code&gt; query to implement those CSS units only when printing.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ptpc"&gt;
  &lt;/a&gt;
  pt/pc
&lt;/h4&gt;

&lt;p&gt;There are also &lt;code&gt;pt&lt;/code&gt; (point), &lt;code&gt;pc&lt;/code&gt; (pica) units, which are rarely used. &lt;code&gt;1pt&lt;/code&gt; is 1/72 of an inch and &lt;code&gt;1pc&lt;/code&gt; 12 points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Even though mm, cm, in, pt, pc are physical units there is no real guarantee that 1cm in CSS will be equal to 1cm on paper. Regardless, those units are better for printing than others we are going to talk about.&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/amersikira/pen/PoKoZoR"&gt;
  Absolute CSS units&lt;/a&gt; by Amer Sikira (&lt;a href="https://codepen.io/amersikira"&gt;@amersikira&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-relative-css-units"&gt;
  &lt;/a&gt;
  2. Relative CSS Units
&lt;/h3&gt;

&lt;p&gt;Unlike Absolute units, Relative units change depending on screen size and/or settings. Relative units are excellent for creating responsive design and they are excellent for screens, bad for printing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#percentage-"&gt;
  &lt;/a&gt;
  Percentage (%)
&lt;/h4&gt;

&lt;p&gt;What px is to absolute units, % is to relative units. We can call this a “legacy” unit. They are pretty easy to use. &lt;code&gt;1%&lt;/code&gt; refers to 1% of parent’s size.&lt;/p&gt;

&lt;p&gt;In the example below, we have &lt;code&gt;div#parent&lt;/code&gt; that is &lt;code&gt;400px&lt;/code&gt; wide and &lt;code&gt;200px&lt;/code&gt; tall. We also have &lt;code&gt;div#child&lt;/code&gt; that is &lt;code&gt;25%&lt;/code&gt; wide, which equals to &lt;code&gt;125px&lt;/code&gt; and &lt;code&gt;30%&lt;/code&gt; tall, which equals to &lt;code&gt;60px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/amersikira/pen/XWaWXjm"&gt;
  % example&lt;/a&gt; by Amer Sikira (&lt;a href="https://codepen.io/amersikira"&gt;@amersikira&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#emrem"&gt;
  &lt;/a&gt;
  em/rem
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt; units and &lt;code&gt;rem&lt;/code&gt; units are almost the same. Difference is that &lt;code&gt;em&lt;/code&gt; is relative to element’s &lt;code&gt;font-size&lt;/code&gt;, while &lt;code&gt;rem&lt;/code&gt; are relative to the root element’s &lt;code&gt;font-size&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#em"&gt;
  &lt;/a&gt;
  em
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;1em&lt;/code&gt; is equal to 100% of element’s &lt;code&gt;font-size&lt;/code&gt;. So, if element’s &lt;code&gt;font-size&lt;/code&gt; is &lt;code&gt;30px&lt;/code&gt; than &lt;code&gt;1em&lt;/code&gt; is same. &lt;code&gt;2em&lt;/code&gt; inside same element means &lt;code&gt;60px&lt;/code&gt;. Using &lt;code&gt;em&lt;/code&gt; for font-size property may not be the best idea, but using &lt;code&gt;em&lt;/code&gt; for margins, paddings and widths is good.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#rem"&gt;
  &lt;/a&gt;
  rem
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;1rem&lt;/code&gt; is equal to &lt;code&gt;100%&lt;/code&gt; of root element’s &lt;code&gt;font-size&lt;/code&gt;. Standard &lt;code&gt;font-size&lt;/code&gt; built-in browser is &lt;code&gt;16px&lt;/code&gt; if you do not change it, and we will see in a moment why it is not smart to change it.&lt;/p&gt;

&lt;p&gt;Rem unit is excellent for responsive design and it is excellent for accessibility (this is why we should not change root font-size). Let’s say we have a user who changed (in browser) root’s font-size from 16px to 25px. If we used rem, our design will scale accordingly, and our UI will be intact, hence our UX will be the same for every user.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#exch"&gt;
  &lt;/a&gt;
  ex/ch
&lt;/h4&gt;

&lt;p&gt;Similar to &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;ex&lt;/code&gt; and &lt;code&gt;ch&lt;/code&gt; CSS units are base on the &lt;code&gt;font-size&lt;/code&gt;. However, these units are also relative to &lt;code&gt;font-family&lt;/code&gt;. &lt;code&gt;ch&lt;/code&gt; stands for character unit and it is defined by the width of character “0”. The &lt;code&gt;ex&lt;/code&gt; unit is defined as “the current x-height of the current font or the half of 1em”, as per &lt;a href="https://www.freecodecamp.org/news/css-unit-guide/"&gt;this freeCodeCamp’s article&lt;/a&gt;. The height-x of a given font is the height of the lowercase “x” of that font. It is often the middle mark of the font.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lhrlh"&gt;
  &lt;/a&gt;
  lh/rlh
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;lh&lt;/code&gt; stands for line-height, and &lt;code&gt;rlh&lt;/code&gt; stands for root line-height. Same as &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;lh&lt;/code&gt; is “equal to the computed value of line-height” of the element, while &lt;code&gt;rlh&lt;/code&gt; is “equal to the computed value of line-height” of the root element. If &lt;code&gt;line-height: 20px&lt;/code&gt; then &lt;code&gt;1lh&lt;/code&gt; or &lt;code&gt;1rlh&lt;/code&gt; is equal to 20px, depends if we are talking of the element’s line height or the root element’s line height. These units are useful for aligning icons with text, according to the &lt;a href="https://css-tricks.com/lh-and-rlh-units/"&gt;css-tricks.com&lt;/a&gt; article.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vwvh"&gt;
  &lt;/a&gt;
  vw/vh
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;vw&lt;/code&gt; stands for viewport width and &lt;code&gt;vh&lt;/code&gt; stands for viewport height. This means that these units depend on the screen size. Element of &lt;code&gt;50vw&lt;/code&gt; will take 50% of the screen’s width, regardless of screen size and resolution. The same goes for &lt;code&gt;vh&lt;/code&gt;. Element of &lt;code&gt;50vh&lt;/code&gt; will take 50% of the screen’s height, regardless of screen size and resolution. We can use this for the width of the sections, which can prove like an excellent choice for responsive design.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vminvmax"&gt;
  &lt;/a&gt;
  vmin/vmax
&lt;/h4&gt;

&lt;p&gt;Unlike &lt;code&gt;vw&lt;/code&gt; and &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vmin&lt;/code&gt; and &lt;code&gt;vmax&lt;/code&gt; rely on the maximum width and a minimum height of the screen, or vice versa. For example, if screen size is &lt;code&gt;1920px&lt;/code&gt; by &lt;code&gt;1080px&lt;/code&gt;, then &lt;code&gt;1vmax&lt;/code&gt; is 19.2px and &lt;code&gt;1vmin&lt;/code&gt; is 10.8px.While, if the screen is &lt;code&gt;720px&lt;/code&gt; by &lt;code&gt;1080px&lt;/code&gt;, then &lt;code&gt;1vmin&lt;/code&gt; is 7.2px and &lt;code&gt;1vmax&lt;/code&gt; is 10.8px.&lt;/p&gt;

&lt;p&gt;To calculate vmin and vmax we take screen size and then divide both width and height by 100. Whichever is smaller that is &lt;code&gt;1vmin&lt;/code&gt; and whichever is larger it is &lt;code&gt;1vmax&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There are more units that we have not discussed here. We chose these units because they are, either, common or useful. Almost any of these units will “do the job”. But there are some units that are better for some things than others. For additional information on CSS units, we can use &lt;a href="https://www.w3.org/TR/css-values-4/#font-relative-lengths"&gt;Level 4 spec for CSS values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or anything you can find me on my &lt;a href="https://twitter.com/AmerSikira"&gt;Twitter&lt;/a&gt;, or you can read some of my other articles like &lt;a href="https://webinuse.com/how-to-merge-objects-in-javascript/"&gt;How to merge objects in JavaScript?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>Turbo Frames on Rails</title>
      <author>David Colby</author>
      <pubDate>Sat, 09 Oct 2021 13:47:04 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/turbo-frames-on-rails-5f4i</link>
      <guid>https://dev.to/davidcolbyatx/turbo-frames-on-rails-5f4i</guid>
      <description>&lt;p&gt;Turbo, part of the Hotwire tripartite, gives you the tools to write dramatically less custom JavaScript than you would otherwise need to build modern, performant web applications.&lt;/p&gt;

&lt;p&gt;Turbo is composed of &lt;code&gt;Turbo Drive&lt;/code&gt;, &lt;code&gt;Turbo Frames&lt;/code&gt;, &lt;code&gt;Turbo Streams&lt;/code&gt;, and &lt;code&gt;Turbo Native&lt;/code&gt;. Each is a valuable piece of the puzzle but today we’re going to focus on &lt;code&gt;Turbo Frames&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Turbo Frames “&lt;a href="https://turbo.hotwired.dev/handbook/frames"&gt;allow predefined parts of a page to be updated on request&lt;/a&gt;.” Used wisely, frames allow developers to decompose their UI into independently updated pieces, quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-use-turbo-frames"&gt;
  &lt;/a&gt;
  Why should I use Turbo Frames?
&lt;/h2&gt;

&lt;p&gt;Turbo Frames unlock a huge amount of potential with minimal changes to existing code and they can be gradually introduced to existing projects without necessitating major architectural changes.&lt;/p&gt;

&lt;p&gt;In greenfield projects designed with Turbo Frames in mind, a small team of developers can use frames to deliver fast, efficient user interfaces in dramatically less time than would be required when build a SPA-powered front end.&lt;/p&gt;

&lt;p&gt;While Turbo Frames can be used with many different tech stacks, Rails developers will find the tight integration of frames into Rails (via the &lt;a href="https://github.com/hotwired/turbo-rails"&gt;turbo-rails&lt;/a&gt; gem) makes using frames in Rails a breeze.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-turbo-documentation-gap"&gt;
  &lt;/a&gt;
  The Turbo documentation gap
&lt;/h2&gt;

&lt;p&gt;As with many new technologies, one of the barriers to getting started with Turbo Frames is inconsistent/incomplete documentation. Along with problems in the official documentation, much of the tutorial content written about Turbo Frames is already out of date.&lt;/p&gt;

&lt;p&gt;Turbo has evolved quickly since its release in December of 2020, and the documentation and supporting tutorials from content creators have struggled to keep pace.&lt;/p&gt;

&lt;p&gt;As an example of the documentation gap, &lt;code&gt;turbo-rails&lt;/code&gt; doesn’t have any dedicated usage documentation, instead just linking to the base Turbo docs and letting users figure out the rest.&lt;/p&gt;

&lt;p&gt;This means that learning to use Turbo Frames in your Rails application today often requires reading the docs, then digging through source code, and then Googling your way through Github issues and forum posts. Turbo Frames can be difficult to approach.&lt;/p&gt;

&lt;p&gt;In time the documentation will improve and the community will coalesce around best practices and standards that can be more easily communicated to new users.&lt;/p&gt;

&lt;p&gt;In the meantime, here we are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-article-who-is-it-for"&gt;
  &lt;/a&gt;
  What is this article? Who is it for?
&lt;/h2&gt;

&lt;p&gt;Today, I’m going to share what I’ve learned over nearly a year building applications with Turbo Frames, from small hobby projects and experiments to multiple large, legacy production applications.&lt;/p&gt;

&lt;p&gt;By doing so, I’m hoping to address the gaps in documentation, to save you from spending too much time reading source code, trawling forum posts and Github issues.&lt;/p&gt;

&lt;p&gt;I will cover content you can find in the documentation (if you know where to look), gotchas and tricks learned from real world experience and picked up from reading way too much about Turbo and Turbo Frames since Turbo’s initial release. I’ll also share patterns that illuminate some of the common web application needs that frames are perfect for.&lt;/p&gt;

&lt;p&gt;This content is geared towards Rails developers interested in using Turbo. The code samples and concepts will be illustrated using Ruby and Rails code and conventions. If you aren’t working in Rails, you should still find plenty of value here, but know that you may not have access to convenience methods like &lt;code&gt;&amp;lt;%= turbo_frame_tag %&amp;gt;&lt;/code&gt; in your chosen language and framework.&lt;/p&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-turbo-frames"&gt;
  &lt;/a&gt;
  What are Turbo Frames?
&lt;/h2&gt;

&lt;p&gt;At a high level, &lt;a href="https://turbo.hotwired.dev/handbook/frames"&gt;Turbo Frames&lt;/a&gt; are pieces of a webpage that can be updated independently, without impacting the rest of the content on the page.&lt;/p&gt;

&lt;p&gt;Links and forms within a frame will, by default, attempt to update only the content of the containing frame, whether the server sends a completely new HTML document or only a page fragment.&lt;/p&gt;

&lt;p&gt;Turbo Frames allow developers to decompose a page into pieces of content that can be updated individually as new information is received from a server.&lt;/p&gt;

&lt;p&gt;In practice, common use cases for Turbo Frames include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tabbed content &lt;/li&gt;
&lt;li&gt;In-line editing &lt;/li&gt;
&lt;li&gt;Searching, sorting, and filtering data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start looking at code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constructing-a-frame"&gt;
  &lt;/a&gt;
  Constructing a frame
&lt;/h2&gt;

&lt;p&gt;A basic Turbo Frame, rendered with the &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/helpers/turbo/frames_helper.rb"&gt;built-in helper&lt;/a&gt; from Turbo Rails (and using erb), looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"some_id"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Some framed content
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only required argument for &lt;code&gt;turbo_frame_tag&lt;/code&gt; is an id. &lt;/p&gt;

&lt;p&gt;When the helper is processed, the final HTML is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"some_id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Some framed content
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of providing a static id, we can also pass in an active record object, which the &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/helpers/turbo/frames_helper.rb#L27"&gt;helper will use&lt;/a&gt; to generate a unique id via &lt;code&gt;dom_id(object.id)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Frames can also receive an &lt;code&gt;src&lt;/code&gt; attribute. When &lt;code&gt;src&lt;/code&gt; is supplied, the frame will be populated after the initial page load via a separate HTTP request to the frame’s &lt;code&gt;src&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"comments"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;src: &lt;/span&gt;&lt;span class="n"&gt;comments_path&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Placeholder content
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the page will initially load the turbo frame with the placeholder div and then immediately a request to &lt;code&gt;comments_path&lt;/code&gt; endpoint is made and the content of the Turbo Frame is replaced with the response from the server, provided our server returns HTML with a matching Turbo Frame tag.&lt;/p&gt;

&lt;p&gt;What’s a matching Turbo Frame tag? Let’s look at that next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responding-with-frame-content"&gt;
  &lt;/a&gt;
  Responding with frame content
&lt;/h2&gt;

&lt;p&gt;The power of Turbo Frames is in replacing pieces of the page with content sent from the server — without touching the rest of the DOM.&lt;/p&gt;

&lt;p&gt;Updating an existing frame just requires responding to a request with HTML that contains a Turbo Frame element with an id that matches the id of the frame target sent in the request.&lt;/p&gt;

&lt;p&gt;Taking the &lt;code&gt;comments&lt;/code&gt; example from above, when a request is made to &lt;code&gt;/comments&lt;/code&gt;, the server should respond with HTML that contains a frame like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comments"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- A list of comments, perhaps --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content inside of the matched frame is replaced with the updated content from the server, without touching the rest of the page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navigating-within-frames"&gt;
  &lt;/a&gt;
  Navigating within frames
&lt;/h2&gt;

&lt;p&gt;By default, links and forms within a Turbo Frame will perform the navigation within the frame, rather than performing a full page turn.&lt;/p&gt;

&lt;p&gt;For a simple example, we can imagine that we have a list of comments on a page and that each comment is wrapped in a Turbo Frame tag, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@comments&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This ERB results in rendered HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comment_1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/comments/1/edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comment 1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comment_2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/comments/2/edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comment 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comment_3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/comments/3/edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comment 3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this Turbo-powered HTML in place, clicks on the edit links will make a Turbo Frame request to &lt;code&gt;/comments/:id/edit&lt;/code&gt;, retrieve some HTML, and return that HTML to the browser.&lt;/p&gt;

&lt;p&gt;The Turbo Frame request is a normal HTML request with an additional &lt;code&gt;Turbo-Frame&lt;/code&gt; header included in the request, with a value that matches the id of the target Turbo Frame.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;turbo-rails&lt;/code&gt;, the presence of this header can be used to &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/controllers/turbo/frames/frame_request.rb#L21"&gt;identify a Turbo Frame request&lt;/a&gt; and respond with appropriate content, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This approach gets messy in controller actions. Read further on for a variant based approach that scales much more cleanly&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_request?&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s2"&gt;"some_turbo_frame_partial"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s2"&gt;"some_other_partial"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;turbo-rails&lt;/code&gt; responds to a Turbo Frame request, it &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/controllers/turbo/frames/frame_request.rb#L16"&gt;automatically removes&lt;/a&gt; the layout from the HTML response. Since Turbo will discard all of the HTML but the requested frame, Rails skips rendering content that it knows won't be used.&lt;/p&gt;

&lt;p&gt;When a response to a Turbo Frame request is received, &lt;a href="https://turbo.hotwired.dev/reference/drive"&gt;Turbo Drive&lt;/a&gt; replaces the content of the target frame, leaving the rest of the page untouched.&lt;/p&gt;

&lt;p&gt;Continuing with the above comments example, the edit view may look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;model: &lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inline-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;label&lt;/span&gt; &lt;span class="ss"&gt;:body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"actions"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After clicking to edit a comment then, the updated HTML after Turbo processes the response would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Form content rendered from /edit --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comments_1"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:3000/comments/1/edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/comments/1"&lt;/span&gt; &lt;span class="na"&gt;accept-charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_method"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"patch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"authenticity_token"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"some_token"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inline-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"comment_body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Body&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Comment 1"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"comment[body]"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comment_body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"actions"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"commit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Update Comment"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- The other frames, untouched by the /edit request --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comment_2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/comments/2/edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comment 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comment_3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/comments/3/edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comment 3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finishing up this example, what happens when the user submits the comment form?&lt;/p&gt;

&lt;p&gt;After submit in a normal Rails action, we might redirect the user to the comment show page. When the request occurs within a Turbo Frame, a “redirect” still occurs, but rather than redirecting the page in the browser, the redirect is followed, the new HTML content is sent from the server, and that HTML is used to update the frame.&lt;/p&gt;

&lt;p&gt;In our example, the &lt;code&gt;comment#update&lt;/code&gt; controller action might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
  &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the show view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This behavior allows us to build Turbo Frame-powered interfaces while making very few or no changes to a standard Rails controller, making it possible to prototype in Rails very quickly.&lt;/p&gt;

&lt;p&gt;With just what we’ve learned so far, we’re already in position to start building simple interfaces with Turbo Frames that allow us to add significant amounts of interactivity to our application with very few changes to the Ruby and HTML we’d have in any Rails app.&lt;/p&gt;

&lt;p&gt;Let’s keep exploring, there’s plenty more to see.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-out-of-a-frame"&gt;
  &lt;/a&gt;
  Breaking out of a frame
&lt;/h3&gt;

&lt;p&gt;While navigating within a frame is very handy, sometimes, a form or link within a frame needs to break out of the frame and perform a normal page turn.&lt;/p&gt;

&lt;p&gt;To add that behavior to a navigation element within a frame, simply add &lt;code&gt;data-turbo-frame="_top"&lt;/code&gt; to the element, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;turbo_frame: &lt;/span&gt;&lt;span class="s2"&gt;"_top"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#targeting-a-frame-from-the-outside"&gt;
  &lt;/a&gt;
  Targeting a frame from the outside
&lt;/h3&gt;

&lt;p&gt;Eventually, you’ll find yourself needing to update the content of a frame using a link that isn’t wrapped in your target frame. This often comes up when building tabbed content; the navigation menu will be placed outside of the Turbo Frame that contains the actual content.&lt;/p&gt;

&lt;p&gt;To handle situations like this, we can use the same &lt;code&gt;turbo-frame&lt;/code&gt; data attribute to tell Turbo that the navigation should occur in a specific turbo frame.&lt;/p&gt;

&lt;p&gt;Using our tabbed content example, we may have a page layout like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"user/1/profile"&lt;/span&gt; &lt;span class="na"&gt;data-turbo-frame=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Profile
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"user/1/favorites"&lt;/span&gt; &lt;span class="na"&gt;data-turbo-frame=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Favorites
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/turbo-frame&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clicks on either of the &lt;code&gt;user&lt;/code&gt; links will generate a request with a &lt;code&gt;Turbo-Frame: main&lt;/code&gt; header and the response will update the content of the &lt;code&gt;main&lt;/code&gt; turbo frame, even though the links are not wrapped within the frame.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-loading-frames"&gt;
  &lt;/a&gt;
  Lazy loading Frames
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; attribute on a frame can be combined with &lt;code&gt;loading=lazy&lt;/code&gt; to mark a frame as lazy-loaded. Lazy-loaded frames will not fetch their content from the server until they’re visible on the page.&lt;/p&gt;

&lt;p&gt;Lazy loading is especially helpful for modals, popovers, and other non-critical, below-the-fold content.&lt;/p&gt;

&lt;p&gt;Lazy loaded frames can be combined with a spinner or other loading indicator, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"lazy_frame"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;src: &lt;/span&gt;&lt;span class="n"&gt;comments_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;loading: &lt;/span&gt;&lt;span class="s2"&gt;"lazy"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;I'm a loading spinner&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;loading="lazy"&lt;/code&gt; must be combined with a &lt;code&gt;src&lt;/code&gt; attribute, otherwise lazy loading does nothing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frame-events"&gt;
  &lt;/a&gt;
  Frame events
&lt;/h2&gt;

&lt;p&gt;Turbo comes packed with &lt;a href="https://turbo.hotwired.dev/reference/events"&gt;lifecycle events&lt;/a&gt;, including two frame specific events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;turbo:frame-render&lt;/li&gt;
&lt;li&gt;turbo:frame-load&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These events (added in &lt;a href="https://github.com/hotwired/turbo/releases/tag/v7.0.0-rc.2"&gt;Turbo 7.0.0-rc2&lt;/a&gt;) fire each time a frame is loaded or reloaded. Developers can use these events to attach behavior to an element within a frame or animate the entry of a frame element, and they pair nicely with &lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to these built in events, a useful complement to the emitted events is the &lt;code&gt;busy&lt;/code&gt; attribute. The &lt;a href="https://github.com/hotwired/turbo/blob/main/src/core/frames/frame_controller.ts#L170"&gt;busy attribute&lt;/a&gt; is automatically applied to a frame when a request for the frame’s content begins and is removed when the request finishes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From Turbo's source code: turbo/src/core/frames/frame_controller.ts&lt;/span&gt;
&lt;span class="nx"&gt;requestStarted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FetchRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;busy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;requestFinished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FetchRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;busy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This attribute can be useful for adding loading indicators to long running requests and otherwise tracking the state of frames between the beginning of a frame request and the &lt;code&gt;turbo:frame-render&lt;/code&gt; and &lt;code&gt;turbo:frame-load&lt;/code&gt; events firing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refreshing-frames"&gt;
  &lt;/a&gt;
  Refreshing Frames
&lt;/h2&gt;

&lt;p&gt;Sometimes, users need the ability to refresh the contents of a frame without refreshing the entire page.&lt;/p&gt;

&lt;p&gt;In ideal circumstances, a &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/models/concerns/turbo/broadcastable.rb"&gt;Turbo Stream broadcast&lt;/a&gt; automatically updates the contents of the frame without needing a manual refresh, we don't always get to work in ideal circumstances.&lt;/p&gt;

&lt;p&gt;In earlier versions of Turbo, refreshing a frame required &lt;a href="https://github.com/hotwired/turbo/issues/269"&gt;workarounds&lt;/a&gt; like appending a timestamp to the &lt;code&gt;src&lt;/code&gt; attribute. Today, those workarounds are no longer necessary and Turbo will happily update a frame any number of times with an indentical &lt;code&gt;src&lt;/code&gt; on each request.&lt;/p&gt;

&lt;p&gt;We can build a refreshable frame like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/games/show.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="vi"&gt;@game&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_score&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_score&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"Update score"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;game_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the first time a user clicks the update link, the &lt;code&gt;turbo-frame&lt;/code&gt; will be updated with an &lt;code&gt;src&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;turbo-frame&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"game_10"&lt;/span&gt; &lt;span class="na"&gt;reloadable=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:3000/games/10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additional clicks on the update link will fetch updated scores from the server and reload the content of the frame.&lt;/p&gt;

&lt;p&gt;Note that a &lt;a href="https://github.com/hotwired/turbo/pull/383"&gt;currently open PR&lt;/a&gt; (as of the time this article was written, October 2021) proposes an alternative implementation of reloadable frames that will prevent the &lt;code&gt;reloadable&lt;/code&gt; attribute from being exposed while keeping the behavior intact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-template-rendering-using-variants"&gt;
  &lt;/a&gt;
  Conditional template rendering using variants
&lt;/h2&gt;

&lt;p&gt;As you use Turbo Frames in Rails, you’ll eventually run into the desire to have a single controller action respond to both Turbo Frame requests and regular, full-page requests.&lt;/p&gt;

&lt;p&gt;A common example of this is rendering a &lt;code&gt;/new&lt;/code&gt; page as both a standalone page and as frame content inside of a modal. You could implement a conditional in your controller action to check for the Turbo Frame header, but that quickly starts to clutter up your controllers.&lt;/p&gt;

&lt;p&gt;An alternative approach is to use &lt;a href="https://guides.rubyonrails.org/layouts_and_rendering.html#the-variants-option"&gt;variants&lt;/a&gt; to render different content based on the inbound request headers, to keep your controllers cleaner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:turbo_frame_request_variant&lt;/span&gt;
  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;turbo_frame_request_variant&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:turbo_frame&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_request?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach adds a before_action to the ApplicationController that checks if the inbound request is a Turbo Frame request using the &lt;code&gt;turbo_frame_request?&lt;/code&gt; method &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/controllers/turbo/frames/frame_request.rb#L21"&gt;provided by turbo-rails&lt;/a&gt;. When the request is a turbo frame, Rails will look for a Turbo Frame variant (&lt;code&gt;new.html+turbo_frame.erb&lt;/code&gt;, for example) and render that variant when it exists. Otherwise, the default &lt;code&gt;html.erb&lt;/code&gt; view will be used&lt;/p&gt;

&lt;p&gt;This approach was originally described &lt;a href="https://github.com/hotwired/turbo/issues/378#issuecomment-914615544"&gt;here&lt;/a&gt;. As of October 2021, there are &lt;a href="https://github.com/hotwired/turbo-rails/pull/232"&gt;open&lt;/a&gt; pull &lt;a href="https://github.com/hotwired/turbo-rails/pull/250"&gt;requests&lt;/a&gt; to build in the variant &lt;code&gt;before_action&lt;/code&gt; to &lt;code&gt;turbo-rails&lt;/code&gt; to provide this functionality out of the box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-amp-gotchas"&gt;
  &lt;/a&gt;
  Limitations &amp;amp; Gotchas
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#turbo-frames-and-page-layouts"&gt;
  &lt;/a&gt;
  Turbo Frames and page layouts
&lt;/h3&gt;

&lt;p&gt;Turbo Frames in the DOM are impelemented as custom HTML elements (the &lt;code&gt;&amp;lt;turbo-frame&amp;gt;&lt;/code&gt; tag we've seen in this article). We can add classes to them (&lt;code&gt;&amp;lt;%= turbo_frame_tag post, class: "classes" %&amp;gt;&lt;/code&gt;) and style them; however, because they exist in the DOM and need to wrap their content to be useful, inserting them into existing layouts can cause issues without some planning.&lt;/p&gt;

&lt;p&gt;In particular, you can’t place a frame inside of a table row. While there are &lt;a href="https://github.com/hotwired/turbo/issues/48#issuecomment-882575388"&gt;workarounds&lt;/a&gt; for this, it is worth knowing that tables and Turbo Frames don’t play well together out of the box.&lt;/p&gt;

&lt;p&gt;In addition to table issues, you may sometimes run into layout issues with flex box and grid layouts when frames are the direct descendent of the container element. You'll sometimes find that your nicely spaced three element flex layout now breaks because all three elements need to be wrapped in a single &lt;code&gt;&amp;lt;turbo-frame&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;A route worth exploring in these situations is adding  &lt;code&gt;display: contents&lt;/code&gt;  to the &lt;code&gt;&amp;lt;turbo-frame&amp;gt;&lt;/code&gt; element, as mentioned &lt;a href="https://github.com/hotwired/turbo/issues/48#issuecomment-925760725"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#responding-to-a-turbo-frame-request-without-a-matching-turbo-frame"&gt;
  &lt;/a&gt;
  Responding to a Turbo Frame request without a matching Turbo Frame
&lt;/h3&gt;

&lt;p&gt;As you build applications with Turbo Frames, you will inevitably run into an issue in development where you click a link within a frame and all of the content within the frame disappears. You’ll check the Rails logs and see the view you expected was rendered without errors.&lt;/p&gt;

&lt;p&gt;Why did everything disappear?&lt;/p&gt;

&lt;p&gt;The first thing to do when this happens is to check the JavaScript console for errors. Turbo’s JavaScript expects that the HTML response to a Turbo Frame request will contain a matching Turbo Frame element. If no match is found, Turbo will empty the frame of all content and raise an error like this in the JavaScript console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Response has no matching &amp;lt;turbo-frame id="target_id"&amp;gt; element
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be a little confusing at first, since the content renders fine from the server but once you get used to Turbo processing the rendered HTML and updating the DOM, you’ll be able to quickly debug missing frame element errors like this one.&lt;/p&gt;

&lt;p&gt;When in doubt, check for JavaScript errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-page-url-when-navigating-within-frame"&gt;
  &lt;/a&gt;
  Updating page URL when navigating within frame
&lt;/h3&gt;

&lt;p&gt;When a user clicks on a link within a frame, the URL of the page won’t change. This makes sense most of the time — the user hasn’t navigated to a new page, they’ve simply updated some of the content on the existing page. &lt;/p&gt;

&lt;p&gt;One use case where the URL not changing can be problematic is when the user is applying sorting and filtering options by clicking links within a frame. Imagine a table layout with links to sort the table by each column, for example.&lt;/p&gt;

&lt;p&gt;In those cases, a developer may wish to update the URL of the page to reflect the currently applied filters so that the user can copy/paste the URL to share a specific view of the table.&lt;/p&gt;

&lt;p&gt;Out of the box, Turbo Frames cannot modify the URL or push to the browser's history. An &lt;a href="https://github.com/hotwired/turbo/pull/398"&gt;open PR&lt;/a&gt; proposes adding this feature to links, but that feature has not yet been merged.&lt;/p&gt;

&lt;p&gt;Until that feature merges, &lt;a href="https://github.com/hotwired/turbo/issues/50"&gt;workarounds exist&lt;/a&gt; to add this behavior to your application, if it is vital to your product's user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Today we looked in detail at the current state of Turbo Frames — what they are, how to use them in Rails, and the some of the ways frames can help you build modern, efficient applications.&lt;/p&gt;

&lt;p&gt;Turbo Frames in Rails applications naturally pair very well with Stimulus and work exceptionally well when paired with Turbo Streams to manage broadcasted updates and more targeted content updates.&lt;/p&gt;

&lt;p&gt;With Hotwire coming &lt;a href="https://world.hey.com/dhh/rails-7-will-have-three-great-answers-to-javascript-in-2021-8d68191b"&gt;by default&lt;/a&gt; to new Rails 7 applications, I'm happy to report that after a year of use, building Ruby on Rails applications with the Hotwire stack is simple, straightforward, and adds very little overhead to your development experience. For mnay Rails applications, all of the reactivity you need can be achieved with the Hotwire stack, and Turbo Frames will play a key role in many applications in the years to come.&lt;/p&gt;

&lt;p&gt;While you begin to experiment, keep in mind that Turbo is still in very active development. Throughout this article, I linked to open PRs that will improve Turbo Frames and make some of the techniques described in this article simpler to implement — as time goes on, expect Turbo and Turbo Frames to continue to improve and for &lt;code&gt;turbo-rails&lt;/code&gt; to continue to add functionality to help Rails developers use frames effectively in their applications.&lt;/p&gt;

&lt;p&gt;Ready to go deeper? (Some shameless self-promotion ahead, sorry!)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I wrote about &lt;a href="https://www.colby.so/posts/handling-modal-forms-with-rails-and-hotwire"&gt;using the Hotwire stack&lt;/a&gt; to build server rendered modal forms in Rails&lt;/li&gt;
&lt;li&gt;Build a &lt;a href="https://thoughtbot.com/blog/hotwire-typeahead-searching"&gt;typeahead search interface&lt;/a&gt; with Turbo Frames&lt;/li&gt;
&lt;li&gt;Use a Turbo Stream + Turbo Frame combo to &lt;a href="https://www.colby.so/posts/conditional-rendering-with-turbo-stream-broadcasts"&gt;render different content&lt;/a&gt; to different users from a single stream broadcast&lt;/li&gt;
&lt;li&gt;Read my &lt;a href="https://www.colby.so/posts/turbo-streams-on-rails"&gt;exploration&lt;/a&gt; of Turbo Streams&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://landing.mailerlite.com/webforms/landing/d7z0n0"&gt;Sign up for&lt;/a&gt; my monthly newsletter to stay up to date on modern Ruby on Rails development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all for today. As always, thanks for reading!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>hotwire</category>
    </item>
    <item>
      <title>Introducing Async Channels</title>
      <author>Eyal Shalev</author>
      <pubDate>Sat, 09 Oct 2021 13:44:04 +0000</pubDate>
      <link>https://dev.to/eyalshalev/introducing-async-channels-333n</link>
      <guid>https://dev.to/eyalshalev/introducing-async-channels-333n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h2&gt;

&lt;p&gt;Channels are queue-like objects &lt;em&gt;(First In First Out)&lt;/em&gt; that their &lt;code&gt;enqueue&lt;/code&gt; (send) and &lt;code&gt;dequeue&lt;/code&gt; (get) functions are asynchronous (&lt;code&gt;async&lt;/code&gt;). By passing them between asynchronous functions we can synchronize operations between said functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Let's say we want to process a large chunk of data &lt;em&gt;(simulated by a several lorem-ipsum paragraphs)&lt;/em&gt;.&lt;br&gt;
Some of the processes that we want to perform on that data are fast, while other are time (and resource) consuming.&lt;br&gt;
To avoid overwhelming our infrastructure, we want to make not to send data to a process that isn't ready to accept new data. In other words, we want to implement &lt;a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7"&gt;back-preasure&lt;/a&gt;.&lt;br&gt;
This is where &lt;strong&gt;Async Channels&lt;/strong&gt; come into play.&lt;/p&gt;

&lt;p&gt;When you &lt;code&gt;send&lt;/code&gt; (or &lt;code&gt;get&lt;/code&gt;) a message to (or from) a channel, it returns a promise.&lt;br&gt;
For &lt;code&gt;send&lt;/code&gt; requests, it will resolve if the channel has available buffer, or (if not), after a &lt;code&gt;get&lt;/code&gt; is performed on the channel.&lt;br&gt;
And on the opposite side, a &lt;code&gt;get&lt;/code&gt; request will resolve if there is buffered message on the channel, or after a &lt;code&gt;send&lt;/code&gt; request is made.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;Below is an example usage of &lt;strong&gt;async_channels&lt;/strong&gt;, where long processes are simulated by calling &lt;code&gt;sleep&lt;/code&gt; (a helper function that returns a promise that is resolved after &lt;code&gt;n&lt;/code&gt; seconds).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Eyal-Shalev/embed/xxLKjwR?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;br&gt;&lt;br&gt;
You can view the documentation on &lt;a href="https://eyal-shalev.github.io/async_channels"&gt;eyal-shalev.github.io/async_channels&lt;/a&gt;&lt;br&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Eyal-Shalev"&gt;
        Eyal-Shalev
      &lt;/a&gt; / &lt;a href="https://github.com/Eyal-Shalev/async_channels"&gt;
        async_channels
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Inspired by Go &amp;amp; Clojure Channels, async_channels provides channels as an asynchronous communication method between asynchronous functions.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>library</category>
      <category>async</category>
      <category>channels</category>
    </item>
    <item>
      <title>How to make a good looking button with Tailwind CSS</title>
      <author>Siddharth Chaudhary</author>
      <pubDate>Sat, 09 Oct 2021 13:36:14 +0000</pubDate>
      <link>https://dev.to/sidcraftscode/build-a-good-looking-button-with-tailwind-css-3o03</link>
      <guid>https://dev.to/sidcraftscode/build-a-good-looking-button-with-tailwind-css-3o03</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Tailwind CSS is a utility based framework. Which is great in many ways. However, Tailwind CSS does not have a default set of components for you to get started with.&lt;/p&gt;

&lt;p&gt;This is a series that will show you how to build various common UI components with Tailwind CSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today, we're going to be learning how to make a (good looking) button with Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Let's start by making a button&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's add some padding and margins&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="m-2 px-8 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we can add text and background colors&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="m-2 px-8 py-2 bg-indigo-500 text-white"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We should give our button rounded corners&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="m-2 px-8 py-2 bg-indigo-600 text-white rounded-lg "&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's give our button a small shadow&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="m-2 px-8 py-2 bg-indigo-600 text-white rounded-lg  shadow-sm"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It is important that we add &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; styles to our button&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="m-2 px-8 py-2 bg-indigo-600 text-white rounded-lg  shadow-sm hover:bg-indigo-500 focus:ring-2 focus:ring-indigo-200"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here's what our button should look like now 👇 &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/chaudhs769/embed/LYjYpJG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-10-css-classes-1"&gt;
  &lt;/a&gt;
  Making 10 css classes 1
&lt;/h2&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/afif"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0f-EwtOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--apy3IWsG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/afif"&gt;
        &lt;span class="comment-username"&gt;Temani Afif&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/afif/comment/1ilh9" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Oct 9
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I think that a button with 10 classes is a bit .. too much.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Thank you so much &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
. This comment gave me inspiration to add this section to my article. There are too many classes on this button. However, thanks to the &lt;code&gt;@apply&lt;/code&gt; directive, we can make this one class. We can simply take all our classes and "apply" them to one class.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;m-2&lt;/span&gt; &lt;span class="err"&gt;px-8&lt;/span&gt; &lt;span class="err"&gt;py-2&lt;/span&gt; &lt;span class="err"&gt;bg-indigo-600&lt;/span&gt; &lt;span class="err"&gt;text-white&lt;/span&gt; &lt;span class="err"&gt;rounded-lg&lt;/span&gt;  &lt;span class="err"&gt;shadow-sm&lt;/span&gt; &lt;span class="py"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bg-indigo-500&lt;/span&gt; &lt;span class="n"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ring-2&lt;/span&gt; &lt;span class="n"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ring-indigo-200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after rebuilding your css, you can replace all those classes with one class in your button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading and I hope you liked the article! 😊&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>Data Structures Problem - Checking for Children Sum Property in a given Binary Tree 🌳</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 09 Oct 2021 13:21:20 +0000</pubDate>
      <link>https://dev.to/thenerdydev/data-structures-problem-checking-for-children-sum-property-in-a-given-binary-tree-2f5a</link>
      <guid>https://dev.to/thenerdydev/data-structures-problem-checking-for-children-sum-property-in-a-given-binary-tree-2f5a</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;/p&gt;

&lt;p&gt;I just released a new video on solving an interview problem : &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checking for Children Sum Property in a given Binary Tree&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this video, we will solve the problem of checking whether the given binary tree satisfies the children sum property or not.&lt;br&gt;
We will first understand the approach that we will be taking to solve this problem and then we will write the code for the same problem together. Once we are done with the implementation, we will do a quick dry run for the code to understand and make complete sense of the output that we get&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gQcNn98L2Ao"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Support my channel:&lt;br&gt;
💜 Join the Discord community 👨‍👩‍👧‍👦: &lt;a href="https://discord.gg/fgbtN2a"&gt;https://discord.gg/fgbtN2a&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;br&gt;
👉 Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! 🙏&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>DataDog vs Prometheus - Key features, differences, and alternatives</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Sat, 09 Oct 2021 13:00:38 +0000</pubDate>
      <link>https://dev.to/signoz/datadog-vs-prometheus-key-features-differences-and-alternatives-2df5</link>
      <guid>https://dev.to/signoz/datadog-vs-prometheus-key-features-differences-and-alternatives-2df5</guid>
      <description>&lt;p&gt;Both DataDog and Prometheus are application monitoring tools aimed to improve application performance. While DataDog is a proprietary SaaS vendor in the APM domain, Prometheus is an open-source metrics monitoring tool that was the second project to graduate from Cloud Native Computing Foundation in 2018. Let us compare DataDog and Prometheus in this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will explore the differences between DataDog and Prometheus based on these categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting started&lt;/li&gt;
&lt;li&gt;Monitoring use-cases&lt;/li&gt;
&lt;li&gt;User-experience and visualizations&lt;/li&gt;
&lt;li&gt;Pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also explore the key features of DataDog and Prometheus.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While DataDog and Prometheus are great monitoring tools, they have their limitations. DataDog is an enterprise SaaS tool with complex pricing tiers. Prometheus is an open-source metrics monitoring tool with limited UI and requires effort to set up and scale.&lt;br&gt;&lt;br&gt;
You can check out &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; - an open-source APM tool that comes with great user experience in terms of getting started and web user experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#comparing-datadog-and-prometheus"&gt;
  &lt;/a&gt;
  Comparing DataDog and Prometheus
&lt;/h2&gt;

&lt;p&gt;The major difference between DataDog and Prometheus lies in the scope of monitoring that each tool covers. DataDog is an enterprise SaaS tool that offers products that cover the entire domain of monitoring.&lt;/p&gt;

&lt;p&gt;On the other hand, Prometheus is an open-source metrics monitoring tool used to track metrics like resource usage.&lt;/p&gt;

&lt;p&gt;Some of the key differences between DataDog and Prometheus:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;

&lt;p&gt;DataDog is relatively simpler to get started than Prometheus. You need to sign up for a DataDog account and then install DataDog agents on your host. The DataDog agent can be installed on many platforms either directly or as a containerized version. The agent reports events and metrics from the host.&lt;/p&gt;

&lt;p&gt;Prometheus installation requires a bit of configuration to get started. You also need to set up a long-term storage layer if you want to retain your metrics. It is easier to get started with Prometheus for monitoring other CNCF projects like Kubernetes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitoring-usecases"&gt;
  &lt;/a&gt;
  Monitoring use-cases
&lt;/h3&gt;

&lt;p&gt;DataDog has an extensive list of monitoring services it offers. List of all monitoring products that DataDog provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log Management&lt;/li&gt;
&lt;li&gt;APM&lt;/li&gt;
&lt;li&gt;Security Monitoring&lt;/li&gt;
&lt;li&gt;Infrastructure Monitoring&lt;/li&gt;
&lt;li&gt;Network Monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus enables you to capture time-series data as metrics. These metrics can be aggregated to give insights into the behavior of our systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-experience-and-visualizations"&gt;
  &lt;/a&gt;
  User experience and visualizations
&lt;/h3&gt;

&lt;p&gt;Prometheus ships with a visualization layer, but its functionality and UI are limited. Usually, if someone uses Prometheus, they integrate it with Grafana, another open-source web-based visualization tool.&lt;br&gt;
  DataDog comes with out-of-box charts and per-built widgets to build your own dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHCzSEZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/datadog_vs_prometheus_prometheus_charts-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHCzSEZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/datadog_vs_prometheus_prometheus_charts-min.jpg" alt="Prometheus UI"&gt;&lt;/a&gt;Prometheus charts are limited in functionality&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Op28x3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/observability_tools_datadog-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Op28x3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/observability_tools_datadog-min.png" alt="DataDog dashboard"&gt;&lt;/a&gt;DataDog dashboard for traces&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h3&gt;

&lt;p&gt;Prometheus is a &lt;strong&gt;free, open-source tool.&lt;/strong&gt; Many SaaS vendors provide hosted Prometheus services as it takes time and effort to maintain Prometheus as your monitoring scales up.&lt;/p&gt;

&lt;p&gt;DataDog is an expensive enterprise monitoring tool that has many different pricing tiers which vary on your use-cases. For example, infrastructure enterprise monitoring starts at &lt;strong&gt;$23 per host per month&lt;/strong&gt; while its APM sand continuous profiler starts at &lt;strong&gt;$40 per host per month.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#key-features-of-datadog"&gt;
  &lt;/a&gt;
  Key Features of DataDog
&lt;/h2&gt;

&lt;p&gt;DataDog is an enterprise SaaS tool that offers an array of services in the monitoring domain. Some of the key features of the DataDog monitoring platform includes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Log Management&lt;/strong&gt;&lt;br&gt;
DataDog offers scalable log ingestion and analytics through its log management product. You can search, filter, and analyze log data through its dashboard. You can route all your logs from one central control panel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application performance monitoring&lt;/strong&gt;&lt;br&gt;
DataDog's APM tool provides end-to-end distributed tracing from frontend devices to databases. You can connect the collected traces to infrastructure metrics, network calls, and live processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security monitoring&lt;/strong&gt;&lt;br&gt;
Using DataDog security monitoring, you can analyze operational and security logs in real-time. It provides built-in threshold and anomaly detection rules to detect threats quickly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network monitoring&lt;/strong&gt;&lt;br&gt;
With DataDog network monitoring, you can analyze traffic as it flows across applications, containers, availability zones, and on-premise servers. You can track key network metrics like TCP retransmits, latency, and connection churn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real user monitoring&lt;/strong&gt;&lt;br&gt;
With DataDog's real user Monitoring, you can have end-to-end visibility into user journeys for web and mobile applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#key-features-of-prometheus"&gt;
  &lt;/a&gt;
  Key Features of Prometheus
&lt;/h2&gt;

&lt;p&gt;Prometheus was initially developed at SoundCloud in 2012 before being released as an open-source project. It got accepted into the CloudNative Computing Foundation in 2016 and was the second project to graduate from the foundation, following Kubernetes.&lt;/p&gt;

&lt;p&gt;Prometheus enables you to capture time-series data as metrics. These metrics can be aggregated to give insights into the behavior of our systems.&lt;/p&gt;

&lt;p&gt;Some of the key features of Prometheus metrics monitoring are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi-dimensional data model&lt;/strong&gt;&lt;br&gt;
Prometheus stores data as time-series. For example, it can store time-stamped values of the total number of HTTP requests received. You can also store an optional set of key-value pairs called labels for that metric. The multi-dimensional data model enables rich contextual metrics monitoring. Notation of time-series metrics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;metric&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, ...}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flexible query language&lt;/strong&gt;&lt;br&gt;
Prometheus provides a query language called PromQL. Using PromQL, you can filter and aggregate metrics data in real-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pull model data collection&lt;/strong&gt;&lt;br&gt;
In contrast to most APM tools, Prometheus data collection is pull-based. It requires you to run an HTTP server that exposes Prometheus metrics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alert manager&lt;/strong&gt;&lt;br&gt;
You can use a rules.yml file to set alerts for critical issues. You need to install the alert manager to get useful notifications from Prometheus. It has some cool features like grouping alerts into one notification and silencing alerts for a period of time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visualization layer&lt;/strong&gt;&lt;br&gt;
The visualization layer of Prometheus is basic, but it can be combined with Grafana - another open-source web visualization tool to create rich visualizations of monitoring data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcVjQqRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/otel_vs_prometheus_prometheus_architecture-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcVjQqRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/otel_vs_prometheus_prometheus_architecture-min.png" alt="Prometheus architecture"&gt;&lt;/a&gt;Architecture of Prometheus (Source: Prometheus website)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-better-to-alternative-to-datadog-and-prometheus-signoz"&gt;
  &lt;/a&gt;
  A better to alternative to DataDog and Prometheus - SigNoz
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; is a full-stack open-source application performance monitoring and observability tool which can be used in place of DataDog and Prometheus. SigNoz is built to give SaaS like user experience combined with the perks of open-source software. Developer tools should be developer first, and SigNoz was built by developers to address the gap between SaaS vendors and open-source software.&lt;/p&gt;

&lt;p&gt;Key architecture features:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Native OpenTelemetry support&lt;/strong&gt;&lt;br&gt;
SigNoz is built to support &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt; natively which is quietly becoming the world standard to generate and manage telemetry data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexible and scalable Database storage&lt;/strong&gt;&lt;br&gt;
SigNoz provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;You can also build custom metrics dashboard for your infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgbBDuMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/signoz_custom_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgbBDuMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/signoz_custom_dashboard-min.jpg" alt="SigNoz custom metrics dashboard"&gt;&lt;/a&gt;You can also build a custom metrics dashboard for your infrastructure&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#related-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Related Content&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://signoz.io/blog/jaeger-vs-zipkin/"&gt;Jaeger vs Zipkin&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://signoz.io/blog/jaeger-vs-signoz/"&gt;Jaeger vs SigNoz&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor Spring Boot App with SigNoz and OpenTelemetry&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>microservices</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Getting Started with Nodejs, Express and Docker</title>
      <author>Emma Donery</author>
      <pubDate>Sat, 09 Oct 2021 12:37:49 +0000</pubDate>
      <link>https://dev.to/emma_donery/getting-started-with-nodejs-express-and-docker-5ffa</link>
      <guid>https://dev.to/emma_donery/getting-started-with-nodejs-express-and-docker-5ffa</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SiZ5sc5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1xejpq7xut9egz9r1br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SiZ5sc5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1xejpq7xut9egz9r1br.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Prerequisites&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;Docker Basics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#understanding-docker"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Understanding Docker&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is an open source platform that provides an open platform for building, shipping, and running distributed applications. It automates routine configuration procedures and is used across the development lifecycle to create fast, simple, and portable applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-nodejs-and-express"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Understanding Nodejs And Express&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt; is a JavaScript runtime framework which is used to create networking and server-side applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Express&lt;/strong&gt; is a small framework that sits on top of Node.js’s web server functionality that provides a robust set of features to develop web and mobile applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-dockerize-your-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Dockerize your application&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rapid application deployment&lt;/li&gt;
&lt;li&gt;Portability across machines&lt;/li&gt;
&lt;li&gt;Version control and component reuse&lt;/li&gt;
&lt;li&gt;Sharing of images/dockerfiles&lt;/li&gt;
&lt;li&gt;Lightweight footprint and minimal overhead&lt;/li&gt;
&lt;li&gt;Simplified maintenance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NodeJs app&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory where all the files would live&lt;/li&gt;
&lt;li&gt;Create a package.json file in this directory to define your project and its dependencies:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express_app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Node.js and express on Docker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Firstname Lastname &amp;lt;mynames@example.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node app.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.16.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Using the Express.js framework, create a app.js file that describes a web app:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.0.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// App&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Our app running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-the-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Run the app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ node app.js&lt;/code&gt;&lt;br&gt;
Go to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in your browser to view it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dockerizing-the-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Dockerizing the Application&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create empty Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:12-alpine3.14&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package*.json ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "node", "server.js" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is what is happening:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Set the working directory to /usr/src/app&lt;/p&gt;

&lt;p&gt;Copy the package.json file to /usr/src/app&lt;/p&gt;

&lt;p&gt;Install node_modules&lt;/p&gt;

&lt;p&gt;Copy all the files from the project's root to /usr/src/app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;em&gt;.dockerignore&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node_modules
npm-debug.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: If you are working with Git then you will also want to add your .git directory and .gitignore file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build Docker Image
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; hello-world &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run docker container
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:8080 hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sharing the docker image&lt;br&gt;
For you to share a docker image, you have to first signup at Docker hub. &lt;br&gt;
Docker Hub is a Docker service that allows you to locate and share container images with your team.&lt;br&gt;
After signing up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Re-create the image with your Docker Hub credentials.
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;USERNAME]/hello-world &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;Login to Docker Hub
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker login
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;Push the image to Docker Hub
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker push &lt;span class="o"&gt;[&lt;/span&gt;USERNAME]/hello-world
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations!🎉 🎉  The image can now be used on any server or PC that has Docker installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="o"&gt;[&lt;/span&gt;USERNAME]/hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Docker Compose&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Docker Compose is a tool for running multi-container applications on Docker. You configure your application's services with Compose using a YAML file. Then you build and start all of the services from your setup with a single command.&lt;/p&gt;

&lt;p&gt;Compose enables running apps in a single or more containers simple. To construct or execute containers, we don't need to remember particularly long commands. Your applications will operate smoothly as long as you can run docker-compose build and docker-compose up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the project root directory, create a docker-compose.yml file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;docker-compose.yml&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;version: &lt;span class="s1"&gt;'3.8'&lt;/span&gt;  &lt;span class="c"&gt;#specifies docker compose version&lt;/span&gt;
services:
  web:
    build:
      context: ./
      target: dev
    volumes:
      - .:/src
    &lt;span class="nb"&gt;command&lt;/span&gt;: npm run start:dev
    ports:
      - &lt;span class="s2"&gt;"8080:8080"&lt;/span&gt;
    environment:
      NODE_ENV: development
      DEBUG: nodejs-docker-express:&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this article, i have a service name web which has  a build context and a target set to dev. This tells Docker that i want to build the Docker image with the dev stage.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;volume&lt;/strong&gt; instructs Docker to copy and sync changes from the local directory./ of the host with /src on the Docker container.&lt;/p&gt;

&lt;p&gt;Exposing port 8080 exposes the port where the Node.js Express web server runs by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-and-run-your-app-with-compose"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Build and run your app with Compose&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;start up your application by running the docker-compose up command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Access &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt; in a browser to see the application running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stop the application from running using the docker-compose down command.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Docker Compose is an excellent tool for launching numerous containers. For the sake of this article, i solely used Node.js with a single container running on Docker.&lt;/p&gt;

&lt;p&gt;Node.js and Docker get along swimmingly. The development experience is substantially smoother when docker-compose is used. You can use this article as a starting point for learning more advanced Docker and Node.js skills. &lt;/p&gt;

&lt;p&gt;😊 Have fun coding!😊 &lt;br&gt;
Be sure to leave any comments for me.&lt;/p&gt;

&lt;p&gt;You can connect with me on twitter &lt;a href="https://twitter.com/EmmaDonery"&gt;https://twitter.com/EmmaDonery&lt;/a&gt;&lt;br&gt;
or Linkedin &lt;a href="https://www.linkedin.com/in/emma-donery-0831a7188/"&gt;https://www.linkedin.com/in/emma-donery-0831a7188/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>docker</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 1 of 100 Days of Code and Scrum: How to GraphQL?</title>
      <author>Rammina</author>
      <pubDate>Sat, 09 Oct 2021 12:22:31 +0000</pubDate>
      <link>https://dev.to/rammina/day-1-of-100-days-of-code-and-scrum-how-to-graphql-1o78</link>
      <guid>https://dev.to/rammina/day-1-of-100-days-of-code-and-scrum-how-to-graphql-1o78</guid>
      <description>&lt;p&gt;For context, I'm doing a mixture of 100daysofcode with Scrum elements. See the &lt;a href="https://dev.to/rammina/100-days-of-code-and-scrum-a-new-challenge-24lp"&gt;challenge post here:&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I started learning GraphQL from &lt;a href="https://www.howtographql.com"&gt;https://www.howtographql.com&lt;/a&gt;. It's a pretty nice GraphQL tutorial because they both have video and text format, and so far I've been enjoying it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I kept on plowing through &lt;a href="https://www.howtographql.com/basics/2-core-concepts/"&gt;https://www.howtographql.com/basics/2-core-concepts/&lt;/a&gt; and learning more about what GraphQL can do.&lt;/p&gt;

&lt;p&gt;Here are some of the things I've learned:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL is strongly typed, which means the typing needs to be declared in advance&lt;/li&gt;
&lt;li&gt;GraphQL uses Schema Definition Language (SDL)&lt;/li&gt;
&lt;li&gt;GraphQL uses queries (GET in REST API), mutations (POST, PATCH, DELETE), and subscriptions (something that lets you listen to mutations and returns response objects)&lt;/li&gt;
&lt;li&gt;mutations allow you to specify a payload to retrieve new information in one call round trip&lt;/li&gt;
&lt;li&gt;subscriptions are like data streams, while queries and mutations are similar to the request-response-cycle&lt;/li&gt;
&lt;li&gt;types serve as entry points for request sent by the client side&lt;/li&gt;
&lt;li&gt;a root field is followed by the payload which is flexible and allows you to retrieve which data you want&lt;/li&gt;
&lt;li&gt;it is much more flexible to query nested information using GraphQL compared to REST API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a Sprint can be canceled by the Product Owner if the Sprint Goal becomes obsolete&lt;/li&gt;
&lt;li&gt;Product Owners have the option to choose whether to attend a Daily Scrum or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm having a difficulty with getting used to working with the new syntax for GraphQL, since I've been using REST API all this time.&lt;/p&gt;

&lt;p&gt;How is everyone doing in their learning journey? Feel free to chat with me in the comments and/via DM!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Migrate Material-UI 4 to Mui-5</title>
      <author>HasOne</author>
      <pubDate>Sat, 09 Oct 2021 12:07:38 +0000</pubDate>
      <link>https://dev.to/hasone/migrate-material-ui-4-to-mui-5-1g3i</link>
      <guid>https://dev.to/hasone/migrate-material-ui-4-to-mui-5-1g3i</guid>
      <description>&lt;p&gt;A month ago the Mui team released version 5 of &lt;code&gt;Material-ui&lt;/code&gt; . they made some changes in this version, and some of them we'll need to configure at our own aymore. let's have a depth look over it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;prerequisite:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first make sure to commit your code before upgradation&lt;/li&gt;
&lt;li&gt;Install the latest packages of &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-dom&lt;/code&gt;, and &lt;code&gt;react-scripts&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;They rename the packages name from &lt;br&gt;
&lt;code&gt;@material-ui/core&lt;/code&gt; to &lt;code&gt;@mui/material&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@material-ui/lab&lt;/code&gt; to &lt;code&gt;@mui/lab&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@material-ui/icons&lt;/code&gt; to &lt;code&gt;@mui/icons-material&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and additionally we also need to install the &lt;code&gt;@emotion&lt;/code&gt; for the style as they deprecated their styles APIS like &lt;code&gt;makeStyle&lt;/code&gt; and move to &lt;code&gt;@mui/system&lt;/code&gt; lib. now you either use the &lt;code&gt;@emotion&lt;/code&gt; or &lt;code&gt;styled-components&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add @mui/material @mui/lab @mui/icons-material 
&lt;span class="c"&gt;# NPM&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm i @mui/material @mui/lab @mui/icons-material
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-motionstyled"&gt;
  &lt;/a&gt;
  Installing @motion/styled
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add @mui/system @emotion/react @emotion/styled
&lt;span class="c"&gt;# NPM&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm i @mui/system @emotion/react @emotion/styled
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-styledcomponents"&gt;
  &lt;/a&gt;
  Installing styled-components
&lt;/h3&gt;

&lt;p&gt;For the &lt;code&gt;yarn&lt;/code&gt; user there is good news: we can simples alias the styled-components package and BOOM. to do so, add the following lines in the &lt;code&gt;package.json&lt;/code&gt; file and run again &lt;code&gt;yarn&lt;/code&gt; it will install the &lt;code&gt;@mui/styled-engine-sc&lt;/code&gt; as &lt;a href="https://mui.com/guides/styled-engine/"&gt;style-engine&lt;/a&gt; and also install the &lt;code&gt;styled-components&lt;/code&gt;.  remove the previously installed  &lt;code&gt;@emtion/*&lt;/code&gt; style lib.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"@mui/styled-engine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"latest"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"@mui/styled-engine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm:@mui/styled-engine-sc@latest"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"resolutions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"@mui/styled-engine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm:@mui/styled-engine-sc@latest"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I_2de-mW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmyyz9w0bgo7tt57779p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_2de-mW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmyyz9w0bgo7tt57779p.png" alt="package.json"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-fonts"&gt;
  &lt;/a&gt;
  installing fonts
&lt;/h3&gt;

&lt;p&gt;by default, it before gave us the &lt;code&gt;robot&lt;/code&gt; font. now we're responsible for &lt;a href="https://mui.com/components/typography/#general"&gt;installing and hosting the font&lt;/a&gt; for yourself. there're few way to use fonts in react app, the recommended is  self-hosted, so we're using &lt;code&gt;@fontsource&lt;/code&gt; to install font:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add @fontsource/roboto
&lt;span class="c"&gt;# NPM&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @fontsource/roboto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now we need to import it to entry point like where you're wrapping &lt;code&gt;ThemeProvider&lt;/code&gt; or either in &lt;code&gt;theme.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/roboto/300.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/roboto/400.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/roboto/500.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/roboto/700.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration-global-theme-object"&gt;
  &lt;/a&gt;
  Configuration Global Theme Object
&lt;/h2&gt;

&lt;p&gt;the &lt;code&gt;createMuiTheme&lt;/code&gt; renamed to &lt;code&gt;createTheme&lt;/code&gt;, also the &lt;a href="https://mui.com/customization/theming/#heading-createtheme-options-args-theme"&gt;structure of theme has changed in v5&lt;/a&gt;. &lt;a href="https://mui.com/guides/migration-v4/#theme-structure"&gt;&lt;code&gt;adaptV4Theme&lt;/code&gt;&lt;/a&gt; helper allow you to iteratively upgrade some of theme changes to new theme structure structure. but will be removed this soon in the next version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;adaptV4Theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material/styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;adaptV4Theme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="c1"&gt;// v4 theme&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;code&gt;fade&lt;/code&gt; renamed the &lt;code&gt;alpha&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alpha&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material/styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;palette&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;palette&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedOpacity&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ThemeProvider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material/styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Root&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-all-codebase"&gt;
  &lt;/a&gt;
  Update all codebase
&lt;/h2&gt;

&lt;p&gt;as the package name renamed, definitely you need to import the new package name. to do so, now what if you have a hundred of components will you do it manually? You can surely use &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; for the bulk changes. but we got another support which made the migration easy. we'll be using &lt;a href="https://mui.com/guides/migration-v4/#run-codemods"&gt;&lt;code&gt;codemod&lt;/code&gt;&lt;/a&gt; which sounds like as I said above plus more feature and some &lt;a href="https://mui.com/guides/migration-v4/#run-codemods"&gt;warning&lt;/a&gt;, which you should care of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mui&lt;/span&gt;&lt;span class="sr"&gt;/codemod v5.0.0/&lt;/span&gt;&lt;span class="nx"&gt;preset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;safe&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace the &lt;code&gt;src/components/Button&lt;/code&gt; to your component's &lt;code&gt;path&lt;/code&gt; and it'll rename the import package in the files. once the process done open up the file and see the import files, You should have new path imported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Avatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui/core/Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Avatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material/Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@mui/codemod v5.0.0/preset-safe&lt;/code&gt; will do all the magic for you without to worry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-we-have-makestyles"&gt;
  &lt;/a&gt;
  Do we have makeStyles?
&lt;/h2&gt;

&lt;p&gt;yes, we still have the &lt;code&gt;makeStyles&lt;/code&gt; style API (but it's deprecated and will be removed in the next version). for that we need to install &lt;code&gt;@mui/styles&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStyles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;makeStyles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;withStyles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;alternative solution of this is to use the &lt;code&gt;sx&lt;/code&gt; APIs, it support CSS project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;sx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1px dashed grey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;another solution to migrate the &lt;code&gt;makeStyles&lt;/code&gt; to &lt;code&gt;styled&lt;/code&gt; using &lt;a href="https://dev.toBox%20sx=%7B%7B%20border:%20"&gt;codemod&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mui&lt;/span&gt;&lt;span class="sr"&gt;/codemod v5.0.0/&lt;/span&gt;&lt;span class="nx"&gt;jss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it generate new code style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeStyles&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="na"&gt;chip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;    &lt;span class="na"&gt;boxShadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="c1"&gt;// TO THIS&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-world"&gt;
  &lt;/a&gt;
  Final World
&lt;/h2&gt;

&lt;p&gt;We're working on project where we were using &lt;code&gt;Material-ui&lt;/code&gt; as the new version came out I decided to upgrade to new version and thankfully our team manager agreed. because I wanted to get most out of @mui new feature and changes. We've discuss some important topics which you need to know when doing migration. and I hope it helps you!&lt;/p&gt;

&lt;p&gt;If you find this post helpful, please share it with family and friends, feel free to share any response on it!&lt;/p&gt;

&lt;p&gt;twitter: &lt;a href="https://twitter.com/xericgit"&gt;https://twitter.com/xericgit&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>frontend</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>10 Awesome Github Repositories Every Web Developer Should Know.</title>
      <author>Asrorbek O'ktamjonov</author>
      <pubDate>Sat, 09 Oct 2021 11:40:09 +0000</pubDate>
      <link>https://dev.to/mutafakir/10-awesome-github-repositories-every-web-developer-should-know-23nj</link>
      <guid>https://dev.to/mutafakir/10-awesome-github-repositories-every-web-developer-should-know-23nj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-awesome"&gt;
  &lt;/a&gt;
  1. Awesome
&lt;/h1&gt;

&lt;p&gt;Without a doubt, Awesome is the most popular repositories for everything from software development to hardware to business. It currently has over 123,000 stars on Github, and one could spend days (or nights) browsing it. If I want to learn something new, it’s my one-stop shop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzouEwaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vku031j22mx0zw31beum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzouEwaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vku031j22mx0zw31beum.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sindresorhus/awesome"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-list-of-advanced-javascript-questions"&gt;
  &lt;/a&gt;
  2. List of (Advanced) JavaScript Questions
&lt;/h1&gt;

&lt;p&gt;Lydia Hallie (wonderful person, by the way, check her out on Instagram!) made this repository (13,000 stars). If you want to test your JavaScript knowledge and/or prepare for a job interview, this is an excellent resource. Lydia is always asking new questions, thus this repo is always developing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PzfI9tIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vuplw5keyr8csntg3vi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PzfI9tIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vuplw5keyr8csntg3vi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-javascript-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  3. JavaScript Algorithms and Data Structures
&lt;/h1&gt;

&lt;p&gt;JavaScript Algorithms (59,500 stars) has a ton of JavaScript-based examples of both common and uncommon algorithms and data structures. Because the examples are classified as beginner or intermediate, the framework is excellent. So whether you’re interested in security, sorting, graphs, or machine learning (among other topics), you’ll find something to your liking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Y71oN3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abf6yh9oep96syjv81tp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Y71oN3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abf6yh9oep96syjv81tp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-clean-code-javascript"&gt;
  &lt;/a&gt;
  4. Clean Code JavaScript
&lt;/h1&gt;

&lt;p&gt;Writing clean code is an useful skill for practically every developer, and it is required in many projects and businesses. This repository (28,400 stars) adapts Robert C. Martin’s Clean Code ideas for JavaScript so you can use them in your future work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lO5BtT6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnb204i12qd19mvva8u2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lO5BtT6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnb204i12qd19mvva8u2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-freefordev"&gt;
  &lt;/a&gt;
  5. free-for.dev
&lt;/h1&gt;

&lt;p&gt;This amazing repository (30,000 stars) was designed to assist developers in accessing free software (SaaS, PaaS, IaaS) and similar products. Isn’t it nice to be able to use great software for free? That’s fantastic! Email, CI/CD, monitoring, DNS, hosting, and a slew of other services are available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3Tf6Lhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irv9l5ufdzpwb8fz783u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3Tf6Lhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irv9l5ufdzpwb8fz783u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ripienaar/free-for-dev"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-tech-interview-handbook"&gt;
  &lt;/a&gt;
  6. Tech Interview Handbook
&lt;/h1&gt;

&lt;p&gt;If you want to prepare for a job interview in the tech industry (and you should! ), this repository is the place to go. It has 38,000 stars on Github and can assist you with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to prepare for coding interviews&lt;/li&gt;
&lt;li&gt;Interview cheatsheet&lt;/li&gt;
&lt;li&gt;Algorithm tips/best practice questions&lt;/li&gt;
&lt;li&gt;Interview formats&lt;/li&gt;
&lt;li&gt;…and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check it out before heading to the next interview.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUTYn4Ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpfexrp0gruh5g3vkfbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUTYn4Ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpfexrp0gruh5g3vkfbj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-effective-engineer-notes"&gt;
  &lt;/a&gt;
  7. Effective Engineer — Notes
&lt;/h1&gt;

&lt;p&gt;Someone who is known as a “Effective Engineer” is someone who gets things done. But how do you go about becoming one? You can get help from this Github repository (3,700 stars)! The following are some of the topics covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to optimize your learning&lt;/li&gt;
&lt;li&gt;How to prioritize&lt;/li&gt;
&lt;li&gt;Measuring your improvement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C16PHenP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcwjycffssmnyoylqp47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C16PHenP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcwjycffssmnyoylqp47.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/rondy/af1dee1d28c02e9a225ae55da2674a6f"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-list-of-free-learning-resources"&gt;
  &lt;/a&gt;
  8. List of Free Learning Resources
&lt;/h1&gt;

&lt;p&gt;On Github, this repository has a huge 135,000 stars, making it one of the most popular curators. It has a large number of free programming books, screencasts, podcasts, and even online courses of various kinds. You’ve come to the right place if you’re looking for educational materials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ijFE_BD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5h4guvrghablubt2q33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ijFE_BD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5h4guvrghablubt2q33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-big-list-of-naughty-strings"&gt;
  &lt;/a&gt;
  9. Big List of Naughty Strings
&lt;/h1&gt;

&lt;p&gt;You can put as much effort into testing your code and programs as you want, but when real people are involved, believe me when I say that they will do things you never imagined, especially when it comes to user input. This repository (34,100 stars) has a long list of Strings that have been known to cause problems when used as input. So, whether you’re looking to impress your QA pals or use it to test your program, this may be quite beneficial!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KbgPWADq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cufuet761oxm34jfo3t3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KbgPWADq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cufuet761oxm34jfo3t3.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/minimaxir/big-list-of-naughty-strings"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-awesome-first-pr-opportunities"&gt;
  &lt;/a&gt;
  10. Awesome First PR Opportunities
&lt;/h1&gt;

&lt;p&gt;The last repository I’d like to suggest is excellent for getting started with Open Source. Contributing to OSS is a fantastic opportunity to become engaged in the community, build your portfolio, try new things, improve your programming skills, and perhaps find a new job. But, as I’ve learned from personal experience, getting started is difficult. This repository contains a list of Open Source projects with beginner-friendly issues that you can work on. It aided me in getting started with OSS and should do the same for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MHDXXjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7s4kuatsfewmjv2nb55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MHDXXjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7s4kuatsfewmjv2nb55.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MunGell/awesome-for-beginners"&gt;Link to Repository&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-hope-you-find-these-repositories-as-awesome-as-i-do-and-i-really-hope-that-some-of-them-will-help-you-on-your-journey-as-a-web-developer"&gt;
  &lt;/a&gt;
  I hope you find these repositories as awesome as I do, and I really hope that some of them will help you on your journey as a web developer.
&lt;/h3&gt;

</description>
      <category>github</category>
      <category>csharp</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Pagination in Javascript and React, with a custom usePagination() hook</title>
      <author>damiisdandy</author>
      <pubDate>Sat, 09 Oct 2021 11:37:09 +0000</pubDate>
      <link>https://dev.to/damiisdandy/pagination-in-javascript-and-react-with-a-custom-usepagination-hook-1mgo</link>
      <guid>https://dev.to/damiisdandy/pagination-in-javascript-and-react-with-a-custom-usepagination-hook-1mgo</guid>
      <description>&lt;p&gt;This guide is to help you understand the concept of pagination and how to implement it in react, the concepts in this tutorial can be applied to any javascript project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pagination"&gt;
  &lt;/a&gt;
  🤨 What is Pagination?
&lt;/h2&gt;

&lt;p&gt;Pagination is the process of separating print or digital content into discrete pages. For print documents and some online content, pagination also refers to the automated process of adding consecutive numbers to identify the sequential order of pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0jn0BfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yylpkfneyb4qdip1l4as.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0jn0BfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yylpkfneyb4qdip1l4as.png" alt="Pagination component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concept-behind-it"&gt;
  &lt;/a&gt;
  Concept behind it? 💻
&lt;/h2&gt;

&lt;p&gt;Let's say you have a total of 6 items on a page, and you want to only display 3 items at a time (per page). This means we are going to have a total of 2 pages, and if we want to display 2 items per page this means a total of?? you guessed it! 3 pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkDkDb1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv390xsm51u5zqwpxnng.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkDkDb1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv390xsm51u5zqwpxnng.jpg" alt="Illustration of pagination concept"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This formular is rather simple:&lt;br&gt;
&lt;code&gt;totalPages = totalContent / contentPerPage&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-it-in-javascript-slice"&gt;
  &lt;/a&gt;
  Implementing it in Javascript (.slice()) 🔪
&lt;/h2&gt;

&lt;p&gt;Calculating the content per page is rather easy, but how do we display certain content based on what page we are on? We simply need to understand the relationship between the page and the &lt;code&gt;index&lt;/code&gt; of our content. Let first understand the &lt;code&gt;.slice()&lt;/code&gt; Array method. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, let's say we have an array called &lt;code&gt;scouts&lt;/code&gt; and we want to select only a portion of this array based on the array's index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scouts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;levi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;erwin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;petra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oruo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;miche&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;scouts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// output: [ 'erwin', 'petra', 'oruo' ]&lt;/span&gt;
&lt;span class="nx"&gt;scouts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// output: [ 'hange', 'erwin' ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We all know javascript follows a &lt;a href="https://en.wikipedia.org/wiki/Zero-based_numbering"&gt;zero-based index&lt;/a&gt;, so the first parameter is the index from which we want to start the slice from and the second parameter is the index right after where we want the slice to end. e.g if we want 2 to 4 we use &lt;code&gt;.slice(2, 5)&lt;/code&gt; as seen in the first example.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#mapping-page-number-to-index"&gt;
  &lt;/a&gt;
  Mapping page number to index
&lt;/h2&gt;

&lt;p&gt;All we need to do is know what the &lt;code&gt;startIndex&lt;/code&gt; and &lt;code&gt;lastIndex&lt;/code&gt; should be based on the page number. this relationship is quite simple.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_NedMBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sljhhloxzs8bepgkbrlp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_NedMBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sljhhloxzs8bepgkbrlp.jpg" alt="Illustration of pagination based on index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can tell from the diagram above the last index is simply the current page multiplied by the given content by page, while the first index is the content by page subtracted from the last index.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// assuming we are on page one&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contentPerPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;contentPerPage&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;contentPerPage&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="nx"&gt;scouts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// scouts.slice(0, 3) =&amp;gt; [ 'levi', 'hange', 'erwin' ]&lt;/span&gt;

&lt;span class="c1"&gt;// page 2&lt;/span&gt;
&lt;span class="c1"&gt;// scouts.slice(3, 6) =&amp;gt; [ 'petra', 'oruo', 'miche' ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wow!, that was easy 😳.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#custom-raw-usepagination-endraw-hook"&gt;
  &lt;/a&gt;
  Custom &lt;code&gt;usePagination&lt;/code&gt; hook 🎣
&lt;/h2&gt;

&lt;p&gt;Now that we've learned the concept behind it, let's implement this in react and create our custom hook to help us automate this process.&lt;br&gt;
This hook takes in an object that takes in the properties &lt;code&gt;contentPerPage&lt;/code&gt; which is how many items should be displayed at a time and &lt;code&gt;count&lt;/code&gt; which is the total number of items given (Array length). It also returns an object with the following properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;page&lt;/code&gt; - current page we are on&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;totalPages&lt;/code&gt; - total number of pages generated&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;firstContentIndex&lt;/code&gt; - first index for the &lt;code&gt;.slice()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lastContentIndex&lt;/code&gt; - last index for the &lt;code&gt;.slice()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nextPage&lt;/code&gt; - function to navigate one page foward&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prevPage&lt;/code&gt; - function to navigate one page backward&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setPage&lt;/code&gt; - function to go to a certain page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type definitions are as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UsePaginationProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;contentPerPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UsePaginationReturn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;totalPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;firstContentIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;lastContentIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;nextPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;prevPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UsePagination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UsePaginationProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UsePaginationReturn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In your React project create a folder called &lt;code&gt;hooks&lt;/code&gt; and create a file called &lt;code&gt;usePagination&lt;/code&gt;, this is where our custom hook will reside.&lt;/p&gt;

&lt;p&gt;Type the following within it&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usePagination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UsePagination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;contentPerPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// number of pages in total (total items / content on each page)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;contentPerPage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// index of last item of current page&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastContentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;contentPerPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// index of first item of current page&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstContentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastContentIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;contentPerPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// change page based on direction either front or back&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// move forward&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if page is the last page, do nothing&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// go back&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if page is the first page, do nothing&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setPageSAFE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// if number is greater than number of pages, set to last page&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// if number is less than 1, set page to first page&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;totalPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nextPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;changePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;prevPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;changePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setPageSAFE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;firstContentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lastContentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;usePagination&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are managing the current page value with &lt;code&gt;useState&lt;/code&gt;, also notice that &lt;code&gt;pageCount&lt;/code&gt; is also equal to the value of the last page. I've made the code above as explanatory as I can.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation ✍🏾
&lt;/h2&gt;

&lt;p&gt;We simply import the hook then input the needed properties.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firstContentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lastContentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;nextPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;prevPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;totalPages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePagination&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;contentPerPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then we simply &lt;em&gt;slice&lt;/em&gt; our data with the &lt;code&gt;firstContentIndex&lt;/code&gt; and &lt;code&gt;lastContentIndex&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstContentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastContentIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;))}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Below is a simple functionality to help us generate our buttons, then we add their corresponding &lt;code&gt;onClick&lt;/code&gt; handlers.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pagination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/{totalPages&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;prevPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;larr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* @ts-ignore */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;{[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalPages&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`page &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;))}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nextPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;rarr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are done! As you can see below our &lt;code&gt;usePagination&lt;/code&gt; hook works as planned.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpGGzcfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83tdh84wsvev2loc1jse.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpGGzcfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83tdh84wsvev2loc1jse.gif" alt="showing hook working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading 🙏🏾, If you have any questions, additions, or subtractions please comment below.&lt;/p&gt;

&lt;p&gt;The full source code to with project with a functioning todo application is linked below 👇👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/damiisdandy"&gt;
        damiisdandy
      &lt;/a&gt; / &lt;a href="https://github.com/damiisdandy/use-pagination"&gt;
        use-pagination
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      a react usePagination() hook
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
