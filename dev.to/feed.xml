<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to Object Types in TypeScript</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 02 Aug 2021 10:26:33 +0000</pubDate>
      <link>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-ghe</link>
      <guid>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-ghe</guid>
      <description>&lt;p&gt;In JavaScript, objects are among the most popular ways to work with and pass around data. In TypeScript, there is a special type called "object type" created solely for objects. This tutorial will help you understand what object types in TypeScript are and how to work with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-types-in-a-brief"&gt;
  &lt;/a&gt;
  Object types in a brief
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are basically two types of values. The first type are &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt2/"&gt;primitive data types&lt;/a&gt;. These are the eight basic data types, some of which you will work with quite often. These data types include string, number, boolean, null, symbol and so on. Aside to these primitive data types, there is the second type of values.&lt;/p&gt;

&lt;p&gt;This second type of values are objects. In JavaScript, you can quickly distinguish between a primitive data type and an object by looking at the value. If the value itself has any properties, it is an object. Otherwise, it is one of the eight primitive data types. Each of these types has also corresponding type in TypeScript.&lt;/p&gt;

&lt;p&gt;This applies to objects as well. In TypeScript, there is a new type called object type. This type applies to any value that has some properties, at least one. This new type aims to make working with objects, as well as annotating them, easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anonymous-object-types"&gt;
  &lt;/a&gt;
  Anonymous object types
&lt;/h2&gt;

&lt;p&gt;TypeScript allows you to define two types of object types. The first type is anonymous. This is when you define an object for a specific object without using type or an interface. One example of an anonymous object type can be a function parameter. Let's say you have a function which accepts an object as a parameter.&lt;/p&gt;

&lt;p&gt;If you want to define the object type for this object parameter as anonymous you will define it at the definition of the function. You define what properties the object is supposed to have. For each property, you also define what the type of the property value is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a function with anonymous object type:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`user: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, email: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, you defined the object parameter called the &lt;code&gt;user&lt;/code&gt;. The anonymous object type of this parameter says that the object has two properties: &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;. Both properties are of type string and both are required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-object-types"&gt;
  &lt;/a&gt;
  Named object types
&lt;/h2&gt;

&lt;p&gt;The second way to define an object types is by using a type alias or an interface. In this case, you use one of these two to define the shape of the object. When you want to annotate an object with this shape you reference the type alias or interface. TypeScript will use the alias or interface to infer types for all object properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// No.1: type alias&lt;/span&gt;
&lt;span class="c1"&gt;// Create a type alias for user object:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// No.2: interface&lt;/span&gt;
&lt;span class="c1"&gt;// Create am interface for user object:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use the type alias or interface to annotate user parameter:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`user: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, email: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure of the object type itself is the same. There are still two properties, of a type string. The difference is that now the object type is defined outside the function or place where it is used, independently if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-and-anonymous-object-type-and-reusability"&gt;
  &lt;/a&gt;
  Named and anonymous object type and re-usability
&lt;/h2&gt;

&lt;p&gt;Named object types have one big benefit that is re-usability of your code. When you define object types as named, you can use them as many times as you want. If you also &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"&gt;export&lt;/a&gt; them, you can also use them anywhere you want. Write once, use anywhere, any time. You can't do this with anonymous types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define the type alias for Human object once:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use Human type alias for one function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`name: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, age: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'name: Tim, age: 44'&lt;/span&gt;

&lt;span class="c1"&gt;// Use Human type alias for another function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;usersNames&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samantha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Joe', 'Jack', 'Samantha' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since anonymous object type has no name you can't reference it elsewhere in your code. If you want to re-use the shape it defines, you have to write it again. This is one reason TypeScript developers use named object types more often than anonymous. However, this doesn't mean you should never use anonymous object type.&lt;/p&gt;

&lt;p&gt;A good rule of thumb is to think about the object and what is the likelihood you will use its shape again. If it is likely you will work with its shape, or similar, it might be a good idea to create a type alias or an interface. Then, whenever you will work with that specific shape you will reference the alias or interface.&lt;/p&gt;

&lt;p&gt;This will make it much easier to make changes as you work. You will have to change only one place, the alias or the interface. Once you make the change, it will propagate everywhere you use the alias or the interface. Compare this to searching for all occurrences of that specific shape in your code and updating them.&lt;/p&gt;

&lt;p&gt;This will also help you keep the probability of bugs at the minimum. When you update the alias or interface TypeScript will be able to immediately warn you if you have to change some code so the code reflects the new shape. This will not happen with anonymous object type because there is no single source of truth TypeScript could use.&lt;/p&gt;

&lt;p&gt;On the other hand, if you are not likely to work with that, or similar, shape again, anonymous object type will do the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-type-and-property-modifiers"&gt;
  &lt;/a&gt;
  Object type and property modifiers
&lt;/h2&gt;

&lt;p&gt;When you define an object type, anonymous or named, all properties are required and changeable. TypeScript allows you to change this with the help of property modifiers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-object-properties"&gt;
  &lt;/a&gt;
  Optional object properties
&lt;/h3&gt;

&lt;p&gt;There is a difference between an object that may have some properties and an object that must have some properties. When you create an object type that specifies some properties, TypeScript expects to find these properties in the object you annotated with that object type.&lt;/p&gt;

&lt;p&gt;If you forget to define all these properties in the object, TypeScript will complain. Along with this, TypeScript will also expect to find only those properties you defined. It will not expect any other. It will actually also complain if it finds some additional properties. There are two ways out of this.&lt;/p&gt;

&lt;p&gt;The first way is to create multiple variations of the object type to cover various use cases. This might work for some cases, when you alter the shape of the object. However, creating new variant just to make one property optional is insane. What you can do instead is to tell TypeScript that some property is optional.&lt;/p&gt;

&lt;p&gt;This will also tell TypeScript that the property may not be defined every time. And, if it is indeed not defined it should complain about it. Well, unless you actually try to use the property. You can achieve this, making some property optional, by putting a question mark symbol (&lt;code&gt;?&lt;/code&gt;) right after the property name in the object type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with optional properties:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfLegs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
  &lt;span class="nl"&gt;wingSpan&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
  &lt;span class="nl"&gt;lengthOfTail&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;numberOfLegs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lengthOfTail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dorris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pelican&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;wingSpan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nemo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="c1"&gt;// The "species" property is required, but missing.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Property 'species' is missing in type '{ name: string; }' but required in type 'Animal'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#readonly-object-properties"&gt;
  &lt;/a&gt;
  Readonly object properties
&lt;/h3&gt;

&lt;p&gt;The second property modifier is &lt;code&gt;readonly&lt;/code&gt;. This modifier helps you specify properties which values should not be change after you initialize them. Note that this modifier works only in TypeScript. If you mark some property as readonly, and later try to change it, TypeScript will complain by throwing an error.&lt;/p&gt;

&lt;p&gt;However, this will not prevent JavaScript from executing that change. For JavaScript, there is no such a thing as a readonly property, at least not now. You can specify a property as a readonly by putting the &lt;code&gt;readonly&lt;/code&gt; keyword just before the property in the object type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with optional properties:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Make "name" readonly&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Make "email" readonly&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack@jack.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234_some_pass_to_test_56789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change value of property "role" on "jack" object:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change value of readonly property "email" on "jack" object:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack@yo.ai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Cannot assign to 'email' because it is a read-only property.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-types-and-index-signatures"&gt;
  &lt;/a&gt;
  Object types and index signatures
&lt;/h2&gt;

&lt;p&gt;So far, we've worked with objects in which we knew all properties beforehand. This may not be true every time. You may find yourself in situations where you will know only what type of property and what type of a value to expect. However, you may not know the exact name of the property.&lt;/p&gt;

&lt;p&gt;In TypeScript, this is not a problem thanks to index signatures. With index signatures, you can specify the type of a property you expect along with the type of its value. This gives you a lot of flexibility because as long as both types are correct TypeScript will not complain about anything.&lt;/p&gt;

&lt;p&gt;When you want to use index signature you have to remember to use a slightly different syntax for defining properties. Normally, you would define some property "X", add colon, and then add some type for its value. This tells TypeScript that there is specific property "X" in the object. Thing is, we don't know this "X".&lt;/p&gt;

&lt;p&gt;To overcome this with index signature, you have to wrap the property with square brackets and add some type. This type says what type the property itself will be. Allowed types for index signatures are string and number. The rest is the same. What follows next are colons and some type for the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with index signature:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of string:&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create another object type with index signature:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumberKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of number:&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Property is always a string.&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookshelf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Property is always a number.&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hackers and Painters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Blitzscaling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumberKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties are strings, not numbers.&lt;/span&gt;
  &lt;span class="na"&gt;one&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;two&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TypeScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Type '{ one: string; two: string; }' is not assignable to type 'NumberKey'.&lt;/span&gt;
&lt;span class="c1"&gt;// Object literal may only specify known properties, and 'one' does not exist in type 'NumberKey'.&lt;/span&gt;

&lt;span class="c1"&gt;// This will also not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties are strings,&lt;/span&gt;
  &lt;span class="c1"&gt;// but the values are numbers and not strings.&lt;/span&gt;
  &lt;span class="na"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Type 'number' is not assignable to type 'string'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#readonly-index-signatures"&gt;
  &lt;/a&gt;
  Readonly index signatures
&lt;/h3&gt;

&lt;p&gt;Index signatures also allow you to use the &lt;code&gt;readonly&lt;/code&gt; keyword to specify readonly properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with index signature and readonly property:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ReadonlyStringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of string and a readonly:&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create new object with shape of "ReadonlyStringKey":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReadonlyStringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Suzzy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Abyssinian Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change the value of "name" property on "cat":&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Vicky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Index signature in type 'ReadonlyStringKey' only permits reading.&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change the value of "age" property on "cat":&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Index signature in type 'ReadonlyStringKey' only permits reading.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-introduction-to-object-types-in-typescript"&gt;
  &lt;/a&gt;
  Conclusion: Introduction to Object Types in TypeScript
&lt;/h2&gt;

&lt;p&gt;Objects are fundamental part of JavaScript. TypeScript object types can also make them type safe. Object types can also make it easier to work with objects in general. I hope that this tutorial helped you learn what anonymous and named object types in TypeScript are and how to use property modifiers and index signatures.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Visual Studio Code Keyboard Shortcuts for Windows</title>
      <author>Archit Sharma</author>
      <pubDate>Mon, 02 Aug 2021 10:03:17 +0000</pubDate>
      <link>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</link>
      <guid>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</guid>
      <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code is the most popular code editor or IDE (Integrated Development Environment) currently. VS Code is Free, built on open source, easy to use code editor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visual Studio Code keyboard shortcuts are helps developers in writing code more efficiently and for boosting their working performance.&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#shortcut-keys-are-categorized-in-following-categories-"&gt;
  &lt;/a&gt;
  Shortcut keys are categorized in following categories :-
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;General Shortcuts&lt;/li&gt;
&lt;li&gt;Basic Editing Shortcuts&lt;/li&gt;
&lt;li&gt;Navigation Shortcuts&lt;/li&gt;
&lt;li&gt;Search and replace Shortcuts&lt;/li&gt;
&lt;li&gt;Multi-cursor and selection Shortcuts&lt;/li&gt;
&lt;li&gt;Rich languages editing Shortcuts&lt;/li&gt;
&lt;li&gt;Editor management Shortcuts&lt;/li&gt;
&lt;li&gt;File management Shortcuts&lt;/li&gt;
&lt;li&gt;Debug Shortcuts&lt;/li&gt;
&lt;li&gt;Integrated terminal Shortcuts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Shortcut Key&lt;/code&gt;       -   Description&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-shortcuts"&gt;
  &lt;/a&gt;
  General Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Shift+P, F1&lt;/code&gt;   -   &lt;em&gt;Show Command Palette&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt;        -   &lt;em&gt;Quick Open, Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+N&lt;/code&gt;      -   &lt;em&gt;New window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+W&lt;/code&gt;      -   &lt;em&gt;Close window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+,&lt;/code&gt;        -   &lt;em&gt;User Settings&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+S&lt;/code&gt;         -   &lt;em&gt;Keyboard Shortcuts&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-editing"&gt;
  &lt;/a&gt;
  Basic Editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+X&lt;/code&gt;        -   &lt;em&gt;Cut line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+C&lt;/code&gt;        -   &lt;em&gt;Copy line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Move line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + ↓ / ↑&lt;/code&gt;  -    &lt;em&gt;Copy line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+K&lt;/code&gt;      -   &lt;em&gt;Delete line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Enter&lt;/code&gt;        -   &lt;em&gt;Insert line below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Enter&lt;/code&gt;   -    &lt;em&gt;Insert line above&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+\&lt;/code&gt;      -   &lt;em&gt;Jump to matching bracket&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+] / [&lt;/code&gt;        -   &lt;em&gt;Indent/outdent line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Home / End&lt;/code&gt;        -   &lt;em&gt;Go to beginning/end of line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home&lt;/code&gt;         -   &lt;em&gt;Go to beginning of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+End&lt;/code&gt;      -   &lt;em&gt;Go to end of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Scroll line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+PgUp / PgDn&lt;/code&gt;    -    &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+[&lt;/code&gt;      -   &lt;em&gt;Fold (collapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+]&lt;/code&gt;      -   &lt;em&gt;Unfold (uncollapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+[&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+]&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+0&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+J&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+C&lt;/code&gt;         -   &lt;em&gt;Add line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+U&lt;/code&gt;         -   &lt;em&gt;Remove line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+/&lt;/code&gt;        -   &lt;em&gt;Toggle line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+A&lt;/code&gt;       -   &lt;em&gt;Toggle block comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Z&lt;/code&gt;                 -   &lt;em&gt;Toggle word wrap&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation-shortcuts"&gt;
  &lt;/a&gt;
  Navigation Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+T&lt;/code&gt; - &lt;em&gt;Show all Symbols&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+G&lt;/code&gt; - &lt;em&gt;Go to Line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt; - &lt;em&gt;Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+O&lt;/code&gt; -   &lt;em&gt;Go to Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+M&lt;/code&gt; -   &lt;em&gt;Show Problems panel&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F8&lt;/code&gt; - &lt;em&gt;Go to the next error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F8&lt;/code&gt; -   &lt;em&gt;Go to previous error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab&lt;/code&gt; - &lt;em&gt;Navigate editor group history&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ← / →&lt;/code&gt; - &lt;em&gt;Go back / forward&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+M&lt;/code&gt; - &lt;em&gt;Toggle Tab moves the focus&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-and-replace"&gt;
  &lt;/a&gt;
  Search and replace
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F&lt;/code&gt; - &lt;em&gt;Find&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+H&lt;/code&gt; - &lt;em&gt;Replace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F3 / Shift+F3&lt;/code&gt;  - &lt;em&gt;Find next/previous&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Enter&lt;/code&gt;  - &lt;em&gt;Select all occurences of Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+D&lt;/code&gt;  - &lt;em&gt;Add selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+D&lt;/code&gt; - &lt;em&gt;Move last selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+C / R / W&lt;/code&gt; - &lt;em&gt;Toggle case-sensitive / regex / whole word&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multicursor-and-selection-shortcuts"&gt;
  &lt;/a&gt;
  Multi-cursor and selection Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alt+Click&lt;/code&gt; - &lt;em&gt;Insert cursor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Alt+ ↑ / ↓&lt;/code&gt; - &lt;em&gt;Insert cursor above / below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+U&lt;/code&gt; - &lt;em&gt;Undo last cursor operation&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+I&lt;/code&gt; - &lt;em&gt;Insert cursor at end of each line selected&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+L&lt;/code&gt; - &lt;em&gt;Select current line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+L&lt;/code&gt; - &lt;em&gt;Select all occurrences of current selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+F2&lt;/code&gt;  - &lt;em&gt;Select all occurrences of current word&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+→&lt;/code&gt; - &lt;em&gt;Expand selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+←&lt;/code&gt; - &lt;em&gt;Shrink selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + (drag mouse)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + (arrow key)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + PgUp/PgDn&lt;/code&gt; - &lt;em&gt;Column (box) selection page up/down&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rich-languages-editing"&gt;
  &lt;/a&gt;
  Rich languages editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Space&lt;/code&gt; - &lt;em&gt;Trigger suggestion&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Space&lt;/code&gt;  - &lt;em&gt;Trigger parameter hints&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+F&lt;/code&gt; - &lt;em&gt;Format document&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+F&lt;/code&gt; - &lt;em&gt;Format selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F12&lt;/code&gt; - &lt;em&gt;Go to Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+F12&lt;/code&gt; - &lt;em&gt;Peek Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F12&lt;/code&gt; - &lt;em&gt;Open Definition to the side&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+.&lt;/code&gt; - &lt;em&gt;Quick Fix&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F12&lt;/code&gt; - &lt;em&gt;Show References&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F2&lt;/code&gt; - &lt;em&gt;Rename Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+X&lt;/code&gt; - &lt;em&gt;Trim trailing whitespace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K M&lt;/code&gt; - &lt;em&gt;Change file language&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editor-management"&gt;
  &lt;/a&gt;
  Editor management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F4, Ctrl+W&lt;/code&gt; - &lt;em&gt;Close editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F&lt;/code&gt; - &lt;em&gt;Close folder&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+\&lt;/code&gt; - &lt;em&gt;Split editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+ 1 / 2 / 3&lt;/code&gt; - &lt;em&gt;Focus into 1st, 2nd or 3rd editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+ ←/→&lt;/code&gt; - &lt;em&gt;Focus into previous/next editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Move editor left/right&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K ← / →&lt;/code&gt; - &lt;em&gt;Move active editor group&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-management"&gt;
  &lt;/a&gt;
  File management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+N - *New File*&lt;br&gt;
&lt;/code&gt;Ctrl+O - &lt;em&gt;Open File...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+S - *Save*&lt;br&gt;
&lt;/code&gt;Ctrl+Shift+S  - &lt;em&gt;Save As...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K S - *Save All*&lt;br&gt;
&lt;/code&gt;Ctrl+F4 - &lt;em&gt;Close&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+W - *Close All*&lt;br&gt;
&lt;/code&gt;Ctrl+Shift+T - &lt;em&gt;Reopen closed editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K - *Enter Keep preview mode editor open*&lt;br&gt;
&lt;/code&gt;Ctrl+Tab - &lt;em&gt;Open next&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab - *Open previous*&lt;br&gt;
&lt;/code&gt;Ctrl+K P - &lt;em&gt;Copy path of active file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K R - *Reveal active file in Explorer*&lt;br&gt;
&lt;/code&gt;Ctrl+K O - &lt;em&gt;Show active file in new window/instance&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;F9&lt;/code&gt; - &lt;em&gt;Toggle breakpoint&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F5&lt;/code&gt; - &lt;em&gt;Start/Continue&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F5&lt;/code&gt; - &lt;em&gt;Stop&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F11 / Shift+F11&lt;/code&gt; - &lt;em&gt;Step into/out&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F10&lt;/code&gt; - &lt;em&gt;Step over&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+I&lt;/code&gt; - &lt;em&gt;Show hover&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrated-terminal"&gt;
  &lt;/a&gt;
  Integrated terminal
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+C&lt;/code&gt; - &lt;em&gt;Copy selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+V&lt;/code&gt; - &lt;em&gt;Paste into active terminal&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt; - &lt;em&gt;Scroll up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home / End&lt;/code&gt; - &lt;em&gt;Scroll to top/bottom&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Other operating systems’ keyboard shortcuts and additional&lt;br&gt;
unassigned shortcuts available at &lt;a href="//aka.ms/vscodekeybindings"&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>windows</category>
      <category>programming</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>Difference between include, require, include_once and require_once in PHP</title>
      <author>Amine Saissi Hassani</author>
      <pubDate>Mon, 02 Aug 2021 09:33:50 +0000</pubDate>
      <link>https://dev.to/aminesaissihassani/difference-between-include-require-includeonce-and-requireonce-in-php-48ok</link>
      <guid>https://dev.to/aminesaissihassani/difference-between-include-require-includeonce-and-requireonce-in-php-48ok</guid>
      <description>&lt;p&gt;First of all we should know what is the difference and similarity between include() and require(), include() and require() are used to include other files into a PHP file, and the difference between them are the include() generates a warning when there is an error, but the script will continue execution, otherwise, the require() generates a fatal error, and the script will stop.&lt;/p&gt;

&lt;p&gt;The require_once() statement is similar to require() except require_once() will check if the file has already been included, and if so, it will not require it again, same with include_once().&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reasons Why You Need To Have A Professional Portfolio.</title>
      <author>Lucius Emmanuel Emmaccen</author>
      <pubDate>Mon, 02 Aug 2021 09:33:07 +0000</pubDate>
      <link>https://dev.to/emmaccen/reasons-why-you-need-to-have-a-professional-portfolio-5cji</link>
      <guid>https://dev.to/emmaccen/reasons-why-you-need-to-have-a-professional-portfolio-5cji</guid>
      <description>&lt;p&gt;I have often found people to shy away from the practice of having a professional portfolio. While it might seem negligible in some situations, more often than not, it has proven to be of great importance.&lt;/p&gt;

&lt;p&gt;In this article, we are going to observe and answer a few questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is a portfolio?&lt;/li&gt;
&lt;li&gt;Why do you need one?&lt;/li&gt;
&lt;li&gt;What jobs/industries use portfolios&lt;/li&gt;
&lt;li&gt;What should go into a portfolio&lt;/li&gt;
&lt;li&gt;What should not go into a portfolio&lt;/li&gt;
&lt;li&gt;Should you have a "hard copy" or "online" portfolio&lt;/li&gt;
&lt;li&gt;How do you create one?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-a-portfolio"&gt;
  &lt;/a&gt;
  What is a portfolio?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;A portfolio is a collection of records or documentation that provides proof of accomplishments, experience, skills, attributions and work samples. It can be a website, a binder or a physical book, depending on the line of work or profession.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;It might be necessary to note that a &lt;strong&gt;Portfolio&lt;/strong&gt; is quite different from a &lt;strong&gt;Resume&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/15187218-Adam-Zonski-Personal-Portfolio-Website?utm_source=Clipboard_Shot&amp;amp;utm_campaign=nurpraditya&amp;amp;utm_content=Adam%20Zonski%20-%20Personal%20Portfolio%20Website&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=nurpraditya&amp;amp;utm_content=Adam%20Zonski%20-%20Personal%20Portfolio%20Website&amp;amp;utm_medium=Social_Share"&gt;Design by Nur Praditya&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFl99atE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggt2jsdvv7ie7q819eok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFl99atE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggt2jsdvv7ie7q819eok.png" alt="Design by Nur Praditya"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-you-need-one"&gt;
  &lt;/a&gt;
  Why do you need one?
&lt;/h4&gt;

&lt;p&gt;Having a portfolio can improve your recognition in a professional or academic setting. It is an opportunity to illustrate your competencies, presents evidence of your skills and abilities, highlights a comprehensive idea of your best work and can be seen as a brochure for the services you are selling. It allows you to &lt;em&gt;show and not just tell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Portfolios are great for freelancers or independent contractors, business owners or consultants who need to provide work samples to potential clients. The practice of putting together a portfolio: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serves as a reminder of your past accomplishments and acquired skills&lt;/li&gt;
&lt;li&gt;Allows you to showcase your creativity and persona that differentiates you from your competition&lt;/li&gt;
&lt;li&gt;A source of motivation, high self-esteem and confidence&lt;/li&gt;
&lt;li&gt;Gives you credibility&lt;/li&gt;
&lt;li&gt;Makes you a more effective interviewee&lt;/li&gt;
&lt;li&gt;Helps potential clients visualize working with you&lt;/li&gt;
&lt;li&gt;Can help apply for jobs, scholarships, grants and negotiating promotions and raises.&lt;/li&gt;
&lt;li&gt;Can pass for work and learning experience&lt;/li&gt;
&lt;li&gt;Helps you to be seen and discovered (e.g. online portfolio)&lt;/li&gt;
&lt;li&gt;Allows you to market the services you provide and build a reputation and following.&lt;/li&gt;
&lt;li&gt;Demonstrates consistency and compels you to learn/do more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more reasons to consider, but I am sure you get the idea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/14909770-Landing-Page-CV-Head-of-Marketing?utm_source=Clipboard_Shot&amp;amp;utm_campaign=outcrowd&amp;amp;utm_content=Landing%20Page%20-%20CV%20Head%20of%20Marketing&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=outcrowd&amp;amp;utm_content=Landing%20Page%20-%20CV%20Head%20of%20Marketing&amp;amp;utm_medium=Social_Share"&gt;Design by Outcrowd&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAz-GrhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lzrom74o1b9x4uo31g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAz-GrhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lzrom74o1b9x4uo31g9.png" alt="Design by Outcrowd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-jobs-industries-use-portfolios"&gt;
  &lt;/a&gt;
  What jobs / industries use portfolios?
&lt;/h4&gt;

&lt;p&gt;Years back, it is common to see more people in the &lt;strong&gt;Visual Profession&lt;/strong&gt; having a portfolio, such as Artists and Creative professionals, photographers, architects, teachers, graphic designers, front-end engineers, painters, etc.&lt;/p&gt;

&lt;p&gt;In the world today, every professional can benefit from having one, even those in the fields &lt;em&gt;not directly&lt;/em&gt; related to visual. e.g. Backend engineers (could create documentation of their involvement in a project, a short video or utilize GitHub etc.), Radio broadcasters/podcasters, Attorneys, judges and politicians, coaches and athletes etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/15380331-Modern-Furniture-Website-concept?utm_source=Clipboard_Shot&amp;amp;utm_campaign=thomsoon_com&amp;amp;utm_content=Modern%20Furniture%20-%20Website%20concept&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=thomsoon_com&amp;amp;utm_content=Modern%20Furniture%20-%20Website%20concept&amp;amp;utm_medium=Social_Share"&gt;Design by Tomasz Mazurczak&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYlnJzqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78uf0pjfq0lkxd82yqzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYlnJzqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78uf0pjfq0lkxd82yqzr.png" alt="Design by Tomasz Mazurczak"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-should-go-into-a-portfolio"&gt;
  &lt;/a&gt;
  What should go into a portfolio?
&lt;/h4&gt;

&lt;p&gt;Anything that spotlights your accomplishments and abilities should go in your portfolio. It should capture an idea of who you are and the services you provide.&lt;/p&gt;

&lt;p&gt;Here are some items I would recommend you incorporate in your portfolio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A short and precise summary of who you are.&lt;/li&gt;
&lt;li&gt;Updated resume or CV&lt;/li&gt;
&lt;li&gt;List of skills, tools or technologies you use&lt;/li&gt;
&lt;li&gt;Work experience&lt;/li&gt;
&lt;li&gt;Diplomas (Education), professional certificates and Transcripts (if any)&lt;/li&gt;
&lt;li&gt;Reference letters, awards, testimonials, and LinkedIn recommendations&lt;/li&gt;
&lt;li&gt;Some of your content (if you create content) e.g. Blogs, YouTube videos, Podcasts etc.&lt;/li&gt;
&lt;li&gt;Work samples you have created e.g. Websites, UI/UX designs, project documentation or case studies, video presentations, Artwork (for artists), PowerPoint presentations, Slides etc.&lt;/li&gt;
&lt;li&gt;Lists of accomplishments/awards&lt;/li&gt;
&lt;li&gt;Thank you notes or emails from clients or co-workers (Testimonials) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-should-not-go-into-a-portfolio"&gt;
  &lt;/a&gt;
  What should not go into a portfolio?
&lt;/h4&gt;

&lt;p&gt;You might get tempted to want a whole Wikipedia of things on your portfolio, but more often than not, it does not increase positive perception. Being super precise and detailed is very important when structuring your portfolio (which is beyond the scope of this article) as it can considerably improve the way you are seen as a professional.&lt;br&gt;
Here are a couple of things I have found to be less useful in a portfolio&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having a waterfall of summary in your "About Me" section. A couple of lines of text should pretty much tell the story&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do not put ratings or percentages on your skills&lt;/strong&gt;. I am guilty as I did it in the past. We could argue all day about it, but the truth is, own your skill and do not put a dent in it. Having things like: HTML(50%), CSS(90%), Photoshop(45%) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Here's a screenshot taken from my first portfolio website&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEHgopDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/burclur56uitbmg0bwq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEHgopDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/burclur56uitbmg0bwq8.png" alt="skills with ratings"&gt;&lt;/a&gt;&lt;br&gt;
Please, remove the ratings. Your 50% rating might be the 100% a company is looking for.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Overly-complicated, overly-designed layout&lt;/li&gt;
&lt;li&gt;Lack of proper structure and personality&lt;/li&gt;
&lt;li&gt;Do not tell personal stories.&lt;/li&gt;
&lt;li&gt;Do not include your house address (Employers will not perceive you as being security conscious, same for your CV). Your email is just fine.&lt;/li&gt;
&lt;li&gt;Only include things relevant to your field of work/study.&lt;/li&gt;
&lt;li&gt;Use only high-fidelity images (but one that will still load fast in the browser)&lt;/li&gt;
&lt;li&gt;Provide a way to get in touch e.g. A mail, link or a contact form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your get-in-touch section might look something like this if you decided to go with a form field:&lt;br&gt;
&lt;em&gt;Screenshot is taken from my current portfolio&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci2Kpwr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2t7fqfcfvwr3icw2lzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci2Kpwr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2t7fqfcfvwr3icw2lzo.png" alt="portfolio contact section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#should-you-have-a-hard-copy-or-online-portfolio"&gt;
  &lt;/a&gt;
  Should you have a hard copy or online portfolio?
&lt;/h4&gt;

&lt;p&gt;Whether or not you use an online or hard copy portfolio, all depends on your industry and personal preference. Research your industry for what's common and beneficial, then, make a decision. &lt;br&gt;
whichever industry it is, it might still be beneficial to have an online presence.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-create-one"&gt;
  &lt;/a&gt;
  How do you create one?
&lt;/h4&gt;

&lt;p&gt;For online portfolios, you can build one for yourself if you are a web developer, have someone build one for you, or use a prebuilt template.&lt;br&gt;
Anyone you decide, be sure to research and make good decisions on what design best suits your field.&lt;/p&gt;

&lt;p&gt;For hard-copy portfolios, you can use a ring binder or leather-bound padfolio. Be sure to organize/tab them into sections.&lt;/p&gt;

&lt;p&gt;Feel free to google &lt;em&gt;“online portfolio websites”  or  “online portfolio builder”&lt;/em&gt;. You can also get design inspiration from hundreds of websites out there if you are building one for yourself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note: It does not have to be 100% a website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have seen people use several platforms as their portfolio, e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/u/0/"&gt;Google slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/"&gt;Google Drive portfolio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A PDF hosted online&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; or &lt;a href="https://www.adobe.com/"&gt;Adobe&lt;/a&gt; Design with a "live link"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other options you could utilize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your &lt;a href="https://www.linkedin.com/"&gt;LinkedIn profile&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.github.com/"&gt;GitHub profile&lt;/a&gt; with projects having detailed ReadMe.md describing project specifications, features and your involvement&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.behance.net/"&gt;Behance&lt;/a&gt; and, many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, research your industry and find what best suits you.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#pro-tips"&gt;
  &lt;/a&gt;
  Pro Tips
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Replace practice projects with professional ones as soon as you start having them, e.g. Remove the calculator web app you coded and replace it with your new blog website (even if it is just presentation/static).&lt;/li&gt;
&lt;li&gt;Update the CV on your portfolio as you update them on your PC or mobile&lt;/li&gt;
&lt;li&gt;Do not waste considerable time trying to make it perfect, it never will. You can always make minor updates later in the future.&lt;/li&gt;
&lt;li&gt;Get your portfolio reviewed by a more senior person in your field&lt;/li&gt;
&lt;li&gt;You do not need to have a hundred completed projects before you start a portfolio. Start where you're at, and you'll never regret it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's pretty much it. This article doesn't cover all you need to know and I'd appreciate it if you can drop more &lt;strong&gt;suggestions&lt;/strong&gt;, &lt;strong&gt;Portfolio design Inspiration links&lt;/strong&gt;, &lt;strong&gt;Your thoughts&lt;/strong&gt;, &lt;strong&gt;Your portfolio website link&lt;/strong&gt; to inspire others, and &lt;strong&gt;Comments&lt;/strong&gt; in the discussion box below. You might provide/say something important to other readers. Also, your feedbacks are welcome if this post needs improvement. Do bookmark, like/unicorn this post for reference (and also to support me)&lt;/p&gt;

&lt;p&gt;Keep an eye out. Soon, I will post a step by step process on "How to build a simple online portfolio as a web developer".&lt;/p&gt;

&lt;p&gt;Thanks for reading 😊.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>portfolio</category>
      <category>resume</category>
    </item>
    <item>
      <title>GraphQL Federation Crypto App</title>
      <author>Ania Kubow</author>
      <pubDate>Mon, 02 Aug 2021 09:22:55 +0000</pubDate>
      <link>https://dev.to/ania_kubow/graphql-federation-crypto-app-23lj</link>
      <guid>https://dev.to/ania_kubow/graphql-federation-crypto-app-23lj</guid>
      <description>&lt;p&gt;In this video I show you how to use GraphQL Federation by building a Crypto App. I will use React, Apollo GraphQL and a DataStax Astra database.&lt;/p&gt;

&lt;p&gt;0:00 Introduction&lt;br&gt;
1:38 Setting up our Database&lt;br&gt;
3:48 GraphQL API and Playground&lt;br&gt;
7:31 Schema-first approach&lt;br&gt;
14:51 Inserting Coins&lt;br&gt;
18:30 Creating our React App&lt;br&gt;
23:17 Apollo Gateway and Services&lt;br&gt;
51:22 Building out the Frontend&lt;br&gt;
1:14:14 Styling our Project&lt;/p&gt;

&lt;p&gt;Final code here: &lt;a href="https://github.com/kubowania/graphQL-federation-crypto"&gt;https://github.com/kubowania/graphQL-federation-crypto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Promos codes in this video:&lt;br&gt;
💻 ANIA200 for $200 free credits from &lt;a href="https://www.datastax.com/"&gt;https://www.datastax.com/&lt;/a&gt;&lt;br&gt;
💻 ANIAKUBOW for 3 months free of Webstorm here: &lt;a href="https://jb.gg/webstorm_ide"&gt;https://jb.gg/webstorm_ide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T722_t-HTFw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;⭐ New to code and none of this is making sense? Watch my '12hr+ YouTube Coding Bootcamp' in which you will learn HTML, CSS and JavaScript Fundamentals completely from scratch. It's on my channel and its 100% free.&lt;/p&gt;

&lt;p&gt;⭐ In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool"&gt;http://bit.ly/tabnine-top-tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ You can get a blockchain domain with my affiliate link here: &lt;a href="http://bit.ly/get-a-crypto-domain"&gt;http://bit.ly/get-a-crypto-domain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow"&gt;https://www.buymeacoffee.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips"&gt;https://bit.ly/JS-tips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ania_kubow"&gt;https://twitter.com/ania_kubow&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/aniakubow"&gt;https://instagram.com/aniakubow&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>crypto</category>
      <category>react</category>
    </item>
    <item>
      <title>Why I shifted from C++ to JavaScript.</title>
      <author>Voider</author>
      <pubDate>Mon, 02 Aug 2021 09:17:26 +0000</pubDate>
      <link>https://dev.to/voider/why-i-shifted-from-c-to-javascript-2gll</link>
      <guid>https://dev.to/voider/why-i-shifted-from-c-to-javascript-2gll</guid>
      <description>&lt;p&gt;In this article I will talk about shifting from a compiled language (CPP) to an interpreted language (JS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have been coding for almost 3 years now and my native language has been C++ for most of that time, but recently I have been preferring JavaScript and I will cover why in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-is-better"&gt;
  &lt;/a&gt;
  Which is better?
&lt;/h2&gt;

&lt;p&gt;Answering this question depends on what do you want to achieve, for example if you want speed then you should definitely choose C++, you can look up tons of comparisons online between the two languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-preferring-js-recently"&gt;
  &lt;/a&gt;
  Why am I preferring JS recently.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I am a very lazy person and I try to use my brain capacity to the very bare minimum, so using a tool that handles my frontend and backend at the same time saves me the hassle of integrating things together if they are of a different language.&lt;/li&gt;
&lt;li&gt;It takes a whole lot less time (and brain capacity) to learn, I didn't even realize how hard C++ was until like a year later, but this will significantly help you as a software engineer.&lt;/li&gt;
&lt;li&gt;You can do so much with so little code, for example let's say you have an array of animals that has a name and species:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var animals = [
  { name: 'Fluffykins', species: 'rabbit' },
  { name: 'Caro',       species: 'dog' },
  { name: 'Hamilton',   species: 'dog' },
  { name: 'Harold',     species: 'fish' },
  { name: 'Ursula',     species: 'cat' },
  { name: 'Jimmy',      species: 'fish' }
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you want to copy the names of all the animals to another array, the normal way to do this is by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
var names = []
for (var i = 0; i &amp;lt; animals.length; i++) {
  names.push(animals[i].name)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-up-87-characters"&gt;
  &lt;/a&gt;
  taking up 87 characters
&lt;/h3&gt;

&lt;p&gt;but thanks to JavaScript's ES6 arrow functions we can do this in literally one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var names = animals.map((x) =&amp;gt; x.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-up-38-characters"&gt;
  &lt;/a&gt;
  taking up 38 characters
&lt;/h3&gt;

&lt;p&gt;you literally just saved up writing 49 characters for yourself, if you can't see beauty in this I don't know when will you ever do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-word"&gt;
  &lt;/a&gt;
  Last word
&lt;/h2&gt;

&lt;p&gt;Again this is not a comparison at all, I am just stating my personal experience, you should use what's best for what you are working on and what you feel most comfortable with. Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Taking Context &amp; Hooks To The Next Level With Component Factories</title>
      <author>Itay Schechner</author>
      <pubDate>Mon, 02 Aug 2021 09:10:54 +0000</pubDate>
      <link>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</link>
      <guid>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</guid>
      <description>&lt;p&gt;Before you slander me in the comments, I just wanted to let you know: &lt;strong&gt;It's my opinion&lt;/strong&gt;. Not all readers will agree with it. I am new to this approach as well, and I wanted to hear your opinion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Why to use the component factory approach&lt;/li&gt;
&lt;li&gt;Supercharging the context API&lt;/li&gt;
&lt;li&gt;Usage outside of the context API&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a typical navigation bar component I wrote for one of my projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-100 nav px-8 w-screen flex"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"md:px-4 lg:px-6 flex items-center h-16 md:ml-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-lg md:text-xl text-purple-900 font-bold"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Partydeck
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex flex-grow md:flex-none items-stretch justify-end pl-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedOutLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GameWebsiteLink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Join Game
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedInLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There's nothing wrong with this component. In fact, most of you will even like it. However, what about this one:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NavigationBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-theme-700 h-16 nav px-8 shadow-xl w-screen flex flex-row items-center justify-between"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center space-x-1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logo&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-6 h-6"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LinkablePartydeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-roboto font-bold text-white text-lg hover:text-theme-300"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Login&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Register&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;JoinGameLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-bold font-roboto px-3 py-2 text-theme-700 bg-green rounded hover:bg-green-light ml-2"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Both components have the exact same functionality. Yet, when you read the second one, you can actually &lt;strong&gt;understand&lt;/strong&gt; exactly what you're seeing.&lt;/p&gt;

&lt;p&gt;Believe it or not, despite having much more components in my codebase - the overall amount of lines in the navigation source code has decreased dramatically.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-factories-to-the-rescue"&gt;
  &lt;/a&gt;
  Component factories to the rescue
&lt;/h2&gt;

&lt;p&gt;How did I do that? Using &lt;strong&gt;component factories&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Component factories are functions that return JSX providers. In those factories, you inject the functionality, but leave the styling to the parent component.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#why-do-use-them"&gt;
  &lt;/a&gt;
  Why do use them?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increased code readability&lt;/li&gt;
&lt;li&gt;Ease of refactoring&lt;/li&gt;
&lt;li&gt;Increased Resusability&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#some-examples"&gt;
  &lt;/a&gt;
  Some examples
&lt;/h3&gt;

&lt;p&gt;The most classic examples I can provide are using the React Context API:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Context Action Factory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I could create a &lt;code&gt;Logout&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Navigation/buttons.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Log Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I used this Logout button in multiple places, and in each one of them it contained different styles.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NavigationBar.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// AuthPopup.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex font-bold w-max space-x-3 items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-500 text-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Context Conditional Wrapper Factory&lt;/strong&gt;&lt;br&gt;
I find this one extremely useful. &lt;/p&gt;

&lt;p&gt;Suppose you want to conditionally render a fraction of your application to signed in users only. You'd do something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SuperSafeComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or, suppose you have a dialog and a button that opens it. Your dialog would look something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDialogContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In an enterprise application, you might have tens of those. Whereas, the conditional wrapper factory will save you a lot of time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ConditonalWrapperFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// AuthFilters.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NotAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Dialog.tsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WhenVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#usage-outside-of-the-context-api"&gt;
  &lt;/a&gt;
  Usage outside of the Context API.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Glyph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my project, I have 30 decorative photos, located anywhere around the website. To save myself time and effort, I created this simple factory:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// glyphFactory.tsx&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt; &lt;span class="cm"&gt;/* My favorite feature! */&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// res/glyphs/LightBulbGlyph.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;List Factory&lt;/strong&gt; and &lt;strong&gt;Decorated Pharagraph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are pretty simple ones to understand. In my website, I had plenty of "about-related" static content. I found myself over-creating a list of text, and over-creating a flexbox with a Glyph and a text.&lt;/p&gt;

&lt;p&gt;For that, I created those factories:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ListFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// DecoratedPharagraphFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Glyph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSXProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Glyph&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-full"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I created those in my home page code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home/rules.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CardPick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/CardPick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JudgePick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/JudgePick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Question&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Victory&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Victory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../shared/decoratedPharagraphFactory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JudgePickedRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;JudgePick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Each round, a judge is picked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QuestionRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The other players are given a question and and 4 answer cards, and pick the funniest or most clever answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BestMatchRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;CardPick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The judge gets the question and the answers displayed anonymously, and picks the best answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VictoryRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Victory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The player who submitted the answer, wins the round!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I then left it to the home page component to handle he responsive displaying logic and the styling. How Simple Is That?&lt;/p&gt;

&lt;p&gt;Another good usage was in the about page:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;LightBulb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Idea of Partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FeaturesList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Playable from distance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inclusive and fair - the game makes the judge or the round judge based on the quality of the answer card rather than the quality of the player who had it.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Binding - it’s impossible to win when you are not 100% focused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Personalized - each one can make their own customized version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connecting - the game makes you get to know the other players better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Growth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Always Getting Better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GitHubLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;externalLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://github.com/itays123/partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Us&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;When we thought of Partydeck, we wanted a game that is:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FeaturesList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Those Guiding Principals will keep guiding us in the next versions.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section space-y-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Developing an application takes time and patience, and the result is
          not always perfect.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            If you have a bug report, a suggestion, a comment or any feedback at
            all regarding this website, we encourage you to contact us via
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GitHubLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"underline"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, or the email link described there.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Thanks a lot, the Partydeck team.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Look how simple is that!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Do you have any ideas of using component factories in your next React.js project? Do you think it's a good approach at all? Let me know in the comments!&lt;/p&gt;

&lt;p&gt;View the full source code: (branch &lt;code&gt;1.1.2-redesign&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itays123"&gt;
        itays123
      &lt;/a&gt; / &lt;a href="https://github.com/itays123/partydeck"&gt;
        partydeck
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A cool online card game!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>react</category>
      <category>webdev</category>
      <category>functional</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Tips and Tricks to Ace the Certified Kubernetes Application Developer</title>
      <author>Sahan</author>
      <pubDate>Mon, 02 Aug 2021 09:04:00 +0000</pubDate>
      <link>https://dev.to/sahan/tips-and-tricks-to-ace-the-certified-kubernetes-application-developer-175k</link>
      <guid>https://dev.to/sahan/tips-and-tricks-to-ace-the-certified-kubernetes-application-developer-175k</guid>
      <description>&lt;p&gt;I recently passed the &lt;a href="https://www.cncf.io/certification/ckad/"&gt;Certified Kubernetes Application Developer&lt;/a&gt; exam and thought to share some tips and tricks that might come in handy if you are also planning to take the exam in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  📔 Background
&lt;/h3&gt;

&lt;p&gt;About a month ago, I decided to learn more about Kubernetes as it would be really useful for the my current role. Prior to that, I was always fascinated by Kubernetes but never got the chance to work on an actual system that used it. I knew how it worked from a 10,000 feet view, but didn’t have an idea of core components, basic constructs and literally to be able to do anything with it.&lt;/p&gt;

&lt;p&gt;Having taken the exam, I’m quite comfortable navigating through Kubernetes and now it makes sense when I’m doing something with it, rather than merely following some commands.&lt;/p&gt;

&lt;p&gt;CKAD is a hands-on exam and managing your time is absolutely crucial. I hope you find the following tips useful✌️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-exam"&gt;
  &lt;/a&gt;
  🗒️ Summary of the exam
&lt;/h3&gt;

&lt;p&gt;To summarize the key facts about the CKAD exam,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passing score is 66%&lt;/li&gt;
&lt;li&gt;2 hours duration, comprised of 19 questions&lt;/li&gt;
&lt;li&gt;Questions will have varying weights (from 2% - 13%)&lt;/li&gt;
&lt;li&gt;You can also open only one tab to browse Kubernetes documentation&lt;/li&gt;
&lt;li&gt;Remotely proctored&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#aliases-and-bash-tricks"&gt;
  &lt;/a&gt;
  💻 Aliases and bash tricks
&lt;/h3&gt;

&lt;p&gt;This is a really important first that I can’t recommend enough. I was using the full &lt;code&gt;kubectl&lt;/code&gt; command during the study phase but later started using just &lt;code&gt;k&lt;/code&gt; by setting up an alias when I was practising simply to cut down the time when typing commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially, it will take a few seconds to type this out but it will pay dividends throughout the exam. Here are a few more if you are interested. You don’t need to use everything in here though. In fact, I only used the above alias.&lt;/p&gt;

&lt;p&gt;Feel free to mix and match the commands you are comfortable with 👍&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl describe'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl run'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl create'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl explain'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kgp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl get pods'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kgs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl get svc'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don’t need to be a Linux guru to take the exam, but, remember you will do it in some Linux env. (potentially Ubuntu). So it helps to know a few basic Bash commands if you are coming from Windows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cp&lt;/code&gt; - Copy files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv&lt;/code&gt; - Move/Rename files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mkdir&lt;/code&gt; - Create new folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ls&lt;/code&gt; - List files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rm&lt;/code&gt; - Remove/Delete files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep&lt;/code&gt; - Search through text. Useful when you want to filter a list of pods. Eg: &lt;code&gt;kubectl get pods | grep -i status:&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+R&lt;/code&gt; - To do a reverse search to find a command you have previously run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra tip: Use short names of resources whenever possible.&lt;/p&gt;

&lt;p&gt;Not sure what are the short names? You can check it with &lt;code&gt;kubectl api-resources&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge4lsYTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bb71424ae729b8cfd1dfcf1dd870eafc/5a190/tips-and-tricks-for-acing-ckad-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge4lsYTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bb71424ae729b8cfd1dfcf1dd870eafc/5a190/tips-and-tricks-for-acing-ckad-1.png" alt="tips-and-tricks-for-acing-ckad-1.png" title="tips-and-tricks-for-acing-ckad-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-a-good-grasp-of-vim"&gt;
  &lt;/a&gt;
  ⌨️ Get a good grasp of VIM
&lt;/h3&gt;

&lt;p&gt;I found having previous experience in VIM came in handy. However, you don’t need to be a master at it. Using nano would be fine too if you are good.&lt;/p&gt;

&lt;p&gt;Take the time to set the following to your VIM profile before attempting any questions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vi ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following lines and save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;set &lt;/span&gt;expandtab
&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;tabstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;shiftwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands will save you from having indentation issues and weird syntax issues while working with YAML files during the exam.&lt;/p&gt;

&lt;p&gt;Here are some other commands that may be of help if you are not familiar with VIM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; - Search through text. Also, use &lt;code&gt;n&lt;/code&gt; to go to the next result.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dd&lt;/code&gt; - Delete a line&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;u&lt;/code&gt; - Undo&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift+A&lt;/code&gt; - Go to the end of the line and enter the INSERT mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gg&lt;/code&gt; - Go to the beginning of the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;G&lt;/code&gt; - Go to the end of the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;o&lt;/code&gt; - Go to the next line and enter INSERT mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;v&lt;/code&gt; - Enter VISUAL mode. You can select a block of lines with arrow keys or &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; keys. You can copy with &lt;code&gt;y&lt;/code&gt; and paste with &lt;code&gt;p&lt;/code&gt; . Also, you can indent a block with &lt;code&gt;Shift + &amp;gt;&lt;/code&gt; to right and &lt;code&gt;Shift + &amp;lt;&lt;/code&gt; to indent to the left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, while you are in NORMAL mode you can type &lt;code&gt;ZZ&lt;/code&gt; to quickly save and go back to the terminal without having to type &lt;code&gt;:wq&lt;/code&gt; How cool is that? ⚡&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mastering-the-imperative-commands"&gt;
  &lt;/a&gt;
  ☄️ Mastering the imperative commands
&lt;/h3&gt;

&lt;p&gt;You would come across many questions where you would have to create pods, deployments, services etc. In such cases, don’t bother writing up YAML definitions from scratch - or even finding the relevant reference in the k8s docs.&lt;/p&gt;

&lt;p&gt;You can save a lot of time by using imperative commands. For instance, if you are tasked to create a pod with &lt;code&gt;nginx&lt;/code&gt; as the image, &lt;code&gt;tier:frontend&lt;/code&gt; as labels with the port &lt;code&gt;80&lt;/code&gt; exposed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run tmp &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nt"&gt;--labels&lt;/span&gt; &lt;span class="nv"&gt;tier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;frontend &lt;span class="nt"&gt;--port&lt;/span&gt; 80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Say you are asked to expose a deployment &lt;code&gt;nginx&lt;/code&gt; with a &lt;code&gt;NodePort&lt;/code&gt; service called &lt;code&gt;nginx-svc&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl expose deploy nginx &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-svc &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--target-port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NodePort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if you can’t get everything included in a single command you can use the &lt;code&gt;--dry-run=client -o yaml &amp;gt; tmp.yaml&lt;/code&gt; to export it to a file before creating the resource.&lt;/p&gt;

&lt;p&gt;Oh btw, if you need to delete a pod quickly you can use the &lt;code&gt;--grace-period=0 --force&lt;/code&gt; command to quickly delete them without waiting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl delete po &amp;lt;pod name&amp;gt; &lt;span class="nt"&gt;--grace-period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-in-trouble"&gt;
  &lt;/a&gt;
  🤔 When in trouble
&lt;/h3&gt;

&lt;p&gt;Pay attention to the weightage of the question and a rough idea of how long it will take you to solve it. I can remember, I was looking at a question that was quite long and had a fair bit of configuration to be done. But the weightage was only 2% 😆 I marked it down on the provided &lt;strong&gt;notepad&lt;/strong&gt; and skipped it (you can also &lt;strong&gt;Flag&lt;/strong&gt; a question). The next question was 4% and was really really easy! I hope you get the point.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Don’t be afraid to skip and revisit questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you forgot how something is placed in a resource definition, you can use &lt;code&gt;kubectl explain &amp;lt;resource name&amp;gt; --recursive | less&lt;/code&gt; to find what you are looking for.&lt;/p&gt;

&lt;p&gt;Another useful tip I can give you is, the &lt;code&gt;kubectl &amp;lt;resource name&amp;gt; -h&lt;/code&gt; command. You can use it like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;k run &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrX4cmiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/a14f5b74fe1046df67075fe6b67a0834/5a190/tips-and-tricks-for-acing-ckad-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrX4cmiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/a14f5b74fe1046df67075fe6b67a0834/5a190/tips-and-tricks-for-acing-ckad-2.png" alt="tips-and-tricks-for-acing-ckad-2.png" title="tips-and-tricks-for-acing-ckad-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note-on-clusters-amp-namespaces"&gt;
  &lt;/a&gt;
  ☝️ A note on clusters &amp;amp; namespaces
&lt;/h3&gt;

&lt;p&gt;This is also a very important point you should pay attention to. At the top of each question, if you will be given a command to set the current context. &lt;strong&gt;Make sure to run it for each question&lt;/strong&gt; as different questions will be in different clusters.&lt;/p&gt;

&lt;p&gt;Another point is, &lt;strong&gt;pay attention to any namespaces&lt;/strong&gt; in the given question text. Sometimes it will be worded within the question. Sometimes it will be at the bottom of the question as a separate note!&lt;/p&gt;

&lt;p&gt;In a question where you will have to &lt;code&gt;ssh&lt;/code&gt; into servers please make sure to remember (or note it down) which cluster and server you are in. And remember to &lt;code&gt;exit&lt;/code&gt; out of it before going to the next question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leverage-the-docs"&gt;
  &lt;/a&gt;
  📄 Leverage the docs
&lt;/h3&gt;

&lt;p&gt;In certain cases, it’s better to visit the docs than to spend time to figure out what needs to be done. For instance, if there’s a question on setting up a Persistent Volume, the question will also have a section to create a Persistent Volume Claim and to create a Pod to use that.&lt;/p&gt;

&lt;p&gt;Go to the docs, type &lt;code&gt;pv&lt;/code&gt; at the search bar and click on the link that says “Configure a Pod to Use a PersistentVolume for Storage”. And yes, you need to know where things are at within the K8S docs!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfDWkUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/9b97538a8cd17fe8d8d482d20d5c327a/5a190/tips-and-tricks-for-acing-ckad-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfDWkUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/9b97538a8cd17fe8d8d482d20d5c327a/5a190/tips-and-tricks-for-acing-ckad-3.png" alt="tips-and-tricks-for-acing-ckad-3.png" title="tips-and-tricks-for-acing-ckad-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-practice-practice"&gt;
  &lt;/a&gt;
  👟 Practice, practice, practice
&lt;/h3&gt;

&lt;p&gt;Speed is key to the exam. Although you get 2 hours, it will just fly! 🦅&lt;/p&gt;

&lt;p&gt;When you pay for the exam you will get 2 free mock exam sessions before sitting the real exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLsPDBvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/98/16/67/981667bac32a91436e9dd3fa78afa4ab.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLsPDBvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/98/16/67/981667bac32a91436e9dd3fa78afa4ab.jpg" alt="Meme on speed"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;As Jeremy Clarkson would say, "SPEEEEEEEEED!!!!" 😂&lt;/center&gt;

&lt;p&gt;Here are some more exercises I used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dgkanatsios/CKAD-exercises"&gt;https://github.com/dgkanatsios/CKAD-exercises&lt;/a&gt; [Free]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bmuschko/ckad-prep"&gt;https://github.com/bmuschko/ckad-prep&lt;/a&gt; [Free]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kodekloud.com/courses/certified-kubernetes-application-developer-ckad/"&gt;https://kodekloud.com/courses/certified-kubernetes-application-developer-ckad/&lt;/a&gt; [Paid]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/bb-tutorials-and-thoughts/practice-enough-with-these-questions-for-the-ckad-exam-2f42d1228552"&gt;https://medium.com/bb-tutorials-and-thoughts/practice-enough-with-these-questions-for-the-ckad-exam-2f42d1228552&lt;/a&gt; [Free]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  👋 Conclusion
&lt;/h3&gt;

&lt;p&gt;Do you know what’s the hardest thing to do after the exam? waiting for the results! 🤣 It might take up to 24 - 36 hours to get your result. Here’s my certificate if you are interested.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYItoif8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7f318d8b9269ad918fa442ed8eddaa57/5a190/tips-and-tricks-for-acing-ckad-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYItoif8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7f318d8b9269ad918fa442ed8eddaa57/5a190/tips-and-tricks-for-acing-ckad-4.png" alt="tips-and-tricks-for-acing-ckad-4.png" title="tips-and-tricks-for-acing-ckad-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found these tips helpful. Feel free to comment below if you have got any tips and tricks too! Good luck with your exam!!! 🎉&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>ckad</category>
      <category>certification</category>
    </item>
    <item>
      <title>What are the benefits of using Angular?</title>
      <author>Aliaksei Kuncevič</author>
      <pubDate>Mon, 02 Aug 2021 08:37:26 +0000</pubDate>
      <link>https://dev.to/kuncevic/what-are-the-benefits-of-using-angular-5840</link>
      <guid>https://dev.to/kuncevic/what-are-the-benefits-of-using-angular-5840</guid>
      <description>&lt;p&gt;&lt;strong&gt;Time changes everything. Angular is timeless and meets all the modern business requirements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular has picked up steam in recent years, and it becomes “the cherry on the cake” for most app developers, and there are many good reasons for it. Let's see the key reasons for using Angular and the top benefits  for your business if you choose to go with Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-lets-understand-what-angular-is"&gt;
  &lt;/a&gt;
  First of all, let's understand what Angular is
&lt;/h2&gt;

&lt;p&gt;Angular is a Javascript-based framework for developing mobile and desktop frame applications created by Google. It is used and favored by the Google Cloud platform, AdWords, and thousands of web applications built within Google. Other big names have also chosen Angular: Forbes, Delta Airlines, BMW, Samsung, Paypal, Tesla, Netflix, SpaceX.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, why do all of these companies choose Angular?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here are the top five main benefits:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#productivity"&gt;
  &lt;/a&gt;
  Productivity
&lt;/h2&gt;

&lt;p&gt;As an app developer, you understand the time is highly precious for each project, and surely you don't want to waste any minute of it. Once you understand the core principles of Angular building blocks and build a first Angular application using it, later you can apply the same thinking creating a new one. Your journey as an Angular developer is to create modular, performant, accessible, and maintainable applications by simply following the best practices and general guidelines that goes with them&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#legolike-building-blocks"&gt;
  &lt;/a&gt;
  Lego-like building blocks
&lt;/h2&gt;

&lt;p&gt;Angular applications are built on logical modular principles, which means that you can simplify your life as an app developer by benefiting from dividing your code into small blocks. Those blocks can be reusable and can help to maintain immense code base health. It will help the business be more efficient, organised, cost-effective, and stay in line with any company’s KPI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-ecosystem"&gt;
  &lt;/a&gt;
  Angular ecosystem
&lt;/h2&gt;

&lt;p&gt;Angular ecosystem contains all the possible fundamental tools and features you need to design and build an app. For example, libraries like Angular Material incorporate diverse components and modules, which helps save a lot of time and costs when building new applications. In addition, all of the Angular Material UI components, patterns, and performance are optimised to meet all expectations and high-quality standards.&lt;/p&gt;

&lt;p&gt;You are not alone on your journey with Angular; by joining Angular, you are becoming a part of a friendly environment where you can become a part of the Angular community and benefit from various tools Angular ecosystem offers .&lt;/p&gt;

&lt;p&gt;The Angular ecosystem is boundless. Its generous selection of well-maintained production-ready components and tools will make your development life simpler and painless. In addition, things such as strong typings will save you time catching errors and help you scale your projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strong-typings-with-typescript"&gt;
  &lt;/a&gt;
  Strong Typings with TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript is a first-class citizen in the Angular ecosystem. Angular itself is built with TypeScript, a Superset of Javascript, meaning that you are on the safe side and have more control over your code. With TypeScript, you can easily spot bugs and typing errors while producing understandable, efficient, and high-quality code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h2&gt;

&lt;p&gt;Angular programming style is based on best practices, which are embedded with modern component-based architecture. So, what does it mean exactly? First, as a developer, you will build components and other angular building blocks that will be united into a solid application. Then, all you need to do is construct modular parts of  the app, while Angular tooling will take care of everything else. Doing so eliminates unnecessary code creation.  Furthermore, proper and correct preliminary setup and configuration that follow best practices will simplify your work, ensuring a lighter and more efficient development process.&lt;/p&gt;

&lt;p&gt;When it comes to  app development, it can be a challenging journey. Even though we are pretty spoiled with the various options to choose from, only the right decisions and best practices can convert our efforts into success. That is the reason why so many companies are choosing Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-development-tools"&gt;
  &lt;/a&gt;
  Angular Development Tools
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, the Angular ecosystem is boundless and very developed. It provides a wide range of advanced tools that can bring your development experience to an entirely new level. &lt;/p&gt;

&lt;p&gt;Please see below the tip of the week, which can navigate you through the available options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57BzX8KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626940878727/v8hvx9JXY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57BzX8KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626940878727/v8hvx9JXY.png" alt="3-static-TIP.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, there is a very fruitful conversation available on Angular Rocks Podcast, which focuses on this matter in every detail.&lt;/p&gt;

&lt;p&gt;The guest we hosted is Minko Gechev, the technical lead, and Angular Team DevRel  Manager at Google. He is passionate about computer science, open-source frameworks, libraries, and performance tooling. His extraordinary expertise helped us cover all of the hot topics that any web developer wants to hear about, from modern dev tools for Angular developers to insightful tips and tricks that will help to improve your development processes. You can listen to the episode &lt;a href="https://share.transistor.fm/s/a21f025f"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Angular will never let you down, and by continuing to explore the Angular world, you can progress and enjoy the development process on an entirely different level. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>tips</category>
      <category>webdev</category>
      <category>inspiration</category>
    </item>
    <item>
      <title>Deploying and building React projects to GitHub Pages with GH Actions</title>
      <author>Alen Duda</author>
      <pubDate>Mon, 02 Aug 2021 08:30:45 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/deploying-and-building-react-projects-to-github-pages-with-gh-actions-8ek</link>
      <guid>https://dev.to/bornfightcompany/deploying-and-building-react-projects-to-github-pages-with-gh-actions-8ek</guid>
      <description>&lt;p&gt;For my private mini-projects, I prefer to use &lt;a href="https://parceljs.org/"&gt;Parcel bundler&lt;/a&gt; over &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; just because there is less overhead and clutter to clean up. However, by using CRA and the &lt;a href="https://github.com/tschaub/gh-pages"&gt;appropriate package&lt;/a&gt;, deploying can be very simple. This post will tell you how to set up build and deploy when using a custom project structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-reactparcel-project"&gt;
  &lt;/a&gt;
  Creating a React/Parcel project
&lt;/h2&gt;

&lt;p&gt;By following steps from &lt;a href="https://blog.jakoblind.no/react-parcel/"&gt;this post&lt;/a&gt; we can be up and running in a few minutes. As always with React, you are free to organize the project structure as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-for-github-pages"&gt;
  &lt;/a&gt;
  Build for GitHub Pages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Enable GH Pages inside repo settings (use &lt;strong&gt;docs&lt;/strong&gt; folder, as detailed in &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"&gt;the documentation&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Specify a build script - Parcel should create built files inside &lt;code&gt;/docs&lt;/code&gt; folder.
Example build script inside package.json: &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;"build-github": "rm -rf docs/* &amp;amp;&amp;amp; parcel build index.html --public-url ./ -d docs"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These two commands: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;delete the existing docs folder and all its contents (to make sure we don't have previously built files lying around)&lt;/li&gt;
&lt;li&gt;run the Parcel build command, as always using &lt;em&gt;index.html&lt;/em&gt; as entry point, but specifying the built files to go inside &lt;em&gt;/docs&lt;/em&gt; folder, while setting the output files to read from that folder (&lt;code&gt;./&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test this, we can try running &lt;code&gt;npm run build-github&lt;/code&gt; command and committing the changes, pushing them to master. A green checkmark should appear on your GH repository near the latest commit, indicating all went well. The default URL template for GH Pages is &lt;code&gt;https://&amp;lt;your-github-username&amp;gt;.github.io/&amp;lt;your-github-repository&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automating-the-build-with-every-push-to-master"&gt;
  &lt;/a&gt;
  Automating the build with every push to master
&lt;/h2&gt;

&lt;p&gt;To avoid having to run that command manually, we should automate this step by using GitHub Actions, another free service from GitHub.&lt;/p&gt;

&lt;p&gt;In your repository's project root, create a folder named &lt;code&gt;.github&lt;/code&gt; and inside it another folder called &lt;code&gt;workflows&lt;/code&gt;. There, you should create a file named &lt;code&gt;build.yml&lt;/code&gt; (this name is optional).&lt;/p&gt;

&lt;p&gt;Example build.yml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build gh-pages&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-gh-pages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;      
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build-github&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit files&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auto-commit-action&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stefanzweifel/git-auto-commit-action@v4&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit_message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build project for github pages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push changes&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.auto-commit-action.outputs.changes_detected == 'true'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ad-m/github-push-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;No changes detected&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.auto-commit-action.outputs.changes_detected == 'false'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "No changes!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After pushing this file to your remote repository, GitHub will read it and follow steps inside it: on every push to the branch master, it will run the steps detailed in &lt;code&gt;build-gh-pages&lt;/code&gt; job (name optional) - do a clean npm install (&lt;code&gt;npm ci&lt;/code&gt;) and run the &lt;code&gt;npm run build-github&lt;/code&gt; command we created earlier. Make sure you specify the correct node version for your project, as well as replacing the build-github npm command with your custom naming, if required. Feel free to modify the &lt;code&gt;commit_message&lt;/code&gt; variable as well!&lt;/p&gt;

&lt;p&gt;To test this, simply make some changes to your project and push them to the remote repository. An orange circle should appear near the latest commit message on GH repo page, where you can track the progress of the build process. Once ready, a green checkbox will replace the circle and your changes should be visible.&lt;/p&gt;

&lt;p&gt;For me, this mini-automation process was a great introduction to GH Actions. I borrowed some code and inspiration from my colleagues &lt;a href="https://dev.to/shockwavee"&gt;Davor&lt;/a&gt; and &lt;a href="https://dev.to/wnbsmart"&gt;Maroje&lt;/a&gt; with only minor customization required. I hope it will help someone and spark an interest into the wonderful world of automation!&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>github</category>
      <category>parcel</category>
      <category>react</category>
    </item>
    <item>
      <title>React lifecycle methods in Hooks</title>
      <author>Madushan Perera</author>
      <pubDate>Mon, 02 Aug 2021 07:47:34 +0000</pubDate>
      <link>https://dev.to/mcperera/react-lifecycle-methods-in-hooks-53nl</link>
      <guid>https://dev.to/mcperera/react-lifecycle-methods-in-hooks-53nl</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the original post on &lt;a href="https://mcperera.com/blog/react-hooks"&gt;my blog&lt;/a&gt;. Thank you for visiting. 😊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-are-react-hooks"&gt;
  &lt;/a&gt;
  What are React hooks?
&lt;/h2&gt;

&lt;p&gt;When we use React class components, we used to manage state and other React lifecycle features inside those class components using React lifecycle methods like ”componentDidMount”.&lt;/p&gt;

&lt;p&gt;Since React brought us functional component features, it needed to have those lifecycle methods same as the React class components.&lt;br&gt;
Therefore, Hooks are functions that let you “hook into” React state and lifecycle features from function components same as the class components.&lt;/p&gt;

&lt;p&gt;To get to know more details about React life cycle, visit &lt;a href="https://dev.to/blog/react-component-life-cycle"&gt;React Component Life Cycle&lt;/a&gt; post.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hooks-we-should-use-in-different-stages-of-react-life-cycle"&gt;
  &lt;/a&gt;
  Hooks we should use in different stages of React Life Cycle?
&lt;/h2&gt;

&lt;p&gt;As we know React life cycle can be divided in to 3 main stages according to how the component renders to the DOM respectively mounting, Updating and Unmounting from the DOM. Let’s understand most commonly use hooks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h3&gt;

&lt;p&gt;To update the state of a React function component we need to use "useState" hook. As shown in the below code block, we need to import it as a named import before we use it.&lt;/p&gt;

&lt;p&gt;This “useState” hook takes only one parameter as the initial state of the component and returns two values, the current state of the component (“count” in the below component) and a function (“setCount” in the below component) to update the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the setCount function we can update our state as we want. In this above code, setCount is used to increase and decrease the state “count”. Passing a callback function to this state changing function we can get the previous state as an argument of this callback function. This is the way that CountMe component gets the previous state and every time we call this “setCount” function, the render method of this CountMe component gets called and render the element with updated state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h3&gt;

&lt;p&gt;This function can perform the most part of react life cycle. Simply we can say that this function can use for same purpose as “componentDidMount”, “componentDidUpdate”, and “componentWillUnmount” in React classes.&lt;/p&gt;

&lt;p&gt;Basically, we use this to perform side effects like data fetching, event subscriptions in React function component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Run on mounting of &amp;lt;CountMe/&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Run on initial &amp;amp; update of count state : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes two parameters. First one is a function and the second one is an array of dependencies. React runs the effects after every render including the first render. But we can avoid it using dependencies.&lt;/p&gt;

&lt;p&gt;To perform “componentDidMount”, all we need to call this function with what we need to do as the first parameter and we can ignore the second parameter snice we need to run it on component mount.&lt;/p&gt;

&lt;p&gt;If we need to execute any code block when the component’s state is updated, all we need to do is add the state value which is going to update in the dependency as shown in the code above in the second “useEffect”. So, the code inside the “useEffect” will run every time the “count” is going to update.&lt;/p&gt;

&lt;p&gt;Note : if we use “useEffect” without the dependency array, at this time “useEffect” will run every update. To specifically run the “useEffect” on a state update, we need to add that variable to the array. At that time “useEffect” will only run according to the given dependencies. Also, “useEffect” will run only once when use an empty dependency array “[]”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrolling&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//Cleanup the EventListener&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100vh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Scroll&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes, we need to subscribe for some event listeners when the component is mounted to the DOM and also we need to unsubscribe when the component is unmounted from the DOM. In React class components we used “componentDidMount” and “componentWillUnmount” to perform these kind of scenarios.&lt;/p&gt;

&lt;p&gt;We can use “useEffect” hook to subscribe and unsubscribe these events like above by adding return statement. It means if we want to do something on component unmount, we can put that code part inside return statement like above code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-own-hook"&gt;
  &lt;/a&gt;
  Creating your own hook
&lt;/h2&gt;

&lt;p&gt;React has given the capability of creating our own hook to keep the code DRY (Don’t Repeat Yourself) by creating reusable functionalities as a custom hook. Check the post &lt;a href="https://dev.to/blog/react-custom-hooks"&gt;React Custom Hooks&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Thank you for reading and hope this helps you 🎉&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is Dynamic Module Import ?</title>
      <author>Madushan Perera</author>
      <pubDate>Mon, 02 Aug 2021 07:44:43 +0000</pubDate>
      <link>https://dev.to/mcperera/what-is-dynamic-module-import-44lk</link>
      <guid>https://dev.to/mcperera/what-is-dynamic-module-import-44lk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the original post on &lt;a href="https://mcperera.com/blog/dynamic-module-imports"&gt;my blog&lt;/a&gt;. Thank you for visiting. 😊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-we-need-import-in-javascript"&gt;
  &lt;/a&gt;
  Why we need ‘import’ in JavaScript?
&lt;/h2&gt;

&lt;p&gt;The static import is very useful when we want to use read only live bindings which are exporting by other modules in your program. In this way the idea is to manage our code by separating them as we want. This can be functionality, features or component wise. But the entire code is working as a one code block after connecting them by importing.&lt;/p&gt;

&lt;p&gt;Below code block shows how we can import modules in a static way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;alias1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;export2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name/path/to/specific/un-exported/file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;export2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;alias2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way it’s easier to understand the code to some and very helpful for debugging.&lt;br&gt;
The import statement cannot be used in the embedded scripts unless the script has a type=’ module.’&lt;br&gt;
Also, we can import modules as a dynamic import.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-dynamic-import-in-javascript"&gt;
  &lt;/a&gt;
  What’s dynamic import in JavaScript?
&lt;/h2&gt;

&lt;p&gt;Most of the time developers are used to use the standard static import. This will always import the modules at the loading time. No matter what if we use that imported module or not JavaScript always loads the static modules in loading time.&lt;/p&gt;

&lt;p&gt;What if we want to import modules conditionally or on demand? This is the place where you need to implement dynamic import in JavaScript.&lt;/p&gt;

&lt;p&gt;To use dynamic import call the ‘import()’ as a function as pass the module path as an argument. Then you can use JavaScript promise or await to get the rest of the work done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/modules/my-module.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with the module.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module--&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/modules/my-module.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-to-use-dynamic-import"&gt;
  &lt;/a&gt;
  When to use dynamic import?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When importing statically significantly slows the loading of your code.&lt;/li&gt;
&lt;li&gt;When importing statically significantly increases your program's memory usage.&lt;/li&gt;
&lt;li&gt;When the module you are importing does not exist at load time&lt;/li&gt;
&lt;li&gt;When the module being imported has side effects, and you do not want those side effects unless some condition is true.&lt;/li&gt;
&lt;li&gt;When the import specifier string needs to be constructed dynamically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and Happy Coding 🥳&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
  </channel>
</rss>
