<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Looking Back on 2020 - The Year I Became an AWS Hero, Started a Conference and Won The Liberty Mutual Chairman's Award</title>
      <author>Matt Coulter</author>
      <pubDate>Thu, 15 Apr 2021 16:05:11 +0000</pubDate>
      <link>https://dev.to/aws-heroes/looking-back-on-2020-the-year-i-became-an-aws-hero-started-a-conference-and-won-the-liberty-mutual-chairman-s-award-4fph</link>
      <guid>https://dev.to/aws-heroes/looking-back-on-2020-the-year-i-became-an-aws-hero-started-a-conference-and-won-the-liberty-mutual-chairman-s-award-4fph</guid>
      <description>&lt;p&gt;On 7th April 2021 I was stunned to find out I had won the 2020 Liberty Mutual Chairman's award. To put this into context, "The Chairman’s Award is our most prestigious award handed out once a year and recognises employees whose significant contributions, effort and performance go above and beyond". If you are ever in Boston, my name should soon be permanently displayed somewhere in the Foyer of the Liberty Mutual HQ. This is only the second time someone from Liberty IT has won the award so I am truly humbled by it.&lt;/p&gt;

&lt;p&gt;The award description:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hV6rQzuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xogbg9m8z1mblwu7xap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hV6rQzuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xogbg9m8z1mblwu7xap.png" alt="award description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This seemed like a perfect opportunity to reflect on the past 12 to 18 months, share what I have learned, what mistakes I made and how I ended up here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-aws-cdk"&gt;
  &lt;/a&gt;
  Why AWS CDK?
&lt;/h2&gt;

&lt;p&gt;I have used a lot of technologies in my career, why have I pushed so hard to make this one easy for our engineers to embrace? Why not just pull out the old "it depends" when asked about Infrastructure as Code tools?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AWfK7kIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm5rmu2ycclb5j5jte9h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AWfK7kIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm5rmu2ycclb5j5jte9h.jpg" alt="It depends"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2 years ago, I was promoted into a different role within Liberty. I went from driving the technical direction of a product area, working with a specific set of teams to being an enabling function across ~240 developers in Belfast/Dublin or thousands globally within the wider organisation. I was given the freedom and autonomy to do this my own way but how could I have any kind of impact on a group this large?&lt;/p&gt;

&lt;p&gt;Honestly, on day one I wasn't sure this was possible but I had some down time and my colleague &lt;a href="https://twitter.com/MarkMcCann"&gt;Mark McCann&lt;/a&gt; had said to me "Have you seen AWS CDK? It's pretty cool". The LIT technical strategy set by &lt;a href="https://twitter.com/davidand393"&gt;Dave Anderson&lt;/a&gt; was that we wanted to be serverless first. My new area in Liberty Mutual also had a serverless first north star. I sat and thought about the biggest blockers to serverless developer productivity from my previous team. Two things came to mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CloudFormation&lt;/li&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The configuration we needed to use for API Gateway was so specific that a typical CloudFormation Template (CFT) with just a gateway in it was approx 1500 lines long. Developers facing that reality coming from SpringBoot where you just annotate a method was grim. You also had no local validation of the CFT, developers needed to deploy and hope it worked (it frequently didn't so we used to sit around at tea telling our horror stories). Dedicated Infra engineers will tell me that pure YML for CFT is the best method but for everyday engineers to move at the speed we wanted it was causing considerable drag and stress.&lt;/p&gt;

&lt;p&gt;Since Mark had put AWS CDK in my head, I thought "can it help here?". The way I evaluated it was to build an AWS CDK construct for our API Gateway configuration, this construct came with a full set of unit tests and reduced the 1500 lines of YML mentioned above to about 15 lines of TypeScript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Cdkk6wFFqisTe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Cdkk6wFFqisTe/giphy.gif" alt="cat shocked"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had never seen a product with so much potential to get us where we needed to go through developer empowerment before, it even allowed us to bring our engineering excellence standards from previous platforms. The problem was AWS CDK had basically only gone Generally Available(GA), it was changing rapidly to meet the needs of early adopters and as such examples of people using it were scarce. I also had to factor in that the serverless team at AWS were mostly focused on their new product at the time AWS SAM. We needed to use the product right there and then, not wait 2 years - To me, this seemed like the right level for an enabling architect to operate.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introducing-the-software-accelerator"&gt;
  &lt;/a&gt;
  Introducing The Software Accelerator
&lt;/h2&gt;

&lt;p&gt;At this exact moment in time, a Senior Architect in Liberty Mutual (&lt;a href="https://twitter.com/rajeshporaiyan"&gt;Rajesh Kannan&lt;/a&gt;) was creating the Software Accelerator. This was going to be our developer enablement platform where everyone could share working patterns and practices for rapid deployment. To see this platform in action you can sign up for CDK Day on 30th April 2021 (&lt;a href="https://twitter.com/cdkday/status/1381889407381295104?s=20"&gt;Accelerator CDK Day&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I excitedly phoned Rajesh and said "hey, this is a game changer" he agreed and had already luckily decided the accelerator would be based on AWS CDK. This left me in a fortunate position, I had a technology I could see the potential in and a currently unreleased platform, still in dev that could make this technology easy to distribute. What was missing? The working patterns, I wanted to make sure that by the time the Accelerator launched our engineers had working patterns to deploy with it. Developers have deadlines to meet and one bad experience with a technology causes inertia to try it again so this was mission critical to our serverless first journey in my head. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finding-the-patterns"&gt;
  &lt;/a&gt;
  Finding The Patterns
&lt;/h2&gt;

&lt;p&gt;There was a decision point where as an Architect I could have gone to my happy place and created super complex, opinionated patterns backed by my ideas alone. That plan would not have worked, what we needed was for groups of engineers to reuse / contribute back to the same patterns without all the bloat I would inevitably add due to personal preferences. The easiest way to create these patterns was to find someone in the industry who is already recognised and respected so that when a developer disagrees with the implementation you can say "well, this well known industry expert says otherwise, want to get them on a call and discuss it? Before we set that up, here is all the evidence for why it works and here are all the companies doing it in production. Still disagree?"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jeremy_daly"&gt;Jeremy Daly&lt;/a&gt; was that industry expert, an AWS Serverless Hero who had a famous &lt;a href="https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/"&gt;blog post&lt;/a&gt; dedicated to serverless patterns. The intention here was never to take away credit from Jeremy but to open up a new audience of developers by coding his patterns in AWS CDK and linking it all back to him.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#open-source-or-inner-source"&gt;
  &lt;/a&gt;
  Open Source or Inner Source?
&lt;/h2&gt;

&lt;p&gt;The next big decision was if I should do this just for Liberty or since the industry as a whole was lacking reliable code examples for AWS CDK if I should create my first ever proper open source project. In December 2019 I attended AWS re:Invent where I spoke to other developers plus watched some of the talks where I confirmed this was an industry issue. &lt;/p&gt;

&lt;p&gt;On Jan 11th 2020 after some holiday time off, I made my decision:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jC53lrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1234119690236157955/iwxupGf0_normal.jpg" alt="Matt Coulter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matt Coulter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nideveloper"&gt;@nideveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Was thinking “be the change you want to see in the world” today so I purchased &lt;a href="https://t.co/Z7HRXs4YHb"&gt;cdkpatterns.com&lt;/a&gt; so that developers can have a place to grab the official &lt;a href="https://twitter.com/hashtag/cdk"&gt;#cdk&lt;/a&gt; version of aws &lt;a href="https://twitter.com/hashtag/serverless"&gt;#serverless&lt;/a&gt; archs. Wanna help contribute some patterns? I’d be ecstatic! Mvp will be a github repo.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:48 PM - 11 Jan 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1216099633253974016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1216099633253974016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1216099633253974016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#marketing"&gt;
  &lt;/a&gt;
  Marketing
&lt;/h2&gt;

&lt;p&gt;I now had a new problem, my social media presence was non existent so how would I get the word out? I had no budget to spend on advertisements or on a marketing team. I decided to start small and created the &lt;a href="https://twitter.com/CdkPatterns"&gt;@CdkPatterns&lt;/a&gt; twitter handle then every time I created a new pattern I would tweet about it and tag the pattern's original creator, this way if what I was doing was valuable they might retweet it and growth would be organic. I also created a dev.to account and started blogging about each of the patterns as they were released. Finally I created a &lt;a href="https://www.youtube.com/channel/UCuR3jnWEnxx1G2axUMVaogg"&gt;YouTube channel&lt;/a&gt; where I talked through the theory of some of the patterns. I will show later how the marketing worked out but we have some steps in the story to discuss first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-product"&gt;
  &lt;/a&gt;
  Building a Product
&lt;/h2&gt;

&lt;p&gt;The plan was to make a developer productivity play through some kind of product called CDK Patterns with open source at the core. &lt;/p&gt;

&lt;p&gt;How would I judge the success of my product? It wasn't profits or usage in production since I was focused on education over reusable libraries. I did not want to own the code liability for the whole CDK community, I wanted to empower them to use the standard AWS constructs without custom building. Ideally, people wouldn't even know my name after using the product.&lt;/p&gt;

&lt;p&gt;The North Star of CDK Patterns was to increase serverless adoption of AWS CDK in the industry but at that point in time the community was very small and we didn't meet. I decided that for the first while I would judge success on unique visitors to the repo, clones, GitHub stars and I would also take an informal check of serverless AWS CDK noise in the industry (blog posts, YouTube videos, conference presentations etc). &lt;/p&gt;

&lt;p&gt;It is important to note that we are talking about the behaviour of a global developer community here which is a rich tapestry of interactions, motivations and reactions so I knew I could contribute to the outcome I wanted but I am not in any way claiming that I owned this whole north star.&lt;/p&gt;

&lt;p&gt;I had a second North Star that was voluntary serverless AWS CDK adoption in Liberty Mutual. This was something I could easily measure through Accelerator usage metrics. This one was arguably more important but I knew it would come as a side effect of the industry adoption.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-language-problem"&gt;
  &lt;/a&gt;
  The Language Problem
&lt;/h3&gt;

&lt;p&gt;It quickly became apparent that since AWS CDK supported multiple programming languages (TypeScript, Python, Java, .Net at the time), I needed a way to not isolate the majority of the community. I did a quick poll on Twitter to ask what languages people were using and at the time Python/TS covered 87% of users with TypeScript the majority&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKO6YWBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EQRlVx6XsAAdXc-.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_QOeTTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1218456839865716736/C6Pshf7l_normal.jpg" alt="CDK Patterns profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        CDK Patterns
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cdkpatterns
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Pythonista Friends! I see you, so today I added a python version of every pattern. Clone, build, deploy and learn today at &lt;a href="https://t.co/6n8AtjRVsu"&gt;cdkpatterns.com&lt;/a&gt;. &lt;a href="https://twitter.com/hashtag/serverless"&gt;#serverless&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ServerlessForEveryone"&gt;#ServerlessForEveryone&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/python"&gt;#python&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:49 PM - 08 Feb 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1226216429415997442" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1226216429415997442" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1226216429415997442" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I came up with a flow where all new patterns get added in TS/Python with the other languages something the community could contribute later as needed. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-monorepo-problem"&gt;
  &lt;/a&gt;
  The Monorepo Problem
&lt;/h3&gt;

&lt;p&gt;In another poll I asked the community if they would rather have a repo per pattern or keep them all together in all available languages. The resounding answer was to keep them all together. Whilst on paper this seems simpler and easier for users, it presents an information discovery problem. There is only so much you can do with a GitHub readme file (believe me I pushed the limits).&lt;/p&gt;

&lt;p&gt;I created two solutions to try and solve this problem, the first was a cli tool that allowed developers to clone any single pattern in their desired language with one command&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5oXp9peH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ESlDj7sWkAEgCsi.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_QOeTTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1218456839865716736/C6Pshf7l_normal.jpg" alt="CDK Patterns profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        CDK Patterns
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cdkpatterns
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I’m very excited to share with you a new way of learning cdk patterns! Now you can clone and deploy any pattern in 3 commands - &lt;a href="https://t.co/ues5rMPuRB"&gt;npmjs.com/package/cdkp&lt;/a&gt; This is a beta solution for now so be kind but I hope you all enjoy using it. &lt;a href="https://twitter.com/hashtag/ServerlessForEveryone"&gt;#ServerlessForEveryone&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:05 AM - 08 Mar 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1236593862249984001" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1236593862249984001" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1236593862249984001" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The second was to create the website &lt;a href="https://www.cdkpatterns.com"&gt;cdkpatterns.com&lt;/a&gt; as an information radiator for the patterns available in the repo. I allowed you to browse all the patterns or filter the patterns by the AWS component contained within (e.g. Lambda, SNS, SQS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--17Vcl3WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzv59qi5xhxnww5stlau.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--17Vcl3WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzv59qi5xhxnww5stlau.PNG" alt="CDK Patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-content-problem"&gt;
  &lt;/a&gt;
  The Content Problem
&lt;/h3&gt;

&lt;p&gt;Once I had CDK Patterns established a new problem emerged - how do I help people choose the right pattern for their situation? If I just kept adding patterns with no guidelines then it would be overwhelming with choice. The solution I came up with was to pair the patterns with the &lt;a href="https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;amp;wa-lens-whitepapers.sort-order=desc"&gt;AWS Well Architected Framework&lt;/a&gt;, the idea was that developers could do a well architected review of their application and then based on the outcome of that report they could find CDK Patterns to help fill the gaps. &lt;a href="https://twitter.com/heitor_lessa"&gt;Heitor Lessa&lt;/a&gt; helped me significantly with refining this idea. If you read the recent &lt;a href="https://aws.amazon.com/solutions/case-studies/liberty-mutual-case-study/"&gt;AWS case study on Liberty Mutual&lt;/a&gt; you will see this mirrored our internal strategy as well&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jC53lrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1234119690236157955/iwxupGf0_normal.jpg" alt="Matt Coulter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matt Coulter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nideveloper"&gt;@nideveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🥳🥳 Announcing 🥳🥳&lt;br&gt;&lt;br&gt;cdk patterns alter ego:&lt;br&gt;&lt;a href="https://t.co/8P9bsWygPO"&gt;serverless-patterns.co.uk&lt;/a&gt;&lt;br&gt;&lt;br&gt;look inside the well architected section to see cdk patterns matched with serverless well architected best practices. &lt;a href="https://twitter.com/heitor_lessa"&gt;@heitor_lessa&lt;/a&gt; has helped me so much with this.&lt;br&gt;&lt;br&gt;Now, let's fill in the blanks
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:58 PM - 19 May 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1262744416428539906" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1262744416428539906" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1262744416428539906" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#bringing-the-community-together"&gt;
  &lt;/a&gt;
  Bringing The Community Together
&lt;/h2&gt;

&lt;p&gt;Remember my North star was to increase serverless adoption of AWS CDK in the industry but I had no way of judging this since we didn't meet properly. I had this idea to create a new conference called CDK Day where the whole community could come together for one day and showcase the brightest and best of CDK (by this point we had 3 CDKs - AWS CDK, CDK for Terraform and cdk8s for Kubernetes)&lt;/p&gt;

&lt;p&gt;I wrote a full article on this idea which goes into who the amazing group were that brought this together and the timelines we faced:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/nideveloper" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mIs0j92M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DxTcaqtz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/344151/981e1051-b576-4a48-955f-3b6bcf891f58.png" alt="nideveloper image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/launching-a-virtual-global-conference-in-two-weeks-through-aws-community-builders-32f1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Launching A Virtual Global Conference In Two Weeks Through AWS Community Builders&lt;/h2&gt;
      &lt;h3&gt;Matt Coulter ・ Aug 14 '20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#awscdk&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cdkday&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;as well as my learnings:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/nideveloper" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mIs0j92M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DxTcaqtz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/344151/981e1051-b576-4a48-955f-3b6bcf891f58.png" alt="nideveloper image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/everything-i-learned-creating-cdk-day-my-first-global-virtual-conference-3g7k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Everything I Learned Creating CDK Day - My First Global, Virtual Conference&lt;/h2&gt;
      &lt;h3&gt;Matt Coulter ・ Oct 12 '20 ・ 16 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#awscdk&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cdkday&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#conference&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The short version is that over 3000 people signed up to attend with over 1300 tuning in live for the keynote.&lt;/p&gt;

&lt;p&gt;People signed up from nearly everywhere, this still astonishes me:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UdI4e8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohw4zorygd0jwqn9cmw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UdI4e8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohw4zorygd0jwqn9cmw5.png" alt="User Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the talks were about serverless implementations so I was ecstatic to see the community developing. Part of the discussions for CDK Day were about how do we keep people talking and &lt;a href="https://twitter.com/skorfmann"&gt;Sebastian Korfmann&lt;/a&gt; had purchased the &lt;a href="//cdk.dev"&gt;cdk.dev&lt;/a&gt; domain so we agreed to create a cdk.dev Slack space which would be used for attendees to chat during the day and hopefully they would stay there afterwards. As of April 2021 there are over 2000 members in that slack community with constant daily interactions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#aws-summit-americas"&gt;
  &lt;/a&gt;
  AWS Summit Americas
&lt;/h2&gt;

&lt;p&gt;In one of the most surreal experiences of my career, the day before CDK Day &lt;a href="https://twitter.com/Werner"&gt;Werner Vogels&lt;/a&gt; as CTO of Amazon quoted me in his keynote where he tells the origin story of AWS CDK. He also took the time to talk about CDK Patterns and deep dive into how they apply the Well Architected Framework&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRKplbdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EjF1GHHWsAM9KmZ.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jC53lrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1234119690236157955/iwxupGf0_normal.jpg" alt="Matt Coulter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matt Coulter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nideveloper"&gt;@nideveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Aaaaaaagh &lt;a href="https://twitter.com/Werner"&gt;@Werner&lt;/a&gt; talking about me, &lt;a href="https://twitter.com/Liberty_IT"&gt;@Liberty_IT&lt;/a&gt; / &lt;a href="https://twitter.com/LibertyMutual"&gt;@LibertyMutual&lt;/a&gt; and serverless, well-architected &lt;a href="https://twitter.com/CdkPatterns"&gt;@CdkPatterns&lt;/a&gt;!!!&lt;br&gt;&lt;br&gt;Highlights are the CloudWatch Dashboard and the Lambda Power Tuner&lt;br&gt;&lt;br&gt;Checkout the keynote here - &lt;a href="https://t.co/klJKfQg8kE"&gt;pages.awscloud.com/aws-summit-onl…&lt;/a&gt;&lt;br&gt;&lt;br&gt;also remember &lt;a href="https://t.co/Z7HRXs4YHb"&gt;cdkpatterns.com&lt;/a&gt; 😃 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:03 PM - 29 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1310958370485080065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1310958370485080065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1310958370485080065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;You can watch the full video here:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AYYTrDaEwLs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A couple of days later he also said these very kind words&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLM_ot8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/563188960394891264/z3-Rh11q_normal.jpeg" alt="Werner Vogels profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Werner Vogels
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/werner"&gt;@werner&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/NIDeveloper"&gt;@NIDeveloper&lt;/a&gt; Matt you played a very important role in the evolution of the CDK, so you should take big credit for its success.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:46 PM - 01 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1311709176385671169" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1311709176385671169" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1311709176385671169" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#published-articles-with-aws"&gt;
  &lt;/a&gt;
  Published Articles With AWS
&lt;/h2&gt;

&lt;p&gt;AWS were graceful enough to ask me to co author a couple of blog posts with them as well&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/the-cdk-patterns-open-source-journey/"&gt;The CDK Patterns Open Source Journey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/architecture/liberty-it-adopts-serverless-best-practices-using-aws-cdk/"&gt;Liberty IT Adopts Serverless Best Practices with CDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#speaking-at-events-and-others-speaking-about-cdk-patterns"&gt;
  &lt;/a&gt;
  Speaking At Events (and others speaking about CDK Patterns)
&lt;/h2&gt;

&lt;p&gt;Another great avenue to spread the word about CDK Patterns was to appear at other people's events. There is a massive amount of work in preparing to speak at an event, crafting the slides/narrative but it definitely brings traction!&lt;/p&gt;

&lt;p&gt;Serverless Bash&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zGNMzpqU0ig"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;NI Dev Conf&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BDTuPK10Jkk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;AWS Community Days Dublin&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSs4b4c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EkNlQrTXgAMgcuf.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jC53lrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1234119690236157955/iwxupGf0_normal.jpg" alt="Matt Coulter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matt Coulter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nideveloper"&gt;@nideveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      What a great setup at &lt;a href="https://twitter.com/hashtag/AWSCommunityDay"&gt;#AWSCommunityDay&lt;/a&gt; Dublin (&lt;a href="https://twitter.com/AWSUserGroups"&gt;@AWSUserGroups&lt;/a&gt;) today!&lt;br&gt;&lt;br&gt;If you missed my talk representing &lt;a href="https://twitter.com/Liberty_IT"&gt;@Liberty_IT&lt;/a&gt; you can find the slides here:&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/zKZJA2PlBR"&gt;speakerdeck.com/nideveloper/bu…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:25 PM - 13 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1316007179934150657" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1316007179934150657" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1316007179934150657" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Serverless Chats Podcast&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---t-DsjsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EnXBfDMWMAYb4CB.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLH5PhRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1101265978665721857/cuRIinmK_normal.png" alt="Serverless Chats Podcast profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Serverless Chats Podcast
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @serverlesschats
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      On the next episode, Jeremy chats with Matt Coulter (&lt;a href="https://twitter.com/NIDeveloper"&gt;@NIDeveloper&lt;/a&gt;) about why he built &lt;a href="https://t.co/v5eSRzo61L"&gt;CDKPatterns.com&lt;/a&gt;, how he used it to help &lt;a href="https://twitter.com/Liberty_IT"&gt;@Liberty_IT&lt;/a&gt; choose the CDK, how they've used these patterns to implement Well-Architected &lt;a href="https://twitter.com/hashtag/serverless"&gt;#serverless&lt;/a&gt; solutions, and much more. Don't miss it! 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:12 PM - 21 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1330182419178287108" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1330182419178287108" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1330182419178287108" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Marcia Villalba What to Watch at re:Invent&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Wz-Yc3uFUVQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Dave Anderson at re:Invent&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpWw7Rg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EovMRuDWMA8GIEj.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jC53lrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1234119690236157955/iwxupGf0_normal.jpg" alt="Matt Coulter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matt Coulter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nideveloper"&gt;@nideveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Great job &lt;a href="https://twitter.com/davidand393"&gt;@davidand393&lt;/a&gt; 👏&lt;br&gt;&lt;br&gt;Love that &lt;a href="https://twitter.com/CdkPatterns"&gt;@CdkPatterns&lt;/a&gt; made it to re:Invent! 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:05 PM - 08 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1336386323381440515" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1336386323381440515" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1336386323381440515" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Jason Fulghum at re:Invent&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTrQT41---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EplfqX8XcAEqqbZ.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jC53lrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1234119690236157955/iwxupGf0_normal.jpg" alt="Matt Coulter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matt Coulter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nideveloper"&gt;@nideveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I’m just catching up with some of the re:Invent talks, i’m up to “AWS CDK what’s new and what’s next”&lt;br&gt;&lt;br&gt;thanks &lt;a href="https://twitter.com/jason_fulghum"&gt;@jason_fulghum&lt;/a&gt; for mentioning my wee project &lt;a href="https://twitter.com/CdkPatterns"&gt;@CdkPatterns&lt;/a&gt; 🙌 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:09 AM - 19 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1340207549409349632" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1340207549409349632" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1340207549409349632" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h2&gt;

&lt;p&gt;In December 2020 I gave this presentation showing the social media growth and repo stars trend&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tiSb0f-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r3pvefeijejwta3efge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tiSb0f-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r3pvefeijejwta3efge.png" alt="social media"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ff2w5aaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3bn38emuw1oywv3p981.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ff2w5aaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3bn38emuw1oywv3p981.png" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As of April 2021, the CDK Patterns Twitter account has 2600 followers, the repo has over 1100 GitHub Stars, hundreds of visitors/clones per week. The interesting thing about monitoring the repo usage is that visitors are always higher than clones but that is because developers open the repo, find the few lines they need, copy it into their IDE and leave. Given my original mission was an education play this is the perfect balance that I always wanted. The YouTube channel has ~600 subscribers (I haven't put enough time into it to have serious growth)&lt;/p&gt;

&lt;p&gt;All of this led to me being announced as one of the first AWS DevTools Heroes (I can't embed any more tweets so the image will have to do with the link to the blog underneath)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rUqIlzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuo6sh9viut4zgcq20ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rUqIlzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuo6sh9viut4zgcq20ed.png" alt="Hero announcement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/meet-the-newest-aws-heroes-including-the-first-devtools-heroes/"&gt;Hero announcement blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-have-i-learned-in-no-particular-order"&gt;
  &lt;/a&gt;
  What Have I Learned? (In no particular order)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The AWS Community are awesome! So many welcoming people willing to just pitch in and help&lt;/li&gt;
&lt;li&gt;Don't underestimate the amount of time you will spend doing marketing vs coding if you build a product&lt;/li&gt;
&lt;li&gt;Developers genuinely love AWS CDK&lt;/li&gt;
&lt;li&gt;Organising a conference is a serious amount of work, even virtually. It only works when you can pull together an awesome team of volunteers&lt;/li&gt;
&lt;li&gt;Managing Pull Requests and maintaining an open source repo is basically a full time job&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-get-more-involved"&gt;
  &lt;/a&gt;
  How Can You Get More Involved?
&lt;/h2&gt;

&lt;p&gt;If you are excited about everything you have read and serverless architectures deployed through AWS CDK then you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://www.twitter.com/cdkpatterns"&gt;@CdkPatterns&lt;/a&gt; on Twitter&lt;/li&gt;
&lt;li&gt;Sign up for and share &lt;a href="https://www.cdkday.com"&gt;CDK Day&lt;/a&gt; with everyone you know&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="https://join.slack.com/t/cdk-dev/shared_invite/zt-mso6p56d-qJp7SOTBvMaQuDrx7R2wHg"&gt;cdk.dev&lt;/a&gt; slack&lt;/li&gt;
&lt;li&gt;Open a Pull Request with a new CDK Pattern on &lt;a href="https://www.cdkpatterns.com"&gt;cdkpatterns.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>community</category>
      <category>career</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Creating {legacy} static build via docker and deploying with mina-scp</title>
      <author>Pramod Shinde</author>
      <pubDate>Thu, 15 Apr 2021 16:03:16 +0000</pubDate>
      <link>https://dev.to/pramodshinde7/creating-legacy-static-build-via-docker-and-deploying-with-mina-scp-3hde</link>
      <guid>https://dev.to/pramodshinde7/creating-legacy-static-build-via-docker-and-deploying-with-mina-scp-3hde</guid>
      <description>&lt;p&gt;I am sure! Many of our applications have turned into a legacy codebase, such applications might have some outdated scripts or build process that might need frequent maintenance and updates. &lt;/p&gt;

&lt;p&gt;In this post, I will walk you through the steps with which we can move our frontend build creation script into the docker container and deploy through &lt;a href="http://nadarei.co/mina/"&gt;mina&lt;/a&gt; and &lt;a href="https://github.com/adie/mina-scp"&gt;mian-scp&lt;/a&gt; gems seamlessly. &lt;/p&gt;

&lt;p&gt;Even if your code is not a legacy codebase it is always better to build your application into a docker container because &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to create build in a production like environments &lt;/li&gt;
&lt;li&gt;If you want to do a production system upgrades, it's lot more easier to test build creation in docker containers in advance &lt;/li&gt;
&lt;li&gt;Avoid any package missing or mis-match issues at runtime, specially on older node versions &amp;lt; 6.x.x. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#brief-background"&gt;
  &lt;/a&gt;
  Brief background
&lt;/h2&gt;

&lt;p&gt;I had a &lt;code&gt;angular 1.x&lt;/code&gt; application running with node 6.x.x, things were all good until we noticed following&lt;br&gt;
 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First issue was previously on servers node-modules and bower packages were moved on servers manually&lt;/li&gt;
&lt;li&gt;We were having two(production/staging) servers with different node &lt;code&gt;5.x.x&lt;/code&gt; and &lt;code&gt;6.x.x&lt;/code&gt; setup receptively. &lt;/li&gt;
&lt;li&gt;In older &lt;code&gt;node &amp;lt;= 5.x.x&lt;/code&gt;, &lt;code&gt;npm install&lt;/code&gt; does not support &lt;code&gt;package.json&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Package addition and updates were a nightmare&lt;/li&gt;
&lt;li&gt;We were frequently facing package related issues because of lack of proper &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We resolved all above issues one by one after deciding to fix the node version and upgraded to version &lt;code&gt;6.x.x&lt;/code&gt; and moved the build creation process into a docker container to have a standard build creation and deployment process.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-build-in-docker-container-via-docker-compose"&gt;
  &lt;/a&gt;
  Creating a build in docker container via docker compose
&lt;/h2&gt;

&lt;p&gt;If you are new to docker and docker-compose, I would advise you to get your hands dirty in docker concepts by referring it &lt;a href="https://www.docker.com/"&gt;here&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/strong&gt;: In this file we are only specifying required ubuntu, node, npm and yarn versions that are required for application and before that we are installing few dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ubuntu:18.04
SHELL ["/bin/bash", "-l", "-c"]

RUN mkdir /usr/local/nvm
ENV NVM_DIR /usr/local/nvm
ENV NODE_VERSION 6.13.0
ENV NVM_INSTALL_PATH $NVM_DIR/versions/node/v$NODE_VERSION

# install ubuntu related dependencies
RUN apt-get update -q &amp;amp;&amp;amp; \
    apt-get install -qy curl ca-certificates gnupg2 build-essential --no-install-recommends &amp;amp;&amp;amp; apt-get clean
RUN apt-get install -y git zip

# install nvm
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash

# install node version 6.13.0
RUN source $NVM_DIR/nvm.sh \
    &amp;amp;&amp;amp; nvm install $NODE_VERSION \
    &amp;amp;&amp;amp; nvm alias default $NODE_VERSION \
    &amp;amp;&amp;amp; nvm use default

WORKDIR /usr/bullet

# copy dependencies json file to docker container
COPY package.json $WORKDIR
COPY yarn.lock $WORKDIR
COPY bower.json $WORKDIR

# install package manager
RUN source $NVM_DIR/nvm.sh &amp;amp;&amp;amp; npm install -g yarn@1.17.0
RUN source $NVM_DIR/nvm.sh &amp;amp;&amp;amp; npm install -g bower@1.8.0

RUN source $NVM_DIR/nvm.sh &amp;amp;&amp;amp; npm install -g gulp@3.9.1

RUN source $NVM_DIR/nvm.sh &amp;amp;&amp;amp; yarn install --quiet
RUN source $NVM_DIR/nvm.sh &amp;amp;&amp;amp; bower install --quiet --allow-root

COPY . $WORKDIR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the dockerfile is ready we can use this in docker-compose with following docker-compose.yml file to create multiple services&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  docker-compose.yml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3.4'

services:  
  frontend-app: &amp;amp;frontend-app
    build:
      context: .
      dockerfile: ./Dockerfile
    image: my-frontend-app:0.0.1
    volumes:
      - ./:/usr/frontend-app/
      - ./static_build:/usr/frontend-app/static_build
      - nodemodules:/usr/frontend-app/node_modules  
      - bowercomponents:/usr/frontend-app/bower_components
  start:
    &amp;lt;&amp;lt;: *frontend-app   
    ports:
      - '8000:8000'
    command: bash -c "source /usr/local/nvm/nvm.sh &amp;amp;&amp;amp; gulp dev"

  create_build:
    &amp;lt;&amp;lt;: *frontend-app 
    command: bash -c "source /usr/local/nvm/nvm.sh &amp;amp;&amp;amp; gulp prod &amp;amp;&amp;amp; rm -f static_build/build.zip &amp;amp;&amp;amp; zip -rq static_build/build.zip build/"

volumes: 
  nodemodules: {}
  bowercomponents: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In docker-compose file we are creating &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;create_build&lt;/code&gt; services, &lt;code&gt;start&lt;/code&gt; is to start the application inside the docker container with following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Running build on port 8080
source /usr/local/nvm/nvm.sh &amp;amp;&amp;amp; gulp dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;create_build&lt;/code&gt; is to create and compress a build with following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Creating prod build, removing old build and creating new build
source /usr/local/nvm/nvm.sh &amp;amp;&amp;amp; gulp prod &amp;amp;&amp;amp; rm -f static_build/build.zip &amp;amp;&amp;amp; zip -rq static_build/build.zip build/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Important to note that we have created shared volumes and folders between host and container, So that we can have &lt;code&gt;build.zip&lt;/code&gt; to be created on host and node modules can be shared across the builds if no changes to package.json  &lt;/p&gt;

&lt;p&gt;Once above setup is done we can easily create or start the build using following commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Starting a build
docker-compose up start
#Creating a build
docker-compose up create_build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After above setup is verified we can deploy this build via mina and mina-scp gem as following&lt;/p&gt;

&lt;p&gt;Note: Hope you have done basic setup which is needed for mina deployment.(Let me know if you need any help!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-static-build-to-servers"&gt;
  &lt;/a&gt;
  Deploying static build to servers
&lt;/h2&gt;

&lt;p&gt;Following is the sample mina deployment script which is copying and zipping build to the server. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configdeployrb"&gt;
  &lt;/a&gt;
  config/deploy.rb
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Mina, version v0.3.8
require 'mina/scp'

# Basic settings like branch, server repo settings goes here
# set :branch, staging
# gem install mina -v 0.3.8 (you can use latest mina version)
# gem install mina-scp -v 0.1.2

# Put any custom mkdir's in here for when `mina setup` is ran.
# all releases.
task :setup =&amp;gt; :environment do
end

desc "create a build on the local"
task :create_build =&amp;gt; :environment do
  to :before_hook do
    # Put things to run locally before ssh
    queue! %[echo "-----&amp;gt; creating static build..."]
    queue! %[sudo docker-compose up create_build]
  end
end

desc "Deploys the current version to the server."
task :deploy =&amp;gt; :environment do

  deploy do
    # Put things that will set up an empty directory into a fully set-up
    # instance of your project.
    invoke :'deploy:link_shared_paths'
    queue! %[echo "-----&amp;gt; uploading build domain: #{domain} branch: #{branch}, deploy_to: #{deploy_to}"]
    scp_upload('./static_build/build.zip', "#{deploy_to}/build.zip", verbose: true) 
    invoke :'deploy:cleanup'

    to :launch do
      queue "echo '-----&amp;gt; Unziping build...'"
      queue "cp #{deploy_to}/build.zip #{deploy_to}/current/build.zip" 
      queue "unzip -q #{deploy_to}/current/build.zip"
      queue "echo '-----&amp;gt; Unzip completed'"
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are creating and deploying build via&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mina create_build
mina deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have noticed we are copying build &lt;code&gt;./static_build/build.zip&lt;/code&gt; created in docker via mina-scp's &lt;code&gt;scp_upload&lt;/code&gt; command and unzipping in deploy task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scp_upload('./static_build/build.zip', "#{deploy_to}/build.zip", verbose: true)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, We have successfully created and deployed static build with the help of docker and mina. If you have reached here and have any suggestions or thoughts let me know in comments section. &lt;/p&gt;

</description>
      <category>rails</category>
      <category>docker</category>
      <category>angular</category>
      <category>deployment</category>
    </item>
    <item>
      <title>Using the react-native-push-notification library for your React Native notification needs</title>
      <author>kevbosaurus</author>
      <pubDate>Thu, 15 Apr 2021 16:02:37 +0000</pubDate>
      <link>https://dev.to/retool/using-the-react-native-push-notification-library-for-your-react-native-notification-needs-3a54</link>
      <guid>https://dev.to/retool/using-the-react-native-push-notification-library-for-your-react-native-notification-needs-3a54</guid>
      <description>&lt;p&gt;Notifications are critical to the mobile experience. Not only are notifications an important way to interact with your users, but they also serve to grow &lt;a href="https://airship.medium.com/7-mobile-engagement-statistics-that-show-push-notification-roi-f664409943a2"&gt;user engagement and retention&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But notifications on a mobile platform can get complicated. In addition to “local” or “in app” notifications that you might want to display while the user is actively using your application, you might want to also use “push” notifications that bring users back when they aren’t using your application. &lt;/p&gt;

&lt;p&gt;To make matters more complicated, the mechanisms for providing push notifications on Android and iOS devices are different. If you have simple notification needs, a notification library may not be necessary. However, the more complicated your notification needs, the more useful a library becomes to help manage them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are a number of React Native notification libraries to choose from, and this post will spotlight one of the leading options: react-native-push-notification.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-reactnativepushnotification-is-a-popular-react-native-notification-library"&gt;
  &lt;/a&gt;
  Why react-native-push-notification is a popular React Native notification library
&lt;/h2&gt;

&lt;p&gt;To start, the react-native-push-notification library supports local and push notifications, and uses a platform-independent approach to adding new features. This can be a huge advantage for developers who want speed to value now and flexibility for their future notification needs.&lt;/p&gt;

&lt;p&gt;Given that react-native-push-notification is the most popular library, you can expect more complete documentation and helpful resources as you explore how to solve problems with a quick web search. &lt;/p&gt;

&lt;p&gt;Although there are plenty of choices when it comes to third party React Native notification libraries (or even building your own), react-native-push-notification is a top option thanks to its popularity, support of both mobile platforms and notification types, many features, and a wealth of available documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-consider-before-building-notifications-from-scratch-or-choosing-a-library"&gt;
  &lt;/a&gt;
  What to consider before building notifications from scratch or choosing a library
&lt;/h2&gt;

&lt;p&gt;If you were sure you only needed a particular type of notification on a particular platform, it might make sense to create your own solution from scratch. Even in that case though, using a proven library allows you to save time by not replicating somebody else’s work. And since your application’s needs may change over time, it may be worth using a library that supports many notification types across many platforms, even if you don’t initially need to.&lt;/p&gt;

&lt;p&gt;The APIs for sending local and push notifications are different, and to make things spicier, the APIs for doing both for Android and iOS are different, too. In addition, there are multiple mechanisms for sending push notifications. Since a library already exists to deal with all of these issues, in most cases, it makes sense to use a library rather than create your own solution.&lt;/p&gt;

&lt;p&gt;When selecting which library to use to address a particular need, an easy way to start is to explore the most popular solution available. When a library is popular, that means many of those users already researched other possible solutions for the problem you’re trying to solve and decided on that library (the react-native-push-notification library, in this case). And the more popular a library is, the better it tends to be supported and the better its documentation.&lt;/p&gt;

&lt;p&gt;It can sometimes be difficult to gauge how popular something is, but React libraries are downloaded from official repositories, and the download statistics are publicly available. Developers can also explicitly rate a library via stars if they like it, and those statistics are also publicly available. &lt;/p&gt;

&lt;p&gt;Specifically, react-native-push-notification has over 5,600 stars, while the closest competitor (&lt;a href="https://github.com/wix/react-native-notifications"&gt;react-native-notifications&lt;/a&gt;) has less than half that number. The &lt;a href="https://www.npmtrends.com/react-native-push-notification-vs-react-native-onesignal-vs-react-native-root-toast-vs-react-native-notifications"&gt;raw report&lt;/a&gt; has more information, but as you can see from just the download statistics below, it is clear that react-native-push-notification is by far the most popular React Native notification library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAQRXqyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k2naanw2rlkdrqa2am9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAQRXqyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k2naanw2rlkdrqa2am9.png" alt="npmtrends"&gt;&lt;/a&gt;&lt;br&gt;
Source: &lt;a href="https://www.npmtrends.com/react-native-push-notification-vs-react-native-onesignal-vs-react-native-root-toast-vs-react-native-notifications"&gt;npmtrends&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main reason this library is so popular is that it presents a unified way to support both notification types on both platforms, but it is also chock full of features. These include scheduled notifications, as well as the ability to add custom badges and sounds.&lt;/p&gt;

&lt;p&gt;Even though using a library makes dealing with React Native notifications simpler, there is still a fair amount of complexity that needs to be worked through. This is mostly because the mechanisms for sending push notifications are profoundly different, which adds a thick layer of complexity to an already complex problem. &lt;/p&gt;

&lt;p&gt;On top of that, the way you register a device to receive notifications is vastly different between Android and iOS devices. So, documentation and support become even more important because of the inherent complexity that no library can completely eliminate. The &lt;a href="https://github.com/zo0r/react-native-push-notification"&gt;GitHub page&lt;/a&gt; for the react-native-push-notification library provides excellent support and documentation.&lt;/p&gt;

&lt;p&gt;You can also find more robust and helpful documentation to walk you through any issues you might encounter with the react-native-push-notification library. Some specific resources include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Main website&lt;/strong&gt;: &lt;a href="https://github.com/zo0r/react-native-push-notification"&gt;https://github.com/zo0r/react-native-push-notification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Push notification tutorial&lt;/strong&gt;: &lt;a href="https://blog.logrocket.com/how-to-create-and-send-push-notifications-in-react-native/"&gt;https://blog.logrocket.com/how-to-create-and-send-push-notifications-in-react-native/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Local notification tutorial&lt;/strong&gt;: &lt;a href="https://dev.to/adriantwarog/how-to-perform-local-push-notifications-on-react-native-without-remote-providers-like-firebase-or-onesignal-4034"&gt;https://dev.to/adriantwarog/how-to-perform-local-push-notifications-on-react-native-without-remote-providers-like-firebase-or-onesignal-4034&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Common mistakes&lt;/strong&gt;: &lt;a href="https://javascript.plainenglish.io/5-possible-reasons-your-notifications-are-not-working-react-native-d5c5a35ae3f"&gt;https://javascript.plainenglish.io/5-possible-reasons-your-notifications-are-not-working-react-native-d5c5a35ae3f&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;General support&lt;/strong&gt;: &lt;a href="https://stackoverflow.com/search?q=%22react-native-push-notification%22"&gt;https://stackoverflow.com/search?q=%22react-native-push-notification%22&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#honorable-mentions-for-react-native-notification-libraries"&gt;
  &lt;/a&gt;
  Honorable mentions for React Native notification libraries
&lt;/h2&gt;

&lt;p&gt;Even though react-notify-push-notification is the most popular option in most situations, there might be other situations where a different library may be a better fit. All of the options mentioned here also meet our criteria for being active and well supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactnativenotifications"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/wix/react-native-notifications"&gt;react-native-notifications&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This library is a close runner-up to react-notify-push-notification but offers fewer common features, is larger, and will take longer to load. Few common features mean there will be more code in your application doing roughly the same thing based on what platform the application is running on.&lt;/p&gt;

&lt;p&gt;A significant advantage of this library is that it is sponsored by a well established company (&lt;a href="https://www.wix.com/"&gt;Wix&lt;/a&gt;), which means it is highly likely to continue to be updated and supported in the future. Another advantage is that it has more platform-specific features (Android vs. iOS), so if you want to take full advantage of the notification features available for one or both platforms, then you might want to use this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactnativeonesignal"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/OneSignal/react-native-onesignal"&gt;react-native-onesignal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This library allows local notifications and push notifications via the &lt;a href="http://www.onesignal.com"&gt;OneSignal&lt;/a&gt; service. Because using OneSignal bypasses the normal push notification mechanisms, this library is much easier to use and much smaller. Using this library also provides for a unified notification system if you support more than one application or more than one mobile platform.&lt;/p&gt;

&lt;p&gt;The main disadvantage to using this library is that a OneSignal account is required, and while some limited functionality is free of charge, significant use of the service costs money. The pricing structure, &lt;a href="https://onesignal.com/pricing"&gt;available here&lt;/a&gt;, is fairly complicated, but the free option is really only useful for push notifications to mobile platforms. &lt;/p&gt;

&lt;p&gt;If you’re sure you will only ever need mobile push notifications or you are in a position to pay for the expected volume of notifications, then you might want to use this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactnativeroottoast"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/magicismight/react-native-root-toast"&gt;react-native-root-toast&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is a relatively easy-to-use library that allows only local “toast” notifications. Toast notifications are simple, allow no user interaction, and can be set to expire after being displayed for a certain amount of time.&lt;/p&gt;

&lt;p&gt;If you are sure you only need local notifications, then this library may be a better choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-time-to-stop-worryingstart-using-the-reactnativepushnotification-library-today"&gt;
  &lt;/a&gt;
  It’s time to stop worrying—start using the react-native-push-notification library today
&lt;/h2&gt;

&lt;p&gt;Notifications, and especially push notifications, can be a critical and differentiating part of your mobile app experience. There are some &lt;a href="https://www.braze.com/blog/push-notification-best-practices/"&gt;best practices&lt;/a&gt; to follow, but the main point is that the best notifications are timely, personal, and actionable.&lt;/p&gt;

&lt;p&gt;When done properly, notifications can &lt;a href="https://www.webiotic.com/benefits-of-push-notifications/"&gt;increase user satisfaction and retention&lt;/a&gt;, so it is definitely an advantage to implement notifications in your application. Unfortunately, React Native notifications are difficult and usually require you to use a library. &lt;/p&gt;

&lt;p&gt;For most situations, the library you want to use is react-native-push-notification. It supports both local and push notifications, both major platforms, is free to use, has many features, and is well-supported and documented.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Adapt your Angular apps for dual-screen devices with ngx-foldable</title>
      <author>Yohan Lasorsa</author>
      <pubDate>Thu, 15 Apr 2021 16:01:15 +0000</pubDate>
      <link>https://dev.to/angular/adapt-your-angular-apps-for-dual-screen-devices-with-ngx-foldable-4058</link>
      <guid>https://dev.to/angular/adapt-your-angular-apps-for-dual-screen-devices-with-ngx-foldable-4058</guid>
      <description>&lt;p&gt;Foldable and dual-screen devices are becoming increasingly more common over time, but you may wonder if investing development time to support these devices might be worth it, especially when creating fully responsive web apps is already a challenge. Using the new &lt;a href="https://devblogs.microsoft.com/surface-duo/dual-screen-web-experiences-preview/?WT.mc_id=javascript-12159-yolasors"&gt;CSS and JavaScript primitives&lt;/a&gt; is a fun way to discover and learn about the new possibilities offered by devices like the Surface Duo, yet you might be looking for a more efficient way to adapt existing apps without having to make drastic changes and dive too much into custom CSS. That's what we're going to explore here.&lt;/p&gt;

&lt;p&gt;In this post we'll take a look at how you can use &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; to create a foldable web experience, with minimal changes to an existing code base. We'll start from the &lt;a href="https://github.com/foldable-devices/demos/tree/master/photo-gallery"&gt;photo gallery demo&lt;/a&gt;, create an Angular version of it and then see how using an Angular library makes the foldable adaptation way easier to approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TncXcz_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/angular/ngx-foldable/assets/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TncXcz_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/angular/ngx-foldable/assets/demo.gif" alt="Demonstration of the demo we'll build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr-key-takeaway"&gt;
  &lt;/a&gt;
  TL;DR key takeaway
&lt;/h2&gt;

&lt;p&gt;Adapting existing apps to foldable devices does not mean that you have to rethink your design and code entirely. With &lt;a href="https://github.com/sinedied/ngx-foldable"&gt;ngx-foldable&lt;/a&gt; library you can adapt existing Angular apps to support dual-screen devices with minimal changes to your app (and no CSS!). &lt;a href="https://github.com/aaronpowell/react-foldable"&gt;react-foldable&lt;/a&gt; is also an alternative if you're working with React, and I'm sure that similar libraries will eventually become available for other frameworks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recreating-the-photo-gallery-demo-with-angular"&gt;
  &lt;/a&gt;
  Re-creating the Photo Gallery demo with Angular
&lt;/h2&gt;

&lt;p&gt;I wanted to keep the demo app as simple as possible to understand, so I used the &lt;a href="https://cli.angular.io/"&gt;Angular CLI&lt;/a&gt; to generate the project using the minimal template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng new photo-gallery &lt;span class="nt"&gt;--minimal&lt;/span&gt; &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pg &lt;span class="nt"&gt;--style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;css &lt;span class="nt"&gt;--routing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="nt"&gt;--strict&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gives us a nice working base with &lt;a href="https://www.typescriptlang.org/tsconfig#strict"&gt;strict type checking&lt;/a&gt; and single file components, which looked perfect for building this demo. I won't cover here all the details about what I did to recreate the demo, as I mostly took the existing JavaScript and CSS code from the original photo gallery app and put it in Angular components.&lt;/p&gt;

&lt;p&gt;You can find the complete application &lt;a href="https://github.com/sinedied/surface-duo-photo-gallery"&gt;source code on GitHub&lt;/a&gt;, but let's have a closer look at the most interesting parts here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#app-component"&gt;
  &lt;/a&gt;
  App component
&lt;/h1&gt;

&lt;p&gt;The file &lt;code&gt;app.component.ts&lt;/code&gt; is the root component of our application. It contains the state, as which image is currently selected, and all the components composing our app. By looking at its template you can glimpse at how our appplication works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pg-gallery&lt;/span&gt; &lt;span class="na"&gt;[images]=&lt;/span&gt;&lt;span class="s"&gt;"images"&lt;/span&gt; &lt;span class="na"&gt;(select)=&lt;/span&gt;&lt;span class="s"&gt;"setImage($event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pg-gallery&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pg-fold&amp;gt;&amp;lt;/pg-fold&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pg-details&lt;/span&gt; &lt;span class="na"&gt;[image]=&lt;/span&gt;&lt;span class="s"&gt;"currentImage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pg-details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pg-fullview&lt;/span&gt;
  &lt;span class="na"&gt;[image]=&lt;/span&gt;&lt;span class="s"&gt;"currentImage"&lt;/span&gt;
  &lt;span class="na"&gt;(close)=&lt;/span&gt;&lt;span class="s"&gt;"closeImage()"&lt;/span&gt;
  &lt;span class="na"&gt;(previous)=&lt;/span&gt;&lt;span class="s"&gt;"previousImage($event)"&lt;/span&gt;
  &lt;span class="na"&gt;(next)=&lt;/span&gt;&lt;span class="s"&gt;"nextImage($event)"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pg-fullview&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From there you can see that our app is made of 4 main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Gallery&lt;/strong&gt;: a scrollable list of thumbnails&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fold&lt;/strong&gt;: a placeholder for the space taken by the fold area on dual-screen devices&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Details&lt;/strong&gt;: show the zoomed in version of the selected image with its description on dual-screen devices&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fullview&lt;/strong&gt;: show the selected image in full screen on single-screen devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;App&lt;/strong&gt; component also includes some styling to lay out these components depending of the device configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screen-spanning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;single-fold-vertical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screen-spanning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;single-fold-horizontal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column-reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screen-spanning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're using specific media queries to adapt the layout on a dual-screen configuration. You'll see these media queries also used in the other components to hide or show them and adapt their design for every configuration, so let's have a closer look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fold-details-and-fullview-components"&gt;
  &lt;/a&gt;
  Fold, Details and Fullview components
&lt;/h2&gt;

&lt;p&gt;These three components are used to display differens things depending on what device it's running on. The &lt;strong&gt;Fullscreen&lt;/strong&gt; component is used only on single-screen devices, whereas the &lt;strong&gt;Fold&lt;/strong&gt; and &lt;strong&gt;Details&lt;/strong&gt; components are used on dual-screen devices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pg-fold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div class="fold"&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`
      .fold {
        height: 0;
        width: 0;
        background-size: 40px 40px;
        background-color: #737373;
        background-image: linear-gradient(
          45deg,
          rgba(255, 255, 255, 0.2) 25%,
          transparent 25%,
          transparent 50%,
          rgba(255, 255, 255, 0.2) 50%,
          rgba(255, 255, 255, 0.2) 75%,
          transparent 75%,
          transparent
        );
      }

      @media (screen-spanning: single-fold-vertical) {
        .fold {
          height: env(fold-height);
          width: env(fold-width);
        }
      }

      @media (screen-spanning: single-fold-horizontal) {
        .fold {
          height: env(fold-height);
          width: env(fold-width);
        }
      }
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FoldComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see here that by default the &lt;strong&gt;Fold&lt;/strong&gt; component is hidden (height and width set to 0) and it's made visible with different sizes when a dual-screen device is used. The &lt;strong&gt;Details&lt;/strong&gt; component uses a similar approach. The &lt;strong&gt;Fullview&lt;/strong&gt; component does the opposite by hiding itself when a dual-screen device is detected, with this media query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screen-spanning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;single-fold-horizontal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screen-spanning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;single-fold-vertical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, we've covered the main principles behind the orginal photo gallery adaptation. You can see the full source code for this version &lt;a href="https://github.com/sinedied/surface-duo-photo-gallery/tree/css"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But we've not really made good usage of Angular features here, as we are including all components whether they're needed or not, and use CSS to show or hide them. We also had to use extra CSS with specific media queries, meaning more work was needed to make this demo. It might not be an issue here as our demo remains quite simple, but in more complex applications, this could result in reduced performance due to unnecessary component rendering, and maintenance issues due to the scattered CSS approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-ngxfoldable"&gt;
  &lt;/a&gt;
  Introducing ngx-foldable
&lt;/h2&gt;

&lt;p&gt;The Angular library &lt;a href="https://www.npmjs.com/package/ngx-foldable"&gt;ngx-foldable&lt;/a&gt; was specifically designed to allow adapting Angular applications while making minimal changes to your code. It provides directives and services to access the screen context information and react to changes automatically.&lt;/p&gt;

&lt;p&gt;We install it with &lt;code&gt;npm install ngx-foldable&lt;/code&gt; and then import the &lt;code&gt;FoldableModule&lt;/code&gt; into our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FoldableModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngx-foldable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;FoldableModule&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#revisiting-the-app-component"&gt;
  &lt;/a&gt;
  Revisiting the App component
&lt;/h2&gt;

&lt;p&gt;With the library set up, we can now use the provided &lt;code&gt;fdSplitLayout&lt;/code&gt;, &lt;code&gt;fdWindow&lt;/code&gt; and &lt;code&gt;fdIfSpan&lt;/code&gt; directives to rebuild our App component template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;fdSplitLayout=&lt;/span&gt;&lt;span class="s"&gt;"flex reverse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pg-gallery&lt;/span&gt; &lt;span class="na"&gt;fdWindow=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;[images]=&lt;/span&gt;&lt;span class="s"&gt;"images"&lt;/span&gt; &lt;span class="na"&gt;(select)=&lt;/span&gt;&lt;span class="s"&gt;"setImage($event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pg-gallery&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pg-details&lt;/span&gt; &lt;span class="na"&gt;fdWindow=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;*fdIfSpan=&lt;/span&gt;&lt;span class="s"&gt;"'multi'"&lt;/span&gt; &lt;span class="na"&gt;[image]=&lt;/span&gt;&lt;span class="s"&gt;"currentImage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pg-details&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pg-fullview&lt;/span&gt;
    &lt;span class="na"&gt;*fdIfSpan=&lt;/span&gt;&lt;span class="s"&gt;"'none'"&lt;/span&gt;
    &lt;span class="na"&gt;[image]=&lt;/span&gt;&lt;span class="s"&gt;"currentImage"&lt;/span&gt;
    &lt;span class="na"&gt;(close)=&lt;/span&gt;&lt;span class="s"&gt;"closeImage()"&lt;/span&gt;
    &lt;span class="na"&gt;(previous)=&lt;/span&gt;&lt;span class="s"&gt;"previousImage($event)"&lt;/span&gt;
    &lt;span class="na"&gt;(next)=&lt;/span&gt;&lt;span class="s"&gt;"nextImage($event)"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&amp;lt;/pg-fullview&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, you'll notice that we added a top &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; container with the directive &lt;code&gt;fdSplitLayout&lt;/code&gt;. This directive enables us to build a split layout on dual-screen devices without the need for extra CSS. The first parameter allow to choose which kind of CSS layout you want to use, so we're using &lt;code&gt;flex&lt;/code&gt; here.  Other possible options are &lt;code&gt;grid&lt;/code&gt; or &lt;code&gt;absolute&lt;/code&gt;, to better fit your existing app layout. The second parameter allows you to choose whether you want to &lt;code&gt;reverse&lt;/code&gt; the window segments order when the spanning (ie the orientation) changes, or keep the &lt;code&gt;normal&lt;/code&gt; order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_T50DA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/angular/ngx-foldable/assets/splitview-window-order-schema.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_T50DA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/angular/ngx-foldable/assets/splitview-window-order-schema.png" alt="Illustration of impact of window order values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next you'll notice that we added the &lt;code&gt;fdWindow&lt;/code&gt; directive to the &lt;strong&gt;Gallery&lt;/strong&gt; and &lt;strong&gt;Details&lt;/strong&gt; components. This one allows you to assign a particular component to a window segment in dual-screen mode, and works only within a &lt;code&gt;fdSplitLayout&lt;/code&gt; container element.&lt;/p&gt;

&lt;p&gt;The best part of the &lt;code&gt;fdSplitLayout&lt;/code&gt; and &lt;code&gt;fdWindow&lt;/code&gt; directives are that they're only activated on dual-screen devices, so absolutely no CSS is added when the app is running on a single screen device.&lt;/p&gt;

&lt;p&gt;Notice that we also got rid of the &lt;strong&gt;Fold&lt;/strong&gt; component, as it's no longer needed.&lt;/p&gt;

&lt;p&gt;Finally, we used the &lt;code&gt;fdIfSpan&lt;/code&gt; structural directive to show/hide the &lt;strong&gt;Details&lt;/strong&gt; and &lt;strong&gt;Fullview&lt;/strong&gt; components depending on the context. This directive works the same as &lt;a href="https://angular.io/api/common/NgIf"&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, except that it's wired to pre-defined conditions related to the current screen context.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*fdIfSpan="'multi'"&lt;/code&gt; means that the &lt;strong&gt;Details&lt;/strong&gt; component will only be attached to the DOM in a multi-screen context, no matter what the orientation of the device is. The &lt;strong&gt;Fullview&lt;/strong&gt; component uses the opposite value &lt;code&gt;'none'&lt;/code&gt;, meaning that it will be present only on single-screen devices. Note that we could have also used the &lt;a href="https://angular.io/api/common/NgIf#showing-an-alternative-template-using-else"&gt;&lt;code&gt;else&lt;/code&gt;&lt;/a&gt; syntax, exactly like a regular &lt;code&gt;ngIf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Other possible conditions are &lt;code&gt;'fold-vertical'&lt;/code&gt; and &lt;code&gt;'fold-horizontal'&lt;/code&gt;, if you need to target a specific orientation.&lt;/p&gt;

&lt;p&gt;Using these three directives, we can now remove ALL the specific CSS related to single/dual screen adaptation. Yup, you read that right. With that, the new CSS for our App component simply becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Less code in the end, better performance and no need for specific CSS, sounds like a win here? 🙂&lt;/p&gt;

&lt;p&gt;You can see the final web app &lt;a href="https://sinedied.github.io/surface-duo-photo-gallery/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chiy4caX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/angular/ngx-foldable/assets/final-result-web.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chiy4caX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/angular/ngx-foldable/assets/final-result-web.png" alt="Screenshot of the final photo gallery app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h2&gt;

&lt;p&gt;We've seen how we can abstract the handling of device adaptation and provide a higher-level API using Angular. While it's always interesting to have a look at the &lt;a href="https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/Foldables/explainer.md#proposal-css-primitives-for-building-dual-screen-layouts"&gt;CSS primitives&lt;/a&gt; behind it, sometimes we just want a more straightforward way of achieving our intent. That's also why CSS libraries like &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; and &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; are so popular for quickly creating Responsive Designs.&lt;/p&gt;

&lt;p&gt;You can take a look at the app &lt;a href="https://github.com/sinedied/surface-duo-photo-gallery"&gt;final code&lt;/a&gt; and the details of &lt;a href="https://github.com/sinedied/surface-duo-photo-gallery/compare/css...main"&gt;the changes&lt;/a&gt; when using the ngx-foldable library.&lt;/p&gt;

&lt;p&gt;If you're curious, you can also dive into the code behind  &lt;a href="https://github.com/sinedied/ngx-foldable"&gt;ngx-foldable&lt;/a&gt; and see how it works. Contributions are welcomed too 😉.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/sinedied"&gt;Twitter&lt;/a&gt;, I would be happy to discuss and take your suggestions!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>angular</category>
    </item>
    <item>
      <title>Best email marketing software for developers</title>
      <author>GoOnlineTools</author>
      <pubDate>Thu, 15 Apr 2021 15:52:34 +0000</pubDate>
      <link>https://dev.to/goonlinetools/best-email-marketing-software-for-developers-391</link>
      <guid>https://dev.to/goonlinetools/best-email-marketing-software-for-developers-391</guid>
      <description>&lt;p&gt;We are using the email marketing tool for an email list of 1 Million Subscribers.&lt;/p&gt;

&lt;p&gt;So based on that I will suggest you the tool.&lt;/p&gt;

&lt;p&gt;Choosing the right email marketing service can have a significant impact on the success of your marketing campaign. It is one of the most cost-effective marketing strategies for small businesses.&lt;/p&gt;

&lt;p&gt;We choose an email marketing service that provides API access, transaction email, and marketing automation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sendinblue"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.sendinblue.com/?tap_a=30591-fb13f0&amp;amp;tap_s=1546108-984846"&gt;Sendinblue&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sendinblue.com/?tap_a=50906-4cb7cf&amp;amp;tap_s=1546108-984846" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icguYTNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.tapfiliate.com/5cf83d25b387f.png%3Fa%3D50906-4cb7cf%26s%3D1546108-984846"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SendInBlue is a very good email marketing automation tool. If you look for cheap email marketing, CRM, SMS, transactional email tool, SIB is highly recommended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features of Sendinblue:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Email Builder&lt;/strong&gt; – Send beautifully-designed emails with SendinBlue’s drag-and-drop email builder. Pre-made email templates are also available.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Forms &amp;amp; Landing Pages&lt;/strong&gt; – Customize your contact forms to suit your brand and audience, and grow your email list with landing pages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unlimited Subscribers&lt;/strong&gt; – Grow your email list with few restrictions as this service’s plans are based on the number of emails you send per month.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subscriber Management&lt;/strong&gt; – Manage your subscribers with folders, lists and segmentation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SMS Messages&lt;/strong&gt; – Reach your customers beyond email by allowing them to opt-in to receiving SMS messages from you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automations&lt;/strong&gt; – Optimize your campaigns by targeting subscribers based on their actions with marketing automations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A/B Testing&lt;/strong&gt;: A/B testing your marketing optins is one of the best ways to boost subscribers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Transactional Emails&lt;/strong&gt; – Send confirmation emails and notifications when a subscriber joins your list for the first time, when they purchase something from your store, when their order ships and more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reports, Data &amp;amp; Analytics&lt;/strong&gt; – Track and optimize your campaigns with reports and data on open rates, click-through rates, subscriber location, your subscribers’ most-used email platforms and more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improved Deliverability&lt;/strong&gt; – Ensure your emails reach your subscribers’ inboxes with real stats by using SendinBlue’s shared and dedicated IP tools and options as well as their integrated security tools.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integrations&lt;/strong&gt; – SendinBlue integrates with WordPress, WooCommerce, OptinMonster, Google Analytics, Shopify, Jimdo, Drupal, and more.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Explore more features of &lt;a href="https://www.sendinblue.com/features/?tap_a=30591-fb13f0&amp;amp;tap_s=1546108-984846"&gt;Sendinblue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We did not tried any other email marketing software because Sendinblue offers everything at less price as compared to the market.&lt;/p&gt;

&lt;p&gt;Let me know which tool you use for email marketing :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The definition and path to becoming a freelancer</title>
      <author>Lesly Villalobos</author>
      <pubDate>Thu, 15 Apr 2021 15:51:45 +0000</pubDate>
      <link>https://dev.to/lvtdeveloper/the-definition-and-path-to-becoming-a-freelancer-373f</link>
      <guid>https://dev.to/lvtdeveloper/the-definition-and-path-to-becoming-a-freelancer-373f</guid>
      <description>&lt;p&gt;Hi everyone, today I would like to talk about a topic you can relate to, which is the freelancer's journey. Let's start with the following question&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Is being a freelancer a lifestyle and at what point do you stop being a freelancer? &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;If we look up the definition of freelancer, it tells us that it is a person who works on his or her own account to provide services and get paid for it. . Under that definition I have this couple of questions that come to my mind &lt;/p&gt;

&lt;p&gt;&lt;b&gt;How profitable is it to be a freelancer all your life?&lt;br&gt;
What is the motivation that drives you to become a freelancer?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Many colleagues have the vision of the freelancer as the person who travels the world programming, others simply don´t want to have a boss who is giving them orders and others just want to earn more because they don´t have a company that takes a percentage of their profit, the reasons can be endless.&lt;/p&gt;

&lt;p&gt;I personally know people who have high earnings as freelancers, but I also know others who earn on average, the same as they would earn in a company, being this group the largest.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What is the biggest disadvantage of being a freelancer?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I think the main disadvantage of being a freelancer is that by depending on yourself, if something happens to you, you stop producing money, that is, you don´t have a backup team to support you and that sometimes tends to become a burden especially when there are people who depend on you economically. That would explain why most freelancers (statistically) are young and single people. So the question is&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Is being a freelancer a lifestyle or is it just a stepping stone to building your own business? &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I think it depends a lot on the perspective, motivation, and situation of each programmer, maybe there are some who would not change their freelancer status for more money or who look for a way to produce a lot of money, and there are others who dare to take that step to the next level by forming a working group or company, which leads to more management responsibility and less code.&lt;/p&gt;

&lt;p&gt;In your case, &lt;b&gt;what is your experience?&lt;/b&gt; I read you.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;br&gt;
Have a nice day, coders💜&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>career</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I built a cute e-shop entirely in Python</title>
      <author>Brooke Myers</author>
      <pubDate>Thu, 15 Apr 2021 15:43:54 +0000</pubDate>
      <link>https://dev.to/bcm628/i-built-a-cute-e-shop-entirely-in-python-28j0</link>
      <guid>https://dev.to/bcm628/i-built-a-cute-e-shop-entirely-in-python-28j0</guid>
      <description>&lt;p&gt;I'm pretty new to web development and am still learning HTML, CSS and JS. I work for &lt;a href="https://anvil.works?utm_source=crosspost:dev.to:/learn/examples/shop-template-guide"&gt;Anvil&lt;/a&gt;, a platform that allows you to build and deploy full-stack web apps with only Python. It's great for someone like me with an ML background and no web dev experience. &lt;/p&gt;

&lt;p&gt;I'm learning HTML and CSS by styling Anvil apps, so I built a fake online shop using Anvil and tried to make it as pretty as possible with my limited CSS knowledge. &lt;a href="https://shop-template.anvil.app/"&gt;Check it out&lt;/a&gt; and let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEjceZWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/learn/examples/shop-template/shop-template.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEjceZWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://anvil-website-static.s3.eu-west-2.amazonaws.com/learn/examples/shop-template/shop-template.gif" alt="GIF of shop app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-python-components"&gt;
  &lt;/a&gt;
  Styling Python Components
&lt;/h2&gt;

&lt;p&gt;Anvil is a &lt;a href="https://anvil.works/articles/drag-and-drop-builder?utm_source=crosspost:dev.to:/learn/examples/shop-template-guide"&gt;drag-and-drop&lt;/a&gt; web app builder where every UI component is a Python object. I styled some of these components with CSS by applying a &lt;a href="https://anvil.works/docs/client/themes-and-styling?utm_source=crosspost:dev.to:/learn/examples/shop-template-guide"&gt;role&lt;/a&gt; to them.&lt;/p&gt;

&lt;p&gt;For example, the header images in the app are ColumnPanels styled with a CSS role.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.anvil-role-header-photo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(_/theme/header.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TextBoxes and TextAreas have a solid blue border and items in the Cart have a top and bottom border added. &lt;/p&gt;

&lt;p&gt;But for someone who has little experience with CSS, it wasn't too difficult to make an Anvil app look unique!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builtin-integrations"&gt;
  &lt;/a&gt;
  Built-in Integrations
&lt;/h2&gt;

&lt;p&gt;Purchases in my app are made through &lt;a href="https://anvil.works/docs/integrations/stripe?utm_source=crosspost:dev.to:/learn/examples/shop-template-guide"&gt;Stripe&lt;/a&gt; which is already integrated in Anvil, so I didn't have to do much work there. I just added this to my client-side Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subtotal&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"USD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="n"&gt;shipping_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Cupcakes &amp;amp; Co."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                      &lt;span class="n"&gt;icon_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_/theme/cupcake_logo.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://anvil.works/docs/client/components/maps?utm_source=crosspost:dev.to:/learn/examples/shop-template-guide"&gt;Google services&lt;/a&gt; are also already built-in to Anvil, so I added a Google map to the Contact page with a marker to match the theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuE-XL0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/examples/img/shop-template/contact.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuE-XL0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://anvil.works/learn/examples/img/shop-template/contact.png" alt="Image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;40.7128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;74.0060&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zoom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
    &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_/theme/maps-icon.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DROP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;40.7128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;74.0060&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                              &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check out the source code &lt;a href="https://anvil.works/build#clone:SYHHBAIJKDSXOWE2%3dMFCNC7A4KANXBHP7EK7G357W"&gt;here&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Biomedical text natural language processing (BioNLP) using scispaCy: NER and rule-based matching</title>
      <author>Guilherme Bauer-Negrini</author>
      <pubDate>Thu, 15 Apr 2021 15:40:55 +0000</pubDate>
      <link>https://dev.to/gbnegrini/biomedical-text-natural-language-processing-bionlp-using-scispacy-ner-and-rule-based-matching-504p</link>
      <guid>https://dev.to/gbnegrini/biomedical-text-natural-language-processing-bionlp-using-scispacy-ner-and-rule-based-matching-504p</guid>
      <description>&lt;p&gt;Biomedical text mining and natural language processing (BioNLP) is an interesting research domain that deals with processing data from journals, medical records, and other biomedical documents. Considering the availability of biomedical literature, there has been an increasing interest in extracting information, relationships, and insights from text data. However, the unstructured organization and the domain complexity of biomedical documents make these tasks hard. Fortunately, some cool NLP Python packages can help us with that! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://allenai.github.io/scispacy/"&gt;scispaCy&lt;/a&gt; is a Python package containing &lt;a href="https://spacy.io/"&gt;spaCy&lt;/a&gt; models for processing biomedical, scientific or clinical text. spaCy's most mindblowing features are neural network models for tagging, parsing, named entity recognition (NER), text classification, and more. Add scispaCy models on top of it and we can do all that in the biomedical domain!&lt;/p&gt;

&lt;p&gt;Here we are going to see how to use scispaCy &lt;strong&gt;NER models to identify drug and disease names mentioned in a medical transcription dataset&lt;/strong&gt;. Moreover, we are going to &lt;strong&gt;combine NER and rule-based matching to extract the drug names and dosages&lt;/strong&gt; reported in each transcription. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dataset"&gt;Dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#named-entity-recognition"&gt;Named entity recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rulebased-matching"&gt;Rule-based matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;li&gt;spacy&amp;gt;=3.0&lt;/li&gt;
&lt;li&gt;scispacy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can simply &lt;code&gt;pip install&lt;/code&gt; all of them.&lt;/p&gt;

&lt;p&gt;We also need to download and install the NER model from scispaCy. To install the &lt;code&gt;en_ner_bc5cdr_md&lt;/code&gt; model use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.4.0/en_ner_bc5cdr_md-0.4.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For updated versions or other models, please check &lt;a href="https://allenai.github.io/scispacy/"&gt;scispaCy page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dataset"&gt;
  &lt;/a&gt;
  Dataset
&lt;/h2&gt;

&lt;p&gt;Unstructured medical data, like medical transcriptions, are pretty hard to find. Here we are using a &lt;a href="https://www.kaggle.com/tboyle10/medicaltranscriptions"&gt;medical transcription dataset&lt;/a&gt; scraped from the &lt;a href="https://mtsamples.com/"&gt;MTSamples website&lt;/a&gt; by Tara Boyle and made available at Kaggle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;med_transcript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mtsamples.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;med_transcript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;med_transcript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;
Int64Index: 4999 entries, 0 to 4998
Data columns (total 5 columns):
 #   Column             Non-Null Count  Dtype 
---  ------             --------------  ----- 
 0   description        4999 non-null   object
 1   medical_specialty  4999 non-null   object
 2   sample_name        4999 non-null   object
 3   transcription      4966 non-null   object
 4   keywords           3931 non-null   object
dtypes: object(5)
memory usage: 234.3+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
      &lt;th&gt;medical_specialty&lt;/th&gt;
      &lt;th&gt;sample_name&lt;/th&gt;
      &lt;th&gt;transcription&lt;/th&gt;
      &lt;th&gt;keywords&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A 23-year-old white female presents with comp...&lt;/td&gt;
      &lt;td&gt;Allergy / Immunology&lt;/td&gt;
      &lt;td&gt;Allergic Rhinitis&lt;/td&gt;
      &lt;td&gt;SUBJECTIVE:,  This 23-year-old white female pr...&lt;/td&gt;
      &lt;td&gt;allergy / immunology, allergic rhinitis, aller...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Consult for laparoscopic gastric bypass.&lt;/td&gt;
      &lt;td&gt;Bariatrics&lt;/td&gt;
      &lt;td&gt;Laparoscopic Gastric Bypass Consult - 2&lt;/td&gt;
      &lt;td&gt;PAST MEDICAL HISTORY:, He has difficulty climb...&lt;/td&gt;
      &lt;td&gt;bariatrics, laparoscopic gastric bypass, weigh...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Consult for laparoscopic gastric bypass.&lt;/td&gt;
      &lt;td&gt;Bariatrics&lt;/td&gt;
      &lt;td&gt;Laparoscopic Gastric Bypass Consult - 1&lt;/td&gt;
      &lt;td&gt;HISTORY OF PRESENT ILLNESS: , I have seen ABC ...&lt;/td&gt;
      &lt;td&gt;bariatrics, laparoscopic gastric bypass, heart...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2-D M-Mode. Doppler.&lt;/td&gt;
      &lt;td&gt;Cardiovascular / Pulmonary&lt;/td&gt;
      &lt;td&gt;2-D Echocardiogram - 1&lt;/td&gt;
      &lt;td&gt;2-D M-MODE: , ,1.  Left atrial enlargement wit...&lt;/td&gt;
      &lt;td&gt;cardiovascular / pulmonary, 2-d m-mode, dopple...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2-D Echocardiogram&lt;/td&gt;
      &lt;td&gt;Cardiovascular / Pulmonary&lt;/td&gt;
      &lt;td&gt;2-D Echocardiogram - 2&lt;/td&gt;
      &lt;td&gt;1.  The left ventricular cavity size and wall ...&lt;/td&gt;
      &lt;td&gt;cardiovascular / pulmonary, 2-d, doppler, echo...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The dataset has almost 5000 records, but let's work with a small random subsample so it doesn't take too long to process. We also have to drop any rows whose transcriptions are missing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;med_transcript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'transcription'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;med_transcript_small&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;med_transcript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;med_transcript_small&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;med_transcript_small&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;
Int64Index: 100 entries, 3162 to 3581
Data columns (total 5 columns):
 #   Column             Non-Null Count  Dtype 
---  ------             --------------  ----- 
 0   description        100 non-null    object
 1   medical_specialty  100 non-null    object
 2   sample_name        100 non-null    object
 3   transcription      100 non-null    object
 4   keywords           78 non-null     object
dtypes: object(5)
memory usage: 4.7+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
      &lt;th&gt;medical_specialty&lt;/th&gt;
      &lt;th&gt;sample_name&lt;/th&gt;
      &lt;th&gt;transcription&lt;/th&gt;
      &lt;th&gt;keywords&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;3162&lt;/th&gt;
      &lt;td&gt;Markedly elevated PT INR despite stopping Cou...&lt;/td&gt;
      &lt;td&gt;Hematology - Oncology&lt;/td&gt;
      &lt;td&gt;Hematology Consult - 1&lt;/td&gt;
      &lt;td&gt;HISTORY OF PRESENT ILLNESS:,  The patient is w...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1981&lt;/th&gt;
      &lt;td&gt;Intercostal block from fourth to tenth interc...&lt;/td&gt;
      &lt;td&gt;Pain Management&lt;/td&gt;
      &lt;td&gt;Intercostal block - 1&lt;/td&gt;
      &lt;td&gt;PREPROCEDURE DIAGNOSIS:,  Chest pain secondary...&lt;/td&gt;
      &lt;td&gt;pain management, xylocaine, marcaine, intercos...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1361&lt;/th&gt;
      &lt;td&gt;The patient is a 65-year-old female who under...&lt;/td&gt;
      &lt;td&gt;SOAP / Chart / Progress Notes&lt;/td&gt;
      &lt;td&gt;Lobectomy - Followup&lt;/td&gt;
      &lt;td&gt;HISTORY OF PRESENT ILLNESS: , The patient is a...&lt;/td&gt;
      &lt;td&gt;soap / chart / progress notes, non-small cell ...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3008&lt;/th&gt;
      &lt;td&gt;Construction of right upper arm hemodialysis ...&lt;/td&gt;
      &lt;td&gt;Nephrology&lt;/td&gt;
      &lt;td&gt;Hemodialysis Fistula Construction&lt;/td&gt;
      &lt;td&gt;PREOPERATIVE DIAGNOSIS: , End-stage renal dise...&lt;/td&gt;
      &lt;td&gt;nephrology, end-stage renal disease, av dialys...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4943&lt;/th&gt;
      &lt;td&gt;Bronchoscopy with brush biopsies.  Persistent...&lt;/td&gt;
      &lt;td&gt;Cardiovascular / Pulmonary&lt;/td&gt;
      &lt;td&gt;Bronchoscopy - 8&lt;/td&gt;
      &lt;td&gt;PREOPERATIVE DIAGNOSIS: , Persistent pneumonia...&lt;/td&gt;
      &lt;td&gt;cardiovascular / pulmonary, persistent pneumon...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let's take one transcription to see how we can work with NER:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sample_transcription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;med_transcript_small&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'transcription'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample_transcription&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# prints just the first 1000 characters
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HISTORY OF PRESENT ILLNESS:,  The patient is well known to me for a history of iron-deficiency anemia due to chronic blood loss from colitis.  We corrected her hematocrit last year with intravenous (IV) iron.  Ultimately, she had a total proctocolectomy done on 03/14/2007 to treat her colitis.  Her course has been very complicated since then with needing multiple surgeries for removal of hematoma.  This is partly because she was on anticoagulation for a right arm deep venous thrombosis (DVT) she had early this year, complicated by septic phlebitis.,Chart was reviewed, and I will not reiterate her complex history.,I am asked to see the patient again because of concerns for coagulopathy.,She had surgery again last month to evacuate a pelvic hematoma, and was found to have vancomycin resistant enterococcus, for which she is on multiple antibiotics and followed by infectious disease now.,She is on total parenteral nutrition (TPN) as well.,LABORATORY DATA:,  Labs today showed a white blood 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So, we can see a lot of entities in this transcription. There are drug, disease, and exam names for example.&lt;br&gt;
The text was scraped from a web page and we can identify the different sections from the medical record like "HISTORY OF PRESENT ILLNESS" and "LABORATORY DATA", but this varies from record to record.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#named-entity-recognition"&gt;
  &lt;/a&gt;
  Named entity recognition
&lt;/h2&gt;

&lt;p&gt;Named entity recognition (NER) is a subtask of natural language processing used to identify and classify named entities mentioned in unstructured text into pre-defined categories. &lt;code&gt;scispaCy&lt;/code&gt; has different models to identify different entity types and you can check them &lt;a href="https://allenai.github.io/scispacy/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We are going to use the NER model trained on the BC5CDR corpus (&lt;code&gt;en_ner_bc5cdr_md&lt;/code&gt;). This corpus consists of 1500 PubMed articles with 4409 annotated chemicals, 5818 diseases, and 3116 chemical-disease interactions. Don't forget to &lt;a href="#requirements"&gt;download and install&lt;/a&gt; the model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scispacy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;spacy&lt;/span&gt;
&lt;span class="n"&gt;nlp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"en_ner_bc5cdr_md"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;spacy.load&lt;/code&gt; will return a &lt;code&gt;Language&lt;/code&gt; object containing all components and data needed to process text. This object is usually called &lt;code&gt;nlp&lt;/code&gt; in the documentation and tutorials. Calling the &lt;code&gt;nlp&lt;/code&gt; object on a string of text will return a processed &lt;code&gt;Doc&lt;/code&gt; object with the text split into words and annotated.&lt;/p&gt;

&lt;p&gt;Let's get all identified entities and print their text, start position, end position, and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample_transcription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TEXT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"START"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"END"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"ENTITY TYPE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TEXT START END ENTITY TYPE
iron-deficiency anemia 79 101 DISEASE
chronic blood loss 109 127 DISEASE
colitis 133 140 DISEASE
iron 203 207 CHEMICAL
...
vancomycin 781 791 CHEMICAL
infectious disease 873 891 DISEASE
improved.,PT 1348 1360 CHEMICAL
vitamin K 1503 1512 CHEMICAL
uric acid 1830 1839 CHEMICAL
bilirubin 1853 1862 CHEMICAL
Creatinine 1911 1921 CHEMICAL
...
Compazine 2474 2483 CHEMICAL
Zofran 2487 2493 CHEMICAL
epistaxis 2629 2638 DISEASE
bleeding 3057 3065 DISEASE
edema.,CARDIAC 3109 3123 CHEMICAL
adenopathy 3156 3166 DISEASE
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can see the model correctly identified and label diseases such as &lt;em&gt;iron-deficiency anemia&lt;/em&gt;, &lt;em&gt;chronic blood loss&lt;/em&gt;, and many more. Lots of drugs were also identified, like &lt;em&gt;vancomycin&lt;/em&gt;, &lt;em&gt;Compazine&lt;/em&gt;, &lt;em&gt;Zofran&lt;/em&gt;. The model can also identify common laboratory tested molecules such as &lt;em&gt;creatinine&lt;/em&gt;, &lt;em&gt;iron&lt;/em&gt;, &lt;em&gt;bilirubin&lt;/em&gt;, &lt;em&gt;uric acid&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Not everything is perfect though. See how some tokens are weirdly classified as chemicals, possibly due to punctuation marks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;improved.,PT 1348 1360 CHEMICAL&lt;/li&gt;
&lt;li&gt;edema.,CARDIAC 3109 3123 CHEMICAL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Punctuation marks are usually removed in NLP preprocessing steps, but we can't remove all of them here, otherwise, we may miss chemical names and would screw up quantities like drug dosage. However, we can solve this problem by removing the "&lt;strong&gt;.,&lt;/strong&gt;" marks that appear to separate some sections of the transcription. It is important to know your data and your data's domain to have a better comprehension of your results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;med_transcript_small&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'transcription'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;med_transcript_small&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'transcription'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'(\.,)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;". "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also check the entities using the &lt;code&gt;displacy&lt;/code&gt; visualizer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spacy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;displacy&lt;/span&gt;
&lt;span class="n"&gt;displacy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ent'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jupyter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# here I am printing just the first 100 tokens
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-2GQodX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyonopth8vf0a2z88t4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-2GQodX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyonopth8vf0a2z88t4y.png" alt="displacy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rulebased-matching"&gt;
  &lt;/a&gt;
  Rule-based matching
&lt;/h2&gt;

&lt;p&gt;Rule-based matching is similar to regular expressions, but spaCy’s rule-based matcher engines and components give you access to the tokens within the document and their relationships. We can combine this with the NER models to identify some pattern that includes our entities.&lt;/p&gt;

&lt;p&gt;Let's extract from the text the drug names and their reported dosages. This could be of real use to identify possible medication errors by checking if the dosages are in accordance with standards and guidelines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spacy.matcher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Matcher&lt;/span&gt;

&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;'ENT_TYPE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'CHEMICAL'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'LIKE_NUM'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'IS_ASCII'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="n"&gt;matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DRUG_DOSE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above creates a pattern to identify a sequence of three tokens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A token whose entity type is CHEMICAL (drug name)&lt;/li&gt;
&lt;li&gt;A token that resembles a number (dosage)&lt;/li&gt;
&lt;li&gt;A token that consists of ASCII characters (units, like mg or mL)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we initialize the Matcher with a vocabulary. The matcher must always share the same vocab with the documents it will operate on, so we use the &lt;code&gt;nlp&lt;/code&gt; object vocab. We then add this pattern to the matcher and give it an ID.&lt;/p&gt;

&lt;p&gt;Now we can loop through all transcriptions and extract the text matching this pattern:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;transcription&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;med_transcript_small&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'transcription'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transcription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;string_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;match_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# get string representation
&lt;/span&gt;        &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# the matched span
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DRUG_DOSE 137 140 Xylocaine 20 mL
DRUG_DOSE 141 144 Marcaine 0.25%
DRUG_DOSE 208 211 Aspirin 81 mg
DRUG_DOSE 216 219 Spiriva 10 mcg
DRUG_DOSE 399 402 nifedipine 10 mg
DRUG_DOSE 226 229 aspirin one tablet
DRUG_DOSE 245 248 Warfarin 2.5 mg
DRUG_DOSE 67 70 Topamax 100 mg
...
DRUG_DOSE 193 196 Metamucil one pack
DRUG_DOSE 207 210 Nexium 40 mg
DRUG_DOSE 1133 1136 Naprosyn one p.o
DRUG_DOSE 290 293 Lidocaine 1%
DRUG_DOSE 37 40 Altrua 60,
...
DRUG_DOSE 74 77 Lidocaine 1.5%
DRUG_DOSE 209 212 Dilantin 300 mg
DRUG_DOSE 217 220 Haloperidol 1 mg
DRUG_DOSE 225 228 Dexamethasone 4 mg
DRUG_DOSE 234 237 Docusate 100 mg
DRUG_DOSE 250 253 Ibuprofen 600 mg
DRUG_DOSE 258 261 Zantac 150 mg
...
DRUG_DOSE 204 207 epinephrine 7 ml
DRUG_DOSE 214 217 Percocet 5,
DRUG_DOSE 55 58 . 4.
DRUG_DOSE 146 149 . 4.
DRUG_DOSE 2409 2412 Naprosyn 375 mg
DRUG_DOSE 141 144 Wellbutrin 300 mg
DRUG_DOSE 146 149 Xanax 0.25 mg
DRUG_DOSE 158 161 omeprazole 20 mg
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Nice, we did it!&lt;/p&gt;

&lt;p&gt;We successfully extracted drugs and dosages, including different kinds of units like &lt;em&gt;mg, mL, %, packs&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Here we learned how to use some features of scispaCy and spaCy like NER and rule-base matching. We used one NER model, but there lots of others and you should totally check them out. For instance, the &lt;code&gt;en_ner_bionlp13cg_md&lt;/code&gt; model can identify anatomical parts, tissues, cell types, and more. Imagine what else you could do with that!&lt;/p&gt;

&lt;p&gt;We also didn't focus too much on preprocessing steps, but they are fundamental to get better results. Don't forget to explore your data and adapt the preprocessing steps to the NLP tasks you want to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Neumann, M., King, D., Beltagy, I., &amp;amp; Ammar, W. (2019). &lt;a href="https://arxiv.org/abs/1902.07669"&gt;Scispacy: Fast and robust models for biomedical natural language processing&lt;/a&gt;. arXiv preprint arXiv:1902.07669.&lt;/p&gt;

&lt;p&gt;Honnibal, M., Montani, I., Van Landeghem, S., Boyd, A. (2020). &lt;a href="https://spacy.io/"&gt;spaCy: Industrial-strength Natural Language Processing in Python&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>nlp</category>
      <category>biomedical</category>
      <category>datamining</category>
    </item>
    <item>
      <title>Talk Notes: 'The Rising Storm of Ethics in Open Source' (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Thu, 15 Apr 2021 15:26:06 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-the-rising-storm-of-ethics-in-open-source-railsconf-2021-b3c</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-the-rising-storm-of-ethics-in-open-source-railsconf-2021-b3c</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk:&lt;/strong&gt; 'The Rising Storm of Ethics in Open Source' by &lt;a href="https://twitter.com/CoralineAda"&gt;Coraline Ada Ehmke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ If you can't watch the talk, read Coraline's article: &lt;em&gt;&lt;a href="https://modelviewculture.com/pieces/a-six-month-retrospective-on-ethical-open-source"&gt;A Six-Month Retrospective on Ethical Open Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: The increased debate around ethical source threatens to divide the OSS community. In his book "The Structure of Scientific Revolutions", philosopher Thomas Kuhn posits that there are three possible solutions to a crisis like the one we're facing: procrastination, assimilation, or revolution. Which will we choose as we prepare for the hard work of reconciling ethics and open source?&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;: YES. This is the talk we need to hear over and over and over again, and which should become a staple in developer education. Coraline is an AMAZING speaker (knowledgeable, concise, direct, charismatic) and her expertise is mind-blowing. Please do watch the talk.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-the-speaker"&gt;About the speaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#about-the-speaker"&gt;
  &lt;/a&gt;
  About the speaker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Coraline_Ada_Ehmke"&gt;Coraline Ada Ehmke&lt;/a&gt; is a gem:

&lt;ul&gt;
&lt;li&gt;fought for codes of conduct at tech conferences, &lt;/li&gt;
&lt;li&gt;created &lt;a href="https://www.contributor-covenant.org/"&gt;Contributor Covenant&lt;/a&gt; (the first and most popular CoC for OS communities), &lt;/li&gt;
&lt;li&gt;received &lt;a href="https://rubyheroes.com/"&gt;Ruby Hero award&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;spoke at UN forum, &lt;/li&gt;
&lt;li&gt;authored the &lt;a href="https://firstdonoharm.dev/"&gt;Hippocratic License&lt;/a&gt;, and &lt;/li&gt;
&lt;li&gt;founded the &lt;a href="https://ethicalsource.dev/"&gt;Organization for Ethical Source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Christine Peterson &lt;a href="https://opensource.com/article/18/2/coining-term-open-source-software"&gt;coined the term 'Open Source'&lt;/a&gt; in 1998 and Bruce Perens wrote its definition&lt;/li&gt;
&lt;li&gt;In 1998, the &lt;a href="https://opensource.org/"&gt;Open Source Initiative&lt;/a&gt; was founded&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS is nowadays used to violate human rights, and &lt;a href="https://opensource.org/faq#evil"&gt;it is a feature, not a bug&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Can I stop "evil people" from using my program?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No. The Open Source Definition specifies that Open Source licenses may not discriminate against persons or groups. Giving everyone freedom means giving evil people freedom, too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"But under what other circumstances, in human society, do we grant complete freedom to evil people? Why is it different with software?" &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fundamental question&lt;/strong&gt;: "Are we responsible for how the technologies we develop are used?"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OS is used to suppress protests, to increase surveillance, etc. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ethical qs in tech are not new: &lt;a href="https://en.wikipedia.org/wiki/Edmund_Berkeley"&gt;Edmund Berkeley&lt;/a&gt; (one of the pioneers on computer engineering) cofounded the Association for Computing Machinery (ACM) with the mission of "...serving public interests by fostering the open interchange of information and by promoting the highest professional and &lt;strong&gt;ethical&lt;/strong&gt; standards"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in 1958 Berkeley sat on the Committee of the Social Responsibility of Computer Scientists, which published a foundational report on the ethical responsibilities of technologists, and the findings of the report boiled down to four statements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"They cannot rightly &lt;strong&gt;ignore&lt;/strong&gt; their social responsibilities"&lt;/li&gt;
&lt;li&gt;"They cannot rightly &lt;strong&gt;delegate&lt;/strong&gt; their social responsibilities"&lt;/li&gt;
&lt;li&gt;"They cannot rightly &lt;strong&gt;neglect to think about how their special role can benefit or harm society&lt;/strong&gt;" (or, we have to consider how our special capacities can help to advance socially desirable applications and prevent undesirable outcomes)&lt;/li&gt;
&lt;li&gt;"They cannot &lt;strong&gt;avoid deciding between conflicting responsibilities&lt;/strong&gt;" (we must think how to choose)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The scientists concluded: "The scientists' credo &lt;em&gt;knowledge for the sake of knowledge's sake&lt;/em&gt; easily comes into conflict with our ethical responsibilities" (even if there's a large middle ground between what's socially desirable and undesirable, the undesirable part should not be enabled through our tech)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;1972 the Vietnam War was waging when Berkley delivered a talk at a 25th-anniversary dinner of the ACM:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;he said that anyone who works on technology for unethical goals should quit their jobs (he even called the audience members by their names to a great public upset; admiral Grace Hopper was among those who left the room); &lt;/li&gt;
&lt;li&gt;he concluded the talk by saying it was "gross neglect of responsibility that computer scientists were not considering their impact in terms of societal benefit or societal harm"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"How would we feel about the complicity of the IBM in the Holocaust, if their punch card system was released under the MIT license?" &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Melvin Kranzberg (tech historian): "Technology is neither good nor bad; nor is it neutral"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;prof. Lila Green: "When technology is implicated in social processes, there is nothing neutral about technology" ("Framing Technology: Society, Choice and Change")&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;"MINASWAN isn't an ethical framework"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It's time for us to go beyond "nice". Frankly, I'm sick of "nice". Nice is meaningless if we're not just. Nice is meaningless if we are not equitable. We can't keep using "nice" as a shield that we hide behind ignoring our impact.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;No chemical manufacturer in the US will produce a solution that's used for death by lethal injections. &lt;/li&gt;
&lt;li&gt;The &lt;a href="https://archive.nytimes.com/www.nytimes.com/books/first/b/black-ibm.html?_r=1"&gt;IBM was complicit in the Holocaust&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;in 1998 the greatest conceivable evil that can be borne out of software was market domination by Microsoft&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Coraline_Ada_Ehmke"&gt;Coraline Ada Ehmke&lt;/a&gt; (bio)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://modelviewculture.com/pieces/a-six-month-retrospective-on-ethical-open-source"&gt;A Six-Month Retrospective on Ethical Open Source&lt;/a&gt; by Coraline Ada Ehmke&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.contributor-covenant.org/"&gt;Contributor Covenant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firstdonoharm.dev/"&gt;Hippocratic License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethicalsource.dev/"&gt;Organization for Ethical Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icebreaker.dev/"&gt;ICE breaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.org/"&gt;Open Source Initiative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to Deploy your Node.JS Website to Heroku</title>
      <author>Rithik Samanthula</author>
      <pubDate>Thu, 15 Apr 2021 15:07:48 +0000</pubDate>
      <link>https://dev.to/code2rithik/how-to-deploy-your-node-js-website-to-heroku-3j4p</link>
      <guid>https://dev.to/code2rithik/how-to-deploy-your-node-js-website-to-heroku-3j4p</guid>
      <description>&lt;p&gt;Want to deploy your website to Heroku?&lt;/p&gt;

&lt;p&gt;Here are the steps to do exactly that:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node.js and npm installed.&lt;/li&gt;
&lt;li&gt;An existing Node.js app.&lt;/li&gt;
&lt;li&gt;A free Heroku account.&lt;/li&gt;
&lt;li&gt;Having a Node.JS version higher than Version 8&lt;/li&gt;
&lt;li&gt;Having NPM Installed. It is installed with Node so don't worry :)&lt;/li&gt;
&lt;li&gt;Having Git Installed&lt;/li&gt;
&lt;li&gt;Be in your current project directory in the CLI. If not, use &lt;code&gt;cd yourProject&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming that you have already done that, let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-downloading-heroku"&gt;
  &lt;/a&gt;
  1. Downloading Heroku.
&lt;/h1&gt;

&lt;p&gt;Download Heroku for your Operating system from &lt;a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, if you are on a macbook, use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install heroku/brew/heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#2-login-with-heroku"&gt;
  &lt;/a&gt;
  2. Login with Heroku
&lt;/h1&gt;

&lt;p&gt;Once you are done installing heroku, you the command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;to connect your heroku account with the CLI.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-changing-the-port"&gt;
  &lt;/a&gt;
  3. Changing the Port
&lt;/h1&gt;

&lt;p&gt;Currently, your project is on a local server. But we don't want that to happen. Since we are deploying it to heroku, add this code to your Node.JS app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Listening to port 3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you want it to listen at Port 3000 as well as heroku's servers, replace the code with this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Listening to port 3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#4-creating-a-procfile"&gt;
  &lt;/a&gt;
  4. Creating a Procfile
&lt;/h1&gt;

&lt;p&gt;Now, we need to define a Procfile&lt;/p&gt;

&lt;p&gt;This is the file that heroku is going to check to see how to launch your app.&lt;/p&gt;

&lt;p&gt;Create a Procfile &lt;strong&gt;without&lt;/strong&gt; Any extensions like &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.rtf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The name should only be "Procfile".&lt;/p&gt;

&lt;p&gt;In your procfile add this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;yourJsFileName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#5-initialize-git-and-github"&gt;
  &lt;/a&gt;
  5. Initialize Git and GitHub
&lt;/h1&gt;

&lt;p&gt;Next, use the command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will initialize an empty git repository for you&lt;/p&gt;

&lt;p&gt;Then, use:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, to commit your changes, use:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Your Message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#6-deploying-your-app"&gt;
  &lt;/a&gt;
  6. Deploying your App
&lt;/h1&gt;

&lt;p&gt;The next step is to deploy your app to heroku.&lt;/p&gt;

&lt;p&gt;Next use the command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To create a new heroku project.&lt;/p&gt;

&lt;p&gt;Then, it will give you a link to visit your website. For now, it will only Display: "Heroku | Welcome to your New App!" Don't worry as this is a regular part of the process.&lt;/p&gt;

&lt;p&gt;Now, to deploy your code, use the command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will push our local version that's been stored using git to heroku.&lt;/p&gt;

&lt;p&gt;It will take a couple of minutes to complete the process.&lt;/p&gt;

&lt;p&gt;As a success message, it should show you&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;remote: Verifying deploy...done.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, refresh the link that they showed you previously and VOILA your content displays. If this happened, then give yourself a pat on the back.&lt;/p&gt;

&lt;p&gt;If you get an error like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSFNtUn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrkuzwuyisfm4pfjgitf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSFNtUn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrkuzwuyisfm4pfjgitf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not to worry!&lt;/p&gt;

&lt;p&gt;This means that the website is still taking some time to upload. Try after some time. Then, you will see your Node.JS website up and LIVE!&lt;/p&gt;

&lt;p&gt;Thank You For reading this blog.&lt;/p&gt;

&lt;p&gt;If you want to deploy your website on other platforms, check out the different blogs in this series:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/code2rithik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJQFkaLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GFKV3RMj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571318/596c73a4-b890-49d7-b0fb-5eb141aafd91.png" alt="code2rithik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/code2rithik/how-to-deploy-your-website-using-github-pages-34hc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Deploy your Website using GitHub Pages&lt;/h2&gt;
      &lt;h3&gt;Rithik Samanthula ・ Feb  5 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#githubpages&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hosting&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/code2rithik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJQFkaLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GFKV3RMj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571318/596c73a4-b890-49d7-b0fb-5eb141aafd91.png" alt="code2rithik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/code2rithik/how-to-deploy-your-website-using-vercel-4499" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Deploy your Website using Vercel&lt;/h2&gt;
      &lt;h3&gt;Rithik Samanthula ・ Feb 17 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#deploy&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vercel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/code2rithik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJQFkaLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GFKV3RMj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571318/596c73a4-b890-49d7-b0fb-5eb141aafd91.png" alt="code2rithik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/code2rithik/how-to-deploy-your-website-to-netlify-2f1e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to deploy your website to Netlify&lt;/h2&gt;
      &lt;h3&gt;Rithik Samanthula ・ Mar 12 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#netlify&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#deploy&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you liked it then do it share it with your friends and remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>heroku</category>
      <category>deploy</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Simulate Real-World User Behavior in Apache JMeter Load Tests</title>
      <author>Raphael Jambalos</author>
      <pubDate>Thu, 15 Apr 2021 15:06:35 +0000</pubDate>
      <link>https://dev.to/raphael_jambalos/simulate-real-user-behavior-in-apache-jmeter-load-tests-58bl</link>
      <guid>https://dev.to/raphael_jambalos/simulate-real-user-behavior-in-apache-jmeter-load-tests-58bl</guid>
      <description>&lt;p&gt;A realistic load test helps you prepare your application and infrastructure adequately for the surge of people that will browsing and using your site. By configuring your test plan to mimic real-world user behavior, the results you get from the load test can help inform design and capacity decisions you will make to keep your site robust.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/raphael_jambalos/load-test-your-website-in-10-minutes-with-this-visual-guide-1h71"&gt;previous post&lt;/a&gt;, we created a basic Jmeter Test Plan for &lt;a href="https://github.com/jamby1100/simple-loyalty-flask-app"&gt;a 3-endpoint API written in Flask and Python&lt;/a&gt;. That's a good start. But to create a Test Plan that closely resembles real user behavior, we have to add more elements to our test plan. &lt;/p&gt;

&lt;p&gt;If you want to follow along without going through the previous post, you can pick up right where we left off from the previous blog post by downloading this &lt;a href="https://jamby-public-bucket.s3-ap-southeast-1.amazonaws.com/Thread+Group1.jmx"&gt;JMeter test plan&lt;/a&gt;. Also, you will have to set up the &lt;a href="https://github.com/jamby1100/simple-loyalty-flask-app"&gt;Flask application&lt;/a&gt;, so you will have the same application we are load testing against. Setup instructions are found in the README.me file of this repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-add-thinking-time-with-the-uniform-random-timer"&gt;
  &lt;/a&gt;
  [1] Add Thinking Time with the "Uniform Random Timer"
&lt;/h2&gt;

&lt;p&gt;When users browse your website, they look around the page first for a few seconds before moving on to the next page. They click the "View Product" page, take at least a few seconds to look at the product, and then add it to the cart. To simulate this thinking time, we add the Uniform Random Timer to our load tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THnSu_mt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky1qdt9uv7wy22jfiek2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THnSu_mt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky1qdt9uv7wy22jfiek2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once created, let's configure a minimum delay of 2secs and a maximum delay of 7 seconds. JMeter chooses a random value between 2s-7s for the delay. You may want to adjust this value to reflect better how users actually use your site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HH1t0U2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyd7df2rez7gznv10c1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HH1t0U2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyd7df2rez7gznv10c1r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's run the load test. You'd see it takes a bit longer than before because of the delays introduced. This means we have successfully emulated user thinking time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_Cc9fMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmnaw4v40kn3lr72oaaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_Cc9fMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmnaw4v40kn3lr72oaaq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-vary-user-input-with-the-csv-data-input"&gt;
  &lt;/a&gt;
  [2] Vary user input with the "CSV Data Input"
&lt;/h2&gt;

&lt;p&gt;Users type in different sign-in credentials when they browse your site. They also buy different products. This puts a strain on your system because the response is more difficult to cache.&lt;/p&gt;

&lt;p&gt;If we have a test plan with 20 virtual users (VUs) logging in using the same email and password and buying the same product, our performance test results become too optimistic. Our database or cache might have been optimized already to keep returning the same results.&lt;/p&gt;

&lt;p&gt;To fix this, we introduce the "CSV Data Input" element into our test plan. First, let's define the CSV file from which we will get the values. Save this CSV file with a filename of "sample_data.csv". Place it in the same directory as we saved the JMeter load test we are working with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first_name,last_name,email,password
raphael,jambalos,raphael.jambalos@gmail.com,jambyiscool
test,jambalos,test.driver@gmail.com,driveiscool
ultra,jambalos,ultra.player@gmail.com,ultraplayeriscool
super,jambalos,super.user@gmail.com,superuseriscool
code,jambalos,code.maestro@gmail.com,codemaestroiscool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let's use this CSV file in the load test by creating the "CSV Data Set Config" element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_Br_REP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r73qwn9zt9v1luujlz3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_Br_REP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r73qwn9zt9v1luujlz3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the filename part, find the CSV file you just created. You could type &lt;code&gt;sample_data.csv&lt;/code&gt; if you followed my earlier instruction of just placing the CSV file in the same directory as the JMeter test plan. If the file is stored elsewhere, click Browse to find the file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sHl1r8K0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faxmitfsn9ch2f8kdolc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sHl1r8K0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faxmitfsn9ch2f8kdolc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For each virtual user, the CSV Data Set Config gets one row from the CSV and loads it as values to the variable names you specified in the element. For example, VU#1 will have the row "ultra,jambalos,&lt;a href="mailto:ultra.player@gmail.com"&gt;ultra.player@gmail.com&lt;/a&gt;,ultraplayeriscool" and the variable names available to that user will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first_name: ultra&lt;/li&gt;
&lt;li&gt;last_name: jambalos&lt;/li&gt;
&lt;li&gt;email: &lt;a href="mailto:ultra.player@gmail.com"&gt;ultra.player@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;password: ultraplayeriscool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VU#2 will have a different row and hence have a different set of values for the four variables specified above. In order to have different values for each VU, we need to review the 2 endpoints we created in the previous post and replace some value fields with variable names instead of hardcoded data.&lt;/p&gt;

&lt;p&gt;For the sign-in route, replace the value of the email and password keys with these values: "${email}" and "${password}".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBgZckEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1i4p0slx9ancwrplh9r8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBgZckEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1i4p0slx9ancwrplh9r8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the route loyalty cards create, do the same for first name and last name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDTlac7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97f53az5dt0jsu83ap6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDTlac7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97f53az5dt0jsu83ap6g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, running the load test, we see different values used for email, password, first_name, and last_name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrUIvLkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0f5my33ovdzrqu0dh69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrUIvLkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0f5my33ovdzrqu0dh69.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-add-conditions-for-gateway-actions"&gt;
  &lt;/a&gt;
  [3] Add conditions for gateway actions
&lt;/h2&gt;

&lt;p&gt;When the call to the login endpoint fails, the actions after it also fails. If we have 10 endpoints to call after login, a failed login overstates an error 10 times over. Also, real-world users retry the login rather than trying pages that are inaccessible to them.&lt;/p&gt;

&lt;p&gt;The solution to this problem is to ensure that each VU only tries the 10 endpoints &lt;em&gt;if the login succeeded&lt;/em&gt;. For this, we create the If Controller:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PP3Mf1-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8onnibx35hv2tvqf4qj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PP3Mf1-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8onnibx35hv2tvqf4qj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, drag the If Controller right below the sign-in endpoint and make sure to "drag in" the /loyalty-cards POST endpoint. This makes sure that the endpoint will only execute if the login was a success. Make sure to set the condition of the if config element to: &lt;code&gt;${JMeterThread.last_sample_ok}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGDBvtYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttz3ov93cq9g9j1jmx6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGDBvtYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttz3ov93cq9g9j1jmx6g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-set-up-a-test-environment-similar-to-the-production"&gt;
  &lt;/a&gt;
  [4] Set up a test environment similar to the production
&lt;/h2&gt;

&lt;p&gt;Up to this point, our load test is configured to allow us to test quickly so we can get feedback on what to improve. This is why our load test only runs for 30secs and has only 10 VUs. At this volume, we are sure that even if you host your application locally, the load will be adequately handled.&lt;/p&gt;

&lt;p&gt;But load tests are not of much value if we test at low volumes. After all, load tests answer the question: "how many users making requests concurrently can my website handle?". To have a load test that truly adds value to our team, we need to test at higher volumes (think 100-500 VU or more). And to test at higher volumes, we need to set up a test environment that can accommodate that load.&lt;/p&gt;

&lt;p&gt;In setting up the test environment, we need to make it similar to our production setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The database and the application servers are of the same size and count.&lt;/li&gt;
&lt;li&gt;The application and web servers have the same configuration as the production setup&lt;/li&gt;
&lt;li&gt;The data in the database is roughly the same size as in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For some teams, replicating the database and server fleet (i.e., 10 r5.large EC2 instances and 1 24.xlarge database) won't be possible. For this, what we usually do is a scaled-down version of the app (i.e., think 2 r5.large EC2 instance and 4xlarge database). Then, we multiply the capacity by the scaling factor to get the estimated capacity of production.&lt;/p&gt;

&lt;p&gt;For our example, the scaling factor is 5. Our test environment is 1/5 the size of our production setup. If our test environment can accommodate 500 users, we assume the production setup can accommodate 2500 users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-disable-listeners-during-highvolume-load-tests"&gt;
  &lt;/a&gt;
  [5] Disable Listeners during high-volume load tests
&lt;/h2&gt;

&lt;p&gt;Thus far, we had the "View Results Tree" and "Summary Report" listeners to help us build and improve our load test. But when testing on high volumes, these 2 listeners suck up a lot of resources (particularly memory) that we could have used for the load test operation.&lt;/p&gt;

&lt;p&gt;When you are ready for your high-volume test, disable the two listeners. Once you do, it should be grayed out in the GUI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tUL-e6yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nql8677wduu20894jgni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tUL-e6yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nql8677wduu20894jgni.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-run-jmeter-in-cli-mode"&gt;
  &lt;/a&gt;
  [6] Run Jmeter in CLI mode
&lt;/h2&gt;

&lt;p&gt;When load testing, we usually change the parameters of the load test. I usually start at 100 VU. If the app can handle it, I push it up to 200 VU, then 300 VU, etc. &lt;/p&gt;

&lt;p&gt;At the current state of our load test, if we use the CLI, we would have to modify the test plan locally with the GUI, then re-upload it to get from 100VU to 200VU. There has to be a better way!&lt;/p&gt;

&lt;p&gt;For this, we introduce CLI parameters. Click on the thread group and replace the values of the fields with the following values species below. Notice that the 1st parameter sets the variable name and the second parameter sets the value of this variable in case there is none provided in the CLI command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number of Threads: &lt;code&gt;${__P(users,10)}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Ramp-up period: &lt;code&gt;${__P(rampupPeriod,10)}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Duration: &lt;code&gt;${__P(duration,30)}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your Thread Group should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZzvkXW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtq6ab786rt5k454wxma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZzvkXW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtq6ab786rt5k454wxma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also modify our CSV Data Set Config to parameterize the CSV filename using &lt;code&gt;${__P(csvFilename,'sample_test_data.csv)}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsddVUL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8qwojzp233mvn9vg1dd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsddVUL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8qwojzp233mvn9vg1dd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it's time to run our load test via CLI. Notice that we intentionally did not include the &lt;code&gt;csvFilename&lt;/code&gt; parameter and instead relied on its default value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jmeter &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; jmeter_test_plan.jmx &lt;span class="se"&gt;\&lt;/span&gt;
       &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s1"&gt;'%Y%m%d%H%M%S'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;.csv"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
       &lt;span class="nt"&gt;-Jusers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;50 &lt;span class="se"&gt;\&lt;/span&gt;
       &lt;span class="nt"&gt;-JrampupPeriod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60 &lt;span class="se"&gt;\&lt;/span&gt;
       &lt;span class="nt"&gt;-Jduration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;360 &lt;span class="se"&gt;\&lt;/span&gt;
       &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s1"&gt;'%Y%m%d%H%M%S'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_folder"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We specified a load test using 50 Virtual Users (VUs), a duration of 6 minutes (360s), and a ramp-up period of 1 minute. This is definitely more high volume than our 10VU / 30s load testing we have done prior. We also specified the JMeter test plan file that we have been working on. We also specified the paths on where to save the output CSV file and the HTML report (you will see both of this later).&lt;/p&gt;

&lt;p&gt;Once you run the test, your CLI should look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRd_6fB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvt69bkqd7wei39fkn95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRd_6fB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvt69bkqd7wei39fkn95.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the test, notice that JMeter has created a folder and a CSV file in the directory we specified in the command. The CSV contains a report of every HTTP request made to our test environment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SicOSaLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k7b4ks9l4h3tm3nvois.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SicOSaLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k7b4ks9l4h3tm3nvois.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The folder contains an HTML report with graphs and tables showing how the test went. Open the file &lt;code&gt;index.html&lt;/code&gt; to see this report:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCYjl2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wngqmzwvzs77jjhnnvef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCYjl2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wngqmzwvzs77jjhnnvef.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use this report to examine how the load test went. There are also advanced options to configure the contents of this report.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;Now, we have a realistic load test plan that can be configured to run hundreds of virtual users. So far, we have run the test plan on our local machine. But our local machine has a limit. It starts to fail once we do a load test with 1000 VUs or more.&lt;/p&gt;

&lt;p&gt;In the next post, we detail options on how to run load tests to accommodate a high number of virtual users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#special-thanks"&gt;
  &lt;/a&gt;
  Special Thanks
&lt;/h1&gt;

&lt;p&gt;Special thanks to Allen for making my posts more coherent. &lt;/p&gt;

&lt;p&gt;The authoritative JMeter book of Rodrigues, Mouawad, and Milamber entitled &lt;a href="https://leanpub.com/master-jmeter-from-load-test-to-devops"&gt;Master Apache JMeter From load testing to DevOps&lt;/a&gt; really helped me understand JMeter in more clarity. I highly suggest you purchase this book if you want to learn more about JMeter. &lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@sigmund?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sigmund&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/prototype?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>jmeter</category>
      <category>tutorial</category>
      <category>aws</category>
    </item>
    <item>
      <title>Zip Pdf Files And Download In Laravel</title>
      <author>Ajay Yadav</author>
      <pubDate>Thu, 15 Apr 2021 15:06:18 +0000</pubDate>
      <link>https://dev.to/ajayyadav/zip-pdf-files-and-download-in-laravel-53g0</link>
      <guid>https://dev.to/ajayyadav/zip-pdf-files-and-download-in-laravel-53g0</guid>
      <description>&lt;p&gt;In this post we'll see how to create a zip file and download it in laravel.&lt;br&gt;
Let's start&lt;br&gt;
create a controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="nc"&gt;InvoiceController&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open InvoiceController and create a method &lt;strong&gt;downloadZip()&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;downloadZip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$zip_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'invoices.zip'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;ZipArchive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zip_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;ZipArchive&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CREATE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;ZipArchive&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OVERWRITE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;storage_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'invoices'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// path to your pdf files&lt;/span&gt;
        &lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;RecursiveIteratorIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;RecursiveDirectoryIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// We're skipping all subfolders&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;isDir&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$filePath&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRealPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="c1"&gt;// extracting filename with substr/strlen&lt;/span&gt;
                &lt;span class="nv"&gt;$relativePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'invoices/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$relativePath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'application/octet-stream'&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
        &lt;span class="nv"&gt;$zip_new_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Invoice-"&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y-m-d-h-i-s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;".zip"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zip_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$zip_new_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$headers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using &lt;strong&gt;ZipArchive()&lt;/strong&gt; class , you can read more about this on this &lt;a href="https://www.php.net/manual/en/class.ziparchive.php"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now create a route, open &lt;strong&gt;web.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//web.php&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Controllers\InvoiceController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/invoice-download'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="nc"&gt;InvoiceController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'downloadZip'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all... 🤗&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
