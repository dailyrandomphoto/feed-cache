<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Youtube channel for preparation and guide</title>
      <author>Kunal Garg</author>
      <pubDate>Tue, 03 Aug 2021 03:40:15 +0000</pubDate>
      <link>https://dev.to/gargkunal/a-youtube-channel-for-preparation-and-guide-m1g</link>
      <guid>https://dev.to/gargkunal/a-youtube-channel-for-preparation-and-guide-m1g</guid>
      <description>&lt;p&gt;I have a yt channel on which I done talks about the preparation guide of companies and roadmaps to new tech-stacks along with guide of tech-stacks and real life programming tutorials and master class.&lt;/p&gt;

&lt;p&gt;Many of us want to learn new tech-stack so I come with this solution&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCEnZkcgXkfTjNWF-tY1ldag"&gt;https://www.youtube.com/channel/UCEnZkcgXkfTjNWF-tY1ldag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a look and enjoy  &lt;/p&gt;

</description>
      <category>programming</category>
      <category>computerscience</category>
      <category>career</category>
      <category>react</category>
    </item>
    <item>
      <title>Katalon TestOps — Test Orchestration and Quality Analytics Platform</title>
      <author>TestingNews</author>
      <pubDate>Tue, 03 Aug 2021 02:53:21 +0000</pubDate>
      <link>https://dev.to/katalon/katalon-testops-test-orchestration-and-quality-analytics-platform-4n8a</link>
      <guid>https://dev.to/katalon/katalon-testops-test-orchestration-and-quality-analytics-platform-4n8a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgR1Xb1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/Katalon-TestOps-%25E2%2580%2594-Test-Orchestration-and-Quality-Analytics-platform.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgR1Xb1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/Katalon-TestOps-%25E2%2580%2594-Test-Orchestration-and-Quality-Analytics-platform.png" alt="Katalon TestOps — Test Orchestration and Quality Analytics platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;“Quality at Speed”&lt;/em&gt; movement – or delivering high-quality products in a short period – has expanded beyond the software industry: it appears in the standard playbook of companies in health care, finance, etc. This new movement pushes QA teams to continuously reinvent their software development cycle with advancing technological practices. Among those new game-changing strategies, many have chosen to focus on test orchestration and quality analytics, which are the focal point of the Katalon TestOps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-orchestration-and-the-future-of-testing"&gt;
  &lt;/a&gt;
  Test Orchestration and The Future of Testing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-1vf7zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/1.-Test-Orchestration-and-The-Future-of-Testing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-1vf7zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/1.-Test-Orchestration-and-The-Future-of-Testing.png" alt="Test Orchestration and The Future of Testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-rising-ground-of-shiftleft-and-shiftright"&gt;
  &lt;/a&gt;
  The Rising Ground of Shift-left and Shift-right
&lt;/h3&gt;

&lt;p&gt;As QA teams race to keep pace with the frequent changes in the industries, traditional project management models, i.e., the Waterfall approach, prove inflexible and time-consuming. It requires sacrificing either customer relevance or testing quality as the works are in sequential order and depend heavily on each other. Therefore, &lt;a href="https://www.katalon.com/resources-center/automation-testing-agile-team/"&gt;teams started to adopt efficient Agile-based approaches&lt;/a&gt;, making way for the rise of &lt;strong&gt;&lt;a href="https://www.katalon.com/resources-center/blog/shift-left-testing-approach/"&gt;“shift left”&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;“shift right” testing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These practices mean both Developers and QAs jointly test the product at every stage of the software development process (CI/CD). Instead of waiting to the end of the development cycle, shift-left testing means teams test application earlier, in much smaller units, and more frequently. On the other hand, shift-right employs testing after product release to see the operation under real-world conditions. Combining these methods has had proven success in detecting bugs earlier at a lower cost, increasing test reliability, and enhancing product quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-orchestration-magic-solution-or-problem-pitfall"&gt;
  &lt;/a&gt;
  Test Orchestration, Magic Solution or Problem Pitfall?
&lt;/h3&gt;

&lt;p&gt;While shift-left and shift-right have risen in popularity, staying effective is a challenge for some product development teams. Without a sound plan, this transformation may cost more time and money than it saves. Among the solutions to the tricky dilemma is test orchestration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.katalon.com/resources-center/blog/test-orchestration-quality-analytics/"&gt;Test orchestration&lt;/a&gt; helps schedule and manage a series of automated test components (databases, environments, etc.) during the entire workflow: from test planning, management, execution to configuration, and analytics. As it provides a holistic picture of the whole testing stage, there’s no doubt that test orchestration is among future practices to streamline and simplify the QA process. Developers and testers will have continuous, comprehensive visibility into application quality, increasing confidence to make a go/no-go release decision.&lt;/p&gt;

&lt;p&gt;However, many teams are struggling to implement orchestration effectively. As a result, the lack of the right solution hinders comprehensive test coverage and efficiency, making it harder to deliver quality software. Transitioning to test orchestration seems scary. But if taken step by step with the right fit tool, every team can use its full potential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#katalon-testops-orchestrate-tests-amp-devops-with-full-visibility-speed-and-efficiency"&gt;
  &lt;/a&gt;
  Katalon TestOps – Orchestrate Tests &amp;amp; DevOps with Full Visibility, Speed, and Efficiency
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VG_Y_j1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/2.-Katalon-TestOps-Features.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VG_Y_j1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/2.-Katalon-TestOps-Features.png" alt="Katalon TestOps Features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-early-test-often-test-everywhere-with-katalon-testops"&gt;
  &lt;/a&gt;
  Test Early, Test Often, Test Everywhere with Katalon TestOps
&lt;/h3&gt;

&lt;p&gt;Frequent changes in product development cycles are associated with higher risks and complexity in the software testing process. In such scenarios, using only test automation is not enough to completely address the problem. Ultimately, every QA team demands the automated configuration, coordination, and management of the system and software to achieve quality objectives with minimal issues and time.&lt;/p&gt;

&lt;p&gt;Understanding these struggles, Katalon introduces TestOps – the first, most comprehensive orchestration platform to connect the test management, planning, execution, and quality analytics of test automation and DevOps teams.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-management"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Management&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;To simplify the first pillar of the testing pipeline (centralizing data and communication), Katalon TestOps acts as a command center, connecting all data and members into one shared, tight feedback loop.&lt;/p&gt;

&lt;p&gt;Teams can perform projects with real-time dashboards for transparency, combine test cases across different frameworks and environments, among so many more. TestOps also offers various monitor and alerts functions for teams to quickly manage the coverage of requirements, test cases, and defects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-planning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Planning&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Katalon TestOps focuses on maximizing ROI and resource utilization early on in the pipeline. New features like smart test scheduler and test planning mechanism grant teams the power to optimize test runs even in the planning stage. The new function of release readiness evaluation will help companies make the release decision with full confidence.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-execution"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Execution&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;At this stage, Katalon TestOps aims to minimize the manual steps in deployment, tool integration, and maintenance needed to run test cases. Among the benefits that TestOps offers are a unique serverless solution, automatic load balancing, parallel execution, and many more. The outcome of these innovations is a more efficient delivery cycle with less redundant procedures and extra rooms for innovation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-analytics"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Analytics&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Leveraging the valuable user input from the beta stage, TestOps renovates the analytics system to bring quality insight into the &lt;a href="https://dev.to/katalon/ci-cd-101-all-you-need-to-know-4j04"&gt;CI/CD pipeline&lt;/a&gt;. Among the new features are new failure analysis, AI-backed out-of-the-box reports, and on-demand notifications. Teams can manage systems without continuous follow-ups. Combined with the instant feedback loops, any authorized member can make changes to codes and test scripts, increasing test coverage, application quality, and ultimately, project ROI.&lt;/p&gt;

&lt;p&gt;For the full picture of functionality and benefits, check out &lt;strong&gt;&lt;a href="https://www.katalon.com/testops"&gt;Katalon TestOps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#katalon-testops-and-katalon-studio-use-case"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Katalon TestOps and Katalon Studio Use Case&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3DNnocl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/3.TestOps-KS-use-case.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3DNnocl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/3.TestOps-KS-use-case.png" alt="TestOps + Katalon Studio use case"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Promising a swift testing experience, &lt;a href="https://www.katalon.com/resources-center/blog/test-orchestration-quality-analytics/"&gt;Katalon TestOps&lt;/a&gt; offers a comprehensive platform with test execution, team collaboration, and project management capabilities. Integratable with multiple testing tools and environments like &lt;a href="https://www.katalon.com/"&gt;Katalon Studio&lt;/a&gt;, Jenkins, CircleCI, etc., testers now have a centric testing ecosystem, with the orchestration ability for extensive control across DevOps teams and environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-management-and-collaboration"&gt;
  &lt;/a&gt;
  Test Management and Collaboration
&lt;/h3&gt;

&lt;p&gt;To help teams with better communication and collaboration, TestOps provides a centralized dashboard with all transparency. At first glance, you can see all data updated minute-by-minute: requirement integration, person-in-charge, etc. Such features give the team full visibility with centralized workspaces for comments, dashboards, KPI tracking, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZODYkqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/4.-Centralized-test-dashboard-with-managers-and-related-documents.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZODYkqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/4.-Centralized-test-dashboard-with-managers-and-related-documents.png" alt="Centralized test dashboard with managers and related documents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Centralized test dashboard with managers and related documents&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-planning"&gt;
  &lt;/a&gt;
  Test Planning
&lt;/h3&gt;

&lt;p&gt;As this stage determines the ROI of server usage, it’s vital that teams run the right test on the right environment at the right time. Using test run schedule and release status, Katalon TestOps increase the efficiency by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Smart-select to help prioritize the most important tests to run next.&lt;/li&gt;
&lt;li&gt;Remotely trigger test cases via multiple methods such as schedulers, API, CI Plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8NxIbzFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/5.How-to-create-Test-Trigger-with-Test-Repeat-Interval-Unit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NxIbzFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/5.How-to-create-Test-Trigger-with-Test-Repeat-Interval-Unit.png" alt="How to create Test Trigger with Test Repeat Interval Unit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to create Test Trigger with Test Repeat Interval Unit&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-execution"&gt;
  &lt;/a&gt;
  Test Execution
&lt;/h3&gt;

&lt;p&gt;Among the integrations available, teams can integrate with popular tools in CI/CD (i.e. Jenkins), test environments (i.e. Kobiton), test automation (i.e. Katalon Studio), and beyond. It’s also possible to create customized integration using SDK and REST APIs.&lt;/p&gt;

&lt;p&gt;TestOps also automatically balances your Test Runs across available Test Environments in your CI provider. Combined with parallel execution, teams can efficiently execute their plan reliably and with clear visibility, hence drastically reducing your run times and delivery cycle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-analytics"&gt;
  &lt;/a&gt;
  Test Analytics
&lt;/h3&gt;

&lt;p&gt;TestOps helps your team get the full picture of quality, coverage analysis, and dashboards showing some critical metrics for your businesses. Among the most highlighted features are Heat Map shows the requirement test coverage, customized alerts, live monitoring, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2UbcSCAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/6.TestOps-Advanced-Report-Coverage-Heat-Map.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2UbcSCAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/6.TestOps-Advanced-Report-Coverage-Heat-Map.png" alt="TestOps Advanced Report Coverage Heat Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TestOps Advanced Report Coverage Heat Map&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VtH3UqQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/7.Real-Time-Test-Run-Report.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtH3UqQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/7.Real-Time-Test-Run-Report.png" alt="Real-Time Test Run Report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Real-Time Test Run Report&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the rise of Agile methodology, teams are constantly innovating their testing process. Among the best practice, test orchestration is a practical method providing cost reduction, better connections, and workflow optimization for all teams. As organizations now show the necessity of a centralized test platform, Katalon TestOps offers a collaboration hub of the QA teams for the whole testing phase. It’s the hope that with our solution, businesses now can achieve the goal of test early, test often, and test everywhere.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/test-orchestration-quality-analytics/"&gt;Katalon TestOps — Test Orchestration and Quality Analytics Platform&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>testops</category>
      <category>sdlc</category>
      <category>softwaretesting</category>
    </item>
    <item>
      <title>Appium Tutorial | Introduction to Android and IOS Mobile Apps Testing</title>
      <author>TestingNews</author>
      <pubDate>Tue, 03 Aug 2021 02:24:22 +0000</pubDate>
      <link>https://dev.to/katalon/appium-tutorial-introduction-to-android-and-ios-mobile-apps-testing-41nb</link>
      <guid>https://dev.to/katalon/appium-tutorial-introduction-to-android-and-ios-mobile-apps-testing-41nb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTM_Vl54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Appium-Tutorial-for-Testing-Android-and-IOS-Mobile-Apps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTM_Vl54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Appium-Tutorial-for-Testing-Android-and-IOS-Mobile-Apps.png" alt="Appium Tutorial for Testing Android and IOS Mobile Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-mobile-testing-and-appium"&gt;
  &lt;/a&gt;
  Introduction to Mobile Testing and Appium
&lt;/h2&gt;

&lt;p&gt;Mobile testing is a series of tests done to determine the reliability, functionality, and usability of a software application. Mobile testing can be classified into mobile device testing and mobile application testing. Mobile device testing authenticates a device’s quality through verifying and validating its hardware parts and software functions. It tests features such as screen, applications, camera, etc. On the other hand, mobile application testing focuses only on testing the software application’s consistency and functionality. It ensures that the selected application is well suited for the device in terms of hardware, software, connectivity, etc.&lt;/p&gt;

&lt;p&gt;There are three types of mobile applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Native mobile applications&lt;/strong&gt;
This kind of application is built with a specific platform in mind; it can be for Android, IOS, or Windows SDK. They are refined to work on a specific device or platform (i.e., IOS works on Apple devices alone). Examples of such applications are Snapchat, Google maps, Skype, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mobile web applications&lt;/strong&gt;
Mobile web application, as the name implies, works solely on mobile browsers. They are developed in web-based languages such as JavaScript, CSS, and HTML. Also, it does not require installation or update by the users, and it is budget-friendly. Examples of such applications are AliExpress, OLX, Flipkart, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid mobile applications&lt;/strong&gt;
This application combines both qualities of native and web applications. They can be installed on native apps devices but still run through browsers. Examples of such applications are Instagram, Uber, Gmail, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#appium"&gt;
  &lt;/a&gt;
  Appium
&lt;/h3&gt;

&lt;p&gt;Appium is an open-source, cross-platform test automation tool. It focuses mainly on testing mobile applications (Android or IOS) and automates test cases for native, web, and hybrid applications.&lt;/p&gt;

&lt;p&gt;Appium supports multiple programming languages, e.g., Java, Python, PHP, Ruby, etc. This allows testers to use any programming language of choice while writing test scripts. It can also run on different OS such as Linux, Windows, Mac, etc. However, Appium cannot be used for testing Android versions lower than 4.2. It also does not perform well on hybrid application testing due to applications’ switching action from the web to native applications.&lt;/p&gt;

&lt;p&gt;Read more about Appium in &lt;a href="https://www.katalon.com/resources-center/blog/appium-vs-selenium/"&gt;&lt;strong&gt;Appium vs. Selenium—Architecture, Functionality, Applications, and everything in between&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-for-setting-up-appium"&gt;
  &lt;/a&gt;
  Prerequisites for Setting up Appium
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhMabXtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Prerequisite-for-Setting-up-Appium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhMabXtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Prerequisite-for-Setting-up-Appium.png" alt="Prerequisite for Setting up Appium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the list of major software and hardware needed for automating mobile applications testing using Appium:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Install Appium Desktop/Server&lt;/li&gt;
&lt;li&gt;Install JDK (Java development kit)&lt;/li&gt;
&lt;li&gt;Download and Install Install Java and set up the environment variable&lt;/li&gt;
&lt;li&gt;Download and setup Android SDK (Software development kit)&lt;/li&gt;
&lt;li&gt;Install Eclipse&lt;/li&gt;
&lt;li&gt;Install Node JS&lt;/li&gt;
&lt;li&gt;Java-client jars and Selenium jars&lt;/li&gt;
&lt;li&gt;APK – Mobile applications for automation&lt;/li&gt;
&lt;li&gt;Mobile devices&lt;/li&gt;
&lt;li&gt;USB driver for mobile devices&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-appium-works-in-android"&gt;
  &lt;/a&gt;
  How Appium works in Android
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evamRZsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-Android.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evamRZsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-Android.png" alt="How Appium works in Android"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to meet up with users’ requirements for an application, Appium testing can be used to verify the functionality and reliability of the application. Appium testing on Android devices allows testers to affirm that the applications are functioning as expected in real user conditions. It also helps to ensure optimal consistency in deliveries.&lt;/p&gt;

&lt;p&gt;Appium uses the UIAutomator test case to test the Android user interface to automate Android devices. The UI Automator is a native UI automation framework for Android.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-for-running-appium-test-on-android-devices"&gt;
  &lt;/a&gt;
  Best Practices for running Appium test on Android devices
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download the necessary components to run the tests, such as Appium Server, Appium Jar files, and Java.&lt;/li&gt;
&lt;li&gt;Install the Java on your system and set the environment variables.&lt;/li&gt;
&lt;li&gt;Specify the desired capabilities (set of keys and values sent by the client to the server). It can either be set in the test code or in the appium.txt files.&lt;/li&gt;
&lt;li&gt;The test code aids the writing of the Appium test scripts needed to run Appium tests on the Android devices.&lt;/li&gt;
&lt;li&gt;Write your Appium test scripts for your Android devices with the developer mode option enabled.&lt;/li&gt;
&lt;li&gt;Run tests on real Android devices to ensure optimum user-friendliness.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-appium-works-in-ios"&gt;
  &lt;/a&gt;
  How Appium works in IOS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NocXPaH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-IOS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NocXPaH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-IOS.png" alt="How Appium works in IOS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like Android devices, Appium uses Apple UIAutomation API to test the user interface element for automating apps on IOS devices. That is, it utilizes the principle of RESTful services by sending JSON files. These files then work with an iOS application using UI elements such as buttons and text labels through Apple’s UIAutomation API for the application testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-for-running-appium-test-on-ios-devices"&gt;
  &lt;/a&gt;
  Best Practices for running Appium test on IOS devices
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install and launch the Appium server on your device before starting the testing procedures.&lt;/li&gt;
&lt;li&gt;Get the necessary information of the IOS device used for testing to set the desired capabilities. Details such as the IOS version, bundled, and device name.&lt;/li&gt;
&lt;li&gt;Create a new project in Eclipse to write the Appium test scripts for your IOS devices.&lt;/li&gt;
&lt;li&gt;Inspect the UI for IOS using Appium Desktop Inspector. It can also be used to record functions for accurate debugging.&lt;/li&gt;
&lt;li&gt;Run tests on real devices instead of virtual devices to get the expected results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Due to Appium cross-platform ability and ease of use, it has become widely used in testing mobile applications for IOS and Android. However, there is a need to set up major software and hardware components before testing an application with Appium. These components include an Appium server, JDK, Java, SDK, and more. Once all these are in place, you can efficiently test your Android and iOS apps.&lt;/p&gt;

&lt;p&gt;Read more: &lt;a href="https://dev.to/katalon/appium-vs-selenium-architecture-functionality-applications-and-everything-in-between-2ab3"&gt;Appium vs Selenium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/appium-tutorial-mobile-testing/"&gt;Appium Tutorial | Introduction to Android and IOS Mobile Apps Testing&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>appium</category>
      <category>tutorials</category>
      <category>mobiletesting</category>
      <category>softwaretesting</category>
    </item>
    <item>
      <title>Appium vs Selenium — Architecture, Functionality, Applications, and Everything in Between</title>
      <author>TestingNews</author>
      <pubDate>Tue, 03 Aug 2021 02:12:53 +0000</pubDate>
      <link>https://dev.to/katalon/appium-vs-selenium-architecture-functionality-applications-and-everything-in-between-2ab3</link>
      <guid>https://dev.to/katalon/appium-vs-selenium-architecture-functionality-applications-and-everything-in-between-2ab3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ehMByZCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Differences-between-Selenium-and-Appium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ehMByZCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Differences-between-Selenium-and-Appium.png" alt="Differences between Selenium and Appium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s perhaps difficult to remember life before smartphones. Today, mobile phones have transformed dramatically to become the information and communication hub fundamental to modern life: from paying for your next meal to tracking your sleep habits. This explosion of the mobile industry puts testing professionals under pressure to keep up with speed without sacrificing their mobile apps’ quality.&lt;/p&gt;

&lt;p&gt;When opting for the best-fit mobile testing solution, Selenium and Appium are the two most frequent recommendations. This article contains the comparison of both tools, along with their key features, to make the selection process easier for you and your team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-selenium"&gt;
  &lt;/a&gt;
  What is Selenium?
&lt;/h2&gt;

&lt;p&gt;Selenium is an open-source framework used for web application validation. Established and run by the public community since 2004, Selenium has been recognized as the standard framework for all later automation testing platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B31DySoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Selenium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B31DySoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Selenium.png" alt="What is Selenium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selenium is a suite of tools, including three components: Selenium WebDriver, Selenium IDE, and Selenium Grid. The suite once had another component, which is Selenium Remote Control (Selenium RC). However, due to some significant limitations that were all resolved by the WebDriver, Selenium RC was officially removed from the Selenium 3.0. Providing a single interface, &lt;a href="https://www.katalon.com/resources-center/blog/selenium-alternative-solution-2020/"&gt;Selenium&lt;/a&gt; allows users to write test scripts in a wide range of programming languages: Ruby, Java, NodeJS, Perl, Python, C# and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium WebDriver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developed as a collection of open-source APIs, Selenium WebDriver supports various browsers like Firefox, Safari, Chrome, and Internet Explorer. Unlike Selenium RC, its sibling in the Selenium family, WebDriver directly communicates with the browsers without relying on JavaScript.&lt;/p&gt;

&lt;p&gt;There’s no need to wait for page elements to load since WebDriver can support the headless HtmlUnit browser without GUI, accelerating the test execution cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium IDE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selenium IDE is a recording tool used to develop and edit Selenium test cases for web applications. Suitable for even novice programmers, it requires no particular setup step to get started with Selenium IDE, except for adding the extension of the tester’s specific browser.&lt;/p&gt;

&lt;p&gt;The development environment offers the capability of converting test cases to different programming languages, giving testers greater flexibility in test execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium Grid&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selenium Grid is designed to run multiple tests across different operating systems, browsers, and machines in parallel. It’s a significant relief for heavy test loads: enabling QA to manage large test suites faster and reduce the total time to complete a parallel-testing complete pass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-appium"&gt;
  &lt;/a&gt;
  What is Appium?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FoP4Nki8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Appium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoP4Nki8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Appium.png" alt="What is Appium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Appium, on the other hand, is an open-source tool with features to simplify mobile app automation testing. With powerful and cross-platform capabilities, the tool is widely used for all mobile apps: native, hybrid and web applications. Before being funded and maintained by Sauce Labs in 2013, its original release was in 2011 by developer Dan Cuellar, written in C# programming language.&lt;/p&gt;

&lt;p&gt;Appium allows writing automated scripts using multiple programming languages, such as Java, PHP, Perl, Python, etc. The widespread acceptance of Appium results from its robust capability of writing tests against various platforms (iOS, Android, Windows).&lt;/p&gt;

&lt;p&gt;With its foundation written in Node.js, Appium works using client-server architecture, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Appium Client:&lt;/strong&gt; an automation scripted code that holds the configuration details of the mobile device and the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Appium Server:&lt;/strong&gt; it receives command requests from the Appium client in JSON format and executes it on mobile devices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;End Device:&lt;/strong&gt; mainly a &lt;a href="https://www.katalon.com/resources-center/blog/mobile-cloud-testing/"&gt;real-time mobile device&lt;/a&gt;, or an emulator in which the automated scripts are performed, with the connection from Appium Server and commands from Client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appium-and-selenium-frameworks-for-automation-mobile-testing"&gt;
  &lt;/a&gt;
  Appium and Selenium Frameworks for Automation Mobile Testing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi9qbs8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Appium-and-Selenium-for-Automation-Mobile-Tesing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi9qbs8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Appium-and-Selenium-for-Automation-Mobile-Tesing.png" alt="Appium and Selenium for Automation Mobile Tesing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test automation has come into play and taken the developer’s part to monitor how their mobile apps work across all possible device variants. It provides vital debugging information on which should be fixed before launch. Among a &lt;a href="https://medium.com/@briananderson2209/best-mobile-testing-tools-ios-android-3efb84fa39"&gt;diverse population of automation testing tools&lt;/a&gt;, Appium, and its combination with Selenium Webdriver are the top choice on account of their flexibility and scalability.&lt;/p&gt;

&lt;p&gt;You’ve perhaps read this statement several times: &lt;em&gt;“Appium is like Selenium — but for mobile apps and games”&lt;/em&gt;. Yes, Appium and its various integrations with third-party tools empower testers to write automated test scripts (for iOS, Android, and Windows) even when &lt;strong&gt;real devices&lt;/strong&gt; and &lt;strong&gt;real browsers&lt;/strong&gt; are used in the testing process.&lt;/p&gt;

&lt;p&gt;By leveraging both tools in the testing lab, testers now have the best of both worlds. In case the QA team is familiar with Selenium and uses it for web testing, then bringing in Appium to test mobile apps is a logical next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-differences-between-appium-selenium-and-katalon-studio-topchoices-automation-tool"&gt;
  &lt;/a&gt;
  The Differences between Appium, Selenium and Katalon Studio &lt;strong&gt;—&lt;/strong&gt; Top-Choices Automation Tool
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OAnfXXZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/A-comparison-of-Selenium-Appium-and-Katalon-Studio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAnfXXZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/A-comparison-of-Selenium-Appium-and-Katalon-Studio.png" alt="A comparison of Selenium, Appium and Katalon Studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;On the whole, the definition of a best-fit mobile testing solution certainly depends on your product and team: testing strategy, member’s expertise and team’s budget. Your testing tool choice should be software that fits into your team, not software for your team to fit in!&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/appium-vs-selenium/"&gt;Appium vs Selenium — Architecture, Functionality, Applications, and Everything in Between&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>automationtesting</category>
      <category>softwaretesting</category>
      <category>selenium</category>
      <category>appium</category>
    </item>
    <item>
      <title>Arrays, hash tables, linked lists, queues, stacks, &amp; trees  (My repl.it playground while studying for FAANG) </title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 03 Aug 2021 01:15:17 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/arrays-hash-tables-linked-lists-queues-stacks-trees-my-repl-it-playground-while-studying-for-faang-26i2</link>
      <guid>https://dev.to/cleancodestudio/arrays-hash-tables-linked-lists-queues-stacks-trees-my-repl-it-playground-while-studying-for-faang-26i2</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@zhorton34/Data-Structures?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repl.it project was my sandbox/playground while I was studying for my FAANG interviews - not all data-structures and/or algorithms are guaranteed to work. This repl.it project is like my personal notes/journal - not professionally backed or tested. I could be wrong in my implementation and some parts may not work all together. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kKOeyR8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqdbgz3643atbg6k8bzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKOeyR8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqdbgz3643atbg6k8bzj.png" alt="Repl.it folder structure"&gt;&lt;/a&gt;&lt;br&gt;
Feel free to comment below if you want clarification on the credibility of some of the data structures shown in my practice repo.&lt;/p&gt;



&lt;p&gt;This is the &lt;strong&gt;index.js&lt;/strong&gt; page shown in the repl.it linked above. Uncomment the require statement that loads the file to the given data structure you want to tinker with then press the play/run button to re-execute the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**----------------------------------------------
 | Arrays
 *-----------------------------------------------
 |
 |   . Pros
 |     - Ordered
 |     - Fast lookups
 |     - Fast push &amp;amp; pop
 |
 |   . Cons
 |     - Slow iserts
 |     - Slow deletes
 |     - Fixed size (when using static arrays)
 |
 |   . Operations
 |     - append O(1)*
 |       -&amp;gt; may be O(n) 
 |       -&amp;gt; if allocated memory block needs more space
 |     - lookup O(1)
 |     - insert O(n)
 |     - delete O(n)
 |
 */&lt;/span&gt;

&lt;span class="c1"&gt;// require('./arrays/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/static-vs-dynamic.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/strings-and-arrays.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/merge-sorted-arrays.js')&lt;/span&gt;


&lt;span class="cm"&gt;/**----------------------------------------------
 | Hash Tables
 *-----------------------------------------------
 |
 |   . Pros
 |     - Fast lookups*
 |     - Fast inserts
 |     - Flexible keys
 |
 |   . Cons
 |     - Unordered
 |     - Slow key iteration
 |
 |   . Operations
 |     - insert O(1)
 |     - lookup O(1)
 |     - delete O(1)
 |     - search O(1)
 |
 */&lt;/span&gt;


&lt;span class="c1"&gt;// require('./hash-tables/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./hash-tables/collisions.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./hash-tables/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./hash-tables/first-recurring-character.js')&lt;/span&gt;


&lt;span class="cm"&gt;/**----------------------------------------------
 | Linked List
 *-----------------------------------------------
 |
 |   . Pros
 |     - Ordered
 |     - Flexible size
 |     - Fast deletion
 |     - Fast insertion
 |
 |   . Cons
 |     - Slow lookup
 |     - More memory
 |
 |   . Operations
 |     - prepend O(1)
 |     - append O(1)
 |     - lookup O(n)
 |     - insert O(n)
 |     - delete O(n)
 |
 */&lt;/span&gt;

&lt;span class="c1"&gt;// require('./linked-lists/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./linked-lists/pointer.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./linked-lists/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./linked-lists/reverse.js')&lt;/span&gt;


&lt;span class="c1"&gt;// require('./stacks/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./stacks/implementation.js')&lt;/span&gt;

&lt;span class="c1"&gt;// require('./queues/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./queues/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./queues/queues-using-stacks.js')&lt;/span&gt;



&lt;span class="cm"&gt;/**----------------------------------------------
 | Trees
 *-----------------------------------------------
 |
 |
 */&lt;/span&gt;
&lt;span class="c1"&gt;// require('./trees/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./trees/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./trees/binary-search-tree-implementation.js')&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./linked-lists/implementation.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;All of my Data Structures and Algorithms Notes for FAANG Interview Preparation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>career</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>[Opinión] El problema del liderazgo en los equipos de tecnología.</title>
      <author>Juan A. Reséndiz</author>
      <pubDate>Mon, 02 Aug 2021 23:27:45 +0000</pubDate>
      <link>https://dev.to/jresendiz27/opinion-el-problema-del-liderazgo-en-los-equipos-de-tecnologia-3m6p</link>
      <guid>https://dev.to/jresendiz27/opinion-el-problema-del-liderazgo-en-los-equipos-de-tecnologia-3m6p</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Esto es mi opinión, la comparto y espero poder generar conciencia y un poco de debate sano; con la finalidad de mejorar o bien, comenzar con el camino de un liderazgo integral en la industria de tecnología.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conforme pasan los años y uno va creciendo en TI (hablando específicamente en la industria del Software) te das cuenta de las fuertes deficiencias en educación emocional, comunicación y resolución de conflictos que existen en la industria.&lt;/p&gt;

&lt;p&gt;Desafortunadamente es algo de lo que pecamos muchos en el área, nuestro egoísmo y &lt;a href="https://carloscastrom.wordpress.com/2012/06/24/teorias-de-comunicacion-que-es-gatekeeping/"&gt;gatekeeping&lt;/a&gt; nos impiden buscar un crecimiento organizacional íntegro y orgánico sin tener que aspirar siempre a ser el mejor en todo.&lt;/p&gt;

&lt;p&gt;Estos problemas permean mucho más allá cuando contamos con posiciones de liderazgo y nos deja con una gran deficiencia al intentar ser líderes de equipo. &lt;/p&gt;

&lt;p&gt;Imaginemos la siguiente mezcla: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatekeeping&lt;/li&gt;
&lt;li&gt;Sesgos personales&lt;/li&gt;
&lt;li&gt;Poca educación emocional (empatía, tolerancia, respeto, etc)&lt;/li&gt;
&lt;li&gt;Mala comunicación (timing, ortografía, tono de voz, etc)&lt;/li&gt;
&lt;li&gt;Egoísmo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es una exquisita combinación para el desastre. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cu%C3%A1l-podr%C3%ADa-ser-el-origen-de-este-problema"&gt;
  &lt;/a&gt;
  ¿Cuál podría ser el origen de este problema?
&lt;/h2&gt;

&lt;p&gt;Esta es una excelente pregunta, y considero, no hay una respuesta correcta, si no, un universo de éstas. &lt;/p&gt;

&lt;p&gt;Bajo mi perspectiva, uno de los principales factores viene desde la formación y perfil de áreas relacionadas a ingeniería.&lt;/p&gt;

&lt;p&gt;En ciertas escuelas/empresas/bootcamps se nos enseña que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Somos los mejores"&lt;/li&gt;
&lt;li&gt;"Podemos con todo lo que tenemos enfrente"&lt;/li&gt;
&lt;li&gt;"Cómo sea, pero hazlo"&lt;/li&gt;
&lt;li&gt;"Todos los egresados y egresadas de aquí terminan en las FAANG"&lt;/li&gt;
&lt;li&gt;"Si X persona no sabe Y concepto, ¿Para qué lo quiero en mi equipo?"&lt;/li&gt;
&lt;li&gt;"Necesito profesionales y especialistas, no code monkeys"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estas y muchas otras frases las podemos encontrar en #TechTwitter &lt;strong&gt;(donde también hay MUCHO apoyo y pasión por querer cambiar esto)&lt;/strong&gt;,así como rondando en chats de algunas comunidades, Linkedin y hasta dentro de los mismos procesos de reclutamiento (si eres entrevistador o aplicante, te invito a analizarlo).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Este tipo de ideas durante nuestra etapa formativa, terminan por acentuar conductas, por ejemplo: elitismo, egoísmo, falta de empatía, un debate sesgado y acotado por nuestro mismo grupo social, etc; que pueden o van a perdurar por años&lt;/strong&gt;, siempre y cuando no decidamos tomar conciencia, aceptar que se puede cambiar y actuar a nivel personal.&lt;/p&gt;

&lt;p&gt;Ahora imagina que tu líder (tech lead, manager, líder de área, CTO, CEO, etc) comparte esas mismas ideas, esto termina por generar procesos con muchos sesgos y acentuar dichos comportamientos. &lt;/p&gt;

&lt;p&gt;El resultado es &lt;strong&gt;un equipo fragmentado y una comunidad viciada&lt;/strong&gt; con esas mismas ideas; brindando también &lt;strong&gt;inconformidad y alta rotación en los equipos&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existe-una-soluci%C3%B3n-o-cu%C3%A1l-ser%C3%ADa-el-camino-m%C3%A1s-adecuado"&gt;
  &lt;/a&gt;
  Existe una solución o ¿cuál sería el camino más adecuado?
&lt;/h2&gt;

&lt;p&gt;Esta pregunta, igual que la anterior, no tienen una respuesta única ni absoluta (porque se terminaría por polarizar, y no es el objetivo); sin embargo, hay caminos validados y documentados.&lt;/p&gt;

&lt;p&gt;Es necesario comenzar con el proceso de deconstrucción como individuos (más aún los que estamos en posiciones de liderazgo), eso nos permitirá analizar y comprender mejor nuestros sesgos, fortalezas, debilidades y miedos (que se suelen reflejar en acciones que reprimen y limitan a nuestro equipo), y así comenzar a cuestionar si lo que somos es realmente lo que queremos tener en nuestra carrera profesional y mostrar como estandarte de un área. &lt;/p&gt;

&lt;p&gt;Aceptar la enorme diversidad de opiniones y como cada una de estas son valiosas para el crecimiento integral de la comunidad, será uno de los pilares para lograr una comunicación sana dentro del equipo.&lt;/p&gt;

&lt;p&gt;Estar abiertos como líderes del área a opiniones totalmente distantes de las nuestras, para comprenderlas y complementarlas o bien, incentivar el debate sano en los equipos a los que lleguemos a formar parte.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cambiar la imposición por guía, fomentar la comunicación abierta, motivar la retroalimentación empática, incentivar el reconocimiento, invitar a cometer y aprender de los errores&lt;/strong&gt;, son algunas de las muchas acciones que podemos tomar cuando estamos al frente de un equipo.&lt;/p&gt;

&lt;p&gt;Quitarnos la idea y esa pasión por el control en cada uno de los procesos de nuestros equipos y comprender, &lt;strong&gt;que la diversidad ideológica nos permite un crecimiento integral&lt;/strong&gt;, nos da una excelente oportunidad para crecer profesional y emocionalmente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#la-educaci%C3%B3n-emocional-una-herramienta-dif%C3%ADcil-de-encontrar-y-a-veces-igual-de-complicado-de-desarrollar"&gt;
  &lt;/a&gt;
  La educación emocional: una herramienta difícil de encontrar y a veces igual de complicado de desarrollar.
&lt;/h2&gt;

&lt;p&gt;Estas famosas &lt;em&gt;Soft Skills&lt;/em&gt; (también muy relacionadas con la educación emocional), pueden ser unos de los factores de diferenciación entre un excelente compañero de trabajo (ya sea líder o no) o bien, alguien a quien podemos apoyar e incentivar a crecer a la par con el resto del equipo o de la organización. &lt;/p&gt;

&lt;p&gt;A título personal, estas habilidades me ha tocado desarrollarlas a través de procesos complejos (terapia, cometer errores, pérdidas, cambios de trabajo, etc), siendo mi experiencia sólo uno de los muchos caminos igual de válidos para lograrlo. &lt;/p&gt;

&lt;p&gt;Lo más importante es &lt;strong&gt;desarrollar la humildad, cuestionar la formación/idea que tenemos de nosotros, buscando siempre  nuestro crecimiento a la par de la comunidad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Como líderes, debemos recordar que todos los seres humanos tenemos una gran cualidad: la vulnerabilidad; esta nos permite detectar nuestras fortalezas y debilidades, a pesar de lo amargo que puede llegar a ser reconocerla y afrontarla.&lt;/p&gt;

&lt;p&gt;Terminaré por preguntarte: &lt;strong&gt;Y tú, ¿por donde comenzarás a cuestionarte y cuestionar los procesos e ideas que tienes a tu alrededor?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>software</category>
      <category>liderazgo</category>
      <category>opinion</category>
      <category>management</category>
    </item>
    <item>
      <title>6 Helpful OS Module Methods</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 02 Aug 2021 23:19:13 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/6-helpful-os-module-methods-5e3k</link>
      <guid>https://dev.to/ayabouchiha/6-helpful-os-module-methods-5e3k</guid>
      <description>&lt;p&gt;Hello,&lt;br&gt;
I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;,&lt;br&gt;
today,&lt;br&gt;
I'm going to share with you &lt;strong&gt;6 useful os module method&lt;/strong&gt;s.&lt;br&gt;
Firstly, we need to know that the os module is built-in in python, it is used for interacting with the operating system.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getcwd"&gt;
  &lt;/a&gt;
  getcwd()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;getcwd()&lt;/strong&gt;: this method helps you to get the absolute path of the current working directory as a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# C:\Users\AyaBouchiha\Desktop\posts
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#osmkdir"&gt;
  &lt;/a&gt;
  os.mkdir()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;mkdir()&lt;/strong&gt;: lets you create a new directory if it does not exists, else it raises an error (FileExistsError)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# done :)
&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# error (FileExistsError)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#osrmdir"&gt;
  &lt;/a&gt;
  os.rmdir()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;rmdir()&lt;/strong&gt;: helps you to remove an empty directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# done
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python/newFolder'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# done
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python/newFolder'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# error (FileNotFoundError)
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'something/does-not-exists'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# error (NotADirectoryError)
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#osremove"&gt;
  &lt;/a&gt;
  os.remove()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;remove()&lt;/strong&gt;: lets you delete a file. If it does not exists, this method raises an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# done
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts/python/test.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# error(FileNotFoundError)
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts/python/test.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ospathisfile"&gt;
  &lt;/a&gt;
  os.path.isfile()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;isfile()&lt;/strong&gt;: returns True if the given path is a regular file, otherwise It returns False.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="n"&gt;my_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'posts/python/os_module.py'&lt;/span&gt;
&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_file_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;file_does_not_exists_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'posts/python/os_module.json'&lt;/span&gt;
&lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_does_not_exists_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;directory_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'posts/python'&lt;/span&gt;
&lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#oslistdir"&gt;
  &lt;/a&gt;
  os.listdir()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;listdir()&lt;/strong&gt;:  returns a list that contains all files and directories names that exist in the specified path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts/'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Output:
# [
#  '5_list_python_methods.md',
#  'js_resources.md',
#  'MapObject.md',
#  'os_module.md',
#  'os_module.py',
#  'python'
# ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;getcwd()&lt;/strong&gt;: returns the absolute path of the current working directory as a string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mkdir()&lt;/strong&gt;: creates a new directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;rmdir()&lt;/strong&gt;: removes an empty directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;remove()&lt;/strong&gt;: deletes a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;isfile()&lt;/strong&gt;: returns True if the given path is a regular file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;listdir()&lt;/strong&gt;:  returns a list that contains all files and directories names that exist in the specified path.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0"&gt;All You Need To Know About Python JSON Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Random Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Math Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7"&gt;5 Useful Python String Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;AyaBouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Dev log for Wonder Wanderer 2: Day 2 #LOWREZJAM</title>
      <author>Michael Primo</author>
      <pubDate>Mon, 02 Aug 2021 22:50:34 +0000</pubDate>
      <link>https://dev.to/michaelprimo/dev-log-for-wonder-wanderer-2-day-2-lowrezjam-18bm</link>
      <guid>https://dev.to/michaelprimo/dev-log-for-wonder-wanderer-2-day-2-lowrezjam-18bm</guid>
      <description>&lt;p&gt;It's the second day for me on the LOWREZJAM.&lt;br&gt;
I made a mental roadmap and that consist on making a character with multiple ways of movement (so, top down and 2D side-scroller) and a map with collisions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-do-today"&gt;
  &lt;/a&gt;
  What did I do today?
&lt;/h3&gt;

&lt;p&gt;I managed to do today a basic movement for the character, adding gravity, the direction and the force of it with a little drawing of a map includes, and two buttons with a fake jump (without friction) and a button that changes gravity (it's not like VVVVVV, you can use this ability to do some wall-running, but you will see). I hope to do better jumps, map collisions and some hazards next day.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ybocyCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiui3l77mulhxbto3bj9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ybocyCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiui3l77mulhxbto3bj9.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>javascript</category>
      <category>challenge</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Apprendre Vue.js 3 - Jour 3 : Vuex</title>
      <author> Eric Le Codeur</author>
      <pubDate>Mon, 02 Aug 2021 22:33:53 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/apprendre-vue-js-3-jour-3-vuex-28il</link>
      <guid>https://dev.to/ericlecodeur/apprendre-vue-js-3-jour-3-vuex-28il</guid>
      <description>&lt;p&gt;Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#vuex-state-managment"&gt;
  &lt;/a&gt;
  Vuex - State Managment
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#le-state-management-pour-votre-application-vue"&gt;
  &lt;/a&gt;
  Le state management pour votre application Vue
&lt;/h3&gt;

&lt;p&gt;La création de plusieurs components et plusieurs sous components entraine comme conséquence un partage des données et méthodes (via les Props et les Events) entre components qui devient vient très complex. Afin de simplifier cette gestion, Vue met à votre disposition la librairie Vuex.&lt;/p&gt;

&lt;p&gt;Vuex permet de centraliser la gestion du state (des données et méthodes) de vos components en un seul endroit. Cet endroit est appelé le Store. &lt;/p&gt;

&lt;p&gt;Le store permet de sauvegarder et de modifier votre state et cela à partir de n'importe quel component de votre application.&lt;/p&gt;

&lt;p&gt;Du coup, le store est donc ce que l'on appel le 'single source of truth" de votre application.&lt;/p&gt;

&lt;p&gt;L'historique de toutes les modifications faite au store est sauvegardé ce qui permet de faciliter grandement le débugging de votre application&lt;/p&gt;

&lt;p&gt;Pour créer un store vous devez d'abord installer la librairie Vuex et initialiser l'object Vuex&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;vue&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;vuex&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#emplacement-de-votre-store-vuex"&gt;
  &lt;/a&gt;
  Emplacement de votre Store Vuex
&lt;/h3&gt;

&lt;p&gt;Créer un dossier et fichier sour src/store/index.js&lt;/p&gt;

&lt;p&gt;Ajouter le code de création du Store&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CreateStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une fois le Store créer, vous pouvez le lier à votre application en ajoutant ce code à src/main.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une fois votre store lié à votre application vous pouvez utiliser la méthode spécial $store pour accéder à votre store de n'importe quel component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que si la variable title de votre store change, tous les components ou sous component qui l'utilise seront automatiquement mis à jour.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#m%C3%A9thode-computed"&gt;
  &lt;/a&gt;
  Méthode computed
&lt;/h3&gt;

&lt;p&gt;Pour accéder au store, il n'est pas considérer de bonne pratique d'utiliser directement  ex. $store.state.title dans votre template.&lt;/p&gt;

&lt;p&gt;La convention veut que vous utilisé une méthode computed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ou composition API&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mapstates"&gt;
  &lt;/a&gt;
  mapStates
&lt;/h3&gt;

&lt;p&gt;Si vous avez plusieurs variables state à créer, ça peut en effet prendre plus de temps pour écrire une computed pour chaque variable. C'est pourquoi Vue met à votre disposition une syntaxe raccourci&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapStates&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mapStates&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modifier-le-state-avec-les-mutations"&gt;
  &lt;/a&gt;
  Modifier le State avec les Mutations
&lt;/h3&gt;

&lt;p&gt;Une méthode de mutation permet de modifier votre state.&lt;/p&gt;

&lt;p&gt;src/store/index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CreateStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;SET_TITLE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que par convention les méthodes de mutations sont écrite en lettre majuscule ACTION_VARIABLE&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#m%C3%A9thode-commit"&gt;
  &lt;/a&gt;
  Méthode commit()
&lt;/h3&gt;

&lt;p&gt;Pour appeler la mutation à partir de votre component vous utilisez la méthode commit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_TITLE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My new Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Syntaxe raccourci si plusieurs déclaration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapMutations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapMutations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_TITLE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_COUNT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET_TITLE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My new Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que par convention vous ne devez jamais avoir de méthode de mutation async&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h3&gt;

&lt;p&gt;Les méthode qui utilisent le async vont être géré avec les Actions&lt;/p&gt;

&lt;p&gt;Les Actions sont également utilisés quand vous désirez effectuer un traitement plus complex sur le state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CreateStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;SET_TITLE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resetTitle&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;possible&lt;/span&gt; &lt;span class="nx"&gt;ici&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;lire&lt;/span&gt; &lt;span class="nx"&gt;une&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_TITLE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les méthodes actions peuvent avoir accès au paramètre context qui est en faite l'object $store. Il est donc possible de faire de la déconstruction. ex. { state, commit, mutations, etc. }&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#m%C3%A9thode-dispatch"&gt;
  &lt;/a&gt;
  Méthode dispatch()
&lt;/h3&gt;

&lt;p&gt;Pour appeler les actions à partir de vos component vous utilisez la méthode dispatch()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetTitle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que le async/await est utiliser seulement si besoin async&lt;/p&gt;

&lt;p&gt;Syntaxe raccourci si plusieurs déclaration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapActions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetTitle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetCount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetTitle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exemple store.dispatch() et computed() avec 'script setup'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vuex'

const store = useStore()
const products = computed(() =&amp;gt; store.state.products)

store.dispatch('fetchProducts')

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Merci d'avoir lu cet article. Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>french</category>
      <category>javascript</category>
      <category>vue</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I went from struggling with math to becoming a data and analytics advocate</title>
      <author>Mixpanel</author>
      <pubDate>Mon, 02 Aug 2021 22:26:02 +0000</pubDate>
      <link>https://dev.to/mixpanel/how-i-went-from-struggling-with-math-to-becoming-a-data-and-analytics-advocate-1jm8</link>
      <guid>https://dev.to/mixpanel/how-i-went-from-struggling-with-math-to-becoming-a-data-and-analytics-advocate-1jm8</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written by Mixpanel Community Manager Jaz Broughton and originally appeared on Mixpanel's product analytics blog, &lt;a href="https://mixpanel.com/blog"&gt;The Signal&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve struggled with math since high school.&lt;/p&gt;

&lt;p&gt;It wasn’t that I was incapable of doing simple algebra here and there. My hangup was the topic in general. I always had a hard time applying any real focus on the abstract shapes and concepts with no tangible connection to what I actually cared about.&lt;/p&gt;

&lt;p&gt;I’m sure this was my dad’s philosophy rubbing off on me. He’s been a carpenter my whole life (and a DJ, but that’s a story for another time). As a child, I would hear him saying things like, “You’re not going to have me in a class just learning numbers for the sake of it.”&lt;/p&gt;

&lt;p&gt;Well, today I lead the  &lt;a href="https://community.mixpanel.com/"&gt;Mixpanel Community&lt;/a&gt;, a place full of stat-powered technical people discussing and learning about data tools. I’ve loved this job and the last several years of my career working in numbers—something that 16-year-old me would be surprised to hear.&lt;/p&gt;

&lt;p&gt;How did I go from someone who ran from anything math-related to a professional advocate for data-led business practices?&lt;/p&gt;

&lt;p&gt;Below is my story about finding a connection to math and the advice I give to people every day who want to overcome their own quant struggles to unlock the power of data and analytics in their work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-faces-to-the-numbers"&gt;
  &lt;/a&gt;
  Putting faces to the numbers
&lt;/h2&gt;

&lt;p&gt;There was no single lightbulb moment for when I “got” math—just a series of career moments that showed me, over time, that I’m not  &lt;em&gt;bad&lt;/em&gt; at it.  &lt;strong&gt;As time went on, the more and more I saw how numbers connected to business and to processes, things became clearer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started out as a property manager and administrator in the hospitality industry. As part of the role, I was involved in a six-week project to adjust room rates based on a large dataset (all in spreadsheets). I didn’t set up the math behind it, but I saw the result: the projected revenue from certain rates at certain times. Very cool and very useful! (I’d eventually learn this is the same kind of cause and effect product teams analyze when developing a product.)&lt;/p&gt;

&lt;p&gt;Over time, I learned the tools myself—how to pull the right data, how to plug it in, and how to read the results. It was only when I happened into a revenue management role that the next big revelation came: Working with math and data in the real world meant it wasn’t just empty numbers; it was people and price points.&lt;/p&gt;

&lt;p&gt;I could get my head around the numbers in the right context. That not only made math more manageable, but it also made it more interesting.&lt;/p&gt;

&lt;p&gt;Even with that realization, my first foray into tech wasn’t in a data or revenue role; it was in Customer Success (a role I’m still very much passionate about). Then, after a few more years, I would combine the two: the people-focus of Customer Success and the hard numbers of revenue and product analytics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-new-career-in-data-and-analytics"&gt;
  &lt;/a&gt;
  My new career in data and analytics
&lt;/h2&gt;

&lt;p&gt;My Customer Success Manager role wasn’t numbers-focused on its face, but I quickly found out how helpful data and analytics could be in the job.&lt;/p&gt;

&lt;p&gt;I could sit down, pull up MongoDB, pull in some stats, and run some chart drops. Suddenly I had a better picture of what works and what doesn’t with the customers we were working with. The technology itself is what made me feel more confident with numbers.&lt;/p&gt;

&lt;p&gt;Most of the time, success teams rely on phone calls with clients and generous users reaching out to report what’s working and what’s not. But data tools allowed me to see, in black and white, exactly what was happening—and then make some educated guesses around  &lt;em&gt;why&lt;/em&gt; it was happening. Even if it was just a simple /TRUE/FALSE boolean column in a .csv file, the data gave me what I needed.&lt;/p&gt;

&lt;p&gt;Then things took another (favorable) turn.&lt;/p&gt;

&lt;p&gt;My first experience with Mixpanel came when I was working with another company. We were doing a rollout with a customer that had 900 employees and I wanted to see how the team had been using the training materials. I went to a product manager and, instead of pulling up a spreadsheet, he pulled up Mixpanel. A couple of clicks later, I had all the information that previously would’ve meant spending a full day in spreadsheets.&lt;/p&gt;

&lt;p&gt;I was hooked.&lt;/p&gt;

&lt;p&gt;My badge of honor, after all, isn’t in me doing the calculations myself. It’s all about being able to pull together trends, identify themes, and present options all based on data. Now I knew there was a tool that would help me do all that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-a-datafocused-mindset"&gt;
  &lt;/a&gt;
  How to build a data-focused mindset
&lt;/h2&gt;

&lt;p&gt;Sticking with a data-first approach is something I carried with me into my Customer Success Manager role with Mixpanel, and it’s something I continue to carry in my role as Community Manager.&lt;/p&gt;

&lt;p&gt;I want to know the numbers:  &lt;em&gt;How many people should I invite to this? How many people show up? How long did people stay? Where did they drop off?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you’re looking for that in your own role, you don’t have to start from scratch. Ask someone (a product manager, a more experienced rep, or even someone from the data science team) to show you how. Then iterate and learn from there. My first step into data and analytics wasn’t onboarding with some fancy tool. I just asked someone to show me how to pull data into a .csv and run some simple analyses.&lt;/p&gt;

&lt;p&gt;The same can be true for your foray into product analytics. What’s most important are the  &lt;em&gt;questions&lt;/em&gt; you’re asking, not necessarily the (more scary) numbers. In nearly every conversation I have with the Mixpanel community, I share my six steps for wrapping your head around analytics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Role &amp;amp; Purpose:&lt;/strong&gt;  What is the point of your role?&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Goal:&lt;/strong&gt;  What does success look like? What are you driving?&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Question:&lt;/strong&gt;  What do you need to know? What are you curious about? What remains a mystery?&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Report:&lt;/strong&gt;  Which report is best for this? Do you have an understanding of the different reports?&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Query:&lt;/strong&gt;  Translate that question into the query. Think of reporting period, visualization, level of detail, or level of summary.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Answer:&lt;/strong&gt;  Get the insight and use it to inform how you approach your goals and fulfill your purpose!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The best product analytics tools make these steps easy, especially when you can copy from your colleagues who have gone before you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-communitywith-the-power-of-data"&gt;
  &lt;/a&gt;
  Creating Community—with the power of data
&lt;/h2&gt;

&lt;p&gt;Here’s the TL;DR version: In the last few years, I’ve managed to turn math and data into work that I genuinely enjoy.&lt;/p&gt;

&lt;p&gt;It’s not that I’ve gotten better at math—it’s that I’ve gotten better at wielding what I know to help people. I can see what people are doing and I can see what people need, even before they raise their hand. With data, a simple post is more than that—it means someone is curious about the maturity of their product and team, whether they’re a solo product manager, an enthusiastic grad or a time-poor startup founder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With this approach, I’m helping to make the Mixpanel Community a place for genuine insight, inspiration, and connection for data-curious people.  &lt;a href="https://community.mixpanel.com/"&gt;Please come say hi!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For me, looking for the numbers in things has opened up so many new and exciting opportunities, and I hope that my story proves anyone has the capabilities to do the same—the math-averse included. Even dad has finally learned the usefulness of crunching numbers for a good cashflow outlook.&lt;/p&gt;

</description>
      <category>career</category>
      <category>database</category>
      <category>analytics</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Go, Gorilla/mux and mongo demo</title>
      <author>elesq</author>
      <pubDate>Mon, 02 Aug 2021 22:13:33 +0000</pubDate>
      <link>https://dev.to/iamelesq/go-gorilla-mux-and-mongo-demo-10j4</link>
      <guid>https://dev.to/iamelesq/go-gorilla-mux-and-mongo-demo-10j4</guid>
      <description>&lt;p&gt;What are we going to do?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup some tools for starting a containerised MongoDB and connecting to the shell.&lt;/li&gt;
&lt;li&gt;Create a connection to the database with Go&lt;/li&gt;
&lt;li&gt;perform some trivial CRUD.&lt;/li&gt;
&lt;li&gt;get an MVP knocked up, not paint the Sistine Chapel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simple. Let's go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-setup"&gt;
  &lt;/a&gt;
  Docker setup
&lt;/h2&gt;

&lt;p&gt;I'm assuming you have docker installed, if not head over to the docker site, follow the installation instructions for you system. Please forgive anything in the following section that is Mac specific and an oversight to make it OS agnostic.  OK so all good, Docker installed. Let's get an image of MongoDB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have an image successfully pulled you'll want to be able to start a container running it. There's couple of things here, you should read up on detached/interactive modes for docker. It's fairly self explanatory and you can control it with cli flags when starting a container -d detached mode, -it interactive mode respectively. Another thing we have to be mindful of is binding a container port to a local port. So to get a container running that is in detached mode and bound locally to the usual mongoDB port of &lt;code&gt;27017&lt;/code&gt; and with the ubiquitous &lt;code&gt;admin/password&lt;/code&gt; combo you can use a command like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; mongodb &lt;span class="nt"&gt;-v&lt;/span&gt; ~/data:/data/db &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;MONGO_INITDB_ROOT_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;admin &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;MONGO_INITDB_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password &lt;span class="nt"&gt;-p&lt;/span&gt; 27017:27017 mongo:4.4.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite a handful to memorise, so what I like to do with stuff like this is take the pain one time, drop that command in a runnable script that I can dump in my scripts folder and assign an alias to it so I can weave magic with a one or two keystroke combo.&lt;/p&gt;

&lt;p&gt;To do so, I'm creating a script called &lt;code&gt;startmongo.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ┌─┐┌┬┐┌─┐┬─┐┌┬┐        "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" └─┐ │ ├─┤├┬┘ │          "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" └─┘ ┴ ┴ ┴┴└─ ┴          "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ┌┬┐┌─┐┌┐┌┌─┐┌─┐┌┬┐┌┐  "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ││││ │││││ ┬│ │ ││├┴┐  "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ┴ ┴└─┘┘└┘└─┘└─┘─┴┘└─┘ "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" Starting a docker container running MongoDB...."&lt;/span&gt;


docker run &lt;span class="nt"&gt;--name&lt;/span&gt; postgres &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;vapor_database &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ed &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;foolsgold &lt;span class="nt"&gt;-p&lt;/span&gt; 5432:5432 postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives a jazzy little header and starts my container. Great stuff. Next I want to be able to connect to the shell incase I have any brut force operations that I want to do on the CLI. Again, I'm doing this once, sticking it in an easy script and hiding that behind an alias. The command is &lt;code&gt;docker exec -it mongodb bash&lt;/code&gt; to connect interactively to the container called mongoDB with a bash shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ┌┬┐┌─┐┌┐┌┌─┐┌─┐    "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ││││ │││││ ┬│ │     "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ┴ ┴└─┘┘└┘└─┘└─┘    "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ┌─┐┌┐┌               "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" │ ││││               "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" └─┘┘└┘               "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ┌┬┐┌─┐┌─┐┬┌─┌─┐┬─┐ "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  │││ ││  ├┴┐├┤ ├┬┘  "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" ─┴┘└─┘└─┘┴ ┴└─┘┴└─ "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" run mongo --username admin --password password for authenticated mongo shell"&lt;/span&gt;

&lt;span class="c"&gt;# open bash in contaner to connect to mongo shell&lt;/span&gt;
docker &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; mongodb bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can add these to your profile (.bashrc, .zshrc, .profile or .aliases however you're doing it) and source your profile script to ensure these new aliases are part of the env. You can now start them with easier to remember commands you've created yourself. Hurrah!&lt;/p&gt;

&lt;p&gt;Now we've got docker installed, mongo pulled and the ability to bring it up and connect to the shell with our own wizardry we can say that's section 1 of the post complete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-go-go"&gt;
  &lt;/a&gt;
  Go, Go Go....
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPwwTywZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/46f6612fa12dfdfeb1c4ac7b4b27ab2b/tenor.gif%3Fitemid%3D10966551" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPwwTywZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/46f6612fa12dfdfeb1c4ac7b4b27ab2b/tenor.gif%3Fitemid%3D10966551" alt="go go go"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we move to the &lt;code&gt;Go&lt;/code&gt; part. We'll be using the go-mongo driver, you can get this by creating your project folder and running your &lt;code&gt;go mod init github.com/username/projectname&lt;/code&gt; command and then running the go get for your dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go get go.mongodb.org/mongo-driver/mongo&lt;/li&gt;
&lt;li&gt;go get -u github.com/gorilla/mux&lt;/li&gt;
&lt;li&gt;go get gopkg.in/mgo.v2/bson&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We're good to go. (see what I did there?)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-connected"&gt;
  &lt;/a&gt;
  Get connected
&lt;/h2&gt;

&lt;p&gt;OK let's get the &lt;code&gt;main.go&lt;/code&gt; working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"go.mongodb.org/mongo-driver/bson"&lt;/span&gt;
    &lt;span class="s"&gt;"go.mongodb.org/mongo-driver/bson/primitive"&lt;/span&gt;
    &lt;span class="s"&gt;"go.mongodb.org/mongo-driver/mongo"&lt;/span&gt;
    &lt;span class="s"&gt;"go.mongodb.org/mongo-driver/mongo/options"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// dont put this in real code. Nobody will speak to you&lt;/span&gt;
    &lt;span class="n"&gt;credentials&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Credential&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;clientOptions&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApplyURI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mongodb://localhost:27017"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;clientOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appDB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"movies"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1/movies/{id:[a-zA-Z0-9]*}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMovie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1/movies/{id:[a-zA-Z0-9]*}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateMovie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1/movies/{id:[a-zA-Z0-9]*}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteMovie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodDelete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1/movies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostMovie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;srv&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="s"&gt;"localhost:8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;WriteTimeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ReadTimeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This is a demo, for the love of god &lt;em&gt;don't put your credentials into any "real" code like I have done in this above&lt;/em&gt;, you'll get blasted for it (rightly so), this is just for demo purposes. You'll want to put that sort of stuff into env variables and read them in.&lt;/li&gt;
&lt;li&gt;read #1 again!&lt;/li&gt;
&lt;li&gt;Note the DB structure. That's for convenience.&lt;/li&gt;
&lt;li&gt;We're using gorilla/mux to define and configure our multiplexer.&lt;/li&gt;
&lt;li&gt;hark at me with my fancy regex to grab any alphanumeric part of the url for matching IDs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next up we're going to cut some CRUD functions to be able to do some stuff with or database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;
    &lt;span class="n"&gt;objectID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;primitive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectIDFromHex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;objectID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PostMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;

    &lt;span class="n"&gt;postBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InsertOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;UpdateMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;

    &lt;span class="n"&gt;putBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;putBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;objectID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;primitive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectIDFromHex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;objectID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"$set"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;DeleteMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;objectID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;primitive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectIDFromHex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;objectID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There's a lot in these functions that could be outsourced to clean the functions and reduce code. Outside the scope of this basic connect and get a quick and dirty demo together.&lt;/li&gt;
&lt;li&gt;We can enhance the use of context to avoid using the .TODO context which is a default.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lastly we need to add the structs to make up a movie entity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt;        &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="s"&gt;`json:"id" bson:"_id,omitempty"`&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;      &lt;span class="s"&gt;`json:"name" bson:"name"`&lt;/span&gt;
    &lt;span class="n"&gt;Year&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;      &lt;span class="s"&gt;`json:"year" bson:"year"`&lt;/span&gt;
    &lt;span class="n"&gt;Directors&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"directors" bson:"directors"`&lt;/span&gt;
    &lt;span class="n"&gt;Writers&lt;/span&gt;   &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"writers" bson:"writers"`&lt;/span&gt;
    &lt;span class="n"&gt;BoxOffice&lt;/span&gt; &lt;span class="n"&gt;BoxOffice&lt;/span&gt;   &lt;span class="s"&gt;`json:"boxOffice" bson:"boxOffice"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;BoxOffice&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Budget&lt;/span&gt; &lt;span class="kt"&gt;uint64&lt;/span&gt; &lt;span class="s"&gt;`json:"budget" bson:"budget"`&lt;/span&gt;
    &lt;span class="n"&gt;Gross&lt;/span&gt;  &lt;span class="kt"&gt;uint64&lt;/span&gt; &lt;span class="s"&gt;`json:"gross" bson:"gross"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;we define the json and bson names/refs &lt;/li&gt;
&lt;li&gt;we have a relationship between movie and BoxOffice.&lt;/li&gt;
&lt;li&gt;we have attributes that take a slice of values. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;you can run the server and tap into this with some postman requests or simply with some curl requests. That choice is yours. That's hopefully enough for you to see how this works without focusing too much on code beauty by adding more abstraction at this stage.&lt;/p&gt;

&lt;p&gt;Quick &amp;amp; dirty but I hope if you need a quick smash &amp;amp; grab demo of using the mongo driver for Go with gorilla mux then it should be enough to get you started on the right path with one eye on creating cleaner, better code as you get to grips with it..... ps. don't embed credentials in code outside of a demo. &lt;/p&gt;

&lt;p&gt;Best wishes. &lt;/p&gt;

</description>
      <category>go</category>
      <category>mongodb</category>
      <category>gorilla</category>
    </item>
    <item>
      <title>How to Build Java Applications Today: August 2, 2021</title>
      <author>Karsten Silz</author>
      <pubDate>Mon, 02 Aug 2021 22:05:04 +0000</pubDate>
      <link>https://dev.to/ksilz/how-to-build-java-applications-today-august-2-2021-5bgg</link>
      <guid>https://dev.to/ksilz/how-to-build-java-applications-today-august-2-2021-5bgg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Follow-up, Stack Overflow “2021 Developer Survey”, fallacies of distributed computing, old COBOL works better with new COBOL, IntelliJ IDEA 2021.2, and Quarkus 2.1.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;issue 47&lt;/strong&gt; of my weekly newsletter, “How To Build Java Applications Today”. I read all the Java newsletters, so &lt;strong&gt;you&lt;/strong&gt; don’t have to! And it’s “Java news with a smile”.&lt;/p&gt;

&lt;p&gt;If you like my newsletter, then &lt;a href="https://bpfnl.substack.com"&gt;subscribe to it on Substack&lt;/a&gt;! Or read it on &lt;a href="https://dev.to/ksilz/series/11995"&gt;dev.to&lt;/a&gt;,  the &lt;a href="https://thejavacafe.com/ksilz/series/1"&gt;Java Cafe&lt;/a&gt;, or &lt;a href="https://ksilz.medium.com"&gt;Medium&lt;/a&gt;. Even better: Share it with people who may be interested.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quote-of-the-week"&gt;
  &lt;/a&gt;
  Quote of the Week
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Your margin is my opportunity.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://quoteinvestigator.com/2019/01/13/margin/"&gt;Jeff Bezos&lt;/a&gt;, rich &lt;a href="https://en.wikipedia.org/wiki/Jeff_Bezos"&gt;“astronaut”&lt;/a&gt;, has plenty of margin in AWS. When will Microsoft &amp;amp; Google fully seize that opportunity?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#standup"&gt;
  &lt;/a&gt;
  Stand-Up
&lt;/h2&gt;

&lt;p&gt;In my current project, I wanted to start the App Store/Google Play Store review process for our iOS and Android app last week. Exciting - I’ve never done that! But then I needed to upgrade the Flutter framework to version 2.2. And that version has &lt;a href="https://flutter.dev/docs/null-safety"&gt;null safety&lt;/a&gt; - fewer “NullPointerExceptions in Dart”. Sounds good, right?&lt;/p&gt;

&lt;p&gt;Yes, but it doesn’t come free: I had to upgrade every library I use, dragging in other changes. And then I had to declare for every variable, field, and parameter in my app whether it can be &lt;code&gt;null&lt;/code&gt; or not. I think I’m mostly done by now and hope that my app is better for it. I’ll keep you posted!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#code-review"&gt;
  &lt;/a&gt;
  Code Review
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#issue-45-from-july-26-2021"&gt;
  &lt;/a&gt;
  Issue 45 from July 26, 2021
&lt;/h3&gt;

&lt;p&gt;Last week I wrote about the three Quarkus 2.0 bug-fix releases as a sign that the Quarkus 2.0 release was premature. That was wrong! A big “Thank you!” goes to &lt;a href="https://twitter.com/SanneGrinovero"&gt;Sanne Grinovero&lt;/a&gt; for &lt;a href="https://twitter.com/karsilz/status/1421812801723637765?s=21"&gt;sparking a discussion with me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found out that Quarkus really has that many releases all the time. You wouldn’t know that from &lt;a href="https://en.wikipedia.org/wiki/Quarkus#Version_history"&gt;Wikipedia&lt;/a&gt;, which is missing many releases. But the Quarkus blog &lt;a href="https://quarkus.io/blog/tag/release/"&gt;shows them all&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;But “subatomic” still makes no sense to me: It means “sub-bit” for computer memory, which no software can do. &lt;/p&gt;

&lt;p&gt;To add insult to injury, Quarkus 2.1 was released last week. Read all about it in the “Release” section at the end!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#stack-overflow-2021-developer-survey"&gt;
  &lt;/a&gt;
  Stack Overflow “2021 Developer Survey”
&lt;/h4&gt;

&lt;p&gt;After the JetBrains “State of Developer Ecosystem 2021” boasted nearly 32k developers (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-67c"&gt;issue #45&lt;/a&gt;), the “2021 Developer Survey” from Stack Overflow has more than 83k responses. The survey ran from May 25 to June 15. So, is Java declining here as well?&lt;/p&gt;

&lt;p&gt;Yes. Compared to &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages"&gt;2020&lt;/a&gt;, Java’s dropped from programming language #3 (with 38.4%) among professional developers to #4 (with 34.5%). TypeScript passed us by!&lt;/p&gt;

&lt;p&gt;The good news: “Love” for Java has grown &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages"&gt;from 44.1%&lt;/a&gt; last year &lt;a href="https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-language-love-dread"&gt;to 47.2%&lt;/a&gt;, while “dread” declined from 55.9% to 52.9%. Still, Java scores worse than most languages in “love/dread”: We’re even behind C++! And fewer people want to learn Java this year: 6.8% vs. 8.8%.&lt;/p&gt;

&lt;p&gt;Worst of all: Nearly all other developers &lt;a href="https://insights.stackoverflow.com/survey/2021#technology-top-paying-technologies"&gt;make more money than us Java guys&lt;/a&gt;, except for Delphi, PHP &amp;amp; Dart! The survey gives Java “only” a median yearly salary of 51,888 US dollars. But there’s good news for other JVM languages: Kotlin is at 55k, Groovy at 75k (#11), and Scala at nearly 78k (#6). And Clojure takes the top spot with 95k, way ahead of F# (81k), Erlang, Perl, and Ruby (all 80k)!&lt;/p&gt;

&lt;p&gt;When it &lt;a href="https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-collaboration-tools"&gt;comes to IDEs&lt;/a&gt;, Visual Studio Code is most loved (79%). IntelliJ sits at a respectable 68%. The other Java IDEs take a beating: Eclipse is second-to-last with 31% love, while NetBeans is last with 22%. Strangely enough, last year’s survey didn’t include IDEs.&lt;/p&gt;

&lt;p&gt;There’s much more in the survey -  demographics, frameworks, databases, tools. And like the JetBrains survey, it’s a web page, not a PDF.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;Survey&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#software-engineering"&gt;
  &lt;/a&gt;
  Software Engineering
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-fallacies-of-distributed-computing"&gt;
  &lt;/a&gt;
  The Fallacies of Distributed Computing
&lt;/h4&gt;

&lt;p&gt;Around 1992-93, L. Peter Deutsch presented these fallacies at Sun. For my younger readers: That’s the company that invented Java. Now with microservice gaining ground, it’s a good time to look at these wrong assumptions again. Mr. Deutsch was recently interviewed for a podcast and corrected the &lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;Wikipedia article&lt;/a&gt; about them. &lt;/p&gt;

&lt;p&gt;Here are the fallacies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The network is reliable.&lt;/li&gt;
&lt;li&gt;Latency is zero.&lt;/li&gt;
&lt;li&gt;Bandwidth is infinite.&lt;/li&gt;
&lt;li&gt;The network is secure.&lt;/li&gt;
&lt;li&gt;Topology doesn't change.&lt;/li&gt;
&lt;li&gt;There is one administrator.&lt;/li&gt;
&lt;li&gt;Transport cost is zero.&lt;/li&gt;
&lt;li&gt;The network is homogeneous.&lt;/li&gt;
&lt;li&gt;We all trust each other.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first four already existed at Sun, but Peter added the second four (not three, as Wikipedia says). Rule #9 is attributed to the father of Java, James Gosling. It’s missing from Wikipedia but Mr. Deutsch thinks it belongs to the list.&lt;/p&gt;

&lt;p&gt;When we see these fallacies, it’s not surprising that some people only have one rule for distributed computing: Don’t. 😁 But hey, most of us don’t have a choice here!&lt;/p&gt;

&lt;p&gt;So if you want to hear Mr. Deutsch discuss these fallacies come to be, what they mean, and how they’re holding up today, then listen to this podcast episode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.se-radio.net/2021/07/episode-470-l-peter-deutsch-on-the-fallacies-of-distributed-computing/"&gt;Podcast episode&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#over-the-fence"&gt;
  &lt;/a&gt;
  Over the Fence
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#old-cobol-works-better-with-new-cobol"&gt;
  &lt;/a&gt;
  Old COBOL Works Better With New COBOL
&lt;/h4&gt;

&lt;p&gt;Java is often called “The new COBOL”. It’s easy to forget that the &lt;strong&gt;old&lt;/strong&gt; COBOL is still around! Granted, the Stack Overflow “2021 Developer Survey” puts COBOL at the very bottom of the “&lt;a href="https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-programming-scripting-and-markup-languages"&gt;Loved vs Dreaded&lt;/a&gt;” list: 16% love vs. 47% for Java. But &lt;a href="https://insights.stackoverflow.com/survey/2021#section-top-paying-technologies-top-paying-technologies"&gt;according to that study&lt;/a&gt;, COBOL developers also earn a thousand US dollars more per year than us Java guys!&lt;/p&gt;

&lt;p&gt;So it is good to see IBM officially blesses Java as the heir to the COBOL throne: Version 2.5 of the mainframe operating system z/OS will make COBOL work better with Java. More specifically, that release “extends existing application programming models with support for parallel 31-bit and 64-bit addressing, simplifying enterprise application modernization”. &lt;/p&gt;

&lt;p&gt;z/OS 2.5 also contains more artificial intelligence and will work better with cloud storage and Linux applications. &lt;/p&gt;

&lt;p&gt;Porting COBOL to Java may not be &lt;strong&gt;your&lt;/strong&gt; cup of tea. But it’s good to know that this cup is &lt;strong&gt;there&lt;/strong&gt; at all!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theregister.com/2021/07/28/z_os_2_5_launch/"&gt;Article&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#releases"&gt;
  &lt;/a&gt;
  Releases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#intellij-idea-20212"&gt;
  &lt;/a&gt;
  IntelliJ IDEA 2021.2
&lt;/h4&gt;

&lt;p&gt;Last week brought a new release of the most popular Java IDE. What’s new?&lt;/p&gt;

&lt;p&gt;It’s a &lt;a href="https://www.jetbrains.com/idea/whatsnew/"&gt;long list&lt;/a&gt;, complete with a 25-minute video. JetBrains seriously calls that video a “&lt;strong&gt;short&lt;/strong&gt; tour”. What would the &lt;strong&gt;long&lt;/strong&gt; tour look like - two hours?!&lt;/p&gt;

&lt;p&gt;I just used 2021.2 for a few days, and nothing has stood out for me so far. Well, one thing did: The update-in-place from 2021.1 failed for me. Version 2021.2 wouldn’t start, so I had to download a full copy from the JetBrains site again. That one greeted me with a message: “Plugin 'com.intellij.bigdecimal-folding' failed to initialize and will be disabled. Please restart IntelliJ IDEA.” 😩 But after that restart, I was back in business.&lt;/p&gt;

&lt;p&gt;Talking about update grievances: Android Studio (which uses IntelliJ) also failed to update last week. Somehow, it picked up old IntelliJ 2019 settings and couldn’t start with Java 8. I had to completely uninstall and reinstall it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jetbrains.com/idea/whatsnew"&gt;What’s new&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#quarkus-21"&gt;
  &lt;/a&gt;
  Quarkus 2.1
&lt;/h4&gt;

&lt;p&gt;Another week, another Quarkus release: Version 2.1 is here! The announcement highlights four features: Dev Services start test containers automatically and now support the identity server Keycloak, Microsoft SQL Server has a reactive driver, and Kotlin got bumped to version 1.5.21.&lt;/p&gt;

&lt;p&gt;What’s more interesting is that the tagline changed again:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As I wrote last week, the old tagline was “&lt;a href="https://web.archive.org/web/20210628210752/https://quarkus.io/"&gt;Supersonic subatomic Java&lt;/a&gt;”. And Quarkus was described as “A Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards”.&lt;/li&gt;
&lt;li&gt;On &lt;a href="https://web.archive.org/web/20210706185200/https://quarkus.io/"&gt;July 6&lt;/a&gt;, the tagline disappeared in favor of “QUARKUS 2.0 IS HERE!”. And Quarkus was described as follows: “Quarkus 2.0 continues the mission of making Java the preferred framework for Kubernetes-native development with new developer tools and improved performance”.&lt;/li&gt;
&lt;li&gt;As of August 2, Quarkus is back to “Supersonic subatomic Java” and the old description. I don’t know if that came with Quarkus 2.1 because the Internet Archive &lt;a href="https://web.archive.org/web/*/quarkus.io"&gt;hasn’t picked up that changes yet&lt;/a&gt; on August 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-1-0-final-released/"&gt;Announcement&lt;/a&gt;, &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/2.1.0.Final"&gt;changelog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;Karsten Silz is the author of this newsletter. He is a full-stack web &amp;amp; mobile developer with 22 years of Java experience, author, speaker, and marathon runner. Karsten got a Master's degree in Computer Science at the Dresden University of Technology (Germany) in 1996.&lt;/p&gt;

&lt;p&gt;Karsten has worked in Europe and the US. He co-founded a software start-up in the US in 2004. Karsten led product development for 13 years and left after the company was sold successfully. He co-founded the UK SaaS start-up "&lt;a href="https://yourhomeingoodhands.co.uk/"&gt;Your Home in Good Hands&lt;/a&gt;" as CTO in 2020. Since 2019, Karsten also works as a contractor in the UK.&lt;/p&gt;

&lt;p&gt;Karsten has &lt;a href="https://bpfnl.substack.com/"&gt;this newsletter&lt;/a&gt;, a &lt;a href="https://betterprojectsfaster.com/"&gt;developer website&lt;/a&gt;, and a &lt;a href="https://ksilz.com/"&gt;contractor site&lt;/a&gt;. He's on &lt;a href="https://www.linkedin.com/in/ksilz/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/karsilz"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://github.com/ksilz"&gt;GitHub&lt;/a&gt;. Karsten is also an &lt;a href="https://www.infoq.com/profile/Karsten-Silz"&gt;author at InfoQ&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>bpf</category>
    </item>
  </channel>
</rss>
