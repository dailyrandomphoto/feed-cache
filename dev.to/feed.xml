<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15 HTML5 best practices for beginners to master.</title>
      <author>menomanabdulla</author>
      <pubDate>Sun, 11 Jul 2021 16:42:34 +0000</pubDate>
      <link>https://dev.to/menomanabdulla/15-html5-best-practices-for-beginners-to-master-47fb</link>
      <guid>https://dev.to/menomanabdulla/15-html5-best-practices-for-beginners-to-master-47fb</guid>
      <description>&lt;p&gt;Whether you are a beginner or an expert in Hyper Text Markup Language (HTML) it is important to follow some best practices in order to keep your HTML documents consistent and organized. &lt;/p&gt;

&lt;p&gt;HTML5 has been around for many years now and has been stable and supported at least partially supported by most major browsers since 2014. Here I present list of best coding practices regarding HTML5 markup. Let’s get started: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#file-structure"&gt;
  &lt;/a&gt;
  File Structure
&lt;/h3&gt;

&lt;p&gt;Be concerned to the project file structure from day one. It’s extremely important for mid to large scale application for batter maintenance.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#declare-correct-doctype"&gt;
  &lt;/a&gt;
  Declare correct Doctype
&lt;/h3&gt;

&lt;p&gt;If correct Doctype  is not declared new HTML5-specific tags will not interpreted by the browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MikUpwuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkknbrm0ri9ehirr6bg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MikUpwuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkknbrm0ri9ehirr6bg7.png" alt="Declare correct Doctype"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#write-w3c-valid-markup"&gt;
  &lt;/a&gt;
  Write w3c valid markup
&lt;/h3&gt;

&lt;p&gt;Use validator like w3c validator to check your markup and write error free more structured code. Validator  will suggest you some best practice of  HTML5 coding standard. I strongly recommend you to valid your code by w3c validator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#html5-semantic-elements"&gt;
  &lt;/a&gt;
  HTML5 semantic elements
&lt;/h3&gt;

&lt;p&gt;Make sure correct use of the HTML5 semantic elements like: ,,,.  It’s will help you to write more structured piece of code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PIvKTHNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt2pzl01rto12ppy2zge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIvKTHNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt2pzl01rto12ppy2zge.png" alt="HTML5 semantic elements"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#meaningful-img-alt-attribute"&gt;
  &lt;/a&gt;
  Meaningful img alt attribute
&lt;/h3&gt;

&lt;p&gt;Always try to use “alt” attribute with meaningful text in img tag. It’s also best practice for SEO purpose.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rohnbQws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj1dihftv0qbmpm1n28i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rohnbQws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj1dihftv0qbmpm1n28i.png" alt="Meaningful img alt attribute"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#kebabcase-class-naming"&gt;
  &lt;/a&gt;
  Kebab-case class naming
&lt;/h3&gt;

&lt;p&gt;Use “kebab-case” while class naming. If you don’t use any structured naming convention like,  BEM convention.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FlYxwAWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjde7gjd4a28bnjep2w0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FlYxwAWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjde7gjd4a28bnjep2w0.png" alt="Kebab-case class naming"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#relevant-selector-naming"&gt;
  &lt;/a&gt;
  Relevant selector naming
&lt;/h3&gt;

&lt;p&gt;Tried to use meaningful class naming relevant to your block of –code .&lt;br&gt;
Tricks: Tried to use “.noun-adjective” format.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QC3XThI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgowlujz2oe7w805fp3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QC3XThI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgowlujz2oe7w805fp3c.png" alt="Relevant selector naming"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#type-attribute-with-link-and-script"&gt;
  &lt;/a&gt;
  Type attribute with link and script
&lt;/h3&gt;

&lt;p&gt;Don’t need to use “type” attribute for external styleSheet and script linking in HTML5 structure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-11y1de--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kur7637iz98osq9c6phy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-11y1de--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kur7637iz98osq9c6phy.png" alt="Type attribute with link and script"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#atomic-class"&gt;
  &lt;/a&gt;
  Atomic Class
&lt;/h3&gt;

&lt;p&gt;Use specific class or atomic class when needed, try to use short meaningful class name.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6NV3c7FL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/824axbvkmd8celpvdy8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6NV3c7FL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/824axbvkmd8celpvdy8u.png" alt="Atomic Class"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#variant-class-in-parent-element"&gt;
  &lt;/a&gt;
  Variant class  in parent element
&lt;/h3&gt;

&lt;p&gt;Tried to added class in parent element if need give another style to the same block or need same block different style.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGKnKlci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba8ncgllour69jl8e16h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGKnKlci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba8ncgllour69jl8e16h.png" alt="Variant class  in parent element"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#complex-wrapping"&gt;
  &lt;/a&gt;
  Complex wrapping
&lt;/h3&gt;

&lt;p&gt;For better performance please tried to avoid unnecessary wrapping. It will create unnecessary node in your HTML tree and reduce performance too.&lt;br&gt;
Bad Practice&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VOZiChke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z27yk65402ey9xb983zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VOZiChke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z27yk65402ey9xb983zs.png" alt="Complex wrapping bad practice"&gt;&lt;/a&gt;&lt;br&gt;
Good Practice&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TUsbFt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8gqrfun6ht7nxusf10b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TUsbFt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8gqrfun6ht7nxusf10b.png" alt="Complex wrapping good Practice"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#closing-tag"&gt;
  &lt;/a&gt;
  Closing tag
&lt;/h3&gt;

&lt;p&gt;It is best practice to always concern with closing starting tag even if it is self-closing tag.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wRTmJ-hB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybo8ge44alvph0nm5d57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wRTmJ-hB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybo8ge44alvph0nm5d57.png" alt="Closing tag"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#injecting-external-stylesheet"&gt;
  &lt;/a&gt;
  Injecting external stylesheet
&lt;/h3&gt;

&lt;p&gt;External stylesheet always injects in  tag. Because The HTML5 specification stated a  element must have a “rel” attribute and if the “rel” attribute us used, the element is restricted to the head element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-1v2zTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjn26vh6h03pemsc6wb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-1v2zTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjn26vh6h03pemsc6wb2.png" alt="Injecting external styleSheet"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#injecting-external-script"&gt;
  &lt;/a&gt;
  Injecting external script
&lt;/h3&gt;

&lt;p&gt;External script always injects at end of the body tag. &lt;br&gt;
As we know that HTML is loaded and execute line by line. So, when the browser encounters a script tag, it loads and executes the JavaScript code on the spot. This may low down the page rendering also JavaScript is often user to manipulate DOM and add new functionality to the webpage if script tag not added at end of the body tag, DOM may not be ready by that time this leading to unknown behavior. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i69FzdGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8a5wyckoh66kycbl1dv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i69FzdGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8a5wyckoh66kycbl1dv.png" alt="HTML5 Injecting external script"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#code-comments"&gt;
  &lt;/a&gt;
  Code Comments
&lt;/h3&gt;

&lt;p&gt;It’s best practice to write human-readable code. Tried to comment your block of code. It will help you or any other developer to refactor the piece of code blocks.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3atDfBhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa2940ff5gcsiyzmsmk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3atDfBhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa2940ff5gcsiyzmsmk9.png" alt="HTML5 Code Comments"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last Words
&lt;/h3&gt;

&lt;p&gt;I hope you enjoy this article html5 coding guidelines and front end web development best practices. If you appreciate it or find any errors let me know in comments. Thanks for this journey  &amp;amp; Happy Coding.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploying a React app using Min.io</title>
      <author>mikeyGlitz</author>
      <pubDate>Sun, 11 Jul 2021 15:55:23 +0000</pubDate>
      <link>https://dev.to/mikeyglitz/deploying-a-react-app-using-min-io-3gdc</link>
      <guid>https://dev.to/mikeyglitz/deploying-a-react-app-using-min-io-3gdc</guid>
      <description>&lt;p&gt;In previous posts I had written about how to set up a Kubernetes cluster on self-hosted hardware with the purpose of hosting applications on a Local Area Network (LAN) to use as an intranet of sorts. Today I'll cover how to deploy client-side applications onto Kubernetes cluster which was provisioned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#servers-to-cloud-platforms"&gt;
  &lt;/a&gt;
  Servers to Cloud Platforms
&lt;/h2&gt;

&lt;p&gt;First, let's talk about how the deployments would be handled on a cloud platform. During the .com days, a server would have to be provisioned to host web applications (i.e. Apache/Nginx). The static website would then have to be copied into a static HTML folder (i.e. &lt;code&gt;/var/www/html&lt;/code&gt;) in order to be served to clients via the web server.&lt;br&gt;
The process of web hosting was improved with the rise of containerization. Instead of having to set up and manage a web server directly on your server hardware, now you can pull a pre-configured image and mount your static web content onto a container which would drastically improve website deployment times.&lt;br&gt;
The rise of cloud platforms furthers the improvement by abstracting away the deployment environment from the developer entirely so that more focus can be placed on the website assets themselves instead of provisioning and configuring servers.&lt;br&gt;
Cloud platforms implement hosted storage using a standard called Object-Based-Storage. Object-based-storage utilizes web endpoints to control and manage assets uploaded to a server. Site content can be managed and served directly using the HTTP protocol. &lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt; is a perfect example of how object-based-storage works.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#minio"&gt;
  &lt;/a&gt;
  Minio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://min.io"&gt;Minio&lt;/a&gt; is a self-hosted service which provides object-based-storage using the AWS S3 protocol; meaning that the endpoints which Minio provides are interchangeable with S3. Minio can be used as a gateway to hosted object-based-storage services which reside on multiple cloud platforms (i.e. Google Cloud Platform (GCP), Amazon Web Services (AWS), Microsoft Azure), but for the sake of this deployment, Minio will be used as a frontend for a mounted volume on our Kubernetes cluster.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploying-the-services"&gt;
  &lt;/a&gt;
  Deploying the Services
&lt;/h2&gt;

&lt;p&gt;Before we can deploy a static website to our Kubernetes cluster, we will first have to provision a Minio server.&lt;br&gt;
The Minio documentation utilizes a &lt;a href="https://docs.min.io/minio/k8s/deployment/deploy-minio-operator.html#deploy-operator-kubernetes"&gt;Minio Operator&lt;/a&gt; and a &lt;a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/"&gt;kubectl krew&lt;/a&gt; plugin to provision servers. Utilizing these tools will be covered in a later production release document. For the sake of this tutorial, deploying Minio will be handled with the &lt;a href="https://github.com/bitnami/charts/tree/master/bitnami/minio"&gt;Minio helm chart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Utilizing &lt;a href="https://terraform.io"&gt;Terraform&lt;/a&gt;, the Minio server can be deployed to Helm with the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"helm"&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"helm_release"&lt;/span&gt; &lt;span class="s2"&gt;"rel_minio"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"files"&lt;/span&gt;
  &lt;span class="nx"&gt;chart&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"minio"&lt;/span&gt;
  &lt;span class="nx"&gt;repository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://charts.bitnami.com/bitnami"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The helm chart can be deployed with the following commands:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once the helm deployment has been completed, the service will be available from the Kubernetes cluster. In order to interact with the services, the credentials will have to be read in from the Kubernetes secrets which are generated by the helm chart. The following commands retrieve the secrets from Kubernetes and store them in environment variables:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;minio_access_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;kubectl get secret files-minio &lt;span class="nt"&gt;--namespace&lt;/span&gt; econovizer &lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'{.data.access-key}'&lt;/span&gt; | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;--decode&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;minio_secret_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;kubectl get secret files-minio &lt;span class="nt"&gt;--namespace&lt;/span&gt; econovizer &lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'{.data.secret-key}'&lt;/span&gt; | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;--decode&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We then have to port-forward the Kubernetes service in order to access it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl port-forward services/files-minio 9000:9000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#configuring-the-minio-client"&gt;
  &lt;/a&gt;
  Configuring the Minio Client
&lt;/h2&gt;

&lt;p&gt;Minio provides a CLI called &lt;a href="https://docs.min.io/docs/minio-client-quickstart-guide.html"&gt;mc&lt;/a&gt; which can be utilized to interact with the Minio server. We have to call the &lt;code&gt;mc&lt;/code&gt; tool with the &lt;code&gt;$minio_secret_key&lt;/code&gt; and the &lt;code&gt;$minio_access_key&lt;/code&gt; environment variables we created earlier.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mc &lt;span class="nb"&gt;alias set local &lt;/span&gt;http://127.0.0.1:9000 &lt;span class="nv"&gt;$minio_access_key&lt;/span&gt; &lt;span class="nv"&gt;$minio_secret_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With the client configured we can now create a bucket for hosting our static site.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mc mb &lt;span class="nb"&gt;local&lt;/span&gt;/static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Before assets can be served from the bucket, the bucket needs to be configured for public asses.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mc policy &lt;span class="nb"&gt;set &lt;/span&gt;download &lt;span class="nb"&gt;local&lt;/span&gt;/static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-react-application"&gt;
  &lt;/a&gt;
  Creating the React Application
&lt;/h2&gt;

&lt;p&gt;With the hosting environment established, we can now create our static website. The easiest way to set up the static website is using &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This command will create a React application with the name &lt;code&gt;my-app&lt;/code&gt; in the current folder. We need to change into the &lt;code&gt;my-app&lt;/code&gt; folder -- &lt;code&gt;cd my-app&lt;/code&gt;. Build the project with the command &lt;code&gt;npm run build&lt;/code&gt;. The build command creates a new folder &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With the build folder created, we can deploy the build to our bucket with the &lt;code&gt;mc&lt;/code&gt; command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mc &lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; build/&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt;/static/
mc &lt;span class="nb"&gt;ls local&lt;/span&gt;/static &lt;span class="c"&gt;# list the files which were just uploaded to the local/static bucket&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Ideally from this point, you would be able to access the static site from &lt;code&gt;http://localhost:9000/static&lt;/code&gt;, however Minio has a limitation which prevents it from serving up files unless they were referenced directly.&lt;br&gt;
&lt;code&gt;http://localhost:9000/static&lt;/code&gt; will return an XML document containing a &lt;code&gt;ListBucketResult&lt;/code&gt; instead of &lt;code&gt;index.html&lt;/code&gt;. &lt;code&gt;http://localhost:9000/static/index.html&lt;/code&gt; will return the desired web page. Since the URL would end with &lt;code&gt;index.html&lt;/code&gt;, React would be looking for a web root and fail to load.&lt;/p&gt;

&lt;p&gt;Fortunately, the issue could  be fixed with a proxy application: &lt;a href="https://github.com/harshavardhana/s3www"&gt;s3www&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To simplify the deployment of s3www, I created a Terraform template which deploys the following resources to Kubernetes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;s3www pod deployment&lt;/li&gt;
&lt;li&gt;s3www Kubernetes service&lt;/li&gt;
&lt;li&gt;Ingress which proxies the s3www service&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;This file can be run with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;terraform init
terraform plan &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="s2"&gt;"acces_key=&lt;/span&gt;&lt;span class="nv"&gt;$minio_access_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="s2"&gt;"secret_key=&lt;/span&gt;&lt;span class="nv"&gt;$minio_secret_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="s1"&gt;'namespace=my-namespace'&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; deployment.plan
terraform apply deployment.plan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once Terraform is complete, the React application will be available from your Kubernetes cluster via Ingress. (i.e. &lt;code&gt;http://host.docker.internal/&lt;/code&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.min.io"&gt;minio docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/harshavardhana/f05b60fe6f96803743f38bea4b565bbf"&gt;Configuring a Static Website with Minio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>selfhosted</category>
    </item>
    <item>
      <title>Generate Invoice: PDF</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Sun, 11 Jul 2021 14:54:13 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/generate-invoice-pdf-dmd</link>
      <guid>https://dev.to/drsimplegraffiti/generate-invoice-pdf-dmd</guid>
      <description>&lt;p&gt;Hello folks, today we will cover how to save our browser page as pdf. We will generate pdf using Vanilla JavaScript. This functionality can be used to generate invoices or receipts for users. &lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/F4hprt3JvS1S8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/F4hprt3JvS1S8/giphy.gif" alt="download"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;🎯 JavaScript&lt;br&gt;
🎯 HTML&lt;br&gt;
🎯 html2pdf.js CDN&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#HTML-1"&gt;HTML code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#JS-1"&gt;JavaScript code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;♣️ I decide to write the whole code in &lt;code&gt;index.html&lt;/code&gt;, feel free to refactor it to your convenience. The invoice template is gotten from &lt;a href="https://bootsnipp.com/snippets/9gjD"&gt;Bootsnip&lt;/a&gt; written by heidilux. I made a little tweaking to the template to tailor it to this project.&lt;/p&gt;

&lt;p&gt;🎯 First of all, add the &lt;code&gt;html2pdf CDN&lt;/code&gt; script to the head of your &lt;code&gt;HTML&lt;/code&gt; boilerplate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUNBqwCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q2td6oe3oou8490a8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUNBqwCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q2td6oe3oou8490a8w.png" alt="carbon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎯 Also, add this to the head&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"bootstrap-css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//code.jquery.com/jquery-1.11.1.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;🎯 Next, Let's flesh out our &lt;code&gt;div container&lt;/code&gt; in &lt;code&gt;index.html&lt;/code&gt; that holds all the data contained in the invoice.&lt;br&gt;
📝 Ensure you wrap the content to display in the &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o78xFoz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zv0smt8hh46mwf9ahji0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o78xFoz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zv0smt8hh46mwf9ahji0.png" alt="carbon (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎯 We write our button &lt;code&gt;onclick&lt;/code&gt; event&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"generatePDF()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Generate Invoice&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;🎯 Lastly, we write our &lt;code&gt;JavaScript&lt;/code&gt; function.&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generatePDF&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invoice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;html2pdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Click on the &lt;code&gt;Generate Invoice&lt;/code&gt; button to test.&lt;br&gt;
&lt;a&gt;&lt;iframe height="600" src="https://codepen.io/drsimplegraffiti/embed/gOWwZyw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I hope this post has been helpful and thought you how to generate pdf. Leave a comment below if you have better ways to generate pdf using &lt;code&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;🍄&lt;a href="https://www.youtube.com/watch?v=rZr23bMwHsU"&gt;Video Reference&lt;/a&gt; by Code with Voran&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#learn-how-to-send-mail-using-web-socket"&gt;
  &lt;/a&gt;
  Learn how to send mail📬 using Web Socket 👇
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/drsimplegraffiti/chat-app-using-socket-io-1hp0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRVrPC8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj9psw3y1v1f1pc2kao0.png" alt="Send mail using NodeJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to top&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt; / &lt;a href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Config files for my GitHub profile.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Encryption without passwords</title>
      <author>Gál Péter</author>
      <pubDate>Sun, 11 Jul 2021 14:16:30 +0000</pubDate>
      <link>https://dev.to/wault/encryption-without-passwords-57bj</link>
      <guid>https://dev.to/wault/encryption-without-passwords-57bj</guid>
      <description>&lt;p&gt;In modern encryption, you need a key/password/secret to be able to securely encrypt/decrypt data. This is the idea behind symmetric encryption. In this article, I'm going to drive you through how is the security provided without ever needing to remember a password.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-encrypt-something-in-the-first-place"&gt;
  &lt;/a&gt;
  How can we encrypt something in the first place?
&lt;/h3&gt;

&lt;p&gt;There are lots of ways to encrypt something. When it comes to storing your information on a Safe, we are using an asymmetric encryption method, called AES-256 (Advanced Encryption Standard).&lt;/p&gt;

&lt;p&gt;When we create a new safe, we generate a new secret key with them. This will be then used to encrypt all of our data in that particular safe. We are using a 128-character long hex string as our secret (512 bits), which is much more secure, than any password that we could remember.&lt;/p&gt;

&lt;p&gt;Then this encryption key is stored in the device's secure storage.&lt;/p&gt;

&lt;p&gt;Here is how this works out in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generating a new secret&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateSecret&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Storing it in the device's secure storage&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SecureStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// This is the data, that we want to store&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev.to&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john@doe.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secret123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Then we encrypt the data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Sending the user to the database&lt;/span&gt;
&lt;span class="c1"&gt;// The safe is an object, where we want to store the item inside&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// And finally, on a remote device, when we want to access the data, we use the secret to decrypt&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// It would print the original user object ({ platform: "dev.to", username.... })&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrypted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: this is just a presentation of how things work... you should just consider it as a pseudo-code, instead of an actual working example&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-transfer-this-key-from-one-device-to-another-safely"&gt;
  &lt;/a&gt;
  How can we transfer this key from one device to another safely?
&lt;/h3&gt;

&lt;p&gt;This is a tricky one. If we would just send the encryption key through our database unencrypted, it would mean that there is no point of encryption as we would store the secret key next to the encrypted data. It would mean that you can just use that key to decrypt the data that is stored in the database.&lt;/p&gt;

&lt;p&gt;Instead, we use an asymmetric encryption method, called RSA-2048. When you generate a new RSA key, then it is generating a keypair. A public one and a private one.&lt;/p&gt;

&lt;p&gt;The public one can be only used to encrypt data. It can be safely shared on the network, as it provides no way for a potential attacker to retrieve data from the hash, as it is not eligible for that.&lt;/p&gt;

&lt;p&gt;The private one will stay on the original device without ever sharing it with another device. Then when we get data from the server, we can use this key to decrypt the hash, that we received.&lt;/p&gt;

&lt;p&gt;Let's see, how does it work out in practice:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When a device is added to the network, we generate this key pair and send the public key to the database. It will be stored in the future.&lt;/li&gt;
&lt;li&gt;We create a new safe on one of our devices and generate a secret, that is stored locally.&lt;/li&gt;
&lt;li&gt;We query all of our devices from the database with their RSA public keys.&lt;/li&gt;
&lt;li&gt;Then we encrypt the secret, that we generated at the #2 step with this key.&lt;/li&gt;
&lt;li&gt;Then we add an entry called KeyExchange, which contains information about which device and safe is the key meant for and the &lt;em&gt;encrypted&lt;/em&gt; secret.&lt;/li&gt;
&lt;li&gt;Finally when we refresh our data on another device, we query all of our key exchanges and decrypt them with our private RSA key.&lt;/li&gt;
&lt;li&gt;After the device received the encryption key, we can safely delete the key from our database as it will be no longer needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-log-in-from-another-device"&gt;
  &lt;/a&gt;
  How can I log in from another device?
&lt;/h3&gt;

&lt;p&gt;Compared to ordinary systems, when we log in, we also exchange a lot of data between the &lt;code&gt;Authenticator&lt;/code&gt; and the &lt;code&gt;Authenticated&lt;/code&gt; device.&lt;/p&gt;

&lt;p&gt;Authenticator: The device, that is already logged in.&lt;br&gt;
Authenticated: The device, that we want to log in, but is not yet authenticated.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;Authenticated&lt;/code&gt; device generates an RSA key pair and sends a signal to the remote server to start the authentication process with the public key.&lt;/li&gt;
&lt;li&gt;The remote server then generate an authentication id (e.g.: &lt;code&gt;ckqz9n52r000001la810jfjee&lt;/code&gt;) and a secret (e.g.: &lt;code&gt;11879182178653d376fc6b129d1d315b&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then the server stores the id with the &lt;code&gt;bcrypt&lt;/code&gt; hashed version of the secret in the database and sends back the secret and the id to the &lt;code&gt;Authenticated&lt;/code&gt; device.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Authenticated&lt;/code&gt; device, then generates a QR code, that stores only the ID, that it got from the server.&lt;/li&gt;
&lt;li&gt;Now on the &lt;code&gt;Authenticator&lt;/code&gt; device, we scan this QR code. This will send a signal to the remote server about who scanned the QR code (first).&lt;/li&gt;
&lt;li&gt;On the &lt;code&gt;Authenticated&lt;/code&gt; device, we will see the username of the user, who scanned this QR code.&lt;/li&gt;
&lt;li&gt;On the &lt;code&gt;Authenticator&lt;/code&gt; device, the user presses a Verify button. This will send the encryption keys from that device to the &lt;code&gt;Authenticated&lt;/code&gt; one (as described above) and this will also send a signal, to allow the remote server, to generate an access token and a refresh token for the user.&lt;/li&gt;
&lt;li&gt;While these things happen, the &lt;code&gt;Authenticated&lt;/code&gt; device pings the server, if the state has changed. If the auth process went through successfully, then it will just download all data, that has been sent to this device.&lt;/li&gt;
&lt;li&gt;On the &lt;code&gt;Authenticated&lt;/code&gt; device, we use the private RSA key, to decrypt the keys.&lt;/li&gt;
&lt;li&gt;Profit! We have successfully gained an access_token, a refresh_token, generated and exchanged the RSA keys, and also received all of the keys necessary, to decrypt the safes associated with this device. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the &lt;code&gt;Authenticated&lt;/code&gt; device:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generate a public and a private RSA key&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;privateKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RSA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Send this publicKey to the server and receive the id and the secret&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Store the private RSA key for future use&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SecureStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rsa_private_key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Check the server periodically for response&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not_yet_scanned&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If noone scanned the code yet do nothing&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scanned_but_not_verified&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If the code has been scanned, but the code has not been verified just show the username for the user, to be able to verify, that they are allowing the right device in&lt;/span&gt;
        &lt;span class="nx"&gt;displayUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Finally, if everything has been sent and verified, we can do the real job&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exchange&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyExchanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;EncryptionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;safeid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RSA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;RefreshToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refresh_token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the &lt;code&gt;Authenticator&lt;/code&gt; device:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Initialize a new QR code scanner instance&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCodeScanner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Add an event listener for scan&lt;/span&gt;
&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Tell the remote server, that the QR code has been scanned on this device&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rsaPublicKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onScan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Show the username for the user&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitForVerification&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Get all the encryption keys&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;EncryptionKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Iterate over all keys and encrypt them with the RSA key&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;enrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;safeid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;safeid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RSA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Send the keys to the device&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="c1"&gt;// The ID, that we scanned with the QR code&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;encryptedKeys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Show success screen!&lt;/span&gt;
    &lt;span class="nx"&gt;showSuccessScreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Show the QRCode scanner for the user&lt;/span&gt;
&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: This code is also just serves the purpose of demonstration, implementation may vary from platform to platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-if-i-lose-my-device-will-i-lose-access-to-my-data"&gt;
  &lt;/a&gt;
  What if I lose my device? Will I lose access to my data?
&lt;/h3&gt;

&lt;p&gt;By design, that would be the case. But we can create a backup key, that can be used in the future, to regain access to our data after we lost our phones.&lt;/p&gt;

&lt;p&gt;This backup works just like an ordinary device because it is technically a device. It will have a refresh token, to gain access to our vault and it will have an RSA private key, to decrypt the key exchanges sent to it. Ohh... and also, when we create a new vault, we will send a key exchange to this backup key.&lt;/p&gt;

&lt;p&gt;With this backup, we can provide the ability, to gain access after you lost your phone.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;br&gt;
If you have any questions, feel free to ask them below.&lt;/p&gt;

&lt;p&gt;Github organization: &lt;a href="https://github.com/wault-app"&gt;github.com/wault-app&lt;/a&gt;&lt;br&gt;
Discord: &lt;a href="https://discord.gg/NxhdAf4azz"&gt;discord.gg/NxhdAf4azz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>crypto</category>
      <category>encryption</category>
    </item>
    <item>
      <title>Rate limiting your goroutines</title>
      <author>Lucas Godoy</author>
      <pubDate>Sun, 11 Jul 2021 14:12:22 +0000</pubDate>
      <link>https://dev.to/godoylucase/rate-limiting-your-goroutines-1om1</link>
      <guid>https://dev.to/godoylucase/rate-limiting-your-goroutines-1om1</guid>
      <description>&lt;p&gt;Hey mates!&lt;br&gt;
Just a quick one I like to talk about! Rate limiting goroutines. &lt;/p&gt;

&lt;p&gt;This is about controlling the actual amount of concurrent task executions. &lt;/p&gt;

&lt;p&gt;Sometimes, we have to process and execute a stream of long-running tasks and we don't know at runtime how many of them are coming out from the task channel. So here, the main concern is not firing all the goroutines together, at the time tasks are ingested. Otherwise, firing many of them concurrently uncontrolled could lead to unpredicted behaviors or memory overflow.&lt;/p&gt;

&lt;p&gt;Therefore, a &lt;code&gt;limiter&lt;/code&gt; (AKA semaphore) empty struct buffered channel has been added into the mix, capped with the &lt;code&gt;count&lt;/code&gt; of tasks to run concurrently. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For the first n-&lt;code&gt;count&lt;/code&gt; iteration an empty struct will be pushed onto the &lt;code&gt;limiter&lt;/code&gt; channel, &lt;/li&gt;
&lt;li&gt;A goroutine is fired up to run the incoming task.&lt;/li&gt;
&lt;li&gt;At the n-&lt;code&gt;count + 1&lt;/code&gt; iteration, the &lt;code&gt;limiter&lt;/code&gt; channel will be full, hence the current &lt;code&gt;main&lt;/code&gt; goroutine will be blocked.&lt;/li&gt;
&lt;li&gt;Once any of the currently running tasks finish its execution, it will readout of the &lt;code&gt;limiter&lt;/code&gt; channel, to make some room for another task to be run. This will unblock the &lt;code&gt;main&lt;/code&gt; goroutine.&lt;/li&gt;
&lt;li&gt;After the &lt;code&gt;main&lt;/code&gt; goroutine takes the control back, it will push an empty struct onto the &lt;code&gt;limiter&lt;/code&gt; channel and start over the cycle by running a new goroutine for the incoming task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And so on until the time out is reached, so the for loop brakes and no more tasks are run.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To sum up, this is how we can limit goroutines to come up all together by controlling how many of them could be up and running concurrently by using a &lt;code&gt;limiter&lt;/code&gt; buffered channel for it.  Avoiding causing a memory overflow and unpredicted behavior. &lt;/p&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>goroutines</category>
      <category>concurrency</category>
    </item>
    <item>
      <title>Fun with Micro-frontend in a single-spa way💡</title>
      <author>Nitin Reddy</author>
      <pubDate>Sun, 11 Jul 2021 13:52:02 +0000</pubDate>
      <link>https://dev.to/nitinreddy3/fun-with-micro-frontend-in-a-single-spa-way-1iok</link>
      <guid>https://dev.to/nitinreddy3/fun-with-micro-frontend-in-a-single-spa-way-1iok</guid>
      <description>&lt;p&gt;🏃‍♂️&lt;br&gt;
To give everyone the context this post will be based on the experiments which I used to run the multiple front-end applications under a vanilla js container app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-a-microfrontend-application"&gt;
  &lt;/a&gt;
  What is a Micro-frontend application?
&lt;/h2&gt;

&lt;p&gt;This application is based on a &lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt; framework that allows you to run multiple front-end applications under the same route. Things to notice related to the Micro-frontend app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy the micro front-end applications independently.&lt;/li&gt;
&lt;li&gt;Without re-writing the existing application, you can create a new application with the new framework.&lt;/li&gt;
&lt;li&gt;Lazy loading the code base for improved performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge of any JavaScript framework&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://single-spa.js.org/docs/create-single-spa"&gt;single-spa&lt;/a&gt; should be globally installed in your machine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#build-the-application"&gt;
  &lt;/a&gt;
  Build the application
&lt;/h2&gt;

&lt;p&gt;We will create three applications using the &lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt; framework that are as follow:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;root-config&lt;/li&gt;
&lt;li&gt;react-app&lt;/li&gt;
&lt;li&gt;angular-app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will render the react and angular apps based on the routes.&lt;br&gt;
So if the route is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/react&lt;/strong&gt; then react app will load&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;/angular&lt;/strong&gt; then the angular app will load&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h3&gt;

&lt;p&gt;Create a folder where you want to put all three applications together.&lt;br&gt;
Navigate to the root of the folder and run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kPg_VX4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx31qtibhcdfpf9gkc9g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kPg_VX4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx31qtibhcdfpf9gkc9g.PNG" alt="rootConfig"&gt;&lt;/a&gt;&lt;br&gt;
The root-config setup will complete in sometime.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h3&gt;

&lt;p&gt;Now we will create an react application using the single-spa. So in the same root folder run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO_Ey110--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4g81c3xyctowwcses5m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO_Ey110--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4g81c3xyctowwcses5m.PNG" alt="reactApplication"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;Now we will create an angular application using the single-spa. So in the same root folder run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-tTE85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwlc3r9skiau169kkvp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-tTE85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwlc3r9skiau169kkvp.PNG" alt="angularApplication"&gt;&lt;/a&gt;&lt;br&gt;
Few more agreements for the angular app 😀&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdJRgksj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj8opzsl26inbr7avbo2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdJRgksj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj8opzsl26inbr7avbo2.PNG" alt="angularApp2"&gt;&lt;/a&gt;&lt;br&gt;
You need to additionally install few dependencies for the angular project&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;angular&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;builders&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h3&gt;

&lt;p&gt;Now we will add few minor tweaks in the files present in our newly created projects :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;root-config&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the imports in the index.ejs
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;imports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@orgname/root-config&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:9000/orgname-root-config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@orgname/react-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:8080/orgname-react-app.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:4200/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0JF7K1eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of3fydm8ubixf0tbd9q6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JF7K1eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of3fydm8ubixf0tbd9q6.PNG" alt="indexJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the configuration file named as orgname-root-config.ts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpwndchZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnpor0a8xsvp599xz448.PNG" alt="configRoot"&gt;
&lt;/li&gt;
&lt;li&gt;Add the navigation bar in index.ejs inside the body
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="nx"&gt;D4A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;navbar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleSpaNavigate('/react')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;React&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleSpaNavigate('/angular')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Angular&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;react-app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the root.component.tsx as below
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uESbC2QY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3d12eomu1qrnv7ljskv.PNG" alt="reactApp"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;angular-app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the zonejs as a dependency in main.single-spa.ts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVF_CZ9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke3qnf31d0rpf93fhu1i.PNG" alt="zone"&gt;
&lt;/li&gt;
&lt;li&gt;Add { provide: APP_BASE_HREF, useValue: '/angular' } to the providers array in the app.module.ts and import APP_BASE_HREF from @angular/common module
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AuROqYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dn0a2rkszgwee9c2dxz.PNG" alt="appHref"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5:
&lt;/h3&gt;

&lt;p&gt;Run the applications &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;root-config
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The root-config app will be running on &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react-app
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The react-app will be running on &lt;a href="http://locahost:8080"&gt;http://locahost:8080&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;angular-app
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The angular-app will be running on &lt;a href="http://localhost:4200"&gt;http://localhost:4200&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you navigate to &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt; you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVvUA8Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i0rf6agkmy88usybohh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVvUA8Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i0rf6agkmy88usybohh.PNG" alt="root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on React you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqCCDhdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkug5xo68aqwwnvship.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqCCDhdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkug5xo68aqwwnvship.PNG" alt="react"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on Angular you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8vFJ6qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emq8t4ybg43viboo1aoh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8vFJ6qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emq8t4ybg43viboo1aoh.PNG" alt="Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When the route changes the new application mounts and the previously loaded application unmounts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#github-repositories-for-different-applications"&gt;
  &lt;/a&gt;
  GitHub Repositories for different applications
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/root-config"&gt;root-config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/react-app"&gt;react-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/angular-app"&gt;angular-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/react-ng-spa-app"&gt;react-ng-spa-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#resources-to-catch-up-with-singlespa"&gt;
  &lt;/a&gt;
  Resources to catch up with single-spa
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLLUD8RtHvsAOhtHnyGx57EYXoaNsxGrTU"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do let me know about your experience with single-spa, till then keep on learning new stuffs and enjoy!!!&lt;br&gt;
📖&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__116606"&gt;
  
    .ltag__user__id__116606 .follow-action-button {
      background-color: #000000 !important;
      color: #00ffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/nitinreddy3" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4L0-m8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CZ9LZr7_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/116606/56e1ac95-0db3-4127-9071-102d90126001.jpg" alt="nitinreddy3 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nitinreddy3"&gt;Nitin Reddy&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nitinreddy3"&gt;💡Developer with eager to learn new tech, mainly into JavaScript, Dart, and Python. Loves to create tools for devs.👨‍💻 &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>microfrontend</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>Using PHP for good - why it is bad and why it might work for you</title>
      <author>Dhiana Khim</author>
      <pubDate>Sun, 11 Jul 2021 13:15:52 +0000</pubDate>
      <link>https://dev.to/dhianakhim/using-php-for-good-why-it-is-bad-and-why-it-might-work-for-you-4lnc</link>
      <guid>https://dev.to/dhianakhim/using-php-for-good-why-it-is-bad-and-why-it-might-work-for-you-4lnc</guid>
      <description>&lt;p&gt;PHP has received so much hate over the years that it is one of the most infamous programming languages ​​on the planet today, only in part because of how popular and ubiquitous it is (+ 70% of websites), but it can be a force for good. ...&lt;br&gt;
There are many posts about how easy it is to be wrong, how inconsistent the language has become , how detrimental the lack of hard data type checks has been, and how the amount of dark magic in it makes it slow, unpredictable and overall. not suitable for most use cases. This eev.ee article is one of my favorites on why PHP is bad as a language.&lt;/p&gt;

&lt;p&gt;It's worth mentioning that companies like Facebook have made efforts to improve PHP (for example by creating a Hack) into a compiled language, and there are large frameworks that can be used for more structure and confident coding. But the virtual machine used for jailbreak is also known for its resource intensity.&lt;/p&gt;

&lt;p&gt;Also, type hints do exist in PHP , but they are optional and often ignored by newbies and online sample code.&lt;/p&gt;

&lt;p&gt;Why is this bad for novice programmers?&lt;br&gt;
It's very easy to start using it wrong, go down the rabbit hole, learn all the wrong tricks, tricks and gimmicks, and as a result, write some pretty terrible code and keep those habits in your career. As a stark contrast to the comparison, Java employs OOP, and Haskel leaves you no choice but to learn functional programming while Scala is their brain .&lt;/p&gt;

&lt;p&gt;In PHP all this and more can be used at the same time, the wiki page itself mentions imperative, functional, object-oriented, procedural, reflexive . This is good if you want to stick to a style you already love and understand, but not so good if you want to learn programming during your formative years. The language is not particularly good for any of these paradigms, so while you can apply them all, it is rather verbose and lacks the full feature set like languages ​​dedicated to their art.&lt;/p&gt;

&lt;p&gt;If you are new to programming and are currently learning PHP, the point is not to give up, but instead explore software design patterns and a language like C ++ / Java or similar along with it (one that is compiled and with type safety). This is to ensure that you learn programming best practices in general and be skeptical of what PHP provides, developing your ability to compare it to other languages ​​from the beginning.&lt;/p&gt;

&lt;p&gt;Disclaimer: I love PHP&lt;br&gt;
I use it almost weekly for quick prototypes or for a thin layer of logic for the UI needed for a new project. However, I gave up on using it for business logic . Some of these projects can be found on my GitHub, including browser games .&lt;/p&gt;

&lt;p&gt;Am I going to ditch PHP?&lt;br&gt;
Not. I'm not planning on ditching PHP anytime soon, and I think if you have some experience with it, you might want to consider it in your projects as well. This is mainly due to the fact that I have been using it for over ten years and now it has become part of my programming toolbox.&lt;/p&gt;

&lt;p&gt;Is it worth learning PHP as a programmer?&lt;br&gt;
If you are a seasoned developer using other languages ​​and have a full stack, then you already have experience with your favorite user interface structure of choice, where you can set up very quickly from scratch. In this case, I personally see no reason for you to consider moving to PHP, unless you are moving to a role that requires it. If you want to learn a new UI technology for the web, it's still a good idea to go beyond PHP if that's not your role. I prefer Angular and React, sometimes making them talk to the PHP server side, avoiding PHP taking care of creating HTML structures.&lt;/p&gt;

&lt;p&gt;Is PHP worth learning because it's everywhere?&lt;br&gt;
From experience, learning PHP as it is widely present in the web ecosystem is not a sufficient reason in this case.&lt;br&gt;
It is not at all popular outside of web development, but is popular enough there to make it to the top lists of common programming languages because of how widespread it has become in the past, especially with frameworks like Wordpress and some of the mainstream forums. Depending on which website you are reading, it is currently either in decline or gaining traction, but is still present in the world of web developers. According to the index TIOBE she won in 2004 and is now ranked 7th&lt;a href="https://regardercompletuntourchezmafille2021filmhd1080p.wordpress.com/"&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be easy for you to master if the need arises, using your solid foundation from other languages ​​and software design skills. Portable software development and architecture skills (system design, caching, scaling, design patterns) are usually of great value, and once you take control of a more difficult language to learn and use, such as C ++ or Java, it will be easier for you. to implement best practices in PHP, where there are fewer default controls other than human-written code.&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploy your Node.js app without a hassle</title>
      <author>Chirill Ceban</author>
      <pubDate>Sun, 11 Jul 2021 13:10:23 +0000</pubDate>
      <link>https://dev.to/bitkidd/deploy-your-node-js-app-without-a-hassle-28ke</link>
      <guid>https://dev.to/bitkidd/deploy-your-node-js-app-without-a-hassle-28ke</guid>
      <description>&lt;p&gt;The process of app deployment takes some time, you have to configure the server, find all the information and be ready to handle the issues, but there is an easier way.&lt;/p&gt;

&lt;p&gt;This guide is relevant literally for any app, for Ruby and Rails, for Python and Django, for PHP and Laravel, for Go and micro-services, you can deploy easily anything, but I will use &lt;a href="https://adonisjs.com"&gt;Adonis.js&lt;/a&gt; as an example.&lt;/p&gt;

&lt;p&gt;I guess any developer knows what is Heroku, they've been de facto a standard of Platform-as-a-Service and showed the world how an app deployment should really work, easily and fast, requiring zero configuration for most cases.&lt;/p&gt;

&lt;p&gt;Heroku is not a cheap service, their prices are pretty high and aren't great for pet projects or small services with zero revenue.&lt;/p&gt;

&lt;p&gt;There are some cheaper alternatives like Render, Railway or Digital Ocean App platform, but there is a self-hosted solution that works almost like Heroku and is free of charge, you only have to bring your own server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dokku"&gt;
  &lt;/a&gt;
  Dokku
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dokku.com"&gt;&lt;strong&gt;Dokku&lt;/strong&gt;&lt;/a&gt; is the smallest PaaS implementation that allows you to build, manage and deploy your apps on your own server, that may cost you as little as &lt;strong&gt;$3.50&lt;/strong&gt; per month( I use and recommend &lt;a href="https://hetzner.cloud/?ref=l6kYYPTcviZx"&gt;Hetzner Cloud&lt;/a&gt;, it is a referral link that will give you €20 in credit).&lt;/p&gt;

&lt;p&gt;It uses heroku buildpacks and is able to deploy your app using dockerfile as well, it configures nginx as a proxy server, you can install databases and connect them to your app, you can install Let's Encrypt for SSL certificates, you can deploy monorepos, you can mount local storage, there are multiple plugins that handle most use cases and require almost zero configuration.&lt;/p&gt;

&lt;p&gt;To install Dokku, you have to allocate a server from you favorite provider, with a minimum requirement of 1 core and 1GB of RAM, then login into your new shiny server and run two commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# for latest tag check Dokku git repo&lt;/span&gt;
&lt;span class="c"&gt;# or https://dokku.com website&lt;/span&gt;

wget https://raw.githubusercontent.com/dokku/dokku/v0.24.10/bootstrap.sh
&lt;span class="nb"&gt;sudo &lt;/span&gt;&lt;span class="nv"&gt;DOKKU_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v0.24.10 bash bootstrap.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then go to your server's IP and follow the web installer process.&lt;/p&gt;

&lt;p&gt;Now you have a working self-hosted PaaS that is ready to build and deploy your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-an-app"&gt;
  &lt;/a&gt;
  Deploying an app
&lt;/h3&gt;

&lt;p&gt;As I am using &lt;a href="https://adonisjs.com/"&gt;Adonis.js&lt;/a&gt; for this guide, I initiate a new app, a web starter template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init adonis-ts-app@latest hello-world

&lt;span class="c"&gt;# If using yarn&lt;/span&gt;
yarn create adonis-ts-app hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we have to initiate git repository for this app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hello-world

&lt;span class="c"&gt;# initiate git&lt;/span&gt;
git init

&lt;span class="c"&gt;# stage all files&lt;/span&gt;
git add &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;# create first commit&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'Init commit'&lt;/span&gt;

&lt;span class="c"&gt;# add Dokku server as a remote&lt;/span&gt;
git remote add dokku dokku@&amp;lt;YOUR_SERVER_IP_ADDRESS_OR_DOMAIN&amp;gt;:hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The part &lt;code&gt;hello-world&lt;/code&gt; in git remote address corresponds to a server app name that we should create on the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
dokku apps:create hello-world
&lt;span class="nt"&gt;-----&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Creating hello-world...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Adonis.js to start we have to set some environment variables, Dokku provides an easy to use command for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on your computer&lt;/span&gt;
&lt;span class="c"&gt;# inside project folder&lt;/span&gt;
node ace generate:key
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; iGyX0deixdW7DkdJ9G9PbyyT8QaizXuK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
dokku config:set hello-world &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;APP_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;iGyX0deixdW7DkdJ9G9PbyyT8QaizXuK &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;APP_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;CACHE_VIEWS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;SESSION_DRIVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cookie
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just before the deploy it is a good idea to create a &lt;code&gt;Procfile&lt;/code&gt; and describe how our PaaS should start our app, this file is a very common configurational file, read more about it &lt;a href="https://devcenter.heroku.com/articles/procfile"&gt;here&lt;/a&gt;. Don't forget to commit it to the repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: node build/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to deploy our app for the first time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push dokku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a successful deployment Dokku will print you the address where you can access your app, if you chose port based deployments, your address will look like &lt;code&gt;http://&amp;lt;YOUR_SERVER_IP_ADDRESS&amp;gt;:&amp;lt;PORT&amp;gt;&lt;/code&gt;, if you chose hostname based deployments, it will look like this: &lt;code&gt;http://&amp;lt;APP_NAME&amp;gt;.&amp;lt;YOUR_SERVER_DOMAIN&amp;gt;&lt;/code&gt;. You can add a domain to the app later if &lt;a href="https://dokku.com/docs/configuration/domains/"&gt;needed&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-database"&gt;
  &lt;/a&gt;
  Adding database
&lt;/h3&gt;

&lt;p&gt;Dokku supports multiple databases, MySQL, PostgreSQL, MongoDB, Redis and others.&lt;br&gt;
Here I will install PostgreSQL and then link it to my app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
&lt;span class="c"&gt;# install the postgres plugin&lt;/span&gt;
&lt;span class="c"&gt;# plugin installation requires root, hence the user change&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;dokku plugin:install https://github.com/dokku/dokku-postgres.git

&lt;span class="c"&gt;# create a postgres service&lt;/span&gt;
dokku postgres:create hello-world-database

&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
&lt;span class="c"&gt;# each official datastore offers a `link` method to link a service to any application&lt;/span&gt;
dokku postgres:link hello-world-database hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Linking adds a new environment variable to the app, &lt;code&gt;DATABASE_URL&lt;/code&gt; that is a database connection string with all the credentials we need.&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://docs.adonisjs.com/guides/database/introduction"&gt;Adonis.js&lt;/a&gt; to work with database we should install Lucid ORM and configure it properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @adonisjs/lucid@latest
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add @adonisjs/lucid

&lt;span class="c"&gt;# and then&lt;/span&gt;
node ace configure @adonisjs/lucid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation don't forget to add new database environment variables to Dokku, you can use &lt;code&gt;DATABASE_URL&lt;/code&gt; that was provided before or split it to separated values, connection string url follows a well known format, so it is not a problem to identify credentials and host address.&lt;/p&gt;

&lt;p&gt;To run database migrations on each deploy we should update our &lt;code&gt;Procfile&lt;/code&gt; by adding new values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: node build/server.js
release: node build/ace migration:run --force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit new updates and run a deploy again!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push dokku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#encrypting-connection"&gt;
  &lt;/a&gt;
  Encrypting connection
&lt;/h3&gt;

&lt;p&gt;Dokku is built on top of plugins. One of them uses Let's Encrypt to provide SSL certificates to Nginx proxy server.&lt;/p&gt;

&lt;p&gt;Installing the plugin is as simple as running a command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on Dokku host&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To encrypt the connection of your app run &lt;code&gt;dokku letsencrypt hello-world&lt;/code&gt; and then &lt;code&gt;dokku letsencrypt:cron-job --add&lt;/code&gt; to add a  crontab job that will renew certificates when needed.&lt;/p&gt;

&lt;p&gt;That's it, your app is now served using SSL!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Dokku is a great Heroku-like tool for build and deploy automation, it is universal and can be used almost by any company. It does not support clustering and brings some Docker problems with it, but well, if you need clustering for your app and have that many requests per second, then you may also have money for Heroku or others, or even your personal DevOps engineer.&lt;/p&gt;

&lt;p&gt;You may read more about dokku command and possibilities on their &lt;a href="https://dokku.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>adonisjs</category>
      <category>adonis</category>
    </item>
    <item>
      <title>Why Functional Programmers Avoid Exceptions </title>
      <author>Jesse Warden</author>
      <pubDate>Sun, 11 Jul 2021 12:56:25 +0000</pubDate>
      <link>https://dev.to/jesterxl/why-functional-programmers-avoid-exceptions-8oe</link>
      <guid>https://dev.to/jesterxl/why-functional-programmers-avoid-exceptions-8oe</guid>
      <description>&lt;p&gt;If you’re in a hurry, here is the 60 second version:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Fn0nWij8VEU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;My &lt;a href="https://jessewarden.com/2021/06/why-i-dont-use-async-await.html"&gt;previous article&lt;/a&gt; caused a variety of consternation, imperative patriotism, and lots of nuanced follow up. It reminded me of when &lt;a href="https://www.youtube.com/watch?v=36GT2zI8lVA"&gt;Richard Feynman was asked to define how magnets work and he refused&lt;/a&gt;. The perturbed interviewer postulated it was a reasonable question in hopes to understand why Mr. Feynman wouldn’t answer it. Richard Feynman covered a variety of reasons, 2 of which were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you have to know the deeper reasons first before I can explain it&lt;/li&gt;
&lt;li&gt;I can’t cheat by using analogies that they themselves require deeper meanings to explain how _they_ work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the case of avoiding async/await keywords in JavaScript, this makes a huge assumption you know about Functional Programming, Imperative, exception handling, how various languages approach it or don’t, the challenges between dynamic and strongly typed languages, and on and on.&lt;/p&gt;

&lt;p&gt;In this article, I wanted to remedy that and focus on the deeper reasons why, specifically being pragmatic around how Functional Programmers get things done vs. the theory or why’s. This means understanding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;why pure functions are preferred&lt;/li&gt;
&lt;li&gt;how they’re easier to test&lt;/li&gt;
&lt;li&gt;why you return errors as values using Result/Either types&lt;/li&gt;
&lt;li&gt;how you compose software using them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pedantic-or-mathematical-answer"&gt;
  &lt;/a&gt;
  Pedantic or Mathematical Answer
&lt;/h2&gt;

&lt;p&gt;In investigating specifically why exceptions aren’t preferred in Functional Programming, I found out, they aren’t actually anti-functional programming. Worse, I found out many argue they do not violate pure functions or referential transparency with a lot of fascinating supporting evidence. A few argue they aren’t even side effects. It gets more confusing when you start comparing strictly typed functional languages vs. dynamic ones, or practicing FP in non-FP languages.&lt;/p&gt;

&lt;p&gt;In practice, exceptions, like side effects, seem to violate all the reasons why you use pure functions: Your code is predictable, easier to test, and results in better software. Exceptions ensure your code is unpredictable, reduces the value of the tests, and &lt;a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/"&gt;results in worse software&lt;/a&gt;. Yet that’s not &lt;a href="https://stackoverflow.com/questions/10703232/why-is-the-raising-of-an-exception-a-side-effect"&gt;what the mathematical definitions say&lt;/a&gt;. They don’t agree, nor disagree with my assertions; rather they just say that known exceptions do not violate referential transparency. Yes, there are detractors. Regardless, this really shook my faith.&lt;/p&gt;

&lt;p&gt;One could say these are pedantic; citing the true definition of referential transparency the mechanisms behind how Exceptions can or cannot negatively affect it, and thus possibly not violate pure function rules. However, this is the common problem between scientists and engineers: while scientists will give you the &lt;a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/MathematiciansAnswer"&gt;Mathematicians Answer&lt;/a&gt;, they won’t help you do your actual job.&lt;/p&gt;

&lt;p&gt;And that’s what brought me back to reality. I’m not here to debate semantics, I’m here to deliver working software. However, I will cede to nuance if someone wishes to delve into the relationships between the mathematics behind these constructs. So far, preferring mathematical style programming over Imperative or Object Oriented seems to be going much better in delivering better results even if I don’t have a 100% iron clad understanding of all the nuances of the rules.&lt;/p&gt;

&lt;p&gt;The good news, despite finding deep nuance around exceptions and their complicated relationship with the mathematical purity of FP the industry, both FP and others (i.e. Go, Rust, Lua) has basically accepted the pragmatic truth: exceptions aren’t pure, act like side effects, and aren’t helpful when writing software. We already have a solution: returning the errors as values from functions, using Result (or Either) types.&lt;/p&gt;

&lt;p&gt;Keep in mind, the above has a Haskell bias. I encourage you to google “&lt;a href="https://www.google.com/search?client=firefox-b-1-d&amp;amp;q=Exceptions+Considered+Harmful"&gt;Exceptions Considered Harmful&lt;/a&gt;” and see some of the horrors that can arise when exceptions put your stateful code (Java/C#/Python/JavaScript) into a bad state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prefer-pure-functions"&gt;
  &lt;/a&gt;
  Prefer Pure Functions
&lt;/h2&gt;

&lt;p&gt;When people say prefer pure functions it’s because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;more predictable&lt;/li&gt;
&lt;li&gt;easier to test&lt;/li&gt;
&lt;li&gt;easier to maintain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does that &lt;em&gt;mean,&lt;/em&gt; though?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#predictable"&gt;
  &lt;/a&gt;
  Predictable
&lt;/h3&gt;

&lt;p&gt;We say predictable because you call it and it returns a value. That’s it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAnOk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"foo": "bar"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAnError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you bring exceptions into it, you now have 2 possibilities: it either returns a value, or blows up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// result is never used/set&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you combine functions together into programs, the program takes a value and returns a value. That’s it.&lt;/p&gt;

&lt;p&gt;When you bring exceptions into it, you now have X * Y possibilities: the program either returns a value, or X number of functions possibly explode in Y number of ways; it depends on how you wire the functions together.&lt;/p&gt;

&lt;p&gt;This exponential complexity shows just how unpredictable code can be with exceptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-to-test"&gt;
  &lt;/a&gt;
  Easier To Test
&lt;/h3&gt;

&lt;p&gt;Easier compared to &lt;em&gt;what?&lt;/em&gt; How?&lt;/p&gt;

&lt;p&gt;Pure functions don’t have side effects, so you don’t have to setup and tear down stubs or mocks. There is no initial state to setup, nor state to reset afterwards. There is no spy that you have to assert on after you call your code.&lt;/p&gt;

&lt;p&gt;Instead, you give your function an input, and assert the output is what you expect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"foo": "bar"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#easier-to-maintain"&gt;
  &lt;/a&gt;
  Easier to Maintain
&lt;/h2&gt;

&lt;p&gt;Compared to what? What does “easier” mean? Easy for someone familiar with the code? This statement is too nebulous and full of feelings.&lt;/p&gt;

&lt;p&gt;Still, many would agree, regardless of language, that code that doesn’t have any side effects is a lot easier to deal with and change and unit test over 6 months of the code growing compared to one that has a lot of side effects that you have to account for, test, and learn about their possible exponential changes in the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-resulteither"&gt;
  &lt;/a&gt;
  Use Result/Either
&lt;/h2&gt;

&lt;p&gt;If you prefer pure functions, that means very little side effects, or they’re on the fringes of your code. But then how do you handle things that go wrong? You return if the function worked or not. If it worked, it’ll have the data inside. If it failed, it’ll have a reason why it failed. In FP languages they have a Result or Either type. In languages that don’t have this kind of type, you can emulate in a variety of ways. If the code works, you return an &lt;code&gt;Ok&lt;/code&gt; with the value in it. If the function failed, you return an &lt;code&gt;Error&lt;/code&gt; with the reason why as a string clearly written in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Many languages have embraced the Promise, also called a Future, way of doing things. Some languages have used this to also handle asynchronous operations because they can fail in 2 ways that mean the same thing: it broke or it timed out. For example, most people aren’t going to wait 10 minutes for their email to come up, so you typically will see failures within 10 to 30 seconds even though technically nothing went wrong; we just stopped trying after a set amount of time. JavaScript and Python’s versions don’t have this timing built in, but there are &lt;a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.concurrency.task.html"&gt;libraries that allow to use this behavior&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This results in pure functions that always return a value: a &lt;code&gt;Result&lt;/code&gt;. That can either be a success or failure, but it’s always a Result. If it’s a failure it won’t break your entire program, nor cause you to have to write try/catch. While &lt;code&gt;Promise&lt;/code&gt;s can substitute in for a Result in JavaScript for example, ensure you are using the Promise itself, and not the value it returns via async/await. That completely bypasses the built-in exception handling, and forces you to use try/catch again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composing-programs"&gt;
  &lt;/a&gt;
  Composing Programs
&lt;/h2&gt;

&lt;p&gt;The way you build FP programs is through combining all these pure functions together. Some can be done imperatively, sure, but most are done via some type of &lt;a href="https://fsharpforfunandprofit.com/rop/"&gt;railway oriented programming&lt;/a&gt;. There are variety of ways to do this in FP and non-FP languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(non-FP) JavaScript: The &lt;a href="https://lodash.com/docs/4.17.15#flow"&gt;flow&lt;/a&gt; function in Lodash or the Promise or even the &lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;(non-FP) Python: &lt;a href="https://pypi.org/project/PyMonad/#new-then-method"&gt;then in PyMonad&lt;/a&gt; or various &lt;a href="https://returns.readthedocs.io/en/latest/pages/railway.html"&gt;map/binds in returns&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ReScript: the &lt;a href="https://rescript-lang.org/docs/manual/latest/pipe"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;F#: the &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/symbol-and-operator-reference/"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means, in ReScript and F#, you’ll have a function, and a Result will come out. You can then see if your program worked or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;parsePeople&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;parsePeopleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- this function could be an Ok or Error&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filterHumans&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;formatNames&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;startCaseNames&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For JavaScript/Python, it’s a bit more nuanced around the types. For Python, we’ll assume you’re returning a Result in PyMonad or Returns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_people_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter_humans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_case_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#composing-javascript-via-promises"&gt;
  &lt;/a&gt;
  Composing JavaScript via Promises
&lt;/h2&gt;

&lt;p&gt;For JavaScript, unless you’re all-in on some kind of library, natively you can do this using Promise. Promise is already a type of Result: it holds a value, and if it worked, you can get it out using then, else the failure via catch. They’re also composable by default so you can create Promise chains that automatically unwrap &lt;code&gt;Promise&lt;/code&gt; values, use regular values as is, or abort to the &lt;code&gt;catch&lt;/code&gt; in case of an error. You lose that ability once you start using async await because now you’re responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exception handling&lt;/li&gt;
&lt;li&gt;pulling the value out&lt;/li&gt;
&lt;li&gt;if it’s a Promise, async/awaiting it&lt;/li&gt;
&lt;li&gt;if it’s a value, using it&lt;/li&gt;
&lt;li&gt;putting into the next function down the line&lt;/li&gt;
&lt;li&gt;handling what to do if you get an exception at each section of the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Promises, you just return a value or another Promise and it just comes out the other end ready to go. If not, you’re catch will handle any errors. This ensures whatever function calls your Promise chain itself is pure because it always returns a Promise value.&lt;/p&gt;

&lt;p&gt;2 huge assumptions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you’re always defining a catch&lt;/li&gt;
&lt;li&gt;you’re not using a Result&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#mixing-in-result"&gt;
  &lt;/a&gt;
  Mixing in Result
&lt;/h2&gt;

&lt;p&gt;If some functions aren’t asynchronous, most JavaScript programmers would think they can just return a Result type instead to keep it synchronous. There isn’t a huge penalty in speed/memory to using a Promise, but some would prefer to use a Result instead. I’d suggest to 2 things if you’re not using a library: favor a Promise over a Result. A Promise is native and basically acts like a result already.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If, however, you’d prefer to make a clear delineation between an async operation and a possible failure scenario, then you’ll have to unwrap it at the end of the promise chain, similar to Rust or Python’s dry/returns. There are many helper methods on how to do this based on what Result library you’re using. We’ll use &lt;a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.result.html"&gt;Folktale&lt;/a&gt; below. Here we’ve defined a safe wrapper around &lt;code&gt;JSON.parse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using it, it’ll come out the next Promise’ then and we can pattern match to get the error or value out and convert to a normal Promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;fetchJSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchWith&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="na"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Functional Programmers avoid exceptions because they basically act like side effects, tend to feel like they’re violating pure function rules in regards to having no return value and possibly crashing our program. If you instead favor pure functions, return a Result type when things can possibly fail. You can then use your language’s preferred way of composing functions together. Then you have pure programs that have an input and an output. This means both the functions, and the program itself, are much easier to unit test. You no longer have to write &lt;code&gt;expect(thisThing).throws(SomeExceptionType)&lt;/code&gt;. You don’t have to write try/catch/throw in your code. You just give your functions or program and input, and assert on that output.&lt;/p&gt;

&lt;p&gt;For side effects, if you can’t force them to return a meaningful value, then you can just assert they were called with your expected inputs via Sinon’s spy methods or TestDouble’s assert method. There is no longer indirection, no longer a need to use to try/catch in multiple places for &lt;em&gt;your&lt;/em&gt; code. This makes your functions and program much more predictable, especially when you combine many functions together.&lt;/p&gt;

&lt;p&gt;For native functionality in non-functional languages like JavaScript and Python, you wrap the unsafe code. In the above examples, we wrapped JSON.parse with a try/catch and have it either return a Result or Promise. In FP languages, that would already return a Result. If you’re programmatic, languages like ReScript and F# support both Result types AND pattern matching on exceptions (which I think is blasphemy).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>functional</category>
      <category>exceptions</category>
    </item>
    <item>
      <title>30days30submits (HTML, CSS, JS)</title>
      <author>Shaif Arfan</author>
      <pubDate>Sun, 11 Jul 2021 12:51:21 +0000</pubDate>
      <link>https://dev.to/shaifarfan08/30days30submits-html-css-js-39cn</link>
      <guid>https://dev.to/shaifarfan08/30days30submits-html-css-js-39cn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exwW8820--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/shaifarfan/30days30submits%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exwW8820--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/shaifarfan/30days30submits%3Fstyle%3Dsocial" alt="GitHub Repo stars"&gt;&lt;/a&gt;  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uMllJK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/youtube/channel/subscribers/UCdxaLo9ALJgXgOUDURRPGiQ%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uMllJK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/youtube/channel/subscribers/UCdxaLo9ALJgXgOUDURRPGiQ%3Fstyle%3Dsocial" alt="YouTube Channel Subscribers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#30days30submits"&gt;
  &lt;/a&gt;
  30days30submits
&lt;/h2&gt;

&lt;p&gt;Boost your HTML, CSS, JS Skills with these small to medium projects.&lt;/p&gt;

&lt;p&gt;In this challenge, I submitted 30 little to medium size projects. Sometimes I made a little website component or sometimes some JavaScript app as a submit. I did it to boost my HTML, CSS &amp;amp; JS skills. Down here you will find all the live previews and YouTube videos (how I made it). Also here is the full playlist for this #30days30submits challenge =&amp;gt; &lt;a href="https://www.youtube.com/playlist?list=PLRv_Gd5w9e7m7wokXmB9fGtGYw100UKc0"&gt;playlist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;GitHub Repo: &lt;a href="https://github.com/ShaifArfan/30days30submits"&gt;https://github.com/ShaifArfan/30days30submits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🤙 Follow Me: &lt;a href="http://facebook.com/fb.shaifarfan08"&gt;FB&lt;/a&gt; - &lt;a href="http://instagram.com/shaifarfan08"&gt;IG&lt;/a&gt; - &lt;a href="http://twitter.com/shaifarfan08"&gt;TW&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🏦 Web Cifar: &lt;a href="https://www.youtube.com/channel/UCdxaLo9ALJgXgOUDURRPGiQ"&gt;YT&lt;/a&gt; - &lt;a href="http://facebook.com/webcifar"&gt;FB&lt;/a&gt; - &lt;a href="http://instagram.com/web_cifar"&gt;IG&lt;/a&gt; - &lt;a href="http://twitter.com/webcifar"&gt;TW&lt;/a&gt; - &lt;a href="http://webcifar.com"&gt;WEBSITE&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;day&lt;/th&gt;
&lt;th&gt;Project Name&lt;/th&gt;
&lt;th&gt;source Code/preview&lt;/th&gt;
&lt;th&gt;YouTube Video&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;day-1&lt;/td&gt;
&lt;td&gt;Custom Cursor&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMrzaB"&gt;https://codepen.io/Web_Cifar/pen/OJMrzaB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/de4W0EHMuUs"&gt;https://youtu.be/de4W0EHMuUs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-2&lt;/td&gt;
&lt;td&gt;Theme Switcher&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMrdbq"&gt;https://codepen.io/Web_Cifar/pen/OJMrdbq&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/D1yg4T37qYo"&gt;https://youtu.be/D1yg4T37qYo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-3&lt;/td&gt;
&lt;td&gt;Random Dad Jokes Generator&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/XWXOZWX"&gt;https://codepen.io/Web_Cifar/pen/XWXOZWX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/UDIfuvLEkjU"&gt;https://youtu.be/UDIfuvLEkjU&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-4&lt;/td&gt;
&lt;td&gt;Numbers API&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoZLpoG"&gt;https://codepen.io/Web_Cifar/pen/PoZLpoG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/s3LFCErzmHI"&gt;https://youtu.be/s3LFCErzmHI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-5&lt;/td&gt;
&lt;td&gt;Countdown Timer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMGPbb"&gt;https://codepen.io/Web_Cifar/pen/OJMGPbb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/_a4XCarxwr8"&gt;https://youtu.be/_a4XCarxwr8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-6&lt;/td&gt;
&lt;td&gt;Featured Section&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/WNrWxYG"&gt;https://codepen.io/Web_Cifar/pen/WNrWxYG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/L4k3_elYm2U"&gt;https://youtu.be/L4k3_elYm2U&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-7&lt;/td&gt;
&lt;td&gt;Photo gallery p-1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/wvMbwdj"&gt;https://codepen.io/Web_Cifar/pen/wvMbwdj&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/URymtcPO11A"&gt;https://youtu.be/URymtcPO11A&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-8&lt;/td&gt;
&lt;td&gt;Photo gallery p-2 [Pexels API]&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ShaifArfan/30days30submits/tree/master/day-8"&gt;https://github.com/ShaifArfan/30days30submits/tree/master/day-8&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gGBpmzLN1Hw"&gt;https://youtu.be/gGBpmzLN1Hw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-9&lt;/td&gt;
&lt;td&gt;Read More Button&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMeVxx"&gt;https://codepen.io/Web_Cifar/pen/OJMeVxx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/TvVY8c1uvG8"&gt;https://youtu.be/TvVY8c1uvG8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-10&lt;/td&gt;
&lt;td&gt;key Code Generator App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/eYJwvKV"&gt;https://codepen.io/Web_Cifar/pen/eYJwvKV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/jOLwRV6xSwA"&gt;https://youtu.be/jOLwRV6xSwA&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-11&lt;/td&gt;
&lt;td&gt;CSS animated Menu&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/eYJqdxy"&gt;https://codepen.io/Web_Cifar/pen/eYJqdxy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/q8vmz-R_3Ck"&gt;https://youtu.be/q8vmz-R_3Ck&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-12&lt;/td&gt;
&lt;td&gt;CSS Flex Gallery&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/wvMVmZN"&gt;https://codepen.io/Web_Cifar/pen/wvMVmZN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Z6IZ2NOEzmw"&gt;https://youtu.be/Z6IZ2NOEzmw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-13&lt;/td&gt;
&lt;td&gt;Analog Clock&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/LYNYmpb"&gt;https://codepen.io/Web_Cifar/pen/LYNYmpb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/6xEQ_jA5V2Y"&gt;https://youtu.be/6xEQ_jA5V2Y&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-14&lt;/td&gt;
&lt;td&gt;Digital Clock&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/MWyYaBP"&gt;https://codepen.io/Web_Cifar/pen/MWyYaBP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gmNhRyxAPpw"&gt;https://youtu.be/gmNhRyxAPpw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-15&lt;/td&gt;
&lt;td&gt;BG Color Changer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/dyMPmwY"&gt;https://codepen.io/Web_Cifar/pen/dyMPmwY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Yem8T8azZko"&gt;https://youtu.be/Yem8T8azZko&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-16&lt;/td&gt;
&lt;td&gt;Basic Tooltips&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoNqwNJ"&gt;https://codepen.io/Web_Cifar/pen/PoNqwNJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/MXRxahbJX3A"&gt;https://youtu.be/MXRxahbJX3A&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-17&lt;/td&gt;
&lt;td&gt;Scroll Down Button&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/WNwvOaE"&gt;https://codepen.io/Web_Cifar/pen/WNwvOaE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/LY1jeQGUiAI"&gt;https://youtu.be/LY1jeQGUiAI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-18&lt;/td&gt;
&lt;td&gt;Advance Tooltips&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/yLOYoPR"&gt;https://codepen.io/Web_Cifar/pen/yLOYoPR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/e_jEquJo7y8"&gt;https://youtu.be/e_jEquJo7y8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-19&lt;/td&gt;
&lt;td&gt;Full Functional Html Form&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/gOrrPpO"&gt;https://codepen.io/Web_Cifar/pen/gOrrPpO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/vc9rgFHr098"&gt;https://youtu.be/vc9rgFHr098&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-20&lt;/td&gt;
&lt;td&gt;Multi Step Form&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoNNEYY"&gt;https://codepen.io/Web_Cifar/pen/PoNNEYY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/cKTgIDkRsGc"&gt;https://youtu.be/cKTgIDkRsGc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-21&lt;/td&gt;
&lt;td&gt;CSS Loading animation&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/jOqqRPM"&gt;https://codepen.io/Web_Cifar/pen/jOqqRPM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/E_jOrp4t0N4"&gt;https://youtu.be/E_jOrp4t0N4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-22&lt;/td&gt;
&lt;td&gt;Food Recipe App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/oNxLYRY"&gt;https://codepen.io/Web_Cifar/pen/oNxLYRY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/x8EY0BlhPGk"&gt;https://youtu.be/x8EY0BlhPGk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-23&lt;/td&gt;
&lt;td&gt;Neon Light Effect&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/MWyJENV"&gt;https://codepen.io/Web_Cifar/pen/MWyJENV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/NLtUycloTnc"&gt;https://youtu.be/NLtUycloTnc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-24&lt;/td&gt;
&lt;td&gt;Speech Recognition App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/jOqBEjE"&gt;https://codepen.io/Web_Cifar/pen/jOqBEjE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/-k-PgvbktX4"&gt;https://youtu.be/-k-PgvbktX4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-25&lt;/td&gt;
&lt;td&gt;Custom Slider&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/bGpRwEr"&gt;https://codepen.io/Web_Cifar/pen/bGpRwEr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/V9TCxMMpGhI"&gt;https://youtu.be/V9TCxMMpGhI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-26&lt;/td&gt;
&lt;td&gt;Bouncing DVD logo&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/JjXrLRJ"&gt;https://codepen.io/Web_Cifar/pen/JjXrLRJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/wMIARRCox9k"&gt;https://youtu.be/wMIARRCox9k&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-27&lt;/td&gt;
&lt;td&gt;Quiz APP&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/dyMZxNg"&gt;https://codepen.io/Web_Cifar/pen/dyMZxNg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/qXXM9nVxLWk"&gt;https://youtu.be/qXXM9nVxLWk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-28&lt;/td&gt;
&lt;td&gt;Simple Calculator&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/XWdVgXr"&gt;https://codepen.io/Web_Cifar/pen/XWdVgXr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/0Vg4EiYPCUc"&gt;https://youtu.be/0Vg4EiYPCUc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-29&lt;/td&gt;
&lt;td&gt;Weather APP&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/gOrvMpR"&gt;https://codepen.io/Web_Cifar/pen/gOrvMpR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/y0iCeKUsYMk"&gt;https://youtu.be/y0iCeKUsYMk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-30&lt;/td&gt;
&lt;td&gt;CSS Dot Loaders&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/rNevXPx"&gt;https://codepen.io/Web_Cifar/pen/rNevXPx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/ENa4y_-fJAs"&gt;https://youtu.be/ENa4y_-fJAs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Adding server-side-rendering to existing vue 3 project</title>
      <author>shubhadip</author>
      <pubDate>Sun, 11 Jul 2021 12:45:58 +0000</pubDate>
      <link>https://dev.to/shubhadip/adding-server-side-rendering-to-existing-vue-3-project-53oo</link>
      <guid>https://dev.to/shubhadip/adding-server-side-rendering-to-existing-vue-3-project-53oo</guid>
      <description>&lt;p&gt;In this article we will see how to add server side rendering support to existing vue 3 project.I will be using one of my existing vue3 &amp;amp; vuex project which is available in &lt;a href="https://github.com/shubhadip/vuex-typescript"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we have to add few dependencies &amp;amp;&amp;amp; devdependencies so that our project can support ssr&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @vue/server-renderer vue@3.1.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D webpack-manifest-plugin webpack-node-externals express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: upgrading vue to latest version so that we can use onServerPrefetch lifecycle hook&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;for server-side-rendering we will have to create two different entry points(files) one, which will be used in server &amp;amp; another in client side also we will need to different build commands for server/client, lets add these two first in package.json scripts section&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"build:client": "vue-cli-service build --dest dist/client",
"build:server": "VUE_APP_SSR=true vue-cli-service build --dest dist/server",
"build:ssr": "rm -rf ./dist &amp;amp;&amp;amp; npm run build:client &amp;amp;&amp;amp; npm run build:server"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we have added a flag &lt;code&gt;VUE_APP_SSR=true&lt;/code&gt; which would help us for bundling server side and ignore any window logics as those won't work in server-side.There will be two separate directory within dist folder client &amp;amp;&amp;amp; server having separate code.&lt;/p&gt;

&lt;p&gt;With build scripts ready lets move to entry files of server side &amp;amp; client side, we will have a common &lt;code&gt;main.ts&lt;/code&gt; file which will be included in both entry files &lt;code&gt;entry-client.ts&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;entry-server.ts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets create main.ts, we have to take care of createApp &amp;amp;&amp;amp; createSSRApp for respective entry points.we can make use of flag &lt;code&gt;VUE_APP_SSR=true&lt;/code&gt; or &lt;code&gt;typeof window&lt;/code&gt; check&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isSSR = typeof window === 'undefined';
const app = (isSSR ? createSSRApp : createApp)(rootComponent)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end our file would look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createSSRApp, createApp, h } from 'vue'
import App from './App.vue'
import router from './router';
import { store } from './store'

export default function () {
  const isSSR = typeof window === 'undefined';
  const rootComponent = {
    render: () =&amp;gt; h(App),
    components: { App },
  }
const app = (isSSR ? createSSRApp : createApp)(rootComponent)
  app.use(router);
  app.use(store);
  return {
    app,
    router,
    store
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the main crux ready lets create entry-client.ts &amp;amp;&amp;amp; entry-server.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# entry-server.ts
import createApp from './main';

export default function () {

  const {
    router,
    app,
    store
  } = createApp();

  return {
    app,
    router,
    store
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In server entry file, we are just exporting app,router,store which would be used while serving via express&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# entry-client.ts
import createApp from './main'
declare let window: any;

const { app, router, store } = createApp();

(async (r, a, s) =&amp;gt; {
  const storeInitialState = window.INITIAL_DATA;

  await r.isReady();

  if (storeInitialState) {
    s.replaceState(storeInitialState);
  }

  a.mount('#app', true);
})(router, app, store);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;window.INITIAL_DATA will hold the initialData that would be prefetched in server-side and would be stored in global window object, then in clientSide we will use this data to populate our store on first load.&lt;/p&gt;

&lt;p&gt;Now,lets move to webpack config part of SSR, to work with webpack we have to create a vue.config.js file. we would include webpack-manifest-plugin,webpack-node-externals,webpack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ManifestPlugin = require("webpack-manifest-plugin");
const nodeExternals = require("webpack-node-externals");
const webpack = require('webpack');
const path = require('path');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets add config, i will be using export.chainWebpack directly to modify default webpack config provided by vue&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.chainWebpack = webpackConfig =&amp;gt; {
   if (!process.env.VUE_APP_SSR) {
    webpackConfig
      .entry("app")
      .clear()
      .add("./src/entry-client.ts");
    return;
  }

  webpackConfig
    .entry("app")
    .clear()
    .add("./src/entry-server.ts");

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;based on which build is going to run we have added different entry points, for this we will use &lt;code&gt;VUE_APP_SSR&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;Now we have to add few more code so that webpack can build server-side bundle properly.we have to set target to node &amp;amp;&amp;amp; libraryFormat to commonjs2 since this file is going to run via express&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  webpackConfig.target("node");
  webpackConfig.output.libraryTarget("commonjs2");

  webpackConfig
    .plugin("manifest")
    .use(new ManifestPlugin({ fileName: "ssr-manifest.json" }));

  webpackConfig.externals(nodeExternals({ allowlist: [/\.(css|vue)$/,] 
  }));
  webpackConfig.optimization.splitChunks(false).minimize(false);

  webpackConfig.plugins.delete("hmr");
  webpackConfig.plugins.delete("preload");
  webpackConfig.plugins.delete("prefetch");
  webpackConfig.plugins.delete("progress");
  webpackConfig.plugins.delete("friendly-errors");
  webpackConfig.plugin('limit').use(
    new webpack.optimize.LimitChunkCountPlugin({
      maxChunks: 1
    })
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can read more about this configuration on this &lt;a href="https://v3.vuejs.org/guide/ssr/build-config.html#example-configuration"&gt;SSRbuildConfig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the last part is to create an server.js file which we will run on server via express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const path = require('path');
const fs = require('fs');
const serialize = require('serialize-javascript');
const express = require('express');
const { renderToString } = require("@vue/server-renderer");
const  PORT = process.env.PORT || 4455
const manifest = require("../dist/server/ssr-manifest.json");
const appPath = path.join(__dirname, "../dist",'server', manifest["app.js"]);
const App = require(appPath).default;

const server = express();

server.use("/img", express.static(path.join(__dirname, "../dist/client", "img")));
server.use("/js", express.static(path.join(__dirname, "../dist/client", "js")));
server.use("/manifest.json", express.static(path.join(__dirname, "../dist/client", "manifest.json")));
server.use("/css", express.static(path.join(__dirname, "../dist/client", "css")));
server.use(
  "/favicon.ico",
  express.static(path.join(__dirname, "../dist/client", "favicon.ico"))
);

server.get('*', async (req, res) =&amp;gt; {
  const { app, router, store } = await App(req);

  await router.push(req.url);
  await router.isReady();

  let appContent = await renderToString(app);

  const renderState = `
    &amp;lt;script&amp;gt;
      window.INITIAL_DATA = ${serialize(store.state)}
    &amp;lt;/script&amp;gt;`;

  fs.readFile(path.join(__dirname, '../dist/client/index.html'), (err, html) =&amp;gt; {
    if (err) {
      throw err;
    }

    appContent = `&amp;lt;div id="app"&amp;gt;${appContent}&amp;lt;/div&amp;gt;`;

    html = html.toString().replace('&amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;', `${renderState}${appContent}`);
    res.setHeader('Content-Type', 'text/html');
    res.send(html);
  });
});

server.listen(PORT, ()=&amp;gt;{
  console.log(`server listening at port ${PORT}`)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we will be using above code which will intercept all request to our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const manifest = require("../dist/server/ssr-manifest.json");
const appPath = path.join(__dirname, "../dist",'server', manifest["app.js"]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#ssr-manifest.json
  "app.css": "/css/app.aaa5a7e8.css",
  "app.js": "/js/app.b8f9c779.js",
  "app.css.map": "/css/app.aaa5a7e8.css.map",
  "app.js.map": "/js/app.b8f9c779.js.map",
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is where we use manifest.json file to select appropriate  server file that would be served from express, contents of this json file is an object which has mapping for specific bundles&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await router.push(req.url);
await router.isReady();
let appContent = await renderToString(app);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;above mentioned code will be used to match url-page properly with router.push, then renderToString will output everything as string which would be served from express.&lt;/p&gt;

&lt;p&gt;In the above &lt;code&gt;server.js&lt;/code&gt; you can see &lt;code&gt;html&lt;/code&gt; variable holds the entire content that will be served from express to browser, next step would be to add support for meta-tags.&lt;/p&gt;

&lt;p&gt;After all these configuration, now our pages can be rendered from server, now we will use axios to fetch data from endpoint which can rendered from server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vue file
    const fetchInitialData = async () =&amp;gt; {
      const response = await axios('https://jsonplaceholder.typicode.com/posts')
      store.dispatch(AllActionTypes.USER_LISTS, response.data || [])
    }

    onServerPrefetch(async () =&amp;gt; {
     await fetchInitialData()
    })

    const listData = computed(() =&amp;gt; {
      return store.getters.getUserList || []
    });

    onMounted(async () =&amp;gt; {
      if(!listData.value.length){
        await fetchInitialData();
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is an example of how can we fetch data for server-side rendering, we have used &lt;code&gt;onServerPrefetch&lt;/code&gt; lifecycle method to fetch data &amp;amp;&amp;amp; for client side we are using onMounted hook incase data is not available in window from server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I have skipped few steps while explaining, all code regarding this article is present at &lt;a href="https://github.com/shubhadip/vuex-typescript"&gt;Repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resources which helped me to create this article are &lt;br&gt;
&lt;a href="https://v3.vuejs.org/guide/ssr/introduction.html#what-is-server-side-rendering-ssr"&gt;https://v3.vuejs.org/guide/ssr/introduction.html#what-is-server-side-rendering-ssr&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=XJfaAkvLXyU&amp;amp;t=1s"&gt;youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>typescript</category>
      <category>serversiderendering</category>
    </item>
    <item>
      <title>My Dev Journey: Week 10</title>
      <author>Harry York</author>
      <pubDate>Sun, 11 Jul 2021 12:45:34 +0000</pubDate>
      <link>https://dev.to/harryyork97/my-dev-journey-week-10-39n2</link>
      <guid>https://dev.to/harryyork97/my-dev-journey-week-10-39n2</guid>
      <description>&lt;p&gt;This week was the second week in the front end block of the course, and this week we spent a lot of time going further in depth with React.&lt;/p&gt;

&lt;p&gt;If you've enjoyed any of my blog series, then maybe consider following me on &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; 😁 and I'd also really appreciate if you all could check out my new &lt;a href="https://harryyork.dev/"&gt;portfolio site&lt;/a&gt; 🙏🏼 and maybe leave a few beginner project ideas in the comments to give me some inspiration!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-this-week"&gt;
  &lt;/a&gt;
  What I've learnt this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#data-fetching"&gt;
  &lt;/a&gt;
  Data fetching
&lt;/h3&gt;

&lt;p&gt;For the start of this week we used the Fetch API to make requests to endpoints to get the data back that we were going to be using in our apps. The fetch API was a good start but I prefered it when we started to use Axios, as I think it reads a lot clearer that fetch.&lt;/p&gt;

&lt;p&gt;I spent most of this first day getting base functionality added in to my app that retrieves NASA Astronomy Pictures of the Day, for specified dates in input fields.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-with-react"&gt;
  &lt;/a&gt;
  Styling with React
&lt;/h3&gt;

&lt;p&gt;Building on top of the base functionality I added a couple of extra features in like beign able to search by a date range, and then got going on styling. I wanted it to be a fairly minimal site, but to use similar tones to the NASA logo, so that it all ties in, and was pretty happy with adjusting to styling with React.&lt;/p&gt;

&lt;p&gt;One of the key principles from this lecture was on Mobile first design, and using media queries to display certain components styled in different ways because of screen sizes.&lt;/p&gt;

&lt;p&gt;Another thing we learnt but I didn't have chance to apply was the use of CSS modules, something that I'd like to apply on a side project or by refactoring the code from this two-day sprint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-routing"&gt;
  &lt;/a&gt;
  React Routing
&lt;/h3&gt;

&lt;p&gt;Routing in React was a blessing after having spent the last week with really long App files. The routing makes sense, especially after creating our own backends, it made processes much more alike.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h3&gt;

&lt;p&gt;Another issue I had with React at the start of the week was I felt like I was passing props through all over the place, which is where using Context allows me to have certain states to be seen globally across all components. This came in handy when wanting to tidy a lot of my prop chains up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-ive-found-useful-this-week"&gt;
  &lt;/a&gt;
  Resources I've found useful this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#css-tricks"&gt;
  &lt;/a&gt;
  CSS Tricks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com"&gt;CSS Tricks&lt;/a&gt; has been a great cheat-sheet style site, that has helped especially with &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;flex-box&lt;/a&gt; bits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-router"&gt;
  &lt;/a&gt;
  React Router
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React Router&lt;/a&gt; has also been great for seeing examples of setting up React Apps with Routing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#figma"&gt;
  &lt;/a&gt;
  Figma
&lt;/h3&gt;

&lt;p&gt;What's Figma? &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; is a pretty good way to quickly and collaboratively mock up the wireframes for an app and definitely helped us to start planning out what actually needed to be done first, rather than start aimlessly coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>bootcamp</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
