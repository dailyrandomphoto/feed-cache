<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HACKTOBERFEST 2021</title>
      <author>Siddhartha Mishra</author>
      <pubDate>Sun, 14 Nov 2021 20:33:15 +0000</pubDate>
      <link>https://dev.to/sid0542/hacktoberfest-2021-35j9</link>
      <guid>https://dev.to/sid0542/hacktoberfest-2021-35j9</guid>
      <description>&lt;p&gt;It was a great experience participating in Hacktoberfest this year. This was my second participation in Hacktoberfest. I am glad to share that I have successfully completed Hacktoberfest and learned a lots of things.&lt;/p&gt;

&lt;p&gt;Also, I just ordered my Hacktoberfest badge.&lt;/p&gt;

&lt;p&gt;Thank you Hacktoberfest!!&lt;br&gt;
Thank you Digital Ocean!!&lt;br&gt;
Thank you DEV!! &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Our Product Supply Chain Hub (SCH)</title>
      <author>Soumyojit Sen</author>
      <pubDate>Sun, 14 Nov 2021 20:33:02 +0000</pubDate>
      <link>https://dev.to/soumyojit/our-product-supply-chain-hub-sch-mml</link>
      <guid>https://dev.to/soumyojit/our-product-supply-chain-hub-sch-mml</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQMIYweE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914274519/wZCFh-ym8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQMIYweE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914274519/wZCFh-ym8.png" alt="Screenshot 2021-11-14 21.23.22.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our New Revolutionary Enterprise Product -  &lt;a href="https://www.eimsolutions.com"&gt;SCH ( Supply Chain Hub )&lt;/a&gt; , from EIM Solutions, SCHinfoTech.com, is helping Companies streamline their business processes. It helps companies digitize the connections, interactions &amp;amp; end to end business process integration with :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Suppliers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Manufacturing&lt;/strong&gt; ( Factory )&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It connects an organization's ERP systems, digital landscape and digital processes to the &lt;strong&gt;LAST MILE&lt;/strong&gt;. SCH ( supply chain hub ) has 4 modules, that addresses the above 4 business functions, namely :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SCH Supplier&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCH Customer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCH Factory&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCH Maintenance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our customers can subscribe to 1 or more of the above modules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kz-Z8AS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636916968316/lkCZmm-H5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kz-Z8AS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636916968316/lkCZmm-H5.png" alt="SCHLogo_Blue.png" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SCH is a cloud based PWA Web Application that can run on its own, or integrate with Backend Systems like SAP ERP or any others systems, depending on customer preference. It can run on any cloud platform, even on-premise in customer's data center.&lt;/p&gt;

&lt;p&gt;It can run on any browser, any device, of any screen size ( mobile / tablet/ laptop/ desktop ). It can also be installed as a Native App on Windows or Mobile, from Browser, Google PlayStore or IOS AppStore.&lt;/p&gt;

&lt;p&gt;It has a very attractive, user friendly and interesting UI Experience, which is very intuitive and easy to operate for any Non IT business user. Its screens are mobile responsive and behaves like any other Native App when it runs on mobile.&lt;/p&gt;

&lt;p&gt;A company can subscribe to multiple SCH modules. After a user logs in, he/she can see those modules, which he/she has access to, as clickable UI cards as shown in the above image. He/ She can click one of those modules, to get inside it, and start executing it's business processes…&lt;/p&gt;

&lt;p&gt;SCH is being used by multiple companies, across the globe, like Coca Cola , Aditya Birla, Toyota Boshuku, L&amp;amp;T IDPL, Cavinkare, Mahindra CIE, Jindal Steel Works, Olam etc. They use SCH to connect with their suppliers, customers, factory and maintenance, and make their business processes efficient, profitable, contact less, paper less, and fast.&lt;/p&gt;

&lt;p&gt;Many more customers are currently getting onboarded, as I am writing this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zE66eD2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914464234/vPvO1JPvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zE66eD2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914464234/vPvO1JPvj.png" alt="Screenshot 2021-11-14 23.43.45.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With SCH a company integrates its business with Suppliers, Customers, Factory and Maintenance. SCH also easily integrates the business data from these Last Miles, with backend ERP systems, like SAP ECC, or any other Business Systems that the company might be using.&lt;/p&gt;

&lt;p&gt;SCH &lt;strong&gt;Analytics&lt;/strong&gt; and &lt;strong&gt;Dashboards&lt;/strong&gt; provides all information at finger tips ,related to the mentioned business modules , that helps decision making fast and accurate.&lt;/p&gt;

&lt;p&gt;SCH is built on latest &amp;amp; modern technology platform. Its has cutting-edge well-formed scalable architecture, that allows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quick installation,&lt;/li&gt;
&lt;li&gt;Configurable screens , process flows, and workflows&lt;/li&gt;
&lt;li&gt;Easy Customization for adding New Screens, Processes and workflows&lt;/li&gt;
&lt;li&gt;Robust Security,&lt;/li&gt;
&lt;li&gt;Seamless Operation,&lt;/li&gt;
&lt;li&gt;Easy scalability&lt;/li&gt;
&lt;li&gt;Detailed Audit Trail&lt;/li&gt;
&lt;li&gt;Device independence,&lt;/li&gt;
&lt;li&gt;OS independence,&lt;/li&gt;
&lt;li&gt;Hardware independence.&lt;/li&gt;
&lt;li&gt;Cloud Platform independence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SCH has acquired and passed necessary &lt;strong&gt;Certifications&lt;/strong&gt; like &lt;strong&gt;VAPT&lt;/strong&gt; and &lt;strong&gt;SAP Certification&lt;/strong&gt;.&lt;br&gt;
Apart from the standard features it provides, additional custom screens &amp;amp; processes can to be easily built onto it by business users, without coding, using its Low code Engine, Rule Engine, Analytics Engine, AI , and BPM Workflow Engine.&lt;/p&gt;

&lt;p&gt;Its state-of-the-art Roles and Authorization Engine ensures that, access to every Resource, Data , Menu , Screen objects are tightly controlled, authenticated, authorized and audited.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6HrgGR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914719896/MdvNEAI3fW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6HrgGR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914719896/MdvNEAI3fW.png" alt="Screenshot 2021-11-14 23.45.36.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its affordable price , customizable features , excellent lifetime support, low code engine are key unique selling points..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMhSxNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914756739/LiYUqepji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMhSxNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636914756739/LiYUqepji.png" alt="image (49).png" width="880" height="962"&gt;&lt;/a&gt;&lt;br&gt;
SCH - Business Modules ( supply chain hub )SCH Supplier - Business Functions.&lt;/p&gt;

&lt;p&gt;keep watching this space and profile for more updates on our digital enterprise products….&lt;/p&gt;

</description>
      <category>soumyojit</category>
      <category>software</category>
      <category>saas</category>
      <category>supplychain</category>
    </item>
    <item>
      <title>Function Smoothing</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 14 Nov 2021 20:31:21 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/function-smoothing-2a3c</link>
      <guid>https://dev.to/jayantgoel001/function-smoothing-2a3c</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/prisoner849/embed/zYZzmXB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Practice / 3.js</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 14 Nov 2021 20:30:42 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/practice-3js-51bp</link>
      <guid>https://dev.to/jayantgoel001/practice-3js-51bp</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/toshiya-marukubo/embed/oNwQjvr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Sparkly skull ✨</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 14 Nov 2021 20:28:57 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/sparkly-skull-2ldn</link>
      <guid>https://dev.to/jayantgoel001/sparkly-skull-2ldn</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Mamboleoo/embed/yLbxYdx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Host a static website on AWS under a minute with Terraform</title>
      <author>Emre Oztoprak</author>
      <pubDate>Sun, 14 Nov 2021 20:23:32 +0000</pubDate>
      <link>https://dev.to/aws-builders/host-a-static-website-on-aws-under-a-minute-with-terraform-3hmd</link>
      <guid>https://dev.to/aws-builders/host-a-static-website-on-aws-under-a-minute-with-terraform-3hmd</guid>
      <description>&lt;p&gt;If you have a static website and you want a simple solution, S3 and Cloudfront are great choices. S3 with Cloudfront secure, scalable way to host static content. Also, we will get an SSL certificate for our domain and it will be free.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h4&gt;

&lt;p&gt;Before the deployment of this terraform module, make sure your hosted zone exists in Route 53 and move your domain to Route53 by changing NS records on your DNS provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icnRWvWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tophd1lmax66q2podj4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icnRWvWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tophd1lmax66q2podj4.jpg" alt="terraform-s3-cloudfront-route53" width="750" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use 4 AWS Services;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;S3 - Storing website files (HTML, CSS, JavaScript)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloudfront - CDN&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Certificate Manager - SSL Certificate&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Route 53 - DNS records&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are using Cloudfront we don't need the public bucket, so we will create a private S3 bucket. We will use OAI (Origin Access Identity) settings when we create Cloudfront. This means that only our Cloudfront distribution can access and read the files in our S3 bucket. Also, we will create an SSL certificate from Certificate Manager and Cloudfront redirect all HTTP traffic to HTTPS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X9mtn7kV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gxdt39ga82ch41dafw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X9mtn7kV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gxdt39ga82ch41dafw6.png" alt="cloudfront-oai" width="555" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First clone the repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone git@github.com:emreoztoprak/terraform-aws-s3-cloudfront-acm.git

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change these two variables in the &lt;strong&gt;terraform.tfvars&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
SiteTags = "Example" (Tag value of the resources.)

domainName = "example.com"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now run this module when you change the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform init
terraform plan
terrafom apply --auto-approve

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the deployment is completed upload your website files to in S3 Bucket. I configured DefaultRootObject as index.html. Basically, when users access your root URL they will see index.html file.&lt;/p&gt;

&lt;p&gt;I just uploaded a simple HTML file.&lt;/p&gt;

&lt;p&gt;Congratulations. You made it. :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aE1WUO-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvx04yfdub78ls5g9z0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aE1WUO-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvx04yfdub78ls5g9z0e.png" alt="aws-cloudfront" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you find this tutorial helpful!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>terraform</category>
      <category>cloudfront</category>
      <category>s3</category>
    </item>
    <item>
      <title>How to Improve Your Coding Skills for Free</title>
      <author>Jason Shelley</author>
      <pubDate>Sun, 14 Nov 2021 20:00:29 +0000</pubDate>
      <link>https://dev.to/kinjiru09/how-to-improve-your-coding-skills-for-free-5525</link>
      <guid>https://dev.to/kinjiru09/how-to-improve-your-coding-skills-for-free-5525</guid>
      <description>

&lt;p&gt;It is amazing how many people have join the ranks of coders over the last few years. Whether you are a professional coder or just code for fun, learning this skill will definitely change your outlook on life and how you think.&lt;/p&gt;

&lt;p&gt;With the advent of online tutorials, bootcamps, YouTube videos and blogs, learning the basics of coding is extremely easy.&lt;/p&gt;

&lt;p&gt;However, some of these resources are limited in what they offer. Sure, you can learn theory, algorithms, data structures, etc. But if new developers would like to improve certain skills, for example, how to structure a large application, how to create performant and secure code, how to create test cases, log and fix bugs, documentation, communication with other team members, etc they need to get their hands wet. One of the best ways to do this is to join an open source project.&lt;/p&gt;

&lt;p&gt;For many new developers though, joining an open source project seems daunting. They may feel they do not have the skills to contribute, and such fears are understandable. I could spend the rest of this article explaining why they shouldn't let fear stop them from joining an open source project, but instead I will offer another solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#another-free-alternative"&gt;
  &lt;/a&gt;
  Another Free Alternative
&lt;/h2&gt;

&lt;p&gt;Many articles talk about how to use GitHub, Gutbucket, Gitlab, or a similar open source repository to upload your code. Many of these articles fail to help new developers to see the rich and vast amount of information these free repositories have to offer to new developers.&lt;/p&gt;

&lt;p&gt;We will use GitHub as an example. You can create a free account using your email address. You can search, download, read through and play with code that experienced developers have created and uploaded for other people to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits"&gt;
  &lt;/a&gt;
  What are the benefits?
&lt;/h2&gt;

&lt;p&gt;Many of these repositories are real, live code that thousands of people use everyday. You will learn valuable lessons on how to structure code, how to use code to tackle a problem, proper documentation, proper testing, logging and resolving bugs, how to commit code with proper commit messages, how to structure branches and releases, how to use CI/CD (if the repo is using it), how to write performant code, how to write secure code, etc.&lt;br&gt;
You can learn so much from these projects. You can learn at your own pace. And this is a free method to improve your coding skills.&lt;br&gt;
The main point is you do not need to join an open source project to improve your coding skills. You are welcome to download the code, read it, run it, play with it, and learn from it.&lt;br&gt;
Build your skills. Build your knowledge. Build your confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do%C2%A0it"&gt;
  &lt;/a&gt;
  How to do it?
&lt;/h2&gt;

&lt;p&gt;Most popular projects will have a Readme file, an example folder, a test folder and a src folder. "src" is short for source, and this is where the bulk of the code can be found.&lt;br&gt;
First, read the Readme file to understand the purpose of the project and how to set up everything. Next, take a look at the example folder. Usually the examples are simple so it will be easy to understand the code. Play around with the examples. This will also help you later when you are looking in the src folder. Finally, take a look at the tests. Run them and see if you understand what's happening. See if you can write your own test case following their format. Obviously, a big project will have comprehensive test cases. But still this is good training.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just as reading books can open your mind to the world around you. Reading open source code will open your mind to the world of software development.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Uploading Docker Images to AWS ECR</title>
      <author>DH Kim</author>
      <pubDate>Sun, 14 Nov 2021 19:38:55 +0000</pubDate>
      <link>https://dev.to/icncsx/uploading-docker-images-to-aws-ecr-dgp</link>
      <guid>https://dev.to/icncsx/uploading-docker-images-to-aws-ecr-dgp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#aws"&gt;
  &lt;/a&gt;
  AWS
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#-raw-create-an-ecr-repo-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Create an ECR Repo&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr create-repository &lt;span class="nt"&gt;--repository-name&lt;/span&gt; &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-login-to-ecr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Log-in to ECR&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; region | docker login &lt;span class="nt"&gt;--username&lt;/span&gt; AWS &lt;span class="nt"&gt;--password-stdin&lt;/span&gt; &amp;lt;registry_id&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-tag-your-image-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Tag your image&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Tag your image with the Amazon ECR registry, repository, and optional image tag name combination to use. This is important if we want to push to ECR and not DockerHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker tag &amp;lt;image_id&amp;gt; &amp;lt;registry_id&amp;gt;.dkr.ecr.region.amazonaws.com/&amp;lt;repo_name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-upload-image-to-ecr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Upload image to ECR&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push &amp;lt;registryId&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;repo&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>programming</category>
    </item>
    <item>
      <title>Spring Boot Architecture</title>
      <author>Maddy</author>
      <pubDate>Sun, 14 Nov 2021 19:38:35 +0000</pubDate>
      <link>https://dev.to/maddy/spring-boot-architecture-547i</link>
      <guid>https://dev.to/maddy/spring-boot-architecture-547i</guid>
      <description>&lt;p&gt;Originally published on my &lt;a href="https://techwithmaddy.com/spring-boot-architecture"&gt;blog&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Spring Boot is a more user-friendly version of the Spring Framework. With Spring Boot, you can create autonomous and easy to run applications. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHAT IS THE DIFFERENCE BETWEEN  SPRING AND SPRING BOOT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you've ever tried to write a Java application time ago, you would have noticed how much work you had to do to perform database operations. It's a tiring process! &lt;/p&gt;

&lt;p&gt;The Spring Framework simplifies these operations, thanks to the Spring JDBC module. &lt;/p&gt;

&lt;p&gt;Spring is the combination of multiple sub-frameworks. It has many modules, for example, Spring MVC, Spring  JDBC, Spring  AOP, Spring  ORM, and Spring Test. The core feature of the Spring Framework is &lt;em&gt;Dependency Injection&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Even though Spring has made the development of Java applications easier, I think that it is vast and complicated to master.  In the past, I tried to learn the Spring Framework from scratch, and I found it a long experience. This is where &lt;strong&gt;Spring Boot&lt;/strong&gt; comes in handy, though. 😁 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHAT IS SPRING BOOT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot is built on top of the Spring Framework. It's a more automated and simplified version of Spring. Spring Boot makes it easy to create an up and running application in a few minutes. You go to  &lt;a href="https://start.spring.io/"&gt;Spring Initializr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6W8b1ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636841347347/XD_UTMM8P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6W8b1ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636841347347/XD_UTMM8P.png" alt="springInitializr.png" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the website will generate the application for you in an instant. &lt;/p&gt;

&lt;p&gt;If you're undecided on whether to learn Spring or Spring Boot, I'd say to at least know the basics of the Spring Framework and then jump onto Spring Boot. &lt;/p&gt;

&lt;p&gt;Now let's talk about Spring Boot Architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPRING BOOT ARCHITECTURE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot Architecture has four layers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Presentation Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistence Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Layer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcbiyJo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636840785484/hxIUT9R03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcbiyJo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636840785484/hxIUT9R03.png" alt="Spring Boot Architecture.png" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PRESENTATION LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is at the top of the architecture. This tier is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Performing authentication.&lt;/p&gt;

&lt;p&gt;✔️ Converting JSON data into an object (and vice versa).&lt;/p&gt;

&lt;p&gt;✔️ Handling HTTP requests.&lt;/p&gt;

&lt;p&gt;✔️ Transfering authentication to the business layer.&lt;/p&gt;

&lt;p&gt;The presentation layer is the equivalent of the Controller class. The Controller class handles all the incoming REST API requests (GET, POST, PUT, DELETE, PATCH) from the Client. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUSINESS LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The business layer is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Performing validation.&lt;/p&gt;

&lt;p&gt;✔️ Performing authorization.&lt;/p&gt;

&lt;p&gt;✔️ Handling the business logic and rules.&lt;/p&gt;

&lt;p&gt;This layer is the equivalent to the Service class. It's where we handle the business logic. If you're wondering what do we mean by "business logic", I found an interesting discussion on &lt;a href="https://softwareengineering.stackexchange.com/questions/234251/what-really-is-the-business-logic"&gt;StackExchange&lt;/a&gt;. In short, the business logic in software engineering is where we decide what the software needs to do. An example of this is validation. If you are ever requested to validate something, this needs to happen inside the Service class. &lt;/p&gt;

&lt;p&gt;The Business layer communicates with both the Presentation layer and the Persistence Layer. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PERSISTENCE LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Containing storage logic.&lt;/p&gt;

&lt;p&gt;✔️ Fetching objects and translating them into database rows (and vice versa).&lt;/p&gt;

&lt;p&gt;This layer is the equivalent of the Repository interface. We write database queries inside this interface. &lt;/p&gt;

&lt;p&gt;The Persistence layer is the only layer that communicates with the Business layer and the Database layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DATABASE LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is responsible for:&lt;/p&gt;

&lt;p&gt;✔️ Performing database operations (mainly CRUD operations).&lt;/p&gt;

&lt;p&gt;This layer is simply the actual database that you decide to use to build your application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPRING BOOT WORKFLOW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoP1Cid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636842342576/7ShwFxJxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoP1Cid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636842342576/7ShwFxJxx.png" alt="Spring Boot workflow.png" width="880" height="619"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot workflow acts like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Client makes an HTTP request.&lt;/li&gt;
&lt;li&gt;The Controller class receives the HTTP request.&lt;/li&gt;
&lt;li&gt;The Controller understands what type of request will process, and then it deals with it.&lt;/li&gt;
&lt;li&gt;If it is needed, it calls the service class.&lt;/li&gt;
&lt;li&gt;The Service Class is going to handle the business logic. It does this on the data from the database.&lt;/li&gt;
&lt;li&gt;If everything goes well, we return a JSP page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading my article. Until next time! 👋🏾&lt;/p&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Lambda container approach in AWS</title>
      <author>DH Kim</author>
      <pubDate>Sun, 14 Nov 2021 19:28:24 +0000</pubDate>
      <link>https://dev.to/icncsx/lambda-container-approach-in-aws-23p4</link>
      <guid>https://dev.to/icncsx/lambda-container-approach-in-aws-23p4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-zip-vs-container-approach-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Zip vs Container Approach&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;There are two ways to use Lambda functions in AWS. One is to provide the deployable artifact in the form of a zip file. You then have a variety of runtimes you can choose from: &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html"&gt;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other approach is the Lambda container approach. IMO, the container approach to Lambda management has two main advantages over the zip approach. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-runtime-selection-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Runtime selection&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;With the zip approach, you have to rely on Amazon supporting the desired runtime. For example, if your code depends on Python3.10, you better hope that Amazon supports that. In a container approach however, the runtime is something you have full control over. Just make sure either your base image supports the runtime or you install the runtime as part of one of your RUN statements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-building-dependencies-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Building dependencies&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Non-native packages such as pandas, lxml, etc have to be built in the target environment for the compiled binaries to work. For example, if you build pandas on Mac, then the compiled binaries will work on Mac - not on Amazon Linux 2 which is what Lambda runs on.&lt;/p&gt;

&lt;p&gt;With containers, you no longer have to worry about building for a target OS, as you're able to encapsulate OS details in an image. Put simply, the image you build locally will just work in Lambda. How easy is that!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Getting started with SNS and SQS</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 14 Nov 2021 18:58:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i</link>
      <guid>https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i</guid>
      <description>&lt;p&gt;&lt;a href="#sns"&gt;Amazon Simple Notification Service (SNS)&lt;/a&gt; and &lt;a href="#sqs"&gt;Amazon Simple Queue Service (SQS)&lt;/a&gt; are the famous services which is leveraged to architect applications which are event driven and decoupled. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#eventdriven-architecture"&gt;
  &lt;/a&gt;
  Event-driven architecture
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Event-driven architecture (EDA)&lt;/strong&gt; is one where the components of the architecture are triggered whenever an event has occurred. My first post on Dev.To explains more about EDA.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/zachjonesnoel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="zachjonesnoel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zachjonesnoel/what-why-when-event-driven-architecture-4fpa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What? Why? When? Event-driven architecture&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel ・ Apr 16 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#eventdriven&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#decoupled-architecture"&gt;
  &lt;/a&gt;
  Decoupled architecture
&lt;/h4&gt;

&lt;p&gt;Whenever a system is architected, it is designed with the key concept of &lt;strong&gt;decoupling&lt;/strong&gt; where the components of the architecture are not dependent on each other rather it functions as a stand-alone component and communicates whenever required. This exponential removes high dependence between components. And if something fails, it does not disturb the rest of the system. This is also the idea behind &lt;strong&gt;event-driven architecture&lt;/strong&gt; which is extensively adapted in the serverless world.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fifo"&gt;
  &lt;/a&gt;
  FIFO
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;FIFO&lt;/strong&gt; which is abbreviated as &lt;strong&gt;First In First Out&lt;/strong&gt; which preservers the order of messages such that the first message sent is the first message which is delivered. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-sns"&gt;
  &lt;/a&gt;
  What is SNS? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Amazon Simple Notification Service (SNS)&lt;/a&gt; as the name goes it is a notification service which works on the &lt;em&gt;publisher-subscriber (Pub/Sub)&lt;/em&gt; messaging model. This is a fully managed messaging service for application integrations. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbL5_A7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpxw28l9m23gh8th20d8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbL5_A7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpxw28l9m23gh8th20d8.png" alt="Pub/Sub" width="613" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-concepts-of-pubsub-"&gt;
  &lt;/a&gt;
  The concepts of Pub/Sub -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Topic&lt;/strong&gt; : A common medium/channel for the message delivery between a &lt;em&gt;publisher&lt;/em&gt; and &lt;em&gt;subscriber&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message&lt;/strong&gt; : The serialized message which the publisher sends to the &lt;em&gt;topic&lt;/em&gt; without the information as to who are the &lt;em&gt;subscribers&lt;/em&gt; and what is the action done after receiving the message.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Publisher&lt;/strong&gt; : The component which &lt;em&gt;sends/publishes&lt;/em&gt; the &lt;em&gt;message&lt;/em&gt; to a specific &lt;em&gt;topic&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subscriber&lt;/strong&gt; : The component which has &lt;em&gt;subscribed/registered&lt;/em&gt; to listen for any incoming message from a specific &lt;em&gt;topic&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SNS facilitates with &lt;em&gt;publishers&lt;/em&gt; from external or triggered from AWS Services such as &lt;a href="https://aws.amazon.com/eventbridge/"&gt;EventBridge&lt;/a&gt; or triggers from &lt;a href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt; object events, &lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda fns&lt;/a&gt; and many more or it could be involved programmatically with &lt;code&gt;sns:publish&lt;/code&gt; which publish to a designated &lt;em&gt;topic&lt;/em&gt; and all the &lt;em&gt;subscribers&lt;/em&gt; to that specific &lt;em&gt;topic&lt;/em&gt; receives the message. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-features-of-sns"&gt;
  &lt;/a&gt;
  Key features of SNS
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pub/Sub model&lt;/strong&gt; makes it really easy to integrate with an existing application. &lt;/li&gt;
&lt;li&gt;The types of &lt;em&gt;topics&lt;/em&gt; offered by SNS are - &lt;strong&gt;Standard Topics&lt;/strong&gt; and &lt;strong&gt;FIFO Topics&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple publisher&lt;/strong&gt; supported with AWS services natively such as &lt;a href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt;, &lt;a href="https://aws.amazon.com/eventbridge/"&gt;EventBridge&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt;and also for application integration and programmatic integration for publishing message to a topic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple subscribers&lt;/strong&gt; are supported for a topic which could be &lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda fns&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt;, &lt;a href="https://aws.amazon.com/kinesis/"&gt;Kinesis&lt;/a&gt;, HTTP endpoint. The subscribers are not only limited to applications but also &lt;em&gt;email notifications&lt;/em&gt;, &lt;em&gt;push notifications&lt;/em&gt; on the mobile apps and &lt;em&gt;SMS messages&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/blogs/compute/simplify-pubsub-messaging-with-amazon-sns-message-filtering/"&gt;&lt;strong&gt;Attribute based filtering&lt;/strong&gt;&lt;/a&gt; is supported on a topic where you can filter the message based on the message's attribute where the subscribers uses a &lt;em&gt;subscription filter policy&lt;/em&gt; based on which the message is delivered to the satisfying subscriber. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message encryption&lt;/strong&gt; is considered an important aspect for any messaging service, this is achieved with &lt;a href="https://aws.amazon.com/kms/"&gt;AWS Key Management System&lt;/a&gt; which uses the &lt;em&gt;customer master key (CMK)&lt;/em&gt; and &lt;em&gt;256-bit AES-GCM algorithm&lt;/em&gt; to encrypt the message in rest and the message is decrypted when the subscribers receive the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;SNS pricing is categorized with &lt;em&gt;type of topic&lt;/em&gt; and the &lt;em&gt;sms&lt;/em&gt; cost. &lt;br&gt;
SMS messages are modeled as &lt;em&gt;pay-as-you-go&lt;/em&gt; for both &lt;em&gt;transactional&lt;/em&gt; and &lt;em&gt;promotional&lt;/em&gt; messages. Due to geographic restrictions and also international SMS cost would apply. &lt;br&gt;
Based on topic cost is - &lt;br&gt;
&lt;em&gt;Standard topic&lt;/em&gt; has first 1 million requests per month free and $0.50 per 1 million requests thereafter&lt;br&gt;
&lt;em&gt;FIFO topic&lt;/em&gt; has &lt;code&gt;Publish&lt;/code&gt; API requests $0.30 per 1 million and $0.017 per GB of payload data. &lt;code&gt;Subscription&lt;/code&gt; messages are $0.01 per 1 million and $0.001 per GB of payload data.&lt;br&gt;
More details available in &lt;a href="https://aws.amazon.com/sns/pricing/"&gt;SNS Pricing&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-sqs"&gt;
  &lt;/a&gt;
  What is SQS? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;Amazon Simple Queue Service (SQS)&lt;/a&gt; is the message queuing service. This fully-managed service helps applications which leverages &lt;em&gt;serverless architectures&lt;/em&gt;, &lt;em&gt;micro-services architectures&lt;/em&gt; and &lt;em&gt;distributed services&lt;/em&gt; to design and architect a perfect decoupled application. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Amo5MGOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6701ava6rqcsjtmlftqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amo5MGOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6701ava6rqcsjtmlftqt.png" alt="SQS" width="531" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-features-of-sns"&gt;
  &lt;/a&gt;
  Key features of SNS
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Types of &lt;em&gt;queues&lt;/em&gt; offered by SQS - &lt;strong&gt;Standard Queue&lt;/strong&gt; and &lt;strong&gt;FIFO Queue&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dead Letter Queue (DLQ)&lt;/strong&gt; supported for the messages which are not processed. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message encryption&lt;/strong&gt; with &lt;a href="https://aws.amazon.com/kms/"&gt;AWS Key Management System&lt;/a&gt; is supported where the message is encrypted as soon as it is pushed into the queue and encrypted until in the queue whereas it is decrypted when sent to the consumer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Long polling&lt;/strong&gt; helps reducing the cost of explicit polling. The long polling request can wait upto 20 seconds until the next message is received when the queue is empty.&lt;/li&gt;
&lt;li&gt;Recently, AWS announced SQS Queues can be trigger Lambda functions which belong to another AWS Account.
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/sqs-queue-with-across-account-lambda-triggers-4job" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;SQS Queue with a cross-account Lambda triggers&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Oct 10 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lambdafunction&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#triggers&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;SQS has the free tier with 1 million SQS requests free and after which the cost is categorized with the &lt;em&gt;type of queue per million requests&lt;/em&gt;.&lt;br&gt;
More details available in &lt;a href="https://aws.amazon.com/sqs/pricing/"&gt;SQS Pricing&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sns</category>
      <category>sqs</category>
      <category>aws</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Learning Svelte Part #4</title>
      <author>Alessandro</author>
      <pubDate>Sun, 14 Nov 2021 18:44:14 +0000</pubDate>
      <link>https://dev.to/alessandrogiuzio/learning-svelte-part-4-155m</link>
      <guid>https://dev.to/alessandrogiuzio/learning-svelte-part-4-155m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#props-and-components"&gt;
  &lt;/a&gt;
  Props and Components
&lt;/h2&gt;

&lt;p&gt;Hello developers, welcome back to my series of articles about my journey to learn Svelte, this is my 4th post about it, and so far it’s very helpful for my learning, writing down my steps make it public make a good contribution to my knowledge.&lt;/p&gt;

&lt;p&gt;Today I am writing about Props and Components.&lt;/p&gt;

&lt;p&gt;Normally, a Svelte website is made with of many different components: App.svelte, Header.svelte, Content.svelte, Footer.svelte and so on. &lt;br&gt;
All this components will be structured to make up the full page, the root component it’s the App.svelte, this component will be directly deployed in the Dom by the main.JS file.&lt;/p&gt;

&lt;p&gt;We will nest all the others components with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEmQ9LYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikujhpxpf5hked6f6dnm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEmQ9LYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikujhpxpf5hked6f6dnm.png" alt="Svelte components structure" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The question is: why we need to split our webapp in so many different pieces and not write all the code in the App.svelte root component?&lt;br&gt;
The main reason is to keep your code easy to read, tidy and modular.&lt;br&gt;
 Imagine we put everything in one module, the chances that our code will be disorganized are very high.&lt;/p&gt;

&lt;p&gt;Another reason to split in different modules is that with this method we can easily reuse it, we can create components to use whenever we need.&lt;/p&gt;

&lt;p&gt;We can easily import our components in the App.svelte  using the syntax import&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--73Q98L25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je3lsnog2qy3xmc0cmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73Q98L25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je3lsnog2qy3xmc0cmf.png" alt="Script hero" width="595" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then we will display it in our  HTML like in the follow example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPWzi8Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyzubw0y8283hlo6bq6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPWzi8Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyzubw0y8283hlo6bq6n.png" alt="hero" width="634" height="101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to change any data in the reused component, we can do that, using props.&lt;/p&gt;

&lt;p&gt;How can we pass props to a component?&lt;/p&gt;

&lt;p&gt;We need to declare the props we want to pass in, in the component itself, we can call it how we like it and we need to set it to a value that ca be: a string, an object, could be an integer. When the components it’s created it will read the props and the value&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pSxXvJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mxcy99yy3w8iu77c2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pSxXvJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mxcy99yy3w8iu77c2r.png" alt="properties " width="632" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access the prop inside the Footer component we need to declare that we are going to use that variable called “prop” (you can name it how you like most) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kM1MnkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsbtde7r3rf66x2xwp4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kM1MnkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsbtde7r3rf66x2xwp4y.png" alt="Image description" width="633" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We declare the variable “prop”,  and set to “export” , so now this way we can access the value outside the component.&lt;/p&gt;

&lt;p&gt;That’s it for my contribution today, it’s difficult for me write in English but I will keep going, please feel free to leave a comment and roast my explanation.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
