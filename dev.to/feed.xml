<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting Started with CSS Animations</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 26 Aug 2021 14:24:41 +0000</pubDate>
      <link>https://dev.to/codesphere/getting-started-with-css-animations-402h</link>
      <guid>https://dev.to/codesphere/getting-started-with-css-animations-402h</guid>
      <description>&lt;p&gt;Earlier this week we spoke about some helpful &lt;a href="https://codesphere.com/articles/the-ux-amateurs-guide-to-web-animations-7307dbb98ae"&gt;UX tips to keep in mind when you are creating animations for your website.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you're new to web animations, however, it may be helpful to take a dive into leveraging CSS animations to make your website more sleek, memorable, and usable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyframes"&gt;
  &lt;/a&gt;
  Keyframes
&lt;/h3&gt;

&lt;p&gt;The key to creating CSS animations is understanding keyframes (see what I did there?), which are the unique states that an object goes through in its animation.&lt;/p&gt;

&lt;p&gt;Every CSS animation must have at least two keyframes, each with a specific styling. The object being animated will then gradually transition between the styles of each keyframe.&lt;br&gt;
Using keyframes, we can define animation in CSS like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;While in that example we only have two keyframes, one at the beginning and one at the end, keep in mind that we can define additional keyframes for any point in the animation.&lt;/p&gt;

&lt;p&gt;We can then assign a style to this animation by its name like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And there you go, you've animated a simple fade-in effect.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#getting-fancy"&gt;
  &lt;/a&gt;
  Getting Fancy
&lt;/h3&gt;

&lt;p&gt;Don't worry though, CSS has a lot more ways than just duration to configure your animation. Let's go through them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;animation-delay - Exactly what it sounds like. Delays the start of your animation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;animation-iteration-count - How many times the animation will run, put 'infinite' for it to repeat forever&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;animation-direction - Can be forward, backward, alternate (Run forwards then backward), or alternate-reverse (Run backward then forwards)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;animation-timing-function - We explained the concept of easing functions in this article, but it is basically the pace at which you want the animation to run. You will normally want this set to ease, ease-in, or ease-out&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;animation-fill-mode - After the animation is finished, do you the element to retain its starting (backward) or ending (forwards) state&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#some-simple%C2%A0demos"&gt;
  &lt;/a&gt;
  Some Simple Demos
&lt;/h3&gt;

&lt;p&gt;With that in mind, here are some simple animations you can make:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Color Changing Background:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Loading Icon:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Expanding Button:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;CSS Animations continue to be one of the easiest ways to add some life to your website. Keep in mind, however, that they are far from the only way.&lt;/p&gt;

&lt;p&gt;There are plenty of animation libraries to pair well with your favorite javascript frameworks, not to mention the good amount of animation that can be done with HTML canvas and some simple javascript.&lt;/p&gt;

&lt;p&gt;Have any questions about CSS animations? Drop them down below.&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at &lt;a href="https://link.codesphere.com/CU"&gt;Codesphere&lt;/a&gt;, the next generation cloud provider&lt;/p&gt;

</description>
      <category>css</category>
      <category>ux</category>
      <category>animation</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Exploring the CSS Paint API: Image Fragmentation Effect</title>
      <author>Temani Afif</author>
      <pubDate>Thu, 26 Aug 2021 14:15:03 +0000</pubDate>
      <link>https://dev.to/this-is-learning/exploring-the-css-paint-api-image-fragmentation-effect-3ekl</link>
      <guid>https://dev.to/this-is-learning/exploring-the-css-paint-api-image-fragmentation-effect-3ekl</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/afif/css-only-fragmentation-effect-using-one-element-18kg"&gt;my previous article&lt;/a&gt;, I created a fragmentation effect using CSS mask and custom properties. It was a neat effect but it has one drawback: it uses a lot of CSS code (generated using Sass). This time I am going to redo the same effect but rely on the new Paint API. This drastically reduces the amount of CSS and completely removes the need for Sass.&lt;/p&gt;

&lt;p&gt;Here is what we are making. Like in the previous article, only Chrome and Edge support this for now.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRWeqmZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See that? No more than five CSS declarations and yet we get a pretty cool hover animation.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-paint-api"&gt;
  &lt;/a&gt;
  What is the Paint API?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API"&gt;Paint API&lt;/a&gt; is part of the Houdini project. Yes, "Houdini" the strange term that everyone is talking about. A lot of articles already cover the theoretical aspect of it, so I won't bother you with more. If I have to sum it up in a few words, I would simply say : &lt;strong&gt;it's the future of CSS&lt;/strong&gt;. The Paint API (and the other APIs that fall under the Houdini umbrella) allow us to extend CSS with our own functionalities. We no longer need to wait for the release of new features because we can do it ourselves!&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://www.w3.org/TR/css-paint-api-1/"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An API for allowing web developers to define a custom CSS &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; with javascript [sic], which will respond to style and size changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And from &lt;a href="https://github.com/w3c/css-houdini-drafts/blob/main/css-paint-api/EXPLAINER.md"&gt;the explainer&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The CSS Paint API is being developed to improve the extensibility of CSS. Specifically this allows developers to write a paint function which allows us to draw directly into an elements [sic] background, border, or content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think the idea is pretty clear. We can draw what we want. Let’s start with a very basic demo of background coloration:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBmdbbR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We add the paint worklet using &lt;code&gt;CSS.paintWorklet.addModule('your_js_file')&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We register a new paint method called draw.&lt;/li&gt;
&lt;li&gt;Inside that, we create a &lt;code&gt;paint()&lt;/code&gt; function where we do all the work. And guess what? Everything is like working with &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;. That &lt;code&gt;ctx&lt;/code&gt; is the 2D context, and I simply used some well-known functions to draw a red rectangle covering the whole area.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This may look unintuitive at first glance, but notice that the main structure is always the same: the three steps above are the "copy/paste" part that you repeat for each project. The real work is the code we write inside the &lt;code&gt;paint()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Let's add a variable:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExmjPwZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, the logic is pretty simple. We define the getter &lt;code&gt;inputProperties&lt;/code&gt; with our variables as an array. We add properties as a third parameter to &lt;code&gt;paint()&lt;/code&gt; and later we get our variable using &lt;code&gt;properties.get()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's it! Now we have everything we need to build our complex fragmentation effect.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#building-the-mask"&gt;
  &lt;/a&gt;
  Building the mask
&lt;/h2&gt;

&lt;p&gt;You may wonder why the paint API to create a fragmentation effect. We said it’s a tool to draw images so how it will allow us to fragment an image?&lt;/p&gt;

&lt;p&gt;In the previous article, I did the effect using different mask layer where each one is a square defined with a gradient (remember that a gradient is an image) so we got a kind of matrix and the trick was to adjust the alpha channel of each one individually.&lt;/p&gt;

&lt;p&gt;This time, instead of using many gradients we will define only one custom image for our mask and that custom image will be handled by our paint API.&lt;/p&gt;

&lt;p&gt;An example please!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWjGbLN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the above, I have created an image having an opaque color covering the left part and a semi-transparent one covering the right part. Applying this image as a mask gives us the logical result of a half-transparent image.&lt;/p&gt;

&lt;p&gt;Now all we need to do is to split our image to more parts. Let's define two variables and update our code:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/PomPbrP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The relevant part of the code is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--f-n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--f-m&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgba(0,0,0,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;N&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt; define the dimension of our matrix of rectangles. &lt;code&gt;W&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; are the size of each rectangle. Then we have a basic FOR loop to fill each rectangle with a random transparent color.&lt;/p&gt;

&lt;p&gt;With a little JavaScript, we get a custom mask that we can easily control by adjusting the CSS variables:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExmVZbM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, we need to control the alpha channel in order to create the fading effect of each rectangle and build the fragmentation effect.&lt;/p&gt;

&lt;p&gt;Let's introduce a third variable that we use for the alpha channel that we also change on hover.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWjGdMw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We defined a CSS custom property as a &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; that we transition from 1 to 0, and that same property is used to define the alpha channel of our rectangles. Nothing fancy will happen on hover because all the rectangles will fade the same way.&lt;/p&gt;

&lt;p&gt;We need a trick to prevent fading of all the rectangles at the same time, instead creating a delay between them. Here is an illustration to explain the idea I am going to use:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUxuyqSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E6C4D332440E78DDA3A024FDD6B5D40ED567175E7EC6A5C5A5899C409624BA2D_1625697558693_Screenshotfrom2021-07-0800-39-00.png%3Fw%3D471%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUxuyqSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E6C4D332440E78DDA3A024FDD6B5D40ED567175E7EC6A5C5A5899C409624BA2D_1625697558693_Screenshotfrom2021-07-0800-39-00.png%3Fw%3D471%26ssl%3D1" alt="delay fading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above is showing the alpha animation for two rectangles. First we define a variable &lt;code&gt;L&lt;/code&gt; that should be bigger or equal to 1 then for each rectangle of our matrix (i.e. for each alpha channel) we perform a transition between X and Y where &lt;code&gt;X - Y = L&lt;/code&gt; so we have the same overall duration for all the alpha channel. &lt;code&gt;X&lt;/code&gt; should be bigger or equal to 1 and &lt;code&gt;Y&lt;/code&gt; smaller or equal to 0.&lt;/p&gt;

&lt;p&gt;Wait, the alpha value shouldn’t be in the range &lt;code&gt;[1 0]&lt;/code&gt;, right ?&lt;/p&gt;

&lt;p&gt;Yes, it should! And all the tricks that we’re working on rely on that. Above, the alpha is animating from 8 to -2, meaning we have an opaque color in the &lt;code&gt;[8 1]&lt;/code&gt; range, a transparent one in the &lt;code&gt;[0 -2]&lt;/code&gt; range and an animation within &lt;code&gt;[1 0]&lt;/code&gt;. In other words, any value bigger than 1 will have the same effect as 1, and any value smaller than 0 will have the same effect as 0.&lt;/p&gt;

&lt;p&gt;Animation within &lt;code&gt;[1 0]&lt;/code&gt; will not happen at the same time for both our rectangles. Rectangle 2 will reach &lt;code&gt;[1 0]&lt;/code&gt; before Rectangle 1 will. We apply this to all the alpha channels to get our delayed animations.&lt;/p&gt;

&lt;p&gt;In our code we will update this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rgba(0,0,0,'+(o)+')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rgba(0,0,0,'+((Math.random()*(l-1) + 1) - (1-o)*l)+')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;L&lt;/code&gt; is the variable illustrated previously, and &lt;code&gt;O&lt;/code&gt; is the value of our CSS variable that transitions from 1 to 0&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;O=1&lt;/code&gt;, we have &lt;code&gt;Math.random()*(l-1) + 1&lt;/code&gt;. Considering the fact that the &lt;code&gt;random()&lt;/code&gt; function gives us a value within the &lt;code&gt;[0 1]&lt;/code&gt; range, the final value will be in the &lt;code&gt;[L 1]&lt;/code&gt; range.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;O=0&lt;/code&gt;, we have &lt;code&gt;Math.random()*(l-1) + 1 - l&lt;/code&gt; and a value with the &lt;code&gt;[0 1-L]&lt;/code&gt; range.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;L&lt;/code&gt; is our variable to control the delay.&lt;/p&gt;

&lt;p&gt;Let's see this in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/xxdVBaa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We are getting closer. We have a cool fragmentation effect but not the one we saw in the beginning of the article. This one isn’t as smooth.&lt;/p&gt;

&lt;p&gt;The issue is related the &lt;code&gt;random()&lt;/code&gt; function. We said that each alpha channel need to animate between &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;, so logically those value need to remain the same. But the &lt;code&gt;paint()&lt;/code&gt; function is called a bunch during the transition, so each time, the &lt;code&gt;random()&lt;/code&gt; function give us different &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; values for each alpha channel; hence the "random" effect we are getting.&lt;/p&gt;

&lt;p&gt;To fix this we need to find a way to store the generated value so they are always the same for each call of the &lt;code&gt;paint()&lt;/code&gt; function. Let's consider a pseudo-random function, a function that always generates the same sequence of values. In other words, we want to &lt;a href="https://en.wikipedia.org/wiki/Random_seed"&gt;control the seed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, we cannot do this with the JavaScript's built-in &lt;code&gt;random()&lt;/code&gt; function, so like any good developer, let’s pick one up from &lt;a href="https://stackoverflow.com/a/19301306/8620333"&gt;Stack Overflow&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* update this to change the generated sequence */&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m_w&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123456789&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m_z&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;987654321&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;m_z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36969&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m_z&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m_z&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;m_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m_w&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m_w&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;m_z&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m_w&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;4294967296&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the result becomes:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/yLbOwwz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We have our fragmentation effect without complex code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a basic nested loop to create &lt;code&gt;NxM&lt;/code&gt; rectangles&lt;/li&gt;
&lt;li&gt;a clever formula for the channel alpha to create the transition delay&lt;/li&gt;
&lt;li&gt;a ready &lt;code&gt;random()&lt;/code&gt; function taken from the Net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! All you have to do is to apply the mask property to any element and adjust the CSS variables.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fighting-the-gaps"&gt;
  &lt;/a&gt;
  Fighting the gaps!
&lt;/h2&gt;

&lt;p&gt;If you play with the above demos you will notice, in some particular case, strange gaps between the rectangles&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqF4eGqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E6C4D332440E78DDA3A024FDD6B5D40ED567175E7EC6A5C5A5899C409624BA2D_1626444259040_image.png%3Fw%3D306%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqF4eGqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E6C4D332440E78DDA3A024FDD6B5D40ED567175E7EC6A5C5A5899C409624BA2D_1626444259040_image.png%3Fw%3D306%26ssl%3D1" alt="CSS fragmentation gap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To avoid this, we can extend the area of each rectangle with a small offset.&lt;/p&gt;

&lt;p&gt;We update this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ctx.fillRect(i*w, j*h, w, h);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ctx.fillRect(i*w-.5, j*h-.5, w+.5, h+.5);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It creates a small overlap between the rectangles that compensates for the gaps between them. There is no particular logic with the value 0.5 I used. You can go bigger or smaller based on your use case.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/oNWWxmr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#want-more-shapes"&gt;
  &lt;/a&gt;
  Want more shapes?
&lt;/h2&gt;

&lt;p&gt;Can the above be extended to consider more than rectangular shape? Sure it can! Let's not forget that we can use Canvas to draw any kind of shape — unlike pure CSS shapes where we sometimes need some hacky code. Let's try to build that triangular fragmentation effect.&lt;/p&gt;

&lt;p&gt;After searching the web, I found something called &lt;a href="https://en.wikipedia.org/wiki/Delaunay_triangulation"&gt;Delaunay triangulation&lt;/a&gt;. I won't go into the deep theory behind it, but it's an algorithm for a set of points to draw connected triangles with specific properties. There are lots of ready-to-use implementations of it, but we’ll go with &lt;a href="https://github.com/mapbox/delaunator"&gt;Delaunator&lt;/a&gt; because it's supposed to be the fastest of the bunch.&lt;/p&gt;

&lt;p&gt;We first define a set of points (we will use &lt;code&gt;random()&lt;/code&gt; here) then run Delauntor to generate the triangles for us. In this case, we only need one variable that defines the number of points.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--f-n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--f-o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt; &lt;span class="cm"&gt;/* we always include the corners */&lt;/span&gt;
&lt;span class="cm"&gt;/* we generate N random points within the area of the element */&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/**/&lt;/span&gt;
&lt;span class="cm"&gt;/* We call Delaunator to generate the triangles*/&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Delaunator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;triangles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**/&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* we loop the triangles points */&lt;/span&gt;
  &lt;span class="cm"&gt;/* we draw the path of the triangles */&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;dots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closePath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="cm"&gt;/**/&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* the alpha value */&lt;/span&gt;
  &lt;span class="cm"&gt;/* we fill the area of triangle with the semi-transparent color */&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgba(0,0,0,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="cm"&gt;/* we consider stroke to fight the gaps */&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgba(0,0,0,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have nothing more to add to the comments in the above code. I simply used some basic JavaScript and Canvas stuff and yet we have a pretty cool effect.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/jOBRMNx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can make even more shapes! All we have to do is to find an algorithm for it.&lt;/p&gt;

&lt;p&gt;I cannot move on without doing the hexagon one!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/jOmxEYW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I took the code from &lt;a href="https://eperezcosano.github.io/hex-grid/"&gt;this article&lt;/a&gt; written by Izan Pérez Cosano. Our variable is now R that will define the dimension of one hexagon.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What’s next?
&lt;/h2&gt;

&lt;p&gt;Now that we have built our fragmentation effect, let's focus on the CSS. Notice that the effect is as simple as changing the opacity value (or the value of whichever property you are working with) of an element on it hover state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Opacity animation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Fragmentation effect&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragmentation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--f-o&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;--f-o&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--f-o&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means we can easily integrate this kind of effect to create more complex animations. Here are a bunch of ideas!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#responsive-image-slider"&gt;
  &lt;/a&gt;
  Responsive image slider
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYmxQBL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Another version of the same slider:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/oNWZQex?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#noise-effect"&gt;
  &lt;/a&gt;
  Noise effect
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWRMyQb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading-screen"&gt;
  &lt;/a&gt;
  Loading screen
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWmmejq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#card-hover-effect"&gt;
  &lt;/a&gt;
  Card hover effect
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWmoJGq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-a-wrap"&gt;
  &lt;/a&gt;
  That's a wrap
&lt;/h2&gt;

&lt;p&gt;And all of this is just the tip of the iceberg of what can be achieved using the Paint API. I’ll end with two important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Paint API is 90% &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, so the more you know about &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, the more fancy things you can do. Canvas is widely used, which means there's a bunch of documentation and writing about it to get you up to speed.&lt;/li&gt;
&lt;li&gt;The Paint API removes all the complexity from the CSS side of things. There's no dealing with complex and hacky code to draw cool stuff. This makes CSS code so much easier to maintain, not to mention less prone to error.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Build a JAMStack Blog with NextJS and Ghost</title>
      <author>Jake Wiesler</author>
      <pubDate>Thu, 26 Aug 2021 14:09:41 +0000</pubDate>
      <link>https://dev.to/jakewies/build-a-jamstack-blog-with-nextjs-and-ghost-2pnh</link>
      <guid>https://dev.to/jakewies/build-a-jamstack-blog-with-nextjs-and-ghost-2pnh</guid>
      <description>&lt;p&gt;I have a certain affinity for &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt;, an open-source publishing platform created in 2013 and built on &lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt;. It was the first platform I used to build my website back in 2015, but over time curiosity struck and I moved away from it.&lt;/p&gt;

&lt;p&gt;Now, in 2021, I'm revisiting my old friend again. Why? It's latest release, &lt;a href="https://ghost.org/changelog/4/"&gt;version 4&lt;/a&gt;, brings some awesome &lt;a href="https://ghost.org/features/"&gt;new features&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A revamped Dashboard&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghost.org/docs/newsletters/"&gt;Native support for Newsletters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghost.org/docs/members/#2-subscriptions"&gt;Paid subscriptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghost.org/integrations/"&gt;Tons of integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A cheaper Ghost(Pro) starter plan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a huge update, and I'm a sucker for brand redesigns. However, since 2015 I've acquired the skills to build a site without needing to rely on tools like Ghost, so why go back?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-beauty-of-ghost"&gt;
  &lt;/a&gt;
  The beauty of Ghost
&lt;/h2&gt;

&lt;p&gt;Personal publishing and gated content as a business continues to increase in popularity, and Ghost is well positioned in this space. &lt;a href="https://ghost.org/docs/members/"&gt;The new Members feature&lt;/a&gt; gives creators a way to monetize their work with very little effort on the administrative side.&lt;/p&gt;

&lt;p&gt;Managing content is a real pleasure. You can write posts, schedule them for publishing and send them straight to the inbox of your members. You can mark some posts as free and others as paid, providing a way for your audience to fund your work.&lt;/p&gt;

&lt;p&gt;And all of this is controlled from a clean Dashboard. It's a really great way to manage your content. Much better than writing in markdown files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-issues-with-ghost"&gt;
  &lt;/a&gt;
  My issues with Ghost
&lt;/h2&gt;

&lt;p&gt;Customization. I want full control of how my site looks and feels. In reality, Ghost does not stop you from having this level of power. The platform has &lt;a href="https://ghost.org/themes/"&gt;a rich theme ecosystem&lt;/a&gt;, with paid and free themes available to all. However, if you want to build a theme of your own &lt;a href="https://ghost.org/docs/themes/"&gt;you have to do it in handlebars&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll pass.&lt;/p&gt;

&lt;p&gt;Another is performance. Ghost is pretty fast and comes with a lot of niceties out of the box (SEO for one), but it's not fast enough for me. I want blazing fast, and I have the skills to do that on my own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-the-jamstack"&gt;
  &lt;/a&gt;
  Enter the JAMStack
&lt;/h2&gt;

&lt;p&gt;The good news is that &lt;a href="https://ghost.org/docs/jamstack/"&gt;Ghost is front-end agnostic&lt;/a&gt;, meaning you can "bring your own" front-end. Manage content in Ghost, and query for it using their APIs. A Headless CMS.&lt;/p&gt;

&lt;p&gt;Headless because the CMS has no dedicated front-end. You can plop whichever one you want on top, and the CMS will abide. It's a beautiful thing really, and gets us to the foundation of JAMStack.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;J&lt;/strong&gt;avaScript - build your front-end with a modern JavaScript framework.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A&lt;/strong&gt;PIs - Query for your content with Ghost's APIs&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;M&lt;/strong&gt;arkup - Write your content as markup in Ghost&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post we'll use &lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt; as our front-end framework of choice. With NextJS, we can build a blazing fast front-end and query Ghost for our content.&lt;/p&gt;

&lt;p&gt;It's the best of both worlds. Keep the Dashboard and Editor on Ghost's side, and the performance and developer experience on NextJS's side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-ghost"&gt;
  &lt;/a&gt;
  Installing Ghost
&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is &lt;a href="https://ghost.org/docs/ghost-cli/"&gt;install Ghost on our development machine&lt;/a&gt;. Open a terminal and install the latest version of &lt;a href="https://github.com/TryGhost/Ghost-CLI"&gt;&lt;code&gt;ghost-cli&lt;/code&gt;&lt;/a&gt; globally using your package manager of choice. I am a &lt;code&gt;yarn&lt;/code&gt; man.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add ghost-cli@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to note that your version of &lt;code&gt;node&lt;/code&gt; matters. I've run into issues in the past when being on some of the latest versions. At time of writing this, &lt;a href="https://ghost.org/docs/faq/node-versions/"&gt;Ghost recommends v14 of &lt;code&gt;node&lt;/code&gt;&lt;/a&gt;, their long term support version.&lt;/p&gt;

&lt;p&gt;Next we'll run a few terminal commands to create a directory and install a ghost instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;ghost-development

&lt;span class="nb"&gt;cd &lt;/span&gt;ghost-development

ghost &lt;span class="nb"&gt;install local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first two commands are self-explanatory. The name of your directory does not matter. The third command, &lt;code&gt;ghost install local&lt;/code&gt;, runs a number of scripts and sets you up with a local installation of Ghost hosted at a local url. Usually this url is &lt;code&gt;http://localhost:2368&lt;/code&gt;. If you navigate to it in your browser of choice, what you'll see is &lt;a href="https://github.com/TryGhost/Casper"&gt;Casper&lt;/a&gt;, the default Ghost theme.&lt;/p&gt;

&lt;p&gt;If you go to &lt;code&gt;http://localhost:2368/ghost&lt;/code&gt;, you'll hit the admin side of Ghost. This will require you to create an account. It's not going to be a live account, just a local one that will let you interface with the admin side for development 🐳.&lt;/p&gt;

&lt;p&gt;Put in whatever data you want, skip the staff users section and boom. You're logged in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-nextjs"&gt;
  &lt;/a&gt;
  Installing NextJS
&lt;/h2&gt;

&lt;p&gt;Now that we have Ghost up and running locally, we'll setup our front-end. In a separate directory, &lt;a href="https://nextjs.org/docs/getting-started#setup"&gt;bootstrap a NextJS app&lt;/a&gt;. Again, with &lt;code&gt;yarn&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create next-app my-next-front-end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will set you up with a NextJS project in the &lt;code&gt;my-next-front-end&lt;/code&gt; directory. That's it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-for-blog-posts"&gt;
  &lt;/a&gt;
  Querying for blog posts
&lt;/h2&gt;

&lt;p&gt;When you start up a Ghost site for the first time, the theme will deploy with some "Getting Started" posts. This is adequate for our purpose. No need to create more. I mean, you can if you want. Do you.&lt;/p&gt;

&lt;p&gt;Eventually we'll need to fetch those blog posts. Ghost has two APIs, the &lt;a href="https://ghost.org/docs/content-api/"&gt;Content API&lt;/a&gt; and the &lt;a href="https://ghost.org/docs/admin-api/"&gt;Admin API&lt;/a&gt;. For a list of blog posts we'll need to interface with the Content API.&lt;/p&gt;

&lt;p&gt;Ghost also provides a few API clients to make things easy. Let's install the client for the Content API. In your NextJS app directory run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @tryghost/content-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're interested, here is &lt;a href="https://ghost.org/docs/content-api/javascript/"&gt;the documentation for the &lt;code&gt;@tryghost/content-api&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have our dependency installed, we'll write some logic to fetch a list of blog posts. I like to put this sort of logic in a &lt;code&gt;lib&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;lib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course you can also create the folder in your text editor, but we're terminal first here.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;lib&lt;/code&gt; directory we'll create a &lt;code&gt;ghost.js&lt;/code&gt; file to keep it simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;lib
&lt;span class="nb"&gt;touch &lt;/span&gt;ghost.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright now we're cooking. Let's open up &lt;code&gt;ghost.js&lt;/code&gt; and import &lt;code&gt;@tryghost/content-api&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tryghost/content-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to start using the client we'll need to initiate it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tryghost/content-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've left the 3 configuration properties empty for a reason. They each need explanation:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-url-endraw-and-raw-key-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Both the &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; values will be different in a development and production environment. We are only concerned with the development environment for now. Navigate to the local instance of your Ghost admin (&lt;code&gt;http://localhost:2368/ghost&lt;/code&gt;) in the browser. On the left hand side you should see an "Integrations" section. Click it. We will need to create a new custom integration to get these values.&lt;/p&gt;

&lt;p&gt;Click the "Add Custom Integration" button. Name the integration whatever you want. I'm calling it "NextJS Front-end". Click "Create", and you should then see a few values. The ones you want are the "Content API Key" and the "API URL". These will be your development &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; values. Remember, in production they will be different.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-version-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;version&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;At time of writing, this is the 3rd version of the Ghost API, though they also support a &lt;code&gt;canary&lt;/code&gt; value. Let's be safe and use &lt;code&gt;'v3'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our final configuration should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tryghost/content-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR_API_URL&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR_CONTENT_API_KEY&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of hardcoding the &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; values, lets make it environment-agnostic. Create a &lt;code&gt;.env.local&lt;/code&gt; file at the root of your NextJS application, and inside add the two values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GHOST_API_URL=&amp;lt;YOUR_API_URL&amp;gt;
GHOST_CONTENT_API_KEY=&amp;lt;YOUR_CONTENT_API_KEY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in our &lt;code&gt;ghost.js&lt;/code&gt; file we can update our config to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tryghost/content-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_CONTENT_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works out really well, because in development we can use our local instance of Ghost, but in production we can use the production instance. Just so long as you make sure to supply the correct values to these environment variables when deploying to production. But more on that later.&lt;/p&gt;

&lt;p&gt;Now that we are configured, lets right a function that fetches a list of all blog posts from Ghost:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy peezy lemon squeezy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#render-a-list-of-blog-posts"&gt;
  &lt;/a&gt;
  Render a list of blog posts
&lt;/h2&gt;

&lt;p&gt;Now that we have our function to fetch a list of posts, lets use it to render them on our homepage. In your &lt;code&gt;pages/index.js&lt;/code&gt; file, remove the bootstrapped code and replace with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"&gt;&lt;code&gt;getStaticProps&lt;/code&gt; function&lt;/a&gt; is a special function in NextJS that lets us fetch data at build time. What this means is we can fetch our list of posts once, when we build our project, and generate a static html document that renders them.&lt;/p&gt;

&lt;p&gt;Using our &lt;code&gt;getAllPosts&lt;/code&gt; function from &lt;code&gt;lib/ghost.js&lt;/code&gt;, our posts will be fetched and supplied to the &lt;code&gt;Home&lt;/code&gt; page component as the &lt;code&gt;posts&lt;/code&gt; prop. Inside of our render tree we display the &lt;code&gt;title&lt;/code&gt; of each post as a &lt;a href="https://nextjs.org/docs/api-reference/next/link"&gt;NextJS &lt;code&gt;Link&lt;/code&gt;&lt;/a&gt;. For a list of all available values on a post coming from Ghost (hey that rhymes), see &lt;a href="https://ghost.org/docs/content-api/#posts"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-pages-for-each-post"&gt;
  &lt;/a&gt;
  Creating pages for each post
&lt;/h2&gt;

&lt;p&gt;We might have hundreds of blog posts to render on our site, and we can't possibly be burdened to predefine all of their routes. But, we know that every post has an associated &lt;code&gt;slug&lt;/code&gt; value. We can use this to our advantage.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;pages&lt;/code&gt; directory, lets create a new file called &lt;code&gt;[slug].js&lt;/code&gt;. These are known as &lt;a href="https://nextjs.org/docs/routing/dynamic-routes"&gt;dynamic routes in NextJS&lt;/a&gt;, and they are an awesome feature. Think of this page as a "catch all". The &lt;code&gt;slug&lt;/code&gt; will be used as the parameter that lets us dynamically render content based on its value.&lt;/p&gt;

&lt;p&gt;To do this, we'll need to utilize another special function in NextJS called &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation"&gt;&lt;code&gt;getStaticPaths&lt;/code&gt;&lt;/a&gt;. Here's how it works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;getStaticPaths&lt;/code&gt; is the mechanism by which we statically generate dynamic routes. We fetch all the blog posts from Ghost at build time, map through each and pull out their &lt;code&gt;slug&lt;/code&gt; value. The &lt;code&gt;slug&lt;/code&gt; will be given to each page as a unique parameter, and we can use it to fetch the content for the corresponding blog post.&lt;/p&gt;

&lt;p&gt;If this is confusing, consider the following example. If you had only one blog post in your Ghost instance, and that post had the slug &lt;code&gt;/my-happy-slug&lt;/code&gt;, then a page will be created at the route &lt;code&gt;yoursite.com/my-happy-slug&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-post-content"&gt;
  &lt;/a&gt;
  Rendering post content
&lt;/h2&gt;

&lt;p&gt;Now that we can generate a page for every post, we'll need to render some content. In order to accomplish this, we'll need to create a new function in our &lt;code&gt;lib/ghost.js&lt;/code&gt; file called &lt;code&gt;getPostBySlug&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;formats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function accepts the slug of a post and returns the post's data, making sure to include the post's content in &lt;code&gt;html&lt;/code&gt; format. If you're curious to see what a post object returned from Ghost looks like, you can refer to &lt;a href="https://ghost.org/docs/content-api/#posts"&gt;the documentation again&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's use this function in our &lt;code&gt;[slug].js&lt;/code&gt; page to fetch post content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When each page is built, the &lt;code&gt;getStaticProps&lt;/code&gt; function is called. As an argument, &lt;code&gt;getStaticProps&lt;/code&gt; receives the page's &lt;code&gt;params&lt;/code&gt; object. Inside of this object we can gain access to the page's &lt;code&gt;slug&lt;/code&gt; value. Now, getting the page's data is trivial. We call &lt;code&gt;getPostBySlug&lt;/code&gt;, pass the &lt;code&gt;slug&lt;/code&gt; value, and the returned data representing our post can be passed to our page's component as the &lt;code&gt;data&lt;/code&gt; prop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rendering-post-tags"&gt;
  &lt;/a&gt;
  Rendering post tags
&lt;/h2&gt;

&lt;p&gt;One feature that comes baked-in with most Ghost themes is this concept of tags. It is a way to categorize your content. &lt;code&gt;#Programming&lt;/code&gt;, &lt;code&gt;#Health&lt;/code&gt;, &lt;code&gt;#Bitcoin&lt;/code&gt;, etc. These are examples of tags that you can attach to each post you write. This may not be a feature you care to support, but some people might, so I'll include a section on how to achieve it.&lt;/p&gt;

&lt;p&gt;Attaching a tag to your post inside of the Ghost editor should be self-explanatory. When you query for a blog post, you can add an option to include that post's tags in the returned data. Let's update &lt;code&gt;getPostBySlug&lt;/code&gt; to do just that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPostBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;formats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tags&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, every post will have access to its &lt;code&gt;tags&lt;/code&gt;. Render them however you'd like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a list of all available properties on the &lt;code&gt;tag&lt;/code&gt; object, &lt;a href="https://ghost.org/docs/content-api/#tags"&gt;see here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want your readers to be able to click these tags to see a list of all posts tagged with this specific tag, you'll need to do a bit more work. First, lets change the &lt;code&gt;span&lt;/code&gt; element above to a &lt;a href="https://nextjs.org/docs/api-reference/next/link"&gt;NextJS &lt;code&gt;Link&lt;/code&gt; component&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/tag/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll need to dynamically generate a page that will render at the route &lt;code&gt;/tag/[slug]&lt;/code&gt;. This is a similar process to how we generated dynamic pages for our blog posts.&lt;/p&gt;

&lt;p&gt;First let's create a function called &lt;code&gt;getAllTags&lt;/code&gt; inside of &lt;code&gt;lib/ghost.js&lt;/code&gt; that will fetch all available tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, In your &lt;code&gt;pages&lt;/code&gt; directory, create a subdirectory called &lt;code&gt;tag&lt;/code&gt;, and inside of it create a file called &lt;code&gt;[slug].js&lt;/code&gt;. This page is going to be responsible for rendering a list of posts that are tagged with a specific tag name.&lt;/p&gt;

&lt;p&gt;For example, if you had 4 posts tagged &lt;code&gt;#React&lt;/code&gt; in Ghost, then a route called &lt;code&gt;yoursite.com/tag/react&lt;/code&gt; will be created, and the page will render a list of those 4 posts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllTags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will handle dynamic generation of each tag's page, but we still need to render some content. Let's create a new function inside of &lt;code&gt;lib/ghost.js&lt;/code&gt; file called &lt;code&gt;getAllPostsByTagSlug&lt;/code&gt; that will help us with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllPostsByTagSlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`tag:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will return all the posts that are tagged with a tag represented by its corresponding &lt;code&gt;slug&lt;/code&gt;. Let's use this in our &lt;code&gt;pages/tag/[slug].js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAllPostsByTagSlug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPostsByTagSlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's step through what's happening here. For every tag we have in our Ghost content, we are going to generate a corresponding page. Each page will fetch a list of all posts that are tagged with that specific tag. So the tag &lt;code&gt;#Programming&lt;/code&gt; will have its own page at &lt;code&gt;yoursite.com/tag/programming&lt;/code&gt;, and you will be able to see a list of all your posts that are tagged with &lt;code&gt;#Programming&lt;/code&gt;. Pretty sweet!&lt;/p&gt;

&lt;p&gt;The one thing we haven't addressed is that, even though you can see all the posts for a particular tag, you don't actually no what tag the page is representing unless you look at the url. Let's add one more function called &lt;code&gt;getTagBySlug&lt;/code&gt; to our &lt;code&gt;lib/ghost.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTagBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count.posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can call this function inside of &lt;code&gt;getStaticProps&lt;/code&gt; to fetch some meta information about the tag itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getAllPostsByTagSlug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getTagBySlug&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPostsByTagSlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getTagBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets create the component that will render all of this information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tagData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tagData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cm"&gt;/* render posts here */&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the full file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getAllPostsByTagSlug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getTagBySlug&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../lib/ghost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllTags&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPostsByTagSlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getTagBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tagData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tagData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cm"&gt;/* render posts here */&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! If you followed closely you should have a simple NextJS-powered blog using Ghost as a headless CMS. I kept it lean and basic, so that you can build upon this over time. If you are interested in the full example, there is &lt;a href="https://github.com/jakewies/next-ghost-demo"&gt;a GitHub repository here&lt;/a&gt;. Feel free to clone, fork and go wild.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-production"&gt;
  &lt;/a&gt;
  Deploying to production
&lt;/h2&gt;

&lt;p&gt;The last step in this journey is getting your site in production. This involves two separate applications: your CMS (Ghost), and your front-end (NextJS).&lt;/p&gt;

&lt;p&gt;Deploying NextJS to production is actually a breeze if you use &lt;a href="https://vercel.com/home"&gt;Vercel&lt;/a&gt;, the company behind the framework. They have a generous free tier, and all you have to do is hook up your GitHub repository and click a few buttons. It's painless really. They have great documentation, and setting up your environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process.env.GHOST_API_URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.env.GHOST_CONTENT_API_URL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;is a breeze.&lt;/p&gt;

&lt;p&gt;Deploying Ghost to production is a little trickier. You have two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let Ghost take care of everything using Ghost(Pro)&lt;/li&gt;
&lt;li&gt;Self-host your Ghost instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ghost(Pro) has a starter package that starts at $9 a month, and although this isn't bad for what you get, they do not support custom themes. Unfortunately JAMStack falls into this category, as you need to create a custom integration to gain access to your &lt;code&gt;CONTENT_API_KEY&lt;/code&gt;. In order to get this you'd have to go with their creator option at $25 a month.&lt;/p&gt;

&lt;p&gt;Your other option is to self-host. &lt;a href="https://ghost.org/docs/hosting/"&gt;Ghost has some great documentation on how to do this&lt;/a&gt; using a variety of avenues. Your mileage may vary.&lt;/p&gt;

&lt;p&gt;Regardless of which choice you go with, you're going to want to make sure that you supply your NextJS app with the production &lt;code&gt;GHOST_API_URL&lt;/code&gt; and &lt;code&gt;GHOST_CONTENT_API_KEY&lt;/code&gt; values. These can be found in your production instance of Ghost once you deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found this article helpful. I've been experimenting with Ghost a lot in the last few weeks and I hope to continue to build out my site to support some of its awesome features. Next I'll be writing up a tactic for integrating your JAMStack with &lt;a href="https://ghost.org/docs/members/"&gt;Ghost's Members feature&lt;/a&gt;, so stay tuned for that! And as always, if you have questions feel free to reach out on &lt;a href="https://twitter.com/jakewies"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding ⚡️&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>ghost</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>How to Deploy Jaeger on AWS: a Comprehensive Step-by-Step Guide
</title>
      <author>Tom Zach</author>
      <pubDate>Thu, 26 Aug 2021 14:08:29 +0000</pubDate>
      <link>https://dev.to/aspecto/how-to-deploy-jaeger-on-aws-a-comprehensive-step-by-step-guide-23pe</link>
      <guid>https://dev.to/aspecto/how-to-deploy-jaeger-on-aws-a-comprehensive-step-by-step-guide-23pe</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is part of the &lt;strong&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-deploy-jaeger-on-aws"&gt;Aspecto&lt;/a&gt; Hello World series&lt;/strong&gt;, where we tackle microservices-related topics for you. Our team searches the web for common issues, then we solve them ourselves and bring you complete how-to guides. Aspecto is an OpenTelemetry-based distributed tracing platform for developers and teams of distributed applications.&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this tutorial, I will be showing you how to host jaeger on AWS ECS. We will do so step by step: set up an AWS Elasticsearch service domain and use it as a storage backend. For this purpose, we will use the jaeger all-in-one image inside our own ECS cluster &amp;amp; service.&lt;/p&gt;

&lt;p&gt;(Note: for a production use case you’d probably want to use the jaeger images separately and not the all-in-one. We’re doing this to simplify the blog post).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jaeger"&gt;
  &lt;/a&gt;
  What is Jaeger
&lt;/h2&gt;

&lt;p&gt;If you’re here you probably already know this, but just in case: jaeger is an open-source distributed tracing system, originally developed by Uber.&lt;/p&gt;

&lt;p&gt;Essentially it stores traces &amp;amp; spans (in a storage backend) and hosts a UI that gives us visibility on these traces and spans (if you’re not familiar with the OpenTelemetry jargon, you can get more info here: &lt;a href="https://opentelemetry.io/"&gt;https://opentelemetry.io/&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-small-note-about-security"&gt;
  &lt;/a&gt;
  A small note about security
&lt;/h3&gt;

&lt;p&gt;Before we dive in – it is important to know that the blog post assumes you are running your ES &amp;amp; jaeger in private subnets inside a secured VPC. For additional security measures, go to &lt;a href="https://www.jaegertracing.io/docs/1.25/security/"&gt;https://www.jaegertracing.io/docs/1.25/security/&lt;/a&gt; and check out the official recommendations from Jaeger.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-aws-elasticsearch-instance"&gt;
  &lt;/a&gt;
  Setting up AWS Elasticsearch instance
&lt;/h1&gt;

&lt;p&gt;Since the jaeger collector is persistent – it requires a storage backend. You could use memory as a storage backend but it is not suitable for production use cases.&lt;/p&gt;

&lt;p&gt;So we will begin by creating a new elasticsearch domain to serve as a storage backend for our Jaeger. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to AWS ES console.&lt;/li&gt;
&lt;li&gt;Click on “Create a new domain”&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select custom &amp;amp; latest version of ES and hit Next.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7F1e8al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zu9m7nqtsj8l8flo8j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7F1e8al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zu9m7nqtsj8l8flo8j1.png" alt="Choosing the deployment type and version of ES&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let’s set the following settings (but you can of course change them as needed):&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Name: as you wish&lt;/li&gt;
&lt;li&gt;No auto-tuning (you may want this in production)&lt;/li&gt;
&lt;li&gt;1 AZ, 1 Node (note that in production you would probably want at least 2 AZ &amp;amp; nodes for redundancy)&lt;/li&gt;
&lt;li&gt;Instance type: T2.small&lt;/li&gt;
&lt;li&gt;No master node (you may want this in production)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G21chqM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrp912plfvo95iy5ou09.png" alt="ECS configure domain"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PG-ovqj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1c51emk29fvry4jrqri.png" alt="ECS data nodes"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cG-LUhDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98lv7xu8zitmengprema.png" alt="ECS data node storage"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After everything is set and done – hit Next.&lt;/p&gt;

&lt;p&gt;5.Configuring access &amp;amp; security:&lt;/p&gt;

&lt;p&gt;Since most likely you’re going to send sensitive data to your Jaeger, you want to make sure it is stored securely. Therefore, it is recommended to only allow access within your VPC. AWS recommends a dedicated subnet for each elasticsearch domain. For this tutorial’s purposes, I am choosing an existing private subnet.&lt;/p&gt;

&lt;p&gt;As for security groups, I created a security group that allows open access inside the VPC. For this blog post – I’m ok with it since the elasticsearch is only accessible from private subnets. In production, you may want to be stricter and enable fine-grained access control / different &amp;amp; IP, port settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTHP3DpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly3zaekdvf9fxh5ichp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTHP3DpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly3zaekdvf9fxh5ichp2.png" alt="inbound rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For domain access policy – to simplify the installation and since we’re inside the VPC – I chose to allow open access to the domain. But here also, for production, you may want to be stricter and allow access from a specific IP address or IAM ARN (like the jaeger IP address for example).&lt;/p&gt;

&lt;p&gt;As for encryption – I’m leaving the defaults, but feel free to modify it to fit your needs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxTKX613--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b40yjhbai3o0wj4bp0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxTKX613--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b40yjhbai3o0wj4bp0m.png" alt="ECS access policy and encryption "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.At this point, we’re done. Let’s hit next as needed and let AWS create our ES domain.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#deploying-jaeger"&gt;
  &lt;/a&gt;
  Deploying Jaeger
&lt;/h1&gt;

&lt;p&gt;In order to deploy Jaeger, we will be using AWS ECS. Jaeger provides us with an all-in-one docker image that contains everything that Jaeger needs to work.&lt;/p&gt;

&lt;p&gt;Let’s create an ECS service running that image.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-our-new-ecs-cluster"&gt;
  &lt;/a&gt;
  Creating our new ECS cluster
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to ECS Cluster -&amp;gt; Create cluster&lt;/li&gt;
&lt;li&gt;Select EC2 Linux + Networking
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6wTAMfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a3vvd351g2v4z73vo5w.png" alt="Select cluster template"&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the cluster:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RK2S8QrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zepb7gm2u6srdfbidli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RK2S8QrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zepb7gm2u6srdfbidli.png" alt="Configure cluster"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As for subnets – since I have an AWS VPN client enabled, I put the Jaeger on two private subnets, so that no one from outside the VPC can access its data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the security group – let’s create a new one and add inbound rules for the following ports from within the VPC. Replace 10.100.0.0/16 with your own VPC address range. You can learn more about the Jaeger ports here: &lt;a href="https://www.jaegertracing.io/docs/1.25/getting-started/"&gt;https://www.jaegertracing.io/docs/1.25/getting-started/.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWGhwwRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6448vxnlxovrm628vit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWGhwwRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6448vxnlxovrm628vit.png" alt="Jaeger ports"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change anything else if you need it and hit create.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#creating-a-task-definition"&gt;
  &lt;/a&gt;
  Creating a Task Definition
&lt;/h1&gt;

&lt;p&gt;For us to create an ECS Service we need to define a Task Definition. Head over to Task Definition and hit Create.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Since we chose EC2, we will choose EC2 as for type compatibility:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyZtfxBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3d4aubpk0guemscng4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyZtfxBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3d4aubpk0guemscng4v.png" alt="Select EC2 type compatibility"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select “Configure from JSON”. Paste the following JSON in the relevant field:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "requiresCompatibilities": [
   "EC2"
 ],
 "inferenceAccelerators": [],
 "containerDefinitions": [    {
   "dnsSearchDomains": [],
   "environmentFiles": null,
   "logConfiguration": null,
   "entryPoint": [],
   "portMappings": [
     {
       "hostPort": 14269,
       "protocol": "tcp",
       "containerPort": 14269
     },
     {
       "hostPort": 14268,
       "protocol": "tcp",
       "containerPort": 14268
     },
     {
       "hostPort": 6832,
       "protocol": "udp",
       "containerPort": 6832
     },
     {
       "hostPort": 6831,
       "protocol": "udp",
       "containerPort": 6831
     },
     {
       "hostPort": 5775,
       "protocol": "udp",
       "containerPort": 5775
     },
     {
       "hostPort": 14250,
       "protocol": "tcp",
       "containerPort": 14250
     },
     {
       "hostPort": 16685,
       "protocol": "tcp",
       "containerPort": 16685
     },
     {
       "hostPort": 5778,
       "protocol": "tcp",
       "containerPort": 5778
     },
     {
       "hostPort": 16686,
       "protocol": "tcp",
       "containerPort": 16686
     },
     {
       "hostPort": 9411,
       "protocol": "tcp",
       "containerPort": 9411
     }
   ],
   "command": [
     "--collector.zipkin.host-port",
     "9411"
   ],
   "linuxParameters": null,
   "cpu": 1024,
   "environment": [
     {
       "name": "ES_SERVER_URLS",
       "value": "https://some-es-name.some-es-region.es.amazonaws.com"
     },
     {
       "name": "SPAN_STORAGE_TYPE",
       "value": "elasticsearch"
     }
   ],
   "resourceRequirements": null,
   "ulimits": null,
   "dnsServers": [],
   "mountPoints": [],
   "workingDirectory": null,
   "secrets": null,
   "dockerSecurityOptions": [],
   "memory": 1024,
   "memoryReservation": null,
   "volumesFrom": [],
   "stopTimeout": null,
   "image": "jaegertracing/all-in-one:1.25.0",
   "startTimeout": null,
   "firelensConfiguration": null,
   "dependsOn": null,
   "disableNetworking": null,
   "interactive": null,
   "healthCheck": null,
   "essential": true,
   "links": [],
   "hostname": null,
   "extraHosts": null,
   "pseudoTerminal": null,
   "user": null,
   "readonlyRootFilesystem": null,
   "dockerLabels": null,
   "systemControls": [],
   "privileged": null,
   "name": "tom-jaeger-new"
 }],
 "volumes": [],

 "networkMode": null,
 "memory": "2048",
 "cpu": "2048",
 "placementConstraints": [],
 "family": "tom-jaeger-new",
 "taskRoleArn": "arn:aws:iam::YOUR_AWS_ACCOUNT_ID:role/ecsTaskExecutionRole",
 "executionRoleArn": "arn:aws:iam::YOUR_AWS_ACCOUNT_ID:role/ecsTaskExecutionRole",
 "tags": []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure to make the relevant modifications like your own account id, and copy the correct elasticsearch URL from the AWS ES console, and put it as an environment variable called &lt;code&gt;ES_SERVER_URLS&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-the-ecs-service"&gt;
  &lt;/a&gt;
  Creating the ECS Service
&lt;/h1&gt;

&lt;p&gt;Now we’re ready to create the ECS service that runs Jaeger.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go back to your Jaeger cluster -&amp;gt; services -&amp;gt; create.&lt;/li&gt;
&lt;li&gt;This is the configuration you want (be sure to select the newly created task definition):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GSBFUbsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/joexyvy6mefhylsvt7wy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GSBFUbsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/joexyvy6mefhylsvt7wy.png" alt="ECS configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Unlike what the screenshot suggests, instead of minimum 100, maximum 200 -we use 0-100 so that we only have 1 instance running and no port issues. Again, we do this to simplify the tutorial.&lt;/p&gt;

&lt;p&gt;4.From here on you can hit next until creating the service. For this tutorial I chose not to create a load balancer. If you feel you need one feel free to create it.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#accessing-jaeger-ui"&gt;
  &lt;/a&gt;
  Accessing Jaeger UI
&lt;/h1&gt;

&lt;p&gt;Now Jaeger should be up and running. Let’s go to the ECS cluster -&amp;gt; ECS instances -&amp;gt; click on the instance id inside the ECS instances column. That should lead you to the corresponding EC2 instance.&lt;/p&gt;

&lt;p&gt;Clicking on its ID should give you info about the instance. What you are looking for is the instance IP.&lt;/p&gt;

&lt;p&gt;I’m assuming that you are inside the VPC. If you’re not, you may have to find a different way of obtaining network access to your Jaeger like placing it in a public subnet &amp;amp; allowing access to your IP (it is not recommended from a security standpoint).&lt;/p&gt;

&lt;p&gt;Copy the private IP address of the instance, and head over to it in the browser with port 16686. For example: &lt;code&gt;10.100.30.224:16686&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You now have access to the Jaeger UI:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qa-s2g12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j782p7crqmx5jw7ctypw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qa-s2g12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j782p7crqmx5jw7ctypw.png" alt="Jaeger UI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#sending-traces-to-jaeger"&gt;
  &lt;/a&gt;
  Sending traces to Jaeger
&lt;/h1&gt;

&lt;p&gt;At this point you have the jaeger UI running. Now we need to start sending traces to it.&lt;/p&gt;

&lt;p&gt;If you take a look at Kibana, you can already see that Jaeger created its own &lt;code&gt;jaeger-span-DATE-FORMAT&lt;/code&gt;. Currently, it only contains internal Jaeger spans, but let’s send our own.&lt;/p&gt;

&lt;p&gt;Note: for the simplicity of this tutorial we did not implement any index rollover, but you may want to do so to optimize resources allocated to indices. You can read more about this here: &lt;a href="https://www.jaegertracing.io/docs/1.25/deployment/#elasticsearch-rollover"&gt;https://www.jaegertracing.io/docs/1.25/deployment/#elasticsearch-rollover&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sending-traces-to-jaeger-with-the-opentelemetry-sdk-in-nodejs"&gt;
  &lt;/a&gt;
  Sending traces to Jaeger with the OpenTelemetry SDK (In NodeJS)
&lt;/h2&gt;

&lt;p&gt;Step 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: Perform npm install&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: Install OpenTelemetry libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save @opentelemetry/instrumentation-http 
@opentelemetry/instrumentation-express @opentelemetry/api 
@opentelemetry/node @opentelemetry/exporter-jaeger 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 4: Create a tracing.js file (replace the relevant IP to your EC2 IP)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict';

const opentelemetry = require('@opentelemetry/api');

// Not functionally required but gives some insight what happens behind the scenes
const { diag, DiagConsoleLogger, DiagLogLevel } = opentelemetry;
diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);

const { registerInstrumentations } = require('@opentelemetry/instrumentation');
const { NodeTracerProvider } = require('@opentelemetry/node');
const { SimpleSpanProcessor } = require('@opentelemetry/tracing');
const { Resource } = require('@opentelemetry/resources');
const { SemanticResourceAttributes: ResourceAttributesSC } = require('@opentelemetry/semantic-conventions');
const { JaegerExporter } = require('@opentelemetry/exporter-jaeger');

const Exporter = JaegerExporter;

const { ExpressInstrumentation } = require('@opentelemetry/instrumentation-express');
const { HttpInstrumentation } = require('@opentelemetry/instrumentation-http');

module.exports = () =&amp;gt; {
 const serviceName = 'serviceName';

 const provider = new NodeTracerProvider({
   resource: new Resource({
     [ResourceAttributesSC.SERVICE_NAME]: serviceName,
   }),
 });
 registerInstrumentations({
   tracerProvider: provider,
   instrumentations: [
     // Express instrumentation expects HTTP layer to be instrumented
     HttpInstrumentation,
     ExpressInstrumentation,
   ],
 });

 const exporter = new Exporter({
   host: '10.100.40.132',
   port: 6832,
 });

 provider.addSpanProcessor(new SimpleSpanProcessor(exporter));

 // Initialize the OpenTelemetry APIs to use the NodeTracerProvider bindings
 provider.register();

 return opentelemetry.trace.getTracer('express-example');
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 5: At the top of the app.js file, add this line to enable tracing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('./tracing')();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 6: Run npm start &amp;amp; go to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in the browser&lt;/p&gt;

&lt;p&gt;Step 7: Back in the Jaeger UI – you can see this trace now:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GObTIN5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnbb9is9uc673g1iwdvx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GObTIN5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnbb9is9uc673g1iwdvx.png" alt="Jaeger UI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-faster-route-sending-traces-to-jaeger-with-the-aspecto-sdk"&gt;
  &lt;/a&gt;
  Bonus (faster route) – Sending traces to Jaeger with the Aspecto SDK:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-deploy-jaeger-on-aws"&gt;Aspecto&lt;/a&gt; provides a free and easy-to-use &lt;a href="https://docs.aspecto.io/v1/getting-started/install/install-the-sdk?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-deploy-jaeger-on-aws"&gt;SDK&lt;/a&gt; that can be configured to export traces to Jaeger (and to Aspecto, that enables additional abilities that Jaeger does not have) with only one line of code.&lt;/p&gt;

&lt;p&gt;Step 1: Create a new express app using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: Perform npm installs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
npm install @aspecto/opentelemetry
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: Register for free at &lt;a href="http://www.aspecto.io"&gt;www.aspecto.io&lt;/a&gt;, and obtain your API key.&lt;/p&gt;

&lt;p&gt;Step 4: At the top of your app.js file, add this (before any import):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('@aspecto/opentelemetry')({
  local:true,
  aspectoAuth: '*your-aspecto-api-key-goes-here*',
  customZipkinEndpoint: 'http://10.100.40.132:9411/api/v2/spans',
  otCollectorEndpoint: 'http://10.100.40.132:9411/v1/trace',
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do not forget to change the IP to your own EC2 IP address.&lt;/p&gt;

&lt;p&gt;Step 5: Let’s modify the route in index.js to /hello and open the browser at localhost:3000/hello.&lt;/p&gt;

&lt;p&gt;Step 6: And voila! our Jaeger is showing the span we just sent:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--090zbq8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d12peu8x7dnioyjtdi3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--090zbq8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d12peu8x7dnioyjtdi3a.png" alt="Jaeger UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see how this looks in Aspecto UI (click on the Aspecto link in your terminal):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1DP5w9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3wddvi2e6ooov7is8jb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1DP5w9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3wddvi2e6ooov7is8jb.png" alt="Aspecto UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you choose to use it, you don’t even need to maintain Jaeger at all but simply use &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-deploy-jaeger-on-aws"&gt;Aspecto&lt;/a&gt;. Feel free to learn more here.&lt;/p&gt;

&lt;p&gt;That’s it, I hope that was helpful for you and wish you years of happy tracing! 😁 Reach out to me &lt;a href="https://twitter.com/magnificoder"&gt;@magnificoder&lt;/a&gt; for any questions you may have.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/magnificoder"&gt;Tom Zach&lt;/a&gt; is a Software Engineer at Aspecto. Feel free to follow him on &lt;a href="https://twitter.com/magnificoder"&gt;Twitter&lt;/a&gt; for more great articles like this one: &lt;a href="https://www.aspecto.io/blog/microservices-authentication-strategies-theory-to-practice/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=how-to-deploy-jaeger-on-aws"&gt;Microservices Authentication Strategies: Theory to Practice.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>webdev</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Simple report app with Blazor in 10 minutes</title>
      <author>Juliia Nikitina</author>
      <pubDate>Thu, 26 Aug 2021 13:59:39 +0000</pubDate>
      <link>https://dev.to/juliianikitina/simple-report-app-with-blazor-in-10-minutes-5h22</link>
      <guid>https://dev.to/juliianikitina/simple-report-app-with-blazor-in-10-minutes-5h22</guid>
      <description>&lt;p&gt;Recently, I had a task to start working with a new framework - &lt;strong&gt;Blazor&lt;/strong&gt;. This is the first time I have dealt with it, so for a start I decided to search for some additional information on it on some blogs.&lt;/p&gt;

&lt;p&gt;One of the critical features of Blazor, which most developers have mentioned, is the ability to &lt;strong&gt;use both C# and various JavaScript libraries&lt;/strong&gt; when creating an application. In turn, I was very bribed that the whole integration process is simple and even speeds up the work on the project because it adds more mobility.&lt;/p&gt;

&lt;p&gt;In this short tutorial, I'll show you my experience, how using Blazor and Flexmonster Pivot Table &amp;amp; Charts library create the simplest reporting app with a pivot grid in 10 minutes.&lt;/p&gt;

&lt;p&gt;Before we start, check that you have installed the &lt;em&gt;.NET Core 2.1.300 (or later) SDK&lt;/em&gt; and it works properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%84%961-create-the-simplest-blazor-app"&gt;
  &lt;/a&gt;
  №1. Create the simplest Blazor app
&lt;/h2&gt;

&lt;p&gt;So to create the base, you just need to run one command in the terminal (could it be even easier?):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new blazorserver -o BlazorApp --no-https
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a new folder BlazorApp with all the files needed in your current location, and on &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;, you will find the basic Blazor app template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-QNap_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/720tm2ectnyrdz78446g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-QNap_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/720tm2ectnyrdz78446g.png" alt="Screenshot 2021-08-16 at 10.30.01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%84%962-add-the-flexmonster-to-your-app"&gt;
  &lt;/a&gt;
  №2. Add the Flexmonster to your app
&lt;/h2&gt;

&lt;p&gt;Instead of “ Welcome to your new app“ our task is to add a pivot grid to the main page. &lt;/p&gt;

&lt;p&gt;To do this install the Flexmonster.Blazor package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet add package Flexmonster.Blazor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add it to the project by writing the following line in the import file (&lt;code&gt;_Imports.razor&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@using Flexmonster.Blazor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the script to the main HTML file (&lt;code&gt;_Host.cshtml&lt;/code&gt;) so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
   &amp;lt;!-- Other metadata tags --&amp;gt;
   &amp;lt;link href="css/app.css" rel="stylesheet" /&amp;gt;
   &amp;lt;link href="PivotBlazor.styles.css" rel="stylesheet" /&amp;gt;
   &amp;lt;script src="_content/Flexmonster.Blazor/blazor-flexmonster.js"&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;!-- Other metadata tags --&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, let's add the table itself to the main page. In &lt;code&gt;Index.razor&lt;/code&gt; file, replace the header and caption with the Flexmonster Pivot Grid caption and the component itself with the parameters you need (enable the Toolbar and define width and height of the pivot):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@page "/"
&amp;lt;h1&amp;gt;Flexmonster Pivot Grid&amp;lt;/h1&amp;gt;
&amp;lt;FlexmonsterComponent Report="@report"
                     Toolbar="true"
                     Width="100%"
                     Height="600"&amp;gt;
&amp;lt;/FlexmonsterComponent&amp;gt;
@code {
    string report = "https://cdn.flexmonster.com/reports/report.json";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;@code&lt;/code&gt; block, we specify the path to the report displayed on the page and pass it to the component as a variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%84%963-run-your-blazor-report-app"&gt;
  &lt;/a&gt;
  №3. Run your Blazor report app
&lt;/h2&gt;

&lt;p&gt;That’s all! Simply run your app in the terminal with &lt;code&gt;dotnet run&lt;/code&gt; and open the &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All these steps will take you about 10 minutes, and you will see the result immediately. All that remains is to take a closer look at the &lt;a href="https://www.flexmonster.com/?r=dt3"&gt;Flexmonster&lt;/a&gt; and &lt;a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor/?r=dt3"&gt;Blazor&lt;/a&gt; documentation to unleash this framework’s capabilities fully!&lt;/p&gt;

&lt;p&gt;If this tutorial were helpful for you, I would be thrilled to hear your feedback and ideas about this integration.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>webdev</category>
      <category>blazor</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>How much assumed knowledge is enough? </title>
      <author>Amara Graham</author>
      <pubDate>Thu, 26 Aug 2021 13:48:12 +0000</pubDate>
      <link>https://dev.to/missamarakay/how-much-assumed-knowledge-is-enough-kmi</link>
      <guid>https://dev.to/missamarakay/how-much-assumed-knowledge-is-enough-kmi</guid>
      <description>&lt;p&gt;I spent years as a developer advocate targeting beginners to particular technology, topics, or products. &lt;/p&gt;

&lt;p&gt;I'm very specific about this because my definition of beginners did not include folks who were new to coding, but might be new to working in cloud or SaaS. They didn't have to be full time developers, but they did need to know some amount of programming. I would stop to explain some fundamentals, but really I assumed folks would get most of their fundamental knowledge from somewhere else, whether it was a degree, bootcamp, certification, or someone else's content.&lt;/p&gt;

&lt;p&gt;I don't want to assume so much knowledge that I alienate users, but, at the end of the day, I need to assume some knowledge.&lt;/p&gt;

&lt;p&gt;I often thought (and still think) about the minimum amount of knowledge required to get through a how-to or complete a task. For example, if something required an async call or needed to happen across multiple threads I would acknowledge the why, maybe touch on the how, and if I was feeling particularly generous (and knowledgable) I would mention the pros and cons of shoving this code into production as-is.&lt;/p&gt;

&lt;p&gt;If you've heard me speak or attended a workshop I've lead I always warn folks to not take snippets or example code I've written and put it into production. It's often untested for scale, security, or, more literally, just does not have testing! All things you need to consider carefully when "productionalizing" code. Don't just take it and run with it.&lt;/p&gt;

&lt;p&gt;This isn't a scathing blog about how devs of this generation just C&amp;amp;P their way across Stack Overflow - that's a tired opinion. This is a fair warning to myself and other technical content generators that your example code will likely end up in production, no matter how many alerts, notes, comments, and admonitions you make. &lt;/p&gt;

&lt;p&gt;So how do we acknowledge this while offering an easy to maintain, digestible experience? How do you build examples and content meant to help educate developers without huge maintenance costs or any other gotchas on either side?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#facilitate-rapid-prototyping"&gt;
  &lt;/a&gt;
  Facilitate rapid prototyping
&lt;/h2&gt;

&lt;p&gt;This one is huge, so it's first because I'm long winded and you'll likely stop reading soon anyway.&lt;/p&gt;

&lt;p&gt;We live in an agile world filled with near-instant gratification. Your project manager or stakeholders demand significant, regular progress which starts at the very beginning of the software lifecycle, sometimes even before.&lt;/p&gt;

&lt;p&gt;How many times have you find ourself saying "oh I just hacked this together" or "I PoC'ed this and it looks like it will work for us" only to then find yourself in a position where you need to deliver and you need to deliver this week or this sprint. Have you ever started from scratch? Or do you typically build off of what you had?&lt;/p&gt;

&lt;p&gt;I'll be honest, as a developer, I've never thrown out PoC (proof-of-concept) or "hacked" work. In fact, I'd go so far as to say I've never been empowered or support to do that. This isn't a jab at my previous teams or managers, but given the choice between starting from 0% and starting from somewhere between 30-65% I'm simply too lazy to throw away work.&lt;/p&gt;

&lt;p&gt;Any example snippet or sandbox may be pitched as something great for prototyping, but rarely do I see situations where prototypes are chucked in the bin and not evolved into production (hopefully worthy!) apps. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#target-an-mvp"&gt;
  &lt;/a&gt;
  Target an MVP
&lt;/h2&gt;

&lt;p&gt;My goal in Developer Experience is to get you through an enjoyable, efficient experience with our products and tools so you get to focus on delivering a solution for your use case. &lt;/p&gt;

&lt;p&gt;This means I'm looking to cut and trim everywhere I can while still providing you a meaningful experience. This is no different than going through an MVP (minimum viable product) exercise. What's the bare minimum you need to be successfully onboarded?&lt;/p&gt;

&lt;p&gt;Acknowledge you will not be able to cover every features and every corner of your product, but don't reinvent the wheel either. Give devs building blocks so that each step of the way through your how-to or documentation they can build on their foundational knowledge but don't be afraid to keep it lean. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-devs-from-themselves-if-possible"&gt;
  &lt;/a&gt;
  Save devs from themselves (if possible)
&lt;/h2&gt;

&lt;p&gt;To give you a concrete example, we evaluated our community through surveys, polls, and forum questions and realized their Java knowledge was beginner at best and their grasp of concepts like multi-threading, synchronous and asynchronous processing, and other complex topics just wasn't there. There is a difference between writing code that's functional and writing code to be performant. There is room in tech for both.&lt;/p&gt;

&lt;p&gt;We discussed modifying some of our &lt;a href="https://github.com/camunda-cloud/camunda-cloud-get-started"&gt;getting started content&lt;/a&gt; to remove lines that may lead to issues down the road because of this conclusion. For example, blocking and non-blocking code was not explicitly obvious.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;send().join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you know that's a blocking call to wait for the issues command to be executed on the workflow engine?&lt;/p&gt;

&lt;p&gt;So we modified it to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;send().whenComplete((result, exception) -&amp;gt; {})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to register a callback to be executed if the command on the workflow engine was executed or an exception was thrown. &lt;/p&gt;

&lt;p&gt;Now while both are perfectly acceptable for an example, sandbox environment, of even a PoC, the first example is not going to scale in the way we know process automation projects will in a production or production-like scenario. &lt;/p&gt;

&lt;p&gt;While some devs will be able to recognize this, we want to lower the barrier for ALL devs, so we adjust without having to deep dive into the fundamentals of parallelism. We've able to introduce the topic, how it works with our product, and point them in the direction of more information or give them terms they can search around and educate themselves on. And most importantly, we've set up the dev on a good path that if this code ends up in production and scaling, it's not as fragile.&lt;/p&gt;

&lt;p&gt;I think it's also important to recognize you can just have a bad, unfocused day as a very experience Java dev and miss this detail. It may not hurt you at 1-10 processes&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a class="mentioned-user" href="https://dev.to/berndruecker"&gt;@berndruecker&lt;/a&gt;
 for the [fixes in this example](&lt;a href="https://github.com/camunda-cloud/camunda-cloud-get-started/commit/9d121d02d9bd1c8f35470afbab4a42ce84927b7b_"&gt;https://github.com/camunda-cloud/camunda-cloud-get-started/commit/9d121d02d9bd1c8f35470afbab4a42ce84927b7b_&lt;/a&gt;! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-where-do-you-draw-the-line-at-enough-assumed-knowledge"&gt;
  &lt;/a&gt;
  So where do you draw the line at enough assumed knowledge?
&lt;/h2&gt;

&lt;p&gt;My favorite answer - it depends.&lt;/p&gt;

&lt;p&gt;I like to lean heavily on user data and personas. It's unrealistic to think I can teach everyone programming fundamentals, how to use our products, and be good at all of that. &lt;/p&gt;

&lt;p&gt;I keep the three things in mind - how can I facilitate rapid prototyping, introduce them to the MVP, and save devs from themselves when using our products so they can get what they need from the experts in that space or topic. &lt;/p&gt;

&lt;p&gt;How do you handle this? Or maybe, what do you expect in your documentation experience? Leave me a comment and share your thoughts.&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@elifrancis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Eli Francis&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/study?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>documentation</category>
      <category>developerrelations</category>
    </item>
    <item>
      <title>Implement JWT Authentication with Phoenix.Token</title>
      <author>Dung Nguyen</author>
      <pubDate>Thu, 26 Aug 2021 13:42:44 +0000</pubDate>
      <link>https://dev.to/onpointvn/implement-jwt-authentication-with-phoenix-token-n58</link>
      <guid>https://dev.to/onpointvn/implement-jwt-authentication-with-phoenix-token-n58</guid>
      <description>&lt;p&gt;In this post, you'll learn how to implement JWT based authentication using &lt;code&gt;Phoenix.Token&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is originally posted on &lt;a href="https://bluzky.github.io/blog/2021-08-26-jwt-auth-with-phoenix-token/"&gt;The Orange+&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our previous projects, we use &lt;code&gt;guardian&lt;/code&gt; library to implement JWT authentication. &lt;code&gt;Guardian&lt;/code&gt; is a great library which provides lots of method and tool to work with authentication. But sometime we don't need them all. And recently, I found &lt;code&gt;Phoenix.Token&lt;/code&gt; module shipped with &lt;code&gt;phoenix&lt;/code&gt; framework that helps me to implement JWT authentication with few lines of code.&lt;/p&gt;

&lt;p&gt;Let's do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-implement-jwttoken-module"&gt;
  &lt;/a&gt;
  1. Implement JwtToken module
&lt;/h2&gt;

&lt;p&gt;Here is the document of &lt;a href="https://hexdocs.pm/phoenix/Phoenix.Token.html"&gt;Phoenix.Token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We just wrap &lt;code&gt;sign&lt;/code&gt; and &lt;code&gt;verify&lt;/code&gt; function from &lt;code&gt;Phoenix.Token&lt;/code&gt; to create and check for valid JWT token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;JwtToken&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@signing_salt&lt;/span&gt; &lt;span class="s2"&gt;"octosell_api"&lt;/span&gt;
  &lt;span class="c1"&gt;# token for 2 week&lt;/span&gt;
  &lt;span class="nv"&gt;@token_age_secs&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;86_400&lt;/span&gt;

  &lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="sd"&gt;"""
  Create token for given data
  """&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@signing_salt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="sd"&gt;"""
  Verify given token by:
  - Check if this token is issued and stored in Redis
  - Verify token signature
  - Verify expiration time
  """&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:unauthenticated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@signing_salt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="ss"&gt;max_age:&lt;/span&gt; &lt;span class="nv"&gt;@token_age_secs&lt;/span&gt;
           &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;_error&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:unauthenticated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we wrap in &lt;code&gt;JwtToken&lt;/code&gt; module to simplify API. We pass &lt;code&gt;MyAppWeb.Endpoint&lt;/code&gt; here to use secret key that config for endpoint. You can pass secret key from config as firt argument.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-generate-jwt-token"&gt;
  &lt;/a&gt;
  2. Generate JWT token
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;SessionController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;JwtToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;user_id:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="c1"&gt;# return token to client&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gettext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email or password is in correct"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we create JWT token with a map &lt;code&gt;%{user_id: user.id}&lt;/code&gt; and return to client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-build-plug-to-verify-token"&gt;
  &lt;/a&gt;
  3. Build Plug to verify token
&lt;/h2&gt;

&lt;p&gt;Client sent jwt token to server via header &lt;code&gt;Authorization&lt;/code&gt;. We extract token and call &lt;code&gt;JwtToken.verify&lt;/code&gt; to check if jwt token is valid and not expired.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Authenticate&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Conn&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Bearer "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;get_req_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"authorization"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;JwtToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:unauthorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;ErrorView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:"401"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;halt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-add-plug-to-router"&gt;
  &lt;/a&gt;
  4. Add plug to router
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Router&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:router&lt;/span&gt;

  &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="ss"&gt;:api&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="ss"&gt;:accepts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="ss"&gt;:authenticated&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Authenticate&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="s2"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;pipe_through&lt;/span&gt; &lt;span class="ss"&gt;:api&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;"/auth/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SessionController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="s2"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;pipe_through&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authenticated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="s2"&gt;"/auth/logout"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SessionController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have done with it. Just a few line of code&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Implement JWT authentication with &lt;code&gt;Phoenix&lt;/code&gt; is so easy and you may not need Guardian for your application.&lt;br&gt;
In this post I only implement simple version of JWT authentication. In real application, you should store jwt token signature in database or redis and&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;Authenticate&lt;/code&gt; plug check if the token exists in database.&lt;/li&gt;
&lt;li&gt;When user logout, clear it from database/redis to make sure that token cannot be used to make request anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>phoenix</category>
      <category>jwt</category>
    </item>
    <item>
      <title>Develop URL shortener application with Redwood JS.</title>
      <author>Rohith Gilla</author>
      <pubDate>Thu, 26 Aug 2021 13:40:36 +0000</pubDate>
      <link>https://dev.to/gillarohith/develop-url-shortener-application-with-redwood-js-3cf7</link>
      <guid>https://dev.to/gillarohith/develop-url-shortener-application-with-redwood-js-3cf7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#develop-url-shortener-application-with-redwoodjs"&gt;
  &lt;/a&gt;
  Develop URL shortener application with RedwoodJS
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-redwoodjs"&gt;
  &lt;/a&gt;
  What is RedwoodJS
&lt;/h3&gt;

&lt;p&gt;Redwood is is built on React, GraphQL, and Prisma, Redwood works with the components and development workflow, but with simple conventions and helpers to make your experience even better, this is opinionated.&lt;/p&gt;

&lt;p&gt;To keep it simple, let's use the tag line which they go by.&lt;/p&gt;

&lt;p&gt;"Bringing full-stack to the Jamstack"&lt;/p&gt;

&lt;p&gt;Redwood is really a vast framework,this blog post will try to cover the most important concepts of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" alt="https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image taken from &lt;a href="https://jamstack.org/"&gt;https://jamstack.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-building-now"&gt;
  &lt;/a&gt;
  What are we building now
&lt;/h3&gt;

&lt;p&gt;We will be building a small URL shortener service, we will focus less on UI and functionality aspect of the shortener as a whole and concentrate more on RedwoodJS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bird-eye-view-of-technologies-being-used"&gt;
  &lt;/a&gt;
  Bird eye view of technologies being used
&lt;/h3&gt;

&lt;p&gt;We will be working with the following technologies in the tutorial&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RedwoodJS&lt;/li&gt;
&lt;li&gt;Tailwind&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;li&gt;Prisma&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just to put it in simple words, &lt;code&gt;HOSTURL/:slug&lt;/code&gt; will add a view to the local database and redirect to the desired website.&lt;/p&gt;

&lt;p&gt;If you are developing locally the &lt;code&gt;HOSTURL&lt;/code&gt; would be &lt;code&gt;[localhost:8910](http://localhost:8910)&lt;/code&gt; and the &lt;code&gt;:slug&lt;/code&gt; can be anything.&lt;/p&gt;

&lt;p&gt;Simple example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[localhost:8910/gilla-twitter](http://localhost:8910/gilla-twitter)&lt;/code&gt; should redirect to my twitter profile.&lt;/p&gt;

&lt;p&gt;P.S Don't worry even if you don't know anything, our objective will be to cover them below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h2&gt;

&lt;p&gt;In this section we would be going over the development process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-redwood-project"&gt;
  &lt;/a&gt;
  Create Redwood project
&lt;/h3&gt;

&lt;p&gt;As with any modern framework, Redwood comes with a project generator.&lt;/p&gt;

&lt;p&gt;Redwood supports both &lt;code&gt;TypeScript&lt;/code&gt; and &lt;code&gt;JavaScript&lt;/code&gt;, you can use the required language of your choice, for this tutorial we will be going with &lt;code&gt;TypeScript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For JS&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create redwood-app ./redwood-url-shortner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/NEnD3K"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For TS&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create redwood-app --typescript redwood-url-shortner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/APAVaE"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will generate the base project for us with &lt;code&gt;sqlite&lt;/code&gt; database, which we can swap with just a few changes.&lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://redwoodjs.com/docs/local-postgres-setup"&gt;this&lt;/a&gt; to get it up and running locally, for deployment you can use services such as &lt;a href="https://dashboard.heroku.com/"&gt;heroku&lt;/a&gt; or &lt;a href="http://railway.app/"&gt;railway&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial we will stick to &lt;code&gt;sqlite&lt;/code&gt; database as we won't be performing deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-the-high-level-structure-of-the-application"&gt;
  &lt;/a&gt;
  Understanding the high level structure of the application
&lt;/h3&gt;

&lt;p&gt;On the high level you could see two repositories, &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;api&lt;/code&gt; which are two workspaces in &lt;code&gt;yarn&lt;/code&gt; terminology.&lt;/p&gt;

&lt;p&gt;In in &lt;code&gt;web&lt;/code&gt; we have our Frontend of the application and in &lt;code&gt;api&lt;/code&gt; the GraphQL backend resides.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/bced27fb30844d3faec896a9d42cb549"&gt;Web Directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other files are simple, like the &lt;code&gt;css&lt;/code&gt; &lt;code&gt;html&lt;/code&gt; and the &lt;code&gt;.ts/.js&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Now the way yarn workspaces works on installing dependencies are is as follows.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn workspace &amp;lt;space name&amp;gt; add &amp;lt;dependency name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Say for installing axios in web workspace, the command would be&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn workspace web app axios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;rw&lt;/code&gt; is shorthand for &lt;code&gt;redwood&lt;/code&gt; cli.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-tailwind"&gt;
  &lt;/a&gt;
  Adding Tailwind
&lt;/h3&gt;

&lt;p&gt;Now that we understand the application at a high level, we need to include our custom webpack configuration.&lt;/p&gt;

&lt;p&gt;Redwood supports that too, you can check it out &lt;a href="https://redwoodjs.com/docs/webpack-configuration.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redwood can include the Tailwind CSS in just a single command line code, this takes care of all the production ready configuration for Tailwind CSS. &lt;/p&gt;

&lt;p&gt;This is the command to setup the Tailwind, you could see the sample output in the warp link below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw setup tailwind&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/WKeAdK"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please remember to restart your &lt;code&gt;yarn rw dev&lt;/code&gt; server after adding tailwind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-new-page"&gt;
  &lt;/a&gt;
  Creating new page
&lt;/h3&gt;

&lt;p&gt;We need to generate the page for the home, currently it shows redwood home page.&lt;/p&gt;

&lt;p&gt;The following command is used for doing so, you can also find sample output of the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g page app /&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/NEnD3K"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;g&lt;/code&gt; is the shorthand for &lt;code&gt;generate&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;page&lt;/code&gt; is used for generating pages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app&lt;/code&gt; is the name of the components and pages that will be generated.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; is the route path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;Routes.ts&lt;/code&gt; files, the main change will be reflected.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;localhost:8910&lt;/code&gt; will now show the home page after this command.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;AppPageLayout&lt;/code&gt; (if generated or else you can generate it)&lt;/p&gt;

&lt;p&gt;You can use this simple layout to have good padding around the content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayoutProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayoutProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"p-8 h-screen bg-blue-200"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prisma-model-for-the-raw-urlscheme-endraw-"&gt;
  &lt;/a&gt;
  Prisma model for the &lt;code&gt;UrlScheme&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Create the prisma model for the URL Shortener, the model contains the following values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;        &lt;span class="nx"&gt;Int&lt;/span&gt;      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;longUrl&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;unique&lt;/span&gt;
  &lt;span class="nx"&gt;views&lt;/span&gt;     &lt;span class="nx"&gt;Int&lt;/span&gt;      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;createdAt&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will try to keep it as simple as possible, now the migrations need to be applied to the database, for this there is a command in &lt;code&gt;rw&lt;/code&gt; cli.&lt;/p&gt;

&lt;p&gt;This command is used for creating and applying the migration.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw prisma migrate dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/8K2RwK"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-scaffold"&gt;
  &lt;/a&gt;
  Generating Scaffold
&lt;/h3&gt;

&lt;p&gt;Now this is where the actual Redwood magic starts, as we discussed earlier we will concentrate on generating the scaffold.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw generate scaffold url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/6E7pw5"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above command generates&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CRUD in the &lt;code&gt;api&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Components, Layouts, Cells for the &lt;code&gt;web&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;GraphQL schema definition files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you visit the &lt;code&gt;/urls/new&lt;/code&gt; page, you can check the form to add data has already been created, and you can start adding the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LwfSFTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722780/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.16.14_PM_mdlln3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LwfSFTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722780/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.16.14_PM_mdlln3.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629722780/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.16.14_PM_mdlln3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once added the data head over to &lt;code&gt;/urls&lt;/code&gt; page (you would be automatically redirected here, if not visit it manually in the browser)&lt;/p&gt;

&lt;p&gt;The page would look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpxEZdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722758/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.15.50_PM_cx8vnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpxEZdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722758/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.15.50_PM_cx8vnp.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629722758/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.15.50_PM_cx8vnp.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Show&lt;/code&gt; , &lt;code&gt;Edit&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; function works, the CRUD are already all wired in.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;api/src/graphql&lt;/code&gt; is something you can spend time exploring, you can also launch the GraphQL playground using &lt;code&gt;localhost:8911/graphql&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-cell-architecture"&gt;
  &lt;/a&gt;
  Understanding Cell Architecture
&lt;/h3&gt;

&lt;p&gt;There is a lot of terminology of &lt;code&gt;Cell&lt;/code&gt; that is going around, there are a few definitions on the official docs and other places. To put it in simple words let's understand by a quick example.&lt;/p&gt;

&lt;p&gt;For any API call the frontend makes, there is always four main possibilities &lt;code&gt;Success&lt;/code&gt; , &lt;code&gt;Empty&lt;/code&gt; , &lt;code&gt;Failure&lt;/code&gt; and &lt;code&gt;Loading&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So we need three different UIs for the following states based on the design requirements.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Cell&lt;/code&gt; is a high order component where you can export 4 components &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading&lt;/li&gt;
&lt;li&gt;Empty&lt;/li&gt;
&lt;li&gt;Failure&lt;/li&gt;
&lt;li&gt;Success&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The use of just the cell component for example,&lt;code&gt;&amp;lt;UrlsCell/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Just usage of this component on the code would be enough, the states and rendering the particular state will be taken care by redwood.&lt;/p&gt;

&lt;p&gt;Which means if the API call is success it renders the &lt;code&gt;Success&lt;/code&gt; component, when it is loading it renders the &lt;code&gt;Loading&lt;/code&gt; component and so o&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-custom-sdls"&gt;
  &lt;/a&gt;
  Writing custom SDLs
&lt;/h3&gt;

&lt;p&gt;For most of the cases the CRUD will be enough, but for a few cases there is a requirement for having custom queries.&lt;/p&gt;

&lt;p&gt;We have a need for custom query, we need to find the &lt;code&gt;longUrl&lt;/code&gt; which needs to be redirected to from the &lt;code&gt;slug&lt;/code&gt; we have.&lt;/p&gt;

&lt;p&gt;The CRUD which we already have can get the data based on the &lt;code&gt;id&lt;/code&gt; and not slug.&lt;/p&gt;

&lt;p&gt;For this &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the required function in the &lt;code&gt;services/&lt;/code&gt; folder&lt;/p&gt;

&lt;p&gt;Here we are dealing with the &lt;code&gt;urls&lt;/code&gt; so we add the following in &lt;code&gt;api/src/services/urls/urls.ts&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UrlWhereUniqueInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;findBySlug&lt;/code&gt; in the Schema definition file.&lt;/p&gt;

&lt;p&gt;In the case of us we need to modify the following  file &lt;code&gt;api/src/graphql/urls.sdl.ts&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;
    &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt; &lt;span class="c1"&gt;// Added&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to create a custom cell, because we also need to handle case of incrementing the view count, if you notice our schema definition there is a &lt;code&gt;views&lt;/code&gt; field, the &lt;code&gt;FindBySlug&lt;/code&gt; will be discussed in the section below.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-raw-findbyslug-endraw-cell"&gt;
  &lt;/a&gt;
  Creating the &lt;code&gt;FindBySlug&lt;/code&gt; cell
&lt;/h3&gt;

&lt;p&gt;As we have done earlier, the &lt;code&gt;scaffold&lt;/code&gt; command generates many things which also includes cells.&lt;/p&gt;

&lt;p&gt;To generate cel alone without any other side files generated, there is a command to do that.&lt;/p&gt;

&lt;p&gt;You can find the command and it's sample output below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g cell FindBySlug&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/XKmXp5"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the required files are generated, in the main &lt;code&gt;FindBySlugCell.tsx&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;QUERY&lt;/code&gt; variable, this is the query that will be run and based on the result the states will be rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query FindBySlugQuery($id: String!) {
    findBySlug: findBySlug(slug: $id) {
      id
      longUrl
      slug
      views
      createdAt
    }
  }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for testing this implementation we need to wire this component in the &lt;code&gt;AppPage.tsx&lt;/code&gt; file that was generated with the &lt;code&gt;page&lt;/code&gt; command we used.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;AppPage.tsx&lt;/code&gt; would look similar to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaTags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/components/FindBySlugCell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../layouts/AppPageLayoutLayout/AppPageLayoutLayout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NewUrlPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Url/NewUrlPage/NewUrlPage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MetaTags&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;URL shortner App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we are taking in props of &lt;code&gt;slug&lt;/code&gt; , we take this &lt;code&gt;slug&lt;/code&gt; from the URL bar, so this needs to be handled in &lt;code&gt;Routes.tsx&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/{slug:String}"&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AppPage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This line will ensure to load &lt;code&gt;AppPage&lt;/code&gt; component on &lt;code&gt;/:slug&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that how well the type checking and safety is, really great stuff.&lt;/p&gt;

&lt;p&gt;Now on hitting the url which you have created, the page would look something similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmDMT2GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723173/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.22.46_PM_c7yzxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmDMT2GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723173/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.22.46_PM_c7yzxh.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629723173/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.22.46_PM_c7yzxh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ignore the part of the image where you see &lt;code&gt;New URL&lt;/code&gt; form in the page.&lt;/p&gt;

&lt;p&gt;But the &lt;code&gt;json&lt;/code&gt; data can be seen on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-everything-together"&gt;
  &lt;/a&gt;
  Putting everything together.
&lt;/h3&gt;

&lt;p&gt;Now, we need to add a new count to the views and also redirect the user after that.&lt;/p&gt;

&lt;p&gt;Again repeating the drill for adding new custom GraphQL query.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the following in &lt;code&gt;urls.ts&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UpdateViewArgs&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UrlWhereUniqueInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementViews&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;UpdateViewArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the &lt;code&gt;sdl&lt;/code&gt; file by adding this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Mutation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;createUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CreateUrlInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;updateUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UpdateUrlInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;deleteUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;incrementViews&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check the &lt;code&gt;incrementViews&lt;/code&gt; in the GraphQL playground, attaching image below to show how it looks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xp_mIBmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629724109/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.38.18_PM_gpdwxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xp_mIBmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629724109/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.38.18_PM_gpdwxj.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629724109/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.38.18_PM_gpdwxj.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;FindBySlugCell.tsx&lt;/code&gt; we will be adding another GraphQL mutation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INCREMENT_VIEWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  mutation IncrementViewMutation($id: Int!, $count: Int!) {
    incrementViews: incrementViews(id: $id, count: $count) {
      id
      longUrl
      slug
      views
    }
  }

// in the success block
const [increment] = useMutation(INCREMENT_VIEWS)
useEffect(() =&amp;gt; {
    increment({
      variables: {
        id: findBySlug.id,
        count: findBySlug.views + 1,
      },
    })
        // used for redirection 
    window.location.href = findBySlug.longUrl
  }, [findBySlug.id])
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The overall file would look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FindBySlugQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;types/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CellSuccessProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CellFailureProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query FindBySlugQuery($id: String!) {
    findBySlug: findBySlug(slug: $id) {
      id
      longUrl
      slug
      views
      createdAt
    }
  }
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INCREMENT_VIEWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  mutation IncrementViewMutation($id: Int!, $count: Int!) {
    incrementViews: incrementViews(id: $id, count: $count) {
      id
      longUrl
      slug
      views
    }
  }
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Empty&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Failure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;CellFailureProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Error: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;CellSuccessProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FindBySlugQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INCREMENT_VIEWS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;views&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longUrl&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line react-hooks/exhaustive-deps&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-the-form-to-the-home-page"&gt;
  &lt;/a&gt;
  Adding the form to the Home page.
&lt;/h3&gt;

&lt;p&gt;By just adding the &lt;code&gt;&amp;lt;NewUrlPage /&amp;gt;&lt;/code&gt; which was generated for us can directly used as an component.&lt;/p&gt;

&lt;p&gt;The overall &lt;code&gt;AppPage.tsx&lt;/code&gt; component will look something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaTags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/components/FindBySlugCell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../layouts/AppPageLayoutLayout/AppPageLayoutLayout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NewUrlPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Url/NewUrlPage/NewUrlPage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MetaTags&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;URL shortner App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"m-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewUrlPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application would be similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SkifEJ-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723106/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.21.36_PM_tqrwfs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SkifEJ-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723106/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.21.36_PM_tqrwfs.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629723106/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.21.36_PM_tqrwfs.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  Github Repository
&lt;/h3&gt;

&lt;p&gt;The application code can be found in the Github repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Rohithgilla12/redwood-url-shortner"&gt;GitHub - Rohithgilla12/redwood-url-shortner&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Wohoo, we have successfully created a Redwood JS application, thought this can be improved a lot, but the main objective of learning how to use RedwoodJS was covered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;Currently Redwood supports &lt;code&gt;Netlify&lt;/code&gt; , &lt;code&gt;Vercel&lt;/code&gt;, &lt;code&gt;AWS-Serverless&lt;/code&gt; , &lt;code&gt;Render&lt;/code&gt; as official supported targets.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw deploy &amp;lt;place&amp;gt;&lt;/code&gt; will create ready to deploy version of the project, also please note that backend needs to be deployed separately except for &lt;code&gt;Render&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is a detailed explanation about different deploy methods &lt;a href="https://redwoodjs.com/docs/deploy.html#general-deployment-setup"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now if you want an opinionated suggestion about deployment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;code&gt;Netlify&lt;/code&gt; or &lt;code&gt;Vercel&lt;/code&gt; for the Frontend deployment, if you don't have any personal preference choose the one which has more credits left :)&lt;/li&gt;
&lt;li&gt;Choose Heroku / Railway for the database, you can summon a Postgres db within a few clicks. Railway has pay as you go structure, you would be able to handle a decent amount of traffic in free tier itself,  Heroku you get 10k records in the DB in the free tier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feeling-adventurous"&gt;
  &lt;/a&gt;
  Feeling Adventurous?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add Authentication to the existing application.&lt;/li&gt;
&lt;li&gt;Provide User dashboard, show the graph of views per day.&lt;/li&gt;
&lt;li&gt;Try to use the existing API and build a mobile application from it, please use &lt;a href="https://community.redwoodjs.com/t/using-graphql-envelop-helix-in-redwood-v0-35/2276"&gt;this&lt;/a&gt; as reference for consuming API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#more-reading"&gt;
  &lt;/a&gt;
  More reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://redwoodjs.com/roadmap"&gt;Roadmap&lt;/a&gt; is worth checking out, some really cool stuff are coming out.&lt;/li&gt;
&lt;li&gt;Official Docs can be found &lt;a href="https://redwoodjs.com/docs/introduction"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Official Learning website can be find &lt;a href="https://learn.redwoodjs.com/docs/tutorial/welcome-to-redwood"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deep dive of API folder can be find &lt;a href="https://learn.redwoodjs.com/docs/tutorial/redwood-file-structure#the-api-directory"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deep dive of Web folder can be find &lt;a href="https://learn.redwoodjs.com/docs/tutorial/redwood-file-structure#the-web-directory"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deep dive on &lt;a href="https://redwoodjs.com/docs/cells"&gt;cells&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Rohith Gilla&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Introduction to programming</title>
      <author>Aswin Barath</author>
      <pubDate>Thu, 26 Aug 2021 13:32:06 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/introduction-to-programming-31od</link>
      <guid>https://dev.to/aswin2001barath/introduction-to-programming-31od</guid>
      <description>&lt;p&gt;Programming is a way to instruct the computer to perform diverse tasks.&lt;/p&gt;

&lt;p&gt;You may ask, why do we even need programming?&lt;br&gt;
Why not directly do something with the hardware and stuff.&lt;/p&gt;

&lt;p&gt;You see, computers only understand Binary that is 0's and 1's.&lt;br&gt;
Now, why Binary? &lt;br&gt;
Computers built with electronic components transmits data in the form of ON or OFF, hence binary. (in simple terms)&lt;/p&gt;

&lt;p&gt;Coming back to the question, why do we even need programming?&lt;br&gt;
Imagine writing instructions to the computers just using 0's and 1's.&lt;br&gt;
Don't you think it would be tiresome work to do?&lt;/p&gt;

&lt;p&gt;See, this is why we need programming languages.&lt;br&gt;
Programming languages allow us to write programs and perform tasks and also makes the programs human readable.&lt;/p&gt;

&lt;p&gt;We, humans, communicate with each other using languages like Tamil, Hindi, English, French or any other language.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jO6BWuZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqrrnlawlr17u5s08u3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jO6BWuZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqrrnlawlr17u5s08u3.png" alt="Human Language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, we use programming languages like Python, Java, C++ or others to communicate with the computer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M7eoAO3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeeb7i5y7wzrrat77z1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7eoAO3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeeb7i5y7wzrrat77z1s.png" alt="Programming Language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the tutorial version of this blog at Kunal Kushwaha's channel:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wn49bJOYAZM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Kunal is creating an amazing course on "Java + Interview Preparation + Competitive programming" for FREE on YouTube.&lt;/p&gt;

&lt;p&gt;Here's the GitHub Repository for detailed curriculum and resources: &lt;a href="https://github.com/kunal-kushwaha/DSA-Bootcamp-Java"&gt;https://github.com/kunal-kushwaha/DSA-Bootcamp-Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the YouTube playlist: &lt;a href="https://youtube.com/playlist?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ"&gt;https://youtube.com/playlist?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, do check it out.&lt;/p&gt;

&lt;p&gt;Feel free to share if you found this useful 😃.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Ultimate cloud pricing comparison: AWS vs. Azure vs. Google Cloud in 2021</title>
      <author>CAST AI</author>
      <pubDate>Thu, 26 Aug 2021 13:23:11 +0000</pubDate>
      <link>https://dev.to/castai/ultimate-cloud-pricing-comparison-aws-vs-azure-vs-google-cloud-in-2021-khj</link>
      <guid>https://dev.to/castai/ultimate-cloud-pricing-comparison-aws-vs-azure-vs-google-cloud-in-2021-khj</guid>
      <description>&lt;p&gt;How can you tell which cloud provider is the right one for your business?&lt;strong&gt; And which one isn’t going to break your wallet?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the surface, AWS, Microsoft Azure, and Google Cloud are pretty similar. They all offer flexible compute, storage, and networking combined with everything engineers love about the cloud: self-service, instant provisioning, and autoscaling. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But cloud providers differ in key areas that have a massive impact on your cloud bill.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Most of your bill consists of &lt;strong&gt;compute resources that represent even 75%-80% of a company’s cloud spen&lt;/strong&gt;d. That’s why I will focus on comparing the pricing of Instances and Virtual Machines across AWS, Azure, and Google Cloud to show you the nuanced differences between these providers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read this guide to learn which provider offers the most cost-effective services in 2021:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#topstrengthsofawsazureandgooglecloud"&gt;Top strengths of AWS, Azure, and Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#billinginawsazureandgooglecloud"&gt;Billing in AWS vs. Azure vs. Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#biggestcloudcostdriver"&gt;Let’s take a look at the biggest cost driver: compute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparingondemandpricing"&gt;Comparing On-Demand pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparingpricingwithupfrontcommitment"&gt;Comparing discounted pricing with 1-year upfront commitment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howcpuburstingdrivescostsdown"&gt;How CPU bursting can help drive your costs down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparingspotinstances"&gt;Comparing Spot Instances/Preemptible VMs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optimizingcloudcosts"&gt;Optimizing cloud costs is a point in time exercise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whyyouneedautomation"&gt;&lt;strong&gt;That’s exactly the reason why you need automation to optimize cloud costs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="topstrengthsofawsazureandgooglecloud"&gt;Cloud landscape overview: Top strengths of AWS, Azure, and Google Cloud&lt;/h2&gt;

&lt;p&gt;Selecting one vendor over another comes down to knowing what your teams, applications, and workloads need. You need to have a full understanding of your requirements before setting out to explore the cloud landscape.&lt;/p&gt;

&lt;p&gt;Next, it’s time to examine each provider separately. The thing is, AWS, Azure, and Google Cloud come with different strengths and weaknesses.&lt;/p&gt;

&lt;h3&gt;AWS is the leader for a good reason&lt;/h3&gt;

&lt;p&gt;Let’s start with AWS that currently holds the largest chunk of the cloud market. Its undeniable strength is &lt;strong&gt;the sheer breadth and depth of its services&lt;/strong&gt;. You can choose from &lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/" rel="noreferrer noopener"&gt;almost 400 instance types&lt;/a&gt; and pair them with a rich array of tools for databases, analytics, management, IoT, security, and enterprise applications. This list could go on almost forever.&lt;/p&gt;

&lt;p&gt;AWS is the winner when it comes to developer functionality thanks to the breadth of its services and ability to translate this scale into cost benefits. Still, this &lt;strong&gt;complexity comes at a cost&lt;/strong&gt;. One of the common pricing challenges companies face is understating AWS metrics and estimating the impact of architectural decisions on costs.&lt;/p&gt;

&lt;h3&gt;Azure is the go-to choice for enterprises&lt;/h3&gt;

&lt;p&gt;Microsoft Azure is quite a &lt;strong&gt;popular choice with C-level executives&lt;/strong&gt;. That’s usually because they have a long-standing relationship with the provider and meeting all their enterprise computing needs in one place makes sense. &lt;/p&gt;

&lt;p&gt;The combination of Azure, Office 365, and Teams makes a safe option for enterprises looking to benefit from enterprise software all the way down to cloud computing resources with a single handshake.&lt;/p&gt;

&lt;h3&gt;Google Cloud taps into the power of open source&lt;/h3&gt;

&lt;p&gt;All three major cloud vendors are strong in machine learning capabilities. But Google stands out among them thanks to its endless well of internal research and expertise - basically, the magic powering the search engine giant throughout the years.&lt;/p&gt;

&lt;p&gt;What makes Google different is its role in &lt;strong&gt;developing various open source technologies&lt;/strong&gt;. I’m talking especially about containers and Google’s central role in building Kubernetes for orchestration and the Istio service mesh, today practically industry-standard technologies.&lt;/p&gt;

&lt;p&gt;Google’s culture of innovation lends itself really to startups and companies that prioritize these approaches and technologies. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Naturally, companies often end up using different cloud providers for different parts of their operations or use cases. This &lt;a href="https://cast.ai/blog/how-to-spin-a-multi-cloud-application-with-cast-ai/"&gt;multi cloud approach&lt;/a&gt; lets them bring the best of all the (cloud) worlds together under one roof. &lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="billinginawsazureandgooglecloud"&gt;Billing in AWS vs. Azure vs. Google Cloud&lt;/h2&gt;

&lt;p&gt;Per second billing is now something all the three cloud vendors offer. AWS introduced it in 2017 for EC2 Linux-based instances and EBS volumes at first - but today, it applies to many other services. Note that in AWS, per-second billing works with the minimum 60-second limit. &lt;/p&gt;

&lt;p&gt;Azure allows per-second charges as well, but this billing model isn’t available for all instances - mostly container-based instances. &lt;/p&gt;

&lt;p&gt;Google Cloud followed AWS in the introduction of per-second billing and now offers it for more than just instances based on Linux. In Google, this form of billing applies to all VM-based instances.&lt;/p&gt;

&lt;h2 id="biggestcloudcostdriver"&gt;Let’s take a look at the biggest cost driver: compute &lt;/h2&gt;

&lt;p&gt;Compute is what makes your cloud bill so high. This isn’t to say that other services don’t contribute to it at all. Storage can get quite expensive and moving data around might result in high egress costs. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;But it’s compute that comes with the biggest price tag - and greatest opportunity for cost optimization.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here’s a case study that shows the &lt;strong&gt;incredible impact optimizing compute costs can have on a company’s bottom line&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;How Netflix slashed its cloud costs by picking different machines&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To deliver its video streaming services across 190 countries, &lt;strong&gt;Netflix&lt;/strong&gt; uses Amazon EC2 instances and Kinesis data streams. Recently, Netflix turned to the Graviton2-based EC2 instances. Switching to these brand-new machines helped Netflix improve performance by 50% and cut costs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before, the company used m4.16xlarge instances that cost $3.2/hour. Now, Netflix uses m6g.16xlarge that costs $2.464/hour, and m6g.xlarge priced at only $0.0154/hour. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can only imagine the cost savings Netflix enjoyed on its cloud billing. This example clearly shows how a minor difference in instance pricing can save you thousands of dollars. &lt;/p&gt;

&lt;h2&gt;Comparing cloud pricing - our example setup&lt;/h2&gt;

&lt;p&gt;To understand the pricing differences better, we’re going to compare instances and VMs within one region and across the same operating system.&lt;/p&gt;

&lt;p&gt;This is our example setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Region: US West - Los Angeles (US West in Azure, US West 2 in Google Cloud)&lt;/li&gt;
&lt;li&gt;Operating System: Linux &lt;/li&gt;
&lt;li&gt;vCPUs: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Types of instances/VMs we will analyze:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General purpose&lt;/li&gt;
&lt;li&gt;Compute optimized&lt;/li&gt;
&lt;li&gt;Memory optimized&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our comparison, we chose instances with similar RAM and 4 vCPUs. The obvious exception is Google Cloud’s memory-optimized instance that starts at 40 vCPUs.&lt;/p&gt;

&lt;p&gt;Here are the instances/VMs we selected for our cloud pricing comparison:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPvM5erY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar9d32f7rr6p5u7gdrpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPvM5erY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar9d32f7rr6p5u7gdrpm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="comparingondemandpricing"&gt;AWS vs. Azure vs. Google Cloud: Comparing On-Demand pricing &lt;/h2&gt;

&lt;p&gt;Here is the hourly On-Demand pricing of each of those instance-type scenarios across AWS, Azure, and Google Cloud.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Cloud pricing based on On-Demand rates&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlDP3qk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mlpemeb3c52yiknc2nm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlDP3qk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mlpemeb3c52yiknc2nm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: In the above table, red marks the highest price and green the lowest price for a given instance type. &lt;/em&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As you can see, AWS and Azure offer quite a similar pricing for all these three instance types. &lt;/li&gt;
&lt;li&gt;For compute optimized instances, Google Cloud has the highest pricing due to its scalable processors and all-core performance. &lt;/li&gt;
&lt;li&gt;The cost of Google Cloud for memory optimized instances is way higher because it doesn’t run on 4 vCPUs, but 40vCPUs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;A note about chips and processors &lt;/h3&gt;

&lt;p&gt;Providers roll out instances on different computers and the chips in them have different performance characteristics. So, you might end up with an instance type that has strong performance your teams don’t actually need, and you’ll have no idea about this.&lt;/p&gt;

&lt;p&gt;Reasoning about this on your own is challenging and the best way to see what you’re really paying for is via benchmarking. The idea here is to drop the same workload on each machine and check its performance characteristics. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You might discover something interesting, just like we did:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This chart shows CPU operation in AWS (t2.2xlarge with 8 virtual cores) at different times after several idle CPU periods. Would you expect such unpredictable CPU behavior within a single cloud provider?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8CYrm5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/02/graph-3-1024x443.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8CYrm5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/02/graph-3-1024x443.png" alt="AWS CPU behavior"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: CAST AI&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://resources.cockroachlabs.com/guides/2021-cloud-report"&gt;2021 Cloud Report from CockroachLabs&lt;/a&gt; used the same method to evaluate 54 machines across AWS, Azure, and Google Cloud. They ran over 1000 microbenchmark tests to evaluate metrics like CPU, network, storage, and TPC-C performance.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One of their overall conclusions was that Google beats AWS and Azure on performance. I&lt;/strong&gt;t achieved the best single-core CPU performance and offered the greatest throughput at every level. Google’s machines with general purpose disks achieved the highest level of raw throughput but turned out to be the least cost-efficient option.&lt;/p&gt;

&lt;h2 id="comparingpricingwithupfrontcommitment"&gt;AWS vs. Azure vs. Google Cloud: Comparing discounted pricing with 1-year upfront commitment&lt;/h2&gt;

&lt;p&gt;All three providers offer discounts if you commit to using them for at least 1 year. The pricing model is called Reserved Instances/Savings Plans in AWS, Reserved Savings in Azure, and Commitment Price in Google Cloud. &lt;/p&gt;

&lt;p&gt;These discounts incentivize businesses to commit to a specific level of usage for a fixed period in exchange for a discounted rate on some (not all) instances and VMs. &lt;/p&gt;

&lt;p&gt;To compare the discounted pricing among AWS, Azure, and Google Cloud, we examined a one-year commitment period without upfront cost -&lt;strong&gt; but this time, in another region: US East - Northern Virginia.   &lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Cloud pricing with 1-year commitment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fUsY6aTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5120uiz4b6dpvzfanc9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fUsY6aTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5120uiz4b6dpvzfanc9m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaways: &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The general-purpose instances with a 1-year commitment are almost similar in AWS and Azure.&lt;/li&gt;
&lt;li&gt;AWS wins in the compute optimized category, even if Azure and Google apply some pretty big discounts.&lt;/li&gt;
&lt;li&gt;Azure offers the cheapest alternative among memory optimized instances.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;&lt;p&gt;Not sure how Reserved Instances work and whether they really translate into discounts? Read this: &lt;a href="https://cast.ai/blog/do-aws-reserved-instances-and-savings-plans-really-reduce-costs/"&gt;Do AWS Reserved Instances and Savings Plans really reduce costs?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="howcpuburstingdrivescostsdown"&gt;How CPU bursting can help drive your costs down&lt;/h2&gt;

&lt;p&gt;AWS, Azure, and Google Cloud all offer burstable performance instances. These instances provide you a baseline level of CPU performance, with the opportunity to burst to a higher level whenever your workload requires that.&lt;/p&gt;

&lt;p&gt;Burstable performance instances are &lt;strong&gt;a good pick for low-latency interactive applications, microservices, small and medium databases, or product prototypes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But to make the most of them, you need to keep a close eye on the credits you collect that enable bursting. For example, if you restart a T2 instance in AWS, you’re going to lose all the credits. Restarting a T3 or T4 instance means keeping credits for another 7 days and then losing them. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Our research into AWS burstable instances showed that if you load your instance for 4 hours or more per day on average, you’re actually better off with a non-burstable one. But if you run an e-commerce business that gets a large stream of visitors once in a while, it’s a good match.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="comparingspotinstances"&gt;AWS vs. Azure vs. Google Cloud: Comparing Spot Instances/Preemptible VMs&lt;/h2&gt;

&lt;p&gt;Here’s another way to reduce your cloud bill - take advantage of capacity that’s currently not being used by any businesses. Cloud providers sell this excess capacity at incredibly high discounts - while AWS Spot Instances offer up to 90% off the On-Demand rates, Preemptible VMs in Google can be even 80% cheaper than regular VMs.&lt;/p&gt;

&lt;p&gt;Here’s a quick overview of the potential savings you can get for these instances in the US East - Northern Virginia region:&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Cloud pricing with Spot Instances/Preemptible VMs&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6757StOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vohhztvglaulf1h6z4ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6757StOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vohhztvglaulf1h6z4ed.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, all providers offer substantial discounts on these instances. &lt;/p&gt;

&lt;p&gt;But to take advantage of these savings, &lt;strong&gt;you need to make sure that your applications can handle interruptions&lt;/strong&gt;. How? Here’s a step by step guide: &lt;a href="https://cast.ai/blog/how-to-reduce-cloud-costs-by-90-spot-instances-and-how-to-use-them/"&gt;Spot Instances: How to reduce AWS, Azure, and GCP costs by 90%&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="optimizingcloudcosts"&gt;Optimizing cloud costs is a point in time exercise&lt;/h2&gt;

&lt;p&gt;By now, you’ve learned the basics of calculating compute charges. But Spot instance prices don’t always stay the same. In fact, they might change from one second to the next.&lt;/p&gt;

&lt;p&gt;Take a look at this example:&lt;/p&gt;

&lt;p&gt;At CAST AI, we were running an application on a mix of AWS On-Demand instances and Spot Instances. Then we used our own platform to analyze our setup. The platform looked for the most cost-effective Spot Instance alternatives for a machine with 8 CPUs and 16 GB.&lt;/p&gt;

&lt;p&gt;CAST AI suggested that we run our workload on an instance called INF1. But wait, &lt;strong&gt;why would we need a powerful GPU instance meant for machine learning applications?&lt;/strong&gt; It’s a supercomputer that usually costs a lot of money.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88TB_x2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc54dvwdriuu3p6s3ao2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88TB_x2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc54dvwdriuu3p6s3ao2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, why did CAST AI pick it? We checked the pricing. As it turns out, at that time INF1 just happened to be cheaper than the usual general purpose instances we used. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We would have never guessed to look for Spot Instances in this category. As a result, we’d miss out on this incredible gem.&lt;/p&gt;

&lt;h2 id="whyyouneedautomation"&gt;That’s exactly the reason why you need automation to optimize cloud costs&lt;/h2&gt;

&lt;p&gt;Even if you have DevOps or FinOps specialists managing your cloud expenses, &lt;strong&gt;you're probably spending twice as much as you should&lt;/strong&gt;. It's high time you took control of your cloud bill with the help of automation and AI.&lt;/p&gt;

&lt;p&gt;CAST AI is a great place to start your path towards automated optimization if your teams work with Kubernetes. The solution automatically creates and implements cost-cutting tactics for guaranteed savings without any manual and repetitive work for your engineers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://cast.ai/get-a-demo"&gt;Schedule a demo&lt;/a&gt; to learn how automation can reduce your cloud bill to the minimum regardless of the cloud provider you are working with.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>googlecloud</category>
      <category>azure</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>What would the ideal web framework look like?</title>
      <author>Siddharth</author>
      <pubDate>Thu, 26 Aug 2021 13:22:53 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/what-would-the-ideal-web-framework-look-like-p5m</link>
      <guid>https://dev.to/siddharthshyniben/what-would-the-ideal-web-framework-look-like-p5m</guid>
      <description>&lt;p&gt;It seems like every week there is another ground-breaking new web framework. Some of them are interpreted, some compiled. Some of them are based on HTML tags, some component driven, and so on. &lt;/p&gt;

&lt;p&gt;So, what would the "ideal" framework look like, maybe using ideas of existing frameworks? Of course, no framework is perfect for use everywhere, but what would come close?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Next.js!</title>
      <author>Babilah</author>
      <pubDate>Thu, 26 Aug 2021 12:58:09 +0000</pubDate>
      <link>https://dev.to/blessing/next-js-3pa3</link>
      <guid>https://dev.to/blessing/next-js-3pa3</guid>
      <description>&lt;p&gt;Hey Folks! I hope you are doing great.&lt;/p&gt;

&lt;p&gt;In this post we will be learning next.js and why you should use it for your next project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is next.js?
&lt;/h3&gt;

&lt;p&gt;The react framework for production. &lt;a href="https://nextjs.org/"&gt;Next.js org&lt;/a&gt;&lt;br&gt;
Next.js is a framework built on the react library. It helps you create server side rendering and static applications which improves user experience and SEO.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-nextjs"&gt;
  &lt;/a&gt;
  Why Next.js?
&lt;/h3&gt;

&lt;p&gt;Next.js simplifies the process of building a react application. I'll give you 10 reasons why Next.Js should be used for your next project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Image optimization&lt;/strong&gt; &lt;br&gt;
Next.js has its own image component which helps in resizing, optimizing and scaling images. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fast Refresh&lt;/strong&gt; &lt;br&gt;
Any change or edit you make in your react component is instantly reflected in your browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Zero Config&lt;/strong&gt; &lt;br&gt;
No or little configuration is needed when creating or building your app. Automatic compilation and building.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; &lt;br&gt;
It supports various authentication patterns each designed for different use cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;br&gt;
Next.js has a file base routing system. In a typical react app you will need to install a third party library to help with routing in your app but with next.js it is made available for you with no config needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;API Routes&lt;/strong&gt;*&lt;br&gt;
You can create API endpoints inside your next.js application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CSS Support&lt;/strong&gt; &lt;br&gt;
Next.js by default is styled using CSS modules which saves you the time of choosing a CSS library. You are allowed to use any CSS framework like tailwind CSS or CSS in JS library like styled components. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server Side Rendering(SSR) and Static Site Generation(SSG)&lt;/strong&gt;&lt;br&gt;
Pre-renders your pages at build time(SSG) or when the page is requested(SSR).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Splitting&lt;/strong&gt;&lt;br&gt;
Next.js automatically breaks your code to speed up page loading. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TypeScript Support&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#websites-that-use-nextjs"&gt;
  &lt;/a&gt;
  Websites that use Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://coinmarketcap.com/"&gt;coinmarketcap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.binance.com/"&gt;Binance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="//tiktok.com"&gt;TikTok&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="//dcc.godaddy.com"&gt;GoDaddy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;All the features above makes next.js an amazing framework to work with. It provides you with the best developer experience.&lt;br&gt;
If you know other features of next.js or websites that use next.js then let me know about them in the comments.&lt;br&gt;
Thanks!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
  </channel>
</rss>
