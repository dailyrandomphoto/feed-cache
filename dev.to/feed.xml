<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Python-Basic course: Day 8, Unicode in Python</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 01 Jul 2021 05:07:07 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-8-unicode-in-python-4pdc</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-8-unicode-in-python-4pdc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-till-now-we-have-dealt-enough-with-numbers-now-is-the-time-to-add-unicode-to-our-arsenal"&gt;
  &lt;/a&gt;
  🤟 Welcome! Till now, we have dealt enough with numbers. Now is the time to add Unicode to our arsenal.😎
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Unicode in Python&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python and Java support Unicode characters.😃 The &lt;code&gt;ord()&lt;/code&gt; method converts a character into its Unicode code. It takes one argument: a string containing a single Unicode character. In other words, given string of length 1, the function returns an integer giving it's corresponding Unicode value. For example, &lt;code&gt;ord('a')&lt;/code&gt; returns the integer 97, &lt;code&gt;ord('€')&lt;/code&gt; (Euro sign) returns 8364.&lt;br&gt;
Here is a sample which takes 10 characters and prints their Unicode values-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="c1"&gt;#same as (0,10)
&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter any character "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any character Z
90
Please enter any character e
101
Please enter any character p
112
Please enter any character h
104
Please enter any character y
121
Please enter any character r
114
Please enter any character 1
49
Please enter any character 2
50
Please enter any character #
35
Please enter any character $
36
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out with your names too!!!&lt;/p&gt;




&lt;p&gt;The &lt;code&gt;chr()&lt;/code&gt; function does just the opposite as the &lt;code&gt;ord()&lt;/code&gt; function. It converts integers into Unicode characters. Example if we input 97, the output will be 'a', and &lt;code&gt;chr(€)=8364&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is a sample program print Unicode characters-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter lower limit "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter upper limit "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us input some values. OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter lower limit 33
Please enter upper limit 37
33   !
34   "
35   #
36   $
Please enter lower limit 57
Please enter upper limit 62
57   9
58   :
59   ;
60   &amp;lt;
61   =
Please enter lower limit 85
Please enter upper limit 89
85   U
86   V
87   W
88   X
Please enter lower limit 97
Please enter upper limit 103
97   a
98   b
99   c
100   d
101   e
102   f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is another sample to prove that &lt;code&gt;ord()&lt;/code&gt; and &lt;code&gt;chr()&lt;/code&gt; are absolutely opposite of each other&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Istrue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;#Istrue is a boolean value with value default True
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
     &lt;span class="n"&gt;Istrue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Istrue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exercise 1) If we interchange &lt;code&gt;ord()&lt;/code&gt; and &lt;code&gt;chr()&lt;/code&gt;, will the program still work? &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/e3b422f89dca0694d7376aebc2a222675515f4c5/Basic/Day%208/Exercise%20solutions/Exercise%201.md"&gt;Answer: NO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Write a program to give the following output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any capital letter G
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/66648cf59324f2510524ca855e06084df6484bf0/Basic/Day%208/Exercise%20solutions/Exercise%202.py"&gt;Answer here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Modify the above program slightly to give the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any capital letter G
A 
A B 
A B C 
A B C D 
A B C D E 
A B C D E F 
A B C D E F G 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/6e4ee4362ba48198d34ef068da0b9105dfb55c93/Basic/Day%208/Exercise%20solutions/Exercise%203.py"&gt;Answer here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Modify the above program to give the following output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any capital letter K
A 
B A 
C B A 
D C B A 
E D C B A 
F E D C B A 
G F E D C B A 
H G F E D C B A 
I H G F E D C B A 
J I H G F E D C B A 
K J I H G F E D C B A 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/d081c79ed7bcb1393777e367c944524054233621/Basic/Day%208/Exercise%20solutions/Exercise%204.py"&gt;Answer here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The programs may look repetitive, but trust me, they provide a good practice for practicing nested for loops.&lt;/p&gt;




&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;

</description>
      <category>python</category>
      <category>learningpython</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Easily Update npm Packages Without the Fear of Breaking the Application</title>
      <author>Yogesh Chavan</author>
      <pubDate>Thu, 01 Jul 2021 05:06:19 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/easily-update-npm-packages-without-the-fear-of-breaking-the-application-3670</link>
      <guid>https://dev.to/myogeshchavan97/easily-update-npm-packages-without-the-fear-of-breaking-the-application-3670</guid>
      <description>&lt;p&gt;In this article, we'll explore how you can easily update npm packages used in your application without worrying about breaking the application functionality.&lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semantic-versioning"&gt;
  &lt;/a&gt;
  Semantic Versioning
&lt;/h2&gt;

&lt;p&gt;Semantic versioning is such an important thing that, every developer needs to understand it whether you are a Node, React or Angular developer.&lt;/p&gt;

&lt;p&gt;It’s also one of the frequently asked interview questions.&lt;/p&gt;

&lt;p&gt;It defines how to manage the dependencies of npm packages that we install.&lt;/p&gt;

&lt;p&gt;So let's understand some basics.&lt;/p&gt;

&lt;p&gt;When we create any new Node or React project from scratch we execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;

&lt;span class="nx"&gt;OR&lt;/span&gt; 

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a basic &lt;code&gt;package.json&lt;/code&gt; file where we can manage the dependencies of packages.&lt;/p&gt;

&lt;p&gt;Normally, the &lt;code&gt;package.json&lt;/code&gt; will look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTCSOt5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438862534/A81yJK88J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTCSOt5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438862534/A81yJK88J.png" alt="image_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, &lt;code&gt;package.json&lt;/code&gt; has a specified version property that starts with 1.0.0 for a new project.&lt;/p&gt;

&lt;p&gt;Let’s say we install the specific version of the &lt;code&gt;express&lt;/code&gt; package using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;17.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will get added to the dependencies section of &lt;code&gt;package.json&lt;/code&gt; as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.17.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, you will see that a new &lt;code&gt;package-lock.json&lt;/code&gt; file will also be created. It's a very important file that contains the exact version and download URL of the main package and its dependent packages installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should never edit or delete the &lt;code&gt;package-lock.json&lt;/code&gt;. It will be updated automatically when packages are installed or removed.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-semantic-versioning"&gt;
  &lt;/a&gt;
  Understanding Semantic Versioning
&lt;/h2&gt;

&lt;p&gt;As you have seen, the dependencies mentioned in &lt;code&gt;package.json&lt;/code&gt; file is an object with key-value pairs.&lt;/p&gt;

&lt;p&gt;The value is a combination of 3 digits separated by the dot operator. Let's say the version is a.b.c.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First value (&lt;code&gt;a&lt;/code&gt; in &lt;code&gt;a.b.c&lt;/code&gt;) specifies the major version of the package — It means this version has Major code changes and it might contain breaking API changes.&lt;/li&gt;
&lt;li&gt;Second value (&lt;code&gt;b&lt;/code&gt; in &lt;code&gt;a.b.c&lt;/code&gt;) specifies the minor version which contains minor changes but will not contain breaking API changes.&lt;/li&gt;
&lt;li&gt;Third value (&lt;code&gt;c&lt;/code&gt; in &lt;code&gt;a.b.c&lt;/code&gt;) specifies the patch version which usually contains bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are creating your own npm packages, you should also follow these version rules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If there is a major change in the package, increment the 1st digit of the version property in &lt;code&gt;package.json&lt;/code&gt; by one while publishing the package to the npm repository. &lt;/p&gt;

&lt;p&gt;For minor changes increment the second digit and for bug fixes increment the third digit value by one.&lt;/p&gt;

&lt;p&gt;You can also notice that there is a caret symbol (^) just before the version number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^3.17.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two mostly used symbols that have specific meanings. Let’s understand them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;^ : This symbol means when we want to update all the packages mentioned in &lt;code&gt;package.json&lt;/code&gt;, using &lt;code&gt;npm update&lt;/code&gt; command, will update only patch and minor released version. So if your current version is 3.16.1 and there is a minor version released so the package will be updated to 3.17.1. If there is only a patch version released then it will be updated to the latest available patch version like 3.16.3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that, If there is a ^ symbol before the version number, the package will never be updated to a major version if you run &lt;code&gt;npm update&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you want to installl the major available version you can specify that version using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;17.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to install the latest available version of the package execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;~ : This symbol means the package will be updated to only patch releases i.e only the last digit so from 4.16.1 to 4.16.2 or 4.16.3 but not 4.17.1 or 5.16.1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install only those versions which are provided by that npm package (express package in our case).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UCVlRvyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438873230/WVM35qIHT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UCVlRvyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438873230/WVM35qIHT.png" alt="image_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you go to the npm repository of the express package &lt;a href="https://www.npmjs.com/package/express"&gt;HERE&lt;/a&gt;, you can see all the versions of the package If you click on the &lt;code&gt;264 Versions&lt;/code&gt; tab. In this case, 264 versions as of today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwuu1w5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438890137/mSC-CJyDz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwuu1w5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438890137/mSC-CJyDz.png" alt="image_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-useful-commands"&gt;
  &lt;/a&gt;
  Some useful commands
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you want to see the current and latest versions of all the packages from &lt;code&gt;package.json&lt;/code&gt;, you can execute the &lt;code&gt;npm outdated&lt;/code&gt; command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOISNbI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438899834/jPhNMkFx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOISNbI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438899834/jPhNMkFx4.png" alt="image_4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get a list of all the globally installed packages, execute the following command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmUb6tkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438905479/xAKY66Vn_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmUb6tkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438905479/xAKY66Vn_.png" alt="image_5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get the report of all the vulnerable packages in your project and instructions on how to fix them, execute the &lt;code&gt;npm audit&lt;/code&gt; command. If you are on Mac, you may need to add a sudo in front of it like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;audit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This command will list out all the vulnerable packages, link with more information about the vulnerability, its severity (low, medium or high) and command that need to be executed to fix the vulnerability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should run the &lt;code&gt;npm audit&lt;/code&gt; command for your project once in a while, to see if there are any vulnerabilities reported recently and fix them whenever required to keep the packages up-to-date for the security of your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Clean Code</title>
      <author>Clean Code Studio</author>
      <pubDate>Thu, 01 Jul 2021 04:57:01 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/clean-code-3g8k</link>
      <guid>https://dev.to/cleancodestudio/clean-code-3g8k</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Innovation starts with simplification, we can't create if we're always fixing.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#why-simply-designed-clean-code"&gt;
  &lt;/a&gt;
  Why Simply Designed Clean Code?
&lt;/h1&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Why battle against technical debt?&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Why invest into refactoring?&lt;/em&gt; &lt;br&gt;
&lt;em&gt;Why fight for Clean Code?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;To &lt;strong&gt;simplify&lt;/strong&gt; lives, save money, and improve the world through innovative invention.&lt;/p&gt;

&lt;p&gt;Clean Code is &lt;strong&gt;DRY&lt;/strong&gt;, &lt;strong&gt;minimalistic&lt;/strong&gt;, &lt;strong&gt;tested&lt;/strong&gt;, &amp;amp; &lt;strong&gt;simple&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#features-of-clean-code"&gt;
  &lt;/a&gt;
  Features of Clean Code
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#clean-code-doesnt-repeat-itself"&gt;
  &lt;/a&gt;
  Clean Code doesn't repeat itself
&lt;/h3&gt;

&lt;p&gt;Clean code doesn't repeat itself, it's DRY (&lt;strong&gt;D&lt;/strong&gt;o not &lt;strong&gt;R&lt;/strong&gt;epeat &lt;strong&gt;Y&lt;/strong&gt;ourself). When we duplicated code, we have required the developer whom must make a change to one piece of code to be required to make a change to all duplicated pieces of that same code. &lt;/p&gt;

&lt;p&gt;Cognitive load, technical debt, visual debt, &amp;amp; bugs increase.&lt;/p&gt;

&lt;p&gt;Progress and passion decrease. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#clean-code-is-minimalistic"&gt;
  &lt;/a&gt;
  Clean Code is minimalistic
&lt;/h3&gt;

&lt;p&gt;More code is more stuff that each of those things making up all of that stuff depends on. More than that developers are now required to keep all of that extra stuff in their head and if it's not already in their head they must go through all of the extra fluff to understand what's going on. &lt;/p&gt;

&lt;p&gt;Less code is less buggy.&lt;br&gt;
Less code is less onboarding.&lt;br&gt;
Less code is less maintenance.&lt;/p&gt;

&lt;p&gt;Code in of itself is liability. You are liable to maintain, update, refactor, understand, teach, and utilize code. &lt;/p&gt;

&lt;p&gt;Simply put, &lt;strong&gt;less code&lt;/strong&gt; is &lt;strong&gt;less liability&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#clean-code-passes-all-tests"&gt;
  &lt;/a&gt;
  Clean Code passes all tests
&lt;/h3&gt;

&lt;p&gt;90% of all of your tests passed ~ ouch. This is not clean code. You know you messed up if your not passing all of your tests. You also know you messed up when your test coverage is 0%. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clean Code is tested thoroughly and passes those tests with flying colors&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#clean-code-simplifies"&gt;
  &lt;/a&gt;
  Clean Code simplifies
&lt;/h3&gt;

&lt;p&gt;Clean code is easier to understand, simpler to utilize, cheaper to maintain, and effective towards the goals in which it is created towards. &lt;/p&gt;

&lt;p&gt;Clean Code Studio&lt;br&gt;
&lt;a href="https://cleancode.studio"&gt;https://cleancode.studio&lt;/a&gt;&lt;br&gt;
Clean Code Clean Life ~ Simplify!&lt;br&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;https://youtube.com/c/cleancodestudio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cleancode</category>
      <category>refactoring</category>
      <category>technicaldebt</category>
      <category>simpledesign</category>
    </item>
    <item>
      <title>Modal File Manager: Update and Extensions</title>
      <author>Richard Guay</author>
      <pubDate>Thu, 01 Jul 2021 04:34:19 +0000</pubDate>
      <link>https://dev.to/raguay/modal-file-manager-update-and-extensions-2kb5</link>
      <guid>https://dev.to/raguay/modal-file-manager-update-and-extensions-2kb5</guid>
      <description>&lt;p&gt;I recently wrote an update to my &lt;a href="https://github.com/raguay/ModalFileManager"&gt;Modal File Manager project&lt;/a&gt; called &lt;a href="https://blog.customct.com/modal-file-manager-update-and-extensions"&gt;Modal File Manager: Update and Extensions&lt;/a&gt;. It goes into many new features that I've added to the Modal File Manager, how to install the macOS version that I bundled for downloading, and all the themes and extensions that I've created for the Modal File Manager. &lt;/p&gt;

&lt;p&gt;I hope you enjoy this fun little project and decide to help me in the journey to create a very powerful, dual file pane file manager together!&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>nwjs</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Finding element that appears once in an array where other elements appear twice : Leetcode</title>
      <author>Nirmal Krishna</author>
      <pubDate>Thu, 01 Jul 2021 03:56:16 +0000</pubDate>
      <link>https://dev.to/meuequalsd/finding-element-that-appears-once-in-an-array-where-other-elements-appear-twice-n91</link>
      <guid>https://dev.to/meuequalsd/finding-element-that-appears-once-in-an-array-where-other-elements-appear-twice-n91</guid>
      <description>&lt;p&gt;This is an example implementation using hashmap. The input array nums is considered to have only one unique number found once, other numbers occurs &amp;gt; once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ts
function singleNumber(nums: number[]): number {

    const hash = {};

    for(let i = 0; i&amp;lt; nums.length; i++){   
        hash[nums[i]] = hash[nums[i]] ? hash[nums[i]] + 1 : 1
    }

    return Object.keys(hash).filter(k=&amp;gt; hash[k] === 1).map(k=&amp;gt; parseInt(k))[0];

};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>typescript</category>
      <category>arrays</category>
    </item>
    <item>
      <title>Ternary Operator: Better Alternatives</title>
      <author>Dias</author>
      <pubDate>Thu, 01 Jul 2021 03:35:15 +0000</pubDate>
      <link>https://dev.to/saulodias/ternary-operator-better-alternatives-2ind</link>
      <guid>https://dev.to/saulodias/ternary-operator-better-alternatives-2ind</guid>
      <description>&lt;p&gt;The ternary operator is a nice way to write concise value assignments without having to write a more lengthy &lt;code&gt;if/else&lt;/code&gt;.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;valeu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// can be written as this:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However it's easy to misuse the ternary operator for things where simpler operators could often have been a better choice. So here are some alternatives for common mistakes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-truefalse-assignments"&gt;
  &lt;/a&gt;
  Static true/false assignments:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// can be replaced by boolean casting:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// or even&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I prefer the shorter alternative&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nullable-assignment-falsy-case"&gt;
  &lt;/a&gt;
  Nullable assignment (falsy case)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// can be written like this&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: The code above will return null as long as &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; are &lt;em&gt;falsy&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#nullable-assignment-nullish-case"&gt;
  &lt;/a&gt;
  Nullable assignment (nullish case)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// can be written like this:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;See: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;Nullish coalescing operator (??)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By the way...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// can be simplified as:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#checking-for-undefined"&gt;
  &lt;/a&gt;
  Checking for undefined
&lt;/h3&gt;

&lt;p&gt;I have  seen this a few times. I promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// which can simply be:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// or in more recent implementations&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;See: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"&gt;Optional chaining (?.) [elvis operator]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-ternary-operator-with-disability"&gt;
  &lt;/a&gt;
  The ternary operator with disability
&lt;/h3&gt;

&lt;p&gt;This is my favorite one, and also an honest mistake. Some people get overexcited with the simplicity of the ternary operator and might think it is just a "shorter" &lt;code&gt;if/else&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// when they meant &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The single-line &lt;code&gt;if&lt;/code&gt; statement is simple and clean enough for that purpose, and we know &lt;code&gt;test ? value = 8&lt;/code&gt; will not work. The ternary operator needs to have an &lt;code&gt;else&lt;/code&gt; return value. If you don't need it, use a single-line &lt;code&gt;if&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up...
&lt;/h3&gt;

&lt;p&gt;In a nutshell, if your ternary operator does not have a structure like the one below, you should raise an eyebrow and check if there really aren't other simpler alternatives.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;otherValue&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;anotherValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you think of other examples you have seen of poor use of the ternary operator? Please let me know in the comments below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>cleancode</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to Make Mobile Apps More Effective Through the Use of AI and Machine Learning</title>
      <author>Le Truong</author>
      <pubDate>Thu, 01 Jul 2021 03:34:57 +0000</pubDate>
      <link>https://dev.to/letruong/how-to-make-mobile-apps-more-effective-through-the-use-of-ai-and-machine-learning-26dn</link>
      <guid>https://dev.to/letruong/how-to-make-mobile-apps-more-effective-through-the-use-of-ai-and-machine-learning-26dn</guid>
      <description>&lt;p&gt;AI enables better decision-making, while machine learning allows the system to learn new things from the data.&lt;/p&gt;

&lt;p&gt;Everybody appreciates simplicity, comfort, and ease of living. However, machines that understand human behavior are now available, making daily life more accessible than ever imagined. The industry is undergoing a revolution due to machine learning (ML) and artificial intelligence (AI). These technologies are intended to alter how people interact with devices and conduct business fundamentally.&lt;/p&gt;

&lt;p&gt;As these technologies advance, they are being adopted by every industry for transformation and business growth.&lt;/p&gt;

&lt;p&gt;Let's examine the role of artificial intelligence and machine learning in existing applications and how to integrate them.&lt;/p&gt;

&lt;p&gt;It has become critical for businesses to develop customized solutions based on individual customer requirements. Understanding customer behavior enables enterprises to provide superior service. And machine learning application development enables this.&lt;/p&gt;

&lt;p&gt;Several notable applications of AI and machine learning in &lt;strong&gt;&lt;a href="https://reliasoftware.com/services/mobile-app-development"&gt;mobile application development&lt;/a&gt;&lt;/strong&gt; include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gmail now has Smart Replies.&lt;/li&gt;
&lt;li&gt;LinkedIn Assists in Job Matching Pin Interest to Identify Object in Image&lt;/li&gt;
&lt;li&gt;Facebook consists of a feature called Proactive Detection.&lt;/li&gt;
&lt;li&gt;Google Chrome aides in the development of Predictive Search.&lt;/li&gt;
&lt;li&gt;Amazon displays Recommendations based on your search history.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Profitability is critical for any business to thrive. This, however, is only possible if existing users are retained, and new users are acquired. Companies can capitalize on this advantage by incorporating machine learning and artificial intelligence into their mobile applications.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Integrating Machine Learning and Artificial Intelligence into Mobile Applications&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The following are the advantages of machine learning and artificial intelligence-based applications:&lt;/p&gt;

&lt;p&gt;Customizable Advanced Search Improved Security Predicting User Behavior More Relevant Ads&lt;/p&gt;

&lt;p&gt;The following are three critical benefits of incorporating machine learning and artificial intelligence into mobile applications.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Mechanized Reasoning&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Have you ever considered how artificial intelligence can beat a human at chess or how Google Maps and Uber optimize route optimization to get their users to their destination faster? Mechanized reasoning is the answer. This aspect of AI enables computers to use motivation to solve problems.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Customized Recommendation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Whether B2C or retail, every business makes an effort to retain customers and develop new business relationships. This is accomplished by providing users with insights into their subsequent needs. Functionality powered by Artificial Intelligence is possible. Several well-known brands, including Flipkart, Amazon, and Netflix, are reaping the benefits of this.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Behavior&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;User behavior within the app is critical and can assist AI in achieving a new level of security. Even if your data is stolen and someone attempts to conduct online transactions without your knowledge, the artificial intelligence system can anticipate this and immediately stop the trade. In this way, AI protects mobile applications.&lt;/p&gt;

&lt;p&gt;The most critical part of the discussion at this point is how to get started.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;How to Integrate AI and Machine Learning into an App?&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Determine the issue you wish to resolve using AI.&lt;/li&gt;
&lt;li&gt;Recognize your information&lt;/li&gt;
&lt;li&gt;Recognize that utilizing APIs alone would not suffice.&lt;/li&gt;
&lt;li&gt;Determine the metrics by which your AI must operate&lt;/li&gt;
&lt;li&gt;Distribute data scientists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Integrating AI and machine learning into an application necessitates a paradigm shift in the way the application operates. Let us examine how the implementation proceeds.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Determine the issue you wish to resolve using AI&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;There are numerous applications of AI and machine learning in your mobile business. The first step is to identify the primary areas and the issue you wish to resolve. Several examples include recommendation systems, customer service, security systems, and data-driven insights.&lt;/p&gt;

&lt;p&gt;Therefore, determine which component of your application would benefit from this technology. Would this result in a more accurate ETA? And then precisely collect data from that field.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Recognize your information&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Before embarking on AI and machine learning application development, it is necessary to gain a working knowledge of data sources. When acquiring data and enhancing it, it's beneficial first to understand the platforms from which the information can be obtained. Following that, for data refinement, always ensure that the data you wish to feed into your AI module is genuinely informative, unique, and clean.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Recognize that utilizing APIs alone would not suffice&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;When implementing artificial intelligence in a mobile application, keep in mind that the more APIs - Application Programming Interfaces - are used, the more unsound they become. While APIs are insufficient to support a robust, full-fledged AI solution, they are sufficient to transform your app into an AI app. This means that the more intelligent the model, the more effort must be expended on data modeling – a problem that APIs alone cannot solve.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Determine the metrics by which your AI must operate&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Before developing an AI implementation program, it is necessary to determine your specific objective. There is no point in implementing machine learning or artificial intelligence features in your mobile application until you have a method for evaluating their efficacy. This is only possible if you have a firm grasp on the question you want it to answer. Thus, before implementing machine learning or artificial intelligence in your mobile application, it is critical to understand your objectives.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Distribute data scientists&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Finally, and perhaps most importantly, consider hiring a data scientist or contracting with a mobile app development agency that employs data scientists.&lt;/p&gt;

&lt;p&gt;With data scientists, you can outsource everything from management to data refinement. All of the requirements for success in machine learning and artificial intelligence would be met.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;AI and machine learning can benefit your business in a variety of ways. From advanced search to personalization, effective digital marketing, and an understanding of user behavior.&lt;/p&gt;

&lt;p&gt;The points above can undoubtedly assist you in incorporating AI and machine learning into your existing mobile application.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Project 85 of 100 - Dynamic Restaurant Menu in React</title>
      <author>James Hubert</author>
      <pubDate>Thu, 01 Jul 2021 03:19:11 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-85-of-100-dynamic-restaurant-menu-in-react-1g07</link>
      <guid>https://dev.to/jwhubert91/project-85-of-100-dynamic-restaurant-menu-in-react-1g07</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://100-react-projects-day-85-dynamic-restaurant-menu.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-85-dynamic-menu"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is part 5 of 15 in a series on building React projects by John Smilga, covered in &lt;a href="https://www.youtube.com/watch?v=a_7Z7C_JCyo"&gt;this 10 hour video&lt;/a&gt; on Youtube.&lt;/p&gt;

&lt;p&gt;In this little tutorial we built on the skills developed in previous videos in terms of importing data from an external file in the JSON format and iterating over those objects to display components. Those objects contain data for different items a restaurant might have on the menu, and take the following form in this project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;buttermilk pancakes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;breakfast&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;15.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/item-1.jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`I'm baby woke mlkshk wolf bitters live-edge blue bottle, hammock freegan copper mug whatever cold-pressed `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main new skill we learned in this little video was how we might go about filtering the data to dynamically display components based on a user selection. We also dynamically display buttons for each category so that if a new category was listed later, users could see that too.&lt;/p&gt;

&lt;p&gt;The first way John creates the buttons for choosing a category on the menu is totally manual. We hard-code the buttons and then filter the items shown on the page based on which button was pressed. But this doesn't work for dynamic data, where this month you might have lunch specials (for example) and next month you don't.&lt;/p&gt;

&lt;p&gt;To dynamically show buttons for each category listed in the menu data, in our App component we first map over the items in the menu data to return an array of just the categories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;the native Javascript &lt;code&gt;Set&lt;/code&gt; constructor&lt;/a&gt; to create a set, which essentially just takes in an array and returns a new array with any duplicates removed (this is good to know ;) ).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last thing we do is destructure the array returned by the Set constructor because we need to also add in the 'All' category which we want to include in the categories that users can press. It's sort of the default. We do that thusly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;))];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the &lt;code&gt;App&lt;/code&gt; component we create a state variable called &lt;code&gt;categories&lt;/code&gt; and initialize the component with the allCategories array we created above, outside of the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCategories&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allCategories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then create a function in the &lt;code&gt;App&lt;/code&gt; component outside of the return statement that filters the items shown given a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setMenuItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setMenuItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now pass this function to the categories buttons and filter based on whatever string you want to pass in. To do this dynamically, simply build the buttons dynamically and pass the category to each button's onClick method. I do this in a Categories component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;filterItems&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;btn-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; 
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filter-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
        &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;filterItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now any time a new menu item is added that might have a new category, your buttons will already have this functionality built in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like projects like this and want to stay up to date with more, check out my Twitter &lt;a href="https://twitter.com/jwhubert91"&gt;@jwhubert91&lt;/a&gt;, I follow back! See you tomorrow for another project.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>TExtarea iMproved Part 2: better lists, auto-resize, and more!</title>
      <author>Siddharth</author>
      <pubDate>Thu, 01 Jul 2021 03:07:52 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/textarea-improved-part-2-better-lists-auto-resize-and-more-1bia</link>
      <guid>https://dev.to/siddharthshyniben/textarea-improved-part-2-better-lists-auto-resize-and-more-1bia</guid>
      <description>&lt;p&gt;Welcome to v2 of the TExtarea iMproved! We're gonna add a few more features to our previous textarea improver to make it nicer to use.&lt;/p&gt;

&lt;p&gt;Here's what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/LYWwOze?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This one won't actually make much sense without reading the previous part of this series, so go read that first!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/siddharthshyniben" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icTFgNop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--s_1gOp8_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/606915/bc777ec0-126a-4a76-afa2-f8e27c1badb0.jpeg" alt="siddharthshyniben"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/siddharthshyniben/let-s-improve-the-textarea-1pjo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let's Improve the textarea!&lt;/h2&gt;
      &lt;h3&gt;Siddharth ・ Jun 28 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Anyways, we got a lot more features to work out, so let's get straight in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-list-item-insertion"&gt;
  &lt;/a&gt;
  Automatic list item insertion
&lt;/h2&gt;

&lt;p&gt;Wouldn't it be nice if you could just hit enter from a list item to get a new item added for you automatically? Something like this: &lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gxokv0Pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yl006h0me72rxmy9pob.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gxokv0Pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yl006h0me72rxmy9pob.gif" alt="cropped-list-auto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
That's a great feature we could use, and it's really easy to implement!&lt;/p&gt;

&lt;p&gt;So, first we should add an event listener for 'Enter':&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Other older stuff...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Code...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next thing to do is figure out whether the line being edited actually contains a bullet. We can abstract that to a new function, and first thing to do is get the part of the line being edited:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;looksLikeBullet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPos&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\r?\n&lt;/span&gt;&lt;span class="sr"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can use this kind-of-confusing regex to check if there's a bullet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bulletRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;\t]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;[\*\-\+]\s&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;.*/gim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bulletRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bulletRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The regex is not so confusing, here's an explanation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/^&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;&lt;span class="err"&gt;m
&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;        &lt;span class="c1"&gt;// Start of regex&lt;/span&gt;
&lt;span class="o"&gt;^&lt;/span&gt;        &lt;span class="c1"&gt;// Start of line&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;        &lt;span class="c1"&gt;// Capturing group&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;   &lt;span class="c1"&gt;// Any number of spaces or tabs&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Any of the bullet symbols +, -, or *&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;      &lt;span class="c1"&gt;// The whitespace after the bullet. We capture this so that we can use it later &lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;// End of capturing group&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="c1"&gt;// Anything, ie. the rest of the bullet&lt;/span&gt;
&lt;span class="sr"&gt;/gim     /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;End&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;insensitive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;multiline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, next thing to do is use the function in our event listener:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bullet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;looksLikeBullet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then insert the bullet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Prevent the newline from being added:&lt;/span&gt;
&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Store the text after the cursor, so it can be added to the next line:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;addition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Remove the text after the cursor:&lt;/span&gt;
&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Insert the bullet in the textarea&lt;/span&gt;
&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bullet&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it's done! You can now easily make lists.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixing-it-for-numbered-lists"&gt;
  &lt;/a&gt;
  Fixing it for numbered lists
&lt;/h3&gt;

&lt;p&gt;Of course, this doesn't work for numbered lists, so we have to fix that. We can easily just make an else block in the &lt;code&gt;looksLikeBullet&lt;/code&gt; function, and check for numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numberedListRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;\t]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;(\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.\s&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;.*/gim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberedListRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberedListRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, the problem is that numbers don't get auto incremented. So we can fix that using &lt;em&gt;yet another regex&lt;/em&gt; to increment numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberedListRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cM2-hYD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz8mpuw4mt7wmb7tgpfy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cM2-hYD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz8mpuw4mt7wmb7tgpfy.gif" alt="list-auto-number"&gt;&lt;/a&gt;&lt;/p&gt;
That works well




&lt;h2&gt;
  &lt;a href="#auto-resize"&gt;
  &lt;/a&gt;
  Auto resize
&lt;/h2&gt;

&lt;p&gt;It's so not nice to have to resize a textarea manually – I mean we have to use the mouse! We should fix that.&lt;/p&gt;

&lt;p&gt;This one is quite simple, just create a resize function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then listen to the &lt;code&gt;input&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But then, we also need to resize when we insert text programmatically, so we can call resize in the &lt;code&gt;keydown&lt;/code&gt; listener also. If we do that, we get the perfect auto-resize&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibfGTd4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe6vxl2acvwnsixzoemn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibfGTd4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe6vxl2acvwnsixzoemn.gif" alt="resize"&gt;&lt;/a&gt; &lt;/p&gt;
That's really helpful



&lt;p&gt;There are better ways of doing this out there, but we'll keep this for now&lt;/p&gt;




&lt;p&gt;That's it, we got an even better textarea which we can use!&lt;br&gt;
There's a huge (&lt;strong&gt;Edit: 100%&lt;/strong&gt;) probability of the third part of this series coming out someday, so stay tuned!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Awesome README</title>
      <author>Walter Nascimento</author>
      <pubDate>Thu, 01 Jul 2021 02:49:23 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/awesome-readme-44mf</link>
      <guid>https://dev.to/walternascimentobarroso/awesome-readme-44mf</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/awesome-readme-3e5529a90a7c"&gt;Clique aqui para ler em português&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When entering a project, before looking at code the first information we see is what’s in the README, so nothing more fair than making a spectacular README.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logo"&gt;
  &lt;/a&gt;
  Logo
&lt;/h2&gt;

&lt;p&gt;If the system already has a defined logo, we start with it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![Logo](https://via.placeholder.com/150x150)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#title"&gt;
  &lt;/a&gt;
  Title
&lt;/h2&gt;

&lt;p&gt;Leave a title for your project, if you don’t have a good name, you can put the project name.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# title
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#badge"&gt;
  &lt;/a&gt;
  Badge
&lt;/h2&gt;

&lt;p&gt;The badges, besides making it more elegant, help us with quick information so if possible add it to your project, an example would be the travis badge that informs you if you passed the test or not&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[![Build Status](https://travis-ci.org/walternascimentobarroso/walternascimentobarroso.github.io.svg?branch=master)](https://travis-ci.org/walternascimentobarroso/walternascimentobarroso.github.io)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note: if you want to create your own, &lt;a href="https://shields.io/"&gt;https://shields.io/&lt;/a&gt; is a great tool&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#menu"&gt;
  &lt;/a&gt;
  Menu
&lt;/h2&gt;

&lt;p&gt;By leaving it very descriptive, the README ends up getting too extensive, so as not to generate a tiring reading, it is interesting to have a small menu.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Overview](#overview)
•
[Doc](#doc)
•
[Demo](#demo)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;if the menu is too big change from horizontal to vertical.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :bookmark_tabs: Menu

* [Overview](#overview)
* [Doc](#doc)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note: Insert README topics in links to facilitate reader navigation&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Here you should give a quick description of what the system does.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :scroll: Overview
Brief description of the project.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot
&lt;/h2&gt;

&lt;p&gt;Not everyone has time to check and run the project, the ideal is to have some screenshots of the project right at the start&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :rice_scene: Screenshot

![Logo](https://via.placeholder.com/750x500)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note: A gif showing the project is very useful.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;Now comes one of the most important parts, the demo, if your project is already published and you have a way to test it without having to download the project, leave the link for quick access here, and if you need to login, leave the data here too.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :dvd: Demo

Lorem ipsum dolor sit amet consectetur, adipisicing elit.

| url                      | login          | password |
| ------------------------ | -------------- | -------- |
| http://exemplo.com/admin | admin@mail.com | 123      |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;If your system has documentation, leave a link to it here.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :blue_book: Documentation

Documentation lives at readthedocs.org
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;If you want them to use your system, leave the necessary prerequisites described here, this way you avoid after downloading having to go through all the files and check which items are needed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :heavy_exclamation_mark: Requirements

* [Node](https://nodejs.org/en/download/)
* [PHP](https://php.net/)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#installation-and-usage"&gt;
  &lt;/a&gt;
  Installation and usage
&lt;/h2&gt;

&lt;p&gt;Here you describe how your system should run for it to work properly&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## Installation and usage


git clone https://github.com/&amp;lt;user&amp;gt;/&amp;lt;project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note: Put a step by step to run your application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;Put a step by step to run the tests&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Tests

$ npm run test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#dependencies-and-libs"&gt;
  &lt;/a&gt;
  Dependencies and libs
&lt;/h3&gt;

&lt;p&gt;Some like to list each lib used, if you want here is a good place&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Dependencies and libs

- [React](https://pt-br.reactjs.org/docs/create-a-new-react-app.html)
- [React PDF](https://react-pdf.org/)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h3&gt;

&lt;p&gt;If the project has a unique folder organization it is useful to make this information explicit.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Folder Structure

.
├── src # Project source code
├── doc # Doc for the project
├── .gitignore
├── LICENSE
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note: If you use linux and want to display something like this the tree program is very good &lt;code&gt;sudo apt install tree -y&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#release-history"&gt;
  &lt;/a&gt;
  Release History
&lt;/h2&gt;

&lt;p&gt;If it’s a big project with a lot of improvements already made, it’s nice to have a changelog&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- 0.2.0
  - CHANGE: Remove function
  - ADD: Add init()
- 0.1.1
  - FIX: Crash when calling baz()
- 0.1.0
  - CHANGE: Rename foo() to bar()
- 0.0.1
  - Init the project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  Contributing
&lt;/h2&gt;

&lt;p&gt;Leave a simple way how to contribute to your project&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Fork it (https://github.com/yourname/yourproject/fork)
2. Create your feature branch (git checkout -b feature/fooBar)
3. Commit your changes (git commit -am ‘Add some fooBar’)
4. Push to the branch (git push origin feature/fooBar)
5. Create a new Pull Request
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#tasks"&gt;
  &lt;/a&gt;
  Tasks
&lt;/h3&gt;

&lt;p&gt;If so, list tasks/features that still need to be implemented in your application&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :bell: Tasks

- [ ] Task 1
- [x] Task 2
- [x] Task 3
- [ ] Task 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#authors"&gt;
  &lt;/a&gt;
  Authors
&lt;/h2&gt;

&lt;p&gt;If you want to identify the project’s authors, this is the place&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :smiley_cat: Authors

- [@walternascimentobarroso](https://walternascimentobarroso.github.io/)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;Finally add the type of license your project has.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## :memo: License

The [MIT License]() (MIT)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#template"&gt;
  &lt;/a&gt;
  Template
&lt;/h2&gt;

&lt;p&gt;To use the full template see the link:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All information is optional, it is not mandatory to use everything, but the more information the better ;)&lt;/li&gt;
&lt;li&gt;As markdown does not have native css adjustment, it is necessary to use some old tags and attributes to simulate a more elegant layout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras&lt;/p&gt;

&lt;p&gt;Some tools to create your readme&lt;/p&gt;

&lt;p&gt;&lt;a href="https://readme.so/"&gt;https://readme.so/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/kefranabg/readme-md-generator#readme"&gt;https://github.com/kefranabg/readme-md-generator#readme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For other examples see the link below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/matiassingers/awesome-readme"&gt;https://github.com/matiassingers/awesome-readme&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊See you! 😊😊&lt;/p&gt;

</description>
      <category>readme</category>
      <category>githunt</category>
      <category>project</category>
      <category>awesome</category>
    </item>
    <item>
      <title>5 Tools to Create Color Palettes for Your Websites and More - II</title>
      <author>Tannu Daral</author>
      <pubDate>Thu, 01 Jul 2021 02:26:55 +0000</pubDate>
      <link>https://dev.to/tannudaral/5-tools-to-create-color-palettes-for-your-websites-and-more-ii-1oa6</link>
      <guid>https://dev.to/tannudaral/5-tools-to-create-color-palettes-for-your-websites-and-more-ii-1oa6</guid>
      <description>&lt;p&gt;This is the extended version of my &lt;a href="https://dev.to/tannudaral/5-tools-to-create-color-palettes-for-your-websites-and-more-jj2"&gt;last post&lt;/a&gt;. Here are some more of my favorite tools for finding the ideal color palette for the websites. Let's get started: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ColorsWall&lt;br&gt;
It is the place to store your color palettes. Brand color codes. Generate Random colors palette. Design colors combinations and more...&lt;br&gt;
You can find it &lt;a href="https://colorswall.com/palette/25148/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-SltOjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnlk071hjur159sgzhti.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-SltOjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnlk071hjur159sgzhti.jpg" alt="colorswall website screenshot"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ColorSpace&lt;br&gt;
Here you can find the perfect matching color scheme for your next project! Generate nice color palettes, color gradients and much more!&lt;br&gt;
You can find it &lt;a href="https://mycolor.space/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVWoEf03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hejv72sc9o7bupu3b6tm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVWoEf03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hejv72sc9o7bupu3b6tm.jpg" alt="ColorSpace website screenshot"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Canva Color Generator&lt;br&gt;
The easiest place to get colors from your photos ... Want a color scheme that perfectly matches your favorite images, use this!&lt;br&gt;
You can find it &lt;a href="https://www.canva.com/colors/color-palette-generator/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1607lrRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kan1x2gvq6lfswz6blnp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1607lrRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kan1x2gvq6lfswz6blnp.jpg" alt="Canva Color Generator website screenshot"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Muzli Colors&lt;br&gt;
One of the best resource out there, helps you create Beautiful Color Schemes that works!&lt;br&gt;
You can find it &lt;a href="https://colors.muz.li/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jVaTrWZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9suyzq4lvxbmsvvrhrot.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jVaTrWZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9suyzq4lvxbmsvvrhrot.jpg" alt="Muzli Colors website screenshot"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colormind&lt;br&gt;
Colormind is a color scheme generator that uses deep learning. It can learn color styles from photographs, movies, and popular art...&lt;br&gt;
You can find it &lt;a href="http://colormind.io/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dKKpWfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue98r0g8by766uxyt37h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dKKpWfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue98r0g8by766uxyt37h.jpg" alt="Colormind website screenshot"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those are my magic recommendations, if you have some more, do share them in the comments!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Eight Questions I Had Every Day As A Dev Team Lead</title>
      <author>Nick Hodges</author>
      <pubDate>Thu, 01 Jul 2021 02:14:59 +0000</pubDate>
      <link>https://dev.to/nickhodges/eight-questions-i-had-every-day-as-a-dev-team-lead-5527</link>
      <guid>https://dev.to/nickhodges/eight-questions-i-had-every-day-as-a-dev-team-lead-5527</guid>
      <description>&lt;p&gt;When I was a software developer manager, there were a lot of questions.  Questions that my boss asked me.  Questions that I had myself.  Questions that arose when discussing work with my team. And most of these were questions to which I did not have a good answer.  I couldn’t respond well to them because I didn’t have the data necessary to give a definitive answer.  &lt;/p&gt;

&lt;p&gt;The data was there, but without a way to get at it, I often felt like I was stumbling in the dark. But all is not lost.  Here are eight questions that I had, and ways that data inside your tools can be used to answer them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-quickly-is-work-moving-through-our-pipeline"&gt;
  &lt;/a&gt;
  How quickly is work moving through our pipeline?
&lt;/h2&gt;

&lt;p&gt;One of the most important things that you need to know as a Dev Manager is how long things are really taking to get done.  Not how many hours something is worked on, but rather how much actual calendar time it is taking to get a given user story or project from start to finish. &lt;/p&gt;

&lt;p&gt;Most often, success was defined as completing things by a certain date.  I’d break things down into sub-tasks, estimate those tasks, and then keep an eye on things. We’d make mid-course corrections by the eyeball test. But it was all an imprecise science at best.  &lt;/p&gt;

&lt;p&gt;First, breaking things down into workable chunks is hard.  The chunks may or may not be appropriately sized, and they may or may not be correctly estimated.  And of course, a given sub-task isn’t really &lt;strong&gt;&lt;em&gt;done&lt;/em&gt;&lt;/strong&gt; until it’s code reviewed, merged, and deployed.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8YhzDgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlwx8ebgnzzi01fqoa2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8YhzDgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlwx8ebgnzzi01fqoa2f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where &lt;a href="https://linearb.io/cycle-time/"&gt;Cycle Time&lt;/a&gt; comes into play.  Cycle time measures the amount of calendar time that happens from the moment that a branch is created until the moment that branch makes it into production.  Along the way, it measures four sub-items:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Coding Time&lt;/li&gt;
&lt;li&gt;Pull Request Pickup Time&lt;/li&gt;
&lt;li&gt;Pull Request Review Time&lt;/li&gt;
&lt;li&gt;Deploy Time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cycle time is useful in a number of ways.  First, it helps you see if you are breaking your work into the correct size chunks.  If Coding Time starts rising, perhaps you are making those code chunks too big or too challenging.  &lt;/p&gt;

&lt;p&gt;Second, the process of creating, reviewing, and completing Pull Requests can become a bottleneck.  Being able to see how that process is moving along is valuable information.  Seeing it rise let’s you know that there is an issue and enables you to do something about it before it becomes a problem.  &lt;/p&gt;

&lt;p&gt;Finally, knowing how long it takes to deploy your code — actually get it to the place it needs to be — is critical.  For some sites, that might actually be production code.  For others, it might just be a delivery to QA.  Either way, knowing the time that the whole process takes can give you good insight into how to manage it.&lt;/p&gt;

&lt;p&gt;Overall, Cycle Time gives you keen insight into how things are progressing and can provide a “canary in a coal mine” warning of project trouble.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-stopping-us-from-focusing-on-our-priority-work"&gt;
  &lt;/a&gt;
  What’s stopping us from focusing on our priority work?
&lt;/h2&gt;

&lt;p&gt;One of my great frustrations as a dev manager was when my team ended up doing non-project work.  Sometimes they were asked to do things outside of their sprint work — often by people with positional authority to get the team to do those things.  Occasionally they would venture off on their own to try something that wasn’t necessarily productive.  In any event, I wouldn’t always know about it, and I would have liked to have known.&lt;/p&gt;

&lt;p&gt;Specifically, I would have liked to know if code was being worked on that didn’t relate directly to a project ticket.  Interestingly, the information is there in the repository, but not necessarily easy to find.  Normally, branch names have some relation to the project ticket identifier — or at least they should.  If you maintain a standardized way to name your branches, you can track code branches that aren’t linked to project work. And you can see that and check in on things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPMYdkxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kftlsjf3wn7y2wwpf1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPMYdkxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kftlsjf3wn7y2wwpf1d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now an unmatched branch might not be a big deal — maybe it’s just some refactoring or rework of project work — but at least with this statistic, you can see what is going on in your repository and check into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-our-work-aligned-to-business-priorities"&gt;
  &lt;/a&gt;
  Is our work aligned to business priorities?
&lt;/h2&gt;

&lt;p&gt;A development team does a number of different kinds of work: new feature work, bug fixing, refactoring, etc.  I always had a hard time figuring out exactly how much time was spent on what type.  &lt;/p&gt;

&lt;p&gt;Again, that information is there in your repository and your project management tool, but is hard to suss out.  Well, computers can do the sussing pretty easily, and so it is quite possible to tell at a glance how your team is dividing up work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--haXF7iJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8eb5isru97idqp0g2vy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--haXF7iJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8eb5isru97idqp0g2vy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And even cooler?  This is &lt;em&gt;up-to-the-minute information&lt;/em&gt;.  Not lagging — completely current. It’s pulled right from the current status of your existing tools and code. With this information you can make inflight adjustments as necessary, armed with precise information and not guesswork.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-overworked"&gt;
  &lt;/a&gt;
  Who is overworked?
&lt;/h2&gt;

&lt;p&gt;One of my big frustrations as a Dev Manager was seeing people get burned out. It’s something that is hard to track and you usually find out too late to do anything about it.  It is especially challenging in a remote work environment.  &lt;/p&gt;

&lt;p&gt;But yet again, that information is available and hard to retrieve.  Measuring things like number of projects a dev is working on, how many branches she is working in, or how many consecutive days he has committed code all can be great indicators of overwork.  The view below can point you in the right direction and help you see people that may be working too much.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLts58j8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxjqz6sd0b13c43n0xf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLts58j8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxjqz6sd0b13c43n0xf7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, you can see right away that Jacob has too much on his plate (Work in Progress), and has worked for the last 16 days straight.  Not good, and you could recognize a problem well before it gets this bad. Just as you can’t run a car’s RPM’s in the red for long periods of time, so you can’t have developers working “in the red” for long stretches.  Being able to see it before it happens will help you head such things off at the pass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-my-developers-context-switching"&gt;
  &lt;/a&gt;
  Are my developers context switching?
&lt;/h2&gt;

&lt;p&gt;Context switching sucks all around.  Breaking concentration is frustrating.  It takes time to go from one setup to a different one. I always worked hard to make sure that my team is working on — and finishing — one thing at a time. &lt;/p&gt;

&lt;p&gt;But it’s hard to know, right?  You can’t monitor people 24/7, especially in this new remote world.  And sometimes developers might not even realize that they are jumping around from thing to thing — they are just trying to be helpful.  &lt;/p&gt;

&lt;p&gt;Do I need to say it?  The information is there and only needs to be mined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2U5VeidG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8cghxt1erjyp75wg7fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2U5VeidG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8cghxt1erjyp75wg7fs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, you can see a developer’s commit pattern indicates that they’ve been context switching — checking in code from different work tickets over a period of time.  Maybe they have competing priorities.  Maybe the Product Manager is pulling them in multiple directions.  You can’t tell from the graph why, but you sure can see that it’s happening, and so you can do something about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-our-pull-requests-useful"&gt;
  &lt;/a&gt;
  Are our pull requests useful?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://linearb.io/blog/three-git-pull-request-review-strategies/"&gt;Pull Requests are great&lt;/a&gt;.  They let your team have control over what goes into git.  They let people comment about what and why things were done a certain way.  They can serve as permanent documentation about a chunk of code that can be useful down the road.  They can help the whole team understand what is going on in the code base.&lt;/p&gt;

&lt;p&gt;I used Pull Requests for all the above reasons.  But tracking them and making sure they were moving properly through the system was not always straightforward.  I wanted to be sure that Pull Requests weren’t too big, that they were reviewed promptly, and that there was adequate discussion about the code.  Again — hard to track, see, and gain insight about.  &lt;/p&gt;

&lt;p&gt;But of course, as always, the information is available.  Above you can track the quality of your Pull Requests and how they are moving along.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.com/invite/tpkmwM6c3g"&gt;Join us in our Discord Community&lt;/a&gt; where every weekday we discuss a topic of interest in the arena of software development leadership.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-areas-in-my-code-base-are-problematic"&gt;
  &lt;/a&gt;
  What areas in my code base are problematic?
&lt;/h2&gt;

&lt;p&gt;Some code flows off the fingertips and doesn’t need to be changed all that much.  But, as we all know, some code doesn’t.  Sometimes a developer is struggling to get things right.  Sometimes code is buggy and gets worked over pretty hard.  And often, you don’t hear about it until things are well along and convoluted.&lt;/p&gt;

&lt;p&gt;As a Dev Manager, I would have liked to have some insight into what a developer was doing and how they were getting along with a given project and branch.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VF8JeNWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hf8ts05fnodeaocgrzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VF8JeNWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hf8ts05fnodeaocgrzt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For instance, here’s a branch that is really working hard.  In other words, this branch is very little new work and mostly refactoring and reworking.  (“Rework” is really just refactoring code that is within the sprint or some other predefined length of time). 295 code changes is probably a lot.  So basically this sub-task might be considered at risk. And that’s good to know — definitely worth investigating.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-really-going-on-in-our-sprint"&gt;
  &lt;/a&gt;
  What is really going on in our sprint?
&lt;/h2&gt;

&lt;p&gt;I’ve always done Scrum as a development methodology.  We would break our work up into sprints.   We would  have standups to track progress, But the notion of progress can be difficult to track. It can also be very objective.   We didn’t want to have to track down manually the status of every task and sub-task in git or from the team themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BdRoRQ94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge309wffi2h9f6g7glmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BdRoRQ94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge309wffi2h9f6g7glmg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead I would have loved to have the view above for all the tasks in my sprint.  Here I can see at a glance a given task, who is working on it, how much effort has been expended, and how all the associated branches are.  Such a view for each branch in use in the sprint would prove invaluable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eyes-opened"&gt;
  &lt;/a&gt;
  Eyes opened
&lt;/h2&gt;

&lt;p&gt;We are very data driven at LinearB — we drink our own champagne, using our own tool to answer those questions that I previously couldn’t answer. No more stumbling in the dark when your boss asks you a question about the status of a project. &lt;/p&gt;

&lt;p&gt;The data is available and we reveal it.  All those screenshots above are from our product — they provide all sorts of critical information and insights into what our development teams are doing.  You can &lt;a href="https://app.linearb.io/register"&gt;sign up for a free LinearB account today&lt;/a&gt; and start seeing insights into your team that will answer your questions and help your team continuously improve.&lt;/p&gt;

&lt;p&gt;My eyes were opened. Having all this data certainly would have made my job as a software development manager a whole lot easier.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
