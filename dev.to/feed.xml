<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Make A ToDo App using React and ReduxToolkit</title>
      <author>Arunava Modak</author>
      <pubDate>Sun, 21 Nov 2021 20:39:00 +0000</pubDate>
      <link>https://dev.to/arunavamodak/make-a-simple-todo-app-using-react-and-reduxtoolkit-2d4i</link>
      <guid>https://dev.to/arunavamodak/make-a-simple-todo-app-using-react-and-reduxtoolkit-2d4i</guid>
      <description>&lt;p&gt;In this article we will learn the very basics of redux toolkit and make a simple app using react and redux toolkit. I have kept it very simple with respect to styling, using a little bit css, but you guys can choose whatever you need for styling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-redux-"&gt;
  &lt;/a&gt;
  What Is Redux ?
&lt;/h3&gt;

&lt;p&gt;Redux is an open-source JavaScript library for managing and centralizing application state. It helps us to write JavaScript apps that behave consistently across client, server, and native environments and are easy to test. While it's mostly used as a state management tool with React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-rtk-and-why-do-we-need-it-"&gt;
  &lt;/a&gt;
  What Is RTK And Why Do We Need It ?
&lt;/h3&gt;

&lt;p&gt;According to the official documentation,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Redux Toolkit is our official recommended approach for writing Redux logic. It wraps around the Redux core, and contains packages and functions that we think are essential for building a Redux app. Redux Toolkit builds in our suggested best practices, simplifies most Redux tasks, prevents common mistakes, and makes it easier to write Redux applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was originally created to help address three common concerns about Redux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Configuring a Redux store is too complicated"&lt;/li&gt;
&lt;li&gt;"I have to add a lot of packages to get Redux to do anything useful"&lt;/li&gt;
&lt;li&gt;"Redux requires too much boilerplate code"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about redux toolkit &lt;a href="https://redux-toolkit.js.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, lets take a peek at what we are looking to build&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gNxOu_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc0q1hj1e3htv2zmo89w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gNxOu_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc0q1hj1e3htv2zmo89w.png" alt="App-Screenshot" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-initialize-app-and-install-dependencies"&gt;
  &lt;/a&gt;
  Step 1 - Initialize App and Install Dependencies
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npx create-react-app rtk-todo --use-npm
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this step initializes a basic react-app for you using npm. Next you need to install the dependencies.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm install react-redux @reduxjs/toolkit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;now run this following command to start the development server&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm start
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#step-2-setup-your-folder-structure"&gt;
  &lt;/a&gt;
  Step 2 - Setup Your Folder Structure
&lt;/h4&gt;

&lt;p&gt;Create a structure like this inside the src of your project, we will create our components in the components folder and put all store related stuff inside the redux folder.&lt;/p&gt;

&lt;p&gt;📦src&lt;br&gt;
 ┣ 📂components&lt;br&gt;
 ┃ ┣ 📜AddTodo.js&lt;br&gt;
 ┃ ┣ 📜TodoItem.js&lt;br&gt;
 ┃ ┗ 📜TodoList.js&lt;br&gt;
 ┣ 📂redux&lt;br&gt;
 ┃ ┣ 📜store.js&lt;br&gt;
 ┃ ┗ 📜tasksSlice.js&lt;br&gt;
 ┣ 📜App.js&lt;br&gt;
 ┣ 📜index.css&lt;br&gt;
 ┗ 📜index.js&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-3-redux"&gt;
  &lt;/a&gt;
  Step 3 - Redux
&lt;/h4&gt;

&lt;p&gt;Configuring a Redux is an extremely simple process with Redux toolkit. Let's start with writing our first slice.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Here we are using &lt;code&gt;createSlice&lt;/code&gt;, it takes a 'slice name', 'initial state' and an object of reducers, and then generates corresponding action generators and action creators to reducers, and each reducer has access to the state and the action.&lt;/p&gt;

&lt;p&gt;Then using this we need to configure out store. For that we need to use &lt;code&gt;configueStore&lt;/code&gt;. It is an abstraction over the standard Redux createStore function adding some defaults easing our setup process.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we pass the slice reducer we created. &lt;/p&gt;

&lt;p&gt;Note : If there is one function (like in our case), it is considered as the root reducer. If we have more than one a &lt;code&gt;rootReducer&lt;/code&gt; is created behind the scenes, using the &lt;code&gt;combineReducers&lt;/code&gt; functionality.&lt;/p&gt;

&lt;p&gt;Next we just use this store in our index.js, like we used to do in normal redux.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#step-4-ui-components"&gt;
  &lt;/a&gt;
  Step 4 - UI Components
&lt;/h4&gt;

&lt;p&gt;Before building any UI, we should always visualize our component tree. In this app too we would follow a structure something like this.&lt;/p&gt;

&lt;p&gt;App&lt;br&gt;
 ┣ AddTodo&lt;br&gt;
 ┗ TodoList&lt;br&gt;
   ┗ TodoItem&lt;/p&gt;

&lt;p&gt;In App.js we just call our components and wrap them together.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we make a way to enter the task and dispatch the &lt;code&gt;addTask&lt;/code&gt; action.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We can easily import the action from the slice and dispatch it using the &lt;code&gt;useDispatch&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Now that we can add the task we need to display them. For that we can just access the state using &lt;code&gt;useSelector&lt;/code&gt; and map over the todo list to display as we want.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Almost done, we just need to display each task and call the &lt;code&gt;deleteTask&lt;/code&gt; action just like we had called the &lt;code&gt;addTask&lt;/code&gt; action.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So now if we try to check the progress, we can see that we can add or delete any task and it looks like this, and its quite bad.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XLnJeXve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z7ig9bhp3seqlr907jl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XLnJeXve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z7ig9bhp3seqlr907jl.png" alt="Todo Before CSS" width="880" height="760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now we add the styles, for this tutorial I have only added basic CSS, but you guys can go wild, maybe use a UI framework like Antd or MaterialUI too, would surely look nice.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And thats done, it looks excatly like we aimed it to be.&lt;/p&gt;

&lt;p&gt;So that's it for today, next we will cover API calling in RTK, and building an interesting App.&lt;/p&gt;

&lt;p&gt;Untill next time Happy Building !! 😎&lt;/p&gt;

</description>
      <category>reduxtoolkit</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why don't we call copy-constructors **reconstruct**ors?</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 21 Nov 2021 20:23:31 +0000</pubDate>
      <link>https://dev.to/baenencalin/why-dont-we-call-copy-constructors-reconstructors-4i7f</link>
      <guid>https://dev.to/baenencalin/why-dont-we-call-copy-constructors-reconstructors-4i7f</guid>
      <description>&lt;p&gt;I think it'd be funny if we called copy-constructors (constructors that take a set of data from one object and puts it in another - of the same type) &lt;strong&gt;reconstruct&lt;/strong&gt;ors, because they are reconstructing the original object.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>jokes</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Playing around with browser cookies in Scala.js</title>
      <author>Andrew (he/him)</author>
      <pubDate>Sun, 21 Nov 2021 20:06:28 +0000</pubDate>
      <link>https://dev.to/awwsmm/playing-around-with-browser-cookies-in-scalajs-3p43</link>
      <guid>https://dev.to/awwsmm/playing-around-with-browser-cookies-in-scalajs-3p43</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://www.pexels.com/@laura-james?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Laura James&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/homemade-festive-cookies-in-box-on-table-6102150/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I spent this weekend playing around with Scala.js and learning how to manipulate browser cookies with it.&lt;/p&gt;

&lt;p&gt;Check out the live demo at &lt;a href="https://cookies.awwsmm.com/"&gt;cookies.awwsmm.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The source is available at &lt;a href="https://github.com/awwsmm/CookiesScalaJS"&gt;github.com/awwsmm/CookiesScalaJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a few cool Scala flairs here, particularly this bit which pattern matches on a regular expression&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clearAllCookies&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;Cookie&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"([^=]+)=.+"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;r&lt;/span&gt;
    &lt;span class="nv"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"; "&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="py"&gt;foreach&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;clearCookie&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"Couldn't parse '$other' as a key=value cookie pair"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to ensure that users don't include the &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; characters in their cookie keys and values (which confuses the parser), I've also added these two little safeguards, as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// prevent the user from typing ';' or '=' into the input&lt;/span&gt;
    &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;addEventListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"keypress"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;dom.KeyboardEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;";"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"="&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;preventDefault&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// prevent the user from pasting ';' or '=' into the input&lt;/span&gt;
    &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;addEventListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"paste"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;dom.ClipboardEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;clipboardData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;getData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"="&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;preventDefault&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What do you think? Anyone else on DEV doing anything cool with Scala.js?&lt;/p&gt;

</description>
      <category>scala</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Quick Guide to Typescript - Part 1</title>
      <author>Anuradha Aggarwal</author>
      <pubDate>Sun, 21 Nov 2021 19:21:06 +0000</pubDate>
      <link>https://dev.to/anuradha9712/quick-guide-to-typescript-part-1-3494</link>
      <guid>https://dev.to/anuradha9712/quick-guide-to-typescript-part-1-3494</guid>
      <description>&lt;p&gt;Let's get started with some quick guide to Typescript.&lt;/p&gt;

&lt;p&gt;In this article we'll cover the following concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Type Inference&lt;/li&gt;
&lt;li&gt;Explicit Types&lt;/li&gt;
&lt;li&gt;Union Types&lt;/li&gt;
&lt;li&gt;Dynamic Types&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Type Aliases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  📌 Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Typescript is superset of Javascript&lt;/code&gt; which means it is an extension of Javascript, adding new features and syntax on top of the core language.&lt;/li&gt;
&lt;li&gt;Typescript is a strongly typed, object-oriented &amp;amp; compiled language.&lt;/li&gt;
&lt;li&gt;Typescript is designed to be compiled into fully compatible Javascript, so it works in any browser, any host, and any OS. &lt;/li&gt;
&lt;li&gt;We need typescript compiler to compile it to Javascript code because browsers do not understand typescript.&lt;/li&gt;
&lt;li&gt;Typescript strongly encouraged &lt;code&gt;static-typing&lt;/code&gt; which means it will validate all the assertions before the code executes. It allows you to do a type check during development which leads to the cleaner code and less errors in the browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are familiar with Javascript, then you know that javascript is a dynamic language:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In Javascript&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// output: 20&lt;/span&gt;

&lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twenty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// output: twenty&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code as you notice first we assign a value of type &lt;code&gt;number&lt;/code&gt; to variable &lt;strong&gt;marks&lt;/strong&gt; and then reassign it value of type &lt;code&gt;string&lt;/code&gt; to the same variable.&lt;/p&gt;

&lt;p&gt;This is possible in javascript because it is &lt;code&gt;weekly-typed language&lt;/code&gt; which means the type of variable is figured by JS at &lt;strong&gt;runtime&lt;/strong&gt; &amp;amp; can be change from one type to another.&lt;/p&gt;

&lt;p&gt;But this is not the case with typescript.&lt;/p&gt;

&lt;p&gt;Let's get familiar with some unique feature which typescript provides :-&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  📌 Type Inference
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Typescript uses &lt;strong&gt;inference&lt;/strong&gt; or it infers the type based on the value we assign to it.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twenty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// ERROR&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//CORRECT&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet, when we try to assign a value of type "string" to variable &lt;strong&gt;age&lt;/strong&gt;, it will cause error. But why???&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Typescript, we can change the value of variables but not the type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we first assign a value to variable &lt;strong&gt;age&lt;/strong&gt;, we don't have to specially mention the type of the variable, typescript &lt;em&gt;infer&lt;/em&gt; its type as &lt;strong&gt;number&lt;/strong&gt;, which cannot be change later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  🧩 Functions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We can also declare what type of a value we are expecting to be passed into the function as an arguments.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diameter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;diameter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Correct&lt;/span&gt;
&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ERROR&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  🧩 Arrays
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// marks.push('abc'); //ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet, typescript infers the &lt;em&gt;type&lt;/em&gt; of array &lt;strong&gt;marks&lt;/strong&gt; as "number", hence we cannot insert a value of type "string" into it.&lt;/p&gt;

&lt;p&gt;There is another case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mixed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xyz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;mixed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//Correct&lt;/span&gt;
&lt;span class="nx"&gt;mixed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//Correct&lt;/span&gt;
&lt;span class="nx"&gt;mixed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code, typescript infers the type of array "mixed" as &lt;strong&gt;number&lt;/strong&gt; or &lt;strong&gt;string&lt;/strong&gt;, so we can insert the values of these types only, so in above case value of type &lt;strong&gt;boolean&lt;/strong&gt; is not acceptable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  🧩 Objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Once we define the object we cannot assign additional properties to it later on.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xyz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;//ERROR&lt;/span&gt;

&lt;span class="c1"&gt;//Cannot assign new property to an object&lt;/span&gt;
&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;//ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Once we declare an object then it has to have a same structure, the same type with the same set of properties which cannot be changed later on except the values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#explicit-types"&gt;
  &lt;/a&gt;
  📌 Explicit Types
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Typescript uses inference to know the type of the variable but we can also explicitly define the types using the following syntax:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Explicitly defining the types of variables&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;totalMarks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isloggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;totalMarks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="c1"&gt;//ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  🧩 Arrays
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this array will contain elements of type string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;studentList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 

&lt;span class="c1"&gt;// this array contains element of type number &amp;amp; also initialising it with empty array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;studentMarksList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  🧩 Objects
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Method 1&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bucketList&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="nx"&gt;bucketList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Method 2&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bucketList2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#union-types"&gt;
  &lt;/a&gt;
  📌 Union Types
&lt;/h2&gt;

&lt;p&gt;In typescript, &lt;strong&gt;union type&lt;/strong&gt; allows us to define a variable with multiple type. &lt;/p&gt;

&lt;p&gt;In case you want to explicitly define an array which can contain elements of type string or number, then the syntax for the same would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mixedList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;mixedList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;mixedList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// mixedList.push(true); //ERROR &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following the same rule for other variables as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;acc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// uid = false; //ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dynamic-types"&gt;
  &lt;/a&gt;
  📌 Dynamic Types
&lt;/h2&gt;

&lt;p&gt;There are times when we are not sure of the exact type of specific variable. In this scenario typescript provides special type: &lt;strong&gt;any&lt;/strong&gt;. This allows you to assign "any" value to that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countList&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;countList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;countList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xyz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions-in-typescript"&gt;
  &lt;/a&gt;
  📌 Functions in Typescript
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In Typescript we can either use an arrow functions or a regular functions.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sum = &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;you can define &lt;strong&gt;optional parameter&lt;/strong&gt; inside a function using the syntax:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;difference-&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;optional parameter-&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Always put your required parameters at first and then put the optional parameters at the end.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;define &lt;strong&gt;default value&lt;/strong&gt; of a parameter inside a function :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default value parameter-&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When a function returns something, typescript will infer the return type automatically.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Typescript automatically infer the type of result as number&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can also explicitly define the &lt;strong&gt;return type&lt;/strong&gt; of function by using the syntax:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;function in Typescript will return a &lt;strong&gt;void&lt;/strong&gt; value when function doesn't return something. &lt;strong&gt;void&lt;/strong&gt; is completely different from &lt;strong&gt;undefined&lt;/strong&gt; in javascript.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function Signature&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calculateFn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; 

&lt;span class="nx"&gt;calculateFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;num-&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;calculateFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#type-aliases"&gt;
  &lt;/a&gt;
  📌 Type Aliases
&lt;/h2&gt;

&lt;p&gt;We can initially defined the type which can be reusable later on with the keyword &lt;strong&gt;type&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;stringOrNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myPredefinedType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stringOrNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;personRecord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stringOrNumber&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;personRecord&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet, we have define two types &lt;strong&gt;stringOrNumber&lt;/strong&gt; &amp;amp; &lt;strong&gt;personRecord&lt;/strong&gt;, which are reused later on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  📌 Wrap Up!!
&lt;/h2&gt;

&lt;p&gt;That's all for this article. We'll explore more new features of typescript in the next post.&lt;br&gt;
Thank you for your time!! Let's connect to learn and grow together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/anuradha-aggarwal-4a2751107/"&gt;LinkedIn&lt;/a&gt; &lt;a href="https://twitter.com/Anuradh06359394"&gt;Twitter&lt;/a&gt; &lt;a href="https://www.instagram.com/blogcode404/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/anuradha2612"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy-me-a-coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create NFTs (General Explanation)  +  Extravagant Whales Collection</title>
      <author>balt1794</author>
      <pubDate>Sun, 21 Nov 2021 19:10:50 +0000</pubDate>
      <link>https://dev.to/balt1794/how-to-create-nfts-general-explanation-extravagant-whales-collection-439e</link>
      <guid>https://dev.to/balt1794/how-to-create-nfts-general-explanation-extravagant-whales-collection-439e</guid>
      <description>&lt;p&gt;After months of hard work, I have finally released my NFT collection called Extravagant Whales. &lt;/p&gt;

&lt;p&gt;At first I wasn't really sure about NFTs, but the more I dived into the NFT world, the more I was convinced about finishing my collection.&lt;/p&gt;

&lt;p&gt;NFTs are unique tokens which can be images, videos, audio files, and any other types of digital files. NFTs are deployed on the blockchain and use blockchain technology to generate a public proof of ownership.&lt;/p&gt;

&lt;p&gt;I didn't create my NFTs for the money or the fame of being recognized. I did it for the learning process and what's behind creating NFTs.&lt;/p&gt;

&lt;p&gt;I'm not an artist, so I used programming and some tools which were already created by some awesome people such as Daniel Eugene Botha (HashLips) and Rounak Banik (Scrappy Squirrels) to generate my collection. I did create the art myself though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-nfts-very-general-explanation"&gt;
  &lt;/a&gt;
  How to create NFTs (Very general explanation)
&lt;/h2&gt;

&lt;p&gt;Before you start generating NFTs, you need an idea of what you want to create, in my case, whales.&lt;/p&gt;

&lt;p&gt;I created all the necessary layers to create multiple Extravagant Whales and their accessories/elements by using Adobe Photoshop, but you can use any other image editing software. &lt;/p&gt;

&lt;p&gt;Most NFTs require multiple layers which are stacked on top of each other to generate a final image of whatever you want to generate which is the NFT. &lt;/p&gt;

&lt;p&gt;Once you have all layers needed to create your final image, you have to use a programming tool to place all the layers on top of each other and generate a ton of images, usually people generate collections made of 10k NFTs, but you can do more or less. My collection is made of 5188 Extravagant Whales.&lt;/p&gt;

&lt;p&gt;In my case, I used 4 to 5 layers to generate an Extravagant Whale.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aEFAuE3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3gZjQd9SvaFiQxiTE9BPjKVQBdjpXKRQOE1RLn-BzKo_RJ8k_JF4eIuIcxYfEEJ4--Vh20G5edgM9dKXHIKvaK2fSyWFFPyhh58pVw%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aEFAuE3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3gZjQd9SvaFiQxiTE9BPjKVQBdjpXKRQOE1RLn-BzKo_RJ8k_JF4eIuIcxYfEEJ4--Vh20G5edgM9dKXHIKvaK2fSyWFFPyhh58pVw%3Ds0" alt="Extravagant Whale #81" width="600" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, the image above is generated using four different layers which are placed in the following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Background Layer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Base Layer (Whale Body)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eyes Layer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Head Gear Layer &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After you have generated your NFTs, you can proceed to deploy them on an NFT Marketplace such as OpenSea.&lt;/p&gt;

&lt;p&gt;Before you deploy them though, you have to generate metadata which has to be complaint to the standards of the NFT marketplace. &lt;/p&gt;

&lt;p&gt;Metadata is just information about the NFTs. In the case of the Extravagant Whale #81 which is shown above, the metadata is the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Background: Orange&lt;/li&gt;
&lt;li&gt;Base: Dotted&lt;/li&gt;
&lt;li&gt;Eyes: Up&lt;/li&gt;
&lt;li&gt;Head Gear: Cap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can tell, this information is just a description of each layer that makes up the NFT above.&lt;/p&gt;

&lt;p&gt;You can use the same programming tool used to generate the NFTs in order to generate the metadata for your NFTs.&lt;/p&gt;

&lt;p&gt;After you have these two things, you have to host the NFTs and their metadata somewhere on the internet. In my case, I used IPFS (InterPlanetary File System) which is a decentralized system to share and store data. &lt;/p&gt;

&lt;p&gt;Once you have hosted your NTFs, you have to choose a blockchain where you want to deploy your NFTs. &lt;/p&gt;

&lt;p&gt;Some popular blockchains are Ethereum, Polygon, and Solana. &lt;/p&gt;

&lt;p&gt;Ethereum is the most popular one but the cost to deploy an NFT collection is too expensive for many people, including me. This is why I chose Polygon since it's really cheap to deploy there.&lt;/p&gt;

&lt;p&gt;Finally, to show your NFTs to the world you can go to OpenSea and manually upload your collection or you can create a contract to deploy your collection on the blockchain directly.&lt;/p&gt;

&lt;p&gt;If you have a 10k NFT collection, it would be extremely time-consuming to upload each NFT manually to OpenSea. &lt;/p&gt;

&lt;p&gt;I recommend creating a smart contract to upload your collection since this simplifies the process a lot and allows users to mint NFTs by interacting with your contract. &lt;/p&gt;

&lt;p&gt;There are many tutorials with smart contracts already created (HashLips one) that can help you deploy your collection.&lt;/p&gt;

&lt;p&gt;After deploying on OpenSea, there are other things to be done such as pricing the NFTs, creating a Dapp to mint NFTs, marketing, and more.&lt;/p&gt;

&lt;p&gt;Some of the things I have learned by creating my NFT collection are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Art is extremely difficult to create. I have an immense respect to all the artists for what they do day to day especially those who put everything in the line in order to do what they love. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating a strong community around your NFTs is key for your collection to take off and reach a large audience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NFTs with a purpose &amp;gt; NFTs with no purpose&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#extravagant-whales"&gt;
  &lt;/a&gt;
  Extravagant Whales
&lt;/h2&gt;

&lt;p&gt;The Extravagant Whales collection has been released on the Polygon blockchain which makes it really affordable to deploy, mint, and allow people to buy them.&lt;/p&gt;

&lt;p&gt;Crypto is taking over the world slowly but surely. Whether you agree with how things are turning out or not, cryptocurrencies are here to stay.&lt;/p&gt;

&lt;p&gt;In my opinion, the best option is to learn and embrace this new ecosystem in some sort of way regardless of what will happen in the future. This is the reason why I decided to partake in the crypto world by creating my NFT collection.&lt;/p&gt;

&lt;p&gt;I learned a ton by creating my NFTs. I plan to make videos on my YouTube channel and release tutorials on how to create NFTs for others to learn as well.&lt;/p&gt;

&lt;p&gt;I would really appreciate it if you could check out my NFTs, consider buying them (if you find them affordable enough ~ $20), and most importantly share them with others.&lt;/p&gt;

&lt;p&gt;I'm still working on deploying the website, roadmap, merchandise, and others things which depend a lot on people liking the collection. I also plan to donate some of the profits to TeamSeas.&lt;/p&gt;

&lt;p&gt;You can find the Extravagant Whale Collection in the link below. Enjoy!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://opensea.io/collection/extravagantwhales"&gt;Extravagant Whales&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have minted 100 NFTs so far. More coming soon!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/balt1794"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UChZR16e1XwZXy2yrk_8ymFg"&gt;Youtube Channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>blockchain</category>
      <category>nft</category>
    </item>
    <item>
      <title>How to find a Front-end job for React?</title>
      <author>Martin Ager Adams</author>
      <pubDate>Sun, 21 Nov 2021 18:25:06 +0000</pubDate>
      <link>https://dev.to/martinageradams/how-to-find-a-front-end-job-for-react-571g</link>
      <guid>https://dev.to/martinageradams/how-to-find-a-front-end-job-for-react-571g</guid>
      <description>&lt;p&gt;I come from China and work in Shanghai. I have two years of front-end development experience. &lt;/p&gt;

&lt;p&gt;Used Vue 2 for a year.&lt;/p&gt;

&lt;p&gt;The currently developed projects using &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;TypeScript&lt;/strong&gt;, &lt;strong&gt;Node&lt;/strong&gt;, &lt;strong&gt;Nest&lt;/strong&gt;, &lt;strong&gt;TypeORM&lt;/strong&gt;, &lt;strong&gt;MySQL&lt;/strong&gt;, &lt;strong&gt;MongoDB&lt;/strong&gt;, etc. &lt;/p&gt;

&lt;p&gt;I prefer software development under TypeScript type programming.&lt;/p&gt;

&lt;p&gt;My English level is average, and occasionally I need some software to assist (Google Translate).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reading: Reading English documents is basically barrier-free.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write: There are basically no obstacles to writing work emails.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Listening: My hearing is relatively weak.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Say: My spoken English is relatively weak. Can simple daily communication.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I plan to learn English every day.&lt;/p&gt;

&lt;p&gt;I hope to find a remote job in China or a foreign job in English that can provide a work permit.&lt;/p&gt;

&lt;p&gt;If I provide a work permit, I would really like to go to Canada, New Zealand, and Europe.&lt;/p&gt;

&lt;p&gt;Hope to meet future employers. I am very happy to join your team.&lt;/p&gt;

&lt;p&gt;Due to privacy issues, I leave the &lt;a href="//mailto:martinageradams@gamil.com"&gt;Email&lt;/a&gt; and &lt;a href="https://github.com/martinageradams"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Welcome to contact me by &lt;a href="//mailto:martinageradams@gamil.com"&gt;Email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any suggestions, please leave me a message.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>jobs</category>
    </item>
    <item>
      <title>When to : SNS or SQS</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 21 Nov 2021 17:51:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/when-to-sns-or-sqs-2aji</link>
      <guid>https://dev.to/aws-builders/when-to-sns-or-sqs-2aji</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i#sns"&gt;Simple Notification Service&lt;/a&gt; and &lt;a href="https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i#sqs"&gt;Simple Queue Service&lt;/a&gt; are the managed services which are offered by AWS which helps in architecting your application with the concept of &lt;em&gt;decoupling&lt;/em&gt; and promotes adoption of &lt;em&gt;event-driven architectures&lt;/em&gt;.&lt;br&gt;
The getting started post, explains the technical concepts behind both SNS and SQS.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/getting-started-with-sns-and-sqs-3m4i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with SNS and SQS&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Nov 14 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sns&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This blog post will explain what to choose and how to choose between &lt;em&gt;SNS&lt;/em&gt; or &lt;em&gt;SQS&lt;/em&gt; for your architecture. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-things-to-keepinmind-when-choosing-sns"&gt;
  &lt;/a&gt;
  Key things to keep-in-mind when choosing SNS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Simple Notification Service (SNS)&lt;/a&gt; is a &lt;strong&gt;distributed pub-sub model&lt;/strong&gt; where the messages are pushed to the subscriber. SNS provides the &lt;strong&gt;feasibility of having multiple subscribers&lt;/strong&gt; (Standard topics : max 12,500,000 subscriptions and FIFO topics : max 100 subscriptions) and all the subscribers of the topic receive the message, and the multiple subscribers can be across various other types - &lt;strong&gt;email message, Lambda fn invocation, posting to a SQS queue, invoke an HTTP end-point, sending a SMS message, a mobile push notification&lt;/strong&gt; with all the possible combinations. With SNS, we can integration with &lt;a href="https://developer.amazon.com/docs/adm/overview.html"&gt;Amazon Device Messaging&lt;/a&gt;, &lt;a href="https://developer.apple.com/notifications/"&gt;Apple Push Notification Service&lt;/a&gt;, &lt;a href="https://firebase.google.com/docs/cloud-messaging"&gt;Firebase Cloud Messaging&lt;/a&gt; and other popular providers to send push notifications to the mobile app. There can be scenarios where you can decide to send a SMS message to the subscriber or send an email message to the subscriber based on the message itself with the feature of &lt;strong&gt;message filtering with attributes&lt;/strong&gt;. &lt;br&gt;
The down-side of SNS is the message once sent to the subscriber, it is not available but if undelivered, based on the retry configuration message is available until it is successfully delivered. That been said, if a topic exists with 0 subscribers, if the message is pushed to the topic, that message is lost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-things-to-keepinmind-when-choosing-sqs"&gt;
  &lt;/a&gt;
  Key things to keep-in-mind when choosing SQS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;Simple Queue Service (SQS)&lt;/a&gt; is a &lt;strong&gt;distributed queue model&lt;/strong&gt; where the consumer should poll the queue to check if a new message has been pushed into the queue. SQS messages are stored and &lt;strong&gt;available upto 14 days&lt;/strong&gt;. The SQS can be configured with different fan-out periods - &lt;strong&gt;Visibility timeout (0s - 12 hours), Message retention period(1 min - 14 days, Delivery delay(0s - 15 mins), Maximum message size (1KB - 256KB), Receive message wait time (0s - 20s)&lt;/strong&gt;. A &lt;strong&gt;Dead-letter Queue (DLQ)&lt;/strong&gt; can also be configured for capturing undelivered messages. SQS supports good batch processing of upto 10 messages per batch.&lt;br&gt;
DLQ can get over-filled if there is some error in delivering huge amount of messages. As SQS uses the polling mechanism, there is a &lt;strong&gt;latency&lt;/strong&gt; with message delivery. SQS &lt;strong&gt;does not delivery to multiple consumers at the same time&lt;/strong&gt; even if there are multiple Lambda fns or even SNS topics as triggers for the queue but if anyone of the consumer deletes the message when polled, it is &lt;strong&gt;lost for all the consumers&lt;/strong&gt;.&lt;/p&gt;




&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Use-case&lt;/th&gt;
&lt;th&gt;SNS&lt;/th&gt;
&lt;th&gt;SQS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;On a certain action sending email / mobile push / SMS message&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notify multiple systems via HTTP post&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immediate message processing&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Process an image and get the meta-data via other AWS services&lt;/td&gt;
&lt;td&gt;✅ Topic can send a message to multiple other subscribers which be SQS queues&lt;/td&gt;
&lt;td&gt;✅ These SQS queues can process each type of meta-data generation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single subscriber processing each message&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Batch processing&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cross account Lambda triggers for queue&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decoupling your Lambda fn&lt;/td&gt;
&lt;td&gt;✅ Multiple sub-modules of the Lambda fn can be individual subscribers to the topic&lt;/td&gt;
&lt;td&gt;✅ Load control your Lambda fn with various fan-out options&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Handling undelivered messages&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#know-your-limits"&gt;
  &lt;/a&gt;
  Know your limits
&lt;/h3&gt;

&lt;p&gt;Whenever taking a choice of service for your event-driven architecture which is also loosely coupled, understand the limits of the service itself. &lt;br&gt;
SNS Limits : &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sns.html#sns_region"&gt;Service end-points&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sns.html#limits_sns"&gt;Service quotas&lt;/a&gt; &lt;br&gt;
SQS Limits : &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sqs-service.html#sqs_region"&gt;Service end-points&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sqs-service.html#limits_sqs"&gt;Service quotas&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;SNS and SQS have their own advantages and limitations making it an evaluation-based choice for the Cloud Architects/Developers to choose either SNS or SQS or the combination of two. And to understand the working of the combination of SNS and SQS, Jeff Barr's post &lt;a href="https://aws.amazon.com/blogs/aws/queues-and-notifications-now-best-friends/"&gt;&lt;strong&gt;SQS Queues and SNS Notifications – Now Best Friends&lt;/strong&gt;&lt;/a&gt; (also the 4th use-case listed above) explains how both the services together makes a best pair for decoupling.&lt;/p&gt;

</description>
      <category>sns</category>
      <category>sqs</category>
      <category>aws</category>
      <category>architecture</category>
    </item>
    <item>
      <title>AWS App Runner : How to deploy containerized applications using App Runner</title>
      <author>GargeeBhatnagar</author>
      <pubDate>Sun, 21 Nov 2021 17:45:58 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-app-runner-how-to-deploy-containerized-applications-using-app-runner-1f7c</link>
      <guid>https://dev.to/aws-builders/aws-app-runner-how-to-deploy-containerized-applications-using-app-runner-1f7c</guid>
      <description>&lt;p&gt;“Problems faced while running the container image with pipeline and issue of time and handling infrastructure''. I have tried to find out certain solutions from a scalable and cost perspective. Instead of creating a pipeline, AWS App Runner made my work easy. It Is easy to configure, there is no issue of scaling and can create a default domain. In terms of cost, charges are based on an hourly basis. Also, app runner has a benefit as it is easy to use, scales with traffic and saves time.&lt;/p&gt;

&lt;p&gt;Amazon Elastic Container Registry (Amazon ECR) is an AWS managed container image registry service that is secure, scalable and reliable. Amazon ECR supports private repositories with resource-based permissions using AWS IAM. This is so that specified users or Amazon EC2 instances can access your container repositories and images. You can use your preferred CLI to push, pull and manage Docker images, Open Container Initiative (OCI) images and OCI compatible artifacts.&lt;/p&gt;

&lt;p&gt;Amazon ECR contains the following components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Registry - An Amazon ECR private registry is provided to each AWS account; you can create one or more repositories in your registry and store images in them. For more information, see &lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html"&gt;Amazon ECR private registries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Authorization Token - Your client must authenticate to Amazon ECR registries as an AWS user before it can push and pull images. For more information, see &lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry_auth.html"&gt;Private registry authentication&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Repository - An Amazon ECR repository contains your Docker images, Open Container Initiative (OCI) images and OCI compatible artifacts. For more information, see &lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html"&gt;Amazon ECR private repositories&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Repository policy - You can control access to your repositories and the images within them with repository policies. For more information, see &lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html"&gt;Repository policies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Image - You can push and pull container images to your repositories. You can use these images locally on your development system, or you can use them in Amazon ECS task definitions and Amazon EKS pod specifications. For more information, see &lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/ECR_on_ECS.html"&gt;Using Amazon ECR images with Amazon ECS&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/ECR_on_EKS.html"&gt;Using Amazon ECR Images with Amazon EKS&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AWS App Runner is an AWS service that provides a fast, simple and cost-effective way to deploy from source code or a container image directly to a scalable and secure web application in the AWS Cloud. You don’t need to learn new technologies, decide which compute service to use, or know how to provision and configure AWS resources. &lt;/p&gt;

&lt;p&gt;App Runner connects directly to your code or image repository. It provides an automatic integration and delivery pipeline with fully managed operations, high performance, scalability and security.&lt;/p&gt;

&lt;p&gt;In this post, you will get to know how to deploy containerized applications using app runner. Here I have used a aws cli to build the image and push it on ECR and then run it using app runner.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You’ll need &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/installing.html"&gt;AWS Command Line Interface&lt;/a&gt; (AWS CLI) installed and configured on your machine. For this blog, I assume that the default AWS CLI region is set to oregon (us-west-2) and that you have access to the AWS services described in this post. If you use other regions, you should check the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/"&gt;availability&lt;/a&gt; of AWS services in those regions.&lt;/p&gt;

&lt;p&gt;NOTE : You can also use an Amazon EC2 Server for AWS CLI. Checkout &lt;a href="https://aws.amazon.com/ec2/getting-started/"&gt;Getting started with amazon EC2&lt;/a&gt; provides instructions on how to launch an EC2 Server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#architecture-overview"&gt;
  &lt;/a&gt;
  Architecture Overview
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sm5kdHDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eobfb4u4g33gjbs3qtlj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sm5kdHDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eobfb4u4g33gjbs3qtlj.png" alt="Image description" width="880" height="529"&gt;&lt;/a&gt;&lt;br&gt;
The architecture diagram shows the overall deployment architecture with data flow, application server, local machine, Amazon ECR, AWS App Runner.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution-overview"&gt;
  &lt;/a&gt;
  Solution overview
&lt;/h1&gt;

&lt;p&gt;The blog post consists of the following phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a repository and push container image to ECR&lt;/li&gt;
&lt;li&gt;Created role for App Runner ECR Access&lt;/li&gt;
&lt;li&gt;Configuration of App Runner with ECR container image&lt;/li&gt;
&lt;li&gt;Testing output and logs of App Runner&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I am using a local machine to build the container image as below (Docker, Git and AWS CLI are installed on the local machine) →&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCsuSyD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iduoqbtd2n70jp7rolv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCsuSyD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iduoqbtd2n70jp7rolv1.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-1-create-a-repository-and-push-container-image-to-ecr"&gt;
  &lt;/a&gt;
  Phase 1: Create a repository and push container image to ECR
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the local terminal, Created a repository in ECR named as hello-app-runner. Then done the authentication with Login succeeded. Then build the image then push it to ECR.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZS7N7kc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3jsm7yren3qvqzbdgc4.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wFVUQt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zeqa68rqph2d5p2tcbt.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJeuachw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3kybrwvspxc5fln7o3a.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CT7TUV_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8nctunl4a64d2jxqiwi.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5wAd8eT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jy2hxlw802qcn2bee90.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--54nTJqTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aypeuvjksgpkmw5kdb2w.png" alt="Image description" width="880" height="495"&gt;
&lt;/li&gt;
&lt;li&gt;Image tagged with name as latest.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEnZOzZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b38o6ajpmike7o19fs5e.png" alt="Image description" width="880" height="495"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#phase-2-created-role-for-app-runner-ecr-access"&gt;
  &lt;/a&gt;
  Phase 2: Created role for App Runner ECR Access
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Created a role named AppRunnerAccessRole and a policy named AWSAppRunnerServicePolicyForECRAccess. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utA7XXLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e52tv0fsnh2cgra9ev36.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vpE8RVka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bvaaiac39kvfh1xbz4j.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyMnm0We--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y242vrhu6sfg4cmf7mr.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpiaHpOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nep32rnjz7ie9xfhn2qn.png" alt="Image description" width="880" height="495"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#phase-3-configuration-of-app-runner-with-ecr-container-image"&gt;
  &lt;/a&gt;
  Phase 3: Configuration of App Runner with ECR container image
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the AWS App Runner console, Click on create an App Runner service button. In the source section: choose the repository type as container registry, provider as Amazon ECR, input container image URI, Process set as automatic and role created as AppRunnerAccessRole then click next.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nd1P6JR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqpzcmh7nmjhb09vb4pb.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IeP8YZ9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltfk02aoaq7q2dm8sbp.png" alt="Image description" width="880" height="495"&gt;
&lt;/li&gt;
&lt;li&gt;Give the service name as hello-app-runner and leave the other settings as default. Review and create the configuration and then click on the create and deploy button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mauY3OUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjcrlxbu98yuyl4haknr.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--scZMRXgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbik7zgrk0kps1jt7xq6.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YSQJE_Rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q78r89juld1f2l25g0s5.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7GiLePi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58w69gp6dqgu1fioo7yh.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypniPmF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyxebiv27zvqa9gm75kw.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWliadc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckb4yudojfzhceyhxihy.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rHsV-AfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvhgvnpukuva06qklra3.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPoZEFUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ioxo0eebomogrblo715.png" alt="Image description" width="880" height="495"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#phase-4-testing-output-and-logs-of-app-runner"&gt;
  &lt;/a&gt;
  Phase 4: Testing output and logs of App Runner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--66vZtzc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heorzqac6mjdyksrbze8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--66vZtzc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heorzqac6mjdyksrbze8.png" alt="Image description" width="880" height="471"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NiJ-TyLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg8a0zozxpawuqktpthm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NiJ-TyLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg8a0zozxpawuqktpthm.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VaanBWWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3y7tblgk7aizngi9h5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VaanBWWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3y7tblgk7aizngi9h5f.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SC5x8Oxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yce3fmju7ysfit7mbgdm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SC5x8Oxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yce3fmju7ysfit7mbgdm.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XRg7KQuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kom5xmjfocmxud9jkuq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRg7KQuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kom5xmjfocmxud9jkuq.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77GaAoXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prbh9e45de25zg8qc59h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77GaAoXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prbh9e45de25zg8qc59h.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eSsO3KTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcp8n37st0ieftioere5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eSsO3KTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcp8n37st0ieftioere5.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yko46mL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyelhtpe3bfln8rjnlk7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yko46mL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyelhtpe3bfln8rjnlk7.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lt9lWeW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meyf6yanjas5xr4jx5hc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lt9lWeW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meyf6yanjas5xr4jx5hc.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxj8nCHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au29rmn78h423mksyw41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxj8nCHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au29rmn78h423mksyw41.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcuHoH2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqpfdfad32stg2jfnbyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcuHoH2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqpfdfad32stg2jfnbyl.png" alt="Image description" width="880" height="465"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7W11B1L7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yc2dxe3pu8fqbmisy7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7W11B1L7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yc2dxe3pu8fqbmisy7e.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvpUo7e0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egsnz4z6xnip0dimpj0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvpUo7e0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egsnz4z6xnip0dimpj0d.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9hohVtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9wak9a0aisn6stcxzkx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9hohVtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9wak9a0aisn6stcxzkx.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XqqEh7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu8et7mjeu5y4pm5e4i1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XqqEh7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu8et7mjeu5y4pm5e4i1.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-z7GyOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg3b39gjv6a3r6ueep6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-z7GyOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg3b39gjv6a3r6ueep6w.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsM9MXos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njy97vvvbq8gd4i9i60m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsM9MXos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njy97vvvbq8gd4i9i60m.png" alt="Image description" width="880" height="464"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eYQZOg14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4fpbken6jmfa22f3iqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eYQZOg14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4fpbken6jmfa22f3iqf.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWVMTspV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/177p5z47n80vyhb0bzgh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWVMTspV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/177p5z47n80vyhb0bzgh.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Clean-up
&lt;/h1&gt;

&lt;p&gt;Delete Amazon ECR Repository.&lt;br&gt;
Delete the AWS App Runner Service.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h1&gt;

&lt;p&gt;I review the pricing and estimated cost of this example. &lt;br&gt;
Cost of EC2 Container Registry (ECR) = $0.10 per GB-month of data storage = $0.004 GB-Mo.&lt;br&gt;
Cost of AWS App Runner = $0.007 / GB-hour, $0.064 / vCPU-hour, $1 per application per month(Automatic Deployment), $0.005 per build-minute(Build Fee) = $(0.007+0.384+1+0.1) = $1.491&lt;br&gt;
Cost of Data Transfer = $0.0 &lt;br&gt;
Cost of Simple Notification Service = $0.0&lt;br&gt;
Cost of Cloudwatch = $0.0&lt;br&gt;
Total Cost = $(0.004+1.491+0.0+0.0+0.0) = $1.495&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;In this post, I had shown you how to deploy containerized applications using app runner.&lt;/p&gt;

&lt;p&gt;For more details on Amazon Elastic Container Registry, Checkout Get started Amazon Elastic Container Registry, open the &lt;a href="https://us-west-2.console.aws.amazon.com/ecr/home?region=us-west-2"&gt;Amazon Elastic Container Registry console&lt;/a&gt;. To learn more, read the &lt;a href="https://docs.aws.amazon.com/ecr/?id=docs_gateway"&gt;Amazon Elastic Container Registry documentation&lt;/a&gt;. For more details on AWS App Runner, Checkout Get started AWS App Runner, open the &lt;a href="https://us-west-2.console.aws.amazon.com/apprunner/home?region=us-west-2#/welcome"&gt;AWS App Runner console&lt;/a&gt;. To learn more, read the &lt;a href="https://docs.aws.amazon.com/apprunner/?id=docs_gateway"&gt;AWS App Runner documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Connect with me: &lt;a href="https://www.linkedin.com/in/gargee-bhatnagar-6b7223114"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhTH-GM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38sdi4nsp89fnui8h7dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhTH-GM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38sdi4nsp89fnui8h7dk.png" alt="Image description" width="78" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awsecr</category>
      <category>awsapprunner</category>
      <category>awsiam</category>
    </item>
    <item>
      <title>Your First Line of Code</title>
      <author>Vicki (she/they)</author>
      <pubDate>Sun, 21 Nov 2021 17:24:46 +0000</pubDate>
      <link>https://dev.to/vickilanger/your-first-line-of-code-5ebi</link>
      <guid>https://dev.to/vickilanger/your-first-line-of-code-5ebi</guid>
      <description>&lt;p&gt;&lt;em&gt;If learning to code with math examples are the bane of your existence, keep reading. This series uses relatable examples like dogs and cats.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Jump To:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#first"&gt;Your First Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practice"&gt;Practice Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h2&gt;

&lt;p&gt;When learning to code, you must start somewhere. You’re not going to jump in and already know how to do things. Some things will look like magic at first. As you go along you’ll learn more and more about how those magic things actually work.&lt;/p&gt;

&lt;p&gt;The first program most programmers start with is called "Hello, World". This program is the starting point because it shows some of the language’s syntax and it feels good when you can see the output of your work. This tradition has been around since 1974 when it was first introduced into a programming tutorial book.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-first-program"&gt;
  &lt;/a&gt;
  Your First Program! &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In whichever editor you choose (eg Python Tutor, Trinket, IDLE, etc), type in the code below and run the code. If you don’t know how to run the code, you can always refer back to the &lt;a href="https://dev.to/vickilanger/where-do-i-code-3cb2"&gt;&lt;em&gt;Where Do I Code&lt;/em&gt;&lt;/a&gt; post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on your editor, your output will show a little differently, but it will still be displayed. If you got it to work, congratulations! You’ve built your first program!&lt;/p&gt;

&lt;p&gt;Try it again, but this time use your own words. Leave the quotes and put your own words inside them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#um-it-didnt-work-now-what-do-i-do"&gt;
  &lt;/a&gt;
  Um, It Didn’t Work. Now what do I do?
&lt;/h3&gt;

&lt;p&gt;If your code didn’t work, that is okay. This happens ALL the time. In &lt;a href="https://dev.to/vickilanger/how-do-i-code-4970"&gt;&lt;em&gt;How Do I Code&lt;/em&gt;&lt;/a&gt;, we talked about bugs and debugging? You have a bug and you need to debug your program. Here are the steps we want to go through.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look at the code you last wrote. It’s likely to be the culprit.&lt;/li&gt;
&lt;li&gt;Make sure the syntax is good.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have yet to go over the syntax of anything in this program. So, here are some things to check. If you don’t have them, go ahead and fix your code. You can run your code after every change to see if it works.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;print&lt;/code&gt; should be lowercase&lt;/li&gt;
&lt;li&gt;There should be parentheses surrounding your words&lt;/li&gt;
&lt;li&gt;Your words and their punctuation should be surrounded by quotes (like this &lt;code&gt;"puppy"&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-magic-with-print"&gt;
  &lt;/a&gt;
  Some Magic with Print
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.toTBD"&gt;&lt;em&gt;How Do I Code&lt;/em&gt;&lt;/a&gt;, we talked about documentation and the importance of reading it. I know it can be scary, but I promise it will help. Let’s take a look at what Python docs have for this &lt;code&gt;print()&lt;/code&gt;. You can go to the docs here: ​​&lt;a href="https://docs.python.org/3/library/functions.html#print"&gt;https://docs.python.org/3/library/functions.html#print&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
​​&lt;br&gt;
This is showing us the syntax of a print statement and what arguments are required and allowed. Remember, arguments are the things that go inside the &lt;code&gt;()&lt;/code&gt; and are separated by commas. There are five arguments; We’ll go over the first three. Any arguments that have an &lt;code&gt;=&lt;/code&gt; are not required as they had defaults set to whatever is after the &lt;code&gt;=&lt;/code&gt;. Here are the three we’ll work with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;objects&lt;/code&gt; refers to whatever you want to print and the &lt;code&gt;*&lt;/code&gt; just means you can put as many things, separated by commas, as you want.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sep=' '&lt;/code&gt; is saying that each of those things, or objects, will be separated by a single space, by default. If you were to give &lt;code&gt;sep=',  '&lt;/code&gt; your objects would be separated by a comma and a space.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;end='\n'&lt;/code&gt; says that at the end of whatever you are printing, it is giving a new line. It’s basically hitting the enter key after you print. You can change that if you want by giving something other than &lt;code&gt;\n&lt;/code&gt; for the end.
Sometimes it can be helpful to give a separator and/or a different end of the line. Here are a few examples. Try it out for yourself.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# print() separator example
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints cat mouse dog
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints cat, mouse, dog
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints cat123mouse123dog
&lt;/span&gt;
&lt;span class="c1"&gt;# print() end example
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1st print"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints 1st print,
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2nd print"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#do-you-remember"&gt;
  &lt;/a&gt;
  Do you remember?&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Here's some practice challenges. Let’s practice what we’ve learned so far. Go ahead and comment on this post with your answers. If you don't remember, no worries, you can always go back to read sections again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-fix-whats-wrong-with-these"&gt;
  &lt;/a&gt;
  Can You Fix What's Wrong with These?
&lt;/h3&gt;

&lt;p&gt;Some of these have more than one right answer. Believe in yourself and give it a try.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Print("Hi there")"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print"(Bom Dia!, sep="... ")"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print("​​Nǐ hǎo”, sep" - ")&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print("¡Hola"!)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print.("Assalamu Alaikum", end=" ")&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#make-some-example-print-statements-and-give-their-output"&gt;
  &lt;/a&gt;
  Make some example print statements and give their output
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Print Statement&lt;/th&gt;
&lt;th&gt;What Would the Output look like&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Just words&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;With a different Separator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;With a different End&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>challenge</category>
    </item>
    <item>
      <title>How do I code?</title>
      <author>Vicki (she/they)</author>
      <pubDate>Sun, 21 Nov 2021 17:23:23 +0000</pubDate>
      <link>https://dev.to/vickilanger/how-do-i-code-4970</link>
      <guid>https://dev.to/vickilanger/how-do-i-code-4970</guid>
      <description>&lt;p&gt;&lt;strong&gt;Jump To&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#docs"&gt;Reading Docs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#pseudocode"&gt;Pseudocode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#comment"&gt;Commenting&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#naming"&gt;I Want It That Way&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#debug"&gt;Eek! Errors :( Tell Me Why&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#practice"&gt;Practice Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Coding can be as easy as typing exactly what you see in a book, video, or tutorial and hoping it works. This will work at first, but it’s better to have some tools to help you learn and really understand what you’re doing along the way. These tools will help you better understand what you’re doing and how things work. All of these tools are things professional programmers depend on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-syntax"&gt;
  &lt;/a&gt;
  Understanding Syntax &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you’re writing in English, Pashto, Hebrew, or a programming language they all require you to use combinations of characters, numbers, and symbols. These combinations of characters, numbers, and symbols mean something. When you were learning to read you were programming your brain to understand these combinations as different sounds. Then you used these sounds to make words. Once you could read words, you could read sentences. There are rules or syntax that tell us how sounds and words work together. Syntax tells us what the correct format is to write certain things.&lt;/p&gt;

&lt;p&gt;In programming, syntax is used to define the correct combinations of characters, numbers, and symbols to make the code work. The syntax is different for each programming language just like it is for written and spoken languages. For every new code thing you learn, you want to make sure you look at the syntax and refer back to it if you don’t remember. If you type the wrong syntax, the computer will not understand and it will give you a &lt;code&gt;SyntaxError&lt;/code&gt;. If you get a syntax error, look up the syntax to verify you have the right thing.&lt;/p&gt;

&lt;p&gt;When looking up the syntax the best option is to look at the documentation. What is given in a tutorial, video, or book is probably correct, but sometimes things change or there are typos. Documentation is the go-to source for all your syntax needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-documentation-and-searching-the-web"&gt;
  &lt;/a&gt;
  Reading Documentation and Searching the Web &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As our go-to source of information, documentation or docs as most programmers call it, is incredibly important. You can go directly to the documentation website (docs.python.org), but sometimes the website isn’t the easiest to navigate when you don’t know all the terms that are on it. Personally, I choose to go to my search engine (e.g. DuckDuckGo, Bing, Google) and type in &lt;code&gt;python docs&lt;/code&gt; and the thing I want to look up. Most of the time, one of the first results is exactly what I need. Notice, I included the language I’m working with and the word &lt;code&gt;docs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reading documentation can feel daunting at first. Let’s look at an example and figure out what’s what. There are several things we need to look at.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Syntax - the name and required symbols to use, in this case &lt;code&gt;print()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Required things - anything inside the &lt;code&gt;()&lt;/code&gt; without an equals sign &lt;code&gt;=&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Things Not Required - anything inside the &lt;code&gt;()&lt;/code&gt; with an equals sign &lt;code&gt;=&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgASw-aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7jadf834fblv3nz60o9.png" alt=" raw `print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)` endraw  with a &amp;quot;1&amp;quot; over the &amp;quot;print&amp;quot;, a &amp;quot;2&amp;quot; over &amp;quot;*objects&amp;quot; and a &amp;quot;3&amp;quot; over everything with an equals signs" width="500" height="200"&gt;
These things may look like gibberish, but I promise, no one expects you to understand what any of this means. In the documentation there is a description of each thing in the &lt;code&gt;()&lt;/code&gt; underneath this line of code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#pseudocode"&gt;
  &lt;/a&gt;
  Pseudocode &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We all program every single day of our lives whether or not we realize it. When you get up in the morning, you plan out your day. This act of planning is creating a script or program for your day. This may not be in a computer programming language, but it is absolutely programming. It’s an informal list of steps or a to-do list. In coding, we actually do something similar to this. We call it pseudocode.&lt;/p&gt;

&lt;p&gt;Sounds goofy, right? Why are we learning something that basically means “kinda sorta code”? Believe it or not, this is an integral step. Pseudocode is basically a to-do list. We use informal plain language to describe what we are about to code. You may think of it as an outline, plan, or to-do list.&lt;/p&gt;

&lt;p&gt;Once you have a pseudocode outline of what you want to build, you can use the steps to help guide what you want to code. In &lt;a href="https://dev.to/vickilanger/what-is-programming-35kf"&gt;&lt;em&gt;What is Programming&lt;/em&gt;&lt;/a&gt;, there was an example about how to build a watch. That was pseudocoding. The steps were written with all the focus on how it should work and not on the programming syntax. Though, in real pseudocode, each line would be a comment instead of a bullet on a list.&lt;/p&gt;

&lt;p&gt;If I were going to pseudocode for the watch, it would look something like this. Do know that there is no right or wrong way to pseudocode. You may choose to write it differently than someone else. That’s okay. It’s just a guide.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Repeat steps forever and ever until end of time or battery dies
&lt;/span&gt;
&lt;span class="c1"&gt;# Every 1 second up to 59, add 1 to the seconds on screen then
# Add 1 to the minutes on the screen up to 59 then
# Add 1 to the hours on the screen up to 12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In the pseudocode watch example, every line starts with a &lt;code&gt;#&lt;/code&gt;.  Whenever you use a &lt;code&gt;#&lt;/code&gt; you’re saying the computer should ignore what comes after it. What comes after the &lt;code&gt;#&lt;/code&gt; is meant for humans. Typically, comments are on the line above your code or at the end of the line. It should be an explanation of the what and why of your code. Think of it as a reminder to a future you and an explanation to anyone else reading your code. Oftentimes, your pseudocode will be repurposed and used to comment your code.&lt;/p&gt;

&lt;p&gt;You can also use comments to leave yourself to-do things with pseudocode notes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Henna&lt;/span&gt; &lt;span class="n"&gt;Wars&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# output title of book
# TODO: output author of book - Adiba Jaigirdar
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-want-it-that-way"&gt;
  &lt;/a&gt;
  I Want it That Way &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;One of the best and worst things in programming is the fact that we have to name things. Naming can be a lot of fun. Later on, you’ll see that I named something &lt;code&gt;cat_summoning_spell&lt;/code&gt;. I promised I giggled when I came up with that. As fun as it can be, naming can be hard too.&lt;/p&gt;

&lt;p&gt;Names have to be unique. They can’t be the same as anything else or your program will get confused. Imagine having a cat named “Chicken” and a pet chicken. That would quickly get confusing.&lt;/p&gt;

&lt;p&gt;Names should also be memorable and descriptive. Using &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;foo&lt;/code&gt; doesn’t explain what something is. Instead, you could describe what the thing is. If you’re counting stars, you could use something like &lt;code&gt;star_count&lt;/code&gt;, &lt;code&gt;star_num&lt;/code&gt;, or &lt;code&gt;num_of_stars&lt;/code&gt;. Having descriptive variables will help you avoid errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eek-i-got-an-error-what-now-tell-me-why"&gt;
  &lt;/a&gt;
  Eek! I got an Error. What now? - Tell Me Why &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If your code didn’t work, that is okay. This happens ALL the time. You have a bug and you need to debug your program. Here are the steps we want to go through. We’ll go into each of them in detail shortly. While they are in order, there is nothing saying you have to do them in this order.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read the Error&lt;/li&gt;
&lt;li&gt;Find the Culprit

&lt;ol&gt;
&lt;li&gt;Make sure the syntax is good.&lt;/li&gt;
&lt;li&gt;Names match (eg variables, functions, classes, etc)&lt;/li&gt;
&lt;li&gt;Comment out code&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Ask for help

&lt;ol&gt;
&lt;li&gt;Rubber Duck&lt;/li&gt;
&lt;li&gt;Google it&lt;/li&gt;
&lt;li&gt;Actually ask someone&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Take a Break&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#understanding-the-error-messages"&gt;
  &lt;/a&gt;
  Understanding the Error Messages
&lt;/h4&gt;

&lt;p&gt;I know, errors are scary and look like you broke something. There’s no need to worry though, it’s trying to help you. Errors tell you where the error is and what the problem might be. Let’s look at an example and figure out what’s what. There are several things we need to look at.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type of error&lt;/li&gt;
&lt;li&gt;Description of error&lt;/li&gt;
&lt;li&gt;Line number - which line the error is on
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q78_uYap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcfk0tdq002bukcuyxv7.png" alt='"1" over "NameError", "2" over "name cats is not defined", and "3" over "line 2"' width="500" height="200"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#find-the-culprit"&gt;
  &lt;/a&gt;
  Find the Culprit
&lt;/h4&gt;

&lt;p&gt;Now that the error message has led you in the right direction, let’s look where it said the problem is. When you’re first learning to code, your most common errors will be a &lt;code&gt;SyntaxError&lt;/code&gt; and a &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You’ll get a &lt;code&gt;SyntaxError&lt;/code&gt; when your syntax is messed up. Verify you have it right. I promise, even if you think you have it right, verify anyway. If you’re not sure, you can always look at documentation. Oftentimes, we assume we typed something right and we made a tiny mistake.&lt;/p&gt;

&lt;p&gt;Speaking of tiny mistakes, we get &lt;code&gt;NameError&lt;/code&gt; when names don’t match. For example, if you have something called &lt;code&gt;dog_feet&lt;/code&gt; but you later tried to use &lt;code&gt;dog_paws&lt;/code&gt; or &lt;code&gt;dog_foot&lt;/code&gt; you’ll get this &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re having trouble finding the error, you can do what we call “commenting out code”. This means you can put a &lt;code&gt;#&lt;/code&gt; in front of that line so the computer will ignore that line. You’ll do this with lines that work perfectly and you know aren’t the problem. This helps narrow down the offending or broken code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ask-for-help"&gt;
  &lt;/a&gt;
  Ask For Help
&lt;/h4&gt;

&lt;p&gt;If the other steps didn’t help, try asking for help. There are lots of ways to do this. You can do what we call “rubber ducking” or “rubber duck debugging.” This just means that you are explaining your code and the problem (to the best of your ability) out loud to something like a rubber duck or maybe your cat. You can also do this by typing out your problem as if you were going to ask a question. Oftentimes, this will solve your problem because you’ll be reading off your code and realize what was wrong.&lt;/p&gt;

&lt;p&gt;If explaining your code to a rubber duck, your cat, or your programmer friend hasn’t worked, try googling the problem. Typically this would mean you want to search the language you’re working with and the error. You might search something like &lt;code&gt;python NameError: name 'cats' is not defined&lt;/code&gt;. Generally the results will lead you in the right direction. You may have to look at a few different results to get the answer you need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#take-a-break"&gt;
  &lt;/a&gt;
  Take a Break
&lt;/h4&gt;

&lt;p&gt;If all else fails, take a break. Yes, seriously. Get up, walk away from your code. Take a walk, get some water, go play fetch with your dog, anything. I know you’re thinking this won’t work, but try it anyway. When you go back to your code later the problem may be glaringly obvious. It also might not be, but you’ve cleared your mind and are in a better position to find the pesky code. The goal here is to not sit there getting frustrated for a long time. Learning to code should be fun. If you find yourself getting upset with yourself, take a break.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-remember"&gt;
  &lt;/a&gt;
  Do you remember? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let’s practice what we’ve learned so far. Go ahead and comment on this post with your answers. If you don't remember, no worries, you can always go back to read sections again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-a-pseudocode-example-or-three"&gt;
  &lt;/a&gt;
  Write a Pseudocode example or three
&lt;/h3&gt;

&lt;p&gt;Try writing out the steps on how to do or build a real-life thing. Ideas: make a sandwich, use a TV, ride a bike, use a keyboard, or how water flows through kitchen sink plumbing&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pseudocode Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How I Structure My Writing</title>
      <author>Abbey Perini</author>
      <pubDate>Sun, 21 Nov 2021 17:04:12 +0000</pubDate>
      <link>https://dev.to/abbeyperini/how-i-structure-my-writing-55ha</link>
      <guid>https://dev.to/abbeyperini/how-i-structure-my-writing-55ha</guid>
      <description>&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/adiatiayu"&gt;@adiatiayu&lt;/a&gt;
 asked how I write more than 1,000 words on a topic, and the short answer is practice. I was lucky to go through schooling that focused on writing from an early age. I lost count of how many research papers I've written a long time ago. When I reached college, I spent most of my semesters involved in psychological research, and with that, writing APA format papers. I am an author on the research paper "How are Perceived Stigma, Self-Stigma, and Self-Reliance Related to Treatment-Seeking? A Three-Path Model" published in the Psychiatric Rehabilitation Journal in June 2014.&lt;/p&gt;

&lt;p&gt;The long answer, the one which applies to writing technical blogs, boils down to how I structure my writing. I no longer strictly follow the method I'll describe here, because you learn the rules to know how to break them. However, whenever I get stuck, this is what I return to. What follows is how to write a 3-3-11 paragraph, an essay based off that structure, and how to apply it to technical blogs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-paragraph"&gt;
  &lt;/a&gt;
  A Paragraph
&lt;/h2&gt;

&lt;p&gt;The method I was taught in school was 3-3-11 paragraphs. In a single paragraph, that means you have a thesis statement with three points, 3 sentences about each point, and then a summary/clincher/ending sentence.&lt;/p&gt;

&lt;p&gt;For example, let's say I want to write about the 8 limbs of yoga. Specifically, I choose why practicing one of the niyamas, svadhyaya, is beneficial. &lt;/p&gt;

&lt;p&gt;First, I start with my thesis sentence: Svadhyaya, or self-study, is one of the most important niyamas, because it makes it easier to practice other niyamas, helps a yogi identify and break samskaras, and teaches us to be centered and non-reactive.&lt;/p&gt;

&lt;p&gt;Then I'd write 3 sentences about how it makes it easier to practice other niyamas, 3 sentences about how it helps a yogi identify and break samaskaras, and 3 sentences about how it teaches us to be centered and non-reactive.&lt;/p&gt;

&lt;p&gt;Finally, I'd end my paragraph with a summary sentence: By striving to practice svadhyaya more often, a yogi can further their goals on and off the mat much more quickly than they would without this cultivated self-awareness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-essay"&gt;
  &lt;/a&gt;
  An Essay
&lt;/h2&gt;

&lt;p&gt;In longer essays, the structure of paragraphs is less rigid. An essay is comprised of a thesis paragraph, one or more paragraphs about each of the points in the thesis paragraph, and a conclusion paragraph. My example paragraph above could easily be 1 of 5 paragraphs in an essay about the niyamas. In that case, I'd start with a thesis paragraph where I describe the 5 niyamas.&lt;/p&gt;

&lt;p&gt;If I wanted to turn the thesis sentence from the last section into a thesis paragraph for an essay, it would look like this: &lt;/p&gt;

&lt;p&gt;One of the 8 limbs of yoga, niyamas, is described as rules, guidelines, or observances. Of the five niyamas, I would argue Svadhyaya is the most important. Usually translated as self-study or self-reflection, it is the practice of self-awareness and self-inquiry. Put into practice, svadhyaya helps a yogi practice the other niyamas - saucha, santosha, tapas, and ishvara pranidhana. Self-study makes it easier to identify samskaras, also known as behavioral patterns, subconscious or otherwise. Finally, through self-study we can become conscious of our own reactivity and attachments. By striving to incorporate more svadhyaya into everyday life, a yogi can further their goals on and off the mat much more quickly than they would without this cultivated self-awareness.&lt;/p&gt;

&lt;p&gt;Then, I'd have a paragraph or paragraphs about each of the three points I made. Each of these paragraphs could follow the 3-3-11 format on their own. The paragraph about "Put into practice, svadhyaya helps a yogi practice the other niyamas - saucha, santosha, tapas, and ishvara pranidhana." would start with a thesis sentence like "Practicing each of the other niyamas gets easier when you are practicing svadhyaya."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-blogs"&gt;
  &lt;/a&gt;
  Technical Blogs
&lt;/h2&gt;

&lt;p&gt;This method is easily applied to a technical blog covering why a concept is important or why you would recommend a technology, but what about tutorials and walkthroughs?&lt;/p&gt;

&lt;p&gt;I find the main benefit of the 3-3-11 method is making you think about your main points. Once you are able to take a topic and boil it down into the main points you want to convey, you can write about as much or as little as you want.&lt;/p&gt;

&lt;p&gt;For tutorials, the thesis paragraph describes the final outcome I'm trying to achieve. Then, I write a paragraph or section of paragraphs about each step I take as I complete the project. After I finish the project, I go back through each step section. The shortest sentence I could write to describe the step would be the thesis sentence. I write sentences to elaborate on that thesis by making sure that anything a person would need to know to complete that step is included in that section. This means one step describes not only the code I used and why, but also any steps I had to take to get the information necessary to complete it. On the flip side, I also make sure the steps are in an easy to follow order and try to make sure I'm only conveying relevant information.&lt;/p&gt;

&lt;p&gt;Walkthroughs I treat similarly, but also like a journal. I write down everything as I go. I spend less effort on making sure it is an easy to follow step by step process. This is probably why my walkthrough blogs are by far the longest. They're more focused on showing that coding rarely follows a linear process.&lt;/p&gt;

&lt;p&gt;Because of the nature of technical blogging, when a blog gets longer than a few hundred words, it may be better to turn the intro section/thesis paragraph into a table of contents with a link to the heading of each section. I think of headings as a thesis sentence boiled down into one to five words.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Ultimately, this was a long explanation of the way I get an idea of something to write about, break it down into its main points, and elaborate on each of the points. If you are left with questions about this method or other parts of my writing, please don't hesitate to ask!&lt;/p&gt;

</description>
      <category>writing</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Testing-library: avoid these mistakes in async tests</title>
      <author>Aleksei Tsikov</author>
      <pubDate>Sun, 21 Nov 2021 16:58:28 +0000</pubDate>
      <link>https://dev.to/tipsy_dev/testing-library-writing-better-async-tests-c67</link>
      <guid>https://dev.to/tipsy_dev/testing-library-writing-better-async-tests-c67</guid>
      <description>&lt;p&gt;Testing is a crucial part of any large application development. The more code you write, the more tests you want to add to make sure all the parts still work together as expected. Here in Revolut, a lot of things happen behind our mobile super-app. We have a lot of backoffice apps with complex logic, and need to be sure nothing is broken when new features are added.&lt;/p&gt;

&lt;p&gt;Sometimes, tests start to unexpectedly fail even if no changes were made to the business logic. It may happen after e.g. you updated some underlying library, made changes to the network layer, etc. Good and stable tests should still reliably assert component output against the given input, no matter what happens at the lower levels. Another even worse case is when tests still pass even when the component logic got broken.&lt;/p&gt;

&lt;p&gt;In this article, I would like to show a few common mistakes that could lead to such issues, how to fix these, and how to make your tests stable and predictable. Initially, I picked this topic for our internal Revolut knowledge share session, but I feel like it could be helpful for a broader audience.&lt;/p&gt;

&lt;p&gt;These and a few more examples could be found in &lt;a href="https://github.com/atsikov/common-testing-library-mistakes/"&gt;this repository&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#await-with-sync-methods"&gt;Await with sync methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#async-methods-without-await"&gt;Async methods without await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sideeffects-inside-waitfor"&gt;Side-effects inside waitFor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#await-with-sync-methods"&gt;
  &lt;/a&gt;
  Await with sync methods
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#simple-asynchronous-request"&gt;
  &lt;/a&gt;
  Simple asynchronous request
&lt;/h3&gt;

&lt;p&gt;This is the most common mistake I'm running into while refactoring code. Let's say, you have a simple component that fetches and shows user info. For the sake of simplicity, our API will only capitalize the given user id and return it as a user name. I'm also using &lt;code&gt;react-query&lt;/code&gt;-alike hooks, but not the library itself, to make things more transparent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUserQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUserQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to write a test for it, so we are rendering our component with &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt; (RTL for short) and asserting that an expected string is visible to our user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render user info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserView&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, this test works perfectly well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complex-asyncronous-request"&gt;
  &lt;/a&gt;
  Complex asyncronous request
&lt;/h3&gt;

&lt;p&gt;Later, a new requirement comes in to display not only a user but also their partner name. Easy-peasy! Let's just change our fetch function a little bit, and then update an assertion.&lt;br&gt;
In &lt;code&gt;getUser&lt;/code&gt;, we will now wait for two consecutive requests and only then return the aggregated data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;partner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;charlie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;daisy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;partner&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's update our test as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render user info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserView&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alice and Charlie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our changes made perfect sense, but suddenly our test will start to fail with "Unable to find an element with the text: Alice and Charlie". Oh-oh! But we didn't change any representation logic, and even the query hook is the same. Also, RTL output shows "Loading..." text in our DOM, though it looks like we are awaiting for render to complete in the very first line of our test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;Alright, let's find out what's going on here. &lt;code&gt;render&lt;/code&gt; is a synchronous function, but &lt;code&gt;await&lt;/code&gt; is designed to work with asynchronous ones. What's going on when &lt;code&gt;render&lt;/code&gt; is awaited? Well, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#description"&gt;MDN&lt;/a&gt; is very clear about it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the value of the expression following the await operator is not a Promise, it's converted to a resolved Promise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our test, when we are calling &lt;code&gt;render&lt;/code&gt; with &lt;code&gt;await&lt;/code&gt;, JavaScript implicitly wraps the result into a promise and waits for it to be settled. Meanwhile, we already have another pending promise scheduled in the fetch function. By the time implicit awaited promise is resolved, our fetch is resolved as well, as it was scheduled earlier. So we have the correct output on the screen.&lt;/p&gt;

&lt;p&gt;But after the latest changes, our fetch function waits for the two consecutive promises, thus data is not fully ready after implicit render promise is resolved. In fact, even in the first green test, react warned us about something going wrong with an "act warning", because actual update after fetch promise was resolved happened outside of RTL's act wrappers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Warning: An update to UserAndPartnerView inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&amp;gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
    at UserAndPartnerView (./common-testing-library-mistakes/src/a-await-sync-methods/UserAndPartnerView.tsx:3:38)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that we know what exactly caused the error, let's update our test. RTL provides a set of methods that return promises and are resolved when an element is found. This is the perfect case to use one of these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render user info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserView&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alice and Charlie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we don't care how many requests happen while the component is being rendered. &lt;code&gt;findByText&lt;/code&gt; will wait for the given text to appear in the DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;You should never &lt;code&gt;await&lt;/code&gt; for syncronous functions, and &lt;code&gt;render&lt;/code&gt; in particular. Use the proper asyncronous utils instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#async-methods-without-await"&gt;
  &lt;/a&gt;
  Async methods without await
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#positive-case"&gt;
  &lt;/a&gt;
  Positive case
&lt;/h3&gt;

&lt;p&gt;Let's face the truth: JavaScript gives us hundreds of ways to shoot in a leg. And while &lt;code&gt;async/await&lt;/code&gt; syntax is very convenient, it is very easy to write a call that returns a promise without an &lt;code&gt;await&lt;/code&gt; in front of it. &lt;/p&gt;

&lt;p&gt;Let's see how this could cause issues in our tests. I will be writing a test for the same &lt;code&gt;UserView&lt;/code&gt; component we created in a previous example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render user info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserView&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alice"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test passes, and everything looks good. Indeed, for a user with an id "alice", our request should return the name "Alice".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#falsepositive-case"&gt;
  &lt;/a&gt;
  False-positive case
&lt;/h3&gt;

&lt;p&gt;Now, let's see if our test fails when we pass the incorrect id&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render user info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserView&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oops, it's still passing. But "bob"'s name should be Bob, not Alice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;The reason is the missing &lt;code&gt;await&lt;/code&gt; before asyncronous &lt;code&gt;waitFor&lt;/code&gt; call. Asyncronous method call will always return a promise, which will not be awaited on its own. Jest simply calls this line and finishes the test. No assertions fail, so the test is green. But if we add &lt;code&gt;await&lt;/code&gt; in front of &lt;code&gt;waitFor&lt;/code&gt;, the test will fail as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render user info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserView&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Unable to find an element with the text: Alice.

Ignored nodes: comments, &amp;lt;script /&amp;gt;, &amp;lt;style /&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div&amp;gt;
    Bob
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Never forget to await for async functions or return promises from the test (jest will wait for this promise to be resolved in this case). Otherwise, you may end up running tests that always pass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sideeffects-inside-waitfor"&gt;
  &lt;/a&gt;
  Side-effects inside waitFor
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-waitfor-works"&gt;
  &lt;/a&gt;
  How waitFor works
&lt;/h3&gt;

&lt;p&gt;First of all, let's recall what is &lt;code&gt;waitFor&lt;/code&gt;. It's an async RTL utility that accepts a callback and returns a promise. This promise is resolved as soon as the callback doesn't throw, or is rejected in a given timeout (one second by default). &lt;code&gt;waitFor&lt;/code&gt; will call the callback a few times, either on DOM changes or simply with an interval.&lt;/p&gt;

&lt;p&gt;Now, keeping all that in mind, let's see how side-effects inside &lt;code&gt;waitFor&lt;/code&gt; could lead to unexpected test behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#green-test"&gt;
  &lt;/a&gt;
  Green test
&lt;/h3&gt;

&lt;p&gt;Here, we have a component that renders a list of user transactions. Each list entry could be clicked to reveal more details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TransactionDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;merchant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="nx"&gt;merchant&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Description: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;merchant&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Merchant: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;merchant&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedTransactionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedTransactionId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTransactionsQuery&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;setSelectedTransactionId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;selectedTransactionId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Id: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedTransactionId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionDetails&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the test to cover this logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render transaction details&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Transactions&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Id: one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Description: Coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the transactions list appears only after the request is done, we can't simply call &lt;code&gt;screen.getByText('Id: one')&lt;/code&gt; because it will throw due to missing "Id: one" text. To avoid it, we put all the code inside &lt;code&gt;waitFor&lt;/code&gt; which will retry on error. So we are waiting for the list entry to appear, clicking on it and asserting that description appears.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hanging-test"&gt;
  &lt;/a&gt;
  Hanging test
&lt;/h3&gt;

&lt;p&gt;Now, let's add a bit more logic and fetch the transaction details as soon as it is clicked. Again, as in the very first example, we should not significantly change the test as the component basically stays the same. So we only want to add another assertion to make sure that the details were indeed fetched.&lt;/p&gt;

&lt;p&gt;We will slightly change the component to fetch more data when one of the transactions is selected, and to pass fetched merchant name inside &lt;code&gt;TransactionDetails&lt;/code&gt;. When nothing is selected, &lt;code&gt;useTransactionDetailsQuery&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;, and the request is only triggered when an id is passed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TransactionsWithDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTransactionsQuery&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTransactionDetailsQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedTransactionId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedTransactionId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionDetails&lt;/span&gt;
              &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;merchant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;merchant&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, the user sees the list of transactions. Then, as soon as one is clicked, details are fetched and shown.&lt;/p&gt;

&lt;p&gt;As was mentioned earlier, in our test we will only add another assertion to check that merchant name from the details is rendered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render transaction details&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionsWithDetails&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Id: one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Description: Coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Merchant: Mega Mall one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run our updated test, we could notice that the test runner hangs. And while it's relatively easy to find the problem when we deal with a single test, it's a pain to find such a broken one in another few hundred.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;Let's figure out what is happenning here. &lt;code&gt;waitFor&lt;/code&gt; is triggered multiple times because at least one of the assertions fails. Let's go through the sequence of calls, where each list entry represents the next &lt;code&gt;waitFor&lt;/code&gt; call:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;fireEvent.click(screen.getByText('Id: one'))&lt;/code&gt; fails as transactions list is not yet fetched, and "Id: one" text is not at the screen.&lt;/li&gt;
&lt;li&gt;"Id: one" is present and clicked, but now &lt;code&gt;expect(screen.getByText('Merchant: Mega Mall one')).not.toBeNull()&lt;/code&gt; fails as details are not yet fetched.&lt;/li&gt;
&lt;li&gt;The above successful &lt;code&gt;fireEvent.click&lt;/code&gt; triggered a DOM mutation, so &lt;code&gt;waitFor&lt;/code&gt; executes the callback once again. &lt;code&gt;fireEvent.click&lt;/code&gt; is triggered once again, closing the transaction description, and &lt;code&gt;expect(screen.getByText('Description: Coffee')).not.toBeNull()&lt;/code&gt; fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As at the third call &lt;code&gt;fireEvent.click&lt;/code&gt; caused another DOM mutation, we stuck in 2-3 loop. Transaction details are being opened and closed over and over again with no chance for the details request to complete and to render all the needed info.&lt;/p&gt;

&lt;p&gt;The fix for the issue is very straightforward: we simply need to move our side-effect (&lt;code&gt;fireEvent.click&lt;/code&gt;) out of &lt;code&gt;waitFor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render transaction details&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionsWithDetails&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Id: one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Description: Coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Merchant: Mega Mall one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As &lt;code&gt;waitFor&lt;/code&gt; is non-deterministic and you cannot say for sure how many times it will be called, you should never run side-effects inside it. Instead, wait for certain elements to appear on the screen, and trigger side-effects synchronously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-avoid-these-issues"&gt;
  &lt;/a&gt;
  How to avoid these issues
&lt;/h2&gt;

&lt;p&gt;The simplest way to stop making these mistakes is to add &lt;a href="https://github.com/testing-library/eslint-plugin-testing-library"&gt;eslint-plugin-testing-library&lt;/a&gt; to your eslint.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/testing-library/eslint-plugin-testing-library/blob/main/docs/rules/await-async-utils.md"&gt;testing-library/await-async-utils&lt;/a&gt; makes sure you are awaiting for async methods like &lt;code&gt;waitFor&lt;/code&gt; and &lt;code&gt;waitForElementToBeRemoved&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/testing-library/eslint-plugin-testing-library/blob/main/docs/rules/await-async-query.md"&gt;testing-library/await-async-query&lt;/a&gt; protects you against missing &lt;code&gt;await&lt;/code&gt;s with asyncronous &lt;code&gt;findBy...&lt;/code&gt; and &lt;code&gt;findAllBy...&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/testing-library/eslint-plugin-testing-library/blob/main/docs/rules/no-wait-for-side-effects.md"&gt;testing-library/no-wait-for-side-effects&lt;/a&gt; doesn't allow you to write side-effects inside &lt;code&gt;waitFor&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only thing it doesn't catch is &lt;code&gt;await render&lt;/code&gt;, but works perfectly well for everything else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Debugging asynchronous tests could be pretty difficult, but you could simply make your tests more failure-proof avoiding the mistakes I described above.&lt;/p&gt;

&lt;p&gt;Unfortunately, most of the "common mistakes" articles only highlight bad practices, without providing a detailed explanation. I hope I closed this gap, and my post gave you enough details on why the above mistakes should be avoided.&lt;/p&gt;

&lt;p&gt;And make sure you didn't miss rather old but still relevant Kent C. Dodds' &lt;a href="https://kentcdodds.com/blog/common-mistakes-with-react-testing-library"&gt;Common mistakes with React Testing Library&lt;/a&gt; where more issues are described.&lt;/p&gt;

</description>
      <category>react</category>
      <category>testing</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
