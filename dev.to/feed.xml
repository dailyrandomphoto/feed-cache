<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Add a Team Poll to Any Rocket.Chat Channel</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Tue, 25 Jan 2022 05:31:10 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/add-a-team-poll-to-any-rocketchat-channel-35fj</link>
      <guid>https://dev.to/rohanlekhwani/add-a-team-poll-to-any-rocketchat-channel-35fj</guid>
      <description>&lt;p&gt;Have you ever wished to measure your team‚Äôs sentiments on a topic with a live poll? There is a free Rocket.Chat app for that!&lt;/p&gt;

&lt;p&gt;As many of you discovered already, you can easily use the poll app to perform basic polls. But most of you found the existing poll app rather limiting. We heard you!&lt;/p&gt;

&lt;p&gt;We‚Äôve launched a new app ‚Äî the &lt;a href="https://rocket.chat/apps/poll-plus"&gt;Poll Plus&lt;/a&gt; app that can do much more than the old app on Rocket.Chat. It‚Äôs ability to allow user-defined options, post word clouds, conduct live polls and re-use poll templates make it a Poll App with superpowers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-not-me-allow-everyone-to-add-options"&gt;
  &lt;/a&gt;
  Why You Not Me ‚Äî Allow Everyone to Add Options!
&lt;/h2&gt;

&lt;p&gt;Earlier, poll options could not be changed after the poll creator posted the poll in a room. While this works fine, Poll Plus does this better and further engages your community by allowing room members to add options after posting the poll!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRKS9tK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AheEyYhjhSrkhLGBD" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRKS9tK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AheEyYhjhSrkhLGBD" alt="Allow room members to add options üôå" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-polls-unlimited-timed-polls"&gt;
  &lt;/a&gt;
  Live Polls ‚Äî Unlimited, Timed Polls
&lt;/h2&gt;

&lt;p&gt;What if you could conduct standup or retro feedback for your teams right within Rocket.Chat? Or, perhaps, could schedule live quizzes for your class to be retrieved on the test day? Introducing Live Polls. Live Polls are a collection of polls with a customizable end time-limit for each poll.&lt;/p&gt;

&lt;p&gt;Create a live poll by sending &lt;code&gt;/poll live &amp;lt;number of polls&amp;gt;&lt;/code&gt; within any room. For example, if you want a total of two questions, send &lt;code&gt;/poll live 2&lt;/code&gt;, which opens up the poll creator modal.&lt;/p&gt;

&lt;p&gt;Each poll within a Live Poll has a time limit to vote upon after which the current Poll ends and the next one is posted. Poll creators can also click on the ‚ÄúNext Poll‚Äù button to trigger a pre-scheduled finish of the current Poll.&lt;/p&gt;

&lt;p&gt;The ‚ÄúTime limit to vote‚Äù each poll is set as the number of seconds you want that poll to be active.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at the Live Poll in action!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Soi4VGvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AkI4OgOfFq4UTLkuA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Soi4VGvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AkI4OgOfFq4UTLkuA" alt="Live Polls üöÄ" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-poll-template-and-reuse-later"&gt;
  &lt;/a&gt;
  Save Poll Template and Reuse Later
&lt;/h3&gt;

&lt;p&gt;Speaking of teachers using Rocket.Chat for exams, the Live Poll Late Retrieval feature proves an excellent tool for teachers to create quizzes even weeks before and then schedule the quiz on D-day with ease. All this while having control over the time limit to answer each question.&lt;/p&gt;

&lt;p&gt;To use the Late Retrieval feature make use of the save subcommand in the format: &lt;code&gt;/poll live save &amp;lt;number of polls&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Post-creation of the Live Poll, a message along with the poll id to retrieve it will be visible only to the poll creator like in the following image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHzru8Pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik85wjzr3fslrej2plrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHzru8Pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik85wjzr3fslrej2plrr.png" alt="Save Polls and Retrieve Later" width="674" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make use of the &lt;code&gt;/poll live &amp;lt;id&amp;gt;&lt;/code&gt; command to ‚Äúplay‚Äù the Live Poll. Here  is the poll id that was visible to the poll creator.&lt;/p&gt;

&lt;p&gt;You can find more information about this feature within its documentation &lt;a href="https://docs.rocket.chat/guides/app-guides/poll-plus/guides/live-poll#late-retrieval"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#word-clouds-visualize-your-polls-better"&gt;
  &lt;/a&gt;
  Word Clouds ‚Äî Visualize Your Polls Better!
&lt;/h2&gt;

&lt;p&gt;Imagine a better way to visualize your poll results. No we‚Äôre not talking about adding colors to bar graphs (we did that already in Poll Plus xD ), we‚Äòre talking about word clouds! Bar graphs are okay, word clouds are awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rljAH3uU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7kg8kb9i5v6qgvna0dr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rljAH3uU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7kg8kb9i5v6qgvna0dr.png" alt="Visualize your poll results better with word clouds ‚òÅÔ∏è" width="700" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Poll Plus requires a word cloud API that returns image results to actually post the word cloud. The URL to the API can be set by the Rocket.Chat administrator from the Poll Plus settings menu.&lt;/p&gt;

&lt;p&gt;By default, the &lt;a href="https://quickchart.io/documentation/word-cloud-api/"&gt;Quickchart&lt;/a&gt; word cloud API is pre-filled. A limitation of using the free version of Quickchart API is a rate-limitation of 60 requests per min per IP and requirement of public Internet access. If your Rocket.Chat server is hosted on-premise or if you require more customizations than Quickchart, we‚Äôve open-sourced a word cloud API &lt;a href="https://github.com/RonLek/wordcloud-api"&gt;here&lt;/a&gt;. It‚Äôs usage can also be seen in the settings menu image above.&lt;/p&gt;

&lt;p&gt;In the event you leave the endpoint field blank or the API doesn‚Äôt return a valid result, the Poll Plus app would instead display the poll summary when the word cloud is set to enabled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-based-polls"&gt;
  &lt;/a&gt;
  Template Based Polls
&lt;/h2&gt;

&lt;p&gt;Tired of repetitively filling out the same options to your Poll? Just use template based polls. The Poll Plus App includes pre-filled templates for five most commonly used poll types ‚Äî 1-to-5 poll, 1-to-10 poll, Agree/Disagree polls, Overrated/Underrated polls, Emoji Rank polls. Just type your questions and let Poll Plus do the cumbersome job of filling in the options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiO8Q0tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AU8VnO0jTl-LkuF5-" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiO8Q0tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AU8VnO0jTl-LkuF5-" alt="Emoji Rank Poll üòé" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mixed-visibility-polls"&gt;
  &lt;/a&gt;
  Mixed Visibility Polls
&lt;/h2&gt;

&lt;p&gt;Don‚Äôt want to hurt someone‚Äôs feelings on a Men In Black 3 like/dislike poll? Just make the dislike option Anonymous with Mixed Visibility Poll mode.&lt;/p&gt;

&lt;p&gt;In addition to completely revealing or veiling the identities of voters through the open and confidential visibilities mode, Poll Plus gives you the middle way out. With Poll Plus poll creators have the flexibility of customizing which options should not reveal voter identities. Here‚Äôs how it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyWatarZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AKNM3zBvECVOSp7-_" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tyWatarZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AKNM3zBvECVOSp7-_" alt="Mixed Visibility Poll Options üëÄ" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upgrade-your-polling-experience-with-poll-plus-today"&gt;
  &lt;/a&gt;
  Upgrade Your Polling Experience with Poll Plus Today!
&lt;/h2&gt;

&lt;p&gt;Poll Plus is a major upgrade over the older Poll App. Conduct team activities like stand-up, retro or opinion polls without leaving Rocket.Chat. Plan quizzes for your students and post them on the exam day or just post polls to know what your friends think of your favorite movie!&lt;/p&gt;

&lt;p&gt;Poll Plus is completely free and open-source, forever. Download Poll Plus from the &lt;a href="https://rocket.chat/apps/poll-plus"&gt;Rocket.Chat App Marketplace&lt;/a&gt;. On-premise users can directly clone the &lt;a href="https://github.com/Poll-Plus/rocket.chat.app-poll"&gt;Poll Plus repository&lt;/a&gt; and install it for their servers using the Rocket.Chat Apps-Engine.&lt;/p&gt;

&lt;p&gt;Get started with the feature-by-feature installation, set-up and usage &lt;a href="https://docs.rocket.chat/guides/app-guides/poll-plus"&gt;documentation&lt;/a&gt; for the Poll Plus app.&lt;/p&gt;

&lt;p&gt;Want to see a feature we missed including within Poll Plus? Raise an &lt;a href="https://github.com/Poll-Plus/rocket.chat.app-poll/issues"&gt;issue&lt;/a&gt; or start a &lt;a href="https://github.com/Poll-Plus/rocket.chat.app-poll/discussions"&gt;discussion&lt;/a&gt; on the Poll Plus repository and we‚Äôll be in touch!&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.ü•§&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploy JMeter on AWS using Terraform</title>
      <author>NaveenKumar Namachivayam ‚ö°</author>
      <pubDate>Tue, 25 Jan 2022 04:43:37 +0000</pubDate>
      <link>https://dev.to/aws-builders/deploy-jmeter-on-aws-using-terraform-448k</link>
      <guid>https://dev.to/aws-builders/deploy-jmeter-on-aws-using-terraform-448k</guid>
      <description>&lt;p&gt;Maintaining JMeter infrastructure for performance testing, CI/CD integration with the enterprise pipeline, and managing are cumbersome tasks. By leveraging the Infrastructure as Code solution, Terraform is one of the excellent ways to build, manage, and deploy JMeter infrastructure quickly and efficiently. In this blog, we are going to dive deeper into spinning up an AWS infrastructure with JMeter using Terraform.&lt;/p&gt;

&lt;h2&gt;What is Infrastructure as Code?&lt;/h2&gt;

&lt;p&gt;Infrastructure as Code (IaC) helps to build, change, and version infrastructure safely and efficiently. &lt;/p&gt;

&lt;h2&gt;What is Terraform?&lt;/h2&gt;

&lt;p&gt;Terraform is an IaC tool from HashiCorp. It comes with three flavors: CLI, Cloud, and Enterprise. Terraform's mantra is: Write, Plan, and Apply.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Terraform is an open-source infrastructure as code software tool that provides a consistent CLI workflow to manage hundreds of cloud services. Terraform codifies cloud APIs into declarative configuration¬†files.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This blog post will not enlighten you about Terraform. But it focuses on how to deploy the vanilla JMeter and JMeter plugins on AWS.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;The following are the prerequisites required to deploy JMeter on AWS using Terraform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Console access to create relevant IAM roles, access keys, and secrets&lt;/li&gt;
&lt;li&gt;Terraform CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;AWS Setup&lt;/h2&gt;

&lt;h3&gt;Key Pair&lt;/h3&gt;

&lt;p&gt;To access EC2 instances, we need to create a key pair in AWS. To create a new key pair, follow the below steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log into AWS console&lt;/li&gt;
&lt;li&gt;Navigate to EC2 -&amp;gt; Key Pairs&lt;/li&gt;
&lt;li&gt;Create a new key pair w/ RSA and Private Key format (PEM)&lt;/li&gt;
&lt;li&gt;Save the private key to a file in a secure location&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2022/01/image-14.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWKcTEuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2022/01/image-14.png" alt="Creating a new key pair on AWS" width="820" height="725"&gt;&lt;/a&gt;Creating a new key pair on AWS&lt;/p&gt;

&lt;h3&gt;IAM User&lt;/h3&gt;

&lt;p&gt;To manage the AWS resources on Terraform, it is recommended to create a new IAM user with Access key credential type. To create a new IAM user, go to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IAM Dashboard on AWS&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Users -&amp;gt; Add users&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Enter valid user name and select &lt;strong&gt;&lt;code&gt;Access key - Programmatic access&lt;/code&gt;&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Next: Permissions&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Attach existing policies directly&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Check &lt;a href="https://console.aws.amazon.com/iam/home#/policies/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2FAdministratorAccess"&gt;&lt;code&gt;AdministratorAccess&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;AmazonEC2FullAccess&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Next: Tags&lt;/strong&gt;. Enter the appropriate tags.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Next: Review&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create user&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Store the Access Key ID and secret access key in a secured location. We need this info to configure it into AWS CLI.&lt;/p&gt;

&lt;h3&gt;AWS CLI&lt;/h3&gt;

&lt;p&gt;Download the AWS CLI from https://aws.amazon.com/cli/ &lt;/p&gt;

&lt;p&gt;Based on your operating system, launch the AWS CLI program and validate the version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws --version&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To configure AWS CLI, enter &lt;code&gt;aws configure&lt;/code&gt; and press the enter key in the terminal. Enter the access key, secret, and other required details and configure it properly.&lt;/p&gt;

&lt;h3&gt;Terraform&lt;/h3&gt;

&lt;p&gt;To download Terraform, head to https://www.terraform.io/downloads and follow the instructions to download it for your operating system. In this demo, I am going to use Ubuntu 20.04 in WSL.&lt;/p&gt;

&lt;p&gt;To validate the Terraform installation, enter &lt;code&gt;terraform --version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To install, auto complete &lt;code&gt;terraform -install-autocomplete&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To spin the EC2 instances for JMeter, make a new directory &lt;code&gt;mkdir JMeter-AWS-Terraform&lt;/code&gt;. We are going to use this directory to write some basic HCL. Terraform uses a declarative language called HashiCorp Configuration Language, which tells Terraform how to manage the resources.&lt;/p&gt;

&lt;h2&gt;JMeter on AWS using Terraform&lt;/h2&gt;

&lt;h3&gt;Terraform Write&lt;/h3&gt;

&lt;p&gt;Inside &lt;code&gt; JMeter-AWS-Terraform &lt;/code&gt;, create a new file &lt;code&gt;main.tf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Copy and paste the below &lt;a href="https://registry.terraform.io/modules/QAInsights/jmeter/aws/latest" rel="noreferrer noopener"&gt;Terraform module&lt;/a&gt; into &lt;code&gt;main.tf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT: &lt;em&gt;We are going to spin &lt;code&gt;t2.small&lt;/code&gt; instance type in this demo which is NOT under FREE TIER. &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module "jmeter" {
  source  = "QAInsights/jmeter/aws"
  version = "1.1.2"

  aws_ami           = "ami-001089eb624938d9f"
  aws_instance_type = "t2.small"
  aws_key_name      = "terraform"
  jmeter_version    = "5.4.3"
  jmeter_plugins    = ["jpgc-casutg"]
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above configuration leverages the Terraform module which I have published in the Terraform registry. It expects four inputs: ami, instance type, key name, and JMeter plugins. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://registry.terraform.io/modules/QAInsights/jmeter/aws/latest" rel="noreferrer noopener"&gt;JMeter Terraform Module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!-- /wp:button --&amp;gt;&lt;/p&gt;

&lt;p&gt;By default, it installs JMeter 5.4.3 and &lt;a href="https://registry.terraform.io/modules/QAInsights/jmeter/aws/latest?tab=inputs" rel="noreferrer noopener"&gt;other variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started, enter &lt;code&gt;terraform init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will download the Terraform plugins, modules, and other dependencies.&lt;/p&gt;

&lt;h3&gt;Terraform Plan&lt;/h3&gt;

&lt;p&gt;The next step is to plan the resources. The output of the below command will help us to see the resources' that will get created or changed.&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;terraform plan&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the partial output of plan command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.jmeter.module.jmeter_server.aws_instance.this will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-001089eb624938d9f"  
      + arn                                  = (known after apply)      
      + associate_public_ip_address          = (known after apply)      
      + availability_zone                    = (known after apply)      
      + cpu_core_count                       = (known after apply)      
      + cpu_threads_per_core                 = (known after apply)      
      + disable_api_termination              = (known after apply)      
      + ebs_optimized                        = (known after apply)      
      + get_password_data                    = false


...
...
...

Plan: 1 to add, 0 to change, 0 to destroy.&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Terraform Apply&lt;/h3&gt;

&lt;p&gt;The last step in provisioning the infrastructure on AWS is to send &lt;code&gt;terraform apply&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It will prompt you to review and enter &lt;code&gt;yes&lt;/code&gt; to start provisioning. For automation purpose, you can use &lt;code&gt;terraform apply --auto-approve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Terraform will make changes to the AWS infrastructure based on the current state. As we are spinning up the new instances, after less than a minute, a new EC2 instance will be up and running. &lt;/p&gt;

&lt;p&gt;Launch the EC2 Instances page, navigate to the Ohio region where you can see an EC2 instance is up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2022/01/image-15.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dG9pCtaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2022/01/image-15.png" alt="Deploy JMeter on AWS using Terraform" width="880" height="217"&gt;&lt;/a&gt;Deploy JMeter on AWS using Terraform&lt;/p&gt;

&lt;p&gt;Copy the public IP address of that instance to ssh into it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i &amp;lt;pem-key&amp;gt; ec2-user@&amp;lt;public-IP-address&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JMeter has been installed in the home directory. To validate it, enter `jmeter -v`&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2022/01/image-16.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHlxAUbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2022/01/image-16.png" alt="JMeter 5.4.3 on AWS" width="880" height="184"&gt;&lt;/a&gt;JMeter 5.4.3 on AWS&lt;/p&gt;

&lt;p&gt;The Terraform module also installs JMeter plugin &lt;code&gt;jpgc-casutg&lt;/code&gt;. This can be configured in the &lt;code&gt;main.tf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To validate, &lt;code&gt;sudo cat /var/log/cloud-init-output.log&lt;/code&gt; to view the log.&lt;/p&gt;

&lt;p&gt;Within a few minutes, you have an EC2 instance with Java, JMeter, and JMeter plugins for performance testing. Terraform allows us to configure all the parameters under the hood, e.g. AWS region, VPC, instance types, and more. This Terraform module uses a lot of default values for AWS. If you are looking for anything specific to configure, please let me know in the GitHub repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/QAInsights/terraform-aws-jmeter" rel="noreferrer noopener"&gt;JMeter Terraform Module Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!-- /wp:button --&amp;gt;&lt;/p&gt;

&lt;p&gt;In this example, we have spun up a &lt;code&gt;t2.small&lt;/code&gt; type. If you keep running, your AWS bill is going to hit the roof. &lt;/p&gt;

&lt;p&gt;To destroy the resources, enter &lt;code&gt;terraform destroy --auto-approve&lt;/code&gt;. CAUTION: This command is non-reversible.&lt;/p&gt;

&lt;p&gt;Within a minute, EC2 instance will be deleted.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Integrating performance tests in the enterprise pipeline is crucial for shift-left and adopting DevOps practice. Managing the infrastructure for performance tests is time-consuming and error-prone. By leveraging IaC tools like Terraform, it is easy and quick to spin up the resources and destroy them once the need is done. In the next blog post, we are going to see how to deploy JMeter distributed load test infrastructure on AWS using Terraform.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>terraform</category>
      <category>performance</category>
      <category>jmeter</category>
    </item>
    <item>
      <title>UseState is asynchronous: Learn how to use useState and useEffect properly</title>
      <author>Fidal Mathew</author>
      <pubDate>Tue, 25 Jan 2022 04:16:01 +0000</pubDate>
      <link>https://dev.to/fidalmathew/usestate-is-asynchronous-learn-how-to-use-usestate-and-useeffect-properly-1m1m</link>
      <guid>https://dev.to/fidalmathew/usestate-is-asynchronous-learn-how-to-use-usestate-and-useeffect-properly-1m1m</guid>
      <description>&lt;p&gt;Hello readers, today I‚Äôm gonna talk about one of the issues I faced when I was making projects using React js.&lt;/p&gt;

&lt;p&gt;UseState is asynchronous, let me show you what I mean via a small example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;effect &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addVal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ADD&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are having a state variable named &lt;strong&gt;val&lt;/strong&gt; initialized with 0.&lt;/p&gt;

&lt;p&gt;We also have a button, which on click, calls a function addVal()&lt;/p&gt;

&lt;p&gt;addVal() has the following functions -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set the state of val by incrementing it. &lt;br&gt;
It is done by &lt;code&gt;setVal(val+1)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Console.log(val);&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also have a useEffect that is triggered when state of val changes.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at the console after clicking the button once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NxNSyELz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzfycreq49et39oy52px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NxNSyELz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzfycreq49et39oy52px.png" alt="console.log" width="654" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. First&lt;/strong&gt; - The first console is of useEffect when the page first loads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Second&lt;/strong&gt; - The second console is due to the addVal function. &lt;br&gt;
After, we update the state of val. &lt;/p&gt;

&lt;p&gt;But, the value which gets printed remains the same i.e &lt;strong&gt;0&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So, what happening? The value of &lt;em&gt;val&lt;/em&gt; isn‚Äôt updated immediately, useState is asynchronous. It takes time to update so it allows rest of the program to continue and updates the value later. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Third&lt;/strong&gt; - The third console log is due to the useEffect, which displays the value of &lt;em&gt;val&lt;/em&gt; after the state is updated i.e &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I hope you understood the concept and remember to manage your state changes using useEffect. I have made a lot of mistakes, not knowing the concept completely. I hope you don‚Äôt make them too.&lt;/p&gt;

&lt;p&gt;Keep learning and thanks for reading :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feel free to connect with me on -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fidalmathew10"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FidalMathew"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/fidal-mathew-82aba7200/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Is Angular Dead in 2022?</title>
      <author>Jonathan Gamble</author>
      <pubDate>Tue, 25 Jan 2022 04:13:29 +0000</pubDate>
      <link>https://dev.to/jdgamble555/is-angular-dead-in-2022-bh9</link>
      <guid>https://dev.to/jdgamble555/is-angular-dead-in-2022-bh9</guid>
      <description>&lt;p&gt;In case you're unaware, Google has had an interesting track record in the Framework category. Not all of these are technically frameworks, but can be used as such.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frameworks"&gt;
  &lt;/a&gt;
  Frameworks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt; - DEAD Recently&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular.io/"&gt;Angular 2&lt;/a&gt; - Every version up until 13, not confusing at all&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://polymer-library.polymer-project.org/"&gt;Polymer&lt;/a&gt; - DEAD Recently&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angularjs.org/"&gt;Lit&lt;/a&gt; - Replaced Polymer for web components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular.io/guide/universal"&gt;Angular Universal&lt;/a&gt; - A package for Angular 2 to add SSR functionality&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/angulardart"&gt;Angular Dart&lt;/a&gt; - DEAD Recently, although still used at Google internally for certain Google Apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt; - Not Google, worth mentioning because mainly used with Angular to build multi-platform apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt; - IMHO best multi-platform app builder, arguably except for the web (DART instead of JS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have been paying attention to the latest Framework features, particularly NextJS and Sveltekit (NUXT too), you see these new ideas and features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Incredibly small bundle sizes&lt;/li&gt;
&lt;li&gt;Small build times&lt;/li&gt;
&lt;li&gt;Easy SSR Deployment to different hosting environments&lt;/li&gt;
&lt;li&gt;Incremental Static Regeneration (ISR)&lt;/li&gt;
&lt;li&gt;Automatic Static Optimization&lt;/li&gt;
&lt;li&gt;SSR Streaming&lt;/li&gt;
&lt;li&gt;File System API with Dynamic Routing&lt;/li&gt;
&lt;li&gt;ESLint Built-in&lt;/li&gt;
&lt;li&gt;Edge Functions (Middleware)&lt;/li&gt;
&lt;li&gt;Edge Network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what's going on with Angular? Well, let's take the cases one-by-one, including what you didn't know Angular &lt;strong&gt;CAN&lt;/strong&gt; do, or partly do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The bundle sizes and built times are terrible in Angular, even with the newer IVY compiler. This desperately needs work. It took me 15 min to compile my &lt;a href="https://fireblog.io"&gt;fireblog.io&lt;/a&gt; site, although I admit there are probably many ways I could tweak it. Lazy-loading is pretty much your only option here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deployment - This is actually not an issue. There are plugins for Angular Universal for all hosting environments except Vercel. However, you &lt;a href="https://dev.to/jdgamble555/how-to-deploy-angular-universal-to-vercel-31d0"&gt;can deploy&lt;/a&gt; to Vercel, as long as you don't have a package bigger than 50MB, which could be a problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ISR and Static Optimization - I am not a fan of this in NextJS. You're basically creating a static page with JavaScript on it. You could manually write this code, but why would you. Your meta data would not dynamically update. I also don't want to automatically generate a static page, as I would prefer to chose it myself. However, I could definitely see the use of this depending on your site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nextjs.org/docs/advanced-features/react-18"&gt;SSR Streaming&lt;/a&gt;. I have seen on REDIT arguments why this is overkill. This is basically using HTTP Streaming to send asynchronous data (promises) to the server. This is potentially against the HTTP protocol from my understanding, and you're creating a promise with the browser to only get resolved when finished. It is in Alpha mode in NextJS, but very interesting. A stream is different from an observable in that it can be run only once, but here the promise &lt;em&gt;IS&lt;/em&gt; the browser since it is technically a promise which uses the http protocol. This is also on Rich Harris's list for SvelteKit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;File System API - This uses the dynamic routing feature from React, and serverless functions in SSR mode. This was emulated for Svelte and Vue. NextJS and Nuxt (soon SvelteKit) compile each route to its own serverless function. This explains why Vercel only allows 50MB lambdas.  While this sounds good, I am not a fan of this at all. React just does routing differently than Angular. The extra-function will create another cold start on each route. I suggest loading just the original route via server, and then client lazy-load the other routes (if you use Angular or any of them). Cold starts are the problem. That being said, this seems to be a norm Angular is ignoring, although Google creates its own norms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular will eventually have es-lint built-in like it used to have TS Lint, right?  Well, until then, the semi-official solution seems to be &lt;a href="https://github.com/angular-eslint/angular-eslint#readme"&gt;this package&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Edge - So, if you host on Google, it recently has an &lt;a href="https://peering.google.com/"&gt;edge network&lt;/a&gt; with all the great features a CDN should have. However, even though it is not too difficult to configure, you still have to configure and pay for it; it does not work out-of-the box. There is also &lt;a href="https://cloud.google.com/blog/topics/hybrid-cloud/announcing-google-distributed-cloud-edge-and-hosted"&gt;edge computing&lt;/a&gt; for those micro calculations. This is pretty much exactly what Vercel's Middleware is. Unfortunately it is not built into Angular, and I don't even know if you could configure it for SSR purposes. This could be a way to do my &lt;a href="https://dev.to/jdgamble555/the-best-frameworks-and-servers-for-2022-on-the-edge-mmj"&gt;puppeteer&lt;/a&gt; idea.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  Roadmap
&lt;/h2&gt;

&lt;p&gt;You can view the &lt;a href="https://angular.io/guide/roadmap"&gt;Angular Roadmap&lt;/a&gt;. A few things of note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://angular.io/guide/roadmap#investigate-micro-frontend-architecture-for-scalable-development-processes"&gt;Micro frontend architecture&lt;/a&gt;. Well, more automatic lazy-loading separated components. This is absolutely the most important thing that I see. Sounds interesting.&lt;/li&gt;
&lt;li&gt;Zone.js opt-out... the reason async await doesn't work like you think for components, I am pro this&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular.io/guide/roadmap#ergonomic-component-level-code-splitting-apis"&gt;Code-splitting&lt;/a&gt; - nuff said&lt;/li&gt;
&lt;li&gt;New Angular Material 3 built-in... freaking cool here&lt;/li&gt;
&lt;li&gt;Optional NgModules with Standalone pipes and directives - See &lt;a href="https://www.youtube.com/watch?v=H7ujja2TxEo"&gt;this video&lt;/a&gt;. This will help the speed with less coding, although some might not like this.&lt;/li&gt;
&lt;li&gt;Lots of more diagnostics and tools you would expect from Google&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Obviously the answer here is NO. A big fat no. It is not dead, and it will continue to strive for a long long time. However, I don't think it is trying to be something it is not. It does not have experimental features like HTTP Streaming, and it is not in-style using ISR and the File System API. I suspect if HTTP Streaming catches on, it will &lt;em&gt;eventually&lt;/em&gt; incorporate it. ISR is cool, but probably not at the top of the list. I believe that is a fad just for React. The File System API, I am not so sure about. I think it depends on what the Angular team "discovers" while doing code-splitting and micro frontend architecture research.&lt;/p&gt;

&lt;p&gt;That being said the build time and build size are disastrous... for a reason: Angular is a beast. Angular has all of these items all enterprise apps have to add, built-in. Angular may have a much smaller package size for larger apps, since it has incorporated these packages within Angular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reasons-to-choose-angular"&gt;
  &lt;/a&gt;
  Reasons to Choose Angular
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is Polished&lt;/li&gt;
&lt;li&gt;Testing, Typescript, Build Options, Logic&lt;/li&gt;
&lt;li&gt;You are building a serious app, enterprise grade&lt;/li&gt;
&lt;li&gt;You learned Angular through &lt;a href="//fireship.io"&gt;fireship.io&lt;/a&gt;, although he now prefers React (SMH)&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.madewithangular.com/categories/google/"&gt;Google and Microsoft&lt;/a&gt; build most of their apps with it. Yes, those two small companies you may have heard of.&lt;/li&gt;
&lt;li&gt;You want to deploy your app somewhere besides Vercel (unless your app is small)&lt;/li&gt;
&lt;li&gt;You hate bootstrap and want to use the latest, best Material UI package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key word is here, &lt;strong&gt;enterprise&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;But I'm currently building my app in SvelteKit, despite the framework being ready for production builds... I guess I am my own leader...&lt;/p&gt;

&lt;p&gt;J&lt;/p&gt;

</description>
      <category>angular</category>
      <category>angularuniversal</category>
      <category>framework</category>
      <category>javascript</category>
    </item>
    <item>
      <title>In-depth of tnpm rapid mode - how we managed to be 10 second faster than pnpm</title>
      <author>TZ | Â§©Áå™</author>
      <pubDate>Tue, 25 Jan 2022 03:37:16 +0000</pubDate>
      <link>https://dev.to/atian25/in-depth-of-tnpm-rapid-mode-how-could-we-fast-10s-than-pnpm-3bpp</link>
      <guid>https://dev.to/atian25/in-depth-of-tnpm-rapid-mode-how-could-we-fast-10s-than-pnpm-3bpp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;As a front-end veteran, I have to point out that the increasing complexity of front-end projects nowadays makes the dependency installation slower and slower.&lt;/p&gt;

&lt;p&gt;At Alibaba and Ant Group, Engineering Productivity is an important metric for engineers, and the speed of installation of front-end dependencies is a big negative impact factor. &lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are the team responsible for front-end infrastructure in Ant Group.&lt;/strong&gt; We mainly focus on building the Node.js community within the company and maintaining many open-source projects like &lt;a href="https://github.com/eggjs"&gt;eggjs&lt;/a&gt; and &lt;a href="https://github.com/cnpm"&gt;cnpm&lt;/a&gt;.&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;We started an initiative in 2021, one of its goals was to optimize the installation speed of dependencies. We managed to speed up the dependency installation by 3 times.&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this article, we'd like to share with you the ideas and results of 'tnpm rapid mode'.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8B4ieAWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txp5r13jdas28ebdfnmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8B4ieAWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txp5r13jdas28ebdfnmy.png" alt="tnpm rapid" width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thank &lt;a href="https://github.com/sodatea"&gt;@sodatea&lt;/a&gt;,  &lt;a href="https://github.com/HerringtonDarkholme/"&gt;@nonamesheep&lt;/a&gt;, @Sikang Bian(RichSFO), &lt;a href="https://github.com/geekdada"&gt;@geekdada&lt;/a&gt; so much for the translation of &lt;a href="https://www.yuque.com/egg/nodejs/tnpm-rapid-en"&gt;this article&lt;/a&gt;, the &lt;a href="https://zhuanlan.zhihu.com/p/455809528"&gt;original article&lt;/a&gt; was written by &lt;a href="https://github.com/atian25"&gt;@atian25&lt;/a&gt; and published on Zhihu.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-is-npm-soooo-slow"&gt;
  &lt;/a&gt;
  Why is npm soooo slow?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a94lWuc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mofif0st4p300fqi55f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a94lWuc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mofif0st4p300fqi55f3.png" alt="npm-so-slow" width="286" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the modern front-end ecosystem, the number of total modules has been exploding and the dependency graphs are becoming increasingly complex.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are a galaxy of modules in the ecosystem. With &lt;a href="http://www.modulecounts.com/"&gt;over 1.8 million npm packages in total&lt;/a&gt;, npm has several times as many modules as in other languages by the end of 2021. &lt;/li&gt;
&lt;li&gt;Module relationships are becoming exceedingly complex. Duplicate dependencies and lots of small files are wasting disk space and slowing down disk writes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The front-end module system prefers small and well-crafted modules. While this brought unprecedented prosperity to the community, it also resulted in complex dependencies which directly led to slower installation. There are trade-offs to be made. &lt;/p&gt;

&lt;p&gt;Whether the ecological status quo is correct or not is way beyond the scope of our discussion today, so let's focus on how to improve installation speed for the time being.&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSCC6HTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwvwkicvc8iubzsbv0hl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSCC6HTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwvwkicvc8iubzsbv0hl.jpg" alt="how-npm-install-works" width="880" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dependencies installation process for an application is briefly illustrated as above, with the &lt;strong&gt;key operations&lt;/strong&gt; including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Query the package information of the child dependencies and then get the download address. &lt;/li&gt;
&lt;li&gt;Download the tgz package locally, unzip it, then install it.&lt;/li&gt;
&lt;li&gt;Create the 'node_modules' directory and write the downloaded files under it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Äã&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependencies-installation"&gt;
  &lt;/a&gt;
  Dependencies Installation
&lt;/h3&gt;

&lt;p&gt;Let's take &lt;code&gt;vuepress@1.9.2&lt;/code&gt; as an example. It has about &lt;strong&gt;1000 distinct dependencies&lt;/strong&gt;, taking up 170MB disk spaces with 18542 files.&lt;/p&gt;

&lt;p&gt;But if we install the dependencies in a nested way following npm@2's implementation, we'll end up installing as many as 3626 dependency packages. There are more than &lt;strong&gt;2000 redundant dependencies&lt;/strong&gt;. And the actual disk footprint is 523MB with 60257 files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File I/O operations are very costly, especially for reading/writing large numbers of small files.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;npm@3 first came up with an optimization idea to solve the problem of duplicated dependencies + unnecessarily deep hierarchies: the &lt;a href="https://npm.github.io/how-npm-works-docs/npm3/how-npm3-works.html"&gt;flattening dependency&lt;/a&gt; capability, where all child dependencies are slapped flat under &lt;em&gt;node_modules&lt;/em&gt; in the root directory.&lt;/p&gt;

&lt;p&gt;However, this optimization ended up introducing new problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rushjs.io/pages/advanced/phantom_deps"&gt;Phantom dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rushjs.io/pages/advanced/npm_doppelgangers"&gt;NPM doppelgangers&lt;/a&gt;. It might still result in several copies of the same package (e.g. there are still 183 duplicate packages in the abovementioned example)&lt;/li&gt;
&lt;li&gt;Non-deterministic dependency structure (though this is solvable via dependencies graph)&lt;/li&gt;
&lt;li&gt;The performance penalty from a complex flattening algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given so many side effects of the 'flattening dependencies', &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt; proposed an alternative solution, by means of &lt;strong&gt;symbolic + hard links&lt;/strong&gt;.&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWWejqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k65f7i6zz2t3i93zdbol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWWejqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k65f7i6zz2t3i93zdbol.png" alt="pnpm" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach works great because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It reduces package duplications while staying compatible with the resolution algorithm of Node.js. The method does not introduce side effects like phantom dependencies, doppelgangers, etc. &lt;/li&gt;
&lt;li&gt;The hard linking approach with global caching reduces file duplication and saves disk footprint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resulting data speaks for itself: 1109 modules, 18747 files, 5435 directories, 3150 symlinks, 175M disk footprint.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Similarly inspired by pnpm, we've refactored and implemented &lt;code&gt;cnpm/npminstall&lt;/code&gt;in cnpm to utilize symlinks. But it didn't make use of hard links, neither did it hoist transitive dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, it is worth noting that there are some potential issues of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've observed symbolic linking could cause &lt;strong&gt;indexing problems&lt;/strong&gt; with dead loops in some IDEs (like WebStorm and VSCode) several years ago. This issue, which might not be fully resolved, should've been mitigated with IDE optimizations nowadays.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compatibility&lt;/strong&gt;. Relative paths need to be adapted for plug-in loading logic like EggJS and Webpack as they &lt;strong&gt;may not follow the Node.js standard resolving strategy&lt;/strong&gt;, which looks modules up in the directory structure till the root of the disk.&lt;/li&gt;
&lt;li&gt;The dependencies of different applications are hard-linked to the same file, so modifying the file while debugging may inadvertently affect other projects. &lt;/li&gt;
&lt;li&gt;Hard links cannot be used across the file system. And the implementation of symlinks varies among different operating systems. Moreover, there is still some performance loss due to disk IO on non-SSD hard disks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, yarn also proposed other optimizations such as Plug'n'Play. Since it is too radical to be compatible with the existing Node.js ecosystem, we will not discuss those optimizations further here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata-requests"&gt;
  &lt;/a&gt;
  Metadata Requests
&lt;/h3&gt;

&lt;p&gt;Let's take a look at the dependencies installation process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each dependency needs one metadata query and one tgz download, resulting in a total of 2 HTTP requests;&lt;/li&gt;
&lt;li&gt;If there are different versions of the same package, the metadata is queried only once, and then the tgz for each version is downloaded separately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the number of dependencies is typically very large, the total number of HTTP requests is subsequently magnified, resulting in a significant increase in time consumption. In the above example, npm@2 will make more than 2500 HTTP requests.&lt;/p&gt;

&lt;p&gt;A common optimization strategy is to &lt;strong&gt;calculate the dependencies graph in advance&lt;/strong&gt;, so that package managers can download 'tgz's directly without querying the package metadata. As a result, much of the network requests can be avoided.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NPM is the first to come up with the idea of &lt;em&gt;shrinkwrap&lt;/em&gt;. It was soon superseded by the idea of &lt;em&gt;lockfile&lt;/em&gt; from yarn. There're similar concepts in pnpm but different formats.&lt;br&gt;
Although lockfile was meant to &lt;em&gt;lock the dependency versions&lt;/em&gt;, people discovered that the lockfile could also be used as a &lt;em&gt;dependencies graph&lt;/em&gt; to speed up installations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, there are unsolved problems like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first installation will not speed up unless the lockfile was pre-stored in source code management. &lt;/li&gt;
&lt;li&gt;Locking version would lead to some governance problems in large-scale projects in practice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Äã&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-brief-summary"&gt;
  &lt;/a&gt;
  A Brief Summary
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEY_kzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akdlfq5iuc96v2c8qmtn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEY_kzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akdlfq5iuc96v2c8qmtn.jpg" alt="installation-process-summary" width="880" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To summarize, to speed up the installation process, we need to think about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;how to get the dependencies graph faster? (Parsing Strategy)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;how to make tgz downloads faster? (Network I/O)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;how to make to disk faster? How to deal with the duplicated dependencies? (File I/O)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The community was able to reach some common ground where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilizations of the &lt;em&gt;dependencies graph&lt;/em&gt; lead to more efficient concurrent downloads because the requests are better scheduled.&lt;/li&gt;
&lt;li&gt;Simplified &lt;em&gt;node_modules&lt;/em&gt; directory leads to less time in File I/O operations because of fewer duplicate dependencies.&lt;/li&gt;
&lt;li&gt;Global caching can reduce the number of download requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still existing problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lockfile will increase maintenance costs. Neither locking nor unlocking version is a silver bullet. &lt;/li&gt;
&lt;li&gt;Flat dependencies and symbolic links (symlinks in short) have their own compatibility issues. &lt;/li&gt;
&lt;li&gt;There is no consensus on the best implementation of global caching. The "uncompressed copy" approach would generate a lot of file IO, and the hard linking approach would cause potential conflict issues. So there are trade-offs to be made. &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-are-tnpm-and-cnpm"&gt;
  &lt;/a&gt;
  What are tnpm and cnpm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfDkcx89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yut57x9lpoizracfhir0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfDkcx89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yut57x9lpoizracfhir0.jpg" alt="tnpm-cnpm" width="880" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the above diagram, briefly speaking:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cnpm"&gt;cnpm&lt;/a&gt; is our open-source implementation of npm, which supports mirror synchronization with the official npm registry and private package capabilities. &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://npmmirror.com/"&gt;npmmirror&lt;/a&gt; is a community-deployed project based on cnpm, which provides mirroring services for Chinese front-end developers. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tnpm&lt;/code&gt; is our enterprise service for Alibaba and Ant Group, which is also based on cnpm, with additional enterprise-level customization.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#optimization-results"&gt;
  &lt;/a&gt;
  Optimization Results
&lt;/h2&gt;

&lt;p&gt;‚Äã&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-scenario"&gt;
  &lt;/a&gt;
  Test Scenario
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can't measure it, you can't improve it.  - Peter Drucker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3g4c-mZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmoxq347byh1pl5vom44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3g4c-mZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmoxq347byh1pl5vom44.png" alt="Test Scenario" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: We are probably the first company in the industry to re-install Mac mini m1 with Linux OS to form a front-end build cluster. This reinstallation itself doubled our overall build speed on top of all the other optimizations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Äã&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-results"&gt;
  &lt;/a&gt;
  Test Results
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9ZC54s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9bbryanhb6i54z6jnst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9ZC54s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9bbryanhb6i54z6jnst.png" alt="Test Results" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will not interpret the result for now. You'll get more in-depth feeling and understanding after we systematically discuss the optimization ideas for tnpm rapid mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-supporting-data"&gt;
  &lt;/a&gt;
  The Supporting Data
&lt;/h3&gt;

&lt;p&gt;Recall the data we gave earlier at the beginning of our analysis about the reasons behind the overall slowdown. The complete datasets are shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UaueePKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcb3izi3lwc7pcnqtxxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaueePKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcb3izi3lwc7pcnqtxxy.png" alt="The Supporting Data" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We collect the relevant data, without lock or cache, by  &lt;a href="https://strace.io/"&gt;strace&lt;/a&gt; and &lt;a href="https://www.charlesproxy.com/"&gt;charles&lt;/a&gt;. We also counted the corresponding file counts and sizes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the brief interpretation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number of files: the number of 'flat dependencies' and 'symbolic and hard links' are basically the same. They both reduce the disk footprint significantly. &lt;/li&gt;
&lt;li&gt;Disk IO: an important indicator, the number of file writes is directly related to the installation speed.&lt;/li&gt;
&lt;li&gt;Network speed: reflects whether the installation process can run as full bandwidth as possible, the greater the better.&lt;/li&gt;
&lt;li&gt;Number of requests: includes the number of tgz downloads and the number of query package information. The number can be approximated as the number of overall modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the data, we can see that tnpm is more optimized for both Disk IO and Network IO.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-were-the-optimizations-achieved"&gt;
  &lt;/a&gt;
  How were the optimizations achieved?
&lt;/h2&gt;

&lt;p&gt;‚Äã&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-io"&gt;
  &lt;/a&gt;
  Network I/O
&lt;/h3&gt;

&lt;p&gt;We only have one goal in optimizing the network I/O: how do we &lt;strong&gt;maximize the network utilization&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKkQcSo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vef13iz30ekalgynuov1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKkQcSo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vef13iz30ekalgynuov1.jpg" alt="Network I/O" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first optimization comes from '&lt;em&gt;dependencies graph'&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The common practice is using dependencies graph to avoid requesting every package's metadata on the client-side, thus significantly reducing the number of HTTP requests;&lt;/li&gt;
&lt;li&gt;What's special in our approach is that: we generate the dependencies graph on the server-side, with a multi-level caching strategy;&lt;/li&gt;
&lt;li&gt;It's based on &lt;code&gt;@npmcli/arborist&lt;/code&gt;, so it's npm-compatible.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Our experience and philosophy in our enterprise-scale projects are that we do not advocate locking versions locally but only reuse the dependencies graph from the previous phase in the iteration workflows, such as from development environments to test environments (or emergency iterations). (Locking version vs not locking version is a common topic for debates. There is no common consensus. Finding the respective balance based on the enterprise team's situation is generally recommended. We will not discuss it here.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The second optimization is HTTP request warm-ups&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tgz download process will first visit the registry, and then be redirected 302 to the OSS(&lt;a href="https://www.alibabacloud.com/product/object-storage-service?spm=a3c0i.23458820.2359477120.2.26a77d3fqk39SG"&gt;Alibaba Cloud Object Storage Service&lt;/a&gt;) download address. &lt;/li&gt;
&lt;li&gt;We can improve concurrency by warming up in advance and thus reduce the overall HTTP time consumption.&lt;/li&gt;
&lt;li&gt;It is worth mentioning that we encountered an issue of intermittent DNS &lt;a href="https://unix.stackexchange.com/questions/290987/resolving-hostname-takes-5-seconds"&gt;5 second delay&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;There's no such 302 redirection in the official npm registry. We separated the download traffic from the registry by redirecting them to CDN-cached OSS addresses, which improved the stability of the registry service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The third optimization is to combine the files:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We found during testing that we could not utilize full bandwidth. Through analysis, we found that: with a huge number of dependency packages, frequent writing small files often leads to file IO bottlenecks. &lt;/li&gt;
&lt;li&gt;Simply extracting tgz files to tar files made it easy to properly merge files when writing to disk, given that tar is an archive file format.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeated testing showed that combining 1000 tgz files into 40 tarball files is ideal.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The fourth optimization is to use Rust to reimplement the download and decompressing process:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forty concurrent threads were used to download, decompress and merge the original packages into 40 tarball files, all in a streaming manner.(The value comes from repeated testing)&lt;/li&gt;
&lt;li&gt;Rust was used to implement this feature as an experiment. It showed some potential in decompressing files but not enough to let us believe it‚Äôs a silver bullet for solving every performance issue. We used neon to bridge the gap between Rust and Node.js,  and planned to rewrite it to napi modules by &lt;a href="https://github.com/napi-rs/napi-rs"&gt;napi-rs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#fuse-technology"&gt;
  &lt;/a&gt;
  FUSE Technology
&lt;/h3&gt;

&lt;p&gt;We believe the original &lt;em&gt;nested directory&lt;/em&gt; approach is better than the &lt;em&gt;flattening&lt;/em&gt; node_modules one. But we don't want the compatibility issues caused by symlinks. How can we hit two birds with one stone?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, let's introduce a "black technology": FUSE (FileSystem in Userspace).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sounds abstract? Let's think of an analogy that front-end developers are familiar with: using ServiceWorker to refine and customize HTTP Cache-Control Logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Similarly. We can think of FUSE as the file system counterpart of ServiceWorker,  from the perspective of front-end developers. We can take over a directory‚Äôs file system operation logic via FUSE.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rL0PkmvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7e0j1nfj44yf9ki1e4k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rL0PkmvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7e0j1nfj44yf9ki1e4k.jpg" alt="FUSE" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We implemented the &lt;code&gt;npmfs&lt;/code&gt; as a FUSE daemon on top of &lt;a href="https://github.com/dragonflyoss/image-service"&gt;nydus&lt;/a&gt;, it would mount one directory for one project.&lt;/li&gt;
&lt;li&gt;When the OS needs to read the files in that directory, our daemon process would take care of that.&lt;/li&gt;
&lt;li&gt;The daemon process would look up the dependencies graph to retrieve the corresponding file contents from the global cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this way, we were able to achieve that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All system calls for files and directories would treat this directory as a real directory.&lt;/li&gt;
&lt;li&gt;Files are independent of each other. Modifications made in one file would not result in changes in other projects (unlike the hard-links approach).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nydus doesn't support macOS at the moment, so we implemented an adapter of nydus to macfuse. We'll open source it when it's ready.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Trivia: &lt;strong&gt;Nydus&lt;/strong&gt; is a Zerg structure in StarCraft, which is used to move units quickly around the map. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#overlayfs"&gt;
  &lt;/a&gt;
  OverlayFS
&lt;/h3&gt;

&lt;p&gt;We may need to temporarily modify the code inside node_modules during our day-to-day development for debugging. Editing files within a module can inadvertently lead to changes in another module because of how symbolic and hard linking solutions work.&lt;/p&gt;

&lt;p&gt;FUSE supports custom write operations, but the implementation is more verbose. &lt;strong&gt;So we directly use a union mount filesystem &lt;a href="https://en.wikipedia.org/wiki/OverlayFS"&gt;OverlayFS&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OverlayFS can aggregate multiple different mount points into a single directory. &lt;/li&gt;
&lt;li&gt;A common scenario is to overlay a read-write layer on top of a read-only layer to enable the read-write layer.&lt;/li&gt;
&lt;li&gt;This is how Docker images are implemented, where the layers in the image can be reused in different containers without affecting each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQyRPDhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68198m126q64y6jr04ya.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQyRPDhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68198m126q64y6jr04ya.jpg" alt="OverlayFS" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we further implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the FUSE directory as the Lower Dir of OverlayFS, we construct a read-write filesystem and mount it as the &lt;em&gt;node_modules&lt;/em&gt; directory of the application. &lt;/li&gt;
&lt;li&gt;Using its COW (copy-on-write) feature, we can reuse the underlying files to save space and support independent file modifications, isolate different applications to avoid interference, and reuse one copy of the global cache independently.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#file-io"&gt;
  &lt;/a&gt;
  File I/O
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Next, let's talk about the global cache.&lt;/strong&gt; There are two main options in the industry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm&lt;/code&gt;: Unpack tgz into tar as a global cache, and unpack it into node_modules when installing dependencies again. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pnpm&lt;/code&gt;: Unpack tgz into files, and cache them globally as hash, so that different versions of the same package can share the same file, and hard link it directly when installing again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What they both have in common is that at some point, the tgz files would be decompressed to standalone files and written to the disk. As we mentioned above, huge amount of small files generated by decompression can cause a huge amount of I/O operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One day, it occurs to us that, maybe we can just skip decompressing&lt;/strong&gt;? ü§î ü§î ü§î&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAOXKUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjzbh8km9qkg0ks6n4ey.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAOXKUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjzbh8km9qkg0ks6n4ey.jpg" alt="File I/O" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we went one step further:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;node_modules&lt;/em&gt; are directly mapped to tar archives via FUSE + dependencies graph, eliminating the need for File I/O operations happened in decompression.&lt;/li&gt;
&lt;li&gt;At the same time, the highly controllable nature of FUSE allows us to easily support both nested directories and flat structures, switching between them on demand. &lt;/li&gt;
&lt;li&gt;Even better: How can we further improve the performance of cloud storage access in the future so that we don't even have to download tgz?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Some other attempts: we tried to use stargz + lz4 instead of tar + gzip, but the benefits were not significant: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stargz has more indexing capabilities than tar. But in fact a separate dependencies graph would serve a similar purpose, and there is no need to package them together.&lt;/li&gt;
&lt;li&gt;lz4 has a huge performance gain over gzip, but we have found that the ROI is not high in our current practice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#extra-costs"&gt;
  &lt;/a&gt;
  Extra Costs
&lt;/h3&gt;

&lt;p&gt;No solution can be perfect, and there are some extra costs to our solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first one is the cost of FUSE&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to be aware of the cross-system compatibility issues. Although there are support libraries for every operating system, it takes time to test their compatibility. &lt;/li&gt;
&lt;li&gt;We need to support privileged containers for scenarios used within the enterprise. &lt;/li&gt;
&lt;li&gt;Community scenarios like CI/CD rely on whether GitHub Actions and Travis support FUSE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The second one is the maintenance burden of the registry server&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The capability to generate dependencies graph analysis can only be turned on in the private enterprise registry due to server-side resource constraints. &lt;/li&gt;
&lt;li&gt;Public mirror services will fall back to the CLI side to generate a dependencies graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: Community's solution, including ours, cannot solve the problem of multiple "require cache" for the same dependency. Maybe it can be solved by ESM Loader but it is beyond our discussion today.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#key-ideas"&gt;
  &lt;/a&gt;
  Key Ideas
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhWXbDAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0v63n2ev7fmcgh9qgwd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhWXbDAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0v63n2ev7fmcgh9qgwd.jpg" alt="TNPM Summary" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In conclusion, the core advantages of our solution are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network I/O

&lt;ul&gt;
&lt;li&gt;Skipping the metadata requests by using server-generated dependencies graph. This saves &lt;code&gt;Number of packages * Metadata request duration&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The performance gain from using Rust language, and increased concurrency due to download process optimization.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;File I/O

&lt;ul&gt;
&lt;li&gt;Reducing disk writes by storing the combined tar files. This saves &lt;code&gt;(Number of packages - 40) * Disk operation duration&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Reducing disk writes by not unpacking files but using FUSE mounting instead in the projects. This saves &lt;code&gt;(Number of files + Number of directories + Number of symlinks and hard links) * Disk operation duration&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Compatibility

&lt;ul&gt;
&lt;li&gt;Standard Node.js directory structure. No symlinks, no issues caused by flattening &lt;em&gt;node_modules.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One primary reason was that tnpm is not only a local command-line interface, but also a remote registry service that allows deeper optimization compare to other package managers.&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The difference between &lt;a href="https://en.wikipedia.org/wiki/Black_magic"&gt;black magic&lt;/a&gt; and&lt;a href="https://fullmetalpanic.fandom.com/wiki/Black_Technology"&gt; black technology&lt;/a&gt; is that the former is a pile of "&lt;a href="https://knowyourmeme.com/memes/this-is-fine"&gt;this-is-fine&lt;/a&gt;" dirty hacks to achieve the goal, while the latter is a cross-disciplinary juggernaut to solve challenges once and for all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚Äã&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-interpretation"&gt;
  &lt;/a&gt;
  Data Interpretation
&lt;/h3&gt;

&lt;p&gt;From the above analysis, one might already fully understand the optimization idea of tnpm rapid mode. Now let's go back and interpret the data of the previous test results.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: 'tnpm rapid mode' is still under small-scale testing, and improvement is expected in future iterations. So the test data is for reference only.&lt;br&gt;
Also, yarn in the table is slower than &lt;a href="mailto:npm@8"&gt;npm@8&lt;/a&gt;. We don't know why for now, but we've tested it many times with pnpm benchmark, and the same results kept showing up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X8mdijbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/260pmav56c2gu9ygc3ty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X8mdijbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/260pmav56c2gu9ygc3ty.png" alt="Test Data" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the brief interpretations:&lt;/p&gt;

&lt;p&gt;(1) The time taken to generate the dependencies graph.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The difference between test 1 and test 5 is the time taken by the corresponding package manager. &lt;/li&gt;
&lt;li&gt;pnpm analyzes the graph by client-side HTTP request, which is about 4 seconds or so (querying package information and downloading are parallel). &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tnpm analyzes the graph by server-side calculation, which currently takes 5 seconds. (when hitting remote cache, this should cost less than 1 second).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The speed is the same now, but since tnpm has less network latency than pnpm, we still need to optimize this in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the enterprise scenario, the dependency modules are relatively convergent, so most of the time,  the first test of tnpm should take 5 seconds in case of hitting the cache(the dependencies graph generation of tnpm has a caching mechanism).&lt;/p&gt;

&lt;p&gt;(2) File I/O overhead&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test 5 is closer to CI/CD scenarios which have dependencies graph + no global cache. &lt;/li&gt;
&lt;li&gt;The primary time consumption observed was from tgz download time + File IO time. As the tgz download time was alike, the time gap was mainly from file IO. &lt;/li&gt;
&lt;li&gt;What we concluded from the data is that &lt;strong&gt;tnpm is 4 seconds faster than pnpm. FUSE helped save the decompress + file write time, as well as the TAR merge time.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Local development&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both dependencies graph and global cache are made available for local development.&lt;/li&gt;
&lt;li&gt;This corresponds to Test 2 (dependency is not new, second development), Test 3 (second development, reinstallation of dependencies) and Test 4 (first development of new application). &lt;/li&gt;
&lt;li&gt;In principle, time used = dependencies graph update + writing to node_modules file + few package downloads and updates. &lt;/li&gt;
&lt;li&gt;Since tnpm is still under development, we couldn't test it this time, but from the above formula analysis, tnpm has IO advantage over pnpm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Äã&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To summarize: the speed advantage of tnpm over pnpm is 5 seconds for dependencies graph + 4 seconds for FUSE free decompression.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#future-planning"&gt;
  &lt;/a&gt;
  Future planning
&lt;/h2&gt;

&lt;p&gt;Front-end package management has been developing for nearly a decade. Npm was once the trailblazer who kept innovating and advancing this area. However, the advancement was somewhat stagnated after npm won against all the other alternatives like bower. Soon after, Yarn became the challenger and rejuvenated the overall competition, pushing further innovation on npm. Pnpm raised from the new challenge and led the innovation again.&lt;/p&gt;

&lt;p&gt;We believe that for front-end dependency optimization and governance, there is still a long way to go. We hope to continue strengthening cooperation with our domestic and international colleagues to keep pushing the advancement of package managers together.&lt;/p&gt;

&lt;p&gt;Therefore, our subsequent plan is to give our experience gathered from enterprise-level private deployment and governance back to the community as much as we can.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Currently &lt;a href="https://github.com/cnpm/cnpmcore"&gt;cnpm/npmcore&lt;/a&gt; is under refactoring to better support private deployments. (We sincerely welcome contributions from the open source community to further expedite this effort.)&lt;/li&gt;
&lt;li&gt;After the tnpm rapid model is refined, we will open-source the corresponding capabilities, as well as the npmfs suite. Unfortunately, there's currently no way for the community to experience it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the meantime, it would be highly beneficial for the community if we could work together to standardize the front-end package management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need a standard like ECMAScript to regulate the behavior of each package manager.&lt;/li&gt;
&lt;li&gt;We need a conformance test suite like "Test262".&lt;/li&gt;
&lt;li&gt;We should accelerate the transition from CommonJS to ES modules.&lt;/li&gt;
&lt;li&gt;We should find a way to fully resolve the chaotic situation resulting from the deltas among different dependency scenarios of frontend and Node.js.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;

&lt;p&gt;I'm TZ(&lt;a href="https://github.com/atian25"&gt;atian25&lt;/a&gt;), currently work for Ant Group. I am in charge of building and optimizing our front-end Node.js infrastructure. I love open-source and am the main maintainer of &lt;a href="https://github.com/eggjs"&gt;eggjs&lt;/a&gt;, &lt;a href="https://github.com/cnpm"&gt;cnpm&lt;/a&gt;.&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;Node.js is an indispensable infrastructure in the field of front-end. Maybe the future changes of front-end would make all existing engineering problems irrelevant. Nonetheless, no matter what will happen, I just hope that I can seriously record what I see and think in this field. I'd like to exchange ideas with colleagues who are experiencing the evolution of the current "front-end industrialization" and are equally troubled by it. &lt;br&gt;
‚Äã&lt;/p&gt;

&lt;p&gt;In the enterprise application scenario, optimization of front-end build execution speed is a system engineering challenge. Dependency resolution and installation is only one of the many challenges we are facing. The opportunities are abundant. We are continuously looking for talented engineers to join us, and keep pushing the innovation forward. We look forward to hearing from you. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>ASP.NET Core: Servidor de Autenticaci√≥n con OpenID Connect</title>
      <author>Isaac Ojeda</author>
      <pubDate>Tue, 25 Jan 2022 03:32:40 +0000</pubDate>
      <link>https://dev.to/isaacojeda/aspnet-core-servidor-de-autenticacion-con-openid-connect-59kh</link>
      <guid>https://dev.to/isaacojeda/aspnet-core-servidor-de-autenticacion-con-openid-connect-59kh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introducci%C3%B3n"&gt;
  &lt;/a&gt;
  Introducci√≥n
&lt;/h1&gt;

&lt;p&gt;En este post (un poco largo) veremos los conceptos principales de OpenID Connect y una implementaci√≥n de ejemplo en ASP.NET Core.&lt;/p&gt;

&lt;p&gt;Para la implementaci√≥n de OpenID Connect en .NET utilizaremos &lt;a href="https://github.com/openiddict/openiddict-core"&gt;OpenIddict-core&lt;/a&gt;  y .NET 6.&lt;/p&gt;

&lt;p&gt;El ejemplo completo lo puedes ver en mi &lt;a href="https://github.com/isaacOjeda/DevToPosts/tree/main/OpenIddictExample"&gt;GitHub&lt;/a&gt;, te recomiendo que lo clones para una mejor comprensi√≥n del c√≥digo que veremos aqu√≠.&lt;/p&gt;

&lt;p&gt;Puedes seguirme en Twitter en &lt;a href="https://twitter.com/balunatic"&gt;@balunatic&lt;/a&gt; donde suelo poner cosas de programaci√≥n, pero si tienes dudas o cualquier cosa, manda DM üòÅ. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#openid-connect-protocol"&gt;
  &lt;/a&gt;
  OpenID Connect Protocol
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-openid-connect-oidc"&gt;
  &lt;/a&gt;
  ¬øQu√© es OpenID Connect (OIDC)?
&lt;/h2&gt;

&lt;p&gt;OpenID Connect (o OIDC) es un protocolo de identidad que utiliza los mecanismos de autenticaci√≥n y autorizaci√≥n de OAuth 2.0. La especificaci√≥n final de OIDC fue publicada en Febrero del 2014 y al d√≠a de hoy ha sido adoptado por una gran cantidad de proveedores de identidad.&lt;/p&gt;

&lt;p&gt;OAuth 2.0 es un protocolo de autorizaci√≥n y OIDC es un protocolo de autenticaci√≥n y es usado usado para verificar la identidad de un usuario en un servicio tercero (conocido como &lt;strong&gt;Relying Party&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Es decir, cuando haces una aplicaci√≥n web y permites que tus usuarios inicien sesi√≥n con sus cuentas actuales como de &lt;strong&gt;Google&lt;/strong&gt; o &lt;strong&gt;Facebook&lt;/strong&gt;, es cuando se usa OIDC.&lt;/p&gt;

&lt;p&gt;Tu aplicaci√≥n web es ese &lt;strong&gt;Relying Party&lt;/strong&gt; y esta aplicaci√≥n no debe de tener las credenciales del usuario de Google o Facebook, ya que estamos buscando no exponer esa informaci√≥n y gracias OIDC no es necesario que las manipulemos. Siguiendo el flujo correcto, OIDC ayuda autenticar a un usuario sin que se tenga que crear una nueva cuenta en tu aplicaci√≥n web y reutilizando cuentas existentes de servicios populares (de nuevo, como google o facebook).&lt;/p&gt;

&lt;p&gt;Una gran variedad de clientes pueden usar OpenID Connect para autenticar usuarios, desde Single Page Applications (SPAs como Angular o React) hasta aplicaciones m√≥viles nativas. Tambi√©n es usado en Single Sign On en muchas aplicaciones (SSO es muy √∫til cuando en tu organizaci√≥n tienen una gran variedad de servicios o aplicaciones internas y es necesario usar una misma cuenta).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diferencias-entre-oauth-20-y-oidc"&gt;
  &lt;/a&gt;
  Diferencias entre OAuth 2.0 y OIDC
&lt;/h2&gt;

&lt;p&gt;Realmente OIDC es funcionalidad adicional a la que ya existe en OAuth 2.0. Mientras OAuth 2.0 se trata del mecanismo para autorizar el acceso a informaci√≥n, OIDC se centra en la identidad del usuario (su autenticaci√≥n). &lt;/p&gt;

&lt;p&gt;El prop√≥sito principal de OIDC es darte un solo lugar donde tengas que iniciar sesi√≥n sin importar la cantidad de sitios que tengas. Es decir, cuando tu accedes a tu aplicaci√≥n que requiere un usuario autenticado, eres mandado a tu servidor de identidad (que utiliza OpenID) y ah√≠ inicias sesi√≥n, eres redirigido de vuelta a la aplicaci√≥n donde empezaste pero ya como un usuario autenticado. Las credenciales y tu informaci√≥n personal la tiene el proveedor de identidad y las aplicaciones de terceros solo necesitan saber si eres quien dices ser.&lt;/p&gt;

&lt;p&gt;Sin embargo, OAuth se enfoca en proteger informaci√≥n y restringir el acceso. Por ejemplo: Cuando entras a myapp.com e inicias sesi√≥n con Facebook, se utiliza OpenID. Pero cuando en myapp.com te pregunta ¬øQuieres importar tus contactos de Facebook a myapp.com? ah√≠ se utilizar√≠a OAuth, ya que Facebook te preguntar√° ¬øPermitir a myapp.com que acceda a tu listado de contactos? y ese ‚Äúconsentimiento‚Äù es llevado a cabo siguiendo las reglas de OAuth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elige-el-flujo-correcto-de-autenticaci%C3%B3n"&gt;
  &lt;/a&gt;
  Elige el flujo correcto de autenticaci√≥n
&lt;/h2&gt;

&lt;p&gt;Algo que no he terminado de mencionar, es que OAuth y OIDC cuentan con varias formas de autenticar usuarios y es importante saber sus diferencias, porque dependiendo de la aplicaci√≥n cliente, se utilizar√° un flujo diferente.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flujos-no-interactivos"&gt;
  &lt;/a&gt;
  Flujos no interactivos
&lt;/h3&gt;

&lt;p&gt;Los flujos no interactivos no requieren que el usuario interact√∫e con el Authorization Server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resource-owner-password-no-recomendado-para-aplicaciones-nuevas"&gt;
  &lt;/a&gt;
  Resource owner password (no recomendado para aplicaciones nuevas)
&lt;/h3&gt;

&lt;p&gt;Este flujo es directamente inspirado en el &lt;strong&gt;basic autentication&lt;/strong&gt; (donde las credenciales se mandan en un header codificadas en base 64). En este caso, es el flujo m√°s simple que existe en la especificaci√≥n OAuth 2.0: La aplicaci√≥n cliente (el Relying party) pregunta el usuario/contrase√±a, env√≠a una solicitud de autorizaci√≥n al identity provider e inmediatamente regresa un access token si este es autorizado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfYJDLV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zfp4hv2g31xayhita38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfYJDLV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zfp4hv2g31xayhita38.png" alt="Image description" width="445" height="289"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nota üí°: Este flujo no se recomienda ya que el usuario y contrase√±a son directamente expuestos en la aplicaci√≥n cliente. Por esta raz√≥n, este flujo no debe de ser usado cuando aplicaciones de terceros se ven involucrados. Si estas desarrollando aplicaciones internas (tu tienes el control de todo), por simplicidad, puede funcionar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#client-credentials-grant-recomendado-para-comunicaci%C3%B3n-machine2machine"&gt;
  &lt;/a&gt;
  Client credentials grant (recomendado para comunicaci√≥n machine-2-machine)
&lt;/h3&gt;

&lt;p&gt;Este flujo podr√≠a decirse que es id√©ntico al anterior (resource owner password) pero este est√° dise√±ado para comunicaci√≥n machine-2-machine (es decir, un servicio hablando con otro servicio) y ning√∫n usuario se involucra en este flujo.&lt;/p&gt;

&lt;p&gt;La aplicaci√≥n cliente solicita el token enviando las credenciales y si estas son correctas, obtiene su &lt;code&gt;access_token&lt;/code&gt; para acceder a los servicios requeridos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWftKy_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wblc4ezk9shkuar3i5ke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWftKy_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wblc4ezk9shkuar3i5ke.png" alt="Image description" width="448" height="153"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flujos-interactivos"&gt;
  &lt;/a&gt;
  Flujos interactivos
&lt;/h3&gt;

&lt;p&gt;Estos flujos, como su nombre lo indica, requieren de interacci√≥n del usuario con el servidor de autenticaci√≥n. De esta forma, las credenciales del usuario solo son usadas en el servidor de autenticaci√≥n y ning√∫n tercero las tiene que manipular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authorization-code-flow-recomendado-para-aplicaciones-nuevas"&gt;
  &lt;/a&gt;
  Authorization code flow (recomendado para aplicaciones nuevas)
&lt;/h3&gt;

&lt;p&gt;Este flujo probablemente es el m√°s complicado de todos, ya que involucra redirecciones del navegador y comunicaci√≥n con el backend. Sin embargo, es el m√°s recomendado para cualquier escenario que involucre usuarios finales, ya que podr√≠an iniciar sesi√≥n con sus credenciales, un PIN, un Smart Card o incluso usando otro proveedor externo.&lt;/p&gt;

&lt;p&gt;Como ventaja de esta complejidad, el &lt;code&gt;access_token&lt;/code&gt; jam√°s pasa por el navegador, ya que el backend hace ese intercambio de informaci√≥n directamente con el servidor de autenticaci√≥n una vez que el usuario fue verificado.&lt;/p&gt;

&lt;p&gt;B√°sicamente hay 2 pasos importantes en este flujo: La solicitud y respuesta al endpoint &lt;code&gt;authorization&lt;/code&gt; y lo mismo con el endpoint &lt;code&gt;token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s10Xb916--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pnk6asr0ufwodpn6mg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s10Xb916--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pnk6asr0ufwodpn6mg3.png" alt="Image description" width="468" height="450"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En este flujo, la aplicaci√≥n cliente inicia el proceso de autenticaci√≥n generando una solicitud de autorizaci√≥n incluyendo siempre el par√°metro &lt;code&gt;response_type=code&lt;/code&gt;, el &lt;code&gt;client_id&lt;/code&gt;, el &lt;code&gt;redirect_uri&lt;/code&gt; y opcionalmente, un &lt;code&gt;scope&lt;/code&gt; y &lt;code&gt;state&lt;/code&gt; (este √∫ltimo ayudando mitigar la vulnerabilidad de &lt;a href="https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest"&gt;ataques XSRF&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Si la solicitud es v√°lida, el servidor pedir√° al usuario que se autentique y generalmente se pedir√° el consentimiento de compartir informaci√≥n con la aplicaci√≥n cliente (aunque esto depende directamente de la implementaci√≥n del authorization server).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XS1w9xRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmnafrlb7v4g03uty241.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XS1w9xRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmnafrlb7v4g03uty241.png" alt="Image description" width="715" height="414"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Si se inicia sesi√≥n y se da permiso, el navegador (user-agent) redirige de vuelta a la aplicaci√≥n cliente incluyendo como par√°metro en el URL un &lt;strong&gt;authorization code&lt;/strong&gt; (este es un peque√±o token, √∫nico y con una vida muy corta) y este se usa √∫nicamente para intercambiar el c√≥digo por un &lt;code&gt;access_token&lt;/code&gt; y &lt;code&gt;id_token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Token request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cuando la aplicaci√≥n obtiene el authorization code, debe inmediatamente intercambiarlo por el access token y as√≠ dar por finalizado el proceso de autenticaci√≥n.&lt;/p&gt;

&lt;p&gt;Esto suena un proceso complicado, pero realmente siempre es igual, as√≠ que existen librer√≠as o frameworks completos que ya hacen esto por nosotros.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-flow"&gt;
  &lt;/a&gt;
  Implicit flow
&lt;/h3&gt;

&lt;p&gt;Implicit flow es muy similar al authorization code, excepto que no existe ese intercambio entre &lt;strong&gt;authorization code&lt;/strong&gt; y los &lt;strong&gt;tokens&lt;/strong&gt; (en el token request): el access token es directamente regresado al cliente como parte del proceso de autorizaci√≥n, es decir, en el redirect que existe desde el servidor de autorizaci√≥n y aplicaci√≥n cliente, los tokens forman parte del URI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ugeh86Tl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9t8pg48ov8b7dtasolu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ugeh86Tl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9t8pg48ov8b7dtasolu.png" alt="Image description" width="461" height="561"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Este flujo t√≠picamente es usado en aplicaciones frontend que no tienen backend que pueda hacer el intercambio del c√≥digo recibido por el token.&lt;/p&gt;

&lt;p&gt;Este flujo es menos seguro, porque los access token viajan por medio de un fragmento del URI y estos no se encuentran encriptados ni protegidos de ninguna forma.&lt;/p&gt;

&lt;p&gt;Existen formas de prevenir ser vulnerable, pero la mejor opci√≥n es usar el flujo anterior utilizando el &lt;a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce"&gt;Proof Key for Code Exchange&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#existen-m%C3%A1s-flujos-que-no-es-necesario-aprender"&gt;
  &lt;/a&gt;
  Existen m√°s flujos que no es necesario aprender.
&lt;/h3&gt;

&lt;p&gt;Realmente, los importantes son &lt;strong&gt;client credentials&lt;/strong&gt; y &lt;strong&gt;authorization code flow&lt;/strong&gt; y por simplicidad y si todo es interno, &lt;strong&gt;resource owner password&lt;/strong&gt;. Existen otros como hybrid flow, device flow, etc. pero varios son obsoletos o no tan usados.&lt;/p&gt;

&lt;p&gt;La siguiente tabla nos ayudar√° mejor a decidir:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type of Application&lt;/th&gt;
&lt;th&gt;OAuth 2.0 flow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server-side (AKA Web)&lt;/td&gt;
&lt;td&gt;Authorization Code flow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SPA&lt;/td&gt;
&lt;td&gt;Authorization Code flow with PKCE o Implicit flow (solo si no hay compatibilidad en el navegador para usar Crypto Web)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Native&lt;/td&gt;
&lt;td&gt;Authorization Code flow with PKCE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trusted&lt;/td&gt;
&lt;td&gt;Resource Owner Password flow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Client Credentials&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#implementando-un-servidor-de-autenticaci%C3%B3n-en-aspnet-core"&gt;
  &lt;/a&gt;
  Implementando un Servidor de autenticaci√≥n en ASP.NET Core
&lt;/h1&gt;

&lt;p&gt;¬øAcaso creen que ya hab√≠amos terminado? Seguimos ahora con el c√≥digo.&lt;/p&gt;

&lt;p&gt;En este post veremos como crear 3 aplicaciones web: Servidor de autenticaci√≥n (Identity Provider con OpenID), Aplicaci√≥n web Cliente (El &lt;strong&gt;Relying Party&lt;/strong&gt; que necesita de usuarios autenticados y acceder a recursos protegidos) y una Web API (resource protegido del usuario al que la aplicaci√≥n web cliente quiere acceder).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proyecto-identityserver-aka-authorization-server"&gt;
  &lt;/a&gt;
  Proyecto IdentityServer: AKA Authorization Server
&lt;/h2&gt;

&lt;p&gt;Para esto, necesitamos una aplicaci√≥n web que nos administre usuarios. Para dejarlo simple, utilizaremos el template de asp.net core web con individual credentials que usa Identity Core:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new razor &lt;span class="nt"&gt;--auth&lt;/span&gt; individual &lt;span class="nt"&gt;--use-local-db&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; IdentityServer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al usar cuentas individuales se utilizar√° Identity Core y el par√°metro &lt;code&gt;local-db&lt;/code&gt; simplemente indica que queremos usar SQLServer en lugar de SQLite (que es el default).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nota üí°: Para mejor referencia, puedes ver mi &lt;a href="https://github.com/isaacOjeda/DevToPosts/tree/main/OpenIddictExample"&gt;repositorio de GitHub&lt;/a&gt; y ver este ejemplo completo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para este authorization server vamos a usar una muy buena librer√≠a llamada &lt;strong&gt;Openiddict&lt;/strong&gt; (una soluci√≥n m√°s simple que &lt;strong&gt;Identity Server de Duente&lt;/strong&gt;, pero completamente libre de usar).&lt;/p&gt;

&lt;p&gt;Instalamos OpenIddict agregando sus paquetes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.AspNetCore.Identity.EntityFrameworkCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.AspNetCore.Identity.UI"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.SqlServer"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.Tools"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- OpenIddict --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"OpenIddict"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.0.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"OpenIddict.AspNetCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.0.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"OpenIddict.EntityFrameworkCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.0.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- /OpenIddict --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;y comenzamos a configurar el servidor desde el &lt;strong&gt;Program.cs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hay que configurar &lt;strong&gt;OpenIddict&lt;/strong&gt; para que use el &lt;code&gt;ApplicationDbContext&lt;/code&gt; que por default nos agreg√≥ el template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;IdentityServer.Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Identity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;OpenIddict.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnection"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Register the entity sets needed by OpenIddict.&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseOpenIddict&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OpenIddict guardar√° en SQLServer (usando EF Core) toda la informaci√≥n que necesita para aplicaciones clientes y sus tokens emitidos.&lt;/p&gt;

&lt;p&gt;Despu√©s de eso, agregamos las dependencias de OpenIddict y los Flows permitidos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddOpenIddict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// Register the OpenIddict core components.&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Configure OpenIddict to use the EF Core stores/models.&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseEntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;// Register the OpenIddict server components.&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AllowClientCredentialsFlow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AllowAuthorizationCodeFlow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RequireProofKeyForCodeExchange&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AllowRefreshTokenFlow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;options&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetTokenEndpointUris&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/connect/token"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetAuthorizationEndpointUris&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/connect/authorize"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetUserinfoEndpointUris&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/connect/userinfo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Encryption and signing of tokens&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddEphemeralEncryptionKey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddEphemeralSigningKey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DisableAccessTokenEncryption&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Register scopes (permissions)&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterScopes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterScopes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Register the ASP.NET Core host and configure the ASP.NET Core-specific options.&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAspNetCore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableTokenEndpointPassthrough&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableAuthorizationEndpointPassthrough&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableUserinfoEndpointPassthrough&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqu√≠ estamos haciendo lo siguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Estamos permitiendo el flujo de autorizaci√≥n &lt;strong&gt;client credentials&lt;/strong&gt; y &lt;strong&gt;authorization code,&lt;/strong&gt; cualquier flujo que se intente usar diferente, la solicitud ser√° rechazada

&lt;ul&gt;
&lt;li&gt;Tambi√©n se est√° habilitando PKCE y de hecho se hace obligatorio implementarlo (por que es m√°s seguro, especialmente en SPAs).&lt;/li&gt;
&lt;li&gt;Tambi√©n se habilita la posibilidad de usar Refresh Tokens.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Se est√°n estableciendo las rutas para los endpoints:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Token&lt;/strong&gt;. Para intercambiar el authorization code por access tokens y id tokens.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Authorization&lt;/strong&gt;. Para solicitar el c√≥digo de autorizaci√≥n despu√©s de haber iniciado sesi√≥n.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User Info&lt;/strong&gt;. Para solicitar informaci√≥n adicional del usuario una vez autenticado.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Con &lt;code&gt;AddEphemeralEncryptionKey&lt;/code&gt;  y &lt;code&gt;AddEphemeralSigninKey&lt;/code&gt; se genera una llave RSA asim√©trica para modo desarrollo, ya que no se guarda en ning√∫n lado y no se comparte entre instancias.

&lt;ul&gt;
&lt;li&gt;Nota: cada vez que reiniciar el el servidor, se generan llaves nuevas. Solo se usa para testing.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Se registran los scopes que se usar√°n, estos funcionan como permisos.&lt;/li&gt;
&lt;li&gt;Los m√©todos Passthrough son para que nosotros podamos tomar acci√≥n de esos endpoints despu√©s de ser validados por OpenIddict.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para finalizar con el contenido del &lt;strong&gt;Program&lt;/strong&gt;, contin√∫a con el siguiente c√≥digo boilerplate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDefaultIdentity&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IdentityUser&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SignIn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequireConfirmedAccount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddEntityFrameworkStores&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddRazorPages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddDatabaseDeveloperPageExceptionFilter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Configure the HTTP request pipeline.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsDevelopment&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseMigrationsEndPoint&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseExceptionHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/Error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHsts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseStaticFiles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapRazorPages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;SeedDefaultClients&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inicialmente, necesitamos poder crear clientes de OpenID, por eso tenemos el m√©todo Seed que se describe a continuaci√≥n:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;SeedDefaultClients&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOpenIddictApplicationManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnsureCreatedAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FindByClientIdAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"clientwebapp"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OpenIddictApplicationDescriptor&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ClientId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"clientwebapp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ClientSecret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"client-web-app-secret"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;DisplayName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ClientWebApp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;RedirectUris&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://localhost:7003/signin-oidc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;Permissions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GrantTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthorizationCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GrantTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientCredentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GrantTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RefreshToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prefixes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scope&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prefixes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scope&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Este Seed nos crea un cliente llamado &lt;strong&gt;clientwebapp&lt;/strong&gt; y aqu√≠ mismo se especifican los permisos que tiene y su secret (que es necesario para validaciones futuras).&lt;/p&gt;

&lt;p&gt;Habitualmente esto se podr√≠a hacer desde una UI, para dar de alta o de baja los clientes que desees usar, pero dejemos esto como un simple demo.&lt;/p&gt;

&lt;p&gt;El template ya contiene UI para crear usuarios (registro) e inicio de sesi√≥n, todo utilizando la implementaci√≥n default de Identity Core, por lo que esta parte no tenemos que implementar algo.&lt;/p&gt;

&lt;p&gt;Lo que s√≠ tenemos que hacer, es generar los claims (seg√∫n el usuario autenticado) y validar las solicitudes que se reciben.&lt;/p&gt;

&lt;p&gt;Para esto, crearemos el siguiente controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Authentication&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Authorization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Identity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;OpenIddict.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;OpenIddict.Server.AspNetCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Security.Claims&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;IdentityServer.Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthorizationController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/connect/authorize"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/connect/authorize"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IgnoreAntiforgeryToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Authorize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetOpenIddictServerRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;
                      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidOperationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The OpenID Connect request cannot be retrieved."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Retrieve the user principal stored in the authentication cookie.&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AuthenticateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IdentityConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApplicationScheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// If the user principal can't be extracted, redirect the user to the login page.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Succeeded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;authenticationSchemes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IdentityConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApplicationScheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AuthenticationProperties&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;RedirectUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathBase&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;QueryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HasFormContentType&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Create a new claims principal&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;claims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Claim&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// 'subject' claim which is required&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Claim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Claim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Claim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Audience&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ClaimTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Claim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;claimsIdentity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ClaimsIdentity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;claims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ClaimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;claimsIdentity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Set requested scopes (this is not done automatically)&lt;/span&gt;
        &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetScopes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetScopes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;claim&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;claim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetDestinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;claim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// If the "profile" scope was granted, allow the "name" claim to be&lt;/span&gt;
                &lt;span class="c1"&gt;// added to the access and identity tokens derived from the principal.&lt;/span&gt;
                &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scopes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Destinations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Destinations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IdentityToken&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;

                &lt;span class="c1"&gt;// Never add the "secret_value" claim to access or identity tokens.&lt;/span&gt;
                &lt;span class="c1"&gt;// In this case, it will only be added to authorization codes,&lt;/span&gt;
                &lt;span class="c1"&gt;// refresh tokens and user/device codes, that are always encrypted.&lt;/span&gt;
                &lt;span class="s"&gt;"secret_value"&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(),&lt;/span&gt;

                &lt;span class="c1"&gt;// Otherwise, add the claim to the access tokens only.&lt;/span&gt;
                &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Destinations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Signing in with the OpenIddict authentiction scheme trigger OpenIddict to issue a code (which can be exchanged for an access token)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;SignIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/connect/token"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Exchange&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetOpenIddictServerRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;
                      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidOperationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The OpenID Connect request cannot be retrieved."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;ClaimsPrincipal&lt;/span&gt; &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsClientCredentialsGrantType&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Note: the client credentials are automatically validated by OpenIddict:&lt;/span&gt;
            &lt;span class="c1"&gt;// if client_id or client_secret are invalid, this action won't be invoked.&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ClaimsIdentity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// Subject (sub) is a required field, we use the client id as the subject identifier here.&lt;/span&gt;
            &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientId&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidOperationException&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

            &lt;span class="c1"&gt;// Add some claim, don't forget to add destination otherwise it won't be added to the access token.&lt;/span&gt;
            &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some-claim"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"some-value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Destinations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ClaimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetScopes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetScopes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsAuthorizationCodeGrantType&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Retrieve the claims principal stored in the authorization code&lt;/span&gt;
            &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AuthenticateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsRefreshTokenGrantType&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Retrieve the claims principal stored in the refresh token.&lt;/span&gt;
            &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AuthenticateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidOperationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The specified grant type is not supported."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Returning a SignInResult will ask OpenIddict to issue the appropriate access/identity tokens.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;SignIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuthenticationSchemes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/connect/userinfo"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Userinfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AuthenticateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictServerAspNetCoreDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Sub&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;claimsPrincipal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpenIddictConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Occupation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Developer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Te recomiendo que leas el c√≥digo, investigues tus dudas y lo depures paso a paso para entender mejor el funcionamiento, pero aqu√≠ te va un resumen:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authorize"&gt;
  &lt;/a&gt;
  Authorize
&lt;/h3&gt;

&lt;p&gt;Este endpoint es el punto de entrada cuando se quiere autenticar. Con &lt;code&gt;GetOpenIddictServerRequest&lt;/code&gt;se lee la solicitud OpenID y en caso de no ser v√°lida, se lanza la excepci√≥n.&lt;/p&gt;

&lt;p&gt;Si es v√°lida, se verifica si el usuario actualmente est√° autenticado, sino, se manda a autenticar utilizando el inicio de sesi√≥n que nos ofrece Identity Core. El esquema de Cookies que agrega Identity Core es &lt;code&gt;IdentityConstants.ApplicationScheme&lt;/code&gt; y ese es el esquema que usamos para mandarlo a iniciar sesi√≥n.&lt;/p&gt;

&lt;p&gt;Una vez que inicia sesi√≥n, el &lt;code&gt;RedirectUri&lt;/code&gt; lo regresa de vuelta a este m√©todo &lt;code&gt;Authorize()&lt;/code&gt; y ahora el flujo continuar√°, generando los claims que desees, porque ya tenemos un usuario autenticado. &lt;/p&gt;

&lt;p&gt;Ha este punto OpenIddict ya valid√≥ la solicitud y valid√≥ los scopes, por eso pasamos a generar los claims y poner su destino.&lt;/p&gt;

&lt;p&gt;El destino es importante, ya que el &lt;code&gt;access_token&lt;/code&gt; es el que ser√° usado por terceros, no debe de contener informaci√≥n delicada, justo como los comentarios lo describen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exchange"&gt;
  &lt;/a&gt;
  Exchange
&lt;/h3&gt;

&lt;p&gt;Este m√©todo, como su nombre lo dice, sirve para intercambiar un &lt;strong&gt;authorization code&lt;/strong&gt; por los tokens (tanto access y identity) en caso de que el flujo aplique.&lt;/p&gt;

&lt;p&gt;En este ejemplo tambi√©n se incluye el flujo clients credential, que solo se necesita el &lt;strong&gt;client_id&lt;/strong&gt; y el &lt;strong&gt;client_secret&lt;/strong&gt; (hablando del ejemplo machine-2-machine) para generar los tokens. Solo est√° ah√≠ como referencias, si deseas hacer pruebas con este flow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-info"&gt;
  &lt;/a&gt;
  User Info
&lt;/h3&gt;

&lt;p&gt;Sinceramente, este es el que menos he probado, pero sirve para proveer informaci√≥n adicional al momento de que un usuario autorizado regrese a la aplicaci√≥n cliente, m√°s adelante veremos como decirle a ASP.NET que consulte tambi√©n este endpoint despu√©s de un inicio de sesi√≥n exitoso.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#para-qu%C3%A9-sirve-todo-esto"&gt;
  &lt;/a&gt;
  ¬øPara qu√© sirve todo esto?
&lt;/h3&gt;

&lt;p&gt;Lo que acabamos de hacer fue configurar nuestro Identity provider, si nos vamos al URL &lt;a href="https://localhost:7001/.well-known/openid-configuration"&gt;https://localhost:7001/.well-known/openid-configuration&lt;/a&gt; (los puertos pueden variar) obtenemos la siguiente configuraci√≥n:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"issuer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:7001/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"authorization_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:7001/connect/authorize"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"token_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:7001/connect/token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"userinfo_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:7001/connect/userinfo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"jwks_uri"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:7001/.well-known/jwks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"grant_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"client_credentials"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"authorization_code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"refresh_token"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"response_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"code"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"response_modes_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"form_post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"fragment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"query"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scopes_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"openid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"offline_access"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"profile"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"claims_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"aud"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"exp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"iat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"iss"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"sub"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id_token_signing_alg_values_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"RS256"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"code_challenge_methods_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"S256"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"subject_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"public"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"token_endpoint_auth_methods_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"client_secret_basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"client_secret_post"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"claims_parameter_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"request_parameter_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"request_uri_parameter_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Este endpoint sirve para explorar el Identity Provider, conocer sus endpoints, sus llaves p√∫blicas para las firmas de los tokens, los claims soportados, los scopes y tipos de flujos que soporta.&lt;/p&gt;

&lt;p&gt;Este endpoint es usado por las aplicaciones clientes que utilizaran este servidor como su proveedor de identidad.&lt;/p&gt;

&lt;p&gt;Lo que sigue ahora, es crear esa aplicaci√≥n cliente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proyecto-webclient-aplicaci%C3%B3n-web-cliente"&gt;
  &lt;/a&gt;
  Proyecto WebClient: Aplicaci√≥n Web Cliente.
&lt;/h2&gt;

&lt;p&gt;Aqu√≠ crearemos una aplicaci√≥n Razor de la misma forma que lo hicimos con el anterior, pero este, sin autenticaci√≥n ni nada m√°s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new razor &lt;span class="nt"&gt;-o&lt;/span&gt; WebClient
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Nota üí°: Los URLs usados en la configuraci√≥n del cliente es importante, ya que forma parte de las validaciones y si este no es correcto, el proceso de autorizaci√≥n ser√° rechazado.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para este proyecto necesitaremos el siguiente paquete:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.AspNetCore.Authentication.OpenIdConnect"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esta aplicaci√≥n de Razor pages trae el template default con bootstrap pero sin autenticaci√≥n. Lo que vamos a hacer en el &lt;strong&gt;Program.cs&lt;/strong&gt; es lo siguiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.IdentityModel.Protocols.OpenIdConnect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add services to the container.&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddRazorPages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultScheme&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Cookies"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultChallengeScheme&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"oidc"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cookies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;".ClientWebAppAuth"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddOpenIdConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"oidc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authority&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://localhost:7001"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"clientwebapp"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSecret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"client-web-app-secret"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenIdConnectResponseType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"openid"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveTokens&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetClaimsFromUserInfoEndpoint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NameClaimType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Configure the HTTP request pipeline.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsDevelopment&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseExceptionHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/Error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHsts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseStaticFiles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapRazorPages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RequireAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hay dos cosas importantes aqu√≠, pero este es el resumen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AddAuthentication&lt;/code&gt;. Establece los esquemas de autenticaci√≥n que por default se usar√°n en la aplicaci√≥n.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AddCookie&lt;/code&gt;. Agrega el esquema de autenticaci√≥n por cookie, esto significa que una vez autenticado en este esquema, se generar√° una cookie de autenticaci√≥n llamada &lt;strong&gt;.ClientWebAppAuth.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AddOpenIdConnect&lt;/code&gt;. Aqu√≠ configuramos OpenID Connect y le estamos indicando que use el servidor de autenticaci√≥n previamente creado:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Authority&lt;/strong&gt;. Es el host del servidor de autenticaci√≥n&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ClientId&lt;/strong&gt;, &lt;strong&gt;Client secret&lt;/strong&gt; y &lt;strong&gt;Response type&lt;/strong&gt;. Esta informaci√≥n debe de coincidir con el cliente creado por el Seed. Por ahora, solo permitimos &lt;code&gt;response_type=code&lt;/code&gt; ya que en el proceso de autorizaci√≥n solo vamos a regresar el &lt;strong&gt;authorization code,&lt;/strong&gt; para que este sea usado inmediatamente como ya lo vimos.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scope&lt;/strong&gt;. Aqu√≠ estamos agregando los scopes que necesitamos, no necesitas siempre todos, pero son los que la aplicaci√≥n requiere (solo como ejemplo, se podr√° no solicitar el scope de profile si no queremos informaci√≥n adicional del usuario).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SaveTokens&lt;/code&gt;. Esto indica que los tokens (access y identity) se guardar√°n en la cookie de auteneticaci√≥n, esto para ser usados despu√©s (ejem. para llamar a la API protegida).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GetClaimsFromUserInfoEndpoint&lt;/code&gt;: Este flag indica si queremos consultar informaci√≥n adicional del usuario, estos se guardar√°n como claims en la cookie previamente configurada.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TokenValidationParameters.NameClaimType&lt;/code&gt;: Aqu√≠ simplemente le indicamos a &lt;a href="http://ASP.NET"&gt;ASP.NET&lt;/a&gt; el nombre del claim que queremos que use para el nombre. Ejem. cuando usamos &lt;code&gt;User.Identity.Name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actualizamos &lt;strong&gt;Index.cshtml&lt;/strong&gt; para poder ver los claims que se nos han emitido por el servidor de autorizaci√≥n:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@page
@using¬†Microsoft.AspNetCore.Authentication
@model¬†IndexModel
@{
¬†¬†¬†¬†ViewData["Title"]¬†=¬†"Home¬†page";
}

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Learn¬†about¬†&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://docs.microsoft.com/aspnet/core"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;building¬†Web¬†apps¬†with¬†ASP.NET¬†Core&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

@if(User.Identity!.IsAuthenticated)
{
¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Welcome¬†@User.Identity.Name&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
¬†¬†¬†¬†¬†¬†¬†¬†@foreach(var¬†claim¬†in¬†@User.Claims)
¬†¬†¬†¬†¬†¬†¬†¬†{
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;@claim.Type:¬†@claim.Value&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
¬†¬†¬†¬†¬†¬†¬†¬†}
¬†¬†¬†¬†¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;access_token:¬†@(await¬†HttpContext.GetTokenAsync("access_token"))&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
¬†¬†¬†¬†¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;id_token:¬†@(await¬†HttpContext.GetTokenAsync("id_token"))&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
¬†¬†¬†¬†&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#probando-la-autenticaci%C3%B3n"&gt;
  &lt;/a&gt;
  Probando la autenticaci√≥n
&lt;/h2&gt;

&lt;p&gt;Necesitamos correr el &lt;strong&gt;IdentityServer&lt;/strong&gt; y el &lt;strong&gt;WebClient&lt;/strong&gt; juntos. Al abrir &lt;strong&gt;WebClient&lt;/strong&gt; este autom√°ticamente nos redireccionar√° al &lt;strong&gt;IdentityServer&lt;/strong&gt; para ser autenticados. Una vez finalizando el proceso, regresaremos a &lt;strong&gt;WebClient&lt;/strong&gt; y tendremos el siguiente resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ha4HAjKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f0h1qy7p3xwr2su6n30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ha4HAjKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f0h1qy7p3xwr2su6n30.png" alt="Image description" width="880" height="335"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Es importante mencionar que debemos de generar las migraciones de Entity Framework correspondientes y ejecutarlas (con &lt;code&gt;dotnet ef&lt;/code&gt;) en el &lt;strong&gt;IdentityServer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En este caso, como mi &lt;strong&gt;IdentityServer&lt;/strong&gt; no tiene m√°s informaci√≥n m√≠a mas que mi correo, eso se est√° usando como mi nombre, pero podr√≠amos extenderlo y agregar m√°s informaci√≥n (esto, ya tema para m√°s a rato referente a Identity Core)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proyecto-protectedapi-la-web-api-protegida"&gt;
  &lt;/a&gt;
  Proyecto ProtectedApi: La Web API protegida
&lt;/h2&gt;

&lt;p&gt;Y por √∫ltimo, falta lo que queremos proteger, en este caso, una Web API.&lt;/p&gt;

&lt;p&gt;Te√≥ricamente, esta Web API contiene informaci√≥n privada del usuario autenticado, y para eso necesitamos un &lt;code&gt;access_token&lt;/code&gt; para validar que usuarios nos acceden.&lt;/p&gt;

&lt;p&gt;Por medio de JWT y Bearer authentication, usaremos los access tokens para validar cada solicitud que llega a nuestra Web API. Pero antes de empezar, hay que crear otro proyecto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new web &lt;span class="nt"&gt;-o&lt;/span&gt; ProtectedApi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para poder usar la autenticaci√≥n por medio de JWT en nuestra API, necesitamos el siguiente paquete:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.AspNetCore.Authentication.JwtBearer"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El ejemplo ser√° muy sencillo, tendremos solamente un endpoint en nuestra Web Api que requiere de un usuario autenticado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bearer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddJwtBearer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bearer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authority&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://localhost:7001"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Audience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"IdentityServerWebClients"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/me"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Claims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationType&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RequireAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En este caso, el esquema default que se configura para la autenticaci√≥n es &lt;strong&gt;Bearer&lt;/strong&gt;. Estamos indicando quien es nuestro Identity Provider (authority) para que nos ayude a autenticar las solicitudes que se reciben.&lt;/p&gt;

&lt;p&gt;Aqu√≠ ocurre la magia, por que &lt;strong&gt;ProtectedApi&lt;/strong&gt; realmente no sabe nada de llaves privadas o p√∫blicas, pero las necesita para validar los access token que le llegan. En este caso, al indicar el host del authority, este autom√°ticamente va y lee el endpoint &lt;code&gt;/.well-known&lt;/code&gt; revisado anteriormente y lee las llaves p√∫blicas RSA que se necesitan para verificar los tokens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebClient&lt;/strong&gt; tiene los access token, entonces necesitamos que este mismo intente acceder a &lt;strong&gt;ProtectedApi&lt;/strong&gt; una vez autenticado.&lt;/p&gt;

&lt;p&gt;Por lo tanto, agregamos la siguiente Razor page en &lt;strong&gt;WebClient&lt;/strong&gt; llamada &lt;code&gt;Me.cshtml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Authentication&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.RazorPages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Net.Http.Headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;WebClient.Pages&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MeModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PageModel&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;HttpClient&lt;/span&gt; &lt;span class="n"&gt;_http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MeModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHttpClientFactory&lt;/span&gt; &lt;span class="n"&gt;httpClientFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_http&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;RawJson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;!;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;OnGet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTokenAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"access_token"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;_http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authorization&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AuthenticationHeaderValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bearer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://localhost:7005/me"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnsureSuccessStatusCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;RawJson&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadAsStringAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqu√≠ por fines del ejemplo se est√° haciendo de una forma no muy pr√°ctica, pero lo que quiero dejar claro es como hacer una llamada HTTP a una API protegida con el access token otorgado por el Identity Provider (que a su vez, est√° guardada en el authorization cookie de &lt;strong&gt;WebClient&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Si consultamos esta p√°gina (navegando a &lt;code&gt;https://localhost:7003/me&lt;/code&gt;) desplegamos el resultado visualizando el &lt;code&gt;RawJson&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@page
@model WebClient.Pages.MeModel

&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Calling Protected API result:&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

@Model.RawJson
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76NIb3gF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygvxdf1ecrzbiolvlxe1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76NIb3gF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygvxdf1ecrzbiolvlxe1.png" alt="Image description" width="880" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si hacemos llamadas sin autenticar, o un JWT inv√°lido, se regresar√° un &lt;code&gt;HTTP 401 Unauthorized&lt;/code&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusi√≥n
&lt;/h1&gt;

&lt;p&gt;Esto pareciera un tema complicado, pero una vez que haces este ejemplo por ti mismo, puedes ver que s√≠ es sencillo, ya que se hace una vez y de ah√≠ funciona para autenticar N aplicaciones (agregando sus respectivos clientes).&lt;/p&gt;

&lt;p&gt;Extenderlo, agregar m√°s proveedores o m√°s tipos de autenticaci√≥n (ejemplo SAML) todo se hace en el &lt;strong&gt;IdentityServer&lt;/strong&gt; y no hay nada m√°s que cambiar en las dem√°s aplicaciones, ya que los clientes hablan OpenID Connect y los claims y tokens est√°n generados en base eso.&lt;/p&gt;

&lt;p&gt;Como tarea, agrega Google o Facebook al &lt;strong&gt;IdentityServer&lt;/strong&gt; para que pueda ser usado como opci√≥n tambi√©n al iniciar sesi√≥n en &lt;strong&gt;WebClient&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Otra tarea que puedes realizar es agregar un cliente Javascript con backend empleando el patr√≥n BFF (Backend For Frontend) o sin backend utilizando la librer√≠a helper &lt;a href="https://github.com/IdentityModel/oidc-client-js"&gt;oidc-client-js&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  Referencias
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://documentation.openiddict.com/guides/getting-started.html"&gt;Getting started (openiddict.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/robinvanderknaap/setting-up-an-authorization-server-with-openiddict-part-v-openid-connect-a8j"&gt;Setting up an Authorization Server with OpenIddict - Part V - OpenID Connect - DEV Community üë©‚Äçüíªüë®‚Äçüíª&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/authenticate/protocols/openid-connect-protocol#openid-and-jwts"&gt;OpenID Connect Protocol (auth0.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/intro-to-iam/what-is-openid-connect-oidc/"&gt;What is OpenID Connect and what do you use it for? - Auth0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow"&gt;Authentication and Authorization Flows (auth0.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/which-oauth-2-0-flow-should-i-use"&gt;Which OAuth 2.0 Flow Should I Use? (auth0.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.okta.com/docs/concepts/oauth-openid/#choosing-an-oauth-2-0-flow"&gt;OAuth 2.0 and OpenID Connect Overview | Okta Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>openid</category>
      <category>authentication</category>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Make money as a frontend Developer ü§ë</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 02:15:57 +0000</pubDate>
      <link>https://dev.to/yaku/make-money-as-a-frontend-developer-1ok8</link>
      <guid>https://dev.to/yaku/make-money-as-a-frontend-developer-1ok8</guid>
      <description>&lt;p&gt;My name is Brian and I am a frontend Developer I'm currently working as a freelancer and today I would like to share with you about the opportunity of being a frontend engineer.&lt;/p&gt;

&lt;p&gt;As a frontend developer, you have a unique opportunity to make a lot of money. There are many companies that are looking for talented frontend developers, and they are willing to pay top dollar for the best talent.&lt;/p&gt;

&lt;p&gt;If you are a frontend developer, you can make a good living by working for a company or by starting your own business. There are many opportunities for frontend developers, and the demand for their skills is high.&lt;/p&gt;

&lt;p&gt;In order to make money as a frontend developer, you need to be skilled in HTML, CSS, and JavaScript. These are the three main technologies that frontend developers use. You also need to be familiar with web browsers and how they work.&lt;/p&gt;

&lt;p&gt;In addition to these skills, you should also be familiar with design principles. This will help you to create attractive and user-friendly interfaces.&lt;/p&gt;

&lt;p&gt;If you want to make money as a frontend developer, you need to be able to work independently. You also need to be able to work with a team of developers.&lt;/p&gt;

&lt;p&gt;If you are a freelance developer, you can make a good living by charging a high hourly rate. If you are working for a company, you may be able to negotiate a higher salary.&lt;/p&gt;

&lt;p&gt;The demand for frontend developers is high, and the pay is good. If you are skilled in HTML, CSS, and JavaScript, you can make a lot of money as a frontend developer. &lt;/p&gt;

&lt;p&gt;Thanks for reading my article if you have any tips on how to make money as a frontend Developer please leave a comment. Feel free to contact me on &lt;a href="mailto:brianlemba2@gmail.com"&gt;brianlemba2@gmail.com&lt;/a&gt; &lt;br&gt;
Or you can follow me on GitHub &lt;a href="//GitHub.com/yakumwamba"&gt;follow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks üòä&lt;/p&gt;

</description>
    </item>
    <item>
      <title>15 CSS tricks that will boost your designing confidence as a frontend Developer ü¶æ</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 02:02:02 +0000</pubDate>
      <link>https://dev.to/yaku/15-css-that-will-boost-your-designing-confidence-as-frontend-developer-1j55</link>
      <guid>https://dev.to/yaku/15-css-that-will-boost-your-designing-confidence-as-frontend-developer-1j55</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Use CSS Grid for Better Layouts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS Grid Layout is a new way to create layouts on the web. It provides a more efficient way to layout your content than using floats or positioning.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Media Queries to Target Different Devices**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Media queries allow you to target different devices with different CSS properties. This is a great way to make your site look great on all devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Use CSS Animations for Eye-Catching Effects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS Animations allow you to create eye-catching effects that can really make your site stand out.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Pseudo-Classes to Add More Style to Your Links**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pseudo-classes allow you to add more style to your links, making them more visually appealing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Use the :before and :after Pseudo-Elements to Add Content to Your Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;:before and :after pseudo-elements allow you to add content to your pages, which can be used to create interesting effects.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the transform Property to Transform Your Elements**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The transform property allows you to transform your elements, which can create some cool effects.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the transition Property to Create Smooth Animations**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The transition property allows you to create smooth animations between CSS properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Use the opacity Property to Create Transparent Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The opacity property allows you to create transparent elements, which can be used to create interesting effects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Use the box-shadow Property to Add Shadows to Your Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The box-shadow property allows you to add shadows to your elements, which can give them a more polished look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Use the border-radius Property to Add Curved Borders to Your Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The border-radius property allows you to add curved borders to your elements, which can give them a more polished look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Use the font-family Property to Choose the Fonts for Your Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The font-family property allows you to choose the fonts for your pages, which can help to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Use the font-size Property to Control the Size of Your Fonts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The font-size property allows you to control the size of your fonts, which can help to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Use the color Property to Control the Color of Your Text&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The color property allows you to control the color of your text, which can be used to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Use the background-color Property to Control the Background Color of Your Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The background-color property allows you to control the background color of your pages, which can be used to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Use the margin and padding Properties to Control the Space Around Your Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The margin and padding properties allow you to control the space around your elements, which can help to create a more polished look.&lt;/p&gt;

&lt;p&gt;Thanks for reading through I hope this article helps you in anyway. &lt;/p&gt;

&lt;p&gt;Please comment any other trick that I may have missed out.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;Kindly follow me on &lt;a href="//GitHub.com/yakumwamba"&gt;git&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What are the differences between Svelte and react.js </title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 01:47:32 +0000</pubDate>
      <link>https://dev.to/yaku/what-are-the-differences-between-svelte-and-reactjs-2n96</link>
      <guid>https://dev.to/yaku/what-are-the-differences-between-svelte-and-reactjs-2n96</guid>
      <description>&lt;p&gt;There are a few key differences between Svelte and React.js:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Svelte is a compiler, while React is a library. This means that Svelte outputs code that is ready to run, while React needs to be compiled into code that can run on a web browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Svelte is a newer technology, having been released in late 2017. React was first released in 2013.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Svelte is smaller in size, and can be less memory-intensive than React.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Svelte is less popular than React, but is gaining in popularity. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Svelte has a smaller community of developers than React. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall, both Svelte and React are great technologies, and it is difficult to say which is better. It really depends on your individual needs and preferences.&lt;/p&gt;

&lt;p&gt;Thanks for making time to read this post. &lt;/p&gt;

&lt;p&gt;Please &lt;a href="//GitHub.com/yakumwamba"&gt;follow me&lt;/a&gt; on GitHub&lt;/p&gt;

&lt;p&gt;Thanks happy coding ‚úåÔ∏è&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Secure a Job in 2022</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 01:40:00 +0000</pubDate>
      <link>https://dev.to/yaku/how-to-secure-a-job-in-2022-502d</link>
      <guid>https://dev.to/yaku/how-to-secure-a-job-in-2022-502d</guid>
      <description>&lt;p&gt;In an economy where the average job tenure is 4.6 years, it‚Äôs important to be proactive about your career. Whether you‚Äôre just starting out or you‚Äôre looking for a change, learning how to get a job as a frontend engineer is a valuable skill.&lt;/p&gt;

&lt;p&gt;Frontend engineering is a rapidly growing field. By 2023, there will be a shortage of 230,000 frontend engineers in the United States alone.&lt;/p&gt;

&lt;p&gt;So, how can you make sure you‚Äôre one of the lucky few who lands a job in this in-demand field? Here are a few tips:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Stay up to date with the latest trends and technologies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Frontend engineering is a constantly evolving field, so it‚Äôs important to stay up to date with the latest trends and technologies. If you want to get a job as a frontend engineer, you need to be able to not only design and build webpages, but also be familiar with the latest tools and frameworks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Get involved in the community.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the best ways to stay up to date with the latest frontend engineering trends is to get involved in the community. There are a number of online and offline communities where you can learn from and connect with other frontend engineers. Attending meetups and conferences is a great way to meet other professionals and learn about the latest industry trends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Build a portfolio of your work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to get a job as a frontend engineer, you need to be able to show potential employers your work. A portfolio is the best way to do this. Make sure to include a variety of projects, from simple websites to more complex applications. If you don‚Äôt have any projects to include, you can also create a personal website or blog and showcase your work there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Get certified&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of frontend engineering certification programs available, such as the Certified Front-End Engineer certification from the American Graphics Institute. Getting certified can demonstrate your knowledge and skills to potential employers and can help you stand out from the competition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Stay up to date on job postings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One of the best ways to find out about job openings is to stay up to date on job postings. There are a number of job boards and websites that list job openings for frontend engineers. Signing up for job alerts is a great way to make sure you don‚Äôt miss any opportunities.&lt;/p&gt;

&lt;p&gt;Landing a job as a frontend engineer can be challenging, but it‚Äôs definitely not impossible. By following these tips, you‚Äôll be on your way to landing your dream job in no time.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
If you need any help building a portfolio contact me on &lt;a href="mailto:brianlemba2@gmail.com"&gt;brianlemba2@gmail.com&lt;/a&gt;&lt;br&gt;
GitHub.com/yakumwamba&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>web3</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Mock isolated service in a React Application</title>
      <author>Miguel</author>
      <pubDate>Tue, 25 Jan 2022 01:37:18 +0000</pubDate>
      <link>https://dev.to/devneto/mock-isolated-service-in-a-react-application-4on3</link>
      <guid>https://dev.to/devneto/mock-isolated-service-in-a-react-application-4on3</guid>
      <description>&lt;p&gt;The term division to conquer was used throughout history in political and political ideals, consisting of the fragmentation of powers, thus, it is a strategy that aims to break or accompany between social structures and take them independently.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Divide and Conquer. - J√∫lio C√©sar"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi guys, how are you today? &lt;/p&gt;

&lt;p&gt;I am writing this post to demonstrate how it is possible to isolate services in a react application and test them independently.&lt;/p&gt;

&lt;p&gt;Step one: &lt;strong&gt;Understanding the structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBIr7Dxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rkdvvmsizhhd9pkq78e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBIr7Dxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rkdvvmsizhhd9pkq78e.png" alt="structure" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adapters&lt;/strong&gt; work as a bridge to the outside world, this is done through external functions or developed interfaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt; are a similar construct used by the repository pattern often used by the backend to build a superficial and literal layer between code and database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entities&lt;/strong&gt; are interfaces and literal representations of the members of our application.&lt;/p&gt;

&lt;p&gt;Step two: &lt;strong&gt;Building an adapter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from "axios";

const api = axios.create({
  baseURL: process.env.API_BASE,
});

export default api;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;center&gt;/adapters/api.ts&lt;/center&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code above is very simple, we are just creating a new instance of axios and exporting it to the rest of the application.&lt;/p&gt;

&lt;p&gt;Third step: &lt;strong&gt;Assembling the entity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The entity is just a type with its respective attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type TUser = {
  name: string;
  email: string;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;center&gt;/entities/user.ts&lt;/center&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last step: &lt;strong&gt;Finally the services&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const registerUser = (user: TUser) =&amp;gt; {
  return api.post("api/user", user);
}

export const getUser = (id: number) =&amp;gt; {
  return api.get(`api/user/${id}`, user);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;center&gt;/services/user.ts&lt;/center&gt;

&lt;p&gt;Ui&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our ui is composed of two inputs and a button with their respective data-testid&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Input data-testid="inputName" /&amp;gt;
&amp;lt;Input data-testid="inputEmail" /&amp;gt;
&amp;lt;Button data-testid="submit" type="submit"&amp;gt;Save&amp;lt;/Button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Writing the tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First let's mock the service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as user from "/services/user.ts";

jest.spyOn(user, "registerUser").mockImplementation(() =&amp;gt;
   Promise.resolve({
      message: "created"
   })
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic is in the code above, we are exporting the entire service file and telling spyOn to look at it as a function object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it("Must submit a new user", async () =&amp;gt; {
  const { getAllByTestId } = render(&amp;lt;User /&amp;gt;);

  const name = getAllByTestId("inputName")[0] as   HTMLInputElement;
  const email = getAllByTestId("inputEmail")[0] as HTMLInputElement;
  const submit = getAllByTestId("submit");

  fireEvent.change(email, { target: { value: "email@email.com" } });
  fireEvent.change(name, { target: { value: "Miguel" } });
  fireEvent.submit(submit);
  await waitFor(() =&amp;gt; 
        expect(user.registerUser).toHaveBeenCalledTimes(1));
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case we expect our form to call our registration function at least once.&lt;/p&gt;

&lt;p&gt;And we reached the end of the tests, the big point is in the import of the service that will be a mock. Take a good look at how the spy function works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HgdyHgaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/068j7du3ioxra0e5os4v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgdyHgaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/068j7du3ioxra0e5os4v.gif" alt="Naruto" width="500" height="282"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;Time is very important, thanks for sharing a little bit of yours with me üòä.&lt;/center&gt;

&lt;p&gt;&lt;a href="https://github.com/devneto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pQJI-Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-100000%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite" alt="image" width="92" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Smart Contracts and NFTs: The Future of Digital Transactions?</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 01:26:54 +0000</pubDate>
      <link>https://dev.to/yaku/smart-contracts-and-nfts-the-future-of-digital-transactions-4a52</link>
      <guid>https://dev.to/yaku/smart-contracts-and-nfts-the-future-of-digital-transactions-4a52</guid>
      <description>&lt;p&gt;What are NFTs and Smart Contracts?&lt;/p&gt;

&lt;p&gt;Non-fungible tokens (NFTs) are tokens that are unique and cannot be interchangeable. They are different from other tokens because they can represent unique assets or digital collectibles. Smart contracts are computer protocols that facilitate, verify, or enforce the negotiation or performance of a contract.&lt;/p&gt;

&lt;p&gt;NFTs and Smart Contracts on the Blockchain&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts are two of the most important features of the blockchain. They are what make the blockchain a powerful tool for creating and managing digital assets. NFTs are stored on the blockchain in a decentralized manner, which means that they are not controlled by any single entity. This makes them more secure and trustworthy than traditional digital assets. Smart contracts are executed by the blockchain, which means that they are automatically enforced and cannot be altered or manipulated. This makes them more reliable than traditional contracts.&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts are two of the most important features of the blockchain.&lt;/p&gt;

&lt;p&gt;How NFTs and Smart Contracts are Used&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts can be used to create and manage digital assets and contracts. They can also be used to create decentralized applications (dapps). Dapps are applications that are built on the blockchain and use its features to provide a more secure and trustworthy experience for users. NFTs and smart contracts are also used to create tokens. Tokens are digital assets that can be used to represent anything of value. They can be used to represent money, assets, or anything else that has value.&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts are two of the most important features of the blockchain.&lt;/p&gt;

&lt;p&gt;Benefits of NFTs and Smart Contracts&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts offer a number of benefits that can be used to improve the digital world. Some of the benefits of NFTs and smart contracts include:&lt;/p&gt;

&lt;p&gt;Security: NFTs and smart contracts are secure and can be used to create and manage digital assets and contracts.&lt;/p&gt;

&lt;p&gt;Trust: NFTs and smart contracts are reliable and can be used to create and manage digital contracts and assets.&lt;/p&gt;

&lt;p&gt;Decentralization: NFTs and smart contracts are decentralized and can be used to create and manage digital assets and contracts without the need for a third party.&lt;/p&gt;

&lt;p&gt;Flexibility: NFTs and smart contracts are flexible and can be used to create and manage a wide variety of digital assets and contracts.&lt;/p&gt;

&lt;p&gt;We are still in the early days of these technologies however we can see that they influence much of how our future transactions will look like.&lt;/p&gt;

&lt;p&gt;Thanks for reading this article really appreciate it as I'm on journey of learning more about NFTs and smart contracts Id like to share what I am learning.&lt;/p&gt;

&lt;p&gt;Feel free to hit me up for a chat or anything üòâ&lt;/p&gt;

&lt;p&gt;Also kindly follow me on GitHub at GitHub.com/yakumwamba&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
