<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Reduce motion with CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sun, 13 Dec 2020 00:04:25 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/consider-reducing-motions-1a13</link>
      <guid>https://dev.to/alvaromontoro/consider-reducing-motions-1a13</guid>
      <description>&lt;p&gt;Operating systems offer different accessibility settings so users can customize and personalize their experience when using a computer. One of those settings is the "Reduce motion" option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDkmvkRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xcr4u9p7gcrfnbef4u5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDkmvkRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xcr4u9p7gcrfnbef4u5v.png" alt="Screenshot of MacOS accessibility settings window"&gt;&lt;/a&gt;&lt;/p&gt;
MacOS counts with many accessibility options



&lt;p&gt;The "Reduce motion" feature is useful for people who experience vertigo or motion sickness. When active, the operating system will reduce the movement of elements on the screen (or stop it altogether).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-prefersreducedmotion-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;prefers-reduced-motion&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;There is a way on CSS to check if the user has this flag activated: the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; media feature.&lt;/p&gt;

&lt;p&gt;It has two possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-preference&lt;/code&gt;: the users didn't specify any preference on this matter or disabled.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reduce&lt;/code&gt;: the users specified that they want to remove or replace the motion-based animations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it will work even if we don't specify a value. Whatever values we put inside the media query will be executed only when the user prefers reduced motion.&lt;/p&gt;

&lt;p&gt;And that is a good place to remove animations and transitions. They are Ok for most users, but if they have the "Reduced motion" flag, we won't show these animated motions to them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* disable all animations and transitions if reduced motion */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#beyond-animations-and-transitions" class="anchor"&gt;
  &lt;/a&gt;
  Beyond animations and transitions
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;animation&lt;/code&gt; and &lt;code&gt;transition&lt;/code&gt; are obvious properties to disable when the user selected the reduced motion on their computer, they are not alone. There are other properties that we should consider disabling too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;scroll-behavior&lt;/code&gt;: specifies how the scroll will happen within the page. By default, it just skips from one section to another, but if the value is &lt;code&gt;smooth&lt;/code&gt;, there will be a small transition that we may want to avoid in reduced motion mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;scroll-snap-type&lt;/code&gt;: a cool feature that could bring some accessibility problems. With scroll snapping, the page will automatically scroll to the specified areas, which may not be something that the user expects or wants.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;marquee-style&lt;/code&gt;: this is a non-standard property that will only affect &lt;code&gt;&amp;lt;marquee&amp;gt;&lt;/code&gt; (which you should not be using anyway) and only on Safari (may require a &lt;code&gt;webkit&lt;/code&gt; vendor's prefix). With the value &lt;code&gt;none&lt;/code&gt;, it will stop all marquees on the page.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;When developing, remember to respect the user's "Reduced Motion" settings by using &lt;code&gt;prefers-reduced-motion.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>css</category>
    </item>
    <item>
      <title>Stop Memorizing! : The #1 Advice I Wish Someone Would Have Told Me</title>
      <author>Brenda Michelle</author>
      <pubDate>Sat, 12 Dec 2020 23:10:55 +0000</pubDate>
      <link>https://dev.to/brendamichellle/stop-memorizing-the-1-advice-i-wish-someone-would-have-told-me-5cnj</link>
      <guid>https://dev.to/brendamichellle/stop-memorizing-the-1-advice-i-wish-someone-would-have-told-me-5cnj</guid>
      <description>&lt;p&gt;When I first started my self-learning journey I would try to memorize everything, from every HTML tag to every use case of every CSS property. Because of that, I felt like I was making no progress. Every time I would try to code something I could not think of the exact code off the top of my head and I thought: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I am so stupid.&lt;/li&gt;
&lt;li&gt;This is not for me. &lt;/li&gt;
&lt;li&gt;Why can't this just stick?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Little did I know that my learning approach was completely wrong. It wasn’t until I completely shifted my learning approach that I started to make significant progress.  &lt;/p&gt;

&lt;p&gt;In this article, I will show you why memorizing is not the right approach in learning to code. I will also share some quick tips to help you shift your learning approach. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-is-your-best-friend" class="anchor"&gt;
  &lt;/a&gt;
  Google is your best friend
&lt;/h2&gt;

&lt;p&gt;You do not need to memorize everything. Even the best software engineers still Google and copy and paste from stack overflow. If there were perfect engineers there wouldn't be software updates every few months. If you know how to Google properly and use the correct keywords to find what you are looking for you are set. Instead of memorizing focus on problem-solving skills practice by building projects and going on websites to practice algorithms and data structures. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#muscle-memory" class="anchor"&gt;
  &lt;/a&gt;
  Muscle memory
&lt;/h2&gt;

&lt;p&gt;You can reference the muscle memory phenomenon and use it to help your learning process.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Muscle memory is a form of procedural memory that involves consolidating a specific motor task into memory through repetition, which has been used synonymously with motor learning. When a movement is repeated over time, a long-term muscle memory is created for that task, eventually allowing it to be performed with little to no conscious effort.” -Wikipedia&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The more you practice the more you will understand and you will begin to think like a programmer. You will know when to use a specific HTML tag or CSS property or even think of JavaScript functions a lot easier. You will be able to "dream of code" and understand how it works.&lt;/p&gt;

&lt;p&gt;Programming is a completely different way of thinking. Most brains are not programmed to think this way. You have to teach your brain how to think like a programmer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-tips" class="anchor"&gt;
  &lt;/a&gt;
  Quick Tips
&lt;/h2&gt;

&lt;p&gt;When you are studying and writing out your notes make sure they are properly structured so that it is easy to go back to them. You will always have to revisit your notes. This is one of the reasons why I like having digital notes. I can easily search and find what I need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#talk-to-yourself" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Talk to yourself!&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;When you are coding talk to yourself and explain every step. Why are you using a specific CSS property or what is your function doing. &lt;/p&gt;

&lt;p&gt;Especially when you are stuck on a bug this is the best time to learn. Talk to yourself through the problem. Go through every step. &lt;/p&gt;

&lt;p&gt;There are a lot of different approaches you can take when learning to code. It all depends on your learning style and what works best for you. I hope this was helpful. &lt;/p&gt;




&lt;p&gt;If you are even a bit intrigued and are interested in learning to code &lt;a href="https://www.instagram.com/brendamichellle/"&gt;lets connect!&lt;/a&gt; I would love to help in any way I can.&lt;/p&gt;

&lt;p&gt;Photo by Jesse Martini on Unsplash&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Surviving Your First Code Review</title>
      <author>Dan Goslen</author>
      <pubDate>Sat, 12 Dec 2020 23:09:00 +0000</pubDate>
      <link>https://dev.to/dangoslen/surviving-your-first-code-review-48p0</link>
      <guid>https://dev.to/dangoslen/surviving-your-first-code-review-48p0</guid>
      <description>&lt;p&gt;I remember my first code review as a software engineer. I was pretty nervous about opening the link in the email saying my code review was complete. I was afraid to look at the feedback.&lt;/p&gt;

&lt;p&gt;I'd never had my code formally reviewed before. In my undergraduate days, we just kinda made sure each other's code was "good" - whatever that meant.&lt;/p&gt;

&lt;p&gt;When I entered into my first full-time role, I learned that code reviews were a common part of ensuring code quality. Often done via &lt;a href="https://dangoslen.me/blog/whats-the-point-of-pull-requests-anyway/"&gt;pull requests&lt;/a&gt;, developers were encouraged to provide feedback on how to improve code and validate its correctness before merging code to the mainline. The core intention was to keep a high-quality codebase.&lt;br&gt;
Sounds good.&lt;/p&gt;

&lt;p&gt;But there is something we all fear: &lt;strong&gt;rejection&lt;/strong&gt;. We fear not being good enough. Code reviews become a place for junior engineers (or any engineers really) to come face to face with that fear. That first time you request a review from the senior engineer on the team can be daunting.&lt;/p&gt;

&lt;p&gt;And let's face it: no one's code is perfect. Your code review will have some form of feedback. Even as a senior engineer, I get regular feedback from my peers about how to improve my code. For junior engineers, the feedback can often be a lot and overwhelming. Comments like "Don't do this." or "Change this to use a ternary expression." or "Why?" can easily take a bright-eyed engineer and make them question how they ever got a job in the first place.&lt;/p&gt;

&lt;p&gt;My goal for this article is to give you some quick tools to survive that first code review. Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-your-reviewers-some-context" class="anchor"&gt;
  &lt;/a&gt;
  Give Your Reviewers Some Context
&lt;/h2&gt;

&lt;p&gt;The best way to survive your first code review is to help your reviewers understand what your code is doing. Without context, reviewers will have to ask more questions and create a mental model of what your code is doing. It can lead your reviewer to incorrect conclusions and therefore giving poor feedback.&lt;/p&gt;

&lt;p&gt;The best way to provide context is when you request a review. If you are using pull requests, take the time to give your pull request a proper title and description. If you are using a story or issue tracking system, provide a link in the description tool. If there were tricky spots in the code or places you have a question, add comments before your reviewers take a look. &lt;/p&gt;

&lt;p&gt;All of this helps your reviewer provide the best feedback possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-all-of-the-feedback-before-making-changes" class="anchor"&gt;
  &lt;/a&gt;
  Read All of the Feedback Before Making Changes
&lt;/h2&gt;

&lt;p&gt;Once you receive feedback, don't be afraid. Take a few deep breaths, grab a hot beverage, and read through it all. Read each comment and critique before going too in-depth on any one of them.&lt;/p&gt;

&lt;p&gt;Even if there are a lot, this is helpful for a few reasons. First, you will be able to see which comments are more important than others. Once you identify these topics, focus your energy on addressing those first before spending time addressing small critiques over and over.&lt;/p&gt;

&lt;p&gt;Second, this allows you to see if there is an overall theme amongst all of the feedback. Feedback about readability? Memory-management? Maybe framework-specific issues? Understanding the themes of the feedback you have received allows you to focus on those topics more generally than just blindly making a requested change.&lt;/p&gt;

&lt;p&gt;The last reason I think this is important to do is that it allows you to think wholistically before making line-by-line changes. A common form of feedback in code reviews is the suggestion to refactor a class or function. But this often requires changes in several places. If you were to make each change individually, you would find that your refactor has addressed some of those comments. This makes it harder to understand if a comment is relevant or not taken one-by-one instead of holistically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-for-clarification" class="anchor"&gt;
  &lt;/a&gt;
  Ask for Clarification
&lt;/h2&gt;

&lt;p&gt;When a reviewer provides feedback that is ambiguous or confusing, ask for clarification. If you are confused by their comment, just accepting it at face value can lead to even more confusion. After a few rounds of that, frustration can mount and turn the entire code review sour.&lt;/p&gt;

&lt;p&gt;Let's walk through a common scenario you might encounter. You receive a comment saying to overload a function to allow for a different object to be passed as a parameter. But the object the reviewer is suggesting doesn't seem to be related to the function at all. You don't understand what they are getting at. Instead of blindly accepting their suggestion, ask for clarity. Why would that be helpful? Is there something about that object that you don't know? While trivial, situations like this arise all the time in reviews. Fight for clarity as early as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hold-your-ground" class="anchor"&gt;
  &lt;/a&gt;
  Hold Your Ground
&lt;/h2&gt;

&lt;p&gt;Not all feedback is correct. Not all requests for changes are necessary. Don't simply make changes because a reviewer said so. If you don't think the changes are either correct or needed, say so and ask if the reviewer agrees.&lt;/p&gt;

&lt;p&gt;One approach that might is to create clear language about the severity of feedback before review time. Within your team, create a standard set of rules or language about feedback to identify blocking and non-blocking feedback. &lt;/p&gt;

&lt;p&gt;For instance, I've worked on teams where we always said an item was a non-blocking piece of feedback in the comments we provided. As a team, this helped us to understand where to focus on changes. This also kept us from getting into useless debates on small issues that didn't matter in the grand scheme of the changes.&lt;/p&gt;

&lt;p&gt;As always, though, remember to hold your ground humbly. State why you don't think a change is required and not just that you won't do it. Cite articles and documentation on why you think so. You are both on the same team, after all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-specific-feedback-to-really-work-on" class="anchor"&gt;
  &lt;/a&gt;
  Choose Specific Feedback to Really Work On
&lt;/h2&gt;

&lt;p&gt;Once the code review is done and everything is merged, you still have some work left. Write down one or two (but no more!) areas where you got feedback to work on. Maybe it was writing better tests. Perhaps it was improving your knowledge of a framework.&lt;/p&gt;

&lt;p&gt;Whatever it was, take some time to learn what you need to not repeat the same mistakes as before. I'm not saying you will be perfect. No can be! Repeating the same mistakes over and over means you aren't putting in the effort to grow. Your team gave you specific areas of feedback, pointing out where to focus next. It would be silly if you didn't listen to some of it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Use these tools to survive and grow from your first code review. While these tools are helpful, the number one thing that will help you is attitude. Approach your feedback as opportunities to grow and learn. Remember that everyone deals with &lt;a href="https://plantae.org/combatting-the-impostor-syndrome-in-academic-science-you-probably-are-as-smart-as-they-think/"&gt;imposter syndrome&lt;/a&gt;. Just because you don't know something doesn't mean you can't learn it or that you don't deserve to be there.&lt;/p&gt;

&lt;p&gt;A great team will give you feedback to help you. They want you to succeed. They hired you! You can do it.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>codenewbie</category>
      <category>codereview</category>
      <category>career</category>
    </item>
    <item>
      <title>When to use the 'for' loop</title>
      <author>Hazel Anne Villareal</author>
      <pubDate>Sat, 12 Dec 2020 20:59:58 +0000</pubDate>
      <link>https://dev.to/ennalezah/when-to-use-the-for-loop-5em4</link>
      <guid>https://dev.to/ennalezah/when-to-use-the-for-loop-5em4</guid>
      <description>&lt;p&gt;Nope, not Froot Loops. That cereal is nasty. 🤮&lt;/p&gt;

&lt;p&gt;I'm talking about JavaScript loops, and thank goodness for 'em!&lt;/p&gt;

&lt;p&gt;Loops are something you should feel confident with when coding. You're going to need it, and you'll be using it more than you think. Without it, we'd all be writing lines and lines of repeated code, which totally goes against writing &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a few different &lt;a href="https://www.tutorialrepublic.com/javascript-tutorial/javascript-loops.php"&gt;loop statements&lt;/a&gt; to choose from, and depending on the data you're working with and what your main goal is, sometimes, it makes more sense to use one than the other.&lt;/p&gt;

&lt;p&gt;To help start us off in this series, let's take a look at the &lt;code&gt;for&lt;/code&gt; loop, the most common one in the bunch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-structure" class="anchor"&gt;
  &lt;/a&gt;
  🏗 Structure
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (initialization; condition; iteration) {
   loop body
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;initialization - Think of this as a counter. You give it a number to start with (you're &lt;em&gt;initializing&lt;/em&gt; it).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;condition - This is a logical statement that must return &lt;code&gt;true&lt;/code&gt; in order for the loop body to execute, and it uses the current value in 'initialization' to determine if the condition is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;loop body - This is the block of code that will run, but only if condition is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iteration - Once the loop body is done doing what it needs to do, iteration updates the counter/initialization value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  ✏️ Example
&lt;/h2&gt;

&lt;p&gt;You're helping create a grading app, and the feature you're working on allows teachers to select a few of the students' grades so extra credit can be added to it. The teacher should be able to input a score, and that score will be added to the selected grades.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function extraCredit(grades, extraCreditScore) {

   for (let i = 0; i &amp;lt; grades.length; i++) {
      grades[i] += extraCreditScore;
   }

   return grades;
}

const grades = [75, 90, 83, 87, 69, 72];
const extraCreditScore = 5;

const newGrades = extraCredit(grades, extraCreditScore);
console.log(newGrades);

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Check out my &lt;a href="https://repl.it/@ennalezah/choosing-the-right-loop#script.js"&gt;Repl.it&lt;/a&gt; to see the code in action. Feel free to add the commented sections back in to see what's really happening as the loop body runs.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  🧠 How it works
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* The `for` loop flow
1. Initialization
2. Condition
3. Loop body
4. Iteration
5. Return to step 1, and repeat everything until condition becomes `false`.
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what's happening exactly when the &lt;code&gt;for&lt;/code&gt; loop runs?&lt;/p&gt;

&lt;p&gt;Well, let's, first, take a look at our function &lt;code&gt;extraCredit&lt;/code&gt;. It accepts two parameters that will be used in our loop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;grades&lt;/code&gt; - These are the grades that the teacher selected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;extraCreditScore&lt;/code&gt; - This is the extra credit score that was entered by the teacher.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we're expecting to happen is that each element in &lt;code&gt;grades&lt;/code&gt; will have the &lt;code&gt;extraCreditScore&lt;/code&gt; added to it. The function will then return the array but with the updated grades.&lt;/p&gt;

&lt;p&gt;When the function executes, the first thing that's looked at is &lt;code&gt;let i = 0&lt;/code&gt; (initialization), then &lt;code&gt;i &amp;lt; grades.length&lt;/code&gt; (condition). This is basically saying, "We're starting at &lt;code&gt;75&lt;/code&gt;, the first element in &lt;code&gt;grades&lt;/code&gt; (remember, arrays start with an index of 0). The length of &lt;code&gt;grades&lt;/code&gt; is &lt;code&gt;6&lt;/code&gt;,  so is &lt;code&gt;0 &amp;lt; 6&lt;/code&gt;?"&lt;/p&gt;

&lt;p&gt;Ding, ding, ding! 🎰 Our condition statement is &lt;code&gt;true&lt;/code&gt;, which allows us to go into the loop body (&lt;code&gt;grades[i] += extraCreditScore&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;In the loop body, the value of &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;grades[i]&lt;/code&gt; takes the current value of &lt;code&gt;i&lt;/code&gt; in initialization (&lt;code&gt;i = 0&lt;/code&gt;), so &lt;code&gt;grades[0] == 75&lt;/code&gt;. The loop body is saying, "&lt;code&gt;75 + 5&lt;/code&gt;(&lt;code&gt;grades[0]&lt;/code&gt; + &lt;code&gt;extraCreditScore&lt;/code&gt;), then reassign &lt;code&gt;grades[0]&lt;/code&gt; with the updated grade, so now, &lt;code&gt;grades[0] = 80&lt;/code&gt;."&lt;/p&gt;

&lt;p&gt;Once that loop body is done running, our code goes back up to &lt;code&gt;i++&lt;/code&gt; (iteration). This is saying, "Increase the current value of &lt;code&gt;i&lt;/code&gt; by 1."&lt;/p&gt;

&lt;p&gt;Aaaand... we're back to initialization, but this time, &lt;code&gt;i == 1&lt;/code&gt;. The flow, then, keeps repeating until condition returns &lt;code&gt;false&lt;/code&gt;. When that happens, it exits the loop body, and our code moves on to &lt;code&gt;return grades&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-it" class="anchor"&gt;
  &lt;/a&gt;
  🎯 When to use it
&lt;/h2&gt;

&lt;p&gt;Use this loop when you know exactly how many times you need the loop to run. This is why the &lt;code&gt;for&lt;/code&gt; loop is often times used on arrays.&lt;/p&gt;

&lt;p&gt;It uses the length of an array to tell it to loop x amount of times. Initialization keeps track of the element in the array (by index number) that is being "worked on." Loop body is what will update the value of the elem being worked on. And iteration keeps things moving along.&lt;/p&gt;

&lt;p&gt;Whew - that was a lot! 😅 But I hope you now have a better understanding of how to use a &lt;code&gt;for&lt;/code&gt; loop, what's happening while it's running, and when to use it.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating a spell checker plugin for Gatsby</title>
      <author>Lenvin Gonsalves</author>
      <pubDate>Sat, 12 Dec 2020 19:58:08 +0000</pubDate>
      <link>https://dev.to/98lenvi/creating-a-spell-checker-plugin-for-gatsby-2ok9</link>
      <guid>https://dev.to/98lenvi/creating-a-spell-checker-plugin-for-gatsby-2ok9</guid>
      <description>&lt;p&gt;I occasionally write blogs at my website, &lt;a href="https://lenvingonsalves.me"&gt;lenvingonsalves.me&lt;/a&gt;, but with a lot of spelling mistakes. Since I use a code editor to write most of my content, using Grammarly is not an option. &lt;/p&gt;

&lt;p&gt;Being the developer that I am,  I couldn't help but follow the first law of our religion&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If a task takes 5 minutes to do manually, and takes 5 hrs to automate, then you must automate it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, from there I thought of creating a Gatsby plugin, that would find out spelling mistakes in the content I write, and then show it to me. This would also provide a very good learning experience for me, as I have never created a Gatsby plugin that dealt with remark &amp;amp; markdown. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it" class="anchor"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h2&gt;

&lt;p&gt;For now, I haven't published the plugin in npm, because it still needs a lot of work. If you are curious, you can clone the plugin from the &lt;a href="https://github.com/98lenvi/gatsby-remark-hunspell"&gt;Github repository here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, navigate to the root of the project, install the dependencies using yarn or npm. Once you are done installing, link it. Here are the steps for yarn users&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn &lt;span class="nb"&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then navigate to your gatsby project's directory and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn &lt;span class="nb"&gt;link &lt;/span&gt;gatsby-remark-hunspell
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then add &lt;code&gt;gatsby-remark-hunspell&lt;/code&gt; to the &lt;code&gt;gatsby config.js&lt;/code&gt;, it should be in the &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-transformer-remark`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="s2"&gt;`gatsby-remark-hunspell`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="p"&gt;]&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then start your development server, the errors in the markdown will be shown in the following way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzK2lhK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qj53ddqkh0uq1c1y27fc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzK2lhK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qj53ddqkh0uq1c1y27fc.jpg" alt="Screenshot of gatsby-remark-hunspell in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation" class="anchor"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;I was able to put up a first version of the plugin. To be honest, I have taken a lot of inspiration from Gatsby's official plugins. The plugin does the following - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Traverses the nodes in  Markdown AST generated by &lt;code&gt;gatsby-transformer-remark&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If the node is of type paragraph, list, heading, or blockquote, then find its child node which contains the text.&lt;/li&gt;
&lt;li&gt;From the text, remove all special characters (including ', which is not good) and then split it into an Array using space as the delimiter&lt;/li&gt;
&lt;li&gt;Here, we will be passing each word to the Nodejs library called &lt;code&gt;nodehun&lt;/code&gt; which is a wrapper around Hunspell (It is a spellchecker used in a lot of other applications)&lt;/li&gt;
&lt;li&gt;If there are suggestions we add them to the suggestion array. &lt;/li&gt;
&lt;li&gt;Then we create a node in the markdown AST with all the suggestions for the paragraph, blockquote, etc &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is only a brief explanation, you can check out the source code here, which is having comments to help you understand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h2&gt;

&lt;p&gt;There are a few drawbacks, and here are the improvements that will be made - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On projects with too many markdown files, it runs out of memory, I need help to understand and fix this. &lt;/li&gt;
&lt;li&gt;Use a better regular expression to remove special characters from the words before passing them to Hunspell.&lt;/li&gt;
&lt;li&gt;Need to work on the style such that it doesn't look like Grammarly&lt;/li&gt;
&lt;li&gt;Need to provide an option to run this plugin only in development or staging environments.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for taking the time to read through my experience of creating a gatsby plugin&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>html</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>Meta Tags : All that you need to know</title>
      <author>Radhika Joshi</author>
      <pubDate>Sat, 12 Dec 2020 17:33:08 +0000</pubDate>
      <link>https://dev.to/radhikarj/meta-tags-all-that-you-need-to-know-5800</link>
      <guid>https://dev.to/radhikarj/meta-tags-all-that-you-need-to-know-5800</guid>
      <description>&lt;p&gt;&lt;em&gt;Wondering what the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags are in the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; section of your HTML document, then read ahead &amp;amp; get all your queries resolved.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meta tags:&lt;/strong&gt;&lt;br&gt;
These are the tags that provide &lt;em&gt;additional document level&lt;/em&gt; descriptive information about the content of the html document. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is the meta tag content visible like the body content?&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;&lt;em&gt;No&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the utility of having additional information?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify important keywords related to the document&lt;/li&gt;
&lt;li&gt;Provide relevant keywords to search engines as well as web crawlers to refer to the html document &lt;/li&gt;
&lt;li&gt;Indexing and ranking of web pages during search&lt;/li&gt;
&lt;li&gt;Displaying snippets of document as search result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To answer the above questions, lets dive in &amp;amp; understand the meaning of the most commonly visible meta tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
&amp;lt;meta charset="UTF-8"&amp;gt;
&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The description in the meta tag is defined in a key-value pair. &lt;br&gt;
As visible above, the key &lt;strong&gt;"charset"&lt;/strong&gt; has the value &lt;strong&gt;"UTF-8"&lt;/strong&gt; defined to it. This provides details to the searcher that the document has UTF-8 character encoding. Not mentioning this can impact the rendering of the website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;: This meta tag key provides document level information that applies to the whole page.&lt;br&gt;
The value specified to it here is &lt;strong&gt;"viewport"&lt;/strong&gt;: this defines that the document is adjustable to be viewed with ease on the mobile screens. Appended with the &lt;strong&gt;"content"&lt;/strong&gt; key we can conclude that the content is adjustable to be viewed on mobile handsets having the defined properties of &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;initial-scale&lt;/strong&gt;.&lt;br&gt;
 Together, the &lt;code&gt;name="viewport"&lt;/code&gt; can be observed to be the "key" that has the "value" defined by &lt;code&gt;content = "width=device-width, initial-scale=1.0"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;charset&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt; &amp;amp; &lt;code&gt;http-equiv&lt;/code&gt; and &lt;code&gt;itemprop&lt;/code&gt; are known as &lt;strong&gt;attributes&lt;/strong&gt; of the meta tag. Using these &lt;em&gt;attributes&lt;/em&gt; the additional information about the document can be defined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;http-equiv&lt;/strong&gt;: provides information that can be considered to be quivalent to the information provided by HTTP headers. Also referred to as &lt;em&gt;pragma directive&lt;/em&gt; tag. Observe the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta http-equiv="refresh" content="3;url=https://example.com"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This defines the webpage to be refreshed after 3 seconds by directing it to the specified URL. The use of this should be done wisely and only where truly needed to avoid discomfort to readers of your website caused by frequent reloading of the document.&lt;/p&gt;

&lt;p&gt;There are several attributes that can be used in the meta tag to append and provide additional information about it. You can have multiple meta tags with each having information represented in a "key"-"value" pair.&lt;/p&gt;

&lt;p&gt;If you are more interested in reading up about meta-tags (What makes a meta-tag Good or Bad?) from a SEO perspective, you can refer to this interesting article &lt;a href="https://moz.com/blog/the-ultimate-guide-to-seo-meta-tags"&gt;Click to Read more&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Hope you found this blog valuable.&lt;br&gt;
Thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>3 Ways to Make`target="_blank"` Accessible</title>
      <author>Lucia Cerchie</author>
      <pubDate>Sat, 12 Dec 2020 17:06:10 +0000</pubDate>
      <link>https://dev.to/cerchie/3-ways-to-make-target-blank-accessible-3lan</link>
      <guid>https://dev.to/cerchie/3-ways-to-make-target-blank-accessible-3lan</guid>
      <description>&lt;p&gt;I was writing a static page for an open source project recently and I wanted to insert some links. Personally, I prefer the links that pop up in a new window. That way I can have one bajillion tabs open at once, like usual. (You shouldn't always write this attribute and personal preference is not a great reason to use it, as I &lt;a href="https://css-tricks.com/use-target_blank/"&gt;have learned&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;But how do you implement new tabs? Add a &lt;code&gt;target="_blank"&lt;/code&gt; HTML attribute like so:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8ukQJAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qcwv5bvjdnw8z91jkrio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8ukQJAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qcwv5bvjdnw8z91jkrio.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The links were the main feature in this static page, and I wanted to check if I wrote them accessibly, so I tweeted at the &lt;a href="https://www.a11yproject.com/"&gt;A11y Project&lt;/a&gt; to check on my syntax. &lt;/p&gt;

&lt;p&gt;They helpfully pointed out that people using assistive technology &lt;a href="https://www.a11yproject.com/checklist/#identify-links-that-open-in-a-new-tab-or-window"&gt;could be frustrated&lt;/a&gt; by a surprise window popping up.&lt;/p&gt;

&lt;p&gt;So, what's the solution? &lt;/p&gt;

&lt;p&gt;There are a couple &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/G201.html"&gt;things to try&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You could add a warning in the name or label like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g21XLnRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pdm0ebohzhgoys9vkm06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g21XLnRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pdm0ebohzhgoys9vkm06.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could also use CSS to generate a warning. W3.org has &lt;a href="https://www.w3.org/WAI/WCAG20/Techniques/working-examples/G201/new-window.html"&gt;an example&lt;/a&gt; of what that looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zuh8xEVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n6wwhozehqk2mt1fpz69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuh8xEVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n6wwhozehqk2mt1fpz69.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You're gonna need a span inside your link, wrapping the warning message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oOwJtC1l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wzmysgs6s8rbcq2ouum7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oOwJtC1l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wzmysgs6s8rbcq2ouum7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you'll need to apply CSS classes to hide the warning message until you hover. W3.org has &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/G201.html"&gt;more detail&lt;/a&gt; on that.&lt;/p&gt;

&lt;p&gt;Alternatively, you can add a &lt;code&gt;screen-reader-only&lt;/code&gt; class to your span. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNbLqLVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q39gbsw0ben08br2enpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNbLqLVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q39gbsw0ben08br2enpw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you would add CSS like this: &lt;a href="https://codersblock.com/blog/external-links-new-tabs-and-accessibility/"&gt;source for CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c4UFI0cu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g4x2natywbux4aprn83n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c4UFI0cu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g4x2natywbux4aprn83n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there you have it. Three ways to make your &lt;code&gt;target="_blank"&lt;/code&gt; attribute accessible.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What are the traits of a distinguished engineer?</title>
      <author>Indrek Lasn</author>
      <pubDate>Sat, 12 Dec 2020 17:02:29 +0000</pubDate>
      <link>https://dev.to/indreklasn/what-are-the-traits-of-a-distinguished-engineer-22cj</link>
      <guid>https://dev.to/indreklasn/what-are-the-traits-of-a-distinguished-engineer-22cj</guid>
      <description>&lt;p&gt;&lt;strong&gt;This article was originally published here: &lt;a href="https://thewholesome.dev/p/traits-of-a-distinguished-software"&gt;https://thewholesome.dev/p/traits-of-a-distinguished-software&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Software engineering, also identified as the art of finding elegant solutions to complex problems. Software engineers are code crafters who create art with their minds. This conjures the question—What makes someone good at their craft?&lt;/p&gt;

&lt;p&gt;Honestly, there are no right or wrong answers here. What is a good software engineer? — it’s subjective and up for anyone to interpret. But, there are some qualities we collectively appreciate in an engineer.&lt;/p&gt;

&lt;p&gt;Here are my personal views on what makes someone an excellent engineer and a great person to work with.&lt;/p&gt;

&lt;p&gt;I welcome any additional qualities you love to see in engineers in the comments.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#youre-fun-to-work-with" class="anchor"&gt;
  &lt;/a&gt;
  You’re fun to work with
&lt;/h2&gt;

&lt;p&gt;Imagine the following scenario: You published a new pull request yesterday. The pull request was a new feature.&lt;/p&gt;

&lt;p&gt;The next morning— you feel good and feel ready to crush the day. &lt;/p&gt;

&lt;p&gt;You open up the GitHub repository and hope for a smooth merge. But that doesn’t happen.&lt;/p&gt;

&lt;p&gt;Your teammate is nit-picking on your variable naming, semi-colon insertions, and other trivialities—while completely ignoring the feature you implemented without any issues or bugs.&lt;/p&gt;

&lt;p&gt;Don’t be the guy to pester your teammates with trivialities. Use a linter or prettier to agree on code standards.&lt;/p&gt;

&lt;p&gt;The before-mentioned tools let teams agree on a standard while maintaining coding flavor.&lt;/p&gt;

&lt;p&gt;Being a fun person to work with is absolutely crucial to being a great software engineer. &lt;/p&gt;

&lt;p&gt;Many engineers think that their code speaks for themselves. While we all appreciate great code—don’t be a jerk! Especially if you’re more experienced. &lt;/p&gt;

&lt;p&gt;A great engineer should be fun to work with, non-lethargic, and ready to take on challenges. &lt;/p&gt;

&lt;p&gt;No matter how technically brilliant you are—you’ll always be limited by your ability to communicate. Make your life easier by being fun around and to work with.&lt;/p&gt;

&lt;p&gt;“A rational person can find peace by cultivating indifference to things outside of their control.” — Naval Ravikant&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ability-to-teach-and-learn" class="anchor"&gt;
  &lt;/a&gt;
  Ability to Teach and Learn
&lt;/h2&gt;

&lt;p&gt;Having the ability to lift your teammates is invaluable.&lt;/p&gt;

&lt;p&gt;You might be extremely proficient in X, while your teammate might be experienced in Y. &lt;/p&gt;

&lt;p&gt;The ability to exchange knowledge and thoughts is often underlooked during interviews. Great teams put their minds together. Greater problems require great teams.&lt;/p&gt;

&lt;p&gt;If you want to become a great engineer, you should be able to averse your ego and status in the hierarchy.&lt;/p&gt;

&lt;p&gt;Wise senior engineers will often tell you they learn new things from junior engineers all the time. Junior engineers are eager to prove themselves.&lt;/p&gt;

&lt;p&gt;Junior engineers follow the latest unproven tools and programming trends.&lt;/p&gt;

&lt;p&gt;A wise engineer considers and accepts any information from any source. Leave your dogmas at the door.&lt;/p&gt;

&lt;p&gt;Amazing developers who lack team skills stagnate in roles. Be ready to be the master, and the student the other day.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#not-giving-up-when-things-get-hard-be-willing-to-put-the-hours-in" class="anchor"&gt;
  &lt;/a&gt;
  Not Giving Up When Things Get Hard — Be Willing to Put the Hours In
&lt;/h2&gt;

&lt;p&gt;It’s a matter of time until you’ll face a challenge that shocks and overwhelms you. &lt;/p&gt;

&lt;p&gt;You ask yourself the following: “I have to do what?! That’s impossible!” &lt;/p&gt;

&lt;p&gt;Stay calm, don’t panic.&lt;/p&gt;

&lt;p&gt;I can affirm this is all part of the ride of software engineering.&lt;/p&gt;

&lt;p&gt;Feeling overwhelmed is a vigorous thing— it’s how we evolve. &lt;/p&gt;

&lt;p&gt;To grow, we have to face new and harder challenges — it’s the best method. &lt;/p&gt;

&lt;p&gt;When the time comes, don’t be afraid to take the giant leap forward.&lt;/p&gt;

&lt;p&gt;As with any skill, you have to put in the hours. If it’s worth doing, it’s worth doing great. Don’t just do things for the sake of it, do it because you want to show everyone how great your work is. &lt;/p&gt;

&lt;p&gt;If you’re asked to do X— do it with meticulous care plus do more than asked. Over-deliver and under-promise.  &lt;/p&gt;

&lt;p&gt;A reliable method for getting good at coding is putting in the hours. Build stuff, build anything, just build it. If you lack creativity—I have coding challenges, search for them on my profile.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#taking-ownership-and-beyond" class="anchor"&gt;
  &lt;/a&gt;
  Taking Ownership and Beyond
&lt;/h2&gt;

&lt;p&gt;If artisans take ownership and treat their code as if it belongs to them personally — they will take special care and consideration.&lt;/p&gt;

&lt;p&gt;Small teams inside a big company can quickly lose the ownership feeling. That’s why Google wants small and independent teams for their products. They're being smart.&lt;/p&gt;

&lt;p&gt;Here’s a simple protip: Treat the codebase as if the next person to deal with it will be a serial killer who knows where you live.&lt;/p&gt;

&lt;p&gt;Jokes aside— ownership is a powerful concept. If you're given a task, treat that task as it serves you directly.&lt;/p&gt;

&lt;p&gt;You want to work in a well-known company, that changes the world for the better and leaves a dent in the universe. By taking ownership and responsibility for your actions— you’re putting yourself on the radar for those types of teams.&lt;/p&gt;




&lt;p&gt;🏁 Enjoy This?&lt;/p&gt;

&lt;p&gt;Forward it to a friend, and let them know they can subscribe for free future releases &lt;a href="https://thewholesome.dev/welcome"&gt;here.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>Database Design and the GDPR</title>
      <author>Lucia Cerchie</author>
      <pubDate>Sat, 12 Dec 2020 15:35:35 +0000</pubDate>
      <link>https://dev.to/cerchie/database-design-and-the-gdpr-463p</link>
      <guid>https://dev.to/cerchie/database-design-and-the-gdpr-463p</guid>
      <description>&lt;p&gt;*knowledge dependencies for understanding this article include &lt;a href="https://www.youtube.com/watch?v=27axs9dO7AE"&gt;beginner's SQL&lt;/a&gt;(including &lt;a href="https://www.youtube.com/watch?v=xDti3Y66Naw"&gt;ON_DELETE CASCADE&lt;/a&gt;) and beginner's &lt;a href="https://www.youtube.com/watch?v=cepspxPAUTA"&gt;database design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The first thing I want to do is acknowledge that the inspiration and one of the resources for this article was a conversation I had with &lt;a href="https://github.com/The-Don-Himself"&gt;Don Omondi&lt;/a&gt;. He's a wonderful teacher.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, so &lt;a href="https://gdpr.eu/what-is-gdpr/"&gt;what is the GDPR&lt;/a&gt;? It's a privacy and security law written by the EU, which affects any company that targets or collects data related to people in the EU. The effect it had (and still has as cookies evolve) on cookies is extensive. It also affected database design. &lt;/p&gt;

&lt;p&gt;One of the rights of EU citizens according the GDPR is the &lt;a href="https://gdpr-info.eu/art-17-gdpr/"&gt;right to erasure&lt;/a&gt;. This means that, under a &lt;a href="https://ico.org.uk/for-organisations/guide-to-data-protection/guide-to-the-general-data-protection-regulation-gdpr/individual-rights/right-to-erasure/#ib1"&gt;certain set of circumstances&lt;/a&gt;, EU citizens have the right to have their personal data erased. It's also known as the 'right to be forgotten.' &lt;/p&gt;

&lt;p&gt;What impact does this have on database design? Say you're running a site where users can repost other user's posts. User Sally has written a post that user Jenna has reposted.&lt;/p&gt;

&lt;p&gt;Now, Sally wants to delete her account on your site. &lt;/p&gt;

&lt;p&gt;If you've set up your tables such that ON_DELETE CASCADE deletes Sally's data and all the associated data, you've also deleted the content of Jenna's repost. &lt;/p&gt;

&lt;p&gt;What are you going to do?&lt;/p&gt;

&lt;p&gt;Enter the soft delete. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNVnqpS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/by4b47svw1fkpafyrpq8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNVnqpS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/by4b47svw1fkpafyrpq8.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Soft deletes have a lot of advantages, and many websites use them for &lt;a href="https://www.brentozar.com/archive/2020/02/what-are-soft-deletes-and-how-are-they-implemented/"&gt;many reasons&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Soft deletes allow you to un-delete easily: &lt;/p&gt;

&lt;p&gt;"Without the soft delete in place, a delete() call on an object will delete the record from the table using a DELETE statement. With the soft delete in place, an UPDATE statement is sent instead (that sets the deletedAt field to the current time)." &lt;a href="https://guides.cfwheels.org/docs/soft-delete"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now, you have to decide what deleting Sally's account means now that you're using a soft delete. If you've implemented a soft delete to prevent things like Jenna's content on her repost disappearing, you might call it a 'deactivation' instead. Sally can come back and retrieve all her data at any time by reactivating her account, and Jenna's repost content can stick around. &lt;/p&gt;

&lt;p&gt;Then the GDPR comes out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJHsuttM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d05lt29ot3s5xdhbw673.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJHsuttM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d05lt29ot3s5xdhbw673.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your database is set up like this, you can't easily comply with the right to be forgotten. How are you going to solve this problem?&lt;/p&gt;

&lt;p&gt;You might license the content that users write under the Creative Commons Attribution ShareAlike license.  That way you can save content, but the user can effectively delete their personal info. You remove their info from your database and anonymize their content. Stack Overflow has &lt;a href="https://stackoverflow.com/help/licensing"&gt;taken this route&lt;/a&gt;. For example of what this looks like, take this user on Stack Overflow: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rpbeo0Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnbzhq45gejie528z8eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rpbeo0Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnbzhq45gejie528z8eb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The GDPR is awesome for a lot of reasons-- it's introduced protection for the data of EU citizens, and along with this protection has come exciting new problems to solve. I'm sure there are myriad ways to protect the rights of users under the GDPR. I'd love to hear other solutions in the comments. 🤔&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>discuss</category>
      <category>database</category>
      <category>sql</category>
    </item>
    <item>
      <title>Properly Understanding the DOM</title>
      <author>Josh Carvel</author>
      <pubDate>Sat, 12 Dec 2020 11:12:39 +0000</pubDate>
      <link>https://dev.to/joshcarvel/properly-understanding-the-dom-2cg0</link>
      <guid>https://dev.to/joshcarvel/properly-understanding-the-dom-2cg0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro 🧰
&lt;/h2&gt;

&lt;p&gt;If you're a front-end developer, you've probably heard of the DOM, or used some DOM methods in JavaScript. However, you may not know exactly what it is, or how it works.&lt;/p&gt;

&lt;p&gt;This article will give you a solid &lt;em&gt;understanding&lt;/em&gt; of the DOM and how it fits in with the rendering of webpages on the screen. Along the way, we'll cover some crucial concepts to do with JavaScript objects, the browser and rendering. This will help develop your expertise in web development and make you more productive with the tools that the DOM provides, even if you are using a JavaScript library or framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Some familiarity with HTML, CSS and JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-browser" class="anchor"&gt;
  &lt;/a&gt;
  The browser 💻
&lt;/h2&gt;

&lt;p&gt;Firstly, we need to understand the web browser on your device a little better. In this article I'll refer to two core components of browsers.&lt;/p&gt;

&lt;p&gt;The first is the &lt;strong&gt;rendering engine&lt;/strong&gt; (also called the browser engine), which reads HTML and CSS files and &lt;strong&gt;renders&lt;/strong&gt; (outputs) the content on the screen. It can actually be used outside the browser, for example email clients use a rendering engine to display HTML email. You may have heard of the rendering engines used in popular browsers - &lt;em&gt;Blink&lt;/em&gt; (Chromium browsers, i.e. Chrome, recent versions of Microsoft Edge and many more), &lt;em&gt;Gecko&lt;/em&gt; (Firefox) and &lt;em&gt;Webkit&lt;/em&gt; (Safari).&lt;/p&gt;

&lt;p&gt;The second component is the &lt;strong&gt;JavaScript engine&lt;/strong&gt;, which reads and runs any JavaScript files given to it. Again, this is a standalone component that can be run outside the browser. The most popular one is Google's &lt;em&gt;V8&lt;/em&gt;, used in Chromium browsers and by NodeJS to run JavaScript on the server. Firefox uses &lt;em&gt;SpiderMonkey&lt;/em&gt; and Safari's is called &lt;em&gt;JavaScriptCore&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The rendering engine and JavaScript engine work together inside your browser to produce webpages. They tend to be written mainly in the programming language C++.&lt;/p&gt;

&lt;p&gt;The core functionality that browsers provide is based on certain standards, but when referring to the  features browsers make available to developers, I'll use the Mozilla Developer Network web docs, because they are a more accessible guide to the tools available to us and how they are implemented in different browsers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-global-object" class="anchor"&gt;
  &lt;/a&gt;
  The global object 🌍
&lt;/h2&gt;

&lt;p&gt;Another thing it's important to understand properly is &lt;em&gt;objects&lt;/em&gt; in JavaScript. In programming, we describe the world with objects - little containers of data that link to other data.&lt;/p&gt;

&lt;p&gt;Let's imagine for a moment we wanted to describe the whole world. That object would have a lot of &lt;em&gt;things&lt;/em&gt; on it, i.e. &lt;strong&gt;properties.&lt;/strong&gt; Things that exist in nature like trees, human inventions like the mobile phone, and things you can do like 'eat cake'. The last one would be a function in JavaScript, and the property is called a &lt;strong&gt;method&lt;/strong&gt; in that case.&lt;/p&gt;

&lt;p&gt;In our example, the world object is the 'place we put all the stuff'. JavaScript also has a place like this, and it's called the &lt;strong&gt;global object.&lt;/strong&gt; Assuming my JavaScript is running in the browser, the global object contains properties and methods related to the browser and the webpage.&lt;/p&gt;

&lt;p&gt;It's quite hard to define what the global browser object actually represents. Your webpage runs in a tab, with unique elements and events happening. A page in another tab is separate, running different JavaScript with its own global object. So we might call the global object the 'tab' object. But you also have access to browser properties, like browser history and storage for example. So what should we call it?&lt;/p&gt;

&lt;p&gt;Well, the browser provides it in a variable called &lt;code&gt;window&lt;/code&gt;. But it doesn't exactly represent a user interface window. It's just a label for the 'place we put all the stuff'. JavaScript makes it easy to access this place - we don't need to say &lt;code&gt;window&lt;/code&gt; to access the stuff on it, just saying &lt;code&gt;myVariable&lt;/code&gt; is the same as saying &lt;code&gt;window.myVariable&lt;/code&gt; (in most cases).&lt;/p&gt;

&lt;p&gt;The definition of what is always on the window object has been standardised, using &lt;strong&gt;interfaces.&lt;/strong&gt; This is an object-orientated programming term which refers to the &lt;em&gt;description&lt;/em&gt; of an object, rather than the object itself. Though an interface is generally a point of interaction, here it means the description of an object, because that enables the interaction of objects to happen smoothly, since they know what properties and methods another object has.&lt;/p&gt;

&lt;p&gt;Here's two things we should know about interfaces: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The interface name is written in PascalCase as a convention.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interfaces can take properties and methods from other interfaces, by &lt;em&gt;inheriting&lt;/em&gt; them from an ancestor interface, or getting them from an unrelated interface called a &lt;em&gt;mixin&lt;/em&gt;. We'll see this later.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-apis" class="anchor"&gt;
  &lt;/a&gt;
  Web APIs 💬
&lt;/h2&gt;

&lt;p&gt;Here's MDN's documentation on the interface for the window object: &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"&gt;Window&lt;/a&gt;.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Have a look and you'll see there's quite a lot on there. The functionality the browser gives us to communicate with it is known as &lt;strong&gt;Web APIs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;API stands for application programming interface. In other words, someone wrote an &lt;em&gt;application&lt;/em&gt;, in this case the browser, and they also wrote a set of features and rules so you could &lt;em&gt;interface&lt;/em&gt; (interact) with it using &lt;em&gt;programming&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, let's say you use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;fetch()&lt;/a&gt; in your JavaScript code to get a resource from the internet. That's not part of the JavaScript language - you couldn't use it in JavaScript not being run by a browser. But in a browser you can use it, because the browser attached the fetch method to the window object when it created it.&lt;/p&gt;

&lt;p&gt;The Web APIs make use of objects with properties and methods, just like the window object. In the fetch API, one of these is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"&gt;Response&lt;/a&gt; object. The API defines exactly what the structure of the object should be. &lt;/p&gt;

&lt;p&gt;But we're not going to talk about all the weird and wonderful APIs available to us in the browser: we want to know what the DOM is. There's just one more thing to look at first: a property of the window object called &lt;em&gt;document&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documents-and-trees" class="anchor"&gt;
  &lt;/a&gt;
  Documents and trees 🌲
&lt;/h2&gt;

&lt;p&gt;Just like how the window object is the container for almost all of the 'global' stuff (console, scrollbars, window dimensions etc.) in your browser, the &lt;strong&gt;document&lt;/strong&gt; is a container for the &lt;em&gt;content&lt;/em&gt;, i.e. the webpage itself. It represents what you &lt;em&gt;give&lt;/em&gt; the browser, not what's already there. This can be an HTML, XML or SVG document, but we're just going to talk about HTML.&lt;/p&gt;

&lt;p&gt;You can give your browser a HTML file by asking it to open one stored locally on your device, or you can request to view a website, causing the browser to retrieve the file from that website's server via the internet. The browser's rendering engine (mentioned at the beginning) then does two things: &lt;strong&gt;parse&lt;/strong&gt; the HTML (read the code line by line), then create a &lt;strong&gt;tree&lt;/strong&gt; of elements.&lt;/p&gt;

&lt;p&gt;When I say create a tree, I'm not talking about planting. It's one way of storing data with a programming language, by creating objects that have 'family' relationships between them. These 'family' relationships are the same you create in an HTML document.&lt;/p&gt;

&lt;p&gt;The relationships are defined by &lt;em&gt;edges&lt;/em&gt; (which clearly ought to be called 'branches', but never mind...). The objects at the end of an edge are known as &lt;strong&gt;nodes&lt;/strong&gt;, because this means the place where lines join (it's also the place where a leaf and stem join on a plant, so it's a bit closer to the tree metaphor). But remember, a node is still just a type of object.&lt;/p&gt;

&lt;p&gt;The node at the very top of the tree is called the &lt;strong&gt;root&lt;/strong&gt;. Visually, the structure would be sort of like a tree. What the browser creates is known as a &lt;strong&gt;document tree&lt;/strong&gt;: a node tree where the root node is a document. It stores information about the document in that root node, and each HTML element on the page and any text inside them also has its own node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCOqfAsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j2mhflsga77dvse84xlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCOqfAsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j2mhflsga77dvse84xlw.png" alt="A document tree visualised. Birger Eriksson, CC BY-SA 3.0, via Wikimedia Commons (side banner removed)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-the-dom" class="anchor"&gt;
  &lt;/a&gt;
  Enter the DOM 📄
&lt;/h2&gt;

&lt;p&gt;Let's finally talk about the DOM. &lt;/p&gt;

&lt;p&gt;The DOM, technically, is &lt;em&gt;not&lt;/em&gt; the document tree, i.e. the data structure itself. It's the model that describes how the data should be stored and interacted with. However, you will often hear people saying things like 'manipulating the DOM', which is simpler to say than 'manipulating the document tree'. I'll use DOM in this sense too, for convenience.&lt;/p&gt;

&lt;p&gt;The technical term for it is an 'object model', which means it defines some objects and how they can be manipulated, but we don't need to worry about that. Just know that's what DOM stands for: &lt;strong&gt;Document Object Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The key thing is that the DOM is one of the browser's Web APIs. We can get information about (read) DOM nodes and change them (write) using JavaScript. We know &lt;em&gt;how&lt;/em&gt; to do this because it's described in the interfaces for the DOM API.&lt;/p&gt;

&lt;p&gt;To be clear, the DOM is a generic API for manipulating documents. There is a specific offshoot for HTML called the &lt;strong&gt;HTML DOM API&lt;/strong&gt; (remember that other types of documents can be modelled by the DOM). But this distinction doesn't really affect us practically.&lt;/p&gt;

&lt;p&gt;We can see the interfaces we need in MDN's documentation on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"&gt;DOM&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API"&gt;HTML DOM&lt;/a&gt;. (The 'official' description is currently WHATWG's &lt;a href="https://dom.spec.whatwg.org/"&gt;DOM Living Standard&lt;/a&gt;, and the HTML DOM is defined in WHATWG's &lt;a href="https://html.spec.whatwg.org/multipage/"&gt;HTML Living Standard&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-dom" class="anchor"&gt;
  &lt;/a&gt;
  Using the DOM 👩‍💻
&lt;/h2&gt;

&lt;p&gt;Let's use an example to understand interfaces.&lt;/p&gt;

&lt;p&gt;In my JavaScript (which the browser's rendering engine discovered in my HTML document via the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, and the browser's JavaScript engine is running with &lt;code&gt;window&lt;/code&gt; as the global object), I have access to the &lt;code&gt;document&lt;/code&gt; object, as discussed.&lt;/p&gt;

&lt;p&gt;It's described by the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document"&gt;Document&lt;/a&gt; interface. On the list of methods, you will see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;Document.querySelector()&lt;/a&gt;. This lets me use CSS selector syntax to get an &lt;strong&gt;element&lt;/strong&gt; from the document - in this case, an HTML element, because our document is HTML.&lt;/p&gt;

&lt;p&gt;Now say I have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element in my HTML file with an id &lt;code&gt;my-input&lt;/code&gt;. I write the following in my JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const input = document.querySelector('#my-input');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the JavaScript engine parses my code, it will need to work out the value of the input variable, so it will run the function, i.e. in C++ it will go search the document tree for the right element (C++ object), find it, convert it to a JavaScript object and give it back to the JavaScript engine. If it doesn't find one, it returns &lt;code&gt;null&lt;/code&gt;, a primitive value in JavaScript essentially meaning 'no value'.&lt;/p&gt;

&lt;p&gt;In my example, I now have a variable pointing to the element object. Specifically, it's a HTML input element, described by the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement"&gt;HTMLInputElement&lt;/a&gt; interface (part of the HTML DOM). You can see from the properties listed that I can access the value (the text) in the input and read/write it. Pretty useful. &lt;/p&gt;

&lt;p&gt;Now looking at the methods, you'll see things like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus"&gt;blur()&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus"&gt;focus()&lt;/a&gt;. Very useful too. But look at where they come from - they are &lt;em&gt;inherited&lt;/em&gt; from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"&gt;HTMLElement&lt;/a&gt;. My &lt;code&gt;input&lt;/code&gt; is a type of HTMLElement, so it gets properties and methods shared by all HTML elements. &lt;/p&gt;

&lt;p&gt;The inheritance doesn't stop there - HTMLElement is a type of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element"&gt;Element&lt;/a&gt; (now we're back in the generic DOM API). There's some useful stuff there too, like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute"&gt;setAttribute()&lt;/a&gt;, so I could add, say, a class on my input field in certain circumstances.&lt;/p&gt;

&lt;p&gt;Let's keep moving on up. An element is a type of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node"&gt;Node&lt;/a&gt;. We know what those are. Element isn't the only type of node - Document is also, of course, a type of Node, since it's the root node of the tree. And we mentioned before that the text inside an element gets its own node, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Text"&gt;Text&lt;/a&gt;, which you can read/write from the node with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent"&gt;textContent&lt;/a&gt; property.&lt;/p&gt;

&lt;p&gt;Note: we may be confused here because there is also an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText"&gt;HTMLElement.innerText&lt;/a&gt; and an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"&gt;Element.innerHTML&lt;/a&gt; method. As MDN &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#Differences_from_innerText"&gt;explains&lt;/a&gt;, these methods have poorer performance and &lt;code&gt;innerHTML&lt;/code&gt; can leave you vulnerable to &lt;em&gt;cross-site scripting&lt;/em&gt; (e.g. I get the value from my input and set the &lt;code&gt;innerHTML&lt;/code&gt; of a &lt;code&gt;div&lt;/code&gt; somewhere else to whatever it is - someone could have written a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag with malicious JavaScript code that will be run on my page). So if I just want to add text to an element, &lt;code&gt;textContent&lt;/code&gt; is the better property to use.&lt;/p&gt;

&lt;p&gt;Now we get to the top of our chain of our inheritance - all of these are a type of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"&gt;EventTarget&lt;/a&gt;. And so is Window. This allows me to add or remove event listeners, which allow me to respond to page &lt;strong&gt;events&lt;/strong&gt; (like clicks) with a JavaScript function.&lt;/p&gt;

&lt;p&gt;One last thing to discuss here: let's say we used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"&gt;Document.querySelectorAll()&lt;/a&gt; to get &lt;em&gt;all&lt;/em&gt; inputs of a particular type. Note that it returns a &lt;em&gt;NodeList.&lt;/em&gt; That's annoying, why not a JavaScript array? Well, remember that the DOM isn't part of JavaScript - it's &lt;em&gt;language-independent&lt;/em&gt;. You could use DOM methods in Python, for example. That means working with DOM objects in JavaScript isn't quite like working with any other kind of object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dom-in-devtools" class="anchor"&gt;
  &lt;/a&gt;
  The DOM in DevTools 🔨
&lt;/h2&gt;

&lt;p&gt;Handily, browsers give us some nice tools that help us view and interact with the DOM.&lt;/p&gt;

&lt;p&gt;Here I opened Chrome developer tools on the Google homepage and inspected their festive logo &lt;code&gt;img&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YjZNUO90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9wmk9feuqe606jw9yu50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YjZNUO90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9wmk9feuqe606jw9yu50.png" alt="The Google logo img element inspected in Chrome devtools Elements tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Elements tab shows us the image tag and its place in the document. It looks like it's just an HTML tag, but it's not. We could see the original HTML by right-clicking the page and selecting 'view page source'. &lt;/p&gt;

&lt;p&gt;In fact, the Elements tab is a visual representation of the DOM, and the elements in it are objects. &lt;/p&gt;

&lt;p&gt;Let's prove this by going to the Console tab. If we enter &lt;code&gt;$0&lt;/code&gt; (the Console shortcut for logging the element currently selected in the Elements tab) this will just show us the same representation. But if I use &lt;code&gt;console.dir&lt;/code&gt; I can see the object:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7v0IC1aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3stzbmm7cgi8a3uw9kbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7v0IC1aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3stzbmm7cgi8a3uw9kbc.png" alt="The Google logo img element inspected in Chrome devtools console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see all the object's properties, including those inherited properties.&lt;/p&gt;

&lt;p&gt;In JavaScript, the object an object inherits from is called its &lt;strong&gt;prototype&lt;/strong&gt;, i.e. the thing you base something else on. Our image element inherits properties and methods from its prototype, 'HTMLImageElement', which in turn inherits from its prototype, 'HTMLELement', and so on. This is a &lt;strong&gt;prototype chain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can see the prototype object by expanding the &lt;code&gt;__proto__&lt;/code&gt; property. If we kept following the chain up we'd end up at &lt;code&gt;Object&lt;/code&gt;, which is the object that contains the properties and methods &lt;em&gt;all&lt;/em&gt; JavaScript objects inherit. This is just for demonstration - you won't need to do this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f18FeApn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfk50zdd484fi5wk03xn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f18FeApn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfk50zdd484fi5wk03xn.png" alt="The Google logo img element __proto__ object inspected in Chrome devtools console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these objects in the chain, except the actual image element, already existed on the window object of the JavaScript engine. If you did &lt;code&gt;console.log(window)&lt;/code&gt;  on a blank HTML page you could still find them. When I accessed the logo &lt;code&gt;img&lt;/code&gt; element using the DOM and it became a JavaScript object, its prototype chain was set with those objects.&lt;/p&gt;

&lt;p&gt;The property values were either provided as attributes in the HTML image tag, set using the DOM API in JavaScript, just known by the browser e.g. properties relating to dimensions, or have remained as default values since the object was created. If you just create a plain image element without any further information, the values are all defaults.&lt;/p&gt;

&lt;p&gt;Hopefully you now have a better idea of what DOM objects are and how to inspect them. If you want to learn more about inspecting the DOM with Chrome devtools, Google provides a guide &lt;a href="https://developers.google.com/web/tools/chrome-devtools/dom"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering" class="anchor"&gt;
  &lt;/a&gt;
  Rendering 🎨
&lt;/h2&gt;

&lt;p&gt;Now we understand the DOM and how to use it, let’s look more closely at the process of rendering a page, so we can think more carefully about how we use the DOM.&lt;/p&gt;

&lt;p&gt;Any site you visit is essentially an HTML file (the 'document'), with references to other files (HTML, CSS or JavaScript) which are all stored on a server and sent to the browser via the internet. The browser parses the HTML and starts constructing the DOM.&lt;/p&gt;

&lt;p&gt;However, JavaScript can affect the parsing process. If the browser gets to a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  tag in the HTML, it will pause DOM construction by default while the JavaScript code in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is executed, because the JavaScript might alter the HTML content by using the DOM API. &lt;/p&gt;

&lt;p&gt;This is why it's often advised that you put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the &lt;em&gt;bottom&lt;/em&gt; of your HTML, so the HTML can be loaded first. Alternatively, you can change the default behaviour by using the &lt;code&gt;defer&lt;/code&gt; or &lt;code&gt;async&lt;/code&gt; attributes on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"&gt;script tag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The browser also creates a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;CSS Object Model&lt;/a&gt; (CSSOM). This is similar to the DOM, but instead of representing your HTML document, it represents your CSS style sheets and their content with interfaces. &lt;/p&gt;

&lt;p&gt;It’s an API, so you &lt;em&gt;could&lt;/em&gt; interact with it to alter your styles, but you are better off defining all the styles you will need in your stylesheet first, then if necessary changing what they apply to using the DOM, by altering the class names on your elements (or using the &lt;code&gt;style&lt;/code&gt; attribute on the elements if you prefer).&lt;/p&gt;

&lt;p&gt;To get ready for rendering, the DOM and CSSOM are combined to create another tree, the &lt;strong&gt;render tree&lt;/strong&gt;. Anything that won’t be displayed on the page, e.g. the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element, is excluded. The render tree contains all the information the browser needs to display the webpage.&lt;/p&gt;

&lt;p&gt;The browser assembles the &lt;strong&gt;layout&lt;/strong&gt; of elements on the page (like doing a pencil sketch before a painting), then &lt;strong&gt;paints&lt;/strong&gt; the elements to the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GypqLGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d39r3tmiw48rn9pwntt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GypqLGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d39r3tmiw48rn9pwntt5.png" alt="A simple visualisation of the rendering process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that if we respond to user interaction on the page by changing the DOM, the browser will have to do some work to re-layout and repaint items on the page. This has a performance cost, and could be what we would call &lt;em&gt;expensive&lt;/em&gt; in performance terms. However, the browser responds to events efficiently as possible, only doing as much re-layout and repainting as necessary. This is explained in &lt;a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#Dynamic_changes"&gt;Tali Garsiel's research on how browsers work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bear that in mind, because there is sometimes a misconception that the reason we have fancy front-end frameworks is that the &lt;em&gt;DOM itself&lt;/em&gt; is slow. That wouldn't make sense - frameworks &lt;em&gt;still have to use the DOM&lt;/em&gt;, so they couldn't possibly make it faster. Really, it's all down to how you &lt;em&gt;use&lt;/em&gt; the DOM.&lt;/p&gt;

&lt;p&gt;Let's look briefly at the history and present of DOM manipulation to understand this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#libraries-frameworks-and-plain-js" class="anchor"&gt;
  &lt;/a&gt;
  Libraries, frameworks and plain JS 📚
&lt;/h2&gt;

&lt;p&gt;You will often hear about JavaScript &lt;strong&gt;libraries&lt;/strong&gt; and &lt;strong&gt;frameworks&lt;/strong&gt;. A library gives you additional methods written by other developers, and you can call those methods whenever you want. A framework has more control of your application architecture, so &lt;em&gt;it&lt;/em&gt; calls the functions in your code when appropriate, not the other way around.&lt;/p&gt;

&lt;p&gt;For a long time, jQuery was the standard way to write JavaScript. It's a library that was created in 2006 to make DOM manipulation easier at a time when the DOM API was limited and very inconsistently implemented by browsers. It's still used today and some people like using its concise syntax, but its core functionality can now be achieved in modern browsers using plain JavaScript.&lt;/p&gt;

&lt;p&gt;Modern libraries and frameworks don't need to tackle deficiency in the DOM, but they do aim to improve your efficiency and productivity in using it. It's not the sole reason they exist, but it's a big one. &lt;/p&gt;

&lt;p&gt;If you are writing a simple website with limited user interaction, you probably won't run into the efficiency problem, provided you're not doing something very silly performance-wise with your DOM manipulation. But simple sites are not all we have on the web today – web &lt;em&gt;applications&lt;/em&gt; such as Facebook are very common. &lt;/p&gt;

&lt;p&gt;These applications contain dynamic, constantly changing content that heavily rely on user input and pulling new data from the server. JavaScript pulls the strings of these changes and is central to the operation of the application. This is a big departure from what the whole infrastructure of serving webpages to the browser was originally designed for. But the problem is not that lots of changes need to be made, it's how to tell the browser exactly &lt;em&gt;which&lt;/em&gt; bits need to change, so you're not re-rendering more than necessary, and to do so without causing any bugs.&lt;/p&gt;

&lt;p&gt;The core front end libraries and frameworks most used today are React, Angular and Vue.js. These aim to take efficient DOM manipulation off your hands, so there is more emphasis on &lt;em&gt;what&lt;/em&gt; you want the page to look like, not &lt;em&gt;how&lt;/em&gt; this should be achieved. If you want to make web applications professionally, your best bet is to simply pick one of these frameworks and learn it (you don't &lt;em&gt;have&lt;/em&gt; to, but most companies use one of them or one like them).&lt;/p&gt;

&lt;p&gt;If you are making simpler websites or are just curious to learn the DOM API, there are lots of guides to plain JavaScript DOM manipulation, like &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents"&gt;this one by MDN&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Let's recap the key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The DOM is an API provided by browsers. The browser's rendering engine models your HTML document as a document tree and allows you to interact with it.&lt;/li&gt;
&lt;li&gt;The browser window is the global object in the browser's JavaScript engine. This gives you access to the document tree where things on the page are represented as objects, described by interfaces.&lt;/li&gt;
&lt;li&gt;Front end libraries and frameworks can help improve your productivity with the DOM, but you should be aware of why you are using them to ensure you get the best out of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading and happy DOM manipulation! 🙂 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sources" class="anchor"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;p&gt;I cross-reference my sources as much as possible. If you think some information in this article is incorrect, please leave a polite comment or message me with supporting evidence 🙂.&lt;/p&gt;

&lt;p&gt;* = particularly recommended for further study&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Browser_engine"&gt;Browser engine - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/JavaScript_engine"&gt;JavaScript engine - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascript.info/global-object"&gt;Global object - javascript.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"&gt;Window - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/API"&gt;API - MDN Glossary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tree_(data_structure)"&gt;Tree (data structure) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/WD-DOM/introduction.html"&gt;What is the Document Object Model? - w3.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;* &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"&gt;Document Object Model (and related pages) - MDN&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;* &lt;a href="https://www.youtube.com/watch?v=SmE4OwHztCc"&gt;Ryan Seddon: So how does the browser actually render a website | JSConf EU 2015&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/"&gt;How Browsers Work: Behind the scenes of modern web browsers - Tali Garsiel, published at html5rocks.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Document tree image credit: Birger Eriksson, &lt;a href="https://creativecommons.org/licenses/by-sa/3.0/"&gt;CC BY-SA 3.0&lt;/a&gt;, via Wikimedia Commons (side banner removed)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Is there any difference between git and github?</title>
      <author>Shivanthi Fernando</author>
      <pubDate>Sat, 12 Dec 2020 07:38:11 +0000</pubDate>
      <link>https://dev.to/shivanthifernando/is-there-any-difference-between-git-and-github-31an</link>
      <guid>https://dev.to/shivanthifernando/is-there-any-difference-between-git-and-github-31an</guid>
      <description>

</description>
      <category>help</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Today I made my first pull request on GitHub! Here's how you can do the same!</title>
      <author>Fahad Imran 👨‍💻</author>
      <pubDate>Sat, 12 Dec 2020 07:06:22 +0000</pubDate>
      <link>https://dev.to/codewithfahad/today-i-made-my-first-pull-request-on-github-here-s-how-you-can-do-the-same-3bje</link>
      <guid>https://dev.to/codewithfahad/today-i-made-my-first-pull-request-on-github-here-s-how-you-can-do-the-same-3bje</guid>
      <description>&lt;p&gt;Many developers like myself, use &lt;strong&gt;GitHub&lt;/strong&gt; for sharing their code with others. GitHub is a fantastic platform for collaboration on open-source as well as personal projects. 🚀&lt;/p&gt;

&lt;p&gt;An important part of code collaboration on GitHub is &lt;strong&gt;opening a pull request.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-pull-request" class="anchor"&gt;
  &lt;/a&gt;
  🤷‍♂️ What's a pull request?
&lt;/h2&gt;

&lt;p&gt;Put it simply, a pull request is a way to &lt;strong&gt;merge&lt;/strong&gt; your changes into the original code. &lt;/p&gt;

&lt;p&gt;Let's say you want to contribute to an open-source project or work on a personal project. You made changes to the code and now want to merge it with the main branch. &lt;/p&gt;

&lt;p&gt;That's when you need a pull request. If you want to work on an open-source project, learning to make a pull request is an important thing to know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-make-a-pull-request-on-github" class="anchor"&gt;
  &lt;/a&gt;
  ⚡ Steps to make a pull request on GitHub
&lt;/h2&gt;

&lt;p&gt;Here are the steps to follow for making your first ever pull request on GitHub!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-fork-the-repository" class="anchor"&gt;
  &lt;/a&gt;
  🍴 Step 1: Fork the repository
&lt;/h3&gt;

&lt;p&gt;So, you've chosen a repository to contribute to. Maybe it's a popular open-source project or some project you are working on with your team or friends.&lt;/p&gt;

&lt;p&gt;The first thing to do is to head on over to the repository and &lt;strong&gt;fork it&lt;/strong&gt;. Forking it will make a copy of the repository and it will show in your repository list.&lt;/p&gt;

&lt;p&gt;To fork a repo, simply click on the &lt;strong&gt;fork button&lt;/strong&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdLtXkzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4dtac4tjxzfphn4pjmx3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdLtXkzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4dtac4tjxzfphn4pjmx3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repository will be forked and will now show in your own repository list. Underneath it will also show from which account the repository was forked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bpi-qH41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ioysa648v2r2gcawvlh3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bpi-qH41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ioysa648v2r2gcawvlh3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-clone-the-repository" class="anchor"&gt;
  &lt;/a&gt;
  🔮 Step 2: Clone the repository
&lt;/h3&gt;

&lt;p&gt;The second step is to &lt;strong&gt;clone&lt;/strong&gt; the repository. Then you can start making changes to it. Head on over to your GitHub repositories and open the newly forked repository. &lt;/p&gt;

&lt;p&gt;Then you can use the &lt;strong&gt;repo's URL&lt;/strong&gt; to clone it. Simply click on the green code button on the top right and copy the repo's HTTPS URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bpi-qH41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ioysa648v2r2gcawvlh3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bpi-qH41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ioysa648v2r2gcawvlh3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The open git bash on your machine and use the following command to clone the repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone &amp;lt;your_repo_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The repository is cloned on your machine. Now you can make changes to it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-make-a-new-branch" class="anchor"&gt;
  &lt;/a&gt;
  🧱 Step 3: Make a new branch
&lt;/h3&gt;

&lt;p&gt;Before making changes, it is a good practice to &lt;strong&gt;make a new branch&lt;/strong&gt; commonly called the &lt;strong&gt;feature branch&lt;/strong&gt;. You can make your changes in this branch before opening a pull request. It is strongly &lt;strong&gt;discouraged&lt;/strong&gt; to make changes directly on the master or main branch of the repository.&lt;/p&gt;

&lt;p&gt;In order to make a new branch and switch to it use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b &amp;lt;your_branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;-b&lt;/code&gt; flag will allow you to switch to the newly created branch immediately.&lt;/p&gt;

&lt;p&gt;This will create a new branch of the specified name and will switch to it also. In order to confirm which branch you're on, use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, you can start coding now!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-make-changes-and-commit" class="anchor"&gt;
  &lt;/a&gt;
  🏆 Step 4: Make changes and commit
&lt;/h3&gt;

&lt;p&gt;Now make whatever changes you want to make to the code. Maybe it's a bug fix or you're trying to add a new feature. Do what you gotta do! 😅 &lt;/p&gt;

&lt;p&gt;As you make changes, &lt;strong&gt;make small commits&lt;/strong&gt; with clear commit messages. These commits are made to the feature branch and will be reflected in the main branch once you're code gets merged.&lt;/p&gt;

&lt;p&gt;Once you're happy with the changes and have committed them, it's now time to open a pull request on GitHub!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-make-a-pull-request" class="anchor"&gt;
  &lt;/a&gt;
  📢 Step 5: Make a pull request
&lt;/h3&gt;

&lt;p&gt;Now head on over to the forked repo on GitHub. A message will automatically be displayed showing that your new branch is ahead of the main branch. And it will prompt you to open a new pull request. &lt;/p&gt;

&lt;p&gt;If this does not show up you can always use the &lt;strong&gt;pull request tab&lt;/strong&gt; to create a new pull request. Then click on create a new pull request and select your new branch as the &lt;strong&gt;compare branch&lt;/strong&gt; and. It will compare this branch with the main or master branch which is the &lt;strong&gt;base branch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then you have to enter a title for the pull request and a description. It is advised to write a clear description of the changes made and /or bugs that this pull request fixes. keep your tone nice and respectful! Then once you're done with the message click on the &lt;strong&gt;create pull request&lt;/strong&gt; button to make a new pull request.&lt;/p&gt;

&lt;p&gt;That's it! You've successfully made your first pull request on GitHub. It will show up in the pull request tab of the original repo. Once the repo's owner reviews it they can then &lt;strong&gt;merge&lt;/strong&gt; your pull request and your code will be merged with the main branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZhE5XmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixgxcwqwizfr2zum0htq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZhE5XmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixgxcwqwizfr2zum0htq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to learn more about creating branches, making commits, opening pull requests, etc. check out this amazing guide by GitHub: &lt;a href="https://guides.github.com/introduction/flow/"&gt;Understanding the GitHub flow&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  🙏 That's all folks!
&lt;/h2&gt;

&lt;p&gt;That's pretty much it. A super-quick guide on making a pull request on GitHub. Today, I made my first pull request on GitHub and the code was merged as well. It was not only a great learning experience but also felt good to contribute to a project! 😅&lt;/p&gt;

&lt;p&gt;Now that you know how to do it, feel free to try it out yourself. Thanks for reading and happy coding! 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-around-the-web" class="anchor"&gt;
  &lt;/a&gt;
  🌍 Follow me around the web!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/codewithfahad"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codewithfahad.com"&gt;Blog&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/codewithfahad"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
