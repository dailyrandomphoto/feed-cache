<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance</title>
      <author>John</author>
      <pubDate>Mon, 01 Nov 2021 15:58:27 +0000</pubDate>
      <link>https://dev.to/jdkj/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-1h4o</link>
      <guid>https://dev.to/jdkj/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-1h4o</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Mon, 01 Nov 2021 15:56:28 +0000</pubDate>
      <link>https://dev.to/jdkj/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-43c0</link>
      <guid>https://dev.to/jdkj/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-43c0</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40 JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Divtober Drawings</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 01 Nov 2021 15:49:14 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-drawings-1ca2</link>
      <guid>https://dev.to/alvaromontoro/divtober-drawings-1ca2</guid>
      <description>&lt;p&gt;&lt;a href="https://twitter.com/lynnandtonic"&gt;Lynn Fisher&lt;/a&gt; is an amazing CSS Artist, and she is especially great at &lt;a href="https://a.singlediv.com/"&gt;creating CSS drawings using just a single HTML element&lt;/a&gt; among many other projects she does (&lt;a href="https://nestflix.fun/"&gt;Nestflix&lt;/a&gt; is a lot of fun!)&lt;/p&gt;

&lt;p&gt;In October, she organized #divtober, a one-month challenge in which she drew (and encouraged others to participate too) CSS art based on different topics. &lt;strong&gt;The condition: use just one HTML element&lt;/strong&gt;. This was the list for this year:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtPMmW31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAYwc-VVQAgNCNo.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5hMq5Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1429641617850339333/mow6F24g_normal.jpg" alt="Lynn Fisher profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lynn Fisher
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lynnandtonic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      October is already going to be busy busy, but let’s do this! 😅&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/divtober"&gt;#divtober&lt;/a&gt; 2021: &lt;a href="https://t.co/LjXN92wxoZ"&gt;a.singlediv.com/divtober2021/&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:52 PM - 28 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In the past, I have done CSS art, but with multiple elements, so I decided to join the challenge and draw with CSS using a single HTML element for a change. Here are the drawings I did: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-1-fan"&gt;
  &lt;/a&gt;
  Day 1: Fan
&lt;/h2&gt;

&lt;p&gt;This 3D-looking fan is interactive: pull the string to make it work.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/gORyXgq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-2-watch"&gt;
  &lt;/a&gt;
  Day 2: Watch
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/mdwggPb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-3-quick"&gt;
  &lt;/a&gt;
  Day 3: Quick
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYLozab?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-4-loop"&gt;
  &lt;/a&gt;
  Day 4: Loop
&lt;/h2&gt;

&lt;p&gt;An animated explanation of how a &lt;code&gt;for&lt;/code&gt; loop works (I know, it's not a drawing &lt;em&gt;per se&lt;/em&gt;, but it is interesting)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/WNOqrXx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-5-tired"&gt;
  &lt;/a&gt;
  Day 5: Tired
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/WNOqmzm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-6-hungry"&gt;
  &lt;/a&gt;
  Day 6: Hungry
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/abwgexj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-7-toxic"&gt;
  &lt;/a&gt;
  Day 7: Toxic
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/jOwgdxa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I recorded the process for this one and shared it on Youtube. Later, I'd do the same with other drawings.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fitjMV2bmA4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-8-growing"&gt;
  &lt;/a&gt;
  Day 8: Growing
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvgVGx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-9-homonym"&gt;
  &lt;/a&gt;
  Day 9: Homonym
&lt;/h2&gt;

&lt;p&gt;Homonyms are words that are written the same but have different meanings. So I drew a paper boat sinking in a bathroom sink.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/porzXrO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-10-organized"&gt;
  &lt;/a&gt;
  Day 10: Organized
&lt;/h2&gt;

&lt;p&gt;A 1920s member of the organized crime. I like this drawing, but it's an example of something that would be 1,000 times better and easier using SVG.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/RwZwZZQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-11-slice"&gt;
  &lt;/a&gt;
  Day 11: Slice
&lt;/h2&gt;

&lt;p&gt;I removed the demo from this day because it has autoplay audio and it can be a bit annoying. &lt;a href="https://codepen.io/alvaromontoro/pen/qBXEdNp"&gt;You can see it live on this link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5v3RDsdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw0b9ph257dj7gpvauza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5v3RDsdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw0b9ph257dj7gpvauza.png" alt="A cartoon of a pizza holding a microphone, singing, and dancing" width="880" height="644"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-12-squeak"&gt;
  &lt;/a&gt;
  Day 12: Squeak
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/bGrNLBP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-13-camouflage"&gt;
  &lt;/a&gt;
  Day 13: Camouflage
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYENBdJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-14-fancy"&gt;
  &lt;/a&gt;
  Day 14: Fancy
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/RwZPXRa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...And the video of how it was done:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Giq9h88lVnc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-15-float"&gt;
  &lt;/a&gt;
  Day 15: Float
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYdvmVZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This cartoon was based on a previous cartoon I had done (using multiple elements). Here's the video of how it was done:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kb-MxR1BXHw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-16-snow"&gt;
  &lt;/a&gt;
  Day 16: Snow
&lt;/h2&gt;

&lt;p&gt;I did to entries for snow. One was an abominable snowman...&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ExvPOGo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...and the other one was a snowfall animation using a single element (beware, your computer fans may start overworking with it).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/WNErYxV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-17-stack"&gt;
  &lt;/a&gt;
  Day 17: Stack
&lt;/h2&gt;

&lt;p&gt;This and the following day, I didn't have many ideas and went for easy drawings.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYjNREg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-18-shine"&gt;
  &lt;/a&gt;
  Day 18: Shine
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvyBbY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-19-nostalgia"&gt;
  &lt;/a&gt;
  Day 19: Nostalgia
&lt;/h2&gt;

&lt;p&gt;What's more nostalgic than a cassette with music recorded directly from the radio?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYEzPrb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...and the video of how it was done.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0zaKHAa439A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-20-journey"&gt;
  &lt;/a&gt;
  Day 20: Journey
&lt;/h2&gt;

&lt;p&gt;This was a weird one. I tried to do a The Wizard of Oz homage but ended up with something too abstract and simplistic.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/GRvjQvo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-21-magic"&gt;
  &lt;/a&gt;
  Day 21: Magic
&lt;/h2&gt;

&lt;p&gt;A magic trick with CSS and a single HTML element. Will the Great Wizard Al guess your card and remove it from the deck?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYdowmM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-22-critter"&gt;
  &lt;/a&gt;
  Day 22: Critter
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ZEJLzov?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And how this bunny(?) was drawn:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lrHtJQa810E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-23-loud"&gt;
  &lt;/a&gt;
  Day 23: Loud
&lt;/h2&gt;

&lt;p&gt;I tried to go with a realistic drawing this time. Something "easy": a volume knob that goes up to 11.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/BadpNdN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-24-smelly"&gt;
  &lt;/a&gt;
  Day 24: Smelly
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/VwzPRVa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Silly/childish me decided to code a demo combining #23 (loud) and #24 (smelly) using &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/dyzNVVw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-25-dip"&gt;
  &lt;/a&gt;
  Day 25: Dip
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ExvWxQJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-26-spice"&gt;
  &lt;/a&gt;
  Day 26: Spice
&lt;/h2&gt;

&lt;p&gt;Another realistic attempt: a bottle of spices. This may take a second to load:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/wvqJNGZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...and how it was done:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1SCCwqehAYA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-27-film"&gt;
  &lt;/a&gt;
  Day 27: Film
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/qBXmKOr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-28-dots"&gt;
  &lt;/a&gt;
  Day 28: Dots
&lt;/h2&gt;

&lt;p&gt;There's a &lt;a href="https://codepen.io/alvaromontoro/pen/yLooOgr"&gt;second version of this that only works on Chrome&lt;/a&gt;, and I personally like it better.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYddvKz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-29-fruit"&gt;
  &lt;/a&gt;
  Day 29: Fruit
&lt;/h2&gt;

&lt;p&gt;Another day in which I did two drawings. First I tried doing a still nature:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/bGrrWMQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...but I didn't like how it was going, so I drew a cute watermelon, and shared the process on Youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/mdMMzPm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/k5DLVrswBxM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-30-contrast"&gt;
  &lt;/a&gt;
  Day 30: Contrast
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvvMpy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/VwzMvzx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-31-spooky"&gt;
  &lt;/a&gt;
  Day 31: Spooky
&lt;/h2&gt;

&lt;p&gt;Halloween Day and the word was "spooky", I tried different things, as I wasn't convinced by them:&lt;/p&gt;

&lt;p&gt;The word spooky replacing the O's with a skull and a ghost:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/jOLGxpL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A ghost (and how it was done):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/KKvXqRd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JBtuqHSlI-8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And finally a Frankenstein's Monster with CSS and a single HTML element:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/bGroKpY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...with video too:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7y3WzWmzxgA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It was fun completing the challenge and trying different things with CSS and the background gradients. I learned some new things, found some differences between browsers, and enjoyed seeing what other people did (&lt;a href="https://twitter.com/search?q=%23divtober&amp;amp;src=typed_query&amp;amp;f=live"&gt;check the #divtober tag on Twitter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But it's time to take a break. These challenges are more time-consuming and draining than what they look like. I will make more CSS art in the future but, for now, it will have more than a single HTML element.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Alternative Approach to Dynamic Environments: Using Octopod
</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 01 Nov 2021 15:30:57 +0000</pubDate>
      <link>https://dev.to/typeable/alternative-approach-to-dynamic-environments-using-octopod-2pi7</link>
      <guid>https://dev.to/typeable/alternative-approach-to-dynamic-environments-using-octopod-2pi7</guid>
      <description>&lt;p&gt;Author: Sergey Shurlakov&lt;/p&gt;

&lt;p&gt;In this post, I’d like to tell you how we use dynamic environments (review or preview environments) in our work here at Typeable, what issues we’ve managed to solve, and how and why we use our &lt;a href="https://github.com/typeable/octopod"&gt;Octopod&lt;/a&gt; solution for these purposes instead of GitLab Dynamic Environments. In case you don’t know what the dynamic environment is, I recommend reading the &lt;a href="https://blog.flant.com/review-environments-in-kubernetes-gitlab-ci/"&gt;post by Flant&lt;/a&gt; where the author gives a detailed account of the types of dynamic environments, their purpose and applications. The author also looks into this topic using GitLab as an example and provides detailed cases and descriptions. As for us, we use an alternative approach, somewhat different in terms of ideology, and work with review environments in &lt;a href="https://typeable.io/octopod"&gt;Octopod&lt;/a&gt;. &lt;a href="https://typeable.io/blog/2021-02-18-octopod-release"&gt;Previously we related&lt;/a&gt; the history of Octopod creation and the causes that motivated us to create it. We won’t repeat ourselves but will focus on the differences of our approach and the issues we’ve fixed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSqsfPHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod_logo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSqsfPHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod_logo.jpg" alt="Octopod logo" width="800" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To begin with, I need to tell you that Octopod is a universal tool not tied to any specific package management method in Kubernetes. Nevertheless, as the de facto standard in the world of Kubernetes, it’s primarily meant to simplify the deployment of Helm charts. At Typeable, we use Helm, so starting from version 1.4 the standard Octopod pack already includes all you need to work with this utility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-differences-from-gitlab"&gt;
  &lt;/a&gt;
  Main differences from GitLab
&lt;/h2&gt;

&lt;p&gt;Probably the most important thing is that we started working with review environments before GitLab had an interface for dynamic environments. However, there are some other reasons, including the ideological difference of our approach to the implementation and use of review environments. But let’s start from the beginning.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;We don’t store the environment configuration in the code&lt;/strong&gt;. Why? We intentionally untie the environment from the code for several reasons.&lt;br&gt;
a. Not all team members have access to the code. Our processes are shaped in such a way that analysts, testers, project managers, and other team members who don’t write the code usually have read-only access to the repository or even no access at all. Such an approach allows us to better control the code and reduces the number of risks and potential issues. However, they need to be able to create review environments independently without involving a DevOps engineer or developer.&lt;br&gt;
b. In GitLab, in order to manage the dynamic environment, you need to create the file &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; first and then modify it, as appropriate. Thus, each code branch will have its own file with the required environment settings. The risk exists that the settings might “leak” to the main branch and the new environments will have invalid parameters. This has to be fixed somehow, which only increases the gitflow complexity by potentially increasing the number of conflicts and, consequently, the number of merges or rebases.&lt;br&gt;
c. We often have to make changes in the review environment configuration. In Octopod, it’s easy to change the environment parameters and variables and, most importantly, to switch between various endpoints in the services we are integrated with. We have lots of integrations with external systems and it’s not always possible to test the application functionality by connecting to the test API. It’s often necessary to interact with the production API.&lt;br&gt;
So the settings of the review environment are stored in Octopod and managed through the Web interface or Octopod’s CLI (octo CLI) and are fully isolated from the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;In the GitLab environment, variables are global for the project&lt;/strong&gt;. A lot of review environment parameters are presented by the environment variables. GitLab provides an interface used to set the environment variables without making changes in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;, but these variables have the global scope, i.e. they apply to all dynamic environments of the project. It’s only possible to write the environment variables for a specific review environment by inserting them in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; in the appropriate branch, which contradicts item 1.&lt;/p&gt;

&lt;p&gt;In Octopod we’ve solved this problem using the Application Configuration and Deployment Configuration. Octopod generates the list of key-value parameters that allows viewing and managing the available chart settings in UI. You only need to select the required key and write the value. It’s also possible to provide custom keys that are missing from the list. We’ve provided two types of configuration settings: Application Configuration and Deployment Configuration. The Application Configuration is the configuration (Helm values) that is passed to the application. For example, this can be a database connection string or environment variables. The Deployment Configuration is used only during the environment creation phase. The key values are passed to Helm and allow redefining the default values thus directly influencing the deployment process. Here a chart version or URL of the Helm repository can be used as an example.&lt;/p&gt;

&lt;p&gt;This is what the staging configuration looks like in Octopod:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L00n-Paa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L00n-Paa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_1.png" alt="Staging configuration in Octopod" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Resource constraints&lt;/strong&gt;. There can be a lot of review environments, as well as the resources they consume. In the long run, you run out of resources and have to solve this issue somehow. This is why we archive the environment when the Jira ticket moves to the column Done (we’ve cross-integrated Jira, Octopod and GitHub). Archiving can also be done manually. Archiving implies the “scale-to-zero” approach where Pods are released while all other resources (e.g. Persistent Volumes) are saved. This allows extracting the environment from the archive as necessary and restoring its operating condition very quickly. The archived environments which are more than 14 days old are deleted completely, i.e. a cleanup is carried out involving the deletion of absolutely all resources, including PVC, certificates etc. We set up the automation of this process using octo CLI, a utility in the Octopod command line that has an extended functionality as compared with the Web interface. This approach can also be implemented in GitLab but the task is not trivial and requires complex logic in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The state of the review environment has to be tracked accurately&lt;/strong&gt;. One of Helm’s disadvantages is that it’s not possible to track the state of the environment after it’s been deployed. After Helm has finished its work, you have to check whether the environment keeps functioning all by yourself. During the work, something may go wrong. The review environment is not working already but we don’t know about this until we need it. The guys of Flant have fixed this issue using the kubedog which is built into the werf. Octopod keeps track of the environment state in a somewhat different way. We write all control scripts for Octopod in Rust and use the kube-rs client to check the statuses of all ReplicaSets. The check is carried out every 5 seconds, which is why the status of the review environment condition in Octopod is always up-to-date.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Writing a .gitlab-ci.yml script can be a challenge&lt;/strong&gt;. In Octopod we’ve solved this issue by providing ready-made Helm scripts that allow deploying any valid Helm chart. In many cases, this makes it absolutely unnecessary to write any scripts and minimizes the involvement of a DevOps engineer. At the end of the post, we’ll move to a hands-on exercise and deploy an instance of WordPress in Octopod using the Helm chart by bitnami.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The need to create complex interdependent environments&lt;/strong&gt;. If you need to create an environment that depends on infrastructure services such as PostgreSQL or Redis, these services can be deployed as separate review environments using their Helm charts while their connection parameters can be passed through the Application Overrides. In this way, it’s possible to use, for example, one instance of PostgreSQL or one authentication service for several review environments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A closer and more reliable integration with Kubernetes cluster is required&lt;/strong&gt;. Octopod works in the same Kubernetes cluster where it deploys all review environments. The issue of cluster access and transmission of Secrets has been solved fundamentally; Octopod works through the Service Account. In GitLab you can configure seamless integration with the Kubernetes cluster, which solves the problem of secrets transmission. However, if the integration doesn’t work due to any reason, there arise some difficulties.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#practice-installing-octopod"&gt;
  &lt;/a&gt;
  Practice. Installing Octopod
&lt;/h2&gt;

&lt;p&gt;There are two main ways to install Octopod:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For industrial application. Octopod is installed in the Kubernetes cluster using the official Helm chart.&lt;/li&gt;
&lt;li&gt;For individual use and to get acquainted with the main features of Octopod, installation is carried out locally and it’s fully automated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we’re going to install Octopod locally. Installation is currently supported for Linux and MacOS. Installation in Windows requires Windows Subsystem for Linux 2 (Docker Desktop is installed in Windows and integrated into WSL 2; other components are installed in WSL based on the Linux instructions). First of all, you’ll need to install the following infrastructure components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation"&gt;Kind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tasks/tools"&gt;Kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://helm.sh/docs/intro/install"&gt;Helm 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Windows only) &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install"&gt;WSL 2&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then we run the script that will install Octopod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt;
    https://raw.githubusercontent.com/typeable/octopod/master/octopod_local_install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;An important point about Octopod installation in Windows&lt;/strong&gt;. WSL 2 may have issues with SSL connection to the resources due to the &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/troubleshooting#no-internet-access-in-wsl"&gt;settings of antivirus software functioning as the firewal&lt;/a&gt;. The issue manifests itself as time out when you try to download data from repositories.&lt;/p&gt;

&lt;p&gt;When the installation is completed, we open the browser and type in &lt;a href="http://octopod.lvh.me"&gt;http://octopod.lvh.me&lt;/a&gt; in the address bar and see&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCgXI-nX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCgXI-nX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_2.png" alt="Octopod deployments dashboard" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perhaps, it should be noted here that lhv.me is a simple service returning the IP-address of local host &lt;code&gt;127.0.0.1&lt;/code&gt; to any request. It’s convenient to use it as you don’t have to make changes in &lt;code&gt;/etc/hosts&lt;/code&gt; every time.&lt;br&gt;
Now we need to create a new deployment. Octopod is delivered with predefined parameters for bitnami Helm charts and WordPress is used as an example.&lt;br&gt;
Click on the NEW DEPLOYMENT button. A window will appear on the screen where you need to set the environment parameters. In the simplest case, it’s enough to type in the name. For example, wordpress. However, we’ll add two more App overrides (to this end click on ADD AN OVERRIDE):&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;wordpressUsername&lt;/td&gt;
&lt;td&gt;admin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wordpressPassword&lt;/td&gt;
&lt;td&gt;P@ssw0rd&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We add these two variables only for the period of the review environment creation when the variables will be used to initialize WordPress. After that, you can delete them. It goes without saying that here we show the user name and the password explicitly and in plain text only for the sake of simplification and for demonstration purposes in the local Octopod version. In real life, we use appropriate tools such as Hashicorp Vault.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAWW6ooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAWW6ooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_3.png" alt="Creating a new deployment" width="880" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the SAVE button.&lt;br&gt;
After some time, the review environment will be created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZldYXX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZldYXX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_4.png" alt="Your new deployment is here!" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that, the creation of a review environment is completed. Now you can open WordPress using the link provided in the Links column. To open the admin panel, add &lt;code&gt;/admin&lt;/code&gt; to the URL (&lt;a href="http://wordpress.lvh.me/admin"&gt;http://wordpress.lvh.me/admin&lt;/a&gt;). Type in the user name and password provided during the environment creation.&lt;/p&gt;

&lt;p&gt;If everything has gone well, you can delete the variables &lt;code&gt;wordpressUsername&lt;/code&gt; and &lt;code&gt;wordpressPassword&lt;/code&gt; and change the password, as necessary, in the WordPress admin panel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In our opinion, not only the developers and testers but also other people with limited technical skills can make use of review environments. This is why we’ve done our best to make the entry barrier for Octopod as low as possible, create a user-friendly and clear interface and ensure intuitive and predictable user interaction. These are the reasons behind the path we’ve chosen to develop Octopod and solve the problems described in this post. Surely, Octopod differs greatly from GitLab Dynamic Environments in terms of ideology and uses different approaches to solving similar issues. However, it performs its mission without a hitch – DevOps engineers are now free from the mundane tasks of creating and maintaining review environments and it’s well worth it.&lt;/p&gt;

&lt;p&gt;In our turn, we’d be happy to get feedback from Octopod users. We are looking forward to your suggestions, wishes and PRs on &lt;a href="https://github.com/typeable/octopod"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>haskell</category>
      <category>opensource</category>
    </item>
    <item>
      <title>404 Error</title>
      <author>Sam Sonter</author>
      <pubDate>Mon, 01 Nov 2021 15:14:54 +0000</pubDate>
      <link>https://dev.to/asapsonter/404-error-1b0h</link>
      <guid>https://dev.to/asapsonter/404-error-1b0h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#404-error"&gt;
  &lt;/a&gt;
  404 Error
&lt;/h1&gt;

&lt;p&gt;What is a 404 error?  It is commonly known as "404 page not found". This means the server is trying to tell us the requested webpage is not found on the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#causes-of-occurrence"&gt;
  &lt;/a&gt;
  Causes Of Occurrence
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The URL or its content (such as files or images) was either deleted or moved (without adjusting any internal links accordingly)&lt;/li&gt;
&lt;li&gt;The URL was written incorrectly or typed in the broswer       incorrectly&lt;/li&gt;
&lt;li&gt;DNS server complications&lt;/li&gt;
&lt;li&gt;Junk files in current browser&lt;/li&gt;
&lt;li&gt;The entered domain name doesn’t exist (anymore)&lt;/li&gt;
&lt;li&gt;Error or broken HTML pages(broken HTML templates codes)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#forms-of-occurance"&gt;
  &lt;/a&gt;
  Forms Of Occurance
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;404 error&lt;/li&gt;
&lt;li&gt;404 not found&lt;/li&gt;
&lt;li&gt;HTTP 404 not found&lt;/li&gt;
&lt;li&gt;Error 404&lt;/li&gt;
&lt;li&gt;404 page not found&lt;/li&gt;
&lt;li&gt;The requested URL was not found in server&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fix-a-404-error"&gt;
  &lt;/a&gt;
  How To Fix a 404 Error
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Reload the page:&lt;/strong&gt; It might be that the error 404 has appeared for the simple reason that the page did not load properly. This can be checked quite easily by clicking on the ‘Refresh’ button in your browser or also by pressing the F5 button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check the URL:&lt;/strong&gt; Regardless of whether you have entered the URL address manually or been directed via a link, could be that a mistake has been made. For this reason you should check the specified path of the website. It could be that either you, or the person who entered the link, has mistyped something. Apart from spelling mistakes, it could also be that forward slashes have been left out or misplaced. But bear in mind that this can only really be checked with ‘clean’ URLs, as they contain unreadable words instead of incomprehensible abbreviations, letters, numbers, and symbols.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go back through the directory levels:&lt;/strong&gt; For example, if a URL of the following structure example.com/Directory1/Directory2/Directory3 causes a 404 error page, then you can always go back to the previous directory level (in this example: example.com/Directory1/Directory2) in order to check whether the desired page is linked there. All you need to do is clear the last directory in the URL. The link for the page you are looking for should be visible on the previous page. If it is not to be found on that page then you can also go back to the previous page and look for the correct link there. But if it so happens that this method is also successful and you eventually end up back on the homepage, then move onto the next tip.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the website’s search function:&lt;/strong&gt; Many websites offer a search function as part of their homepage. By entering one or several keywords, it can help you find the specific page that you are looking for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use a search engine:&lt;/strong&gt; You also have the possibility of using the website of your choice to find a website. As long as the desired site exists, you should be able to find it by entering the website domain and/or a keyword transcription of the subject matter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete the browser cache and cookies:&lt;/strong&gt; Ifyou can access the website from another device, and the HTTP 404 error only seems to appear on a certain computer, then the problem could lie with your browser. Therefore you should delete the browser cache as well as all cookies for this site, and this may then finally allow you to access the page.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search engines, such as Google and Bing, will have a negative impression of a site if it has many 404 errors. Once the crawlers have established that many requests are being met with 404 codes, it presumes the site isn’t very well maintained.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aarga Sam&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title> Daily Standup Meetings are useless</title>
      <author>Davide de Paolis</author>
      <pubDate>Mon, 01 Nov 2021 15:08:09 +0000</pubDate>
      <link>https://dev.to/dvddpl/daily-standup-meetings-are-useless-1kie</link>
      <guid>https://dev.to/dvddpl/daily-standup-meetings-are-useless-1kie</guid>
      <description>&lt;p&gt;Yes, Daily standup meetings, also know as Daily Scrum, are useless, &lt;strong&gt;if done in the following way&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Everyone stares at the Trello, Asana or JIRA board, the PjM or TechLead address each team member with a question about the tickets they are working on, and something similar to this conversation happen:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(PjM) John, how is it going with ticket XYZ?&lt;br&gt;
(John) Quite well! I worked on that, I did this and that, almost done, just need some final touches, polish the code, add a couple of test, stuff like that. I should be done today.&lt;br&gt;
(PjM) Great, let's move on.  Maria, what's the status of your ticket? &lt;br&gt;
(Maria) I am done with it, &lt;em&gt;unless&lt;/em&gt; Bob has comments - he is reviewing my Pull request. &lt;br&gt;
(PjM) Sounds awesome.  Don't be too nitpicking Bob, right?! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/mGebLBJUsxulDYt9A2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mGebLBJUsxulDYt9A2/giphy.gif" alt="wink wink" width="480" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not a standup round, this is just a status update,  and, i find it totally useless.&lt;br&gt;
I have access to the JIRA Board, i can open it anytime and see under which column your ticket is ( assuming you were so kind and disciplined to move it from open to in progress and from in progress to in review...), what is the point in you &lt;strong&gt;just rephrasing it loud in front of the team&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;The most important thing in a standup is &lt;strong&gt;clearly communicating any &lt;em&gt;deviation&lt;/em&gt; from what is expected&lt;/strong&gt;, asking questions and asking for help.  Maybe some blockers are slowing you down, maybe you depend on other teams to achieve your tasks.  Please let the team know. Don't just "reassure" everyone, in some vague gut-feeling way that &lt;strong&gt;everything will be ok...&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;Another case when Daily stand-ups are useless, and a waste of time is when one or more developers start discussing technical implementations or bug-fixes in detail. If there are developers that are not involved in that project / feature  / tech stack ( imagine a cross-functional team of many developers ) then you will be sure after 30 seconds all other team member will zone out,  and will not get back even when you move on to the next topic or developer.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/pDF1qkK72Y8ulmVgVQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/pDF1qkK72Y8ulmVgVQ/giphy.gif" alt="zoning out" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Standup are not about technical details, even though some technical context can help to frame the arisen complexity and allow PjM and Leads to take the necessary steps to &lt;em&gt;enable&lt;/em&gt; you achiving your tasks ( additional meetings, extending the deadline, reestimating the task within the sprint, set up pair programming sessions etc).&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://scrumguides.org/scrum-guide.html#events-daily"&gt;official docs&lt;/a&gt; the Daily Scrum is a 15-minute event for the Developers of the Scrum Team.&lt;/p&gt;

&lt;p&gt;The purpose of the Daily Scrum is to &lt;strong&gt;inspect progress&lt;/strong&gt; toward the Sprint Goal and produce an actionable plan for the next day of work. This creates focus and improves self-management.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Daily Scrums improve communications, identify impediments, promote quick decision-making, and consequently eliminate the need for other meetings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Honestly I am not so sure about the last point,  due to the short time allocated to it, it can indeed generate other meetings, follow-ups between Tech Lead and (some of ) the developers, or between the team and the stakeholders, or among developers which decide to tackle an issue with pair programming. But I agree that this additional meetings allow the team to be more aligned, progress faster and avoid wasting time in working on the wrong thing or struggling on a problem someone else already solved etc. &lt;/p&gt;

&lt;p&gt;I must admit I fall myself in the temptation of &lt;strong&gt;hijacking the standup into a technical discussion&lt;/strong&gt;, but really, the standup purpose should be, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pointing out blockers, &lt;/li&gt;
&lt;li&gt;give a shout out about problems and request for help&lt;/li&gt;
&lt;li&gt;share valuable information. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Yesterday I updated the dependency of the Test framework we are using and realised the pipeline was broken even though No breaking changes was announced, unfortunately it took longer than expected but I can now go on with TDD for the current feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yesterday I checked out the repo to work on my feature but I was not able to run the app locally due to this and that - has anyone experienced that? Is there someone that can double check that with me later?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am halfway through the implementation but I realised the data being sent by our backend is different from what is documented in the ticket. I had to start a conversation with the backend team and found some misunderstandings in the feature requirement. Can we set up a meeting with the stakeholders to clarify those points?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, sometime &lt;strong&gt;it requires a bit of courage and lots of confidence to openly speak about what slowed us down&lt;/strong&gt; ( we don't want to look dumb, incompetent, nor blame other colleagues or team), but this is what those meetings are for. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be clear, be honest, be informative, and proactive.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we stick to these simple rules and don't lie ( here you can find &lt;a href="https://dev.to/dvddpl/please-be-professional-and-stop-saying-i-m-almost-done-n49"&gt;another post&lt;/a&gt; about why &lt;strong&gt;we usually lie during standups&lt;/strong&gt;), those meetings are indeed a precious time for our teams!&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@jasongoodman_youxventures?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jason Goodman&lt;/a&gt; on &lt;a href="https://unsplash.com/photos/6awfTPLGaCE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>bestpractices</category>
      <category>agile</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The new RouterOutlet events in Angular 13</title>
      <author>Dmitrij Kuba</author>
      <pubDate>Mon, 01 Nov 2021 15:05:16 +0000</pubDate>
      <link>https://dev.to/dimakuba/the-new-routeroutlet-events-in-angular-13-3bai</link>
      <guid>https://dev.to/dimakuba/the-new-routeroutlet-events-in-angular-13-3bai</guid>
      <description>&lt;p&gt;It's common practice in angular space to cache reused components with the help of &lt;code&gt;RouteReuseStrategy&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DetachedRouteHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;RouteReuseStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomReuseStrategy&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;RouteReuseStrategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DetachedRouteHandle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;shouldAttach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;DetachedRouteHandle&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;shouldDetach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;shouldReuse&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DetachedRouteHandle&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;shouldReuseRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;future&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;future&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeConfig&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then new &lt;code&gt;CustomReuseStrategy&lt;/code&gt; should be provided to the module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./child/child.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CustomReuseStrategy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./route-reuse-strategy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RouteReuseStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RouterModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouteReuseStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CustomReuseStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;at this point angular router module registers the new strategy to reuse routes (from cache) and the instance of the strategy is available under &lt;code&gt;Router#routeReuseStrategy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s define few routes to demonstrate the new &lt;code&gt;RouterOutlet&lt;/code&gt; events (&lt;code&gt;/c&lt;/code&gt; marked to reuse on the next activation):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RouteReuseStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RouterModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./child/child.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CustomReuseStrategy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./route-reuse-strategy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;RouterModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;shouldReuse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouteReuseStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CustomReuseStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the &lt;code&gt;app.component.html&lt;/code&gt; looks like (just a few links and the &lt;code&gt;router-outlet&lt;/code&gt; with new &lt;code&gt;attach&lt;/code&gt;/&lt;code&gt;detach&lt;/code&gt; events):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;routerLink=&lt;/span&gt;&lt;span class="s"&gt;"/a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;navigate to /a&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;routerLink=&lt;/span&gt;&lt;span class="s"&gt;"/b"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;navigate to /b&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;routerLink=&lt;/span&gt;&lt;span class="s"&gt;"/c"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;navigate to /c&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;router-outlet&lt;/span&gt;
  &lt;span class="na"&gt;(activate)=&lt;/span&gt;&lt;span class="s"&gt;"onActivate($event)"&lt;/span&gt;
  &lt;span class="na"&gt;(deactivate)=&lt;/span&gt;&lt;span class="s"&gt;"onDeactivate($event)"&lt;/span&gt;
  &lt;span class="na"&gt;(attach)=&lt;/span&gt;&lt;span class="s"&gt;"onAttach($event)"&lt;/span&gt;             &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;---&lt;/span&gt; &lt;span class="na"&gt;the&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt; &lt;span class="na"&gt;event&lt;/span&gt;
  &lt;span class="na"&gt;(detach)=&lt;/span&gt;&lt;span class="s"&gt;"onDetach($event)"&lt;/span&gt;             &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;---&lt;/span&gt; &lt;span class="na"&gt;the&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt; &lt;span class="na"&gt;event&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/router-outlet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An &lt;code&gt;attach&lt;/code&gt; event emits every time when the &lt;code&gt;RouteReuseStrategy&lt;/code&gt; instructs the outlet to reattach the subtree, and the &lt;code&gt;detach&lt;/code&gt; event emits when the &lt;code&gt;RouteReuseStrategy&lt;/code&gt; instructs the outlet to detach the subtree. So &lt;code&gt;attach&lt;/code&gt; event will be emitted on the next re-navigation to the &lt;code&gt;/c&lt;/code&gt; url instead of &lt;code&gt;activate&lt;/code&gt; one, because the component was attached from cache and not instantiated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;All of the described code is available on StackBlitz (unfortunately angular 13 is not available yet on StackBlitz):
&lt;a href="https://stackblitz.com/edit/new-router-outlets-events?file=src/app/app.component.html"&gt;https://stackblitz.com/edit/new-router-outlets-events?file=src/app/app.component.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Angular commit: &lt;a href="https://github.com/angular/angular/commit/4f3beffdbfa974b380b2225f163d363dd17e10bd"&gt;https://github.com/angular/angular/commit/4f3beffdbfa974b380b2225f163d363dd17e10bd&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Angular: Is trackBy necessary with ngFor?</title>
      <author>bob.ts</author>
      <pubDate>Mon, 01 Nov 2021 14:32:02 +0000</pubDate>
      <link>https://dev.to/rfornal/angular-is-trackby-necessary-with-ngfor-594e</link>
      <guid>https://dev.to/rfornal/angular-is-trackby-necessary-with-ngfor-594e</guid>
      <description>&lt;p&gt;In a recent presentation, I had an individual very focused on the need for &lt;code&gt;trackBy&lt;/code&gt; on my &lt;code&gt;ngFor&lt;/code&gt; ... to the exclusion of everything else in the talk. He even went as far as to push a pull-request on my talk repository to add the change.&lt;/p&gt;

&lt;p&gt;I was perplexed.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I know there used to be a need for &lt;code&gt;trackBy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Experience has shown me little need for it's use recently.&lt;/li&gt;
&lt;li&gt;Some quick research said that it is &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; needed if there are issues with performance with modern Angular.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, I decided to test this out myself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-first-iteration"&gt;
  &lt;/a&gt;
  The First Iteration
&lt;/h2&gt;

&lt;p&gt;In my first iteration of testing, I tested loading data to see if there was a difference in load times when displaying them with and without the &lt;code&gt;trackBy&lt;/code&gt;. Here are the first set of tests I ran that showed some hopeful results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h3&gt;

&lt;p&gt;Basically, the data was 100,000 records with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An integer, 0-based &lt;code&gt;index&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An identifier that is a random 50 characters A-Z, a-z, or 0-9.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary-of-first-iteration"&gt;
  &lt;/a&gt;
  Summary of First Iteration
&lt;/h2&gt;

&lt;p&gt;From this point, I refreshed the page 25-times each, noting the time to finish on the Network tab.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;WITH&lt;/th&gt;
&lt;th&gt;WITHOUT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;data 01&lt;/td&gt;
&lt;td&gt;6.17&lt;/td&gt;
&lt;td&gt;6.77&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 02&lt;/td&gt;
&lt;td&gt;6.14&lt;/td&gt;
&lt;td&gt;6.29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 03&lt;/td&gt;
&lt;td&gt;6.31&lt;/td&gt;
&lt;td&gt;6.28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 04&lt;/td&gt;
&lt;td&gt;6.34&lt;/td&gt;
&lt;td&gt;6.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 05&lt;/td&gt;
&lt;td&gt;6.23&lt;/td&gt;
&lt;td&gt;6.06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 06&lt;/td&gt;
&lt;td&gt;6.14&lt;/td&gt;
&lt;td&gt;6.31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 07&lt;/td&gt;
&lt;td&gt;6.14&lt;/td&gt;
&lt;td&gt;6.21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 08&lt;/td&gt;
&lt;td&gt;6.46&lt;/td&gt;
&lt;td&gt;6.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 09&lt;/td&gt;
&lt;td&gt;6.29&lt;/td&gt;
&lt;td&gt;6.09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 10&lt;/td&gt;
&lt;td&gt;6.38&lt;/td&gt;
&lt;td&gt;6.37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 11&lt;/td&gt;
&lt;td&gt;6.22&lt;/td&gt;
&lt;td&gt;6.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 12&lt;/td&gt;
&lt;td&gt;6.38&lt;/td&gt;
&lt;td&gt;6.43&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 13&lt;/td&gt;
&lt;td&gt;6.23&lt;/td&gt;
&lt;td&gt;6.19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 14&lt;/td&gt;
&lt;td&gt;6.22&lt;/td&gt;
&lt;td&gt;6.15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 15&lt;/td&gt;
&lt;td&gt;6.38&lt;/td&gt;
&lt;td&gt;6.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 16&lt;/td&gt;
&lt;td&gt;6.16&lt;/td&gt;
&lt;td&gt;6.45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 17&lt;/td&gt;
&lt;td&gt;6.32&lt;/td&gt;
&lt;td&gt;6.19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 18&lt;/td&gt;
&lt;td&gt;6.21&lt;/td&gt;
&lt;td&gt;6.18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 19&lt;/td&gt;
&lt;td&gt;6.25&lt;/td&gt;
&lt;td&gt;6.36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 20&lt;/td&gt;
&lt;td&gt;6.16&lt;/td&gt;
&lt;td&gt;6.17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 21&lt;/td&gt;
&lt;td&gt;6.46&lt;/td&gt;
&lt;td&gt;6.03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 22&lt;/td&gt;
&lt;td&gt;6.22&lt;/td&gt;
&lt;td&gt;6.12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 23&lt;/td&gt;
&lt;td&gt;6.30&lt;/td&gt;
&lt;td&gt;6.44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 24&lt;/td&gt;
&lt;td&gt;6.23&lt;/td&gt;
&lt;td&gt;6.67&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data 25&lt;/td&gt;
&lt;td&gt;6.20&lt;/td&gt;
&lt;td&gt;5.98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RESULTS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.26&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.27&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The results were one-hundredth of a second different, my conclusion might be that &lt;code&gt;trackBy&lt;/code&gt; would only be needed if there were some significant performance need.&lt;/p&gt;

&lt;p&gt;This path only tested Angular's ability to place data on-screen. I realized that the &lt;code&gt;trackBy&lt;/code&gt; was built as a means to allow for faster screen updates when the data changed.&lt;/p&gt;

&lt;p&gt;So, on to the second iteration ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-iteration"&gt;
  &lt;/a&gt;
  Second Iteration
&lt;/h2&gt;

&lt;p&gt;I decided to go with a smaller data-set and initialize a series of changes where I swapped two indexes. I opted for a 500ms delay in between loading the data and initiating the swaps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-real-work"&gt;
  &lt;/a&gt;
  The (Real) Work
&lt;/h3&gt;

&lt;p&gt;The repository is &lt;a href="https://github.com/bob-fornal/angular-ngfor-trackby"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, the data is now 10,000 records with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An integer, 0-based &lt;code&gt;index&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An identifier that is a random 50 characters A-Z, a-z, or 0-9.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each page connects to the service, gets the data and displays the identifier 10,000 times. On one page, we are using &lt;code&gt;trackBy&lt;/code&gt; and in the other, we are not using it.&lt;/p&gt;

&lt;p&gt;Additionally, after 500ms another process triggers that randomly picks two indexes and swaps them. I did this 1,000 times per page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-dataservicets-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;data.service.ts&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The core to the service is as follows ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;dataPoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nl"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataPoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;datum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;datum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;makeid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="na"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;charactersLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;charactersLength&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;getRandomInt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-withcomponentts-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;with.component.ts&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The components are nearly identical ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataService&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initiateReorganize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ngAfterViewChecked&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;difference: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;identify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;initiateReorganize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... except, the &lt;code&gt;without.component.ts&lt;/code&gt; does not contain an &lt;code&gt;identify&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-withcomponenthtml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;with.component.html&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;And, the HTML is nearly identical, as well ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of data; trackBy: identify"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ item.identifier }}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... removing the &lt;code&gt;trackBy: identify&lt;/code&gt; in the &lt;code&gt;without.component.html&lt;/code&gt;, as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;From this point, I refreshed the page 25-times each, noting the time to finish in the console.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;WITH&lt;/th&gt;
&lt;th&gt;WITHOUT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data 01&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;1654&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 02&lt;/td&gt;
&lt;td&gt;1647&lt;/td&gt;
&lt;td&gt;1669&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 03&lt;/td&gt;
&lt;td&gt;1634&lt;/td&gt;
&lt;td&gt;1695&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 04&lt;/td&gt;
&lt;td&gt;1639&lt;/td&gt;
&lt;td&gt;1652&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 05&lt;/td&gt;
&lt;td&gt;1753&lt;/td&gt;
&lt;td&gt;1641&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 06&lt;/td&gt;
&lt;td&gt;1624&lt;/td&gt;
&lt;td&gt;1693&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 07&lt;/td&gt;
&lt;td&gt;1627&lt;/td&gt;
&lt;td&gt;1632&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 08&lt;/td&gt;
&lt;td&gt;1676&lt;/td&gt;
&lt;td&gt;1637&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 09&lt;/td&gt;
&lt;td&gt;1638&lt;/td&gt;
&lt;td&gt;1707&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 10&lt;/td&gt;
&lt;td&gt;1631&lt;/td&gt;
&lt;td&gt;1630&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 11&lt;/td&gt;
&lt;td&gt;1625&lt;/td&gt;
&lt;td&gt;1652&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 12&lt;/td&gt;
&lt;td&gt;1727&lt;/td&gt;
&lt;td&gt;1648&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 13&lt;/td&gt;
&lt;td&gt;1633&lt;/td&gt;
&lt;td&gt;1768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 14&lt;/td&gt;
&lt;td&gt;1636&lt;/td&gt;
&lt;td&gt;1641&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 15&lt;/td&gt;
&lt;td&gt;1684&lt;/td&gt;
&lt;td&gt;1712&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 16&lt;/td&gt;
&lt;td&gt;1634&lt;/td&gt;
&lt;td&gt;1667&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 17&lt;/td&gt;
&lt;td&gt;1690&lt;/td&gt;
&lt;td&gt;1633&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 18&lt;/td&gt;
&lt;td&gt;1631&lt;/td&gt;
&lt;td&gt;1730&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 19&lt;/td&gt;
&lt;td&gt;1624&lt;/td&gt;
&lt;td&gt;1631&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 20&lt;/td&gt;
&lt;td&gt;1741&lt;/td&gt;
&lt;td&gt;1640&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 21&lt;/td&gt;
&lt;td&gt;1635&lt;/td&gt;
&lt;td&gt;1675&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 22&lt;/td&gt;
&lt;td&gt;1631&lt;/td&gt;
&lt;td&gt;1641&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 23&lt;/td&gt;
&lt;td&gt;1690&lt;/td&gt;
&lt;td&gt;1663&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 24&lt;/td&gt;
&lt;td&gt;1625&lt;/td&gt;
&lt;td&gt;1652&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data 25&lt;/td&gt;
&lt;td&gt;1688&lt;/td&gt;
&lt;td&gt;1651&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1658.52&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1664.56&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, given that the results are 6.04 milliseconds different (remember, less than a second difference on load of a data-set 10-times larger), my conclusion would be that &lt;code&gt;trackBy&lt;/code&gt; would only be needed if there were some significant performance need that cropped up.&lt;/p&gt;

&lt;p&gt;In general, it is not needed in modern Angular.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>development</category>
      <category>programming</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Using Services in Flutter</title>
      <author>Blazebrain</author>
      <pubDate>Mon, 01 Nov 2021 14:14:19 +0000</pubDate>
      <link>https://dev.to/blazebrain/using-services-in-flutter-572h</link>
      <guid>https://dev.to/blazebrain/using-services-in-flutter-572h</guid>
      <description>&lt;p&gt;One primary criterion for building a fully scalable and maintainable application is the reusability of code. Complex numbers of code repetitions would result in many potential bugs. When there needs to be a change in the package offering a particular service to the app, a painfully long process would be required to completely swap out implementations in the app. That itself is a nightmare for developers and can be the launching pad to failure for a product/company.&lt;/p&gt;

&lt;p&gt;This article will introduce you to Services in Flutter, along with their key benefits, and show example code. This article assumes you have a Flutter development environment setup and have been building apps with Flutter. If not, you can check out this guide from Flutter on getting started building Flutter apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Services are classes that offer a specific functionality. A Service is a class that uses methods that enable it to provide a specialized feature, emphasizing specialized. A Service class offers just one distinct input to the app. Examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ApiService&lt;/li&gt;
&lt;li&gt;LocalStorageService&lt;/li&gt;
&lt;li&gt;ConnectivityService&lt;/li&gt;
&lt;li&gt;ThemeService&lt;/li&gt;
&lt;li&gt;MediaService etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice how each of the services listed out there offers one distinct feature. They keep the codebase as clean as possible and reduce the number of repeated codes on the codebase.&lt;/p&gt;

&lt;p&gt;Services abstract functionalities got from a third-party source and reduced the dependence of the entire app on the goodwill of the package maintainer. For an app that depends directly on the packages, if the package maintainers abandon the package and there are no updates, it would break the app. When a decision is made later on to swap the package for another, there would be a lot involved in the process as developers would have to search through the codebase for places the package is used and then manually swap them. This process is painfully long and would cost development time and resources that the app could have better used.&lt;/p&gt;

&lt;p&gt;The app does not depend on the 3rd party package but depends on the Service class. Hence, when there is a need for a swap, the only thing that would need to be changed would be functions from the packages the Service depends on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Let's use the MediaService to fetch an image from the user's phone and displays it on the screen. The first thing is to create a new project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    flutter create intro_to_service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, import &lt;a href="https://pub.dev/packages/stacked/install"&gt;stacked&lt;/a&gt; and &lt;a href="https://pub.dev/packages/image_picker"&gt;image_picker&lt;/a&gt; packages, which Flutter would use in the project in the dependencies section of the &lt;code&gt;pubspec&lt;/code&gt; YAML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    dependencies: 
     image_picker: ^0.8.4+3
     stacked: ^2.2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the dev dependencies section, import the &lt;a href="https://pub.dev/packages/build_runner"&gt;build_runner&lt;/a&gt; and &lt;a href="https://pub.dev/packages?q=stacked+generator"&gt;stacked generator&lt;/a&gt;, which would be responsible for generating files from the annotations used in the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    dev_dependencies:
     build_runner: ^2.1.4
     stacked_generator: ^0.5.5 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, head over to your &lt;code&gt;main.dart&lt;/code&gt; file. Clear out the default counter app code, create a new material app, and pass an &lt;code&gt;HomeView&lt;/code&gt; to the home parameter (The &lt;code&gt;HomeView&lt;/code&gt; will be created later).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:flutter/material.dart';
    import 'package:intro_to_services/app/app.locator.dart';
    import 'views/home_view/home_view.dart';
    void main() {
     runApp(MyApp());
    }
    class MyApp extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
      return const MaterialApp(
       title: 'Material App',
       home: HomeView(),
      );
     }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would be making use of the &lt;a href="https://pub.dev/packages/image_picker"&gt;image_picker&lt;/a&gt; package and picking the image from the gallery. &lt;/p&gt;

&lt;p&gt;Create a folder named services; inside this folder, create a new file titled &lt;code&gt;media_service.dart&lt;/code&gt;. This is where the code for setting up the Service would be stored.&lt;/p&gt;

&lt;p&gt;Next, create the method to get the image; we provide it with a parameter &lt;code&gt;fromGallery&lt;/code&gt; to indicate if we would be using the Camera or taking the image from the gallery. The &lt;code&gt;image_picker&lt;/code&gt; package gives us access to both.&lt;/p&gt;

&lt;p&gt;This method would call the &lt;code&gt;pickImage&lt;/code&gt; function the package gives us access to and use the &lt;code&gt;fromGallery&lt;/code&gt; parameter to determine if we would get the image from the gallery or use the Camera.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'dart:io';
    import 'package:image_picker/image_picker.dart';
    class MediaService {
     final ImagePicker _picker = ImagePicker();
     Future&amp;lt;File?&amp;gt; getImage({required bool fromGallery}) async {

      final XFile? image = await _picker.pickImage(
       source: fromGallery ? ImageSource.gallery : ImageSource.camera,
      );
      final File? file = File(image!.path);
      return file;
     }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;getImage&lt;/code&gt; method then returns the file that was selected to be used inside the application. That wraps up the MediaService we would be using. &lt;/p&gt;

&lt;p&gt;Next, set up the locator file and register this Service that any class can use within the codebase. Create a new folder and name it &lt;code&gt;app&lt;/code&gt;. In this folder, create a file named &lt;code&gt;app.dart&lt;/code&gt;. This file would hold the setup for registering our services and other dependencies across the app. &lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;app.dart&lt;/code&gt; file, create a class named &lt;code&gt;AppSetup&lt;/code&gt; and annotate it with the &lt;code&gt;@StackedApp&lt;/code&gt; annotation. This annotation takes in a few parameters, among which are the routes and dependencies. The various services to be used within the app would be registered within the dependencies block of the &lt;code&gt;StackedApp&lt;/code&gt; annotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:intro_to_services/services/media_service.dart';
    import 'package:stacked/stacked_annotations.dart';
    @StackedApp(
     dependencies: [
      LazySingleton(classType: MediaService),
     ],
    )
    class AppSetup {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the block, we register the Service as a &lt;code&gt;LazySingleton&lt;/code&gt;, meaning it won't be initialized until it is used in the application. The classtype is the name of the class, which is MediaService. &lt;/p&gt;

&lt;p&gt;Next, run the command to generate the locator file from the &lt;code&gt;StackedApp&lt;/code&gt; annotation using the &lt;a href="https://pub.dev/packages?q=stacked+generator"&gt;stacked generator&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    flutter pub run build_runner build --delete-conflicting-outputs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a function in this generated file, the &lt;code&gt;setupLocator()&lt;/code&gt; function, which sets up the environment and registers the Service. We call this function in the main block in the &lt;code&gt;main.dart&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    void main() {
     WidgetsFlutterBinding.ensureInitialized();
     setupLocator();
     runApp(MyApp());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we have successfully created the Service and registered it in the locator file, making the Service available for use in any part of the codebase. &lt;/p&gt;

&lt;p&gt;Next, set up the &lt;code&gt;homeView&lt;/code&gt; and its &lt;code&gt;ViewModel&lt;/code&gt;. Create a new folder in the lib directory titled views. Inside this folder, create the folder which would hold the homeView and homeViewModel files. Name this folder home_view. Create the two files and name them &lt;code&gt;home_view.dart&lt;/code&gt; and &lt;code&gt;home_viewmodel.dart&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;homeViewModel&lt;/code&gt; file, create a class named &lt;code&gt;HomeViewModel&lt;/code&gt; which extends the &lt;code&gt;BaseViewModel&lt;/code&gt; from the &lt;a href="https://pub.dev/packages/stacked/install"&gt;stacked&lt;/a&gt; package. In this class, we first declare a variable that would access the &lt;code&gt;MediaService&lt;/code&gt; through the locator. The locator gives us access to the entire Service and its methods. Next, we declare a private nullable image of File type. We then link it to a getter for access by outside classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'dart:io';
    import 'package:intro_to_services/app/app.locator.dart';
    import 'package:intro_to_services/services/media_service.dart';
    import 'package:stacked/stacked.dart';
    class HomeViewModel extends BaseViewModel {
     final mediaService = locator&amp;lt;MediaService&amp;gt;();
     File? _image;
     File? get imageFromGallery =&amp;gt; _image;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, set up the method to make the call to the Service and fetch the image. The call to the &lt;code&gt;getImage&lt;/code&gt; function of the Service returns a file that we pass to the _image variable we created earlier. We then call &lt;code&gt;notifyListeners&lt;/code&gt; provided by the &lt;code&gt;BaseViewModel&lt;/code&gt; class from the &lt;a href="https://pub.dev/packages/stacked/install"&gt;stacked&lt;/a&gt; package. The &lt;code&gt;notifyListerners()&lt;/code&gt; call would inform the views bound to this &lt;code&gt;ViewModel&lt;/code&gt; that there has been a state change and that the views should perform a rebuild.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Future&amp;lt;void&amp;gt; getImageFromGallery() async {
      _image = await mediaService.getImage(fromGallery: true);
      notifyListeners();
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, setting up the view itself. Create a stateless widget named &lt;code&gt;HomeView&lt;/code&gt; in the home_view.dart file. This widget returns the &lt;code&gt;viewModelBuilder&lt;/code&gt; widget from stacked, which binds the view to the &lt;code&gt;ViewModel&lt;/code&gt;. We pass in the &lt;code&gt;ViewModel&lt;/code&gt; to the &lt;code&gt;viewModelBuilder&lt;/code&gt; function parameter and a Scaffold to the builder parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:flutter/material.dart';
    import 'package:stacked/stacked.dart';
    import 'home_viewmodel.dart';
    class HomeView extends StatelessWidget {
     const HomeView({Key? key}) : super(key: key);
     @override
     Widget build(BuildContext context) {
      return ViewModelBuilder&amp;lt;HomeViewModel&amp;gt;.reactive(
       viewModelBuilder: () =&amp;gt; HomeViewModel(),
       builder: (context, viewModel, child) {
        return Scaffold();
       },
      );
     }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the UI itself, we create a TextButton and pass the function to get the image from the &lt;code&gt;ViewModel&lt;/code&gt; in its onPressed Function; this would get the image from the gallery and makes it available for use in the view through the getter we declared in the &lt;code&gt;ViewModel&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     TextButton(
       onPressed: () {
        viewModel.getImageFromGallery();
       },
       child: const Text('Fetch Image'),
     )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, if the image is not null, we want to display the image in the view if the user has selected an image. Using the &lt;code&gt;image.file&lt;/code&gt; from Flutter, we display the selected image from the gallery to the user in the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     if (viewModel.imageFromGallery != null)
       Image.file(
        viewModel.imageFromGallery!,
         height: 30,
         width: 30,
       ),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the complete code for the home_view.dart view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:flutter/material.dart';
    import 'package:stacked/stacked.dart';
    import 'home_viewmodel.dart';
    class HomeView extends StatelessWidget {
     const HomeView({Key? key}) : super(key: key);
     @override
     Widget build(BuildContext context) {
      return ViewModelBuilder&amp;lt;HomeViewModel&amp;gt;.reactive(
        viewModelBuilder: () =&amp;gt; HomeViewModel(),
        builder: (context, viewModel, child) {
         return Scaffold(
          body: Center(
           child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
             if (viewModel.imageFromGallery != null)
              Image.file(
               viewModel.imageFromGallery!,
               height: 100,
               width: 100,
              ),
             TextButton(
              onPressed: () {
               viewModel.getImageFromGallery();
              },
              child: const Text('Fetch Image'),
             )
            ],
           ),
          ),
         );
        });
     }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the complete code for the sample app &lt;a href="https://github.com/Blazebrain/intro_to_services"&gt;here&lt;/a&gt;. Don't forget to drop a star on the repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hurray, you have successfully learned how to create a service, declare it and use it anywhere within your application.&lt;/p&gt;

&lt;p&gt;Services reduce the number of codes that would be reused within the application making the codebase cleaner and better organized. Services also protect us from the pain of manually swapping out implementations when there is a change in the third-party package being used within the codebase.&lt;/p&gt;

&lt;p&gt;Services offer benefits that speed up the development time and effectively use available resources. Not using them yet? Try them out, and you will see the impact it would make on your codebase. Have a great day.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>architecture</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Using Stacked Architecture in Flutter App</title>
      <author>Blazebrain</author>
      <pubDate>Mon, 01 Nov 2021 14:13:37 +0000</pubDate>
      <link>https://dev.to/blazebrain/using-stacked-architecture-in-flutter-app-2ecg</link>
      <guid>https://dev.to/blazebrain/using-stacked-architecture-in-flutter-app-2ecg</guid>
      <description>&lt;p&gt;The concept of Architecture is one of the most diverse topics in the world of programming today. A lot of solutions have been developed, all aimed at fixing one flaw or the other. App Architecture is one of the topics where personal choice has been advised to come in. If one meets your needs efficiently and enables you to release good, quality code, then go for it.&lt;/p&gt;

&lt;p&gt;This article aims to introduce you to Stacked Architecture, an architecture that offers clean, efficient solutions to architecture your next Flutter app. From dependency Injection to the right out of the box services to layered structures that follow the principles of &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; and a whole lot. To get started on development with Flutter, check out this &lt;a href="https://flutter.dev/docs/get-started/install"&gt;article&lt;/a&gt; from the Flutter team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pub.dev/packages/stacked"&gt;Stacked Architecture,&lt;/a&gt; developed by Dane Mackier from &lt;a href="https://www.filledstacks.com/"&gt;FilledStacks&lt;/a&gt;, is an MVVM Architecture solution that offers a lot of components for building a highly scalable, testable, maintainable, and usable Flutter application. From&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;State Management,&lt;/li&gt;
&lt;li&gt;Dependency Injection (Dependency Inversion),&lt;/li&gt;
&lt;li&gt;Navigation Abstraction,&lt;/li&gt;
&lt;li&gt;Services (Out-of-the-box),&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a whole lot more. All of these are offered by the Stacked Architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h2&gt;

&lt;p&gt;Handling State in Flutter application using Stacked couldn’t be much better. It provides widgets and constructors which control how the state is being passed and managed in the application. Let’s dive into it using a sample app.&lt;/p&gt;

&lt;p&gt;The first thing is to create a new Flutter project,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     flutter create intro_to_stacked
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command generates all the files and folders, which lays the foundation of the flutter app. &lt;br&gt;
Next is to add &lt;a href="https://pub.dev/packages/stacked"&gt;stacked&lt;/a&gt; as a dependency in the pubspec.yaml file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    stacked: ^2.2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next is to set up the basic folder structure for the sample app. Go to the lib folder and create a new folder titled home. Inside this, create two files named home_view.dart and home_viewmodel.dart. The homeViewModel file would be responsible for managing the state of the homeView, which is shown to the user. Clean Architecture, which says the view should contain zero logic, is strictly adhered to; the logic resides in the ViewModel.&lt;/p&gt;

&lt;p&gt;The view is bound to the ViewModel using the ViewModelBuilder widget, which Stacked offers. This widget takes in 2 parameters which are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;builder, which builds the UI that has its state in the ViewModel&lt;/li&gt;
&lt;li&gt;viewModelBuilder, which is the function that would return the ViewModel for this widget.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:flutter/material.dart';
    import 'package:stacked/stacked.dart';

    class HomeView extends StatelessWidget {
     const HomeView({Key? key}) : super(key: key);
     @override
     Widget build(BuildContext context) {
      return ViewModelBuilder&amp;lt;HomeViewModel&amp;gt;.reactive(
       viewModelBuilder: HomeViewModel(),
       builder: (context, model, child) {
        return Scaffold();
       },
      );
     }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ViewModelBuilder offers two constructors that deal with how the state is managed and subsequently update the UI for the application. They are the .reactive() and the .nonReactive() constructors. The .reactive() rebuilds the UI every time notifyListeners is called in the ViewModel. However, the .nonReactive() constructor rebuilds the UI once, after which it doesn’t rebuild on subsequent calls in the ViewModel. &lt;/p&gt;

&lt;p&gt;With that, we’ve set up the view file, moving to the ViewModel, we create a class that extends the BaseViewModel class that stacked provides. The BaseViewModel class provides functionalities used for maintaining the state in the application. In the ViewModel, we have a String that says Stacked is cool (definitely true). This String is the state currently offered by the ViewModel and which would need to be displayed on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:stacked/stacked.dart';

    class HomeViewModel extends BaseViewModel {
     final String _declaration = 'Stacked is soo cool';
     String get myDeclaration =&amp;gt; _declaration;

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back to the view, to use this state in our builder, we use the model offered by the builder connecting the state in the ViewModel to the UI screen which uses it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Scaffold(
         body: Center(
          child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
           children: [
            const Text('Stacked Introduction'),
            Text(model.myDeclaration),
           ],
          ),
         ),
        );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On updating the state in the application, let’s have a function that updates the text and calls notifyListeners after. We would link this function to the onPressed of a TextButton.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //In View(home_view.dart)
     TextButton(
      onPressed: () =&amp;gt; model.updateDeclaration(),
      child: const Text('Update Text'),
     )

    //In ViewModel (home_viewmodel.dart)
     void updateCounter() {
      _declaration = 'I say Stacked is sooo cool';
      notifyListeners();
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The notifyListeners call informs the view to rebuild as there has been a state change in the ViewModel.&lt;/p&gt;

&lt;p&gt;For a deep dive into the state management solution offered, check out this &lt;a href="https://www.filledstacks.com/post/flutter-state-management-with-stacked/"&gt;article&lt;/a&gt; provided by the FilledStacks team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-navigation-and-dependency-injection"&gt;
  &lt;/a&gt;
  How about Navigation and Dependency Injection?
&lt;/h2&gt;

&lt;p&gt;Stacked provides a direct out the box to navigation without context. Using the NavigationService it gives, we can smoothly declare our navigation in our ViewModel and use them in the view. This NavigationService allows for a clean UI without the interference of logic or complex routing codes. With the aid of the build runner and stacked generator, we can auto-generate routes and smoothly perform navigation.&lt;/p&gt;

&lt;p&gt;Let’s get to it.&lt;/p&gt;

&lt;p&gt;The first is to add &lt;a href="https://pub.dev/packages/build_runner"&gt;build_runner&lt;/a&gt; and &lt;a href="https://pub.dev/packages/stacked_generator"&gt;stacked_generator&lt;/a&gt; to the dev_dependencies section in your pubspec.yaml file. Also, add the &lt;a href="https://pub.dev/packages/stacked_services"&gt;stacked_services&lt;/a&gt; to the dependency section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    dependencies:
     stacked: ^2.2.7
     stacked_services: ^0.8.15

    dev_dependencies:
     build_runner: ^2.1.4
     stacked_generator: ^0.5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the &lt;code&gt;flutter pub get&lt;/code&gt; command to get the files locally for use.&lt;/p&gt;

&lt;p&gt;Next is to create the new view that we would be routing to. Create a folder inside lib and name it profile. Inside this folder, create two files, the profile_view.dart and profile_viewmodel.dart. &lt;/p&gt;

&lt;p&gt;In profile_viewmodel.dart, create a class named ProfileViewModel which extends BaseViewModel. In the ViewModel, we declare a String that the app would display on the view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:stacked/stacked.dart';

    class ProfileViewModel extends BaseViewModel {
     String _pageName = 'This is the Profile Page';
     String get pageName =&amp;gt; _pageName;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In profile_view.dart, create the stateless widget which returns the ViewModelBuilder and bind it to the ProfileViewModel. This view would contain a similar setup to the HomeView; it would display a Profile View text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:flutter/material.dart';
    import 'package:intro_to_stacked/ui/views/profile/profile_viewmodel.dart';
    import 'package:stacked/stacked.dart';
    class ProfileView extends StatelessWidget {
     const ProfileView({Key? key}) : super(key: key);
     @override
     Widget build(BuildContext context) {
      return ViewModelBuilder&amp;lt;ProfileViewModel&amp;gt;.reactive(
       viewModelBuilder: () =&amp;gt; ProfileViewModel(),
       builder: (context, viewModel, child) {
        return Scaffold(
         body: Center(
          child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
            Text(viewModel.pageName),
           ],
          ),
         ),
        );
       },
      );
     }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing is to create a folder in lib named app. Inside this folder, create a new file titled app.dart. In this file would all the code needed for routing along with the dependencies.&lt;/p&gt;

&lt;p&gt;Create a class named AppSetup and annotate it with the StackedApp; this class houses the annotation; it does nothing else asides that. The main focus is the annotation as it takes in two parameters, routes, and dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @StackedApp()
    class AppSetup {
     /** This class has no puporse besides housing the annotation that generates the required functionality **/
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stacked offers three different types of routes which determines the mode of transition&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MaterialRoute&lt;/li&gt;
&lt;li&gt;CupertinoRoute&lt;/li&gt;
&lt;li&gt;CustomRoute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the MaterialRoute, we register the Views present in the app that would use the NavigationService.&lt;/p&gt;

&lt;p&gt;In addition to the routes, we would declare the dependencies we would be using in the app, enabling Stacked to create the locator file that would handle the injection of the declared types. We would register the NavigationService as a LazySingleton, which means it won’t be initialized until used for the first time in the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import '../ui/views/home/home_view.dart';
    import '../ui/views/profile/profile_view.dart';
    import 'package:stacked/stacked_annotations.dart';
    @StackedApp(
     routes: [
      MaterialRoute(page: HomeView, initial: true),
      MaterialRoute(page: ProfileView)
     ],
     dependencies: [
      LazySingleton(classType: NavigationService),
     ],
    )
    class AppSetUp {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the HomeView is the first page we contact, we set the initial parameter to true. &lt;/p&gt;

&lt;p&gt;After setting this up, run the flutter command to auto-generate the needed files for routing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    flutter pub run build_runner build --delete-conflicting-outputs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command would generate the files needed for navigation and dependency injection setup. &lt;/p&gt;

&lt;p&gt;The last step in this process is to convert the main top-level function of the app into a Future and await the setupLocator function in the app.locator.dart file generated by the command used earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Future main() async {
     WidgetsFlutterBinding.ensureInitialized();
     await setupLocator();
     runApp(MyApp());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-do-we-use-it"&gt;
  &lt;/a&gt;
  How do we use it?
&lt;/h2&gt;

&lt;p&gt;To make use of the navigation in the HomeView, we create a function in the HomeViewModel that would perform the navigation. First, we declare the locator which would give us access to the Navigation Service we registered earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import 'package:intro_to_stacked/app/app.router.dart';
    import '../../../app/app.locator.dart';
    import 'package:stacked/stacked.dart';
    import 'package:stacked_services/stacked_services.dart';

    class HomeViewModel extends BaseViewModel {
     String _declaration = 'Stacked is soo cool';
     String get myDeclaration =&amp;gt; _declaration;
     final _navigationService = locator&amp;lt;NavigationService&amp;gt;();

     void navigateToProfileView() {
      _navigationService.navigateTo(Routes.profileView);
     }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing is to create a button in the view and pass the function to its onPressed parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     TextButton(
       onPressed: () =&amp;gt; model.navigateToProfileView(),
       child: const Text('Go To Profile View'),
     )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the files and run the app; you would see the button there, click the button and see the seamless transition that we achieve using the NavigationService Stacked provides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h2&gt;

&lt;p&gt;Stacked offers several services which can be set up and used within the app. These services include&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NavigationService&lt;/li&gt;
&lt;li&gt;BottomSheetService&lt;/li&gt;
&lt;li&gt;DialogService&lt;/li&gt;
&lt;li&gt;SnackbarService&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These services can be set up and customized to fit various use cases, and similar to the NavigationService, they can be registered and used within the app on the fly. For further information, check out the &lt;a href="https://pub.dev/packages/stacked_services"&gt;package&lt;/a&gt; on pub.dev and also the articles on &lt;a href="https://www.filledstacks.com/"&gt;FilledStacks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Stacked Architecture is a super pack ready to be discharged and used to build clean, scalable applications on the fly. This article has explained some of the concepts and components of Stacked Architecture, and with it, we have created a sample app that uses these components. Check out &lt;a href="https://www.filledstacks.com/"&gt;FilledStack&lt;/a&gt; for further information on the various features that make up the Stacked Architecture.&lt;/p&gt;

&lt;p&gt;You can find the code for the sample app &lt;a href="https://github.com/Blazebrain/intro_to_stacked"&gt;here&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>mobile</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Extract Airbnb Pages Using ProxyCrawl in .NET</title>
      <author>Neil R. Zamora</author>
      <pubDate>Mon, 01 Nov 2021 14:06:50 +0000</pubDate>
      <link>https://dev.to/neilrzamora/how-to-extract-airbnb-pages-using-proxycrawl-in-net-2c57</link>
      <guid>https://dev.to/neilrzamora/how-to-extract-airbnb-pages-using-proxycrawl-in-net-2c57</guid>
      <description>&lt;p&gt;Building a web scraper from the ground up to extract Airbnb data is no easy task. If you do not have the proper knowledge and tools at your disposal, you will most likely end up getting IP blocked.&lt;/p&gt;

&lt;p&gt;So in this project, I will share with you an easy way to create a web scraper with the help of &lt;a href="https://proxycrawl.com/scraper-api-auto-parse-web-data"&gt;ProxyCrawl’s Scraper API&lt;/a&gt;. Using this API will allow you to avoid most IP blocks and CAPTCHAs as it is built on top of rotating proxies. It also automatically scrapes the web for you at scale and returns parsed content instead of the complete HTML source code saving you time and effort from building your own parser.&lt;/p&gt;

&lt;p&gt;We will use my favorite platform, which is Microsoft's .NET, to demonstrate how simple it is to integrate the Scraper API in a web crawler and retrieve parsed data from Airbnb search results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-well-cover"&gt;
  &lt;/a&gt;
  What we'll cover
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;How to use &lt;a href="https://proxycrawl.com/crawling-libraries-sdk"&gt;ProxyCrawl library for .NET&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;How to extract data from Airbnb's search results&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-youll-need"&gt;
  &lt;/a&gt;
  What you'll need
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge in C# Programming Language&lt;/li&gt;
&lt;li&gt;Knowledge in Microsoft Visual Studio&lt;/li&gt;
&lt;li&gt;Microsoft Visual Studio installed on Windows&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://proxycrawl.com/signup?signup=index"&gt;ProxyCrawl account&lt;/a&gt; to use the Scraper API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-setup"&gt;
  &lt;/a&gt;
  Code Setup
&lt;/h3&gt;

&lt;p&gt;First, create a new C# Console Application Project in Microsoft Visual Studio. You can copy and paste the sample code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will utilize the NuGet dependency called &lt;a href="https://www.nuget.org/packages/ProxyCrawlAPI/"&gt;ProxyCrawlAPI (2.0.0)&lt;/a&gt; that acts as an easy-to-use library wrapping for ProxyCrawl services.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-scraper-code"&gt;
  &lt;/a&gt;
  The Scraper Code
&lt;/h3&gt;

&lt;p&gt;To scrape Airbnb search results, we have to use the following URL format: &lt;code&gt;https://www.airbnb.com/s/**YOUR PLACE HERE**/homes&lt;/code&gt;. For this example, we will be searching places in Beirut. You can write the following code in our Main method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            var api = new ProxyCrawl.ScraperAPI("YOUR_PROXYCRAWL_TOKEN_HERE");
            api.Get("https://www.airbnb.com/s/Beirut/homes");
            Console.WriteLine(api.Body);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;api.Body&lt;/code&gt; returns a structured AirBnb search items. You can see the example output below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "residents": [
    {
      "position": 1,
      "title": "Romy's Apartment at The Cube",
      "superHost": true,
      "residentType": "Entire apartment",
      "location": "Horch Tabet",
      "samplePhotoUrl": "https://a0.muscache.com/im/pictures/miso/Hosting-48845122/original/876dcd11-337b-464b-a4a7-b575858ed18f.jpeg?im_w=720",
      "accommodation": {
        "guests": "2 guests",
        "bedrooms": "1 bedroom",
        "beds": "1 bed",
        "baths": "1.5 baths"
      },
      "amenities": [
        "Wifi",
        "Air conditioning",
        "Kitchen",
        "Washer"
      ],
      "rating": "5.0",
      "personReviewed": "10",
      "costs": {
        "PricePerNight": "$67"
      }
    },
    {
      "position": 2,
      "title": "Michele's Apartment at The Cube",
      "superHost": true,
      "residentType": "Entire apartment",
      "location": "El Fil",
      "samplePhotoUrl": "https://a0.muscache.com/im/pictures/f36baf12-17d6-46a0-9b31-2229677ef43b.jpg?im_w=720",
      "accommodation": {
        "guests": "3 guests",
        "bedrooms": "2 bedrooms",
        "beds": "2 beds",
        "baths": "2 baths"
      },
      "amenities": [
        "Wifi",
        "Air conditioning",
        "Kitchen",
        "Washer"
      ],
      "rating": "4.81",
      "personReviewed": "73",
      "costs": {
        "PricePerNight": "$90"
      }
    }
  ],
  "residentsFound": 20
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extracting-data-using-c-objects"&gt;
  &lt;/a&gt;
  Extracting Data Using C# Objects
&lt;/h3&gt;

&lt;p&gt;Working with JSON is painful, so we will be using C# objects for this example. That said, let’s create the following classes first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;

using Newtonsoft.Json;

namespace ConsoleApp
{
    class Program
    {
        #region Inner Classes

        public class AirBnbScraperResult
        {
            public AirBnbResident[] Residents { get; set; }
        }

        public class AirBnbResident
        {
            [JsonProperty("title")]
            public string Title { get; set; }

            [JsonProperty("superHost")]
            public bool? SuperHost { get; set; }

            [JsonProperty("residentType")]
            public string ResidentType { get; set; }

            [JsonProperty("location")]
            public string Location { get; set; }

            [JsonProperty("samplePhotoUrl")]
            public string SamplePhotoUrl { get; set; }

            [JsonProperty("rating")]
            public decimal? Rating { get; set; }

            [JsonProperty("personReviewed")]
            public int? PersonReviewed { get; set; }

            [JsonProperty("accommodation")]
            public AirBnbResidentAccommodation Accommodation { get; set; }

            [JsonProperty("amenities")]
            public string[] Amenities { get; set; }

            [JsonProperty("costs")]
            public AirBnbResidentCost Costs { get; set; }
        }

        public class AirBnbResidentAccommodation
        {
            [JsonProperty("guests")]
            public string Guests { get; set; }

            [JsonProperty("bedrooms")]
            public string Bedrooms { get; set; }

            [JsonProperty("beds")]
            public string Beds { get; set; }

            [JsonProperty("baths")]
            public string Baths { get; set; }
        }

        public class AirBnbResidentCost
        {
            [JsonProperty("priceCurrency")]
            public string PriceCurrency { get; set; }

            [JsonProperty("pricePerNight")]
            public string PricePerNight { get; set; }
        }

        #endregion

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we de-serialize from our created object and navigate our objects from the &lt;code&gt;api.Body&lt;/code&gt; in the main method above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;

using Newtonsoft.Json;

namespace ConsoleApp
{
    class Program
    {
        ...

        static void Main(string[] args)
        {
            var api = new ProxyCrawl.ScraperAPI("YOUR_PROXYCRAWL_TOKEN_HERE");
            api.Get("https://www.airbnb.com/s/Beirut/homes");

            AirBnbScraperResult results = JsonConvert.DeserializeObject&amp;lt;AirBnbScraperResult&amp;gt;(api.Body);
            foreach (var resident in results.Residents)
            {
                if (resident.SuperHost.HasValue &amp;amp;&amp;amp; resident.SuperHost.Value)
                {
                    Console.WriteLine("{0} &amp;lt;SuperHost&amp;gt;", resident.Title);
                }
                else
                {
                    Console.WriteLine(resident.Title);
                }
                Console.WriteLine("Type: {0}", resident.ResidentType);
                Console.WriteLine("Location: {0}", resident.Location);
                Console.WriteLine("Photo: {0}", resident.SamplePhotoUrl);
                Console.WriteLine("Rating: {0}", resident.Rating);
                Console.WriteLine("Reviewers count: {0}", resident.PersonReviewed);
                if (resident.Amenities != null &amp;amp;&amp;amp; resident.Amenities.Length &amp;gt; 0)
                {
                    Console.WriteLine("Amenities: {0}", string.Join(", ", resident.Amenities));
                }
                if (resident.Accommodation != null)
                {
                    Console.WriteLine("Amenities");
                    Console.WriteLine("  * Bedrooms: {0}", resident.Accommodation.Bedrooms);
                    Console.WriteLine("  *     Beds: {0}", resident.Accommodation.Beds);
                    Console.WriteLine("  *    Baths: {0}", resident.Accommodation.Baths);
                    Console.WriteLine("  *   Guests: {0}", resident.Accommodation.Guests);
                }
                if (resident.Costs != null)
                {
                    Console.WriteLine("Costs");
                    Console.WriteLine("  * Currency: {0}", resident.Costs.PriceCurrency);
                    Console.WriteLine("  *Per Night: {0}", resident.Costs.PricePerNight);
                }

                Console.WriteLine();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it outputs similar to the screenshot below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7RQQE07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rui2bvjddvy0x2kwaru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7RQQE07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rui2bvjddvy0x2kwaru.png" alt="Web Scraper result ProxyCrawl" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the complete source code at &lt;a href="https://github.com/neilrzamora/proxycrawl-airbnb-scraper-dotnet.git"&gt;https://github.com/neilrzamora/proxycrawl-airbnb-scraper-dotnet.git&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So there you go, extracting data from Airbnb with the help of ProxyCrawl’s .NET library is just a breeze. There’s no need to compile a list of proxies or even write several lines of code to avoid CAPTCHAs and get the parsed data. With just one line of code, the Scraper API will handle parsing and proxies so you can just concentrate on the returned data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://proxycrawl.com/"&gt;ProxyCrawl&lt;/a&gt; is truly a versatile platform for web crawling and scraping. Feel free to utilize and expand the example code in this tutorial based on your needs.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>github</category>
    </item>
    <item>
      <title>Hello programmers community, I am Youssef Talib, I am studying web programming in my second year. Can you give me some advice</title>
      <author>Yousef Sabe Al Eish</author>
      <pubDate>Mon, 01 Nov 2021 14:01:17 +0000</pubDate>
      <link>https://dev.to/yousefsabealeish/hello-programmers-community-i-am-youssef-talib-i-am-studying-web-programming-in-my-second-year-can-you-give-me-some-advice-18bc</link>
      <guid>https://dev.to/yousefsabealeish/hello-programmers-community-i-am-youssef-talib-i-am-studying-web-programming-in-my-second-year-can-you-give-me-some-advice-18bc</guid>
      <description></description>
    </item>
  </channel>
</rss>
