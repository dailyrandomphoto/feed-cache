<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS CloudFormation - Hands On</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 06 Sep 2021 03:02:49 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-cloudformation-hands-on-4dae</link>
      <guid>https://dev.to/this-is-learning/aws-cloudformation-hands-on-4dae</guid>
      <description>&lt;p&gt;Last article we studied what is AWS CloudFormation in this article we will create a basic AWS cloud formation template. To setup a template in AWS CloudFormation follow the steps below:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Search for AWS CloudFormation in the search bar and go to AWS cloud formation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will get to the dashboard click on create stack&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C58rO35o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trw5awu30rd2qwk7brng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C58rO35o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trw5awu30rd2qwk7brng.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the prepare template select &lt;code&gt;Template is ready&lt;/code&gt;. Here we can select other options to like use &lt;code&gt;Sample template&lt;/code&gt; which uses an already created template or you can also choose to &lt;code&gt;Create template in designer&lt;/code&gt; which helps you create templates visually.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQmD5jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pj6c6asrl4mzv4hh0g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQmD5jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pj6c6asrl4mzv4hh0g2.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that select &lt;code&gt;upload a template file&lt;/code&gt; You can also select a templete file form your S3 bucket. Upload the following &lt;code&gt;aws-example.yaml&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;HelloBucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::S3::Bucket&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also click on &lt;code&gt;View in Designer&lt;/code&gt; to visually see how your stacks looks like &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ns3zc2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjlw7nbavn96dcrhcrxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ns3zc2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjlw7nbavn96dcrhcrxl.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click next enter a stack name like &lt;code&gt;CloudFormationdemo&lt;/code&gt; and click next&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xXJBFLdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tdfkklvhcuy8bs12as3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXJBFLdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tdfkklvhcuy8bs12as3.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next you can add tags to identify your cloud formation resources and r&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPG56GyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c94zfmv11e90jm5xpc9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPG56GyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c94zfmv11e90jm5xpc9f.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
oles to give access to various services we don't need roles and set the tag as name &lt;code&gt;CloudFormation&lt;/code&gt; you can use any other tag.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x6BjU1ha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqxum9bmnhpz9pv2uqre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6BjU1ha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqxum9bmnhpz9pv2uqre.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;. Then click on next. You can review all your values are correct and click on create stack&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dclPDaZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npq595tf4lnj8mqi39qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dclPDaZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npq595tf4lnj8mqi39qw.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It will show you all the events that happened while creating a cloud formation template&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEJbf8eW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rytaue5fby0fi7bz0t8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEJbf8eW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rytaue5fby0fi7bz0t8z.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to your S3 console and you can see that there is a bucket Cloudformationdemo&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rV8ONUZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evc6qxn3ohih8skqx21x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rV8ONUZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evc6qxn3ohih8skqx21x.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is way to create a Cloud Formation Stack don't forget to delete your CloudFormation stack if you are doing this as a demo&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we will study about Amazon Beanstalk.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS CloudFormation </title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 06 Sep 2021 01:52:48 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-cloudformation-o02</link>
      <guid>https://dev.to/this-is-learning/aws-cloudformation-o02</guid>
      <description>&lt;p&gt;AWS CloudFormation is a tool which provides a way to setup your infrastructure as a set of instructions which are followed one by one, by treating infrastructure as code.When you define an AWS template you define all the resources and configuration in the desired amount and AWS CloudFormation creates that template as specified.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-cloud-formation"&gt;
  &lt;/a&gt;
  Benefits of using Cloud Formation
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Makes easy to automate everything.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating a copy of your stack is a matter of just running your AWS CloudFormation template again&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It enables you to create, update, or delete stacks across multiple AWS accounts and Regions, with a single operation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even allows using third-party resource types using CloudFormation Public Registry.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One click destroy your whole stack. Makes it easy for testing your stack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can leverage already created templates for you in the community&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Makes it easy to visualize everything using automated diagrams of our stack&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next we will do a hands n to setup a basic stack on CloudFormation.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>How long is your Maximum Line Length for PEP 8?</title>
      <author>Shuichi</author>
      <pubDate>Mon, 06 Sep 2021 01:52:33 +0000</pubDate>
      <link>https://dev.to/cof123/how-long-is-your-maximum-line-length-for-pep8-g2m</link>
      <guid>https://dev.to/cof123/how-long-is-your-maximum-line-length-for-pep8-g2m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#style-guide"&gt;
  &lt;/a&gt;
  Style Guide
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;PEP 8 Maximum Line Length&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Limit all lines to a maximum of 79 characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used to follow this guide and set the default value to 79 characters in Lint.&lt;br&gt;
However, the readability was sometimes compromised to comply with this, so I decided to reread the guide and tune the setting values.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the line length limit up to 99 characters, provided that comments and docstrings are still wrapped at 72 characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rationale for the 79 characters is described as follows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Limiting the required editor window width makes it possible to have several files open side by side, and works well when using code review tools that present the two versions in adjacent columns.&lt;br&gt;
The default wrapping in most tools disrupts the visual structure of the code, making it more difficult to understand. The limits are chosen to avoid wrapping in editors with the window width set to 80, even if the tool places a marker glyph in the final column when wrapping lines. Some web based tools may not offer dynamic line wrapping at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I see.&lt;/p&gt;

&lt;p&gt;Also, in &lt;a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds"&gt;A Foolish Consistency is the Hobgoblin of Little Minds&lt;/a&gt; there is a section that says&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#ide-defaults"&gt;
  &lt;/a&gt;
  IDE defaults
&lt;/h2&gt;

&lt;p&gt;VisualStudioCode and PyCharm defaulted to 120 characters per line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-languages"&gt;
  &lt;/a&gt;
  Other Languages
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Characters_per_line"&gt;Characters per line - Wikipedia&lt;/a&gt;  has a good summary.&lt;br&gt;
There are many languages with 80 characters.&lt;/p&gt;

&lt;p&gt;Interestingly, they seem to be derived from typewriters and punch cards.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-long-is-my-maximum-line-length-for-pep-8"&gt;
  &lt;/a&gt;
  How long is my Maximum Line Length for PEP 8?
&lt;/h1&gt;

&lt;p&gt;So, I changed the Maximum Line Length to 90 for the time being because, in our team's standard editors, about 90 characters can be displayed in the one tree tab + two editor tabs.&lt;/p&gt;

&lt;p&gt;It's been a couple of months now, and I'm glad I changed it.&lt;/p&gt;

&lt;p&gt;I'm thinking of changing it to 99 characters after seeing how it goes.&lt;/p&gt;

</description>
      <category>python</category>
      <category>pep8</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to setup Cypress on Github Actions</title>
      <author>Rodrigo Santos</author>
      <pubDate>Sun, 05 Sep 2021 23:48:59 +0000</pubDate>
      <link>https://dev.to/rodrigosta/how-to-setup-cypress-on-github-actions-45b6</link>
      <guid>https://dev.to/rodrigosta/how-to-setup-cypress-on-github-actions-45b6</guid>
      <description>&lt;p&gt;In this text, I try to show you how to setup Cypress on Github Actions, but first I have one disclaimer for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I assume you know the basics about Github, that is  &lt;strong&gt;commits&lt;/strong&gt;, &lt;strong&gt;pull requests&lt;/strong&gt; and &lt;strong&gt;branchs&lt;/strong&gt; need to be familiar concepts.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Github Actions it's a important tool for automate and run softwares workflows in day by day. In this article I show to you when every time someone creates a pull request for a your project repository, you can automatically run a command that executes a software testing script.&lt;/p&gt;

&lt;p&gt;But first, I need you to have any Github repository with any Cypress test.&lt;/p&gt;

&lt;p&gt;So let's start the fun...&lt;/p&gt;

&lt;p&gt;1 . In your Github repository create a new file in directory &lt;em&gt;.github/workflows&lt;/em&gt; called &lt;em&gt;github-actions-init.yml&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2 . In this file we must add a content with steps of our workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: GitHub Actions Demo
on: [pull_request]
jobs:
 cypress-run:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v2
        with:
            node:version: '14'
      - name: Install dependencies
        run: npm install       
      - name: Cypress run
        uses: cypress-io/github-action@v2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this YAML file, we have some terms that need explanation, so let's go undestand line by line: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name: GitHub Actions Demo&lt;/code&gt;: It's basically the name of our workflow.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on: [pull_request]&lt;/code&gt;: Shows for github actions when running the workflow &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jobs&lt;/code&gt;: Group all jobs in file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cypress-run&lt;/code&gt;: It's job's name &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt;: Indicates to a workflow should run in a Ubuntu Linux executor.
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;steps&lt;/code&gt;: All steps to run in workflow&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Checkout&lt;/code&gt;: It's a step's name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uses: actions/checkout@v2&lt;/code&gt;: In this line basically our workflow checks our repository allowing you to run actions against own code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name: Install node&lt;/code&gt;: It's a step's name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uses: actions/setup-node@v2&lt;/code&gt;: This step is used for install a specified node version&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;node-version&lt;/code&gt;: Indicate a node version&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name: Install dependencies&lt;/code&gt;: It's a step's name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;run: npm install&lt;/code&gt;: Run the command install in node, to install all dependencies in project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name: Cypress run&lt;/code&gt;: It's a step's name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uses: cypress-io/github-action@v2&lt;/code&gt;: Run a Cypress command to execute all tests cases in project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3 . After add this file in repository, it's time to create a pull request and see the magic happen.&lt;/p&gt;

&lt;p&gt;It's all for today, but i hope this text helps you and if you have any ask text me in comments. I see you soon.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#project-repository-httpsgithubcomrodrigostae2etodolist"&gt;
  &lt;/a&gt;
  Project Repository: &lt;a href="https://github.com/rodrigosta/e2e-toDoList"&gt;https://github.com/rodrigosta/e2e-toDoList&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions"&gt;https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cypress.io/guides/continuous-integration/github-actions"&gt;https://docs.cypress.io/guides/continuous-integration/github-actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>testing</category>
    </item>
    <item>
      <title>How to Build a Search Bar</title>
      <author>Jay Cruz</author>
      <pubDate>Sun, 05 Sep 2021 23:08:54 +0000</pubDate>
      <link>https://dev.to/coderjay06/how-to-build-a-search-bar-4673</link>
      <guid>https://dev.to/coderjay06/how-to-build-a-search-bar-4673</guid>
      <description>&lt;p&gt;&lt;em&gt;A quick walkthrough on how to build a search bar feature with Javascript&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-search-bar"&gt;
  &lt;/a&gt;
  What’s a Search Bar?
&lt;/h2&gt;

&lt;p&gt;Okay, so we probably all know what a search bar is at this point but let me quickly explain. A search bar is an input box that appears on browsers, websites, and applications. It takes in a user’s search query and allows you to search for some type of information.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Search_engine"&gt;search engine&lt;/a&gt; is the software system behind the scenes that handles searches on the web.&lt;/p&gt;

&lt;p&gt;Did you know the &lt;a href="https://en.wikipedia.org/wiki/Search_engine#:~:text=Prior%20to%20September%201993%2C%20the%20World%20Wide%20Web%20was%20entirely%20indexed%20by%20hand"&gt;world wide web was entirely indexed by hand prior to the first web search engines?&lt;/a&gt; I can probably write a whole article about the history of search engines but today we’re just going to be building a basic search bar for a web application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-search-bar"&gt;
  &lt;/a&gt;
  Building a Search Bar
&lt;/h2&gt;

&lt;p&gt;To begin to create our search bar feature we should think about several concepts that go into a working version of it. We know that we’re going to need an empty search bar that takes in user input. We also need a way to capture that input and handle it to start finding what the user is searching for while they are typing it in. To find and render this data to the user we should store whatever type of data is being searched. In this case, we’re going to be working with a social app that allows users to search their list of friends out using a search bar.&lt;/p&gt;

&lt;p&gt;To start building out our search bar we’re going to need to set up the HTML first to make it appear on our app. We can build out the basic structure to get something showing up on the page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let’s check out what our search feature is looking like after setting everything up with HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cJhXt5NT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AwuNraXafbt2DAKw88uHPBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cJhXt5NT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AwuNraXafbt2DAKw88uHPBA.png" alt="Search bar feature with basic html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not the best-looking search app yet but we’re getting somewhere. We’ll give it some styling to make it more user-friendly.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This should give us a much nicer-looking app to work with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l8SK6LO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ABq-7kc1W2D63a2DJ_atQZw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l8SK6LO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ABq-7kc1W2D63a2DJ_atQZw.png" alt="Search bar feature with css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we can build the functionality to give our app the ability to search friends by typing in their names and having them render on the page. To do this we need to think about how we can handle the user event of typing in the search box using Javascript. We need to compare their search input to the names we have in our friend list. Let’s list the several steps we’ll take to implement this before writing out our Javascript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Grab &lt;code&gt;thesearchInput&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; elements from the DOM and store them in variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add an event listener on the searchInput to listen for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/keyup_event"&gt;keyup&lt;/a&gt; events&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get user input once the event is triggered&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search name elements and convert text to lowercase for case insensitive comparisons&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compare names to the search query using the string method &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes"&gt;includes()&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update name element styles to display matching names&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we have our Javascript setup let’s test out our new search feature by starting to enter some input in the search bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBWTgHdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATQyDwce_WH4wP2fUwY6-YQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBWTgHdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATQyDwce_WH4wP2fUwY6-YQ.png" alt="Finished search bar feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works! Now our search bar will give us the closest matching name results based on what letter characters we’re typing in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Search bars are a common feature of most web and mobile applications. They usually appear somewhere at the top corner of a web page and persist across the website for user convenience. Depending on the specifics of your application, search bars can be a great addition to it. For example, if your app holds a lot of information for the user it can greatly improve the user experience.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>11 Youtube Python Courses</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 05 Sep 2021 23:06:53 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/11-youtube-python-courses-g5m</link>
      <guid>https://dev.to/ayabouchiha/11-youtube-python-courses-g5m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#11-youtube-python-courses"&gt;
  &lt;/a&gt;
  11 Youtube Python Courses
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=f79MRyMsjrQ"&gt;Python Crash Course&lt;/a&gt;(2h)(Programming with Mosh)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=_uQrJ0TkZlc"&gt;Python Tutorial - Python for Beginners&lt;/a&gt; (6h 15min)(programming with mosh)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=8DvywoWv6fI"&gt;Python for everybody - Full University Python Course&lt;/a&gt;(13h 30min)(freeCodeCamp)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=kqtD5dpn9C8"&gt;Python for Beginners - Learn Python in 1 Hour&lt;/a&gt;(1h)(Programming with Mosh)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=rfscVS0vtbw"&gt;Learn Python - Full course for beginners&lt;/a&gt; (4h 30min)(freeCodeCamp)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=t8pPdKYpowI"&gt;Python Tutorial For Beginners&lt;/a&gt;(5h 30min)(TechWorld With Nana)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=VchuKL44s6E"&gt;Python As Fast as Possible - Learn Python in ~75 Minutes&lt;/a&gt;(75min)(Tech With Tim)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=XKHEtdqhLK8"&gt;Python full course&lt;/a&gt; (12h) (bro code)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=WGJJIrtnfpk"&gt;Python full Course&lt;/a&gt;(12h)(Edureka)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=HGOBQPFzWKo"&gt;Intermediate Python Programming Course&lt;/a&gt;(6h)(freeCodeCamp)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=tdn9_MZ0lN4"&gt;Python Advanced Course&lt;/a&gt;(8h 30min)(Externe Code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have an amazing day&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>--css variables</title>
      <author>Thomas(Tripp) White </author>
      <pubDate>Sun, 05 Sep 2021 21:23:19 +0000</pubDate>
      <link>https://dev.to/turpp/css-variables-1o8a</link>
      <guid>https://dev.to/turpp/css-variables-1o8a</guid>
      <description>&lt;p&gt;Why in the world do do hex or rgb colors have to be so hard to remember? Not to mention how much of a pain it is to find and change them when you change your color scheme. CSS variables to the rescues! If you have never used CSS variables the time to start is now. They are widely supported across browsers and can make you styling a breeze.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-css-variables"&gt;
  &lt;/a&gt;
  What are --css variables
&lt;/h2&gt;

&lt;p&gt;CSS variables are a way for you to assign certain css values to a keyword and reuse them throughout your application. CSS variables can have local or global scope and can be manipulated with JavaScript. Most often, they are used to help you manage your colors but you can use css variables many different ways. In the simplest form, a css variable is nothing but a keyword that has a value assigned to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h2&gt;

&lt;p&gt;To declare and use a css variable is very simple. There are 3 main things you need to remember: &lt;code&gt;--&lt;/code&gt; &lt;code&gt;:root&lt;/code&gt; &lt;code&gt;var()&lt;/code&gt;. &lt;code&gt;—-&lt;/code&gt; is used whenever you assign and declare your variable. To create a variable you must put &lt;code&gt;—-&lt;/code&gt; in front of your variable name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;/* my variable name is main-color and my value associated with it is #5a9e4b */&lt;/span&gt;
&lt;span class="py"&gt;--main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5a9e4b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;:root&lt;/code&gt; is how you declare global scope. Scope is basically where all you can access your variable from. Global scope means you have access throughout your css file. You can create a local variable by using the &lt;code&gt;—-variable-name&lt;/code&gt; inside of a class. A local variable means that you only have access to this variable locally inside that class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* This is declaring a global variable that I can access from anywhere in my css file. Anything inside of :root is global.*/&lt;/span&gt;
&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="py"&gt;-main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5a9e4b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* This is declaring a local variable. I can only access this variable inside of this class */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--main-text-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-text-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;var()&lt;/code&gt; is how you call your variables. Remember a variable is nothing but a keyword that has a set value. To pass this value to a css property all you have to do is type the name of your variable inside of the &lt;code&gt;()&lt;/code&gt;. It’s that simple!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* creating a global variable for main-color */&lt;/span&gt;
&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="py"&gt;-main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5a9e4b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* passing the variable name into the var function. This will put #5a9e4b as the value to the color property. */&lt;/span&gt;
&lt;span class="nc"&gt;.someClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="n"&gt;-main-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fallbacks"&gt;
  &lt;/a&gt;
  Fallbacks
&lt;/h2&gt;

&lt;p&gt;Unfortunately not all browsers are created equally. While most browsers are pretty robust its best practice to have some fallbacks in place. There is special syntax that you can use to have a fallback for your value. Its the same &lt;code&gt;var()&lt;/code&gt; as before but you add a second argument. &lt;code&gt;var(--main-color, blue);&lt;/code&gt; This will use your css variable &lt;code&gt;--main-color&lt;/code&gt; and if it is invalid or not defined it will then make the value equal to blue. The &lt;code&gt;var()&lt;/code&gt; only takes in two arguments and the second argument can be an additional css variable if you want. &lt;code&gt;var(--main-color, var(--ultimate-fallback));&lt;/code&gt; This will try to use &lt;code&gt;main-color&lt;/code&gt; first and if its invalid will then use the &lt;code&gt;--ultimate-fallback&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5a9e4b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;/* will try --main-color first. If invalid will use blue */&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this will not act as a fall back for browsers that do not support css variables. To create a fallback for this is a little extra work but possible. CSS reads one line at at time. You can have the same property with two different values for the same class and css will use the last one written. We can take advantage of this with our variables. You can hard code your fallback in your css class and then on the next line add your css variable. Css will read each line and if the browser does not support css variables it will then default to your hard coded fallback. If the browser does support css variables then it will use it since it was used after the fallback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5a9e4b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;/* will use --main-color since it is last color property written. If invalid will then use blue.*/&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-javascript"&gt;
  &lt;/a&gt;
  Using JavaScript
&lt;/h2&gt;

&lt;p&gt;Since css varaibles have access to the DOM you can change them with JavaScript! You can make some really interesting user interfaces with this trick. To start create your css variables like you normally would. Then use &lt;code&gt;querySelector&lt;/code&gt; to get access to the &lt;code&gt;root&lt;/code&gt; element. Now that you have access to the root element, all you have to do is use the &lt;code&gt;setProperty()&lt;/code&gt; method to change the value of you variable. This will update the value and hence update your entire css file everywhere you used that variable. The &lt;code&gt;setProperty()&lt;/code&gt; method is a method on CSSStyleDeclaration Object. I won’t go into detail on this or the other methods you can use. I want to keep this article light and focused on css varaibles instead of JavaScript. Go to &lt;a href="https://www.w3schools.com/jsref/obj_cssstyledeclaration.asp"&gt;https://www.w3schools.com/jsref/obj_cssstyledeclaration.asp&lt;/a&gt; If you would like to learn more about what you can do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="py"&gt;-primary-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5a9e4b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="n"&gt;-primary-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//gives me access to the root element&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//this will change the style of my —-primary-color variable to red.&lt;/span&gt;
&lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--primary-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example I have a css variable called &lt;code&gt;—-primary-color&lt;/code&gt; that is set to the value of &lt;code&gt;#5a9e4b&lt;/code&gt;. Then I make the color to all of my &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags equal to my new variable. In the JavaScript section, I first create a variable that is equal to the root element. Then I can access my variable by using the &lt;code&gt;setProperty('variable name', 'new value')&lt;/code&gt; method. The first argument is the variable name and the second argument is the new value. Now all my &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; will have red text!&lt;/p&gt;

&lt;p&gt;You now have the knowledge needed to start using css varaibles in your applications. This will help increase developement speed, readability, and maintainability. If you enjoy this you can look into things like Sass to further extend your css capabilities.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Parsing Custom Dates in JS</title>
      <author>Osama Qarem</author>
      <pubDate>Sun, 05 Sep 2021 21:14:49 +0000</pubDate>
      <link>https://dev.to/osamaqarem/parsing-custom-dates-in-js-3kl8</link>
      <guid>https://dev.to/osamaqarem/parsing-custom-dates-in-js-3kl8</guid>
      <description>&lt;p&gt;Recently at work we moved our iOS React Native app from &lt;a href="https://trac.webkit.org/wiki/JavaScriptCore"&gt;JSC&lt;/a&gt; to &lt;a href="https://reactnative.dev/docs/hermes"&gt;Hermes&lt;/a&gt; which became available for iOS as of &lt;a href="https://reactnative.dev/blog/2021/03/12/version-0.64"&gt;RN0.64&lt;/a&gt;. Previously we were using Hermes only on Android and it was working great. Now that Android and iOS run the same engine we have confidence that our JavaScript output for both platforms will be equal – they should work and fail in JS land in the same ways.&lt;/p&gt;

&lt;p&gt;One thing which immediately broke on iOS was our Apple Health integration (which of course is iOS only) – specifically when parsing dates for user activities on the JS side. The date string returned from Objective-C to JavaScript looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-08-31T17:00:00.000+0300
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could parse this previously on JSC using &lt;code&gt;new Date()&lt;/code&gt; but for some reason it results in an &lt;code&gt;"Invalid Date"&lt;/code&gt; on Hermes. Turns out the problem was in the time zone offset. Hermes could only parse ISO dates containing a time zone offset in &lt;code&gt;±HH:mm&lt;/code&gt; format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+03:00
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but not in a format without a colon &lt;code&gt;±HHmm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+0300
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reading about &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt;, it seems that both formats would be correct. I've submitted an issue about this on &lt;a href="https://github.com/facebook/hermes/issues/588"&gt;facebook/hermes&lt;/a&gt; to get more information and apparently JavaScript implements a simplified version of ISO 8601 which doesn't specify the time zone offset without a colon:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/facebook/hermes/issues/588#issuecomment-913167322"&gt;@neildhar&lt;/a&gt;: Hi &lt;a class="mentioned-user" href="https://dev.to/osamaqarem"&gt;@osamaqarem&lt;/a&gt;
, thanks for reporting this. Note that the JavaScript uses a simplified version of ISO 8601, and does not specify the format without the colon for the timezone. However, as you mentioned, most other engines seem to support it, so we probably should too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So until this gets fixed in Hermes we will need to implement a workaround. We used the custom date formatter from &lt;a href="https://day.js.org/en/"&gt;Day.js&lt;/a&gt; – a great library which we were already making use of in our codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parsing-custom-dates"&gt;
  &lt;/a&gt;
  Parsing Custom Dates
&lt;/h2&gt;

&lt;p&gt;Day.js depends on &lt;code&gt;new Date()&lt;/code&gt; for parsing &lt;a href="https://github.com/iamkun/dayjs/blob/dev/src/index.js#L55-L75"&gt;under the hood&lt;/a&gt;. Meaning it would still fail to parse our date when running Hermes. A small bundle size is one of the main features of Day.js so the package ships with only core functionality. To extend its capabilities, we use &lt;a href="https://day.js.org/docs/en/plugin/plugin"&gt;plugins&lt;/a&gt;. And the one we need is &lt;strong&gt;&lt;a href="https://day.js.org/docs/en/plugin/custom-parse-format"&gt;CustomParseFormat&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dayjs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dayjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;customParseFormat&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dayjs/plugin/customParseFormat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;dayjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customParseFormat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Quite straightforward.&lt;/p&gt;

&lt;p&gt;Now we just need to define our format. To give Dayjs the ability to parse our date, we need to tell it what our date looks like based on these defined formats, e.g.:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;YY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;Two-digit year&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;YYYY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;Four-digit year&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1-12&lt;/td&gt;
&lt;td&gt;The month, beginning at 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;01-12&lt;/td&gt;
&lt;td&gt;The month, 2-digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1-31&lt;/td&gt;
&lt;td&gt;The day of the month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;01-31&lt;/td&gt;
&lt;td&gt;The day of the month, 2-digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0-23&lt;/td&gt;
&lt;td&gt;The hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;00-23&lt;/td&gt;
&lt;td&gt;The hour, 2-digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0-59&lt;/td&gt;
&lt;td&gt;The minute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;00-59&lt;/td&gt;
&lt;td&gt;The minute, 2-digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ss&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;00-59&lt;/td&gt;
&lt;td&gt;The second, 2-digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SSS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;000-999&lt;/td&gt;
&lt;td&gt;The millisecond, 3-digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;+05:00&lt;/td&gt;
&lt;td&gt;The offset from UTC, ±HH:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZZ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;+0500&lt;/td&gt;
&lt;td&gt;The offset from UTC, ±HHmm&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the &lt;a href="https://day.js.org/docs/en/display/format#list-of-all-available-formats"&gt;full reference here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our date looks like &lt;code&gt;2021-08-31T17:00:00.000+0300&lt;/code&gt;, so the format we need would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'T' here is a constant which would be present in the expected date string
YYYY-MM-DDTHH:mm:ss.SSSZZ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using our custom format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dayjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-08-31T17:00:00.000+0300&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YYYY-MM-DDTHH:mm:ss.SSSZZ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// 2021-08-31T14:00:00.000Z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That works! And once the fix for Hermes is in, we can replace it with a regular JS date constructor call.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out the source code for &lt;a href="https://github.com/iamkun/dayjs/blob/dev/src/plugin/customParseFormat/index.js"&gt;CustomParseFormat&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;This article was cross-posted from my personal blog. Do &lt;a href="https://osamaqarem.com/?join=true"&gt;subscribe&lt;/a&gt; to me there!&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>API</title>
      <author>prosper Yong</author>
      <pubDate>Sun, 05 Sep 2021 20:47:28 +0000</pubDate>
      <link>https://dev.to/yongdev/api-n54</link>
      <guid>https://dev.to/yongdev/api-n54</guid>
      <description>&lt;p&gt;Applications can access data and interact with external software components, operating systems, or microservices through APIs (Application Programming Interfaces).&lt;/p&gt;

&lt;p&gt;To put it simply, an API sends a user's response to a system and receives the system's response back. An API notifies the site that you have added a product to your cart; the website adds the product to your cart, and your cart is updated.&lt;br&gt;
With regards to API, you could encounter the phrase "microservices." Nevertheless, they're not the same thing! In a web application, microservices are used to separate functions. API, on the other hand, is the structure through which web application developers communicate with a web site. As a matter of fact, microservices can communicate via APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-apis-and-how-do-they-work"&gt;
  &lt;/a&gt;
  What are APIs and how do they work?
&lt;/h2&gt;

&lt;p&gt;An Application programming interface is made up of two parts that are interconnected. Firstly, there is a specification that explains how information is shared between programmes, in the form of a request for processing and a return of the necessary data. An interface developed to that standard and made available for usage is the second. Calling and publishing are two terms that refer to software that wishes to use the features and capabilities of an API. In other words, APIs allow users and other programmes to access data that has been requested by them.For example, preset roles govern which services may access certain actions or data, and access to a given service or feature is authenticated against predefined roles. APIs also offer a system audit trail that shows who or what accessed the system when.&lt;/p&gt;

&lt;p&gt;A lot of the time, the applications that call APIs have been developed in a specific programming language. However, web APIs may also be accessible using HTML or application generation tools. Representative state transfer (REST) and Simple Object Access Protocol (SOAP) are the two most prevalent API architectures, and they both offer standard communication protocol specifications for XML-based message exchange. However, REST APIs are easier to scale and redeploy as well as to build and connect with websites and services than SOAP APIs, which need less low-level infrastructure-related code. Particularly for web-based interactions, REST APIs are the current industry standard.&lt;/p&gt;

</description>
      <category>api</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Python-dotenv (Keep your secrets safe)</title>
      <author>Emma Donery</author>
      <pubDate>Sun, 05 Sep 2021 20:12:48 +0000</pubDate>
      <link>https://dev.to/emma_donery/python-dotenv-keep-your-secrets-safe-4ocn</link>
      <guid>https://dev.to/emma_donery/python-dotenv-keep-your-secrets-safe-4ocn</guid>
      <description>&lt;p&gt;&lt;strong&gt;Python-dotenv&lt;/strong&gt; is a Python module that allows you to specify environment variables in traditional UNIX-like “.env” (dot-env) file within your Python project directory. Read more from their &lt;a href="https://pypi.org/project/python-dotenv/"&gt;official documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Environment variables&lt;/strong&gt; is the set of key-value pairs for the current user environment. They are generally set by the operating system and the current user-specific configurations.&lt;/p&gt;

&lt;p&gt;Python-dotenv helps us work with SECRETS and KEYS without exposing them to the outside world, and keep them safe during development too&lt;/p&gt;

&lt;p&gt;ALso, it helps in the development of applications following the &lt;a href="https://12factor.net/"&gt;12-factor app&lt;/a&gt; principles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Create a new virtual environment
&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="c1"&gt;#activate
&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="c1"&gt;#install
&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-pythondotenv-module"&gt;
  &lt;/a&gt;
  Using the python-dotenv module
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a .env file&lt;br&gt;
First, you need to create a new .env file, and then load the name and value of the variables as a key-value pairs:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#.env file
&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"12345689"&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"gsabijwjnciiwbjksa"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create app.py file ,Import and Call python-dotenv&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app.py
## importing the load_dotenv from the python-dotenv module
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access the Environment Variables&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="c1"&gt;#provides ways to access the Operating System and allows us to read the environment variables
&lt;/span&gt;
&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CLIENT_ID"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CLIENT_SECRET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myEnvironment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'My id is: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'My secret key is: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;my_secret_key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;myEnvironment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
    &lt;code&gt;&lt;br&gt;
    ID = "12345689"&lt;br&gt;
    SECRET_KEY = "gsabijwjnciiwbjksa"&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KEY-NOTE:&lt;/strong&gt; A large number of security vulnerabilities can be resolved by taking care of leaked credentials, and the python-dotenv helps in developing a safer project environment to work with, both, during and after development as well.&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>programming</category>
    </item>
    <item>
      <title>Depreciating My First Package</title>
      <author>RayhanADev</author>
      <pubDate>Sun, 05 Sep 2021 19:50:56 +0000</pubDate>
      <link>https://dev.to/rayhanadev/depreciating-my-first-package-83g</link>
      <guid>https://dev.to/rayhanadev/depreciating-my-first-package-83g</guid>
      <description>&lt;p&gt;Some time ago, I created a post on Dev.to about creating my first package, a NodeJS API for the online IDE Replit. Over the years my skills increased, the knowledgebase increase, and ReplAPI.it got better. We shifted from adding every part of the APIs to creating a package that allows for users to get the data they need without struggling through documentation and ideologies. &lt;strong&gt;The package was depreciated.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;The Replit API is crazy and constantly changing, and in our efforts to put every part of it at the disposal of our users we set ourselves up for failure. Every week there was some new error, some change to the site, some new query that threw a wrench in our plans. The situation was &lt;a href="https://gist.github.com/Rapptz/4a2f62751b9600a31a0d3c78100287f1"&gt;somewhat similar to that faced by the Discord.py devs&lt;/a&gt;. We were blind to everything unless someone asked on the &lt;a href="https://replit.com/discord"&gt;Discord Server&lt;/a&gt;. In fact our project was never sponsored (or acknowledged for that matter) by anyone on the Replit team. It became a bit of a pain to manage the package, and attempts to make the process easier and &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;er only made the codebase shift more insane.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-what"&gt;
  &lt;/a&gt;
  Now What?
&lt;/h2&gt;

&lt;p&gt;Well at the current state, the package is unusable and there are no plans by myself to update it. Some community members have used it as a base to create their own versions which I whole-heartedly support. I don't intend on passing the package itself on NPM over to just anyone, but if you update the package to work with the current problems faced by developers then feel free to shoot me an email.&lt;/p&gt;

&lt;p&gt;If you want to use the Replit API at it's current state there are a few hurdles. Firstly you need &lt;a href="https://github.com/RayhanADev/lightfetch"&gt;an HTTPS package&lt;/a&gt; because the staging domain that allowed HTTP is down and the main site requires HTTPS. The API endpoint is at &lt;code&gt;https://replit.com/graphql&lt;/code&gt;. Secondly, you need a schema. You can find some of it by look in DevTools in Network Requests, reverse-engineer the ReplAPI.it package, or obtain a copy of the schema from some benevolent member of the Replit Team (or Replit Mods). With these two in hand you can create your own projects with the API.&lt;/p&gt;

</description>
      <category>node</category>
      <category>packages</category>
      <category>depreciation</category>
      <category>replit</category>
    </item>
    <item>
      <title>Python 3.9: What's new?</title>
      <author>Romeo Agbor Peter</author>
      <pubDate>Sun, 05 Sep 2021 19:50:29 +0000</pubDate>
      <link>https://dev.to/romeopeter/python-3-9-what-s-new-2nmm</link>
      <guid>https://dev.to/romeopeter/python-3-9-what-s-new-2nmm</guid>
      <description>&lt;p&gt;&lt;em&gt;Python 3.10 is coming but have you tried 3.9? In this article I'll show you cool new features introduced to the current version of the Python programming language and give you reasons why you ought to be cautious when porting to newer version&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With every Python update comes new, deprecated and obsolete features. Python 3.9 was officially released on &lt;a href="https://www.python.org/dev/peps/pep-0596/"&gt;October 5th, 2020&lt;/a&gt;. With 3.10 on the way, version 3.9 is Python's biggest update yet. This article will be showing the cool features, and modules introduces to the language and those that are no longer supported.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features.
&lt;/h2&gt;

&lt;p&gt;Here are the cool new features introduced in the current version. These are feature update to dictionary, string, type hinting and a new language parser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New dictionary operators.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python's built-in &lt;em&gt;dict&lt;/em&gt; class comes with a new way of merging updating dictionary. The updates compliment the existing methods of merging dictionaries using the&lt;code&gt;dict.update&lt;/code&gt; and &lt;code&gt;{**d1, **d2}&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; set_x = {"key1": "value1 from x", "key2": "value2 from x"}
&amp;gt;&amp;gt;&amp;gt; set_y = {"key2": "value2 from y", "key3": "value3 from y"}

&amp;gt;&amp;gt;&amp;gt; set_x | set_y
{'key1': 'value1 from x', 'key2': 'value2 from y', 'key3': 'value3 from y'}

&amp;gt;&amp;gt;&amp;gt; {**set_x, **set_y} # The same as the above
{'key1': 'value1 from x', 'key2': 'value2 from y', 'key3': 'value3 from y'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, you can see that &lt;code&gt;set_x | set_y&lt;/code&gt; is the same thing as &lt;code&gt;{**set_x, **set_y}&lt;/code&gt;. on closer inspection, you may notice that the merge is made based on the dictionary key. This is because the operator calculate the element in the dictionaries as a &lt;a href="https://en.wikipedia.org/wiki/Union_(set_theory)"&gt;union of sets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new merge operator can be be used to merge different dictionary-like object and preserve the object. The &lt;code&gt;{**d1, **d2}&lt;/code&gt; method will rather return a &lt;em&gt;dict&lt;/em&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from collections import defaultdict

&amp;gt;&amp;gt;&amp;gt; fruits = defaultdict(
    lambda: None, 
    {"cabbage":"60% Vitmain C", "carrot":"5% Vitamin C", "broccoli":"70% Vitamin C"}
)

&amp;gt;&amp;gt;&amp;gt; Veggies = defaultdict(
    lambda: None, 
    {"apple":"7% Vitamin C", "mango":"60% Vitamin D", "orange":"88% Vitamin C"}
)

&amp;gt;&amp;gt;&amp;gt; fruits | veggies
defaultdict(&amp;lt;function &amp;lt;lambda&amp;gt; at 0x000002379439DF70&amp;gt;, 
    {'cabbage': '60% Vitmain C', 'carrot': '5% Vitamin C', 'broccoli': '70% Vitamin C', 'apple': '7% Vitamin C', 'mango': '60% Vitamin D', 'orange': '88% Vitamin C'})

&amp;gt;&amp;gt;&amp;gt; {**fruits, **veggies}
{'cabbage': '60% Vitmain C', 'carrot': '5% Vitamin C', 'broccoli': '70% Vitamin C', 'apple': '7% Vitamin C', 'mango': '60% Vitamin D', 'orange': '88% Vitamin C'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;small&gt;Update using the &lt;code&gt;|=&lt;/code&gt; operator.&lt;/small&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ds_libraries = {
...    "numpy": "Mathematical functions",
...    "Pandas": "Data structure manipulations",
...    "Scipy": "Scientifc calculations"
}

&amp;gt;&amp;gt;&amp;gt; ds_libraries |= {"Matplot": "Data visualization"}
&amp;gt;&amp;gt;&amp;gt; ds_libraries
{"numpy": "Mathematical functions", "Pandas": "Data structure manipulations", "Scipy": "Scientifc   calculations", "Matplot": "Data visualization"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new update operator can be used to update data types with a dictionary-like data structure, unlike the merge (|)  operator where the two dictionary must be of proper types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; #...

&amp;gt;&amp;gt;&amp;gt; # List of tuples
&amp;gt;&amp;gt;&amp;gt; ds_libraries |= [("","")]
&amp;gt;&amp;gt;&amp;gt; ds_libraries
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about the new dictionary operators, see &lt;a href="https://www.python.org/dev/peps/pep-0584"&gt;&lt;strong&gt;PEP 584&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-string-methods"&gt;
  &lt;/a&gt;
  New string methods
&lt;/h3&gt;

&lt;p&gt;New string methods have been added to remove the beginning (prefix) and end (suffix) of a string. Introduced here are the &lt;code&gt;removeprefix()&lt;/code&gt; and &lt;code&gt;removesuffix()&lt;/code&gt; methods&lt;/p&gt;

&lt;p&gt;Say you wan to remove the prefix "Python" in the string "Python 3.9 is cool." You'd use the &lt;code&gt;removeprefix&lt;/code&gt; method. The syntax is &lt;code&gt;str.removeprix(prefix)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; string = "Python 3.9 is cool"
&amp;gt;&amp;gt;&amp;gt; string.removeprefix("Python")
' 3.9 is cool'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;same thing goes for the suffix. The syntax is &lt;code&gt;str.removesuffix(suffix)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; string = "Python 3.9 is cool"&amp;gt;&amp;gt;&amp;gt; string.removesuffix("cool")'Python 3.9 is '
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the given prefix or suffix of the string passed to either methods is empty, then the string will be returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; string = "Python 3.9 is cool"
&amp;gt;&amp;gt;&amp;gt; string.removesuffix("")
"Python 3.9 is cool"
&amp;gt;&amp;gt;&amp;gt; string.removesuffix("")
"Python 3.9 is cool"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, either methods only remove one copy of the prefix or suffix. To remove all, use a &lt;code&gt;while&lt;/code&gt; loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; string = "Laracoco"
&amp;gt;&amp;gt;&amp;gt; string.removesuffix("co")

&amp;gt;&amp;gt;&amp;gt; while string.endswith("co"):
...     string.removesuffix("co")
...
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; string
"Lara"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about the new string methods, see  &lt;a href="https://www.python.org/dev/peps/pep-0616"&gt;&lt;strong&gt;PEP 616&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builtin-type-hinting"&gt;
  &lt;/a&gt;
  Built-in type hinting.
&lt;/h2&gt;

&lt;p&gt;Before Python 3.9, creating a collection or generic type for code annotation needed importing the &lt;em&gt;typing&lt;/em&gt; module. A collection/generic type is a container that can be filled with other types, such as a list of dictionaries. In previous versions of python, this couldn't be achieved. It wasn't possible to use &lt;code&gt;list[dict]&lt;/code&gt; or &lt;code&gt;list[float]&lt;/code&gt; to type hint, you'd rather use a corresponding capitalized type from the &lt;em&gt;typing&lt;/em&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Python 3.9, using the imported &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Dict&lt;/code&gt; corresponding generic type is eliminated. Python now has them built into the language for easy type hinting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#new-parser"&gt;
  &lt;/a&gt;
  New Parser
&lt;/h3&gt;

&lt;p&gt;A core part of the Python interpreter is the &lt;em&gt;parser&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;To &lt;em&gt;parse&lt;/em&gt; means to resolve data into a structure that describe it meaning.&lt;/p&gt;

&lt;p&gt;Simply put (In the way even I would understand), A parser is a component of a programming language's interpreter or compiler that translate lines of code into machine-readable language.&lt;/p&gt;

&lt;p&gt;For Python, the parser organizes the code in tree-like manner known as a &lt;em&gt;parse-tree&lt;/em&gt; or &lt;em&gt;Abstract Syntax Tree (AST)&lt;/em&gt;  so the interpreter can convert to native code.&lt;/p&gt;

&lt;p&gt;Python 3.9 comes with reimplemented parser that is based on &lt;em&gt;Parsing Expression Grammar (PEG)&lt;/em&gt; instead of  &lt;a href="https://en.wikipedia.org/wiki/LL_parser"&gt;&lt;em&gt;Left-to-left, Leftmost derivation (LL Parser)&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The performance of the new parser is no much different from the old one. However, "the PEG formalism is more flexible than LL when it comes to developing new language features." That's to say that much hack around the new parser is not needed as it was the case with the old parser that needed circumventing. PEG parser will work in the same way as the old one by producing &lt;em&gt;Abstract Syntax Tree (AST)&lt;/em&gt; for the interpreter.&lt;/p&gt;

&lt;p&gt;The new Python update ships with both parser, but has PEG as it default. Having both parsers is good for comparing performance at the AST level.&lt;/p&gt;

&lt;p&gt;The old parser will be remove in the next version of Python, version 3.10. Doing so will allow for development of new language features without the limitation of the old parser.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://www.python.org/dev/peps/pep-0617"&gt;&lt;strong&gt;PEP 617&lt;/strong&gt;&lt;/a&gt; for&lt;br&gt;
more information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#new-modules"&gt;
  &lt;/a&gt;
  New Modules.
&lt;/h2&gt;

&lt;p&gt;Version 3.9 introduced two modules: &lt;em&gt;Zoneinfo&lt;/em&gt; for time zone support and &lt;em&gt;graphlib&lt;/em&gt; for sorting graphs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#proper-time-zone-with-zoneinfo"&gt;
  &lt;/a&gt;
  Proper time zone with &lt;em&gt;zoneinfo&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Previous version of Python lacked built-in support for working with time zones (technically, it did, but only supported UTC), to do so, you'd have to used the 3rd party &lt;em&gt;dateutil&lt;/em&gt; module.&lt;/p&gt;

&lt;p&gt;The new &lt;a href="https://docs.python.org/3.9/library/zoneinfo.html"&gt;&lt;em&gt;zoneinfo&lt;/em&gt;&lt;/a&gt; is not only built-in but makes working with easy. The module introduce support for the &lt;em&gt;&lt;a href="https://www.iana.org/time-zones"&gt;Internet Assigned Number Authority (IANA)&lt;/a&gt;&lt;/em&gt; time zone database to the standard library.&lt;/p&gt;

&lt;p&gt;You can access time zone by using &lt;code&gt;zoneinfo.ZoneInfo&lt;/code&gt; and passing in &lt;code&gt;country/state [or city]&lt;/code&gt; key. It'll return a description of the time zone as an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zoneinfo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZoneInfo&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZoneInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Africa/Lagos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZoneInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Africa/Lagos'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;NOTE&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;If you get an error as the following:&lt;/p&gt;


&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s"&gt;'tzdata'&lt;/span&gt;

&lt;span class="n"&gt;During&lt;/span&gt; &lt;span class="n"&gt;handling&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;occurred&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"C:\Python39\lib\zoneinfo\_common.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;load_tzdata&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ZoneInfoNotFoundError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"No time zone found with key &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZoneInfoNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'No time zone found with key Nigeria/Lagos'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;That indicate there's no local IANA time zone database in the machine, hence &lt;code&gt;zoneinfo&lt;/code&gt; is unable to locate it. To solve the error, install the &lt;code&gt;tzdata&lt;/code&gt;, which is a module containing the IANA time zone database.&lt;/p&gt;


&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; python pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; tzdata
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code&gt;zoneinfo.ZoneInfo&lt;/code&gt;, you can create a timestamp with proper time zone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zoneinfo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZoneInfo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ZoneInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Africa/Lagos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;937856&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZoneInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Africa/Lagos'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="c1"&gt;# Show time zone description
&lt;/span&gt;&lt;span class="n"&gt;zoneinfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZoneInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Africa/Lagos'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Show time zone name
&lt;/span&gt;&lt;span class="s"&gt;'WAT'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See &lt;a href="https://www.python.org/dev/peps/pep-0615"&gt;&lt;strong&gt;PEP 615&lt;/strong&gt;&lt;/a&gt; for me information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graph-topological-sorting-using-graphlib"&gt;
  &lt;/a&gt;
  Graph topological sorting using &lt;em&gt;graphlib&lt;/em&gt;.
&lt;/h3&gt;

&lt;p&gt;For sorting data represented as a graph, Python 3.9 adds a new module &lt;code&gt;graphlib&lt;/code&gt; into the standard library and it contains the &lt;code&gt;graphlin.TopologicalSorter&lt;/code&gt;  class to offer functionality to perform topological sort of graph.&lt;/p&gt;

&lt;p&gt;For instance, packages installed from the &lt;a href="https://realpython.com/pypi-publish-python-package/"&gt;PyPi&lt;/a&gt; repository may have dependencies that also, in turn, may have other dependencies. This forms a structure of nodes and links (edges), each package is a node and each dependencies a link.&lt;/p&gt;

&lt;p&gt;If you wanted to install a package that has dependencies, and you want to make sure all other related dependencies are installed, you'd do a &lt;a href="https://en.wikipedia.org/wiki/Topological_sorting"&gt;topological&lt;/a&gt; sort to find the total order of required dependencies.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;graphlib&lt;/code&gt; module, you can perform a topological sort to find the total order of dependencies as a list. For instance, you can represent a package and its dependencies as dictionary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"package_A"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"depedency_A"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"depedency_B"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s"&gt;"dependency_B"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"dependency_F"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dictionary represents all the dependencies of &lt;code&gt;package_A&lt;/code&gt;, and from inspection, &lt;code&gt;Package_A&lt;/code&gt; depends on &lt;code&gt;dependency_A&lt;/code&gt; and &lt;code&gt;depedency_B&lt;/code&gt;. &lt;code&gt;depedency_B&lt;/code&gt; depends on &lt;code&gt;dependency_F&lt;/code&gt;. The actual dependencies of &lt;code&gt;package_A&lt;/code&gt; are &lt;code&gt;depedency_A&lt;/code&gt; and &lt;code&gt;depedency_B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To calculate the total order of the graph to know which dependencies should be installed first, use the &lt;code&gt;TopologicalSort&lt;/code&gt; class from &lt;code&gt;graphlib&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;graphlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TopologicalSorter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#...
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TopologicalSorter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependecies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static_order&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'depedency_A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'depedency_B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'dependency_F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'package_A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'dependency_B'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The order above, given as a list, suggest that &lt;code&gt;depedency_A&lt;/code&gt; should be installed first, followed  &lt;code&gt;dependency_B&lt;/code&gt;, then &lt;code&gt;dependency_F&lt;/code&gt;, followed by the package and lastly, &lt;code&gt;dependency_B&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;I don't claim to have an extensive(it is rather shallow) knowledge about Topological ordering and dependency resolution. See the following for more: &lt;a href="https://en.wikipedia.org/wiki/Topological_sorting"&gt;Topological sorting - Wikipedia&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Total_order"&gt;Total order - Wikipedia&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Dependency_(disambiguation)"&gt;https://en.wikipedia.org/wiki/Dependency_(disambiguation)&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more information &lt;em&gt;graphlib&lt;/em&gt; module and its API, see the &lt;a href="https://docs.python.org/3/library/graphlib.html#module-graphlib"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-updates"&gt;
  &lt;/a&gt;
  Other updates.
&lt;/h2&gt;

&lt;p&gt;In python 3.9, many modules have been improved upon. The &lt;em&gt;http&lt;/em&gt; module added two new status code, &lt;em&gt;imaplib&lt;/em&gt; modules added optional timeout parameters for their constructors, &lt;code&gt;math&lt;/code&gt;  module has expanded the &lt;code&gt;math.gcd()&lt;/code&gt; function handle multiple argument and so on.&lt;/p&gt;

&lt;p&gt;The list is quite extensive, see &lt;a href="https://docs.python.org/3/whatsnew/3.9.html#improved-modules"&gt;here&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deprecated-code"&gt;
  &lt;/a&gt;
  Deprecated code.
&lt;/h2&gt;

&lt;p&gt;Many code modules and function to the standard library have been deprecated, notably the support for &lt;a href="https://www.python.org/dev/peps/pep-0373/"&gt;Python 2.7&lt;/a&gt; code.&lt;/p&gt;

&lt;p&gt;Some Python 2.7 deprecated that's been support for backward compatibility have been removed, and many more will be removed in Python 3.10.&lt;/p&gt;

&lt;p&gt;For more information on deprecated code, see &lt;a href="https://docs.python.org/3/whatsnew/3.9.html#you-should-check-for-deprecationwarning-in-your-code"&gt;deprecated warnings&lt;/a&gt; and &lt;a href="https://docs.python.org/3/whatsnew/3.9.html#deprecated"&gt;deprecated code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upgrading-to-python-39"&gt;
  &lt;/a&gt;
  Upgrading to Python 3.9.
&lt;/h2&gt;

&lt;p&gt;You might be tempted to upgrade to version 3.9, if that desire test out the new feature then yes, go head. You can install it using a &lt;a href="https://docs.python.org/3/library/venv.html?highlight=virtual%20environment"&gt;virtual environment&lt;/a&gt; (venv) so it sits side-by-side with your current Python version. If it's what I'm thinking then you should think twice.&lt;/p&gt;

&lt;p&gt;You're current project in production or development running on version 3.7 or 3.8 may not need any changing, if you insist, think these: Should I upgrade my project environment and make it dependent on Python 3.9?&lt;/p&gt;

&lt;p&gt;Moving to python 3.9 (or any newer version) will benefit you and/or your team if the project environment under control and will not affect other users or the community. You can go ahead and use all the cool new features available.&lt;/p&gt;

&lt;p&gt;You shouldn't port to a newer version if it'll affect the community, a package library written in version 3.7 will lost some function that have been deprecated in 3.9. Changes to community project should be done cautiously and gradually.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://docs.python.org/3/whatsnew/3.9.html#porting-to-python-3-9"&gt;porting to Python 3.9&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-310"&gt;
  &lt;/a&gt;
  Python 3.10?
&lt;/h2&gt;

&lt;p&gt;Yes, that's right! as at the time of this writing, python 3.10 should be release next month &lt;a href="https://www.python.org/downloads/release/python-3100a1/"&gt;October 25, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the release of the current version, going forward, all version will be release every 12 months, steering away from the usual eighteen months release cycle.&lt;/p&gt;

&lt;p&gt;With faster release cycle, the Python language will release features faster with fewer changes, however, it won't get new features faster or become incompatible faster. All new release will receive support for five years. The current version, 3.9, after its initial release will receive support till 2025.&lt;/p&gt;

&lt;p&gt;Python 3.10 will be special because it's the first Python version with a double digit minor version (.10)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As snake shed their skin so will the Python programming language. The current release is the most exciting yet. In about a month from now, it'll shed again. But that doesn't mean version 3.9 will die off, it's not even as widespread as 3.7 was. It usually takes a while before community project fully port to newer versions.&lt;/p&gt;

&lt;p&gt;Go ahead and try the listed features out, it might just fit right into what you're building or about to build.&lt;/p&gt;

&lt;p&gt;Tweet at &lt;a href="https://twitter.com/_romeopeter"&gt;me&lt;/a&gt;. let's connect.&lt;/p&gt;

&lt;p&gt;cheers!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
