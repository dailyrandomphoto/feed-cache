<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Announcing the MongoDB Atlas Hackathon on DEV!</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Mon, 13 Dec 2021 19:27:24 +0000</pubDate>
      <link>https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m</link>
      <guid>https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m</guid>
      <description>&lt;p&gt;&lt;strong&gt;We are thrilled to announce a brand new challenge on DEV in partnership with our friends at &lt;a href="https://dev.to/mongodb"&gt;MongoDB&lt;/a&gt;: the MongoDB Atlas Hackathon!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From now through January 13th, 2022, MongoDB is offering you the chance to use your ingenuity and creativity to build an application using MongoDB's library of tools like Atlas Search. In addition to getting the chance to participate in a community event, show off your skills, and learn something new, everyone who submits a project for the MongoDB Atlas Hackathon will be automatically entered to win some seriously amazing prizes. &lt;/p&gt;

&lt;p&gt;Now, let's get into the granular details of this challenge so you can start building and winning üëÄ  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  The Challenge
&lt;/h3&gt;

&lt;p&gt;If you've been a member of the DEV community for a while, you've likely encountered articles by the talented team over at &lt;a href="https://dev.to/mongodb"&gt;MongoDB&lt;/a&gt; (many members of their team have been using DEV for years).&lt;/p&gt;

&lt;p&gt;But while you might be familiar with MongoDB, it's possible that you haven't used their modern database platform for yourself ‚Äî this hackathon is the perfect opportunity to explore it! MongoDB believes that working with data doesn't need to be hard. In fact, it can be an intuitive experience for all developers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For this hackathon, we're offering you the chance to build an application within the guidelines below by utilizing &lt;a href="https://docs.atlas.mongodb.com/"&gt;MongoDB Atlas&lt;/a&gt;: a collection of cloud database and data services that helps you accelerate and simplify how you use data in your work&lt;/strong&gt;, including but not limited to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.atlas.mongodb.com/atlas-search/"&gt;Atlas Search&lt;/a&gt;:&lt;/strong&gt; Build fast, relevance-based full-text search in your applications in minutes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.atlas.mongodb.com/tutorial/create-new-serverless-instance/"&gt;Atlas Serverless Instances&lt;/a&gt;:&lt;/strong&gt;  Deploy a serverless database that can scale on-demand with minimal configuration.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.mongodb.com/manual/core/timeseries-collections/"&gt;Time Series Collections&lt;/a&gt;:&lt;/strong&gt; An efficient way to store sequences of measurements over a period of time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.mongodb.com/realm/functions/"&gt;Realm Functions&lt;/a&gt;:&lt;/strong&gt; Define and execute JavaScript functions to build APIs, integrate with cloud services, and lots more. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.mongodb.com/realm/triggers/trigger-types/"&gt;Realm Triggers&lt;/a&gt;:&lt;/strong&gt;  Automatically run functions in response to database changes, user events, or preset intervals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;To view documentation for each tool listed, please click on the hyperlinks above.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DEV and MongoDB are challenging you to choose a category (from the list below) and build an application that utilizes Atlas and other MongoDB tools as described within that category. &lt;/p&gt;

&lt;p&gt;Once your app is complete and follows all the requirements (see "How to Submit" below), you'll be publishing a post on DEV that describes what you created. That post will serve as your official submission.&lt;/p&gt;

&lt;p&gt;We‚Äôre excited to see what you build for the MongoDB Atlas Hackathon using MongoDB's ecosystem of tools built for developers, by developers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#categories"&gt;
  &lt;/a&gt;
  Categories
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;E-Commerce Creation:&lt;/strong&gt; Build an e-commerce store using MongoDB &lt;a href="https://docs.atlas.mongodb.com/reference/atlas-search/tutorial/"&gt;Atlas Search&lt;/a&gt;. &lt;br&gt;
&lt;em&gt;(Sample use-cases: product catalog, food ordering/delivery service)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prime Time:&lt;/strong&gt; Build an application using MongoDB &lt;a href="https://docs.mongodb.com/manual/core/timeseries-collections/"&gt;Time Series Collections&lt;/a&gt;. &lt;br&gt;
&lt;em&gt;(Sample use cases: IoT, financial analytics, climate observations)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Action Star:&lt;/strong&gt; Build an event-driven application using MongoDB &lt;a href="https://docs.mongodb.com/realm/functions/"&gt;Realm Functions&lt;/a&gt; and &lt;a href="https://docs.mongodb.com/realm/triggers/trigger-types/"&gt;Triggers&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(Sample use cases: inventory monitoring, logistics apps, alerts/notification apps)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automation Innovation:&lt;/strong&gt; Automate a task that you perform on a weekly basis using MongoDB &lt;a href="https://docs.atlas.mongodb.com/tutorial/create-new-serverless-instance/"&gt;Atlas Serverless Instances&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;(Sample use-cases: Payroll/ billing, reporting, scheduling, email responses)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose Your Own Adventure:&lt;/strong&gt; Create an application using &lt;a href="https://docs.atlas.mongodb.com/"&gt;MongoDB Atlas&lt;/a&gt; that doesn‚Äôt fit into any of the categories above. &lt;br&gt;
&lt;em&gt;(Note: the winners we select in this category will be the ones that got super creative and wacky! Feel free to go as random as possible.)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sounds like fun, right? The great news is that this hackathon provides you with more than just fun and a chance to learn ‚Äî all participants with valid submissions will also be entered to win a part of MongoDB's exciting prize package üí∞.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prizes"&gt;
  &lt;/a&gt;
  Prizes
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;5 Grand Prize Winners&lt;/strong&gt;&lt;/em&gt; (one in each category):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$1,500 USD gift card or equivalent&lt;/li&gt;
&lt;li&gt;$300 USD credit to the DEV Shop&lt;/li&gt;
&lt;li&gt;MongoDB Swag Pack&lt;/li&gt;
&lt;li&gt;DEV Sticker Pack&lt;/li&gt;
&lt;li&gt;DEV ‚ÄúAtlas Hackathon‚Äù grand prize winner profile badge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Runner-Up Prizes&lt;/strong&gt;&lt;/em&gt; (10 Total):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$250 USD gift card or equivalent&lt;/li&gt;
&lt;li&gt;$150 USD credit to the DEV Shop&lt;/li&gt;
&lt;li&gt;MongoDB Swag Pack&lt;/li&gt;
&lt;li&gt;DEV Sticker Pack&lt;/li&gt;
&lt;li&gt;DEV ‚ÄúAtlas Hackathon‚Äù runner-up profile badge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Participants&lt;/strong&gt;&lt;/em&gt; (with a valid project):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DEV Sticker Pack&lt;/li&gt;
&lt;li&gt;DEV ‚ÄúAtlas Hackathon‚Äù participant profile badge&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#in-order-to-submit-a-valid-project-please-follow-the-submission-process-and-rules-below"&gt;
  &lt;/a&gt;
  In order to submit a valid project, please follow the submission process, and rules below...
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#how-to-submit"&gt;
  &lt;/a&gt;
  How To Submit
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;strong&gt;&lt;a href="https://account.mongodb.com/account/register"&gt;Create a MongoDB account&lt;/a&gt;&lt;/strong&gt; if you don't already have one. &lt;/p&gt;

&lt;p&gt;2)  &lt;strong&gt;Fill out &lt;a href="http://eepurl.com/hPVPqf"&gt;this form&lt;/a&gt;&lt;/strong&gt; to receive a special code for $100 USD worth of MongoDB credits to create your project._&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Note: By filling out the form above, you should receive an email containing your special MongoDB code within one hour. If you don't see it within that timeframe, please check your spam folder.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3) &lt;strong&gt;Select your category&lt;/strong&gt; and refer to &lt;a href="https://docs.mongodb.com/"&gt;MongoDB‚Äôs documentation&lt;/a&gt; for each service used as you build your application&lt;br&gt;
4) &lt;strong&gt;Share your app's code in a repository on GitHub and include a README&lt;/strong&gt;&lt;br&gt;
5) &lt;strong&gt;Ensure that your application's code is licensed&lt;/strong&gt; with the &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache-2 permissive license&lt;/a&gt; &lt;br&gt;
6) &lt;strong&gt;Publish an overview of the app on DEV using &lt;a href="https://dev.to/new/atlashackathon"&gt;this&lt;/a&gt; post template&lt;/strong&gt; between December 13, 2021 - January 13, 2022&lt;br&gt;
&lt;em&gt;Note: You must ensure that you provide your app‚Äôs URL, category, screenshots, a description, and source code in your submission post.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#additional-rules"&gt;
  &lt;/a&gt;
  Additional Rules
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;NO PURCHASE NECESSARY. Open only to 18+. Contest entry period ends January 13, 2022 at 11:59 pm PT. Contest is void where prohibited, or restricted by law or regulation. For Official Rules, see &lt;a href="https://dev.to/page/atlas-hackathon-rules"&gt;Contest Announcement Page&lt;/a&gt; and &lt;a href="https://dev.to/page/official-hackathon-rules"&gt;General Contest Official Rules&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#community-help-and-support"&gt;
  &lt;/a&gt;
  Community Help and Support
&lt;/h4&gt;

&lt;p&gt;Hackathons are all about community and this one is no different! If you need help at any stage in the process of building and submitting your app, please share all questions in the &lt;strong&gt;&lt;a href="https://dev.to/devteam/mongodb-atlas-hackathon-help-thread-3g3a"&gt;MongoDB Atlas Hackathon Help thread&lt;/a&gt;&lt;/strong&gt;. The thread will be monitored by members of the DEV team and MongoDB teams.&lt;/p&gt;

&lt;p&gt;Looking for some motivation or brainstorming? Don't miss the &lt;strong&gt;&lt;a href="https://dev.to/devteam/share-your-mongodb-atlas-hackathon-updates-5g4k"&gt;Community Discussion Thread&lt;/a&gt;&lt;/strong&gt; where you can bounce ideas about your submission off of others, lend or get some encouragement, and share updates about your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-dates-%F0%9F%97%93"&gt;
  &lt;/a&gt;
  Important Dates üóì
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;December 13, 2021: Hackathon Begins!&lt;/li&gt;
&lt;li&gt;January 13, 2022: Hackathon Submission Due at 11:59 PM PST.&lt;/li&gt;
&lt;li&gt;January 20, 2022: Hackathon Winners Announced&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Have fun with this challenge from our friends at MongoDB!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>MongoDB Atlas Hackathon Help Thread</title>
      <author>dev.to staff</author>
      <pubDate>Mon, 13 Dec 2021 19:22:18 +0000</pubDate>
      <link>https://dev.to/devteam/mongodb-atlas-hackathon-help-thread-3g3a</link>
      <guid>https://dev.to/devteam/mongodb-atlas-hackathon-help-thread-3g3a</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you're participating in the &lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m"&gt;MongoDB Atlas Hackathon&lt;/a&gt; and you need some help with your submission, welcome! You are in the right place and we're excited to help.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions about how this contest works (&lt;em&gt;ex: due dates, how to post your submission, picking a category, etc.&lt;/em&gt;) the DEV team will be happy to assist you.&lt;/p&gt;

&lt;p&gt;If you are running into issues or get stuck when it comes to using MongoDB, we will surface all technical questions for the MongoDB team and answer here on their behalf!&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#please-comment-below-if-you-need-asynchronous-assistance-with-the-mongodb-atlas-hackathon"&gt;
  &lt;/a&gt;
  Please comment below if you need asynchronous assistance with the MongoDB Atlas Hackathon ‚ù§Ô∏è
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;P.S. If you'd like to share an update on the progress you're making on your project or if you'd like to connect with other participants, please do so in the &lt;a href="https://dev.to/devteam/share-your-mongodb-atlas-hackathon-updates-5g4k"&gt;community update thread&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>help</category>
    </item>
    <item>
      <title>Share your MongoDB Atlas Hackathon Updates!</title>
      <author>dev.to staff</author>
      <pubDate>Mon, 13 Dec 2021 19:22:11 +0000</pubDate>
      <link>https://dev.to/devteam/share-your-mongodb-atlas-hackathon-updates-5g4k</link>
      <guid>https://dev.to/devteam/share-your-mongodb-atlas-hackathon-updates-5g4k</guid>
      <description>&lt;p&gt;We‚Äôd love to know what you‚Äôre working on for the &lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m"&gt;MongoDB Atlas Hackathon&lt;/a&gt; here on DEV! Fill us in on your project and how things are going below. and how things are going with this exciting challenge. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use this thread to share ideas, gather feedback, and get to know other MongoDB Atlas Hackathon contestants!&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you've just reached a new milestone with your project or if you've just solved a tough problem, we encourage you to publish a standalone post. Just be sure to add the &lt;a href="https://dev.to/t/atlashackathon"&gt;#atlashackathon&lt;/a&gt; tag so all of us can find it on the tag page. &lt;/p&gt;

&lt;p&gt;If you need help with a specific problem, head over to the &lt;a href="https://dev.to/devteam/mongodb-atlas-hackathon-help-thread-3g3a"&gt;help thread&lt;/a&gt; where members of the DEV and MongoDB teams are standing by to assist you.&lt;/p&gt;

&lt;p&gt;Have a great time! We can't wait to meet you and hear all about your submission. &lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Node/ Express/ Pug Engine Web Design ASMR coding.</title>
      <author>Bek Brace</author>
      <pubDate>Mon, 13 Dec 2021 19:11:27 +0000</pubDate>
      <link>https://dev.to/bekbrace/node-express-pug-engine-web-design-asmr-coding-4fnj</link>
      <guid>https://dev.to/bekbrace/node-express-pug-engine-web-design-asmr-coding-4fnj</guid>
      <description>&lt;p&gt;This is a No Talk coding session in my study in Poland on a rainy night with my cup of hot chocolate ‚òï (hot chocolate + coding + Christmas spirit = Joy üòÉ ) &lt;/p&gt;

&lt;p&gt;This is a coding video, where you can chill, have your hot/cold beverage and code along with me this awesome website using three different technologies :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node js&lt;/li&gt;
&lt;li&gt;Express framework&lt;/li&gt;
&lt;li&gt;Pug template engine [ HTML preprocessor ]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just coding quietly on my mechanical keyboard "Razer Ornata V2", and I invite you to join me:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/G0ocy9mkJuQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope you enjoy, guys&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media  
&lt;/h2&gt;

&lt;p&gt;Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B/"&gt;https://www.facebook.com/bekbrace‚Äã‚Äã‚Äã‚Äã/&lt;/a&gt; &lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace/"&gt;https://twitter.com/BekBrace/&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace/%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace/‚Äã‚Äã‚Äã&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com/"&gt;https://bekbrace.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reach out  : &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-used-in-video"&gt;
  &lt;/a&gt;
  Tools used in video:
&lt;/h2&gt;

&lt;p&gt;Microphone used in recording Blue Yeti&lt;br&gt;
To check it out on Amazon : &lt;a href="https://amzn.to/3lh6GdA"&gt;https://amzn.to/3lh6GdA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coding on Razer Ornata V2 keyboard&lt;br&gt;
To check it out on Amazon : &lt;a href="https://amzn.to/3xv3cZZ"&gt;https://amzn.to/3xv3cZZ&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Join this channel to get access to perks:&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg/join"&gt;https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg/join&lt;/a&gt;&lt;br&gt;
OR&lt;br&gt;
Become a Patron: &lt;a href="https://www.patreon.com/bekbrace"&gt;https://www.patreon.com/bekbrace&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Check this out..</title>
      <author>Bryan</author>
      <pubDate>Mon, 13 Dec 2021 18:55:11 +0000</pubDate>
      <link>https://dev.to/bryanellis95/check-this-out-1egb</link>
      <guid>https://dev.to/bryanellis95/check-this-out-1egb</guid>
      <description>&lt;p&gt;Today, at remotestartup.io we are lowering the price per listing from $400 to $99 for 30 days! Tap into our network of jobs and applicants and get your job listed on our site, google and email blasted to our email list!&lt;/p&gt;

&lt;p&gt;check it out today at &lt;a href="//remotestartup.io"&gt;remotestartup.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>career</category>
      <category>watercooler</category>
      <category>management</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (December 13, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Mon, 13 Dec 2021 18:54:29 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-december-13-2021-latest-mongodb-tutorials-events-podcasts-streams-2fa0</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-december-13-2021-latest-mongodb-tutorials-events-podcasts-streams-2fa0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  üëã Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate! &lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;üì¢ This will be the last $weeklyUpdate of 2021! We'll be back after the New Year in 2022. Stay safe, healthy, and happy all! ‚ò∫&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZ6DNTJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d32ymgnn683xjw12uwzo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZ6DNTJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d32ymgnn683xjw12uwzo.jpg" alt="MongoDB World Call for speakers banner" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-call-for-speakers-for-mongodb-world-2022-now-open-%F0%9F%8E%99"&gt;
  &lt;/a&gt;
  üéô Call for Speakers for MongoDB World 2022 Now Open! üéô
&lt;/h2&gt;

&lt;p&gt;MongoDB World is where the world‚Äôs fastest-growing data community comes to connect, explore, and learn. We‚Äôre looking for speakers who can inspire attendees by introducing them to new technologies, ideas, and solutions.&lt;/p&gt;

&lt;p&gt;Whether you want to do a 30 minute conference session, a 75 minutes deep dive tutorial, or a 10 minute lightning talk - we want to hear your talk ideas. If you have a great idea but don‚Äôt feel ready for the stage, we've got you covered! We offer speaker workshops, one-on-one coaching sessions, and more.&lt;br&gt;
Call for speakers closes January 18, 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/world-2022-call-for-speakers"&gt;Submit Your Talk&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  üéì Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mongodb-amp-mongoose-compatibility-and-comparison"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/mongoose-versus-nodejs-driver/"&gt;MongoDB &amp;amp; Mongoose: Compatibility and Comparison&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/KukicAdo"&gt;Ado Kukic&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/stanimiravlaeva"&gt;Stanimira Vlaeva&lt;/a&gt;&lt;br&gt;
In this article, we‚Äôll compare and contrast Mongoose to using the native &lt;a href="https://docs.mongodb.com/drivers/node/current/"&gt;MongoDB Node.js driver&lt;/a&gt; together with &lt;a href="https://docs.mongodb.com/manual/core/schema-validation/"&gt;MongoDB Schema Validation&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#goodbye-nspredicate-hello-realm-swift-query-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-swift-query-api/"&gt;Goodbye NSPredicate, hello Realm Swift Query API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewmorgan"&gt;Andrew Morgan&lt;/a&gt;&lt;br&gt;
In this article, I'm going to show you some examples of how to use the Realm Swift Query API. I'll also show you an example where wrangling with &lt;code&gt;NSPredicate&lt;/code&gt; strings has frustrated me.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-the-atlas-data-api-from-excel-with-power-query"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/quickstart/atlas_data_api_excel_power_query/"&gt;Using the Atlas Data API from Excel with Power Query&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/john-page/"&gt;John Page&lt;/a&gt; &lt;br&gt;
Learn how to use the Power Query functionality in Excel to both fetch raw data, and to push summarization tasks down to MongoDB and retrieve the results.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implement-fulltext-search-over-a-graphql-api-in-atlas"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/implement-full-text-search-graphql-api-atlas/"&gt;Implement Full-Text Search over a GraphQL API in Atlas&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.nraboy.com/"&gt;Nic Raboy&lt;/a&gt; &lt;br&gt;
In this tutorial we're going to see how to create a custom resolver that implements &lt;a href="https://www.mongodb.com/cloud/atlas/lp/search"&gt;Atlas Search&lt;/a&gt; for our GraphQL API using Realm Functions, enabling you to add fast, relevant full-text search to your applications. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#official-mongodb-events-amp-community-events"&gt;
  &lt;/a&gt;
  üìÖ Official MongoDB &lt;a href="https://www.mongodb.com/events"&gt;Events&lt;/a&gt; &amp;amp; &lt;a href="https://live.mongodb.com/events/#/list"&gt;Community Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dec 15 (6pm GMT | Virtual) - &lt;a href="https://www.mongodb.com/webinar/getting-started-with-mongodb-atlas-search"&gt;Getting Started With MongoDB Atlas Search&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  üì∫ MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#introducing-the-mongodb-atlas-data-api-in-preview"&gt;
  &lt;/a&gt;
  Introducing the MongoDB Atlas Data API (in preview)
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/46I0wZiTFi4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Past streams:&lt;br&gt;
&lt;a href="https://youtu.be/h1VSwtWPZbQ"&gt;Chat with Rise In Time Devs - A Massive Multiplayer Strategy Browser Game built with MongoDB!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/Sy3KpTSNZd8"&gt;Deploy a MongoDB Atlas Cluster and Open Commerce in AWS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üçø &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  üéô Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3JjNwmufWxFrRjyOYD9RdK"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 93 - &lt;a href="https://open.spotify.com/episode/2YA2zd3qjtq7MnYber5gpX?si=1005508ae2474c0b"&gt;Swyx - Learn in Public and Temporal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 92 - &lt;a href="https://open.spotify.com/episode/1WWRZa7WCon3cObPfjsKtV?si=27fa1dc0008a4074"&gt;Introducing the MongoDB Atlas Data API with Sumedha Mehta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 91 - &lt;a href="https://open.spotify.com/episode/041SG6u50icEa9KxxI4qZD?si=SXCbIYbuTBWqBMjcv_bG4Q"&gt;Loan Laux - MongoDB and E-Commerce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; üòä)&lt;/p&gt;




&lt;p&gt;üí° These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>swift</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Your Go-To Rails Command Line Cheat Sheet!</title>
      <author>Alex Wentz</author>
      <pubDate>Mon, 13 Dec 2021 18:37:46 +0000</pubDate>
      <link>https://dev.to/fromwentzitcame/your-go-to-rails-command-line-cheat-sheet-1ok7</link>
      <guid>https://dev.to/fromwentzitcame/your-go-to-rails-command-line-cheat-sheet-1ok7</guid>
      <description>&lt;p&gt;I've been learning Rails and working in backend development environments for the last few weeks through my coursework at Flatiron school, and I've found there are some commands used more frequently than others when building out Rails applications.&lt;/p&gt;

&lt;p&gt;I thought it would be beneficial to myself as well as others to create a 'cheat sheet' that lists all the most commonly used commands while learning Rails and developing a backend/full stack skill set. I've broken them down into the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#getting-started"&gt;Getting Started&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#basic"&gt;Basic Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#db"&gt;Db Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generator"&gt;Generator Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# if the gem doesn't yet exist in your ruby application:&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;rails&lt;/span&gt;

&lt;span class="c1"&gt;# generally run first thing, to install all dependencies&lt;/span&gt;
&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;

&lt;span class="c1"&gt;# if you modify your gem file and need to update&lt;/span&gt;
&lt;span class="c1"&gt;# your installed dependencies&lt;/span&gt;
&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;

&lt;span class="c1"&gt;# creates a new rails application in the current&lt;/span&gt;
&lt;span class="c1"&gt;# directory called ingenious_app&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ingenious_app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#basic-commands"&gt;
  &lt;/a&gt;
  Basic Commands &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Some ruby commands can be shortened. If an abbreviated command (or "shortcut alias") exists, it is listed as a comment right below the full command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lists the current version of rails being used&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="c1"&gt;# rails -v&lt;/span&gt;

&lt;span class="c1"&gt;# runs a web server so that you may access the database&lt;/span&gt;
&lt;span class="c1"&gt;# using the default url http://localhost:3000&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="c1"&gt;# rails s&lt;/span&gt;
&lt;span class="c1"&gt;# to exit, use Ctrl-C&lt;/span&gt;

&lt;span class="c1"&gt;# opens a console session to play/work with the data,&lt;/span&gt;
&lt;span class="c1"&gt;# test various ideas, check your work, etc.&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;
&lt;span class="c1"&gt;# rails c&lt;/span&gt;
&lt;span class="c1"&gt;# to exit, use Ctrl-D&lt;/span&gt;

&lt;span class="c1"&gt;# lists all active routes that exist in the rails application&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;

&lt;span class="c1"&gt;# generates new code for you - more on this command in a bit&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;
&lt;span class="c1"&gt;# rails g&lt;/span&gt;

&lt;span class="c1"&gt;# produces an abbreviated list of available commands,&lt;/span&gt;
&lt;span class="c1"&gt;# most lack any description&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;

&lt;span class="c1"&gt;# add -h to any command to learn more about possible options&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="c1"&gt;# example:&lt;/span&gt;
&lt;span class="c1"&gt;# rails generate -h&lt;/span&gt;

&lt;span class="c1"&gt;# produces a detailed list of available commands&lt;/span&gt;
&lt;span class="c1"&gt;# with descriptions&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#database-db-commands"&gt;
  &lt;/a&gt;
  Database (db) Commands &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# creates the database for the current environment (ex: development)&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;

&lt;span class="c1"&gt;# deletes the database for the current environment&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:drop&lt;/span&gt;

&lt;span class="c1"&gt;# runs any pending migrations for the current environment&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:migrate&lt;/span&gt;

&lt;span class="c1"&gt;# checks the status of all migrations (up, down, or pending)&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:migrate:status&lt;/span&gt;

&lt;span class="c1"&gt;# rolls back (undo) the most recent migration&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:rollback&lt;/span&gt;

&lt;span class="c1"&gt;# runs the db/seed.rb file, thereby seeding the database&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:seed&lt;/span&gt;

&lt;span class="c1"&gt;# truncates all tables in the current database and re-runs the seed file (empties the database, replaces with seed data)&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:seed:replant&lt;/span&gt;

&lt;span class="c1"&gt;# runs multiple commands, namely db:drop and db:setup; resets the database by deleting the database, loading the current schema into the current environment database, and then running the seed file&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:reset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generator-commands"&gt;
  &lt;/a&gt;
  Generator Commands &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Generators were mentioned above in the basic commands section, but due to the robust nature of generators, they merit their own section. For these commands, it will be easier to explain using an example. We'll work with a Users model that requires a name and an age.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# generates a User model where relationships,&lt;/span&gt;
&lt;span class="c1"&gt;# custom methods, and validations can be defined.&lt;/span&gt;
&lt;span class="c1"&gt;# Specify desired columns and their data types. A column's&lt;/span&gt;
&lt;span class="c1"&gt;# data type defaults to string unless otherwise specified&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="ss"&gt;:integer&lt;/span&gt;

&lt;span class="c1"&gt;# creates the following User model&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# as well as the following migration file that creates&lt;/span&gt;
&lt;span class="c1"&gt;# the Users table with columns for name and age.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
        &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;integer&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;

            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generates a UsersController where CRUD route methods&lt;/span&gt;
&lt;span class="c1"&gt;# and supporting private methods are defined&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;

&lt;span class="c1"&gt;# Any methods you list after the controllers name pre-build&lt;/span&gt;
&lt;span class="c1"&gt;# them for you. The above creates the following:&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The following command relies on having the active_model_serializers gem installed. Serializers allow you to define what data gets generated in a JSON using attributes and relationships.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generates a UserSerializer&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

&lt;span class="c1"&gt;# creates the following:&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
    &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# creates a migration file that will need filling in&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;migration&lt;/span&gt; &lt;span class="n"&gt;create_users&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="ss"&gt;:integer&lt;/span&gt;

&lt;span class="c1"&gt;# creates the following migration;&lt;/span&gt;
&lt;span class="c1"&gt;# note that including columns does nothing:&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want something that does (almost) everything? Resource is the command you want!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# creates a migration with create_table and columns&lt;/span&gt;
&lt;span class="c1"&gt;# defined, the users controller, the user model,&lt;/span&gt;
&lt;span class="c1"&gt;# AND the user serializer. Woah!&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="ss"&gt;:integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#seeking-reader-input"&gt;
  &lt;/a&gt;
  Seeking Reader Input
&lt;/h3&gt;

&lt;p&gt;Is this cheat sheet missing anything you think should be included? Share out in the discussion below and I'll modify this post as needed!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>database</category>
    </item>
    <item>
      <title>The Complete Guide to Adding AWS Resources to Your Amplify Project </title>
      <author>Michael Liendo</author>
      <pubDate>Mon, 13 Dec 2021 18:03:24 +0000</pubDate>
      <link>https://dev.to/mtliendo/the-complete-guide-to-adding-aws-resources-to-your-amplify-project-4mnf</link>
      <guid>https://dev.to/mtliendo/the-complete-guide-to-adding-aws-resources-to-your-amplify-project-4mnf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlY6M4Uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638891565224/1Xa3SzL8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlY6M4Uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638891565224/1Xa3SzL8f.png" alt="image.png" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During  &lt;a href="https://www.youtube.com/watch?v=8_Xs8Ik0h1w"&gt;Dr. Werner Vogel's re:Invent keynote&lt;/a&gt;, the point was made that AWS has a ton of services--each one designed to solve a customer pain point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.amplify.aws"&gt;AWS Amplify&lt;/a&gt; composes some of those services together to create a framework designed for today's professional frontend developer. These services can be added with a CLI command. For example, to add a GraphQL API or REST API, one would type.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amplify add api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We at Amplify integrate core services needed to build production apps, but the reality is that today's applications need a wide variety of services. One initial solution, was to put all 175+ services in the CLI üòÖ&lt;/p&gt;

&lt;p&gt;I'm happy to say we have a better way:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amplify add custom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will scaffold out files using  &lt;a href="https://aws.amazon.com/cdk/"&gt;AWS Cloud Development Kit&lt;/a&gt; (CDK) or AWS CloudFormation.  You can then use this stack to add whatever services you like. In this post, we'll walk through what that experience is like so you can feel comfortable adding any AWS resource to your next project,  not just &lt;a href="https://docs.amplify.aws/cli/"&gt;the ones offered directly through the CLI&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-custom-resource"&gt;
  &lt;/a&gt;
  Adding a custom resource
&lt;/h2&gt;

&lt;p&gt;As mentioned, both CDK and CloudFormation are supported, but my opinion is that most frontend developers will enjoy writing TypeScript to generate their infrastructure, so that's what we'll be using in this post. &lt;/p&gt;

&lt;p&gt;After running &lt;code&gt;amplify add custom&lt;/code&gt; and following the prompts, Amplify will generate our CDK stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgBsRoBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638978503725/PiK4HVO8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgBsRoBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638978503725/PiK4HVO8l.png" alt="CLI output where a user has confirmed they are using CDK and selected yes to the prompts" width="880" height="229"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've worked in CDK with TypeScript before, you should feel right at home since the generated files are very similar to what you would get when running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key differences is that we include a few more examples for folks to get started, and a few Amplify helpers to easily connect Amplify with your CDK backend.&lt;/p&gt;

&lt;p&gt;After deleting the commented examples for now, the following screenshot is what is left:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIwIBXzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638979030116/MHwL2vG6lN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIwIBXzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638979030116/MHwL2vG6lN.png" alt="a CDK stack that is very similar to what is generated when running cdk init" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-sns-topic-and-sqs"&gt;
  &lt;/a&gt;
  Adding an SNS Topic and SQS
&lt;/h2&gt;

&lt;p&gt;Let's say you wanted to &lt;a href="https://blog.focusotter.com/send-an-sms-to-customers-using-react-and-aws-amplify"&gt;send a text message to a group of interested individuals&lt;/a&gt;. To avoid bottling up the downstream service, we'll also add an SQS Queue so messages can be picked up in batches.&lt;/p&gt;

&lt;p&gt;This scenario is exactly what we provide out of the box as one of our commented out examples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UE1m0UJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638981331864/h-hf6IhVl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UE1m0UJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638981331864/h-hf6IhVl.png" alt="An SNS Topic and SQS queue being created and added together in a CDK project from Amplify" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that any resource that you see in the  &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/"&gt;CDK docs&lt;/a&gt; is fair game to be added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-amplify-helpers"&gt;
  &lt;/a&gt;
  Understanding Amplify helpers
&lt;/h2&gt;

&lt;p&gt;Now that we understand how resources can be added, let's look at some of the extra benefits Amplify provides.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AmplifyHelpers&lt;/strong&gt;: We automatically install a package called &lt;code&gt;@aws-amplify/cli-extensibility-helper&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This currently contains two methods: &lt;code&gt;getProjectInfo&lt;/code&gt; and &lt;code&gt;addResourceDependency&lt;/code&gt;. We'll chat about adding resources dependencies in a bit, but let's first explore the available project info.&lt;/p&gt;

&lt;p&gt;Calling this method currently provides two properties: &lt;code&gt;envName&lt;/code&gt; and &lt;code&gt;projectName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---lDUzeyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638984433953/pOlzlAf3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---lDUzeyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638984433953/pOlzlAf3r.png" alt="envName and projectName being show via intellisense" width="880" height="143"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;envName&lt;/code&gt; corresponds to the current Amplify environment. By default, this is &lt;code&gt;dev&lt;/code&gt;, though by running &lt;code&gt;amplify env add &amp;lt;envName&amp;gt;&lt;/code&gt; &lt;a href="https://docs.amplify.aws/cli/teams/overview/"&gt;users can add branches to their backends&lt;/a&gt; , much like when working in git.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üö®Due to the lifecycle of when the environment name gets populated, the &lt;code&gt;envName&lt;/code&gt; here is to be used for conditional checks only, not for naming resources:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AmplifyHelpers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getProjectInfo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;envName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prod&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create an IAM role to allow access to a prod account&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, the &lt;code&gt;projectName&lt;/code&gt; is the name specified in the CLI when first running &lt;code&gt;amplify add custom&lt;/code&gt; (see the first screenshot). As we saw when we created our resources, this is great for project organization:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7WfqN5z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638985245133/RVgGjxJqV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WfqN5z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638985245133/RVgGjxJqV.png" alt="resource naming with the correct Amplify environment" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üóíÔ∏èNote that the above screenshot also shows the correct way to pull in the Amplify environment when naming resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#working-with-amplify-generated-resources"&gt;
  &lt;/a&gt;
  Working with Amplify generated resources
&lt;/h2&gt;

&lt;p&gt;In addition to &lt;code&gt;AmplifyHelpers.getProjectInfo()&lt;/code&gt;, let's look at &lt;code&gt;AmplifyHelpers.addResourceDependency()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This method will bring in resources that we generated with the Amplify CLI. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üóíÔ∏è It's worth noting that when running &lt;code&gt;amplify add custom&lt;/code&gt;, example 3 of the commented boilerplate code provides this function by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because we're in TypeScript, our &lt;code&gt;retVal&lt;/code&gt; variable is already typed to reference our Amplify resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5-hXkLAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638988680956/ooaE55wfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-hXkLAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638988680956/ooaE55wfl.png" alt="amplify resources typed objects" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If by chance you just pushed up some resources and aren't seeing values like &lt;code&gt;Arn&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt;, running &lt;code&gt;amplify build&lt;/code&gt; will regenerate this file.&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;addResourceDependency&lt;/code&gt; function, we can specify which of our Amplify resources we would like access to by passing in an array, where each object in it has a &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;resourceName&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;Keep in mind that what we have so far is a type representation of what we need (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc). So from here, we can use a CDK helper method to extract the actual value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authArn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amplifystripestarter9420c337&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UserPoolArn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AUPEfcmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638989231513/lnQF7hGWR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUPEfcmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638989231513/lnQF7hGWR.png" alt="complete flow of adding resources and extracting their values" width="880" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-custom-stacks-in-lambda"&gt;
  &lt;/a&gt;
  Accessing custom stacks in Lambda
&lt;/h2&gt;

&lt;p&gt;To look at the other side of the fence, suppose we ran &lt;code&gt;amplify push&lt;/code&gt; and deployed our custom stack. Then we add a Lambda via &lt;code&gt;amplify add function&lt;/code&gt; to our project. In this case, we also need to grant access for our Lambda to call SNS.&lt;/p&gt;

&lt;p&gt;To accomplish this, we can take advantage of the &lt;code&gt;custom-policies.json&lt;/code&gt; file that we now generate with every Lambda created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SNS:Publish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arn:aws:sns:*:*:mySNSTopic-${env}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we support wildcards for the region and account number. Additionally, we interpolate the Amplify environment by using the &lt;code&gt;${env}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this example, we took a peek at how to subscribe an SQS Queue to an SNS Topic, but the learnings went far beyond that. By adding custom resources with the CDK, pulling in existing resources created with the Amplify CLI, and updating policies so Lambda functions have permissions to call our external resources, users now have the ability to create truly rich applications while minimizing time spent in the AWS Console.&lt;/p&gt;

&lt;p&gt;This is just one of aspects of Amplify's new extensibility releases. For a rundown of all the new enhancements and a glimpse into the posts I'll be releasing, checkout my blog post over on A Cloud Guru that covers  &lt;a href="https://acloudguru.com/blog/engineering/5-new-amplify-features-to-take-your-app-to-any-scale"&gt;5 new Amplify features to take your app to any scale&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Go Channel Patterns - Fan Out  Semaphore</title>
      <author>b0r</author>
      <pubDate>Mon, 13 Dec 2021 18:02:17 +0000</pubDate>
      <link>https://dev.to/b0r/go-concurrency-patterns-fan-out-semaphore-1ojf</link>
      <guid>https://dev.to/b0r/go-concurrency-patterns-fan-out-semaphore-1ojf</guid>
      <description>&lt;p&gt;To improve my Go Programming skills and become a better Go engineer, I have recently purchased an excellent on-demand education from &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt;. Materials are created by an expert Go engineer, &lt;a href="https://twitter.com/goinggodotnet"&gt;Bill Kennedy&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fxHctJEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1108810000967892996/q5NMxGBG_normal.png" alt="Ardan Labs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ardan Labs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @ardanlabs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üéôÔ∏èWelcome &lt;a href="https://twitter.com/MGallagher2010"&gt;@MGallagher2010&lt;/a&gt; to the podcast! üéôÔ∏è&lt;br&gt;&lt;br&gt;Engineers often have a negative impression of recruiters but sometimes you find a special person like Martin. As a specialist in &lt;a href="https://twitter.com/hashtag/golang"&gt;#golang&lt;/a&gt;, Martin is dedicated to finding the best opportunity for you &amp;amp; your family üòä
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:01 PM - 08 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1468657044907515910" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1468657044907515910" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1468657044907515910" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I have decide to record my process of learning how to write more idiomatic code, following Go best practices and design philosophies. &lt;/p&gt;

&lt;p&gt;This series of posts will describe channel patterns used for orchestration/signaling in Go via goroutines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fan-out-semaphore-pattern"&gt;
  &lt;/a&gt;
  Fan Out Semaphore Pattern
&lt;/h2&gt;

&lt;p&gt;The main idea behind &lt;strong&gt;Fan Out Semaphore Pattern&lt;/strong&gt; is to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;everything we had in the &lt;strong&gt;Fan Out Pattern&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a buffered channel that provides a signaling semantics &lt;/li&gt;
&lt;li&gt;a goroutine that starts multiple (child) goroutines to do some work&lt;/li&gt;
&lt;li&gt;a multiple (child) goroutines that do some work and use signaling channel to signal the work is done&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;PLUS&lt;/strong&gt; the addition of a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new &lt;strong&gt;semaphore channel&lt;/strong&gt; used to restrict the number of child goroutines that can be schedule to run&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSBm7yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75veyea6p6vynzpc3zse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSBm7yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75veyea6p6vynzpc3zse.png" alt="Fan Out Pattern" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;Fan Out Pattern&lt;/strong&gt; we have multiple &lt;code&gt;employees&lt;/code&gt; that have some work to do. &lt;/p&gt;

&lt;p&gt;We also have a &lt;code&gt;manager&lt;/code&gt; (&lt;code&gt;main&lt;/code&gt; goroutine) that waits on that work to be done. Once each &lt;code&gt;employee&lt;/code&gt; work is done, &lt;code&gt;employee&lt;/code&gt; notifies &lt;code&gt;manager&lt;/code&gt; by sending a signal (&lt;code&gt;paper&lt;/code&gt;) via communication channel &lt;code&gt;ch&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Fan Out Semaphore Pattern&lt;/strong&gt; we have an additional constraint in terms of maximum number of &lt;code&gt;employees&lt;/code&gt; that can do work at any given moment. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h4&gt;

&lt;p&gt;For example, we have 100 employees, but only 10 available free seats in the office space. It doesn't matter that 100 employees are available to do the work when we only have adequate space for 10 employees at any given moment. Other 90 employees have to wait until on of those 10 finish the work and frees the seat.&lt;/p&gt;

&lt;p&gt;Good use case for this pattern would be batch processing, where we have some amount of work to do, but we want to limit the number of active executors at any given moment.&lt;/p&gt;

&lt;p&gt;Feel free to try the example on &lt;a href="https://play.golang.com/p/znS2WqIrWeG"&gt;Go Playground&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;emps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="c"&gt;// buffered channel, one slot for every goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// send side can complete without receive (non-blocking)&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// max number of RUNNING goroutines at any given time&lt;/span&gt;
    &lt;span class="c"&gt;// g := runtime.NumCPU()&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="c"&gt;// buffered channel, based on the max number of the goroutines in RUNNING state&lt;/span&gt;
    &lt;span class="c"&gt;// added to CONTROL the number of goroutines in RUNNING state&lt;/span&gt;
    &lt;span class="n"&gt;sem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// create 10 goroutines in the RUNNABLE state&lt;/span&gt;
        &lt;span class="c"&gt;// one for each employee&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="c"&gt;// when goroutine moves from RUNNABLE to RUNNING state&lt;/span&gt;
            &lt;span class="c"&gt;// send signal/value inside a `sem` channel&lt;/span&gt;
            &lt;span class="c"&gt;// if `sem` channel buffer is full, this will block&lt;/span&gt;
            &lt;span class="c"&gt;// e.g. employee takes a seat&lt;/span&gt;
            &lt;span class="n"&gt;sem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// simulate the idea of unknown latency (do not use in production)&lt;/span&gt;
                &lt;span class="c"&gt;// e.g. employee does some work&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c"&gt;// once work is done, signal on ch channel&lt;/span&gt;
                &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;"paper"&lt;/span&gt;
                &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"employee : sent signal : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c"&gt;// once all work is done pull the value from the `sem` channel&lt;/span&gt;
            &lt;span class="c"&gt;// give place to another goroutine to do the work&lt;/span&gt;
            &lt;span class="c"&gt;// e.g. employee stands up and free up seat for another employee&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;
        &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// wait for all employee work to be done&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// receive signal sent from the employee&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;

        &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : received signal : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go

employee : sent signal :  9
paper
manager : received signal :  9
employee : sent signal :  4
paper
manager : received signal :  8
employee : sent signal :  1
paper
manager : received signal :  7
employee : sent signal :  2
paper
manager : received signal :  6
employee : sent signal :  3
paper
manager : received signal :  5
employee : sent signal :  8
paper
manager : received signal :  4
employee : sent signal :  6
paper
manager : received signal :  3
employee : sent signal :  5
paper
manager : received signal :  2
employee : sent signal :  0
paper
manager : received signal :  1
employee : sent signal :  7
paper
manager : received signal :  0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, fan out semaphore channel pattern was described. In addition, simple implementation was provided.&lt;/p&gt;

&lt;p&gt;Readers are encouraged to check out excellent &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education materials to learn more.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.ardanlabs.com/"&gt;Ardan Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pexels.com/photo/radio-telescope-against-sky-with-stars-6325001/"&gt;Cover image by Igor Mashkov from Pexels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://habr.com/ru/company/ua-hosting/blog/490750/"&gt;Fan out picture&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>‚≠êÔ∏è CodeCast's Coding Advent: Day Thirteen ‚≠êÔ∏è</title>
      <author>CodeCast</author>
      <pubDate>Mon, 13 Dec 2021 17:50:42 +0000</pubDate>
      <link>https://dev.to/codecast/codecasts-coding-advent-day-thirteen-4ej6</link>
      <guid>https://dev.to/codecast/codecasts-coding-advent-day-thirteen-4ej6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMn4xQnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ogyhoh5ynwf6dpkxg50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMn4xQnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ogyhoh5ynwf6dpkxg50.png" alt="Day 13" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-13"&gt;
  &lt;/a&gt;
  DAY 13
&lt;/h2&gt;

&lt;p&gt;In continuing with GSAP animations, today we're featuring a Cast from our own designer, Adam Lin! He goes over creating a simple scroll animation using Greensock's GSAP's ScrollTrigger Plugin!&lt;/p&gt;

&lt;p&gt;Check it out here: &lt;a href="https://www.codecast.io/casts/odgQxxW3QxnM-how-to-start-your-1st-gsap-scroll-animation"&gt;https://www.codecast.io/casts/odgQxxW3QxnM-how-to-start-your-1st-gsap-scroll-animation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also be sure to follow us on &lt;a href="https://www.instagram.com/codecastapp/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://twitter.com/CodeCastApp"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/codecastapp"&gt;Facebook&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/company/code-cast/"&gt;LinkedIn&lt;/a&gt; to see our daily advent releases there!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>ü§∂üèª CodeCast's Coding Advent: Day Ten ü§∂üèª</title>
      <author>CodeCast</author>
      <pubDate>Mon, 13 Dec 2021 17:50:21 +0000</pubDate>
      <link>https://dev.to/codecast/codecasts-coding-advent-day-ten-4kk7</link>
      <guid>https://dev.to/codecast/codecasts-coding-advent-day-ten-4kk7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EY-95D_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz60mpjmbn7ua5knd0t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EY-95D_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz60mpjmbn7ua5knd0t4.png" alt="Day 10" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-10"&gt;
  &lt;/a&gt;
  DAY 10
&lt;/h2&gt;

&lt;p&gt;We talk about portfolio building and interview-prep a lot here at CodeCast and are excited to share that &lt;a href="//hankerrank.com"&gt;Hackerrank&lt;/a&gt; has an entire interview prep kit &lt;a href="https://www.hackerrank.com/interview/preparation-kits/one-week-preparation-kit/one-week-day-one/challenges"&gt;for free on their website&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;You can also be sure to follow us on &lt;a href="https://www.instagram.com/codecastapp/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://twitter.com/CodeCastApp"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/codecastapp"&gt;Facebook&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/company/code-cast/"&gt;LinkedIn&lt;/a&gt; to see our daily advent releases there!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>NodeJS - version 2.7 of Foal framework is here üéâ</title>
      <author>Lo√Øc Poullain</author>
      <pubDate>Mon, 13 Dec 2021 17:48:30 +0000</pubDate>
      <link>https://dev.to/loicpoullain/foalts-version-27-is-here-5b37</link>
      <guid>https://dev.to/loicpoullain/foalts-version-27-is-here-5b37</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5UPsYWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/banner-190c7b228be95a70c374e2baada10395.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5UPsYWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/banner-190c7b228be95a70c374e2baada10395.png" alt="Banner" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Version 2.7 of &lt;a href="https://foalts.org"&gt;Foal&lt;/a&gt; has been released! Here are the improvements that it brings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-body-of-raw-httpresponse-endraw-can-be-typed"&gt;
  &lt;/a&gt;
  The body of &lt;code&gt;HttpResponse&lt;/code&gt; can be typed
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;HttpResponse&lt;/code&gt; class becomes generic so as to enforce the type of its &lt;code&gt;body&lt;/code&gt; property if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../entities&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;HttpResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It also allows you to infer the type of the body in your tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3yZX-ZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/generic-http-response-e03d9894b29b2a8389cc7edd29c24e7b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3yZX-ZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/generic-http-response-e03d9894b29b2a8389cc7edd29c24e7b.png" alt="Generic HttpResponse" width="880" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support-for-signed-cookies"&gt;
  &lt;/a&gt;
  Support for signed cookies
&lt;/h2&gt;

&lt;p&gt;Starting from this version, you can sign cookies and read them through the &lt;code&gt;signedCookies&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cookie1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signedCookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-cookie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In order to use signed cookies, you must provide a secret with the configuration key &lt;code&gt;settings.cookieParser.secret&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#environment-name-can-be-provided-via-raw-nodeenv-endraw-or-raw-foalenv-endraw-"&gt;
  &lt;/a&gt;
  Environment name can be provided via &lt;code&gt;NODE_ENV&lt;/code&gt; or &lt;code&gt;FOAL_ENV&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Version 2.7 allows to you to specify the environment name (production, development, etc) with the &lt;code&gt;FOAL_ENV&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;This can be useful if you have third party libraries whose behavior also depends on the value of &lt;code&gt;NODE_ENV&lt;/code&gt; (see &lt;a href="https://github.com/FoalTS/foal/issues/1004"&gt;Github issue here&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-foal-generate-entity-endraw-and-raw-foal-generate-hook-endraw-support-subdirectories"&gt;
  &lt;/a&gt;
  &lt;code&gt;foal generate entity&lt;/code&gt; and &lt;code&gt;foal generate hook&lt;/code&gt; support sub-directories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#example-with-entities-models"&gt;
  &lt;/a&gt;
  Example with entities (models)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;foal g entity user
foal g entity business/product
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
 '- app/
  '- entities/
   |- business/
   | |- product.entity.ts
   | '- index.ts
   |- user.entity.ts
   '- index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-with-hooks"&gt;
  &lt;/a&gt;
  Example with hooks
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;foal g hook log
foal g hook auth/admin-required
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
 '- app/
  '- hooks/
   |- auth/
   | |- admin-required.hook.ts
   | '- index.ts
   |- log.hook.ts
   '- index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#new-raw-afterpremiddlewares-endraw-option-in-raw-createapp-endraw-"&gt;
  &lt;/a&gt;
  New &lt;code&gt;afterPreMiddlewares&lt;/code&gt; option in &lt;code&gt;createApp&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It is now possible to run a custom middleware after all internal Express middlewares of the framework.&lt;/p&gt;

&lt;p&gt;This can be useful in rare situations, for example when using the &lt;a href="https://mikro-orm.io/docs/identity-map/#-requestcontext-helper-for-di-containers"&gt;RequestContext helper&lt;/a&gt; in Mikro-ORM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;afterPreMiddlewares&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contributors"&gt;
  &lt;/a&gt;
  Contributors
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MCluck90"&gt;@MCluck90&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kingdun3284"&gt;@kingdun3284&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
