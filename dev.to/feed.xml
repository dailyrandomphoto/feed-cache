<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>2 Ways to Implement Binding Adapters</title>
      <author>Vincent T</author>
      <pubDate>Fri, 26 Nov 2021 22:32:11 +0000</pubDate>
      <link>https://dev.to/vtsen/2-ways-to-implement-binding-adapters-4omc</link>
      <guid>https://dev.to/vtsen/2-ways-to-implement-binding-adapters-4omc</guid>
      <description>&lt;p&gt;&lt;strong&gt;One way is using function parameter and another way is using extension function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There could be more than 2 ways to implement binding adapters, but this is what I know. Let's look at what binding adapters are first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-binding-adapters"&gt;
  &lt;/a&gt;
  What is Binding Adapters?
&lt;/h2&gt;

&lt;p&gt;Binding adapter is used for &lt;strong&gt;implementing custom attribute&lt;/strong&gt; in your layout file. For example, instead of using the default&lt;code&gt;android:text&lt;/code&gt; attribute, you want to customize it by creating a new attribute &lt;code&gt;app:customText&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-attribute-raw-androidtext-endraw-"&gt;
  &lt;/a&gt;
  Default Attribute - &lt;code&gt;android:text&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;TextView
    android:id="@+id/textView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hello World!"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-attribute-raw-appcustomtext-endraw-"&gt;
  &lt;/a&gt;
  Custom Attribute - &lt;code&gt;app:customText&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;TextView
    android:id="@+id/textView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    app:customText="@{`Hello World!`}"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To implement custom attribute, we use binding adapters. Binding adapter is part of the data binding library. So you need to include the following in your &lt;code&gt;build.gradle&lt;/code&gt; module file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;android {
    ...
    buildFeatures {
        dataBinding true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To implement a binding adapter, you need to annotate the function with &lt;code&gt;@BindingAdapter("attribute name here")&lt;/code&gt; together with &lt;code&gt;View&lt;/code&gt; class that you want to bind to. It can be done by passing the &lt;code&gt;View&lt;/code&gt; class (e.g. &lt;code&gt;TextView&lt;/code&gt;) as a function parameter or using the extension function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-pass-raw-view-endraw-as-function-parameter"&gt;
  &lt;/a&gt;
  1.  Pass &lt;code&gt;View&lt;/code&gt; as Function Parameter
&lt;/h2&gt;

&lt;p&gt;I am not sure if this is a standard way (or maybe a recommended way?) but this is in the official documentation. What I learned initially is the second method below (i.e. using the extension function)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@BindingAdapter("customText")
fun setCustomText(view:TextView, item: String) {
    view.text = "My Custom String: $item"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-use-raw-view-endraw-extension-function"&gt;
  &lt;/a&gt;
  2. Use &lt;code&gt;View&lt;/code&gt; Extension Function
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@BindingAdapter("customText")
fun TextView.setCustomText(item: String) {
    text = "My Custom String: $item"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because this is an extension function, you can call it in code directly like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;binding.textView.setCustomText("Hello World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do that with the first method too, but the second method is more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personally"&gt;
  &lt;/a&gt;
  Personally
&lt;/h2&gt;

&lt;p&gt;I prefer the second method, use the extension function to implement binding adapter. It reflects the actual intention, which is to extend the&lt;code&gt;TextView&lt;/code&gt; functionality.&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://vtsen.hashnode.dev/2-ways-to-implement-binding-adapters"&gt;https://vtsen.hashnode.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>android</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Auto-fixable import sorting rules for ESLint</title>
      <author>Bartłomiej Stefański</author>
      <pubDate>Fri, 26 Nov 2021 22:29:58 +0000</pubDate>
      <link>https://dev.to/bmstefanski/auto-fixable-import-sorting-rules-for-eslint-laj</link>
      <guid>https://dev.to/bmstefanski/auto-fixable-import-sorting-rules-for-eslint-laj</guid>
      <description>&lt;p&gt;The pretty much standard way of sorting imports in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3rd party imports first&lt;/li&gt;
&lt;li&gt;then local default exports&lt;/li&gt;
&lt;li&gt;and then local exports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here's the snippet that sorts them in this exact order and &lt;br&gt;
satisfies my needs completely!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint-plugin-import  

&lt;span class="c"&gt;# or    &lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; eslint-plugin-import
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .eslintrc.js  &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ignoredSortingDirectories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.git&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.vscode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node_modules&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="c1"&gt;/// ... some other configurations  &lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c1"&gt;// ... your rules  &lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sort-imports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ignoreCase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ignoreDeclarationSort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;  
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import/order&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
      &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
      &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;external&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;builtin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sibling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;parent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  
        &lt;span class="na"&gt;pathGroups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;getDirectoriesToSort&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;singleDir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;singleDir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/**`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;after&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  
        &lt;span class="p"&gt;],&lt;/span&gt;  
        &lt;span class="na"&gt;pathGroupsExcludedImportTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  
        &lt;span class="na"&gt;alphabetize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
          &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
          &lt;span class="na"&gt;caseInsensitive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="p"&gt;},&lt;/span&gt;  
      &lt;span class="p"&gt;},&lt;/span&gt;  
    &lt;span class="p"&gt;],&lt;/span&gt;  
    &lt;span class="c1"&gt;// ... your rules  &lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDirectoriesToSort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getDirectories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ignoredSortingDirectories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDirectories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;isDirectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
  &lt;span class="p"&gt;})&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Four tips for staying motivated while learning</title>
      <author>Zach Snoek</author>
      <pubDate>Fri, 26 Nov 2021 22:11:40 +0000</pubDate>
      <link>https://dev.to/zachsnoek/four-tips-for-staying-motivated-while-learning-473e</link>
      <guid>https://dev.to/zachsnoek/four-tips-for-staying-motivated-while-learning-473e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Software engineering is a field that is regularly changing. Thus, developers must be continual learners to stay sharp.&lt;/p&gt;

&lt;p&gt;However, motivating yourself to learn and creating a lasting habit can be difficult, especially if you're self-studying outside of school or work.  Below are four techniques that I use to stay motivated while learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-reference"&gt;
  &lt;/a&gt;
  Quick reference
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Set deadlines&lt;/li&gt;
&lt;li&gt;Gamify&lt;/li&gt;
&lt;li&gt;Spice it up&lt;/li&gt;
&lt;li&gt;Identify the end goal&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-set-deadlines"&gt;
  &lt;/a&gt;
  1. Set deadlines
&lt;/h2&gt;

&lt;p&gt;Learning without structure can feel like an endless task with no end in sight; it's often nice to have a sense of progress. I've found that artificial deadlines give me something to work toward and cleanly mark progress.&lt;/p&gt;

&lt;p&gt;Here are some examples of deadlines you could set for yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I will study Python for 30 minutes by the end of the day&lt;/li&gt;
&lt;li&gt;I will complete one module of my online JavaScript course by Friday every week&lt;/li&gt;
&lt;li&gt;I will finish two projects by the end of the month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to create manageable deadlines; experiment until you find something right for you. You may want to try a large interval at first and narrow it down until you find the sweet spot.&lt;/p&gt;

&lt;p&gt;For example, when I first started blogging, I wanted to publish bi-weekly. I quickly realized that writing and researching a quality post in two weeks wasn't possible for me, so I changed to a monthly schedule.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-gamify"&gt;
  &lt;/a&gt;
  2. Gamify
&lt;/h2&gt;

&lt;p&gt;Deadlines aren't for everyone: you might have better luck incentivizing yourself through gamification.&lt;/p&gt;

&lt;p&gt;For instance, you could implement a basic point system in which you earn a point every day you study SQL. You can use 14 points to treat yourself to a small meal or pay yourself five dollars. Or, you could reward yourself some other way when you've done something five consecutive days.&lt;/p&gt;

&lt;p&gt;I find the most motivation from the &lt;a href="https://lifehacker.com/jerry-seinfelds-productivity-secret-281626"&gt;Seinfeld method&lt;/a&gt;. The idea is that every day you do something––learning in some way, in our case––you put a red X through the day on a calendar. The more days you add X's, the longer the chain of X's gets; your goal is to "not break the chain." This method is essentially point-earning and provides an incentive for showing up consistently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-spice-it-up"&gt;
  &lt;/a&gt;
  3. Spice it up
&lt;/h2&gt;

&lt;p&gt;I've found it helpful to vary how I study the material. I find that learning through one medium can be tiring after a while. Temporarily switching the medium motivates me to keep learning.&lt;/p&gt;

&lt;p&gt;If I'm learning one topic, I find a preferred, primary medium for studying it––typically text. I'll then augment this material with other media such as YouTube videos and podcasts.&lt;/p&gt;

&lt;p&gt;For example, if I'm learning about prototypes in JavaScript, I'll spend most of my time reading Mozilla documentation or other articles. When I've absorbed that material, I'll watch various YouTube videos about prototypes and then try to write code and build something that uses them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-identify-the-end-goal"&gt;
  &lt;/a&gt;
  4. Identify the end goal
&lt;/h2&gt;

&lt;p&gt;Finally, learn with a clear goal in mind, and use this goal to remind yourself why you're learning.&lt;/p&gt;

&lt;p&gt;Why are you learning? Maybe you're preparing for a career change that will boost your income. Or perhaps you're &lt;a href="https://www.swyx.io/learn-in-public/"&gt;learning in public&lt;/a&gt; to help others and gain credibility. (Upward mobility has been a good impetus for me.)&lt;/p&gt;

&lt;p&gt;Remind yourself of this goal frequently: write it down on a sticky note attached to your computer or set a reminder on your phone; whatever is visible to you.&lt;/p&gt;

&lt;p&gt;Most importantly, find a goal that motivates you when you're the most unmotivated. A resilient objective can carry you through the periods when you'd rather watch Netflix or stop learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;All of these methods might not work for you, but hopefully, you've been able to pick up something helpful. Let me know in the comments if there's a motivation technique you use that I missed!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this post, connect with me on &lt;a href="https://www.linkedin.com/in/zach-snoek-5b327b179/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/zachsnoek"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://twitter.com/zach_snoek"&gt;Twitter&lt;/a&gt;! You can also &lt;a href="https://mailchi.mp/2df4b6d5458f/signup-page"&gt;subscribe to my mailing list&lt;/a&gt; and get the latest content and news from me.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>What to charge for your app and what’s the value of it?</title>
      <author>Appmaster.io</author>
      <pubDate>Fri, 26 Nov 2021 22:05:38 +0000</pubDate>
      <link>https://dev.to/appmaster_io/what-to-charge-for-your-app-and-whats-the-value-of-it-ak6</link>
      <guid>https://dev.to/appmaster_io/what-to-charge-for-your-app-and-whats-the-value-of-it-ak6</guid>
      <description>&lt;p&gt;We all want to see a return on our investment, especially when creating applications, which require significant resources.&lt;/p&gt;

&lt;p&gt;You spent money, your time, put in a lot of effort, and finally, your app is ready. Now comes the new challenge: what to charge for your app?&lt;/p&gt;

&lt;p&gt;The decision depends on many factors. The number of working hours, testing costs, marketing and promotion, purchase of any licenses are some aspects that define the overall cost of development. Calculate the costs first, then set the price for the app.&lt;/p&gt;

&lt;p&gt;To put an adequate price tag on your product, first, let's look at the different pricing models.&lt;/p&gt;

&lt;p&gt;Understanding the pros and cons of pricing models will help you choose the best option for you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing-models"&gt;
  &lt;/a&gt;
  Pricing Models
&lt;/h1&gt;

&lt;p&gt;It is essential to find the balance between the price that customers are ready to pay and the amount you are hoping to receive to cover production costs and costs of future maintenance. The pricing model you will be prepared to adapt will entirely depend on the nature of your app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free"&gt;
  &lt;/a&gt;
  Free
&lt;/h2&gt;

&lt;p&gt;Who doesn't like getting things for free? Everybody does. Offering your app for free can be a good starting point. Lots of customers will be willing to try the app as long as it costs nothing.&lt;/p&gt;

&lt;p&gt;It is a working model for mobile apps. Because stores are full of options, people usually start looking for the solution from the "free" tab.&lt;/p&gt;

&lt;p&gt;Another reason for making the app completely free is if you are not planning to generate profit directly from it, rather than use it as a booster for other revenue streaming platforms. For example, redirect users to a website where they can make a purchase.&lt;/p&gt;

&lt;p&gt;In other cases, you need to figure out additional ways to generate revenue. And a profitable way to do so — run in-app advertisements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inapp-ads"&gt;
  &lt;/a&gt;
  In-app ads
&lt;/h2&gt;

&lt;p&gt;Running advertisements in the app generate ongoing revenue. You can implement many different formats for serving ads within your application: video ads, banners, pop-ups, etc.&lt;/p&gt;

&lt;p&gt;Still, you need to be very precise when picking the advertisement's format, periodicity, and subject. Otherways you may disrupt users with irrelevant, aggressive content.&lt;/p&gt;

&lt;p&gt;Use online services, such as Google AdMob, for filtering and sorting in-app ads.&lt;/p&gt;

&lt;p&gt;What else can you do? Offer customers to make a one-time payment to turn off the ads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inapp-purchases"&gt;
  &lt;/a&gt;
  In-app purchases
&lt;/h2&gt;

&lt;p&gt;We bet you saw many examples of this model. According to this structure, a user can download an app for free, but it offers them some additional features for the money. If it's a game app, you can refill lives or unlock a photo filter in the editing app for an extra price.&lt;/p&gt;

&lt;p&gt;This is generally the most using model as it doesn't have any noticeable flaws and allows users to access the significant app functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#freemium"&gt;
  &lt;/a&gt;
  Freemium
&lt;/h2&gt;

&lt;p&gt;The term freemium comes from two words — free + premium. Like in-app purchases, it lets your customers download the app for free and then charges them for a premium feature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can try several options:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offer two versions of the app&lt;/strong&gt; — free and premium with broadened functionality. After downloading a free version and testing it, users themselves can decide whether to upgrade to premium or the free set is enough for their needs.&lt;br&gt;
&lt;strong&gt;Provide a free trial.&lt;/strong&gt; Set a limited free trial for your app, and once it expires, customers will have to pay to continue using the app.&lt;br&gt;
With the freemium model, your goal is to allure customers with the app's functionality and compel them to switch to the paid version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#potential-pitfalls"&gt;
  &lt;/a&gt;
  Potential pitfalls
&lt;/h2&gt;

&lt;p&gt;This pricing model can cause a lot of work for developers as they will be required to provide continuous updates and improvements and manage two different apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscription"&gt;
  &lt;/a&gt;
  Subscription
&lt;/h2&gt;

&lt;p&gt;Subscription is another good strategy to consider for your app. Everything is simple: users have to pay a monthly/annual fee to continue using the app.&lt;/p&gt;

&lt;p&gt;It is a general approach for streaming platforms and music apps. We all have an active subscription to Spotify, Netflix, or Apple Music.&lt;/p&gt;

&lt;p&gt;Even though you may not gain new users, you are still generating revenue from subscribed customers. Look at this as an opportunity to build loyal and long-lasting relationships with your customers. Keep in mind that you still have to provide updates and improvements, so you will not see a lot of subscription cancellations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paid"&gt;
  &lt;/a&gt;
  Paid
&lt;/h2&gt;

&lt;p&gt;This one is the simplest pricing model. It requires customers to pay a one-time fee to download the app and freely use it.&lt;/p&gt;

&lt;p&gt;More importantly, users can't get a feel for the app, and you ask them to pay you money right away. Your potential users need to understand that this app is worth purchasing. Use marketing to convince people that your application is one of the best to help them solve their problems.&lt;/p&gt;

&lt;p&gt;A short description in the app store is not enough. Users will want to know as many details as possible to make a purchase decision. So give them this information, create visual content to show how everything works, launch a website, and use related platforms for the promotion.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-the-value-of-your-app"&gt;
  &lt;/a&gt;
  What's the value of your app?
&lt;/h1&gt;

&lt;p&gt;Let's assume you analyzed all the pricing models and picked the most appropriate one. Whichever option you are considering, you still have to put a price tag.&lt;/p&gt;

&lt;p&gt;To make the right decision, you have to consider many things. Among them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The purpose of your app&lt;/li&gt;
&lt;li&gt;Your business goals&lt;/li&gt;
&lt;li&gt;Your target audience&lt;/li&gt;
&lt;li&gt;Market demand&lt;/li&gt;
&lt;li&gt;The cost of building and maintaining the app&lt;/li&gt;
&lt;li&gt;Your competitors&lt;/li&gt;
&lt;li&gt;Where you are going to display the app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But most importantly, identify the value of your app. You and your team are the first people to understand the value of your product. Only with a clear idea, you make people believe that they will get something worthwhile in return after the purchase.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-identify-the-value-of-the-app"&gt;
  &lt;/a&gt;
  How to identify the value of the app?
&lt;/h1&gt;

&lt;p&gt;First, specify the problem your app solves: a dictionary translating verbal speech, an editor improving your photos, or a task tracker organizing your workday.&lt;/p&gt;

&lt;p&gt;Then, identify how it delivers the solution and is better than thousands of other similar apps. Your dictionary may have a higher translation speed; an editor provides a broader range of manual settings.&lt;/p&gt;

&lt;p&gt;Prove to your customers that if they pay for your dictionary, they will get a pocket translator providing instant service and keeping translations in separate text documents. So it can replace interpreters and reduce expenses that you most likely spend to pay for their work.&lt;/p&gt;

&lt;p&gt;Nonetheless, try to be honest with your customers and respect their choice. You don't want to exceed their expectations. Built your relationships on trust, only this way you can earn loyalty and retention of your customers, which is key to ongoing revenue.&lt;/p&gt;

&lt;p&gt;Last but not least — make a competitive analysis. Look at the rates of similar apps and analyze the market you are entering in. Again, you can follow some strategies. Get your advantage by undercutting competitors on the price. If your app is on the same level, selling it for a higher price won't do any good. However, if your app is more complex and advanced, you should charge more.&lt;/p&gt;

&lt;p&gt;Many suggest when releasing your application to set a higher price and lower it over time. Be practical, and don't put more than average users will pay. If we are talking about mobile app stores, users expect the cost of the apps to be around 0.99 cents, if not free. And they hardly pay an amount more than $6.99.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Considering these facts, stores now contain more free apps, and paid ones continue to decrease. The best way to go, release a free app with in-app purchases. It gives you a field to be creative; you may include more options of purchasable features and service, providing customers with a choice: whether to pay or not, for what to spend money. If you decide to sell your app aside from the store, go with the subscription model. The pricing strategy should reflect the value of your app. A quality product will always find its customers.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I send a gift coupon to my nerdy friend </title>
      <author>Siddharth</author>
      <pubDate>Fri, 26 Nov 2021 21:49:53 +0000</pubDate>
      <link>https://dev.to/xceed/how-i-send-a-gift-coupon-to-my-nerdy-friend-11b2</link>
      <guid>https://dev.to/xceed/how-i-send-a-gift-coupon-to-my-nerdy-friend-11b2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h3&gt;

&lt;p&gt;Our company has organized "Secret Santa", pre-covid times. I got the name of a nerdy colleague and a friend. I decided to gift him Amazon gift coupon. Like people usually do - hiding gift somewhere in desk, I instead created an online puzzle like a treasure hunt using some automation. If he solves he will receive gift on his email.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-point"&gt;
  &lt;/a&gt;
  Starting Point
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Printed a bar code on a paper and put it on my friend's workstation desk. Upon scanning, it redirects to a simple website I've created using wixsite.com.
Here's the picture of printed barcode along with other gifts -
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uy2Zd1qA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wpvr5si0a63vaula843.jpg" alt="gifts" width="880" height="660"&gt;
&lt;/li&gt;
&lt;li&gt;The landing page shows following instruction -
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amOaOTiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4i4vqic0edw0pytki5v.png" alt="landing-page" width="597" height="280"&gt; &lt;/li&gt;
&lt;li&gt;To get your gift all you need is an email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dont-scroll-take-the-challenge"&gt;
  &lt;/a&gt;
  Don't scroll! Take the challenge
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Before I tell you more, why don't you give a try yourself to find the email address? Here's the link after scanning barcode - &lt;a href="https://turantsephele.wixsite.com/giftgenerator"&gt;https://turantsephele.wixsite.com/giftgenerator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;S&lt;br&gt;
C&lt;br&gt;
R&lt;br&gt;
O&lt;br&gt;
L&lt;br&gt;
L&lt;/p&gt;

&lt;p&gt;T&lt;br&gt;
O&lt;/p&gt;

&lt;p&gt;S&lt;br&gt;
E&lt;br&gt;
E&lt;/p&gt;

&lt;p&gt;N&lt;br&gt;
E&lt;br&gt;
X&lt;br&gt;
T&lt;/p&gt;

&lt;p&gt;S&lt;br&gt;
T&lt;br&gt;
E&lt;br&gt;
P&lt;br&gt;
S&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-hints-to-find-the-email-address"&gt;
  &lt;/a&gt;
  Finding hints to find the email address
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once you click "Get email address", it redirects you to another page which shows a timer and nothing else. And with a small hidden button somewhere in page.&lt;/li&gt;
&lt;li&gt;If you are able to find the button and click, it redirects you to &lt;a href="http://fatiherikli.github.io/brainfuck-visualizer/#KysrKysrKysrKwpbCj4rKysrKwo+KysrKysrCj4rKysrKysrCj4rKysrKysrKysrCj4rKysrKysrKysrKwo8PDw8PC0KXQo+Pj4tLS4+Ky4tLS4+Ky48Ky4rLjw8PCsrKysrKysrLi0tLS4tLS0uKysrLi0tLisrLgotLS0tLS4rKysrLi0tLS0tLisrKysrLj4+Pi48PDwrLgotLS0uKysrLi0tLS0uKysrLi0uKysuLS0tLS0tLS4rKysrKysuCisrLi0tLi0uKy4+Pj4tLS48PDwuLS4tLi0tLS0uKysrKysrLisuLS4+Pj4rLjw8PC4tLS0tLS4rKysrKy4rKysuCi0tLS4+Pj4tLjw8PC0tLS0uPj4+KysuPDw8KysrKy4tLS0uKysrLj4+PisuPDw8Lj4+Pi0tLgoK"&gt;brainfuck visualizer&lt;/a&gt; with some pre-populated code. &lt;/li&gt;
&lt;li&gt;I've written this code in brainfuck and when you run it outputs next hint.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#final-hint"&gt;
  &lt;/a&gt;
  Final Hint
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;That brainfuck code outputs a simple string -
&lt;code&gt;Decode:747572616e7473657068656c6540676d61696c2e636f6d&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;After decoding, it gives you the email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#automation-for-sending-gift-coupon"&gt;
  &lt;/a&gt;
  Automation for sending gift coupon
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;I have created a IFTTT flow which triggers when there is an incoming email with subject "HOG RIEEDERRRRR" and it is from my friend's email address.&lt;/li&gt;
&lt;li&gt;Once this condition matches, IFTTT sends an email back with gift coupon details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#to-make-sure-friend-dont-stuck"&gt;
  &lt;/a&gt;
  To make sure friend don't stuck
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once timer ran out it reveals a link to brainfuck visualizer code.&lt;/li&gt;
&lt;li&gt;If he can't solve the puzzle in 3 days, an email triggers and sent gift coupon details to friend's email address. Again using IFTTT.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all folks!&lt;/p&gt;

&lt;p&gt;If you did something similar or have some idea like this, drop it in comments :)&lt;/p&gt;

</description>
      <category>wixsite</category>
      <category>ifttt</category>
      <category>automation</category>
    </item>
    <item>
      <title>GameOff #4 - Total destruction!</title>
      <author>Meat Boy</author>
      <pubDate>Fri, 26 Nov 2021 21:45:25 +0000</pubDate>
      <link>https://dev.to/meatboy/gameoff-4-total-destruction-4pj4</link>
      <guid>https://dev.to/meatboy/gameoff-4-total-destruction-4pj4</guid>
      <description>&lt;p&gt;Since the last post, we have added so much to the game! VFX is ready, with better character animations, new monsters and map tweaks. Over the map is flying now Santa Claus throwing gifts with weapons to players.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/duNGQwla650"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>unity3d</category>
      <category>gamedev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>How to Easily Add a Map to Your Website in Under 10 Minutes</title>
      <author>Kingsley Ubah</author>
      <pubDate>Fri, 26 Nov 2021 21:05:44 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-easily-add-a-map-to-your-website-in-under-10-minutes-4gkm</link>
      <guid>https://dev.to/ubahthebuilder/how-to-easily-add-a-map-to-your-website-in-under-10-minutes-4gkm</guid>
      <description>&lt;p&gt;Many modern web platforms leverage on maps and location-based features to provide services to users. Some popular examples of this are Uber and Airbnb. &lt;/p&gt;

&lt;p&gt;With the  &lt;a href="https://developer.tomtom.com/products/maps-sdk"&gt;TomTom Maps SDK&lt;/a&gt; , including a map in your website has never been easier. The toolkit enables access to various mapping features including street maps, real-time traffic conditions, fuzzy search and route planning for travellers.&lt;/p&gt;

&lt;p&gt;As a developer, you can leverage on &lt;a href="https://developer.tomtom.com/maps-sdk-web-js/documentation"&gt;TomTom's APIs methods&lt;/a&gt; to build and customize maps in your web or mobile application.&lt;/p&gt;

&lt;p&gt;Let's walkthrough the process of adding a map to your website using the TomTom Maps SDK. In the end, I'll include a link to the source code for this project for reference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Using TomTom Maps SDK is both easy and free. First, you'll need to  &lt;a href="https://developer.tomtom.com/user/register"&gt;register a TomTom developer account&lt;/a&gt;  to get an API key. This key gives you access to TomToms services, and is automatically generated for you on your dashboard once you're signed in.&lt;/p&gt;

&lt;p&gt;To include the SDK in your application, you have three options; you can either use a CDN link,  &lt;a href="https://developer.tomtom.com/maps-sdk-web-js/downloads"&gt;download the ZIP file&lt;/a&gt;  or  &lt;a href="https://developer.tomtom.com/maps-sdk-web-js/downloads"&gt;install the npm package. &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The easiest channel is through the CDN. Below are the links to the CDN files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/maps/maps.css'&amp;gt;
&amp;lt;script src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/maps/maps-web.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/services/services-web.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To include them, all you have to do is paste these links inside your html file and you're good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-map"&gt;
  &lt;/a&gt;
  Adding a map
&lt;/h3&gt;

&lt;p&gt;Let's add a map to our website.&lt;/p&gt;

&lt;p&gt;Create the html file for your site and paste the CDN links above, then, create a div to act as a wrapper for your map:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"mapArea"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- scripts --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maybe style it a bit?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nf"&gt;#mapArea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a map instance by calling &lt;code&gt;tt.map&lt;/code&gt;, which is part of the windows object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;APIKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;your-api-key&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Lagos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.5244&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3792&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APIKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapArea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Lagos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We passed an options object to the method containing the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;key: The API key for your app, obtained from the developer dashboard.&lt;/li&gt;
&lt;li&gt;container: The div which we want to insert our map into.&lt;/li&gt;
&lt;li&gt;center: a focus point for our map.&lt;/li&gt;
&lt;li&gt;zoom: a zoom level for our map.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your map should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-c1eFt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936581292/5FdwuJqHQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-c1eFt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936581292/5FdwuJqHQ.png" alt="Map of Lagos" width="802" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Omitting both center and zoom properties will give an abstract map of the world:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--neJ23b0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936673250/BAn9jRiQV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--neJ23b0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936673250/BAn9jRiQV.png" alt="Map of the world" width="798" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-markers-to-the-map"&gt;
  &lt;/a&gt;
  Adding markers to the map
&lt;/h3&gt;

&lt;p&gt;Markers are specific points of reference in a map. You can easily add markers by calling the &lt;code&gt;Marker()&lt;/code&gt; function which is part of the TomTom Map API.&lt;/p&gt;

&lt;p&gt;Now let's add a single marker to our map:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bus_stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4434&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3553&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setLngLat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bus_stop&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bus Stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;togglePopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A single marker will be inserted into our map:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuefvOED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637929472277/vZf4wsYQg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuefvOED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637929472277/vZf4wsYQg.png" alt="Single marker of bus stop" width="798" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have multiple locations which you probably got from an API, you can recursively insert them with a JavaScript loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4434&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3553&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4442&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3561&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4451&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3573&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4459&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3520&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setLngLat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;togglePopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u8IyMdnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637930241554/Wn6hGeeCX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8IyMdnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637930241554/Wn6hGeeCX.png" alt="Sites on a map" width="800" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Popup&lt;/code&gt; API method was called to instantiate a new popup for the marker along with a custom text. After created the instance, we proceeded to set the popup on the marker by calling the &lt;code&gt;setPopup&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performing-fuzzy-search"&gt;
  &lt;/a&gt;
  Performing Fuzzy Search
&lt;/h3&gt;

&lt;p&gt;There may be some cases where you want to display a location on the map using its common address, and not with the exact coordinates.&lt;/p&gt;

&lt;p&gt;The TomTom Maps SDK also exposes an API for performing fuzzy searches. The &lt;code&gt;fuzzySearch&lt;/code&gt; function call will return a list of coordinates corresponding to the bare address.&lt;/p&gt;

&lt;p&gt;First, let's add a text input for location to our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Type a location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetchLoc()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mapArea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Through the input, we can collect a query address from the user which we can then use the perform a fuzzy search.&lt;/p&gt;

&lt;p&gt;This function gets called when the submit button is clicked:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchLoc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fuzzySearch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APIKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;moveMapTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we called the fuzzySearch API method, passing in the API key for our app, and the whatever location the user types into the input.&lt;/p&gt;

&lt;p&gt;Since the function returns a promise, we needed to await its response. The fuzzy search will return an object containing many properties related to our search. The results property will hold an array of locations return from our search.&lt;/p&gt;

&lt;p&gt;When the response is ready, we called the moveMapTo method, passing in the position property of the first match.&lt;/p&gt;

&lt;p&gt;This function is responsible for moving our map to the new address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveMapTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newLoc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flyTo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newLoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we tell our map to move from the current location, to the location which matches our search query.&lt;/p&gt;

&lt;p&gt;So when a location is added to the input and button is clicked, the map will switch context to the new location with a sleek transition.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The TomTom Web SDK has a lot of API to integrate various functionalities. You can learn more about that from the  &lt;a href="https://developer.tomtom.com/maps-sdk-web-js"&gt;official API documentation.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The code for this project is available on CodePen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-links"&gt;
  &lt;/a&gt;
  Other links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="http://twitter.com/UbahTheBuilder"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="http://github.com/KingsleyUbah"&gt;GitHub&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://gum.co/js-50"&gt;JavaScript Ebook&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>First NPM Release</title>
      <author>Francesco Menghi</author>
      <pubDate>Fri, 26 Nov 2021 20:14:33 +0000</pubDate>
      <link>https://dev.to/menghif/first-npm-release-34ni</link>
      <guid>https://dev.to/menghif/first-npm-release-34ni</guid>
      <description>&lt;p&gt;This week I successfully published my Static Site Generator &lt;a href="https://github.com/menghif/static-dodo"&gt;static-dodo&lt;/a&gt; as an &lt;a href="https://www.npmjs.com/package/static-dodo"&gt;NPM package&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publishing"&gt;
  &lt;/a&gt;
  Publishing
&lt;/h3&gt;

&lt;p&gt;After creating an account at &lt;a href="https://www.npmjs.com/signup"&gt;npmjs.com&lt;/a&gt; I used the command &lt;code&gt;npm login&lt;/code&gt; from the terminal to link my npm account.&lt;/p&gt;

&lt;p&gt;I changed the version in &lt;strong&gt;package.json&lt;/strong&gt; to 1.0.0 and also added a tag to my latest commit with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;git tag -a v1.0.0 -m "1.0.0 Release"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then published my project using the command &lt;code&gt;npm publish&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;After I made some changes to the repo, I decided to unpublish the package and start from the beginning. I decided to rebrand the project from "dodo-ssg" to "static-dodo" and publish it with the new name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-testing"&gt;
  &lt;/a&gt;
  User Testing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/gusmccallum"&gt;Gus McCallum&lt;/a&gt; tested the program on his computer by installing it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm install -g static-dodo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It was interesting to see how a new user approaches getting and learning how to use the tool. Gus ran the program on his Windows computer and tested it in various ways.&lt;/p&gt;

&lt;p&gt;The biggest issue happened when trying to use a file with spaces as input like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKK7OugG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d9okq7hi0u2mmbsu2x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKK7OugG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d9okq7hi0u2mmbsu2x7.png" alt="static-dodo example" width="574" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The README Usage instructions did not indicate that he should have put the file name in between quotation marks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;static-dodo -i "The Adventures of the Speckled Band.txt"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After our exchange, I made the required changes to the Usage instructions in the README file to avoid any future confusion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automating-npm-release"&gt;
  &lt;/a&gt;
  Automating npm release
&lt;/h3&gt;

&lt;p&gt;I had fun &lt;a href="https://dev.to/menghif/first-look-at-github-actions-41a0"&gt;last week&lt;/a&gt; looking at &lt;strong&gt;GitHub Actions&lt;/strong&gt;, so I wanted to continue learning about it. I decided to setup a new Action to automatically publish to npm whenever I create a new release on GitHub.&lt;/p&gt;

&lt;p&gt;To do that I used the following &lt;a href="https://github.com/menghif/static-dodo/blob/main/.github/workflows/npm-publish.yml"&gt;yaml code&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Node.js Package&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;published&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm test&lt;/span&gt;
  &lt;span class="na"&gt;publish-npm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;
          &lt;span class="na"&gt;registry-url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://registry.npmjs.org/&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm publish&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.npm_token}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, to make this work, I had to &lt;a href="https://docs.npmjs.com/creating-and-viewing-access-tokens"&gt;get&lt;/a&gt; a token from npm and &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository"&gt;add&lt;/a&gt; it to the "Secrets" Settings of my repo.&lt;/p&gt;

&lt;p&gt;Now every time I create a new Release on GitHub, this Actions starts automatically and publishes the new release to npm.&lt;/p&gt;

&lt;p&gt;It's a good feeling to know that a cli tool I created is now available to anyone in the world by just writing one line in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;static-dodo&lt;/strong&gt; is available &lt;a href="https://www.npmjs.com/package/static-dodo"&gt;here&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>github</category>
      <category>npm</category>
    </item>
    <item>
      <title>Publishing my first npm package</title>
      <author>Andre Willomitzer</author>
      <pubDate>Fri, 26 Nov 2021 19:36:11 +0000</pubDate>
      <link>https://dev.to/andrewillomitzer/publishing-my-first-npm-package-38ad</link>
      <guid>https://dev.to/andrewillomitzer/publishing-my-first-npm-package-38ad</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project
&lt;/h3&gt;

&lt;p&gt;Eleven weeks ago when I started in Open Source Development 600 at Seneca I never thought I would get to the point of actually releasing something into the wild. Over the term we have been working on our individual static site generators. The purpose of these tools is to take a text file or Markdown file and parse it into a valid HTML document. &lt;/p&gt;

&lt;p&gt;It can include a variety of features depending on the student, but some of the options for my own &lt;a href="https://github.com/AndreWillomitzer/textToHTML_V2"&gt;textToHTML&lt;/a&gt; include stylesheets, using a config file instead of the command line, and having an output option to specify a folder to put the HTML documents into.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-journey"&gt;
  &lt;/a&gt;
  The Journey
&lt;/h3&gt;

&lt;p&gt;Throughout the weeks, we have been contributing to Open Source projects on GitHub and making pull requests. Included in this is the idea of contributing to each other's SSG's. Collaborating with classmates has truly opened my eyes about new ways of doing things and best practices of development. All of my classmates such as &lt;a href="https://github.com/Kevan-Y"&gt;Kevan Yang&lt;/a&gt; have been instrumental in getting the tool ready for &lt;code&gt;npm&lt;/code&gt; deployment. &lt;/p&gt;

&lt;p&gt;We added linting, style guides, testing, continuous integration, among many other things throughout the semester. Each time, finding a better approach and refactoring. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-npm-deploying-work"&gt;
  &lt;/a&gt;
  How does npm deploying work?
&lt;/h3&gt;

&lt;p&gt;First of all, you will need to go to the &lt;a href="https://www.npmjs.com/"&gt;npm website&lt;/a&gt; and create an account. This is where your packages will be stored. Then, make sure you have npm installed on your computer. You can check using &lt;code&gt;npm -v&lt;/code&gt; in the terminal. &lt;/p&gt;

&lt;p&gt;Next you will need to run &lt;code&gt;npm login&lt;/code&gt; command and enter your credentials for the account you created. From the root directory of your project, run &lt;code&gt;npm publish&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; you may get an error about a package with the same name existing. You may either create a &lt;a href="https://docs.npmjs.com/creating-and-publishing-scoped-public-packages"&gt;scoped package&lt;/a&gt; or change the name to something else. The name is found in the &lt;code&gt;package.json&lt;/code&gt; file of your application.&lt;/p&gt;

&lt;p&gt;That's it!!! Your package should show up on your npm account. However, if you want to tell people how to use your application you should create a &lt;code&gt;README.md&lt;/code&gt; with usage instructions, and then run &lt;code&gt;npm version patch&lt;/code&gt; and &lt;code&gt;npm publish&lt;/code&gt; again to release a new version. In order to do this your &lt;strong&gt;Git commit history must be clean&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-try-my-tool-if-you-want"&gt;
  &lt;/a&gt;
  How to try my tool (if you want)
&lt;/h3&gt;

&lt;p&gt;As mentioned, I published a package as part of the course and the way to install it is via terminal. My tool is called &lt;a href="https://github.com/AndreWillomitzer/textToHTML_V2"&gt;textToHTML&lt;/a&gt;. You may type &lt;code&gt;npx texttohtmlv2&lt;/code&gt; in your command line. It will prompt you to install the package (say yes). Then, to see if it's working you can try the &lt;strong&gt;help&lt;/strong&gt; command by typing &lt;code&gt;npx texttohtmlv2 -h&lt;/code&gt; in the terminal. It should display a list of other things to try out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts-for-the-final-lab"&gt;
  &lt;/a&gt;
  Final thoughts (for the final lab)
&lt;/h3&gt;

&lt;p&gt;This has been such an amazing journey in my 5th semester at Seneca. I have had the opportunity to contribute to things I never dreamed of having a hand in working on like the &lt;a href="https://github.com/jasmine/jasmine"&gt;jasmine testing framework&lt;/a&gt;, and also learned how to persevere when things aren't going right and to keep trying different approaches. I have also learned things that will serve me in my career such as Continuous Integration, end-to-end testing, Linting. &lt;/p&gt;

&lt;p&gt;Last, and certainly not least I learned about using Git. At first it was terrifying because all of the commands were foreign. Throughout the term we have been forced to adopt Git and learn to use commits, branches, merges, and pull requests to organize our work which has been an amazing learning experience.&lt;/p&gt;

&lt;p&gt;I know this article wasn't all about publishing, but I hope my experience inspires someone else to build a project even if it starts small.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Andre Willomitzer&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>npm</category>
    </item>
    <item>
      <title>Client / Server Chat</title>
      <author>Scott Gordon</author>
      <pubDate>Fri, 26 Nov 2021 18:50:14 +0000</pubDate>
      <link>https://dev.to/sagordondev/client-server-chat-36bc</link>
      <guid>https://dev.to/sagordondev/client-server-chat-36bc</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/sagordon-dev/intro-to-socket-programming"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bLJGI9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ska4w52zqdw86hsma57q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bLJGI9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ska4w52zqdw86hsma57q.png" alt="Console Output" width="880" height="154"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# client_server_chat
#   This is a program to demonstate a chat between client and server using UDP.
#   Run this program and add either client or server as an argument.
#   Once you have run both client and server you can chat between them.
# by Scott Gordon with help from Educative.com
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;MAX_SIZE_BYTES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt;  &lt;span class="c1"&gt;# Mazimum size of a UDP datagram
&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"127.0.0.1"&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Listening at {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvfrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAX_SIZE_BYTES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ascii"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The client at {} says {!r}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;msg_to_send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input message to send to client:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg_to_send&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ascii"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"127.0.0.1"&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input message to send to server:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ascii"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAX_SIZE_BYTES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ascii"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The server replied with {!r}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;funcs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"client"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"UDP client and server"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"functions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"client or server"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"-p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"PORT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"UDP port (default 3000)"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.ziprecruiter.com/verify-skill/4503e8d7/v1:U2FsdGVkX18R9FUa_YZDT-sEJIj5NNex8HGcuOPc5Ymp68eoblLqBW_koHWNy4Pzh-yJVcUK1n4/#UHl0aG9u"&gt;Verify my Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@kelvin1987?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Kelvin Ang&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/server?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>devops</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Bug killing development tips</title>
      <author>InterSystems Developer</author>
      <pubDate>Fri, 26 Nov 2021 18:43:15 +0000</pubDate>
      <link>https://dev.to/intersystems/bug-killing-development-tips-292e</link>
      <guid>https://dev.to/intersystems/bug-killing-development-tips-292e</guid>
      <description>&lt;p&gt;Does anyone NOT use a debugger? I can't remember the last time I did. It's not because I &lt;span&gt;&amp;lt;s&amp;gt;don't&amp;lt;/s&amp;gt;&lt;/span&gt; dislike them, I just don't need to use them. The main reason for this is because I have a certain development methodology that either produces less bugs, catches them at a unit test level, or makes tracking them down much easier.&lt;/p&gt;

&lt;p&gt;Here are my tips...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Write your own COS cheat-sheet.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is mainly for anyone that is new to COS. One of the biggest bug hazards is not knowing how certain commands and functions work. Take the time to play with a language and try out all of its variances. The process of then documenting your own cheat-sheet will cement the knowledge and provide a quick reference review tool. Not only will you become more productive, but you will certainly write less of those avoidable bugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Switch on track variables in Studio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If this is not already on then go to studio, tools, options, environment and check the track variables tick box. If you use a variable that has not been set first then the variable will now have a squiggly line under it. This always saves me from silly typos.&lt;/p&gt;

&lt;p&gt;You will also see there is an "option explicit". I don't find this makes any difference, but you might find it useful. It forces all variables to have a #dim declaration first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Don't switch off Syntax Checking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This should be on by default, in particular underline errors. I have seen some developers switch this off complaining about performance. There are no excuses, get a faster machine. This is also in the studio options settings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Always use auto complete&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This might sound like a silly one, but I never fully type out a property or method name on an object, EVER. I always start off with a few characters and then explicitly select it from the auto complete suggestions. Do this and you will never have an instance member typo bug. You will also catch deeper problems such as not using the class you thought you were using.&lt;/p&gt;

&lt;p&gt;If your object is not auto completing then make sure you add a #dim into your code, not only will it then auto complete, but you will also help other developers read your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Write less code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is obvious, less code means less opportunities for bugs. I watch some developers and they start bashing out hundreds of lines of code when they could have done it in half or less. I'm not talking about compacting code, just carefully curating it. Yes it might take you longer initially, but you will be using time the other person lost debugging code they wrote last week. Less haste, more speed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Ensure code lives in the right place&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have an entity class such as patient, then make sure all things that affect patient live on that class. It might sound an obvious one to seasoned OO developers, but I still see far too many developers embed this type of code in their non entity methods.&lt;/p&gt;

&lt;p&gt;Moving this code will encourage re-usability of battle tested code, and it will also make your non entity methods smaller and easier to debug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Handle ALL status codes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an essential strategy that I do automatically. If anything returns a status code, then I validate it before moving to the next line. If its an error always quit with that status code to a level where you handle errors.&lt;/p&gt;

&lt;p&gt;This is probably the biggest problem that I see other developers not doing. If you are not doing this then you should.&lt;/p&gt;

&lt;p&gt;If your developing in Ensemble then there is a useful macro that is used everywhere in the Ensemble libs...&lt;/p&gt;

&lt;p&gt;  $$$QuitOnError(sc)&lt;br&gt;&lt;br&gt;
  &lt;br&gt;&lt;br&gt;
I don't like macro soup, but this one is great, it makes code less verbose so that I can read the important stuff.&lt;/p&gt;

&lt;p&gt;Also, if you use try catch, then bubble up the catch as a status code from that method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Write modular reusable code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This probably falls under the same heading as write less code, but its specific to writing methods that are as small and functional as possible. Each method should have a single purpose. If you can split the method out into several smaller methods that have a defined input and output, then you can...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. UNIT TEST, UNIT TEST, UNIT TEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After doing all of the above, this is the single next biggest thing that will weed out errors long before I would ever need to fire up a debugger. By running unit tests and having them fail enables me to concentrate on weeding out that error from that small block of code. I don't need to debug &amp;amp; step around code looking for this problem, I know exactly where it is.&lt;/p&gt;

&lt;p&gt;I have a really nice in-house unit test tool that works from a browser. No complex command line set up nonsense. If anyone is interested then I will open source it. It's particularly good for unit testing Ensemble transformations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. And finally, when all else fails...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What would I do without globals so that I can debug code without having to step through it. I will do something along the lines of...&lt;/p&gt;

&lt;p&gt;  Set ^debug($zh,"foovar")=foovar&lt;br&gt;&lt;br&gt;
  &lt;br&gt;&lt;br&gt;
And then just zwrite ^debug from the command line, or put a for loop watch on it.&lt;/p&gt;

&lt;p&gt;This will track down my problems much quicker than having to step through lines of code, particularly with async processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. One more thing, face palm moments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a bit of a throw away, but I do it all the time. If you are having problems that you can't track down, then take a walk and think outside the box. When you get back you will be able to see the obvious errors that you could not see because you were looking too closely. My classic is being in the wrong namespace - DOH!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Interested to hear what other tips are out there for writing bug-less code.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updates...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Ruber Ducking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Rubber%5C_duck%5C_debugging"&gt;https://en.wikipedia.org/wiki/Rubber\_duck\_debugging&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Code Reviews&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Very important suggestion, often missed out. I think style guides would be a good supplement to this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Logging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another good suggestion. Ensemble has a great set of tools to log and view information about your code that can highlight errors that might have gone silent, as well as tracking down intermittent problems that are hard to find.&lt;/p&gt;

&lt;p&gt;Perhaps a community logging solution would be a good idea for Caché developers?&lt;/p&gt;

&lt;p&gt;Sean.&lt;/p&gt;

</description>
      <category>tips</category>
      <category>tricks</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>DeepSee: Databases, Namespaces, and Mappings - Part 1 of 5</title>
      <author>InterSystems Developer</author>
      <pubDate>Fri, 26 Nov 2021 18:39:02 +0000</pubDate>
      <link>https://dev.to/intersystems/deepsee-databases-namespaces-and-mappings-part-1-of-5-p70</link>
      <guid>https://dev.to/intersystems/deepsee-databases-namespaces-and-mappings-part-1-of-5-p70</guid>
      <description>&lt;p id="docs-internal-guid-f3c03295-67ce-2cca-e268-e21215d9ec6b"&gt;
  &lt;span&gt;I am planning to implement Business Intelligence based on the data in my instances. What is the best way to set up my databases and environment to use DeepSee?&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-Gyz6lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8up5plcqf1sm95ofrqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-Gyz6lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8up5plcqf1sm95ofrqt.png" alt="Image description" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;This tutorial addresses this question by showing three examples of architecture for DeepSee. We will start from a basic architectural model and highlight its limitations. The subsequent model is recommended for Business Intelligence applications of intermediate complexity and should be sufficient for most use cases. We will end this tutorial by describing how to enhance the flexibility of the architecture for managing advanced implementations. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Each example in this tutorial introduces a new databases and global mappings, together with a discussion on why and when they should be set up. While building up the architecture, the benefits provided by the more flexible examples will be highlighted.&lt;/p&gt;

&lt;h2&gt;
  Before starting
&lt;/h2&gt;

&lt;h3&gt;
  Primary and Analytics servers
&lt;/h3&gt;

&lt;p&gt;
  To make data highly available InterSystems generally recommends using mirroring or shadowing and base a DeepSee implementation on the mirror/shadow server. The machine hosting the original copy of the data is called the Primary server, whereas the machines hosting copies of the data and the Business Intelligence applications are often called the Analytics (or sometimes Reporting) servers.
&lt;/p&gt;

&lt;p&gt;
  Having Primary and Analytics servers is very important, the main reason being to avoid performance problems on either server. Please check the documentation about &lt;a href="docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=D2IMP_ch_overview#D2IMP_overview_architecture"&gt;Recommended Architecture&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;
  Data and application code
&lt;/h3&gt;

&lt;p&gt;
  Storing source data and code in the same database usually works well only for small-scale applications. For more extensive applications it is recommended to store source data and code in two dedicated databases, which allows you to share code with all namespaces where DeepSee runs while keeping the data separate. The database for source data should be mirrored from the Production server. This database can be either Read-only or Read-Write. It is recommended to keep journaling enabled for this database.
&lt;/p&gt;

&lt;p&gt;
  Source classes and custom applications should be stored in a dedicated database on both the Production and Analytics servers. Note that these two databases for source code do not need to be in-synch or even run the same Caché version. Journaling is usually not needed, provided the code is regularly backed up elsewhere.
&lt;/p&gt;

&lt;p&gt;
  In this tutorial we will have the following configuration. The APP namespace on the Analytics server has the APP-DATA and the APP-CODE as default databases. The APP-DATA database has access to the data (the source table class and its facts) on the source data Database on the Primary. The APP-CODE database stores the Caché code (.cls and .INT files) and other custom code. This separation of data and code is a typical architecture and allows the user, for example, to efficiently deploy DeepSee code and custom application.
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prBnAVR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vnv0iw8gxm1trci2xcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prBnAVR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vnv0iw8gxm1trci2xcn.png" alt="Image description" width="780" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;span&gt;Running DeepSee on different namespaces&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;
  &lt;span&gt;Business Intelligence implementations using DeepSee often run from different namespaces. In this post we will show how to set up a single APP namespace but the same procedure applies to all namespaces where the business intelligence application runs. &lt;/span&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;span&gt;Documentation&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;
  &lt;span&gt;It is recommended to get familiar with the documentation page &lt;/span&gt;&lt;a href="http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=D2IMP_ch_setup"&gt;&lt;span&gt;Perform the Initial Setup&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. This page includes setting up web applications, how to place DeepSee globals in separate databases, and a list of alternative mappings for DeepSee globals. &lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;




&lt;p&gt;&lt;span&gt;In the &lt;a href="https://community.intersystems.com/post/deepsee-databases-namespaces-and-mappings-part-2-5"&gt;second part&lt;/a&gt; of this series we will show with the implementation of a basic architectural model &lt;/span&gt;&lt;/p&gt;

</description>
      <category>analytics</category>
      <category>tutorial</category>
      <category>database</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
