<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Divtober Day 7: Toxic</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 07 Oct 2021 13:59:17 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-7-toxic-aom</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-7-toxic-aom</guid>
      <description>&lt;p&gt;Divtober's word for day 7 is "toxic." So I drew a cartoon of a barrel with the toxic sign on it and a glowing substance inside and dripping outside:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/jOwgdxa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This time, the demo has two elements: one is the cartoon in itself, and the other one is a link to a &lt;a href="https://www.youtube.com/watch?v=fitjMV2bmA4"&gt;video showing how the cartoon was developed&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fitjMV2bmA4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>showdev</category>
    </item>
    <item>
      <title>DataDog vs Jaeger - key features, differences and alternatives</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Thu, 07 Oct 2021 13:23:26 +0000</pubDate>
      <link>https://dev.to/signoz/datadog-vs-jaeger-key-features-differences-and-alternatives-1590</link>
      <guid>https://dev.to/signoz/datadog-vs-jaeger-key-features-differences-and-alternatives-1590</guid>
      <description>&lt;p&gt;Both DataDog and Jaeger are tools used to monitor application performance. The difference lies in what they monitor and terms of usage. Jaeger is an open-source tool focused on distributed tracing of requests in a microservice architecture. While DataDog is a SaaS APM vendor covering most monitoring needs of an application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Application performance monitoring is the process of keeping your app's health in check. APM tools enable you to be proactive about meeting the demands of your customers.&lt;/p&gt;

&lt;p&gt;If you're comparing DataDog and Jaeger, distributed tracing capabilities of both tools is one of the important criterion. Before we dive in, let's first understand in brief what is distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two essential concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;trace context&lt;/strong&gt; is passed along when requests travel between services, which tracks a user request across services. Thus, you can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-datadog"&gt;
  &lt;/a&gt;
  Key Features of DataDog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.datadoghq.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;DataDog&lt;/b&gt;&lt;/a&gt; offers an array of services in the monitoring domain. Some of the key areas in monitoring that it covers include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log Management&lt;/li&gt;
&lt;li&gt;Application performance monitoring&lt;/li&gt;
&lt;li&gt;Security monitoring&lt;/li&gt;
&lt;li&gt;Network monitoring&lt;/li&gt;
&lt;li&gt;Real user monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's focus on the features of application performance monitoring provided by DataDog as it makes more sense when it comes to comparison with Jaeger.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog APM includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;End-to-end application performance monitoring&lt;/strong&gt;&lt;br&gt;
As a full-stack APM tool, using DataDog, you can connect distributed traces to infrastructure metrics, network calls, and live processes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Collection of 100% of traces&lt;/strong&gt;&lt;br&gt;
Trace data can be huge. Still, using DataDog, you can collect 100% of your traces generated in the last 15 mins. Then, you can retain the traces showing high latency to investigate further.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code-level visibility for root-cause analysis&lt;/strong&gt;&lt;br&gt;
DataDog gives code-level visibility to break down slow requests by time spent on CPU, GC, I/O, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Covers wide range of technology stack&lt;/strong&gt;&lt;br&gt;
DataDog provides extensive integrations and libraries to monitor Java, .NET, PHP, Node.js, Ruby, Python, Go, or C++ applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x644Jbrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_dashbaord-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x644Jbrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_dashbaord-min.jpg" alt="DataDog APM dashboard"&gt;&lt;/a&gt;DataDog APM tool showing infrastructure, metrics, logs, errors, processes, network and code hotspots under a single dashboard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hsoqknxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_rca-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hsoqknxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_rca-min.jpg" alt="DataDog provides code level visibility to identify issues quickly"&gt;&lt;/a&gt;Find code hotspots using DataDog APM tool&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-jaeger"&gt;
  &lt;/a&gt;
  Key features of Jaeger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Jaeger&lt;/b&gt;&lt;/a&gt; was originally built by teams at Uber and then open-sourced. It is used for end-to-end distributed tracing for microservices. Some of the key features of Jaeger includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed context propagation&lt;/strong&gt;&lt;br&gt;
One of the challenges of distributed systems is to have a standard format for passing context across process boundaries and services. Jaeger provides client libraries that support code instrumentation in multiple languages to propagate context across services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed transaction monitoring&lt;/strong&gt;&lt;br&gt;
Jaeger comes with a web UI written in Javascript. The dashboard can be used to see traces and spans across services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Root Cause Analysis&lt;/strong&gt;&lt;br&gt;
Using traces you can drill down to services causing latency in particular user request.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server dependency analysis&lt;/strong&gt;&lt;br&gt;
Using Jaeger's web UI, you can see how requests flow through different services and different servers interact while serving user requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance/latency optimization&lt;/strong&gt;&lt;br&gt;
Once you have identified, which service or query is creating latency, you can use the information to optimize it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger UI"&gt;&lt;/a&gt;Jaeger UI showing services and corresponding traces&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-datadog-and-jaeger"&gt;
  &lt;/a&gt;
  Comparing DataDog and Jaeger
&lt;/h2&gt;

&lt;p&gt;DataDog is one of the major SaaS vendors in the APM space. On the other hand, Jaeger is a popular open-source distributed tracing tool that graduated from Cloud Native Computing Foundation. The differences between the tools arise from this genesis.&lt;/p&gt;

&lt;p&gt;Some of the key differences between DataDog and Jaeger are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Correlation of trace data&lt;/strong&gt;&lt;br&gt;
DataDog lets you connect your trace data to a lot of other performance metrics like infrastructure and host metrics, as it is not limited to distributed tracing. Jaeger collects trace data which can give you insights on latencies of requests. You can't use Jaeger for collecting metrics for hosts, networks, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Instrumentation&lt;/strong&gt;&lt;br&gt;
Instrumentation is the process of generating telemetry data from your application. Jaeger uses &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing APIs&lt;/b&gt;&lt;/a&gt; for code instrumentation. The data format of telemetry data generated is vendor-neutral in the case of Jaeger, and you can also use other back-end analysis tools. DataDog provides DataDog agents which run on your host to collect events and metrics. In the case of proprietary instrumentation agents, your monitoring stack gets locked into a vendor soon. DataDog also supports ingestion from open-source standards like OpenTelemetry, but it's not a first-class citizen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Storage&lt;/strong&gt;&lt;br&gt;
Jaeger offers two popular open-source databases for storing trace data: Cassandra and Elasticsearch. DataDog is a third-party cloud vendor where your data gets stored in DataDog's servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web UI&lt;/strong&gt;&lt;br&gt;
DataDog is a SaaS tool that offers a much smoother and more elaborate dashboarding experience, including many customizations. Jaeger's web UI is limited, although it can serve the purpose of distributed tracing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The decision between DataDog and Jaeger comes down to whether your organization has the budget to go for a paid SaaS tool like DataDog or does your organization has got the engineering bandwidth to run an open-source tool like Jaeger. In addition, as Jaeger is limited to just distributed tracing, your decision also needs to account for whether you need to monitor other components of your application.&lt;/p&gt;

&lt;p&gt;The lack of great user experience in open-source tools has always been there. Also, what if there was an open-source tool that could provide the scope of experience of a great SaaS tool like DataDog.&lt;/p&gt;

&lt;p&gt;That's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-to-datadog-and-jaeger-signoz"&gt;
  &lt;/a&gt;
  Alternative to DataDog and Jaeger - SigNoz
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of DataDog and Jaeger. It provides advanced distributed tracing capabilities along with metrics under a single dashboard.&lt;/p&gt;

&lt;p&gt;SigNoz is built to support OpenTelemetry natively. &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;  is becoming the world standard for generating and managing telemetry data (Logs, metrics, and traces). It also provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>monitoring</category>
      <category>jaeger</category>
      <category>devops</category>
    </item>
    <item>
      <title>Integrating Vercel with Doppler: Sync Secrets in Production</title>
      <author>uma victor</author>
      <pubDate>Thu, 07 Oct 2021 13:13:58 +0000</pubDate>
      <link>https://dev.to/umavictor6/integrating-vercel-with-doppler-sync-secrets-in-production-48bf</link>
      <guid>https://dev.to/umavictor6/integrating-vercel-with-doppler-sync-secrets-in-production-48bf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;One of the great benefits of &lt;a href="https://www.doppler.com/"&gt;Doppler&lt;/a&gt; is keeping your project in sync. We want to be able to sync our app wherever we develop and deploy. It only takes a few minutes to integrate the Vercel marketplace with Doppler, and that is what we will be doing in this tutorial&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will learn how to install the &lt;a href="https://www.doppler.com/integrations"&gt;Doppler integration&lt;/a&gt; from Vercel’s new marketplace. Learn how to sync the secrets in your doppler project for deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-your-project-to-vercel"&gt;
  &lt;/a&gt;
  Add your Project to Vercel
&lt;/h2&gt;

&lt;p&gt;The first thing we want to do is to login to our doppler account. I won’t be touching the details of creating an account and login into doppler, because I have already done an introduction to doppler in a &lt;a href="https://dev.to/umavictor6/intro-to-doppler-real-life-use-case-4g1a"&gt;previous post&lt;/a&gt;. So once we have logged into &lt;a href="https://www.doppler.com/"&gt;Doppler&lt;/a&gt;, we head over to &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; and add our project we want to integerate doppler with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navigating-to-the-account-homepage"&gt;
  &lt;/a&gt;
  Navigating to the account homepage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EwIJUxpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633410861280_project-dashboard.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EwIJUxpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633410861280_project-dashboard.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have an e-commerce site we want to integrate with Doppler, so we can hide secrets even as we deploy on vercel.&lt;br&gt;
Syncing Doppler with your projects is simple and quick. Just enter the details and you'll be notified when new updates are available. So let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syncing-secrets-in-doppler-with-vercel"&gt;
  &lt;/a&gt;
  Syncing secrets in doppler with vercel
&lt;/h2&gt;

&lt;p&gt;We want to first authorize Doppler. To do this, we click on the project we want to integrate doppler with, in my case, it’s an e-commerce site called &lt;code&gt;etsy-ecommerce&lt;/code&gt; and then we click on the integrations tab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ddslKXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411583992_projectdash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ddslKXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411583992_projectdash.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our integeration page, we select vercel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Co_XA0-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411701393_vercel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Co_XA0-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411701393_vercel.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on &lt;code&gt;add integeration&lt;/code&gt;, and let Doppler know you want to select a personal account (your vercel account)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zCyX4Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425706370_selectvercelaccount.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zCyX4Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425706370_selectvercelaccount.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click continue, you will be prompted to choose the particular project you want to integrate with Doppler from your list of projects in Vercel. Click on &lt;code&gt;Add Integration&lt;/code&gt; and you will be taken to the setup integration page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7GOYuuWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425934585_integerationsetup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GOYuuWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425934585_integerationsetup.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the setup integration page, we key in all our details, choose the project we want to integrate, and the vercel environment we will be deploying to, which is production. Click Setup Integration and your secret for that config will now be automatically synced to Vercel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMUfr3ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427403977_vercelenv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMUfr3ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427403977_vercelenv.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see all our environmental variables synced with vercel meaning we have successfully integerated doppler with vercel. Also, if we go to our doppler dashboard we can confirm by seeing that it is in sync with vercel. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e92DbsxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427628045_vercelinsync.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e92DbsxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427628045_vercelinsync.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatically-trigger-vercel-redeploy"&gt;
  &lt;/a&gt;
  Automatically trigger Vercel re-deploy
&lt;/h2&gt;

&lt;p&gt;In this section we will look at how to automatically trigger a re-deploy in vercel when a secret is changed in doppler. To do this navigate to git in vercel and in our deploy hooks section, we give our hook a name and click the &lt;code&gt;create hook&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7H-JGlDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633453404692_prodhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7H-JGlDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633453404692_prodhook.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s copy the webhook link and go back to our doppler dashboard. To use the webhook, you have to be part of a subscription with Doppler. Luckily for us, we can access this feature by doing a 30 day subscription without adding our credit card.&lt;br&gt;
Now when we head back to the &lt;code&gt;etsy-ecommerce&lt;/code&gt; project and click on webhooks we get a pop-up to add a new webhook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx5Gfzgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462640256_webhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx5Gfzgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462640256_webhook.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We paste in the link we copied and click on &lt;code&gt;add webhook&lt;/code&gt;. Now we can select through the input that a re-deploy should be triggered when a change is made in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuzI3xC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462890078_webhookprod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuzI3xC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462890078_webhookprod.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we make a change to one of our secrets in production, and save it, the change will be instantly reflected in vercel and trigger a deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial we learned how to install the doppler integration from Vercel’s new marketplace. We also learned how to sync the secrets in our Doppler project for deployment.&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CAST AI vs. Cloudability: Which one to pick for cloud cost optimization?</title>
      <author>CAST AI</author>
      <pubDate>Thu, 07 Oct 2021 13:12:50 +0000</pubDate>
      <link>https://dev.to/castai/cast-ai-vs-cloudability-which-one-to-pick-for-cloud-cost-optimization-44le</link>
      <guid>https://dev.to/castai/cast-ai-vs-cloudability-which-one-to-pick-for-cloud-cost-optimization-44le</guid>
      <description>&lt;p&gt;Controlling cloud costs is one of the biggest challenges facing teams across every organization that uses the public cloud. Thankfully, they can choose from a wide range of solutions that help in cost management and optimization. Many such tools offer automation features that build more stable and cost-effective cloud environments.&lt;/p&gt;

&lt;p&gt;When picking a solution, companies should consider&lt;strong&gt; the potential impact of automation on both cost savings and workflows in the cloud&lt;/strong&gt; - especially the more complex, cloud-native ones like Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep on reading to find out which cost optimization platform is a better choice for your business: CAST AI or Apptio Cloudability.&lt;/strong&gt;&lt;/p&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;CAST AI - cloud native cost optimization &lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Cloudability - cloud cost management&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;CAST AI is cloud-native platform for analyzing, monitoring and automating the costs of Kubernetes environments. Companies across e-commerce and adtech are using CAST AI to cut their cloud bills by 50% to even 90%.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Cloudability provides financial management tools for monitoring and analyzing cloud computing costs. Companies can use the software to track their public cloud spend and plan better-informed budgets for cloud services.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2&gt;CAST AI vs. Cloudability - quick feature comparison&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWd26bBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/Feature-Comparison.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWd26bBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/Feature-Comparison.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Detailed feature comparison of Cloudability and CAST AI&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#costvisibility"&gt;Cost visibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#costoptimizationandautomation"&gt;Cost optimization and automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spotinstancerecommendationsandautomation"&gt;Spot instance recommendations and automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fullmulticloudoptimization"&gt;Full multi cloud optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pricing"&gt;Pricing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="costvisibility"&gt;1. Cost visibility&lt;/h2&gt;

&lt;h3&gt;Cost allocation and reporting &lt;/h3&gt;

&lt;p&gt;Cloud expenses are divided into project, cluster, namespace, and deployment levels in &lt;strong&gt;CAST AI&lt;/strong&gt;. Teams can track expenses down to individual microservices before calculating the total cost of their cluster. &lt;strong&gt;CAST AI &lt;/strong&gt;employs industry-standard metrics that may be used with any cloud provider.&lt;/p&gt;

&lt;p&gt;The cost allocation in &lt;strong&gt;CAST AI&lt;/strong&gt; is done per cluster and per node. Control plane, network, egress, storage, and other cost dimensions will be added soon. A feature for continuous cloud cost reporting is also on its way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; comes with a default dashboard as well as the option to create custom dashboards for various products, departments, or positions within your organization. The solution’s True Cost Explorer offers a way for users to visually explore their cloud cost and usage data. Users may easily connect their use and spend to relevant data dimensions such as business units, apps, and teams without being aware of cloud billing nuances.&lt;/p&gt;

&lt;h3&gt;Cost view across multi cloud&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;Many businesses today use more than one cloud platform, so multi-cloud support is an important element of cost optimization initiatives.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It's difficult to budget for multi-cloud configurations, but &lt;strong&gt;CAST AI&lt;/strong&gt;'s multi-cloud capabilities make it a lot easier. The platform works with any cloud service provider and offers cross-cloud visibility thanks to universal metrics from Grafana and Kibana.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; stands up to this challenge as well. Users can display multi-cloud data together in a single pane of glass. All data is continuously refreshed with each new update from service providers.&lt;/p&gt;

&lt;h2 id="costoptimizationandautomation"&gt;2. Cost optimization and automation&lt;/h2&gt;

&lt;h3&gt;CAST AI - fully automated cost optimization&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rightsizing with automated instance selection &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; picks the most cost-effective instance types and sizes to fulfill the needs of your application while lowering the cloud spend. When a cluster needs additional nodes, the automation engine chooses the instances that provide the best performance at the lowest price. Engineers don't have to do anything extra because everything happens automatically.&lt;/p&gt;

&lt;p&gt;Using the same instance shape for every node in a cluster can quickly lead to overprovisioning, so &lt;strong&gt;CAST AI &lt;/strong&gt;offers multi-shape cluster creation as well. It provides the best combination of various instance types for the application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Horizontal pod autoscaling and node autoscaling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To help organizations avoid cloud waste, &lt;strong&gt;CAST AI &lt;/strong&gt;automates pod scaling settings. Based on business KPIs, the Horizontal Pod Autoscaler estimates the right number of required pod instances. If there’s no work to be done, the functionality reduces the replica count of pods until it reaches 0 - and then eliminates all pods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; also guarantees that the number of nodes in use is always appropriate for the application's requirements, dynamically scaling nodes up and down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster scheduling and termination&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;automatically stops and restarts clusters created inside the platform, saving teams money on resources teams aren’t using.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart bin packing &lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Since Kubernetes distributes programs equitably throughout a cluster - regardless of how cost-effective this design is - it poses a financial challenge to companies.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;modifies the default pod scheduling approach and uses automated bin packing to maximize savings according to user preferences. It’s simple - when there are fewer nodes, the cost savings are greater.&lt;/p&gt;

&lt;h3&gt;Cloudability - data insights combined with automation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rightsizing recommendations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; helps teams to detect and monitor cloud resource consumption, so they can balance risk and cost and reduce waste. The tool collects usage data and feeds it into its proprietary algorithms to generate a list of optimum rightsizing suggestions. The algorithms take into account usage statistics from the previous 10 and 30 days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automation in Cloudability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Removing idle EBS volumes &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; users can set up and schedule daily cleanups of detached EBS volumes. All it takes is selecting accounts and tags to scan for unattached volumes, together with the amount of time the unattached volume should sit before the tool creates a snapshot and deletes it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automated shutdown and restart of resources &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; can automatically shut down and startup operations during periods of low usage. Users can schedule the scaling of ASGs or the stopping/starting of EC2 and RDS instances, checking how many resources this will affect.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Governance for cost management&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To make the most of the cloud's elastic, on-demand capabilities while continually optimizing expenses, &lt;strong&gt;Cloudability&lt;/strong&gt; uses automation to make sure that teams operate to the same standards.&lt;/p&gt;

&lt;h2 id="spotinstancerecommendationsandautomation"&gt;3. Spot instance recommendations and automation&lt;/h2&gt;

&lt;p&gt;When compared to On-Demand instances, spot instances offer significant cost reductions - even up to 90%. However, providers can reclaim these resources at any moment. That's why teams looking to take advantage of spot instances need automation.&lt;/p&gt;

&lt;p&gt;The replacement of interrupted spot instances in &lt;strong&gt;CAST AI&lt;/strong&gt; is completely automated. Teams no longer have to worry about their application’s capacity running out. To ensure high availability, the platform continually searches for the best instance alternatives and spins up fresh instances in milliseconds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; helps users to quantify the ROI of using spot instances and offers recommendations for creating a more consistent budget and forecasting baseline.&lt;/p&gt;

&lt;h2 id="fullmulticloudoptimization"&gt;4. Full multi cloud optimization&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;As we enter the multi cloud era, the need to evaluate, manage, and optimize cloud expenses across providers is more critical than ever.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;addresses this requirement with a variety of multi cloud features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Active-Active Multi Cloud&lt;/strong&gt; - the platform replicates apps and data over several cloud services to ensure that if one fails, others keep the applications running for guaranteed business continuity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global Server Load Balancing&lt;/strong&gt; - CAST AI distributes traffic across all cloud services in use and always selects up and healthy endpoints.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multi cloud visibility&lt;/strong&gt; - the platform delivers cost allocation insights across cloud services thanks to data from Grafana and Kibana.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In&lt;strong&gt; Cloudability&lt;/strong&gt;, multi-cloud data is displayed together in a single pane of glass and constantly refreshed to reflect changes applied by cloud service providers.&lt;/p&gt;

&lt;h2 id="pricing"&gt;5. Pricing&lt;/h2&gt;

&lt;p&gt;Users of &lt;strong&gt;CAST AI&lt;/strong&gt; can start by examining their cloud services using the free Cluster Analyzer to determine if they can save money. The &lt;a href="https://cast.ai/blog/how-does-the-read-only-cast-ai-agent-work-and-what-data-can-it-read/"&gt;read-only agent&lt;/a&gt; assesses their infrastructure and provides concrete recommendations free of charge. Users can then either manually apply these findings or employ automatic cost optimization features and select between two options (with a free trial): Growth and Enterprise. CAST AI guarantees cost savings of at least 50%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; pricing starts at $499.00 per feature per month - with the option of a free trial at the beginning. &lt;/p&gt;

&lt;h2&gt;Overall winner: CAST AI&lt;/h2&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APsgkFBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/CAST-AI-vs.-Cloudability-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APsgkFBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/CAST-AI-vs.-Cloudability-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both Cloudability and CAST AI are fantastic cloud cost management platforms that improve cost management and optimization.  &lt;/p&gt;

&lt;p&gt;While Cloudability offers access to data dashboards and a limited degree of automation, CAST AI provides teams with a rich selection of automation features that guarantee cost savings and streamline work with Kubernetes. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;CAST AI’s automation features, unique multi cloud functionality, and cloud-native architecture position it as the top cloud cost optimization platform.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;





&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you'd like to start with something more hands-on, &lt;strong&gt;run the free &lt;a href="https://console.cast.ai/?screen_hint=SIGNUP" rel="noreferrer noopener"&gt;CAST AI Cost Analyzer&lt;/a&gt;&lt;/strong&gt; to see how much you could save and how to get there. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Automating video analysis to cut your streaming bandwidth usage in half</title>
      <author>Jesper Lundqvist</author>
      <pubDate>Thu, 07 Oct 2021 13:08:58 +0000</pubDate>
      <link>https://dev.to/video/automating-video-analysis-to-cut-your-streaming-bandwidth-usage-in-half-5hk1</link>
      <guid>https://dev.to/video/automating-video-analysis-to-cut-your-streaming-bandwidth-usage-in-half-5hk1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3c8ceAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v843j9ke4azwx8oz1p69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3c8ceAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v843j9ke4azwx8oz1p69.png" alt="AWS Setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using an optimal bitrate ladder can make a big difference when it comes to the bandwidth usage of your video streams. Some videos may require a high bitrate to deliver a high quality stream while some may require much less. Comparing simple animated content to an action movie with a lot of smoke and moving shots, this difference can be quite large. In this article, we will show you how to automatically generate an optimal bitrate ladder that reduces bitrate usage by 46% compared with the standard ABR-ladder from Apple without any video quality losses.&lt;/p&gt;

&lt;p&gt;But first of all, why is it important to not waste bandwidth? The obvious reason is that users on low quality internet connections will be able to get a better experience. However, for you as a streaming provider, you will also save money and energy usage, thus lowering your total CO2-emissions. Everybody wins!&lt;/p&gt;

&lt;p&gt;Optimizing ABR-ladders can be a lot of manual labour, however. &lt;a href="https://netflixtechblog.com/per-title-encode-optimization-7e99442b62a2"&gt;The method developed by Netflix&lt;/a&gt; involves encoding your source material in a variety of different bitrates for each resolution. Each variant also needs to be analyzed using a video quality metric, which also takes time and manual labour. To make this process easier, we set out to automate it as much as possible. All scripts and tools used in this blog post can be found in &lt;a href="https://github.com/Eyevinn/vmaf-analyze"&gt;this GitHub-repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-transcoding-files-to-test"&gt;
  &lt;/a&gt;
  Step 1: Transcoding files to test
&lt;/h2&gt;

&lt;p&gt;To determine the "optimal" bitrates, we need to create a variety videos at different bitrates at each resolution we wish to support. We created a script that can automatically generate bitrate-resolution pairs to evaluate and transcode these using AWS MediaConvert. Since we are transcoding many files, running this in the cloud is especially useful since we can do it in parallel. Running the transcoding process sequentially on your own machine will take many hours to complete, while it will only take a few minutes in the cloud.&lt;/p&gt;

&lt;p&gt;We select 10 bitrates for each resolution, but since higher resolutions need higher bitrates, we need to pick bitrates depending on the pixel count. Using the following code, we can automatically generate the variants to analyze.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;resolutions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;bitrate_floor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bitrate_ceil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bitrate_step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bitrate&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitrate_floor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bitrate_ceil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bitrate_step&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Start transcoding on AWS MediaConvert
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-video-quality-analysis"&gt;
  &lt;/a&gt;
  Step 2: Video quality analysis
&lt;/h2&gt;

&lt;p&gt;We are looking to get the best possible video quality per bitrate, which means we need a method to measure video quality. Traditionally, this has been done using PSNR, but there are many flaws with this method. Therefore, Netflix has developed &lt;a href="https://netflixtechblog.com/toward-a-practical-perceptual-video-quality-metric-653f208b9652"&gt;VMAF&lt;/a&gt; which is a video quality metric that accounts for human perception. VMAF takes a reference file and compares this to a distorted variant and gives you a value between 0 and 100 that describes how similar they are, the higher the better. VMAF has many interesting properties which makes it a very interesting method to use. For example, a VMAF score of 93 or higher means that the video is perceptually identical to the source material (&lt;a href="https://streaminglearningcenter.com/learning/mapping-ssim-vmaf-scores-subjective-ratings.html"&gt;source&lt;/a&gt;). This would suggest that it is unnecessary to provide variants which have a score above 93. Netflix has also said that a difference of 6 is a just noticeable difference in quality (&lt;a href="https://streaminglearningcenter.com/codecs/finding-the-just-noticeable-difference-with-netflix-vmaf.html"&gt;source&lt;/a&gt;). Therefore, spending lots of extra bandwidth to achieve an increase of less than 6 may also be unnecessary.&lt;/p&gt;

&lt;p&gt;We use a tool called &lt;a href="https://github.com/gdavila/easyVmaf"&gt;easyVmaf&lt;/a&gt;, which makes VMAF-analysis very easy. However, just like with transcoding, this process takes a lot of time to run sequentially on your own machine. If you need to analyze hundreds of files, this will take a very long time. Running this in a container in the cloud means we can run all the processes at the same time in parallel. We built a simple Docker-container that runs easyVmaf on files in a S3-bucket. This allows us to run the container on ECS and spin up as many tasks as we need. This Dockerfile can be found in the &lt;a href="https://github.com/Eyevinn/vmaf-analyze"&gt;GitHub-repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The script will wait until the transcoding in the first step is finished by watching the destination directory in S3, like shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_objects_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"Contents"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;objects_in_bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Key"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Contents"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;objects_in_bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".mp4"&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;object_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;objects_in_bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Start VMAF-analysis on variant and remove from list of variants
&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-finding-optimal-bitrates-for-each-resolution"&gt;
  &lt;/a&gt;
  Step 3: Finding optimal bitrates for each resolution
&lt;/h2&gt;

&lt;p&gt;Using the script that we've discussed, we now have VMAF scores for 60 different variants of bitrate-resolution pairs. How do we know which of these are the best? Netflix describes this in detail in their &lt;a href="https://netflixtechblog.com/toward-a-practical-perceptual-video-quality-metric-653f208b9652"&gt;blog&lt;/a&gt;, but to summarize the method, we should look at a plot of the values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjNV5yYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyzpvx4c4wjfbmk77z5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjNV5yYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyzpvx4c4wjfbmk77z5s.png" alt="Plot of bitrate-resolution pairs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there comes a point where each resolution starts falling off and the next resolution because more optimal at that bitrate. For example, looking at the below figure, we can clearly see that 1080p is the best resolution around 3000 kbit/s. Providing an option for 720p at this bitrate will only make for a lower quality video experience. At lower bitrates however, we can also see that 1080p starts plummeting in the other direction as well. At around 1500 kbit/s, 720p is better since 1080p has dramatically dropped off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gdR_-wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5gzywd5qit9tn4itfsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gdR_-wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5gzywd5qit9tn4itfsq.png" alt="Close up of 3000 kbit/s"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can imagine a convex hull that covers the outside of the plotted values. Ideally, we want to select values as close to this hull as possible, but in practice it will be hard to test all possible bitrate-resolution pairs to find these points. The points on the convex hull are at Pareto efficiency, as they are in a equilibrium where you get the best video quality per bandwidth as well as the best bandwidth per video quality.&lt;/p&gt;

&lt;p&gt;However, simply selecting the "optimal" points might not work in practice. Depending on the resolutions tested, the convex hull might result in bitrates that are very close to each other or very far apart. Therefore, some manual work needs to be done to determine the final ladder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-determining-the-final-ladder"&gt;
  &lt;/a&gt;
  Step 4: Determining the final ladder
&lt;/h2&gt;

&lt;p&gt;We set out some criteria that we use to determine if we have a reasonable ABR-ladder. These are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each rung should be between 1.5x to 2x the bitrate of the previous rung.&lt;/li&gt;
&lt;li&gt;Each rung should have at least an increase of 6 in VMAF.&lt;/li&gt;
&lt;li&gt;Each rung should use the resolution with the best video quality for that bitrate.&lt;/li&gt;
&lt;li&gt;No rung should have a VMAF score above 93.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve these points, we may need to have multiple rungs per resolution and select bitrates manually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-with-big-buck-bunny"&gt;
  &lt;/a&gt;
  Example with Big Buck Bunny
&lt;/h2&gt;

&lt;p&gt;The images above were generated from a clip of &lt;a href="https://peach.blender.org"&gt;Big Buck Bunny&lt;/a&gt;. Following the above steps we've generated an ABR-ladder that looks like the following:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resolution&lt;/th&gt;
&lt;th&gt;Bitrate&lt;/th&gt;
&lt;th&gt;VMAF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;416x234&lt;/td&gt;
&lt;td&gt;150 kbit/s&lt;/td&gt;
&lt;td&gt;15.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;640x360&lt;/td&gt;
&lt;td&gt;225 kbit/s&lt;/td&gt;
&lt;td&gt;30.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;640x360&lt;/td&gt;
&lt;td&gt;350 kbit/s&lt;/td&gt;
&lt;td&gt;44.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;768x432&lt;/td&gt;
&lt;td&gt;550 kbit/s&lt;/td&gt;
&lt;td&gt;56.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;960x540&lt;/td&gt;
&lt;td&gt;850 kbit/s&lt;/td&gt;
&lt;td&gt;67.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1280x720&lt;/td&gt;
&lt;td&gt;1275 kbit/s&lt;/td&gt;
&lt;td&gt;78.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1280x720&lt;/td&gt;
&lt;td&gt;2100 kbit/s&lt;/td&gt;
&lt;td&gt;85.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1920x1080&lt;/td&gt;
&lt;td&gt;4100 kbit/s&lt;/td&gt;
&lt;td&gt;93.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the bitrates and VMAF-scores are well spaced and we also manage to achieve a VMAF-score of 93 on the final rung. This means that the 1080p variant will have the same visual experience as the source material. Let's compare this to the example ABR-ladder the Apple provides in their &lt;a href="https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices"&gt;HLS Authoring Specification&lt;/a&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resolution&lt;/th&gt;
&lt;th&gt;Bitrate&lt;/th&gt;
&lt;th&gt;VMAF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;416x234&lt;/td&gt;
&lt;td&gt;145 kbit/s&lt;/td&gt;
&lt;td&gt;14.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;640x360&lt;/td&gt;
&lt;td&gt;365 kbit/s&lt;/td&gt;
&lt;td&gt;46.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;768x432&lt;/td&gt;
&lt;td&gt;730 kbit/s&lt;/td&gt;
&lt;td&gt;63.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;768x432&lt;/td&gt;
&lt;td&gt;1100 kbit/s&lt;/td&gt;
&lt;td&gt;70.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;960x540&lt;/td&gt;
&lt;td&gt;2000 kbit/s&lt;/td&gt;
&lt;td&gt;81.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1280x720&lt;/td&gt;
&lt;td&gt;3000 kbit/s&lt;/td&gt;
&lt;td&gt;88.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1280x720&lt;/td&gt;
&lt;td&gt;4500 kbit/s&lt;/td&gt;
&lt;td&gt;91.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1920x1080&lt;/td&gt;
&lt;td&gt;6000 kbit/s&lt;/td&gt;
&lt;td&gt;96.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1920x1080&lt;/td&gt;
&lt;td&gt;7800 kbit/s&lt;/td&gt;
&lt;td&gt;97.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This ABR-ladder violates many of the criteria that we set up. As mentioned, providing variants with a VMAF-score above 93 may be unnecessary, but in this ladder both 1080p-rungs are above 93. Generally, we can see that this ABR-ladder is very wasteful for this type of content.&lt;/p&gt;

&lt;p&gt;Comparing the ladders, we can see a 46% decrease in bandwidth by using the optimized ladder when summarizing the average bitrates for each resolution. Since the highest quality rung provides a VMAF-score of 93, we are able to do this while achieving a identical visual experience as the source material. We've managed to cut the bandwidth usage in half without affecting video quality and therefore also cut costs and energy usage by almost half as well.&lt;/p&gt;

&lt;p&gt;Tailoring the ABR-ladder to the content is evidently very effective in reducing bandwidth usage, but the process of finding the best ladder can be difficult and time consuming. The scripts we've built to automate this process makes it much easier and faster to do and could be integrated in your existing ingest process to automatically determine the best ABR-ladder without any human input. The very small cost of transcoding and computing VMAF on the cloud can be insignificant to the cost savings you can get from optimizing your ABR-ladder.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eyevinn Technology is the European leading independent consultancy firm specializing in video technology and media distribution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you need assistance in the development and implementation of this, our team of &lt;a href="https://video-dev.team/"&gt;video developers&lt;/a&gt; are happy to help out. If you have any questions or comments just drop us a line in the comments section to this post.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Rodando projetos x86_64 no Mac M1 (arm64) com UTM</title>
      <author>Joubert RedRat</author>
      <pubDate>Thu, 07 Oct 2021 12:06:08 +0000</pubDate>
      <link>https://dev.to/joubertredrat/rodando-projetos-x8664-no-mac-m1-arm64-com-utm-4h7l</link>
      <guid>https://dev.to/joubertredrat/rodando-projetos-x8664-no-mac-m1-arm64-com-utm-4h7l</guid>
      <description>&lt;p&gt;Desde que a Apple publicou sobre os novos Macs com o chip M1, houve um grande esforço para que vários aplicativos e problemas pudessem rodar na nova arquitetura, que é arm64, diferente da tradicional arquitetura x86_64 dos processadores Intel, AMD e outros, tanto de empresas donas dos softwares proprietários, quanto de comunidades de projetos open source.&lt;/p&gt;

&lt;p&gt;Muito deste ecossistema tem suporte nos Mac M1, porém, alguns projetos ainda apresentam problemas, como alguns projetos baseados em QEMU ou imagens de docker que ainda não tem suporte multi arquitetura, por exemplo.&lt;/p&gt;

&lt;p&gt;Uma forma de poder contornar essa situação é justamente poder executar esses projetos como arquitetura x86_64, e é ai que a virtualização pode nos ajudar.&lt;/p&gt;

&lt;p&gt;Para virtualização, iremos usar o UTM, que já escrevi sobre neste link, &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/joubertredrat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QFfU5cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z1clzTGd--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/434421/b9af26ba-b19a-4d70-9392-1dff158a11f4.jpeg" alt="joubertredrat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/joubertredrat/virtualizacao-nos-mac-m1-sim-com-utm-3l90" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Virtualização nos Mac M1? Sim, com UTM&lt;/h2&gt;
      &lt;h3&gt;Joubert RedRat ・ Oct 4 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#m1&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#virtualization&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#macbook&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Então, vou assumir que você já tenha o UTM instalado no seu Mac M1, então vamos lá.&lt;/p&gt;

&lt;p&gt;Para este artigo, vamos usar o Ubuntu 20.04 server, então você pode fazer o download no site da Canonical, ou direto no link abaixo, porém, você pode usar a distro de sua preferência.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://releases.ubuntu.com/20.04/ubuntu-20.04.3-live-server-amd64.iso"&gt;https://releases.ubuntu.com/20.04/ubuntu-20.04.3-live-server-amd64.iso&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criando-a-m%C3%A1quina-virtual"&gt;
  &lt;/a&gt;
  Criando a máquina virtual
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Vamos criar nossa máquina virtual clicando no ícone "+" e depois em "Start from Scratch".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ui03UTgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um38vpl7s9gk3wy9ri28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ui03UTgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um38vpl7s9gk3wy9ri28.png" alt="Criando nova máquina virtual no UTM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "Information" você vai configurar o nome e o ícone da máquina virtual conforme desejar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2AOBMAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wdgyv3nidqcy5c1db7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2AOBMAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wdgyv3nidqcy5c1db7.png" alt="Configurando informações da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "System" vem a parte importante, em "Architecture", selecione a opção "x86_64", a opção "System" logo abaixo será alterado automaticamente. Na opção "Memory" você vai selecionar a quantidade de memória que a máquina virtual deverá ter. O mínimo para conseguir rodar é 768Mb, porém, recomendo fortemente que coloque 1Gb ou mais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3QRIzks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6om1qq4zuv7mj3qy81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3QRIzks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6om1qq4zuv7mj3qy81.png" alt="Configurando arquitetura e memória da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "Drives", você irá criar um disco rígido e uma unidade de CD/DVD. Eu recomendo fortemente criar um disco com pelo menos 30 Gb ou mais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKqV58nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0cwt8rf9yi66v7tpt0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKqV58nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0cwt8rf9yi66v7tpt0w.png" alt="Criação de disco rígido da máquina virtual"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7po9qbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wpzvlnaxdcegdm2fk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7po9qbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wpzvlnaxdcegdm2fk5.png" alt="Criação de unidade de CD/DVD da máquina virtual"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_T79DO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ybeg00io3anqtjmz9tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_T79DO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ybeg00io3anqtjmz9tf.png" alt="Disco rígido e unidade de CD/DVD da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "Network", você irá criar um redirecionamento de portas, para que possamos acessar a máquina via SSH.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AlXfX8hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj05chkj3dy5khazgprw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AlXfX8hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj05chkj3dy5khazgprw.png" alt="Adicionando redirecionamento de portas da máquina virtual"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFg6P6zJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x157v0gz7fchi49j9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFg6P6zJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x157v0gz7fchi49j9p.png" alt="Redirecionamento de portas da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vale lembrar que você pode fazer redirecionamento de outras portas que desejar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por fim, só clicar em "Save" e pronto, sua máquina virtual estará criada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mV4JQzDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntmurd97mqnx3a6trf6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mV4JQzDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntmurd97mqnx3a6trf6g.png" alt="Máquina virtual criada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na parte inferior das informações da máquina virtual existe um select na opção de CD/DVD, você irá selecionar a ISO da distro que você escolheu, o que no nosso caso, é o Ubuntu Server 20.04.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3g9eYzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbz9y1fpcl1z3m55rohd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3g9eYzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbz9y1fpcl1z3m55rohd.png" alt="Máquina virtual com a ISO da distro selecionada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agora é só executar a máquina virtual e instalar a distro linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_g-GQNnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x6s47glbp8onmi0xxpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_g-GQNnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x6s47glbp8onmi0xxpz.png" alt="Instalando linux na máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testando-a-m%C3%A1quina-virtual"&gt;
  &lt;/a&gt;
  Testando a máquina virtual
&lt;/h3&gt;

&lt;p&gt;Agora que você instalou sua máquina virtual, basta acessar ela por SSH e você verá que na máquina virtual, estará rodando um sistema x86_64, como na imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPk-g7Hd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow1bof85b0dcqygfidm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPk-g7Hd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow1bof85b0dcqygfidm1.png" alt="Terminal ssh na máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hora-da-prova-de-fogo"&gt;
  &lt;/a&gt;
  Hora da prova de fogo
&lt;/h3&gt;

&lt;p&gt;Para a o exemplo da prova de fogo estou usando o docker e o container de um projeto chamado Kafdrop, que basicamente é uma Web UI para Kafka feito em Java e que também merece uma estrela no GitHub, &lt;del&gt;mesmo que tenha sido feito em java haha&lt;/del&gt; o repositório do projeto está abaixo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/obsidiandynamics/kafdrop"&gt;https://github.com/obsidiandynamics/kafdrop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como o container deste projeto ainda não tem suporte a multi arquitetura, tentamos executar ele como se fosse &lt;code&gt;linux/amd64&lt;/code&gt;, em outros projetos até funciona, mas neste não.&lt;/p&gt;

&lt;p&gt;Como pode ser visto na imagem abaixo, no primeiro console ocorreu o erro &lt;code&gt;qemu: uncaught target signal 11 (Segmentation fault) - core dumped&lt;/code&gt;, pois mesmo tentando forçar x86_64 na arch arm64, neste caso não funciona.&lt;/p&gt;

&lt;p&gt;Porém, no segundo console o projeto executou normalmente, pois se trata de um container x86_64 rodando em uma distro x86_64.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bPQhsb-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq54vob71rwzulehep7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bPQhsb-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq54vob71rwzulehep7u.png" alt="container executando no macOS e linux"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ou seja, é perfeitamente possível executar projetos x86_64 mesmo estando com um Mac M1.&lt;/p&gt;

&lt;p&gt;Então é isso pessoas, espero ter ajudado com este artigo e se tiverem mais dúvidas, fiquem a vontade para comentar por aqui mesmo ou me caçando em algum lugar da internet :)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>virtualization</category>
      <category>arm64</category>
      <category>macbook</category>
    </item>
    <item>
      <title>Create a backend in Javascript (part 4): Create your first HTTP Server</title>
      <author>Eric The Coder</author>
      <pubDate>Thu, 07 Oct 2021 12:00:32 +0000</pubDate>
      <link>https://dev.to/ericchapman/create-a-backend-in-javascript-part-4-create-your-first-http-server-5k1</link>
      <guid>https://dev.to/ericchapman/create-a-backend-in-javascript-part-4-create-your-first-http-server-5k1</guid>
      <description>&lt;p&gt;Here is a series of articles to help you create backend applications in Javascript.&lt;/p&gt;

&lt;p&gt;Node.js is now a must, so it is essential for a developer to master it.&lt;/p&gt;

&lt;p&gt;I will publish a new article every two days and little by little you will learn everything there is to know about Node.js&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-http-module"&gt;
  &lt;/a&gt;
  The HTTP module
&lt;/h2&gt;

&lt;p&gt;The HTTP module is a set of functions that allow you to create and manage your own web server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reminder-what-is-a-web-server"&gt;
  &lt;/a&gt;
  Reminder: What is a web server?
&lt;/h3&gt;

&lt;p&gt;A web server is a set of hardware and software that allow access to hosted files, web page and database stored on a computer.&lt;/p&gt;

&lt;p&gt;The web server also consists of an HTTP server. HTTP server is software that understands / receives URLs and requests via the HTTP protocol (the protocol used by the browser to display web pages).&lt;/p&gt;

&lt;p&gt;At the simplest level, whenever a browser needs a file or other hosted on a web server, the browser makes the request to the server (it is said to send an HTTP request). When the request reaches the server, the HTTP server processes it and returns the response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In summary, the bottom line is that although an HTTP server may seem complicated, in fact it is just a succession of requests and responses. You will see here below that NodeJS allows you very easily to create an HTTP server and that it is very easy to read a request and send a response.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-an-http-server-with-nodejs"&gt;
  &lt;/a&gt;
  Creating an HTTP server with NodeJS
&lt;/h3&gt;

&lt;p&gt;Here is an example of creating an HTTP server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Send response&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see line by line the different steps for creating a server&lt;/p&gt;

&lt;p&gt;Loading the HTTP module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Server creation with a callback function. Note that there are two parameters that are passed to the function: req and res.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;req: will contain info on the incoming request&lt;/li&gt;
&lt;li&gt;res: will be used to define the outgoing response
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// send the response&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;res.end() tells the server that the response is complete and can now be sent&lt;/p&gt;

&lt;p&gt;Starting the server. The server will wait and read the requests that arrive on port 5000.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an endless loop. Each time a request will be sent to our server at port 5000 (ex: localhost:5000), the server will execute the callback (see previous code block) and therefore in this case send the response 'Hello World from the server'&lt;/p&gt;

&lt;p&gt;If you want to test this server, launch the application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Server is listening at localhost on port 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your browser and visit localhost:5000&lt;/p&gt;

&lt;p&gt;The message 'Hello World from the server' should display in your browser&lt;/p&gt;

&lt;p&gt;In fact if you visit any page ex: &lt;a href="http://localhost:5000/about"&gt;localhost: 5000/about&lt;/a&gt; the same message will always be displayed.&lt;/p&gt;

&lt;p&gt;It is possible to read the url path of the request ex: /about or /home etc. and return a different response depending on the path.&lt;/p&gt;

&lt;p&gt;The path information is included in the request.&lt;/p&gt;

&lt;p&gt;To read information about the request we will use the 'req' object. which as you know contains all the information of the request.&lt;/p&gt;

&lt;p&gt;Specifically, the url path is in the 'req.url' property&lt;/p&gt;

&lt;p&gt;Here is an example of a small HTTP server which, depending on the url received, displays a different page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;About page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#http-headers"&gt;
  &lt;/a&gt;
  HTTP Headers
&lt;/h3&gt;

&lt;p&gt;HTTP Headers allow the client and the server to pass additional information along with the request or response.&lt;/p&gt;

&lt;p&gt;For example, the Header of a request could contain the format of its content ex. HTML or JSON and / or related information for user authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#response-header-example"&gt;
  &lt;/a&gt;
  Response Header example
&lt;/h3&gt;

&lt;p&gt;To add a header to the response, we need to add a function before the res.end() function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The writeHead function allows you to specify the content type of the message, either 'text/html'&lt;/p&gt;

&lt;p&gt;When running the res.end() function NodeJS will include the Header to the response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-http-server"&gt;
  &lt;/a&gt;
  Your first HTTP server
&lt;/h3&gt;

&lt;p&gt;Voila, you have created your first HTTP server. Although this is a very basic server for the moment, remember that an HTTP server is simply a succession of requests and responses.&lt;/p&gt;

&lt;p&gt;So, in its simplest form, your web application will do just that. That is to say, process requests and return responses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-to-expressjs"&gt;
  &lt;/a&gt;
  Introduction to ExpressJS
&lt;/h3&gt;

&lt;p&gt;Although NodeJS allows us to create our own HTTP server, to create a real web application we would have to code hundreds or even thousands of lines of code in order to handle all the possibilities and all the exceptions.&lt;/p&gt;

&lt;p&gt;Fortunately for us there are several NodeJS libraries / frameworks that do this job for us.&lt;/p&gt;

&lt;p&gt;The most popular of all is ExpressJS. ExpressJS is a framework (set of libraries) designed with NodeJS in order to greatly simplify web application development.&lt;/p&gt;

&lt;p&gt;So we will see in detail later how to use ExpressJS in our NodeJS applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Créer un backend en Javascript (partie 4) : Créer un serveur HTTP avec NodeJS</title>
      <author> Eric Le Codeur</author>
      <pubDate>Thu, 07 Oct 2021 11:51:52 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-partie-4-creer-un-serveur-http-avec-nodejs-34ab</link>
      <guid>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-partie-4-creer-un-serveur-http-avec-nodejs-34ab</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra créer des applications backend en Javascript.&lt;/p&gt;

&lt;p&gt;Node.js est aujourd'hui un incontournable, il est donc essentiel pour un développeur de le maitriser.&lt;/p&gt;

&lt;p&gt;Je vais donc publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur Node.js&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#le-module-http"&gt;
  &lt;/a&gt;
  Le module HTTP
&lt;/h2&gt;

&lt;p&gt;Le module HTTP est un ensemble de fonctions qui permettent de créer et gérer votre propre serveur web. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rappel-questce-quun-serveur-web-"&gt;
  &lt;/a&gt;
  Rappel: Qu'est-ce qu'un serveur web ?
&lt;/h3&gt;

&lt;p&gt;Un serveur web est un ensemble matériel et logiciel qui permettent l'accès aux fichiers hébergés, page web et base de données stocké sur un ordinateur. &lt;/p&gt;

&lt;p&gt;Le serveur web est constitué en autre d'un serveur HTTP. Le serveur HTTP est un logiciel qui comprend/reçoit les URL et les requêtes via le protocole HTTP (le protocole utilisé par le navigateur pour afficher les pages web).&lt;/p&gt;

&lt;p&gt;Au niveau le plus simple, à chaque fois qu'un navigateur a besoin d'un fichier ou autre hébergé sur un serveur web, le navigateur fait la demande au serveur (on dit qu'il envoie une requête HTTP). Quand la requête atteint le serveur, le serveur HTTP la traite et renvoie le réponse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ-s4pdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cg8p3lgmm1guuy4rbypq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ-s4pdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cg8p3lgmm1guuy4rbypq.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En résumé, ce qu'il faut retenir c'est que bien que un serveur HTTP peut semblé compliqué, en faite ce n'est qu'un succession de requêtes et réponses. Vous verrez ici bas que NodeJS vous permet très facilement de créer un serveur HTTP et qu'il est très facile d'y lire une requête et d'envoyer une réponse&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cr%C3%A9ation-dun-serveur-http-avec-nodejs"&gt;
  &lt;/a&gt;
  Création d'un serveur HTTP avec NodeJS
&lt;/h3&gt;

&lt;p&gt;Voici un exemple de création d'un serveur HTTP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// envoi la réponse au client&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voyons ligne par ligne les différentes étapes pour la création d'un serveur&lt;/p&gt;

&lt;p&gt;Chargement du module HTTP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Création du serveur  avec une fonction callback. À noter qu'il y a deux paramètres qui sont passé à la fonction: req et res. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;req : contiendra des info sur la requête entrante&lt;/li&gt;
&lt;li&gt;res : servira à définir la réponse sortante
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// envoi la réponse au client&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;res.end() indique au serveur que la réponse est complète et peut maintenant être envoyé&lt;/p&gt;

&lt;p&gt;Démarrage du serveur. Le serveur va attendre et lire les requêtes qui arriveront sur le port 5000.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il s'agit ici d'une boucle sans fin. Chaque fois qu'une requête sera envoyé sur notre serveur au port 5000 (ex: localhost:5000), le serveur va exécuter le callback (voir bloc de code précédant) et donc dans ce cas ci envoyer la réponse 'Hello World from the server'&lt;/p&gt;

&lt;p&gt;Si vous désirez tester ce serveur, lancer l'application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Server is listening at localhost on port 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ouvrez votre navigateur et visitez localhost:5000&lt;/p&gt;

&lt;p&gt;Le message 'Hello World from the server' devrait afficher dans votre navigateur&lt;/p&gt;

&lt;p&gt;En faite si vous visitez n'importe quelle page ex:  &lt;a href="http://localhost:5000/about"&gt;localhost:5000/about&lt;/a&gt; le même message sera toujours affiché. &lt;/p&gt;

&lt;p&gt;Il est possible de lire le chemin url de la requête ex: /about ou /home etc. et renvoyer une réponse différente selon le chemin. &lt;/p&gt;

&lt;p&gt;L'information sur le chemin est inclut dans la requête. &lt;/p&gt;

&lt;p&gt;Pour lire des infos sur la requête nous allons utiliser l'objet 'req'. qui comme vous savez contient toutes les informations de la requête.&lt;/p&gt;

&lt;p&gt;Plus précisément, le chemin url se trouve dans la propriété 'req.url' &lt;/p&gt;

&lt;p&gt;Voici un exemple d'un petit serveur HTTP qui, selon le url reçu, affiche une page différent&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;About page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#http-headers"&gt;
  &lt;/a&gt;
  HTTP Headers
&lt;/h3&gt;

&lt;p&gt;Les HTTP Headers permettent au client et au serveur de transmettre des informations supplémentaires avec la requête ou la réponse. &lt;/p&gt;

&lt;p&gt;Par exemple, le Header d'une requête pourrait contenir le format de son contenue ex. HTML ou JSON et/ou les informations relative pour l'authentification de l'utilisateur. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exemple-de-response-header"&gt;
  &lt;/a&gt;
  Exemple de Response Header
&lt;/h3&gt;

&lt;p&gt;Pour  ajouter un header à la réponse,  nous devons ajouter une fonction avant la fonction res.end()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La fonction writeHead permet de spécifier le type de contenu du message soit 'text/html'&lt;/p&gt;

&lt;p&gt;Lors de l'exécution de la fonction res.end() NodeJS inclura le Header à la réponse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#votre-premier-serveur-http"&gt;
  &lt;/a&gt;
  Votre premier serveur HTTP
&lt;/h3&gt;

&lt;p&gt;Voila, vous avez créé votre premier serveur HTTP. Bien qu'il s'agit pour le moment d'un serveur très basique, n'oubliez pas qu'un serveur HTTP c'est simplement une succession de requêtes et de réponses. &lt;/p&gt;

&lt;p&gt;Donc, dans sa plus simple expression, votre application web, ne fera que cela. C'est à dire traiter des requêtes et renvoyer des réponses. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-%C3%A0-expressjs"&gt;
  &lt;/a&gt;
  Introduction à ExpressJS
&lt;/h3&gt;

&lt;p&gt;Bien que NodeJS nous permet de créer notre propre serveur HTTP, pour créer une vraie application web il faudrait coder des centaines voir des milliers de lignes de code afin de gérer toutes les possibilités et toutes les exceptions.&lt;/p&gt;

&lt;p&gt;Heureusement pour nous il existe plusieurs librairie/framework NodeJS qui font ce travail pour nous.&lt;/p&gt;

&lt;p&gt;Le plus populaire d'entre tous est ExpressJS. ExpressJS est un framework (ensemble de librairies) conçu avec NodeJS afin de simplifier énormément le développement d'application web.&lt;/p&gt;

&lt;p&gt;Nous verrons donc en détail plus tard comment utiliser ExpressJS dans nos applications NodeJS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Liman Eklentilerinde Guzzle İle Express.js  Web API'ına İstek Göndermek</title>
      <author>Mete ARSLAN</author>
      <pubDate>Thu, 07 Oct 2021 11:49:58 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-eklentilerinde-guzzle-i-le-express-js-web-api-ina-i-stek-gondermek-53np</link>
      <guid>https://dev.to/aciklab/liman-eklentilerinde-guzzle-i-le-express-js-web-api-ina-i-stek-gondermek-53np</guid>
      <description>&lt;h1&gt;
  &lt;a href="#liman-eklentilerinde-guzzle-i%CC%87le-expressjs-web-api%C4%B1na-i%CC%87stek-g%C3%B6ndermek"&gt;
  &lt;/a&gt;
  Liman Eklentilerinde Guzzle İle Express.js  Web API'ına İstek Göndermek
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-expressjs-i%CC%87le-web-api%C4%B1n-haz%C4%B1rlanmas%C4%B1"&gt;
  &lt;/a&gt;
  1- Express.js İle Web API'ın Hazırlanması
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"liman" kullanıcısı ile liman sunucusuna bağlandıktan sonra  "home/liman" dosyasına gidin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Express.js kurulumunu yapın.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  express myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Komutu ile projenizi oluşturun.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web App olarak kullanmayacağımız için "view" ve "public" dosyasını silin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"routes" dosyasının users.js dosyasını da silebilirisiniz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3000 numaralı portu kontrol edin. Eğer doluysa express.js çalışmayacaktır.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dolu olması durumunda enviroment değişkeninini değiştirerek yada "bin/www" dosyasında
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;normalizePort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;3000 değeriyle oynayarak boş bir portta çalıştırın.(Doğru port ataması için Wikipedia'ya bakabilirsiniz.)&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"app.js" dosyasında "view engine setup" "path" ve "userRouter"ın bulunduğu kısımları silin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"error handler" kısmını tamamen silin yada başka bir hata kontrolü ekleyin. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bittiğin de "app.js" aşağıdaki gibi görülecektir.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;createError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anlamlı&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http-errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookieParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;indexRouter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;



  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="nx"&gt;wikipedia&lt;/span&gt;

  &lt;span class="c1"&gt;// `/home` yerine `/api/v1/users` gibi daha anlamlı isimler de verebilirsiniz. &lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indexRouter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="c1"&gt;// catch 404 and forward to error handler&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-kullan%C4%B1c%C4%B1-i%CC%87simlerinin-eklenmesi-ve-okunmas%C4%B1"&gt;
  &lt;/a&gt;
  2- Kullanıcı İsimlerinin Eklenmesi ve Okunması
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt;: Bu örneğin basit tutulması için kullanıcılar veritabanında değil memory'de tutulmuştur&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"routes" dizinin altında "home.js" dosyasında kullanıcı eklemek ve kullanıcıları almak için iki route ve bir array oluşturun oluşturun.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arslan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mehmet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;basibuyuk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ali&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;veli&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}];&lt;/span&gt;


  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getNames&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/addName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nx"&gt;konsolda&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FAILED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kullanıcıları göndermeden önce karşı tarafta da kolay bir şekilde okunması için JSON formatına çevirip gönderin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gerçek projelerede "POST" işlemleri için "request" ile gönderilen bilgiye daha ayrıntılı  bir doğrulama yapmanız gerekir. "express-validator" yada başka bir modül kullanabilirsiniz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bu işlemlerden sonra terminalden projenin olduğu dosyaya gidin ve&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;komutu ile uygulamanızı başlatın.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOT:&lt;/strong&gt;"Nodemon" yada benzeri bir modül ile çalıştırmaya başlarsanız yada uygulamayı kapatıp açarsanız kullanıcıların bulunduğu dizin memory'de olduğu için ilk duruma geri dönecektir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-liman-eklentisinde-guzzle-i%CC%87le-controller-olu%C5%9Fturulmas%C4%B1"&gt;
  &lt;/a&gt;
  3- Liman Eklentisinde Guzzle İle Controller Oluşturulması
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Eklenti Oluşturulması:&lt;/strong&gt;&lt;a href="https://docs.liman.dev/eklenti-gelistirme/baslangic/yeni-eklenti-olusturma"&gt;https://docs.liman.dev/eklenti-gelistirme/baslangic/yeni-eklenti-olusturma&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eklenti oluşturulduktan sonra(PHP OOP olarak oluşturun) VSCode ile "/liman/extensions/eklenti_adı" dosyasını açın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;composer.json&lt;/code&gt; dosyasında require kısmınıa Guzzle'i ekleyin&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;eklemek&lt;/span&gt;&lt;span class="nl"&gt;"require"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"guzzlehttp/guzzle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.0"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;"app/Controllers" altına bir controller oluşturun.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

  &lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liman\Toolkit\Shell\Command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;GuzzleHttp\Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GuzzleTestController&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="c1"&gt;// Base URI is used with relative requests&lt;/span&gt;
            &lt;span class="s1"&gt;'base_uri'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'10.154.127.120:3001/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;// You can set any number of default request options.&lt;/span&gt;
            &lt;span class="s1"&gt;'timeout'&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'home/getNames'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getBody&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getContents&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'required|string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'surname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'required|string'&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'surname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;


        &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'home/addName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'body'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'headers'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getBody&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getContents&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"constructor" kısmına oluşturmuş olduğumuz express serverına bağlanmak için bir client oluşturun.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Express.js'ten kullanıcıların bilgisini alacak ve kullanıcı ekleyecek iki metot yazın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"getNames" metodunda istediğimiz kullanıcılar JSON formatında gelmektedir bu veriyi json_decode ile anlamlı hale getirip respond ile gönderin. Dilerseniz gelen veride bir sorun olması durumunda hata kontrolü de yaptırabilirsiniz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"addName" metodunda kullanıcıdan da veri alınmaktadır. Alınan veri "validate" fonksiyonu ile doğrulandıktan sonra gönderinin "body" kısmına atamak için "request" fonksiyonunu kullanın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"client" ile yapılacak olan istek için "$client-&amp;gt;request()" metodunuda header kısmında gönderilen verinin JSON formatında olduğunu belirtin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"response" Express tarafında işlemin başarılı yada başarısız olmasına göre bir dönüt verecektir.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Son olarak "routes.php" dosyasına yaptığınız metotları ekleyin.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="n"&gt;eklemekeklemek&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;"index"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"HomeController@index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="s2"&gt;"get_hostname"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"HostnameController@get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"set_hostname"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"HostnameController@set"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="s2"&gt;"get_guzzletestnames"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"GuzzleTestController@getNames"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"add_guzzletestnames"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"GuzzleTestController@addName"&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-viewin-kodlanmas%C4%B1"&gt;
  &lt;/a&gt;
  4- View'in Kodlanması
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT:&lt;/strong&gt; Yetki problemlerinden dolayı yeni oluşturduğun dosyalar okunamayabiliyor. Oluşturduğunuz dosyaların sahibinin doğru kişi olduğundan emin olun. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"views" klasörünün altına yapmış olduğumuz Controller'ı çağaracak bir  blade.php dosyası ve kodun daha düzenli olması için JsScript kodlarının bulunduğu dosyaları oluşturun. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;index.blade.php dosyasına bu viewleri ekleyin.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @extends('layouts.master')

  @section('content')
  &amp;lt;h2 class="text-bold"&amp;gt;{{ __("Deneme2") }}&amp;lt;/h2&amp;gt;

  &amp;lt;ul class="nav nav-tabs" role="tablist" style="margin-bottom: 15px;"&amp;gt;
      &amp;lt;li class="nav-item"&amp;gt;
          &amp;lt;a class="nav-link active" onclick="getHostname()" href="#hostname" data-toggle="tab"&amp;gt;
              &amp;lt;i class="fas fa-server"&amp;gt;&amp;lt;/i&amp;gt; {{ __("Hostname") }}
          &amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li class="nav-item"&amp;gt;
          &amp;lt;!--onclick kismina her guzzle test paneli sectildiginde tablonun yuklenmesi icin bir fonksiyon ekledim--&amp;gt;
          &amp;lt;a class="nav-link" onclick="guzzleTest()" href="#guzzleTest" data-toggle="tab"&amp;gt;
              &amp;lt;i class="fas fa-server"&amp;gt;&amp;lt;/i&amp;gt; {{ __("Guzzle Test") }}
          &amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;div class="tab-content"&amp;gt;
      &amp;lt;div id="hostname" class="tab-pane active"&amp;gt;
          @include('hostname.main')
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="guzzleTest" class="tab-pane"&amp;gt;
          &amp;lt;!--burada oluşturmuş olduğum view'i ekledim--&amp;gt;
          @include('guzzleTest.main')
      &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  @endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Oluşturmuş olduğunuz blade.php dosyasında tabloyu ve inputları alacak kısmı kodlayın ve son kısmında yazacağımız scriptleri de ekleyin.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12 mb-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"users"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12 mb-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;onsubmit=&lt;/span&gt;&lt;span class="s"&gt;"addName(); return false;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row input-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nameInput"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"surnameInput"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"addNameButton"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Kullanici Ekle&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  @include("guzzleTest.scripts")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;showSwal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ __('Yükleniyor...') }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ API('get_guzzletestnames') }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;final_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;Isim&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Soyisim&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;final_html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;`&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="nx"&gt;final_html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;final_html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;Swal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;showSwal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;$nameInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#nameInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;$surnameInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#surnameInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;surname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$surnameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;



        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ API('add_guzzletestnames') }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="nx"&gt;$nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;$surnameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;guzzleTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sciptlerin bulunacağı dosya içeriginde panel aktive olduğunda çağırılacak bir fonksiyon yazın.(Bu durumda bu fonksiyon guzzleTest)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controller içerisinde yazmış olduğumuz metotları çağıracak iki fonksiyon yazın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bu fonksiyonlardan "getNames" kullanıcı listesini alıp tablo haline çeviriyor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controller'a istek göndermek için request fonksiyonu kullanılıyor. Eğer göndereciğiniz istekte veri varsa FormData sınıfından türemiş bir nesne ile ile ekleyip gönderin.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;surname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$surnameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#github-linkleri"&gt;
  &lt;/a&gt;
  Github Linkleri
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Laravel"&gt;https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Laravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Express"&gt;https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Express&lt;/a&gt;&lt;/p&gt;

</description>
      <category>liman</category>
      <category>express</category>
      <category>guzzle</category>
    </item>
    <item>
      <title>I'm Joining Amplication with a Vision to Democratize Engineering</title>
      <author>Matan Shidlov</author>
      <pubDate>Thu, 07 Oct 2021 11:41:53 +0000</pubDate>
      <link>https://dev.to/amplication/i-m-joining-amplication-with-a-vision-to-democratize-engineering-385</link>
      <guid>https://dev.to/amplication/i-m-joining-amplication-with-a-vision-to-democratize-engineering-385</guid>
      <description>&lt;p&gt;I've spent the last decade leading technology development, creating real-time low latency AI-based systems, processing billions of requests each day, and helping companies with their software architectures. Through the years, I've been working alongside highly talented software engineers and cloud architects. I've learned to appreciate the value of sound engineering that can make the difference in creating reliable, maintainable, flexible, and scalable software.&lt;br&gt;
Now I'm excited to try and make software architecture and good engineering practices more accessible to all by joining Amplication as VP of engineering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-unicorns"&gt;
  &lt;/a&gt;
  The Unicorns
&lt;/h2&gt;

&lt;p&gt;In today's economy, what once was an unreachable title "unicorn", became another milestone in companies' way to success. Companies are experiencing hyper-growth, which leads to a severe shortage of talented developers. Any crisis in history (including COVID-19) accelerates evolution and creates new opportunities. The severe lack of gifted developers was a unique opportunity for new people to join the engineering community, and they've been integrated within both big and small organizations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-engineering-is-a-scarce-commodity"&gt;
  &lt;/a&gt;
  Good Engineering Is a Scarce Commodity
&lt;/h2&gt;

&lt;p&gt;Unfortunately, tapping new sources of talent doesn't fill the shortage of experienced engineers who have extensive knowledge and understanding. Senior developers who can mentor inexperienced programmers and create intelligent, robust, scalable, maintainable, and flexible solutions are especially tough to find. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-lack-of-good-engineering"&gt;
  &lt;/a&gt;
  The Cost of Lack of Good Engineering
&lt;/h2&gt;

&lt;p&gt;I've had the privilege of helping many companies with consulting on how to architect for scale. I noticed that, in many companies, low engineering standards and poor decisions were impacting business. So many developers today are writing code that "works" but doesn't stand the test of time. The main reason for this phenomenon is lack of knowledge and insufficient training. Writing code that only "works" will not withstand any of the following dynamics:&lt;br&gt;
Logic Changes - adding, removing, and updating business logic&lt;br&gt;
Data Changes - adding, removing, and updating fields and entities&lt;br&gt;
Data Accumulates - what was once thousands of entries grows to hundreds of thousands, millions, and billions&lt;br&gt;
Usage Changes - Getting more and more traffic as a result of growth and usage spikes that leads to uneven loads&lt;br&gt;
Infrastructure Changes - Changes in API's of 3rd party services or products (for example, databases)&lt;br&gt;
Staff changes - Original committers leave and which results in knowledge loss.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#democratization-of-engineering-is-the-need-of-the-hour"&gt;
  &lt;/a&gt;
  Democratization of Engineering Is the Need of the Hour
&lt;/h2&gt;

&lt;p&gt;I have a vision that with Amplication, an open-source low-code platform, we can empower developers. Amplication can take care of those necessities of repetitive code and function as a developer private architect helping implement great software with a solid foundation. In my vision, senior developers will appreciate Amplication as an uncompromising shortcut, and developers at the beginning of their career will find it extremely useful as an enabler tool for quality engineering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amplication"&gt;
  &lt;/a&gt;
  Amplication
&lt;/h2&gt;

&lt;p&gt;Amplication is an open-source low-code platform for backend and full-stack developers. Amplication's goal is to help developers and empower their code generation. The application code owner is the developer, and Amplication supports the project by providing a robust base. When developing projects with Amplication, developers can create great applications without the nuisance of being "bogged down" with building and maintaining the application's infrastructure and architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-as-a-policy"&gt;
  &lt;/a&gt;
  Open as a Policy
&lt;/h2&gt;

&lt;p&gt;What a better way to democratize software engineering than open-sourcing it and building a community around the principles of open engineering. &lt;br&gt;
I'm excited to start this journey with Amplication. I will use this platform to share our architecture decisions, best practices, and coding standards along the way and publicly build Amplication with this great community.&lt;/p&gt;

&lt;p&gt;Please share your experience using Amplication and your vision of how Amplication can help you in your next project.&lt;/p&gt;

&lt;p&gt;I'm always available along with the rest of the team at our Discord channel. So please join, to talk to me about anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-discord"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/amplication/amplication"&gt;github&lt;/a&gt;, &lt;a href="https://discord.com/invite/Z2CG3rUFnu"&gt;discord&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>architecture</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Day 8: Positioning buttons over embedded Google Maps</title>
      <author>Masa Kudamatsu</author>
      <pubDate>Thu, 07 Oct 2021 11:39:31 +0000</pubDate>
      <link>https://dev.to/masakudamatsu/day-8-positioning-buttons-over-embedded-google-maps-3d5b</link>
      <guid>https://dev.to/masakudamatsu/day-8-positioning-buttons-over-embedded-google-maps-3d5b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;For a web app that embeds full-screen Google Maps, I position the menu button at the top-left corner of the screen, the search button at the top-right, and the buttons for the app's main features at the bottom-right (as seen in the image at the top of this article). &lt;/p&gt;

&lt;p&gt;For implementation, I use &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; with “&lt;a href="https://css-tricks.com/what-are-design-tokens/"&gt;design tokens&lt;/a&gt;” and &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/#styling"&gt;data attribute selectors&lt;/a&gt; for making CSS code easy to maintain and for speeding up the browser's rendering of these buttons (at least a little bit).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As explained in the previous article (&lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;), I've designed (and written the HTML/CSS code for) a cloud-shaped button for &lt;em&gt;My Ideal Map App&lt;/em&gt;, a web app I'm currently making to improve the UX of Google Maps.&lt;/p&gt;

&lt;p&gt;Now I need to decide how many of, and which kinds of, buttons to display on the app's main user interface, with the appropriate choice of button labels (which will be described in Section 1 below). &lt;/p&gt;

&lt;p&gt;Then, I need to design the layout of these four buttons, with the least amount of friction with the user's mental model (Section 2). &lt;/p&gt;

&lt;p&gt;Finally, I need to implement the layout with CSS code, by taking into consideration the speed of rendering the app's UI and the ease of maintaining the code (Section 3).&lt;/p&gt;

&lt;p&gt;This article documents these three steps I've taken, including what I have learned during the process. Hopefully, these pieces of information will help someone who develop their own web app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-four-buttons-and-their-label-icons"&gt;
  &lt;/a&gt;
  1. Four buttons and their label icons
&lt;/h2&gt;

&lt;p&gt;First, I've decided to show &lt;em&gt;four&lt;/em&gt; buttons on the screen immediately after the user logs in to &lt;em&gt;My Ideal Map App&lt;/em&gt;. Beyond four, I believe the user will need to take a moment to figure out which button to tap/click. Too many options will backfire, making us less happy (&lt;a href="https://www.ted.com/talks/barry_schwartz_the_paradox_of_choice"&gt;Schwartz 2005&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7X7a7et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4w5wr1z069ds0tx5si9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7X7a7et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4w5wr1z069ds0tx5si9.jpg" alt="Homer Simpsons is scratching his head, surrounded by dozens of buttons around him"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Homer Simpsons scratches his head, surrounded by dozens of buttons&lt;/strong&gt; (image source: &lt;a href="https://babich.biz/7-rules-of-buttons/"&gt;Babich 2018&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The functions of these four buttons, and their label icons, are as follows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-search-button"&gt;
  &lt;/a&gt;
  1.1 Search button
&lt;/h3&gt;

&lt;p&gt;The first is the search button. Tapping it will open a search box to find a place of interest. Searching for a place is one of the major features of &lt;em&gt;My Ideal Map App&lt;/em&gt;. It allows the user to find a place of their interest to save. It also allows the user to plan their trip by searching for a destination to discover the saved places around it (see &lt;a href="https://dev.to/masakudamatsu/day-2-finding-design-concept-to-drive-ui-design-process-49g3"&gt;&lt;strong&gt;Day 2 of this blog series&lt;/strong&gt;&lt;/a&gt; for an example of this user experience).&lt;/p&gt;

&lt;p&gt;An alternative is to show a search box at the top of the screen by default, as the Google Maps app does. But the top part of the map will then be hidden beneath the search box. Consequently, the user may miss some places of their interest near the top of the screen. There will be no difference in the number of taps/clicks to start the search if the app automatically focuses on the search box after the search button is tapped/clicked. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Ideal Map App&lt;/em&gt; uses the magnifying glass icon as the label of the search button. The magnifying glass icon is so common that the user can immediately tell what the button will do when tapped (&lt;a href="https://www.nngroup.com/articles/magnifying-glass-icon/"&gt;Sherwin 2014&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBn_SP45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x5cqlq7g6x3vnkshl0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBn_SP45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x5cqlq7g6x3vnkshl0h.png" alt="Magnifying glass icon"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material+Icons+Outlined:search:"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-save-button"&gt;
  &lt;/a&gt;
  1.2 Save button
&lt;/h3&gt;

&lt;p&gt;The second button is for saving a place of the user's interest. This is another of the major features of &lt;em&gt;My Ideal Map App&lt;/em&gt;, as it allows the user to remember the places of their interest for future (see &lt;a href="https://dev.to/masakudamatsu/day-3-visualizing-design-concept-with-mood-boards-nii"&gt;&lt;strong&gt;Day 3 of this blog series&lt;/strong&gt;&lt;/a&gt; for an example of this user experience). &lt;/p&gt;

&lt;p&gt;While the Google Maps app doesn't explicitly show how to save a place on its main UI, &lt;em&gt;My Ideal Map App&lt;/em&gt; will always show the save button on the map so the user can always start the process of saving a place with one tap. &lt;/p&gt;

&lt;p&gt;As the label of the save button, &lt;em&gt;My Ideal Map App&lt;/em&gt; uses the plus sign icon. It's an icon that we immediately associate with the addition of something to the user's database: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odIhd0ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr54khuaq1it9zt8vj8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odIhd0ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr54khuaq1it9zt8vj8f.png" alt="Plus sign icon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material%2BIcons%2BOutlined%3Aadd%3A&amp;amp;icon.query=add"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-location-button"&gt;
  &lt;/a&gt;
  1.3 Location button
&lt;/h3&gt;

&lt;p&gt;The third button is for showing the user's current location. Tapping it will enable GPS and show the place where the user is currently standing (or sitting). This button is also part of the core user experiences of &lt;em&gt;My Ideal Map App&lt;/em&gt;, where the user can find the saved places around their current location (see &lt;a href="https://dev.to/masakudamatsu/creating-saas-to-solve-my-own-problem-4gk9"&gt;&lt;strong&gt;Day 1 of this blog series&lt;/strong&gt;&lt;/a&gt; for an example of this user experience).&lt;/p&gt;

&lt;p&gt;While the Google Maps app uses &lt;a href="https://fonts.google.com/icons?selected=Material%2BIcons%2BOutlined%3Anear_me%3A"&gt;a compass needle icon&lt;/a&gt;, &lt;em&gt;My Ideal Map App&lt;/em&gt; uses an airplane takeoff icon often used for indicating the departure gates in the airport. Why? Because seeing our current location on the map is like flying up into the sky and looking down to understand where we are—the idea in line with the design concept of &lt;em&gt;My Ideal Map App&lt;/em&gt;: dyeing a map in the user's hue from the sky (see &lt;a href="https://dev.to/masakudamatsu/day-2-finding-design-concept-to-drive-ui-design-process-49g3"&gt;&lt;strong&gt;Day 2 of this blog series&lt;/strong&gt;&lt;/a&gt; for more detail on the design concept of &lt;em&gt;My Ideal Map App&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-gdD47Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7l3lwhhpgsirb5fl3n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-gdD47Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7l3lwhhpgsirb5fl3n0.png" alt="Airplane taking off"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flight takeoff icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material%2BIcons%2BOutlined%3Anear_me%3A&amp;amp;icon.query=flight%2Btakeoff"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-menu-button"&gt;
  &lt;/a&gt;
  1.4 Menu button
&lt;/h3&gt;

&lt;p&gt;The last button is for showing the menu of other features of the map. Less important features of an app are best tucked away in the hidden menu which will be opened by clicking/tapping the menu button. This way, the user won't be visually distracted when they execute the app's main features.&lt;/p&gt;

&lt;p&gt;Its label should be nothing but the infamous hamburger icon. When it was first introduced to mobile webpage design in the mid-2010s, it stirred controversy (e.g., &lt;a href="https://www.nngroup.com/articles/hamburger-menus/"&gt;Pernice and Budiu 2016&lt;/a&gt;). But since then, so many websites have adopted it as a menu button. I think it's fair to assume that the user understands what those three horizontal stripes represent. Its use is also justified as the menu for secondary features (&lt;a href="https://uxdesign.cc/the-state-of-hamburger-menu-a0a0c0a93aec"&gt;Seno 2019&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PpdWevp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsqapjo81hi1qn4d4w2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PpdWevp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsqapjo81hi1qn4d4w2u.png" alt="Three horizontal stripes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hamburger icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material+Icons+Outlined:near_me:&amp;amp;icon.query=menu"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-material-icons"&gt;
  &lt;/a&gt;
  1.5 Material Icons
&lt;/h3&gt;

&lt;p&gt;There are many icon repositories out there, but &lt;a href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt; and &lt;a href="https://fonts.google.com/icons"&gt;Material Icons&lt;/a&gt; are the only ones that have all these four icons. Given that &lt;em&gt;My Ideal Map App&lt;/em&gt; embeds Google Maps, Material Icons, designed by Google, is more likely to ensure visual consistency in the user interface. &lt;/p&gt;

&lt;p&gt;So I download the SVG data of these four icons from &lt;a href="https://fonts.google.com/icons"&gt;Google Fonts&lt;/a&gt;, import each to &lt;a href="https://www.sketch.com/"&gt;Sketch&lt;/a&gt; to center-align them over the cloud-shaped button, and export the results as SVG code. (See &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt; for how I've written the HTML code for showing buttons with the exported SVG code.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcT-yd52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awtsxapu2zr83n84po0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcT-yd52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awtsxapu2zr83n84po0u.png" alt="A row of four cloud-shaped buttons each of which has an icon label of the magnifying glass, the plus sign, the airplane taking-off, and the three horizontal stripes, respectively"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud-shaped buttons created with Sketch app&lt;/strong&gt; (image source: author)&lt;/p&gt;

&lt;p&gt;Now buttons are ready. Next, I need to decide which button should be positioned in which part of the user interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-positioning-buttons-design-considerations"&gt;
  &lt;/a&gt;
  2. Positioning buttons: design considerations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#21-search-button"&gt;
  &lt;/a&gt;
  2.1 Search button
&lt;/h3&gt;

&lt;p&gt;First of all, the search button should be placed at the &lt;em&gt;top-right&lt;/em&gt; corner of the screen. &lt;a href="https://www.nngroup.com/articles/magnifying-glass-icon/?lm=search-visible-and-simple&amp;amp;pt=article"&gt;Sherwin (2014)&lt;/a&gt; reports the following user research finding by Nielsen Norman Group:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“People first look to the upper-right corner for search. If they don’t find it there, they start scanning the top of the page.” &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's a bit old research finding, but as far as I know, many websites and applications still place a search button at the top-right corner. So it's fair to assume that this research finding is still relevant in 2021.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-menu-button"&gt;
  &lt;/a&gt;
  2.2 Menu button
&lt;/h3&gt;

&lt;p&gt;The menu button is placed &lt;em&gt;top-left&lt;/em&gt;, following a common pattern of user interface. Some websites place it at top-right, but the search button already occupies the top-right corner of the screen. If the menu button is placed next to a search button, the user may get confused as it's not a common UI pattern. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-buttons-for-the-apps-core-features"&gt;
  &lt;/a&gt;
  2.3 Buttons for the app's core features
&lt;/h3&gt;

&lt;p&gt;The remaining two buttons are placed bottom-right, because the user needs to see the entire screen first before deciding whether to press these buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb"&gt;Syzonenko (2019)&lt;/a&gt; argues that buttons at bottom-right make sense when the user scans the screen in a z-shaped manner, while buttons at bottom-left make more sense if the user interface contains just one column of left-aligned UI elements (which induces the F-shaped pattern of the user's eye movement). &lt;/p&gt;

&lt;p&gt;Applying this logic to a map application, the user will scan the map in a z-pattern or possibly diagonally from top-left to bottom-right. The user wants to tap the location button once they learn that the map is showing somewhere else. Or they want to tap the save button once they know a place of their interest is shown on the map. So it makes sense to place these two buttons at the bottom-right corner of the screen. &lt;/p&gt;

&lt;p&gt;For the menu and search buttons, in contrast, the user doesn't need to check what the map is currently showing. When they want to change the user setting, or when they want to search for a place, it doesn't matter which part of the earth the screen is currently showing. So it makes sense to place them at the top of the screen.&lt;/p&gt;

&lt;p&gt;Among the two bottom-right buttons, the location button is placed above the save button. Moving a map to the user's current location is like flying across the sky, and that's why the location button has the flight-takeoff icon on it. It'd be incongruent to this metaphor if the button to trigger this process is "capped" by another button from above.&lt;/p&gt;




&lt;p&gt;The overall design decision has been made. Now it's time to start coding while deciding the detail of button-positioning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-positioning-buttons-using-styled-components"&gt;
  &lt;/a&gt;
  3. Positioning buttons: using Styled Components
&lt;/h2&gt;

&lt;p&gt;To implement the positioning of buttons as described above with &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; (my favorite CSS-in-JS tool), I'll create a &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;styleCloudButton&lt;/code&gt; contains all the other CSS declarations for styling a button (see &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt; for detail). In the rest of this article, I'll define the &lt;code&gt;positionButton&lt;/code&gt; variable with the CSS code for positioning a button. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-rendering-buttons-over-the-map"&gt;
  &lt;/a&gt;
  3.1 Rendering buttons over the map
&lt;/h3&gt;

&lt;p&gt;The first thing to do with CSS is to make each button shown over the full-screen embedded Google Maps.&lt;/p&gt;

&lt;p&gt;We have the following DOM structure in the HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Menu&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Search&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Current&lt;/span&gt; &lt;span class="na"&gt;location&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Save-a-place&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Embedded&lt;/span&gt; &lt;span class="na"&gt;Google&lt;/span&gt; &lt;span class="na"&gt;Maps&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where I've set the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element (which embeds Google Maps) to spread across the whole screen with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This CSS code is what &lt;a href="https://developers.google.com/maps/documentation/javascript/overview#HTML5"&gt;Google Maps Platform documentation&lt;/a&gt; recommends.&lt;/p&gt;

&lt;p&gt;To show the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements over the &lt;code&gt;&amp;lt;div id="map"&amp;gt;&lt;/code&gt;, they need to be absolutely-positioned" with the "z-index" of 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the map occupies the full screen, by default, browsers won't make buttons visible to the user. With &lt;code&gt;position: absolute;&lt;/code&gt;, the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements will be lifted up over other HTML elements.&lt;/p&gt;

&lt;p&gt;Plus, &lt;code&gt;z-index:1&lt;/code&gt; is necessary given our DOM structure where the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements come before the &lt;code&gt;&amp;lt;div id="map"&amp;gt;&lt;/code&gt;. I initially didn't understand why. But inspecting DevTools, I've learned that  &lt;code&gt;&amp;lt;div id="map"&amp;gt;&lt;/code&gt; is styled with &lt;code&gt;position: relative&lt;/code&gt;. Seems like Google Maps JavaScript API automatically does this. Consequently, the infamously confusing "stacking context" principle applies (see &lt;a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/"&gt;Walton 2013&lt;/a&gt;, &lt;a href="https://www.joshwcomeau.com/css/stacking-contexts/"&gt;Comeau 2021b&lt;/a&gt;, for example), where the stacking order of HTML elements with &lt;code&gt;position:relative&lt;/code&gt; and &lt;code&gt;position:absolute&lt;/code&gt; will be based on its position in the HTML code: the first element goes beneath the second one. So the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements go beneath the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. To lift up buttons over the map, we need &lt;code&gt;z-index:1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we change the order of HTML elements so the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element comes first, we don't need &lt;code&gt;z-index:1&lt;/code&gt;. But I may need to change the order of these elements later, and I'm sure I'll get panicked by having buttons disappear. For future-proof, I think it's best to add &lt;code&gt;z-index:1&lt;/code&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-improving-code-readability-with-design-tokens"&gt;
  &lt;/a&gt;
  3.2 Improving code readability with "design tokens"
&lt;/h3&gt;

&lt;p&gt;The next step is to pick the exact pixel values to position each button relative to the screen edges. I start with the button's clickable area dimension (48px high and 56px wide) and divide these two values with 4 to obtain 12px for y-axis and 14px for x-axis. I use these values to create a space between the buttons and the screen edges, because the layout will look great when dimensions are set with multiples of the same numbers.&lt;/p&gt;

&lt;p&gt;I can hard-code these values into CSS code, but then the code doesn't tell us why I've picked 12px or 14px. This is a long-time headache for me, ever since I learned about CSS. But I realize that I can embed the reasons to choose particular values into CSS code by borrowing an idea of &lt;em&gt;design tokens&lt;/em&gt; (see &lt;a href="https://css-tricks.com/what-are-design-tokens/"&gt;Rendle 2019&lt;/a&gt; for a good introduction; see also &lt;a href="https://specifyapp.com/blog/introduction-to-design-tokens"&gt;Chenais 2021&lt;/a&gt; for how Adobe's Specify app adopts it). &lt;/p&gt;

&lt;p&gt;Specifically, I create a file called &lt;code&gt;designtokens.js&lt;/code&gt; in which I set the dimension values as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;48px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;56px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, the code incorporates how I've derived the values of 12px and 14px. &lt;code&gt;48px&lt;/code&gt; is assigned the name of &lt;code&gt;height 100&lt;/code&gt;. A quarter of this length, &lt;code&gt;12px&lt;/code&gt;, is therefore called &lt;code&gt;height 25&lt;/code&gt;. Similarly, &lt;code&gt;56px&lt;/code&gt; is called &lt;code&gt;width 100&lt;/code&gt;. As a quarter of this length, &lt;code&gt;14px&lt;/code&gt; is called &lt;code&gt;width 25&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Incidentally, the above code doesn't exactly follow the &lt;a href="https://design-tokens.github.io/community-group/format/#design-token-0"&gt;recommended syntax of design tokens&lt;/a&gt;, but I think that's fine because I don't plan to use a tool like &lt;a href="https://amzn.github.io/style-dictionary/#/"&gt;Style Dictionary&lt;/a&gt;. I may need to follow the recommended syntax if I decide to create iOS/Android versions of &lt;em&gt;My Ideal Map App&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I can now refactor the code for setting a button's clickable area with these "design tokens":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./designtokens&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setClickableArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  height: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  width: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For your information, the original code for &lt;code&gt;setClickableArea&lt;/code&gt; is described in Section 5 of &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-positioning-buttons-at-the-screen-corners"&gt;
  &lt;/a&gt;
  3.3 Positioning buttons at the screen corners
&lt;/h3&gt;

&lt;p&gt;Now, to position the menu button at the top-left corder, I can code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
  top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  left: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means that the top-left corner of the menu button is 12px down from the top screen edge and 14px to the right of the left screen edge.&lt;/p&gt;

&lt;p&gt;For the other three buttons, I can replace the last two CSS declarations in the above code as follows.&lt;/p&gt;

&lt;p&gt;For the search button at top-right:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means that the top-right corner of the button is 12px down from the top screen edge and 14px to the left of the right screen edge.&lt;/p&gt;

&lt;p&gt;For the save button at bottom-right, I need to take into consideration that the embedded Google Maps will show a row of tiny rectangle buttons at the bottom-right corner (which seems to be never disabled):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BvVnHGmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jge9abt98a89jjclqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BvVnHGmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jge9abt98a89jjclqq.png" alt='A series of four tiny rectangular buttons with the labels of "Keyboard shortcuts", "Map data © 2021", "Terms of Use", "Report a map error"'&gt;&lt;/a&gt; &lt;strong&gt;Bottom-right corner of embedded Google Maps&lt;/strong&gt; (screenshot by the author)&lt;/p&gt;

&lt;p&gt;So I add an extra 12px to the vertical distance between the save button and the bottom edge of the screen. I code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where I define &lt;code&gt;height 50&lt;/code&gt; to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;48px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// ADDED&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;56px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means that the bottom-right corner of the button is 24px up from the bottom screen edge and 14px to the left of the right screen edge.&lt;/p&gt;

&lt;p&gt;For the current location button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 175&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;height 175&lt;/code&gt; is defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 175&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;84px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// ADDED&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;48px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;56px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's the sum of the space between the two buttons (&lt;code&gt;height 25&lt;/code&gt;), the height of the save button (&lt;code&gt;height 100&lt;/code&gt;), and the space below the save button (&lt;code&gt;height 50&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;These CSS declarations will position the four buttons as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJo1Y3va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rhcdelxga7vfgxhx9yj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJo1Y3va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rhcdelxga7vfgxhx9yj.png" alt="Menu button at top-left, search button at top-right, the other two buttons at top-bottom over the embedded Google Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User interface of &lt;em&gt;My Ideal Map App&lt;/em&gt; at this moment&lt;/strong&gt; (screenshot by the author)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-three-ways-of-switching-the-styling-for-positioning-buttons"&gt;
  &lt;/a&gt;
  3.4 Three ways of switching the styling for positioning buttons
&lt;/h3&gt;

&lt;p&gt;However, I haven't finished coding yet. I want to style all the four buttons as the same &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component with only the styling for positioning switched by button.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approach-1-props"&gt;
  &lt;/a&gt;
  Approach 1: Props
&lt;/h4&gt;

&lt;p&gt;To switch styling for each button, the standard approach with Styled Components is to use props  (see &lt;a href="https://styled-components.com/docs/basics#adapting-based-on-props"&gt;Styled Components Documentation&lt;/a&gt; for detail). For example, to position the menu button and the search button at top-left and top-right, respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
  &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;$topLeft&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$topLeft&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;`
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    left: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;$topRight&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$topRight&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;`
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;; 
    right: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;; 
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, when rendering the search button, set the &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component's &lt;code&gt;$topRight&lt;/code&gt; prop to be true:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SearchButton.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="na"&gt;topRight&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the menu button, use &lt;code&gt;&amp;lt;Button $topLeft /&amp;gt;&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Initially I used this approach. However, I learned from &lt;a href="https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/"&gt;Arvanitakis (2019)&lt;/a&gt; that such a "dynamic" styled component takes longer to be rendered. It's best to avoid using props for performance: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some CSS-in-JS libraries will optimize their execution when your CSS has no dependencies on theme or props. The more “static” your tagged  templates are, the higher the chances that your CSS-in-JS runtime will  execute faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;—&lt;a href="https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/"&gt;Aggelos Arvanitakis (2019)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But how can I switch the style by button without using props? &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approach-2-css-variables-with-inline-style"&gt;
  &lt;/a&gt;
  Approach 2: CSS variables with inline style
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/css/styled-components/"&gt;Comeau (2021a)&lt;/a&gt; proposes using CSS variables with inline style (see also &lt;a href="https://www.joshwcomeau.com/react/demystifying-styled-components/"&gt;Comeau 2021c&lt;/a&gt; for why this improves performance). For the search button, it goes something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
  top: var(--button-top, auto);     /* REVISED */
  left: var(--button-left, auto);   /* REVISED */
  right: var(--button-right, auto); /* REVISED */
  bottom: var(--button-bottom, auto); /* REVISED */
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; properties are set with CSS variables. If these variables are not defined elsewhere, the &lt;code&gt;auto&lt;/code&gt; value will be applied (which is the default value for these properties).&lt;/p&gt;

&lt;p&gt;Then we inject the variable definitions as the &lt;code&gt;style&lt;/code&gt; attribute when rendering the &lt;code&gt;Button&lt;/code&gt; component. For the search button, the React code goes like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SearchButton.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;                                  &lt;span class="c1"&gt;// REVISED&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--button-top&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c1"&gt;// REVISED&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--button-right&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;// REVISED&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd never used CSS variables (aka. CSS custom properties), but it's increasingly becoming popular among web developers (see &lt;a href="https://epicreact.dev/css-variables"&gt;Dodds 2020&lt;/a&gt;). And the approach described above opened my eyes: CSS variables are NOT the substitute of Styled Components but they are complements! We can benefit from the best parts of both! &lt;/p&gt;

&lt;p&gt;So I decided to spend half a day to learn about it. &lt;a href="https://css-tricks.com/a-complete-guide-to-custom-properties/"&gt;Coyier (2021)&lt;/a&gt; was very helpful.&lt;/p&gt;

&lt;p&gt;But, personally, I don't like the idea that CSS declarations are part of the React component code (i.e, &lt;code&gt;SearchButton.js&lt;/code&gt;). I want all the pieces of information on styling buttons to be in one place, that is, &lt;code&gt;Button.js&lt;/code&gt;. Then I know where to look at in the future if I want to change the styling of buttons.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approach-3-data-attribute-selectors"&gt;
  &lt;/a&gt;
  Approach 3: Data attribute selectors
&lt;/h4&gt;

&lt;p&gt;I've found a workaround: the use of data attribute selectors (see &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/"&gt;Coyier 2020&lt;/a&gt; for an introductory tutorial). This approach appears to be popular for switching the color scheme between light and dark modes (&lt;a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/#dark-mode-in-the-wild"&gt;Adhuham 2020&lt;/a&gt;, &lt;a href="https://epicreact.dev/css-variables/"&gt;Dodds 2020&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Take the search button as an example. Render the button in the React code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SearchButton.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* REVISED */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I add the &lt;code&gt;data-position&lt;/code&gt; attribute and set its value to be &lt;code&gt;top-right&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;For the menu button, I replace it with &lt;code&gt;&amp;lt;Button data-position="top-left" /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, when styling the &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;

  /* REVISED FROM HERE */
  &amp;amp;[data-position='top-left'] {
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    left: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
  &amp;amp;[data-position='top-right'] {
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    right: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
  /* REVISED UNTIL HERE */
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can repeat this for the other two buttons. &lt;/p&gt;

&lt;p&gt;This way, depending on the value of the &lt;code&gt;data-position&lt;/code&gt; attribute, the &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; property values will change, positioning each button at a different location.&lt;/p&gt;

&lt;p&gt;Now all the pieces of information on styling buttons are in one place. Plus, the styling of buttons is applied without running JavaScript code, because all the styling information is already written as CSS. It will speed up the rendering of buttons.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#performance-consequences"&gt;
  &lt;/a&gt;
  Performance consequences
&lt;/h4&gt;

&lt;p&gt;But how much? I deploy the app with Cloudflare Pages for both the versions with props and with the data attribute selectors. Then I test both versions with &lt;a href="https://www.webpagetest.org/"&gt;WebPageTest&lt;/a&gt;. Here are the results (click the link in the caption to see the deployed app):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0z8L45-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax0s4i4n4ebwixfyaux4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0z8L45-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax0s4i4n4ebwixfyaux4.png" alt="A table of WebPageTest performance results"&gt;&lt;/a&gt; &lt;strong&gt;WebPageTest performance results &lt;a href="https://ec8754af.mima.pages.dev/"&gt;when positioning buttons with props&lt;/a&gt;&lt;/strong&gt; (image source: WebPageTest)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_NxTLAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17klmgwna93e8u1rcmvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_NxTLAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17klmgwna93e8u1rcmvg.png" alt="A table of WebPageTest performance results"&gt;&lt;/a&gt; &lt;strong&gt;WebPageTest performance results &lt;a href="https://23617a33.mima.pages.dev/"&gt;when positioning buttons with data attribute selectors&lt;/a&gt;&lt;/strong&gt; (image source: WebPageTest)&lt;/p&gt;

&lt;p&gt;With data attribute selectors, the rendering speed is slightly improved, with Largest Contentful Paint (LCP) 0.2 seconds faster. &lt;/p&gt;

&lt;p&gt;LCP is one of the &lt;a href="https://web.dev/vitals/#core-web-vitals"&gt;Core Web Vitals&lt;/a&gt;, which affects Google search ranking (&lt;a href="https://developers.google.com/search/blog/2020/05/evaluating-page-experience"&gt;Subramanian 2020&lt;/a&gt;). So it is desirable to have it as short as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next step
&lt;/h2&gt;

&lt;p&gt;Making buttons for &lt;em&gt;My Ideal Map App&lt;/em&gt; is not finished yet, however. I need to set their color scheme for the dark mode. And there is a big gotcha for switching the color scheme between light and dark modes, because I use Next.js, a static site generator. Next article will discuss these experiences of mine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Adhuham (2020) “&lt;a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/"&gt;A Complete Guide to Dark Mode on the Web&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Jul 1, 2020.&lt;/p&gt;

&lt;p&gt;Arvanitakis, Aggelos (2019) “&lt;a href="https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/"&gt;The unseen performance costs of modern CSS-in-JS libraries in React apps&lt;/a&gt;”, &lt;em&gt;Web Performance Calendar&lt;/em&gt;, Dec 9, 2019.&lt;/p&gt;

&lt;p&gt;Chenais, Louis (2021) “&lt;a href="https://specifyapp.com/blog/introduction-to-design-tokens"&gt;Introduction to design tokens&lt;/a&gt;”, &lt;em&gt;Specify Blog&lt;/em&gt;, May 27, 2021.&lt;/p&gt;

&lt;p&gt;Comeau, Josh (2021a) “&lt;a href="https://www.joshwcomeau.com/css/styled-components/"&gt;The styled-components Happy Path&lt;/a&gt;”, joshwcomeau.com, Feb 21, 2021.&lt;/p&gt;

&lt;p&gt;Comeau, Josh (2021b) “&lt;a href="https://www.joshwcomeau.com/css/stacking-contexts/"&gt;What the heck, z-index??&lt;/a&gt;”, &lt;em&gt;joshwcomeau.com&lt;/em&gt;, Jun 9, 2021.&lt;/p&gt;

&lt;p&gt;Comeau, Josh (2021c) “&lt;a href="https://www.joshwcomeau.com/react/demystifying-styled-components/"&gt;Demystifying styled-components&lt;/a&gt;”, joshwcomeau.com, Jun 27, 2021.&lt;/p&gt;

&lt;p&gt;Coyier, Chris (2020) “&lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/"&gt;A Complete Guide to Data Attributes&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Feb 17, 2020.&lt;/p&gt;

&lt;p&gt;Coyier, Chris (2021) “&lt;a href="https://css-tricks.com/a-complete-guide-to-custom-properties/"&gt;A Complete Guide to Custom Properties&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Apr 27, 2021.&lt;/p&gt;

&lt;p&gt;Dodds, Kent C. (2020) “&lt;a href="https://epicreact.dev/css-variables/"&gt;Use CSS Variables instead of React Context&lt;/a&gt;”, &lt;em&gt;Epic React&lt;/em&gt;, Oct 2020.&lt;/p&gt;

&lt;p&gt;Pernice, Kara, and Raluca Budiu (2016) “&lt;a href="https://www.nngroup.com/articles/hamburger-menus/"&gt;Hamburger Menus and Hidden Navigation Hurt UX Metrics&lt;/a&gt;”, Nielsen Norman Group, Jun 26, 2016.&lt;/p&gt;

&lt;p&gt;Rendle, Robin (2019) “&lt;a href="https://css-tricks.com/what-are-design-tokens/"&gt;What Are Design Tokens?&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Apr 3, 2019.&lt;/p&gt;

&lt;p&gt;Schwartz, Barry (2005) “&lt;a href="https://www.ted.com/talks/barry_schwartz_the_paradox_of_choice"&gt;The paradox of choice&lt;/a&gt;”, TED, July 2005.&lt;/p&gt;

&lt;p&gt;Seno, Broto (2019) “&lt;a href="https://uxdesign.cc/the-state-of-hamburger-menu-a0a0c0a93aec"&gt;The state of the hamburger menu&lt;/a&gt;”, &lt;em&gt;UX Collective&lt;/em&gt;, Apr 5, 2019.&lt;/p&gt;

&lt;p&gt;Sherwin, Katie (2014) “&lt;a href="https://www.nngroup.com/articles/magnifying-glass-icon/"&gt;The Magnifying-Glass Icon in Search Design: Pros and Cons&lt;/a&gt;", &lt;em&gt;Nielsen Norman Group&lt;/em&gt;, Feb 23, 2014.&lt;/p&gt;

&lt;p&gt;Subramanian, Sowmya (2020) “&lt;a href="https://developers.google.com/search/blog/2020/05/evaluating-page-experience"&gt;Evaluating page experience for a better web&lt;/a&gt;”, Google Search Central Blog, May 28, 2020.&lt;/p&gt;

&lt;p&gt;Syzonenko, Artem (2019) “&lt;a href="https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb"&gt;Buttons on the web: placement and order&lt;/a&gt;”, &lt;em&gt;UX Collective&lt;/em&gt;, May 26, 2019.&lt;/p&gt;

&lt;p&gt;Walton, Philip (2013) “&lt;a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/"&gt;What No One Told You About Z-Index&lt;/a&gt;”, philipwalton.com, Jan 15, 2013.&lt;/p&gt;

</description>
      <category>googlemaps</category>
      <category>styledcomponents</category>
      <category>css</category>
      <category>uidesign</category>
    </item>
    <item>
      <title>Development Team You Need to Build an Investment App</title>
      <author>Anna</author>
      <pubDate>Thu, 07 Oct 2021 11:24:56 +0000</pubDate>
      <link>https://dev.to/husievaanna/development-team-you-need-to-build-an-investment-app-194b</link>
      <guid>https://dev.to/husievaanna/development-team-you-need-to-build-an-investment-app-194b</guid>
      <description>&lt;p&gt;Recently I came across the Forbes article that revealed some numbers related to investing. It turned out that investing has become prevalent, and more than 96 million people in the US are active investors. So this information got me thinking about the investment opportunities. Why do people invest and in what way do they actually do it? &lt;/p&gt;

&lt;p&gt;I completed my own research and discovered that people tend to invest because they are worried about their retirement and comfortable living in the near future, they strive to achieve higher level of financial security, and most importantly they want to increase their current wealth. &lt;/p&gt;

&lt;p&gt;And when it comes to the investment ways, it turned out that people prefer using digital helpers - web and mobile applications. So what does it all mean? Simply that investment popularity is growing and there is a huge demand in new custom investment platforms on the fintech market. &lt;/p&gt;

&lt;p&gt;This investment fever can be a perfect business opportunity. By developing an investment solution now and entering the market, a startup company can become highly profitable. &lt;/p&gt;

&lt;p&gt;So when it comes to investment app development, where should you start from? First of all, you need to find a reliable developers team who can guide you through all crucial development steps and deliver a top-notch solution. Speaking about the developers team, you need the following specialists to complete your investment platform: &lt;/p&gt;

&lt;p&gt;Business Analyst - who will complete all necessary researches and help you with the selection of necessary tech stack and app architecture, write technical documentation and project requirements.&lt;/p&gt;

&lt;p&gt;Designer - who is going to provide you first with wireframes of your future solution and its overall design concept, and then create a unique user-friendly design. &lt;/p&gt;

&lt;p&gt;Back-end developers - who will write high-quality code and perform all kinds of necessary integrations. &lt;/p&gt;

&lt;p&gt;HTML\CSS coders - who will be responsible for the front-end part of your solution.&lt;/p&gt;

&lt;p&gt;Quality assurance specialists - whose job will be to perform all kinds of quality, performance and security checks. &lt;/p&gt;

&lt;p&gt;Scrum Master - who will be in charge of all processes and make sure that everything is developed on time and within the discussed budget.  &lt;/p&gt;

&lt;p&gt;And while everything is quite clear with the team that you will need, there still can be one question left in your head. How much custom investment app development may cost in 2021? Well, the final price depends on many factors starting with the app complexity and feature set, and ending with the selection of a platform. &lt;/p&gt;

&lt;p&gt;The price of web and mobile investment apps differ greatly. If you take approximate prices - mobile apps may cost you up to $45,000 per one platform (iOS or Android) and web solutions can be up to $50,000-$75,000. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>startup</category>
      <category>mobile</category>
    </item>
  </channel>
</rss>
