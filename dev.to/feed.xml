<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Encryption without passwords</title>
      <author>Gál Péter</author>
      <pubDate>Sun, 11 Jul 2021 14:16:30 +0000</pubDate>
      <link>https://dev.to/wault/encryption-without-passwords-57bj</link>
      <guid>https://dev.to/wault/encryption-without-passwords-57bj</guid>
      <description>&lt;p&gt;In modern encryption, you need a key/password/secret to be able to securely encrypt/decrypt data. This is the idea behind symmetric encryption. In this article, I'm going to drive you through how is the security provided without ever needing to remember a password.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-encrypt-something-in-the-first-place"&gt;
  &lt;/a&gt;
  How can we encrypt something in the first place?
&lt;/h3&gt;

&lt;p&gt;There are lots of ways to encrypt something. When it comes to storing your information on a Safe, we are using an asymmetric encryption method, called AES-256 (Advanced Encryption Standard).&lt;/p&gt;

&lt;p&gt;When we create a new safe, we generate a new secret key with them. This will be then used to encrypt all of our data in that particular safe. We are using a 128-character long hex string as our secret (512 bits), which is much more secure, than any password that we could remember.&lt;/p&gt;

&lt;p&gt;Then this encryption key is stored in the device's secure storage.&lt;/p&gt;

&lt;p&gt;Here is how this works out in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generating a new secret&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateSecret&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Storing it in the device's secure storage&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SecureStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// This is the data, that we want to store&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev.to&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john@doe.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secret123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Then we encrypt the data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Sending the user to the database&lt;/span&gt;
&lt;span class="c1"&gt;// The safe is an object, where we want to store the item inside&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// And finally, on a remote device, when we want to access the data, we use the secret to decrypt&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// It would print the original user object ({ platform: "dev.to", username.... })&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrypted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: this is just a presentation of how things work... just should consider this as a pseudo-code, instead of an actual working example&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-transfer-this-key-from-one-device-to-another-safely"&gt;
  &lt;/a&gt;
  How can we transfer this key from one device to another safely?
&lt;/h3&gt;

&lt;p&gt;This is a tricky one. If we would just send the encryption key through our database unencrypted, it would mean that there is no point of encryption as we would store the secret key next to the encrypted data. It would mean that you can just use that key to decrypt the data that is stored in the database.&lt;/p&gt;

&lt;p&gt;Instead, we use an asymmetric encryption method, called RSA-2048. When you generate a new RSA key, then it is generating a keypair. A public one and a private one.&lt;/p&gt;

&lt;p&gt;The public one can be only used to encrypt data. It can be safely shared on the network, as it provides no way for a potential attacker to retrieve data from the hash, as it is not eligible for that.&lt;/p&gt;

&lt;p&gt;The private one will stay on the original device without ever sharing it with another device. Then when we get data from the server, we can use this key to decrypt the hash, that we received.&lt;/p&gt;

&lt;p&gt;Let's see, how does it work out in practice:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When a device is added to the network, we generate this key pair and send the public key to the database. It will be stored in the future.&lt;/li&gt;
&lt;li&gt;We create a new safe on one of our devices and generate a secret, that is stored locally.&lt;/li&gt;
&lt;li&gt;We query all of our devices from the database with their RSA public keys.&lt;/li&gt;
&lt;li&gt;Then we encrypt the secret, that we generated at the #2 step with this key.&lt;/li&gt;
&lt;li&gt;Then we add an entry called KeyExchange, which contains information about which device and safe is the key meant for and the &lt;em&gt;encrypted&lt;/em&gt; secret.&lt;/li&gt;
&lt;li&gt;Finally when we refresh our data on another device, we query all of our key exchanges and decrypt them with our private RSA key.&lt;/li&gt;
&lt;li&gt;After the device received the encryption key, we can safely delete the key from our database as it will be no longer needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-log-in-from-another-device"&gt;
  &lt;/a&gt;
  How can I log in from another device?
&lt;/h3&gt;

&lt;p&gt;Compared to ordinary systems, when we log in, we also exchange a lot of data between the &lt;code&gt;Authenticator&lt;/code&gt; and the &lt;code&gt;Authenticated&lt;/code&gt; device.&lt;/p&gt;

&lt;p&gt;Authenticator: The device, that is already logged in.&lt;br&gt;
Authenticated: The device, that we want to log in, but is not yet authenticated.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;Authenticated&lt;/code&gt; device generates an RSA key pair and sends a signal to the remote server to start the authentication process with the public key.&lt;/li&gt;
&lt;li&gt;The remote server then generate an authentication id (e.g.: &lt;code&gt;ckqz9n52r000001la810jfjee&lt;/code&gt;) and a secret (e.g.: &lt;code&gt;11879182178653d376fc6b129d1d315b&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then the server stores the id with the &lt;code&gt;bcrypt&lt;/code&gt; hashed version of the secret in the database and sends back the secret and the id to the &lt;code&gt;Authenticated&lt;/code&gt; device.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Authenticated&lt;/code&gt; device, then generates a QR code, that stores only the ID, that it got from the server.&lt;/li&gt;
&lt;li&gt;Now on the &lt;code&gt;Authenticator&lt;/code&gt; device, we scan this QR code. This will send a signal to the remote server about who scanned the QR code (first).&lt;/li&gt;
&lt;li&gt;On the &lt;code&gt;Authenticated&lt;/code&gt; device, we will see the username of the user, who scanned this QR code.&lt;/li&gt;
&lt;li&gt;On the &lt;code&gt;Authenticator&lt;/code&gt; device, the user presses a Verify button. This will send the encryption keys from that device to the &lt;code&gt;Authenticated&lt;/code&gt; one (as described above) and this will also send a signal, to allow the remote server, to generate an access token and a refresh token for the user.&lt;/li&gt;
&lt;li&gt;While these things happen, the &lt;code&gt;Authenticated&lt;/code&gt; device pings the server, if the state has changed. If the auth process went through successfully, then it will just download all data, that has been sent to this device.&lt;/li&gt;
&lt;li&gt;On the &lt;code&gt;Authenticated&lt;/code&gt; device, we use the private RSA key, to decrypt the keys.&lt;/li&gt;
&lt;li&gt;Profit! We have successfully gained an access_token, a refresh_token, generated and exchanged the RSA keys, and also received all of the keys necessary, to decrypt the safes associated with this device. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-if-i-lose-my-device-will-i-lose-access-to-my-data"&gt;
  &lt;/a&gt;
  What if I lose my device? Will I lose access to my data?
&lt;/h3&gt;

&lt;p&gt;By design, that would be the case. But we can create a backup key, that can be used in the future, to regain access to our data after we lost our phones.&lt;/p&gt;

&lt;p&gt;This backup works just like an ordinary device because it is technically a device. It will have a refresh token, to gain access to our vault and it will have an RSA private key, to decrypt the key exchanges sent to it. Ohh... and also, when we create a new vault, we will send a key exchange to this backup key.&lt;/p&gt;

&lt;p&gt;With this backup, we can provide the ability, to gain access after you lost your phone.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;br&gt;
If you have any questions, feel free to ask them below.&lt;/p&gt;

&lt;p&gt;Github organization: &lt;a href="https://github.com/wault-app"&gt;github.com/wault-app&lt;/a&gt;&lt;br&gt;
Discord: &lt;a href="https://discord.gg/NxhdAf4azz"&gt;discord.gg/NxhdAf4azz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>crypto</category>
      <category>encryption</category>
    </item>
    <item>
      <title>Fun with Micro-frontend in a single-spa way💡</title>
      <author>Nitin Reddy</author>
      <pubDate>Sun, 11 Jul 2021 13:52:02 +0000</pubDate>
      <link>https://dev.to/nitinreddy3/fun-with-micro-frontend-in-a-single-spa-way-1iok</link>
      <guid>https://dev.to/nitinreddy3/fun-with-micro-frontend-in-a-single-spa-way-1iok</guid>
      <description>&lt;p&gt;🏃‍♂️&lt;br&gt;
To give everyone the context this post will be based on the experiments which I used to run the multiple front-end applications under a vanilla js container app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-a-microfrontend-application"&gt;
  &lt;/a&gt;
  What is a Micro-frontend application?
&lt;/h2&gt;

&lt;p&gt;This application is based on a &lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt; framework that allows you to run multiple front-end applications under the same route. Things to notice related to the Micro-frontend app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy the micro front-end applications independently.&lt;/li&gt;
&lt;li&gt;Without re-writing the existing application, you can create a new application with the new framework.&lt;/li&gt;
&lt;li&gt;Lazy loading the code base for improved performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge of any JavaScript framework&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://single-spa.js.org/docs/create-single-spa"&gt;single-spa&lt;/a&gt; should be globally installed in your machine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#build-the-application"&gt;
  &lt;/a&gt;
  Build the application
&lt;/h2&gt;

&lt;p&gt;We will create three applications using the &lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt; framework that are as follow:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;root-config&lt;/li&gt;
&lt;li&gt;react-app&lt;/li&gt;
&lt;li&gt;angular-app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will render the react and angular apps based on the routes.&lt;br&gt;
So if the route is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/react&lt;/strong&gt; then react app will load&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;/angular&lt;/strong&gt; then the angular app will load&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h3&gt;

&lt;p&gt;Create a folder where you want to put all three applications together.&lt;br&gt;
Navigate to the root of the folder and run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kPg_VX4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx31qtibhcdfpf9gkc9g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kPg_VX4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx31qtibhcdfpf9gkc9g.PNG" alt="rootConfig"&gt;&lt;/a&gt;&lt;br&gt;
The root-config setup will complete in sometime.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h3&gt;

&lt;p&gt;Now we will create a react application using the single-spa. So in the same root folder run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO_Ey110--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4g81c3xyctowwcses5m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO_Ey110--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4g81c3xyctowwcses5m.PNG" alt="reactApplication"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;Now we will create a angular application using the single-spa. So in the same root folder run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-tTE85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwlc3r9skiau169kkvp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-tTE85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwlc3r9skiau169kkvp.PNG" alt="angularApplication"&gt;&lt;/a&gt;&lt;br&gt;
Few more agreements for the angular app 😀&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdJRgksj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj8opzsl26inbr7avbo2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdJRgksj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj8opzsl26inbr7avbo2.PNG" alt="angularApp2"&gt;&lt;/a&gt;&lt;br&gt;
You need to additionally install few dependencies for the angular project&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;angular&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;builders&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h3&gt;

&lt;p&gt;Now we will add few minor tweaks in the files present in our newly created projects :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;root-config&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the imports in the index.ejs
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;imports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@orgname/root-config&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:9000/orgname-root-config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@orgname/react-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:8080/orgname-react-app.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:4200/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0JF7K1eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of3fydm8ubixf0tbd9q6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JF7K1eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of3fydm8ubixf0tbd9q6.PNG" alt="indexJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the configuration file named as orgname-root-config.ts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpwndchZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnpor0a8xsvp599xz448.PNG" alt="configRoot"&gt;
&lt;/li&gt;
&lt;li&gt;Add the navigation bar in index.ejs inside the body
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="nx"&gt;D4A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;navbar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleSpaNavigate('/react')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;React&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleSpaNavigate('/angular')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Angular&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;react-app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the root.component.tsx as below
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uESbC2QY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3d12eomu1qrnv7ljskv.PNG" alt="reactApp"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;angular-app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the zonejs as a dependency in main.single-spa.ts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVF_CZ9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke3qnf31d0rpf93fhu1i.PNG" alt="zone"&gt;
&lt;/li&gt;
&lt;li&gt;Add { provide: APP_BASE_HREF, useValue: '/angular' } to the providers array in the app.module.ts and import APP_BASE_HREF from @angular/common module
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AuROqYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dn0a2rkszgwee9c2dxz.PNG" alt="appHref"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5:
&lt;/h3&gt;

&lt;p&gt;Run the applications &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;root-config
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The root-config app will be running on &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react-app
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The react-app will be running on &lt;a href="http://locahost:8080"&gt;http://locahost:8080&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;angular-app
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The angular-app will be running on &lt;a href="http://localhost:4200"&gt;http://localhost:4200&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you navigate to &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt; you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVvUA8Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i0rf6agkmy88usybohh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVvUA8Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i0rf6agkmy88usybohh.PNG" alt="root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on React you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqCCDhdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkug5xo68aqwwnvship.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqCCDhdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkug5xo68aqwwnvship.PNG" alt="react"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on Angular you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8vFJ6qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emq8t4ybg43viboo1aoh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8vFJ6qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emq8t4ybg43viboo1aoh.PNG" alt="Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When the route changes the new application mounts and the previously loaded application unmounts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#github-repositories-for-different-applications"&gt;
  &lt;/a&gt;
  GitHub Repositories for different applications
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/root-config"&gt;root-config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/react-app"&gt;react-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/angular-app"&gt;angular-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/react-ng-spa-app"&gt;react-ng-spa-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#resources-to-catch-up-with-singlespa"&gt;
  &lt;/a&gt;
  Resources to catch up with single-spa
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLLUD8RtHvsAOhtHnyGx57EYXoaNsxGrTU"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do let me know about your experience with single-spa, till then keep on learning new stuffs and enjoy!!!&lt;br&gt;
📖&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__116606"&gt;
  
    .ltag__user__id__116606 .follow-action-button {
      background-color: #000000 !important;
      color: #00ffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/nitinreddy3" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4L0-m8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CZ9LZr7_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/116606/56e1ac95-0db3-4127-9071-102d90126001.jpg" alt="nitinreddy3 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nitinreddy3"&gt;Nitin Reddy&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nitinreddy3"&gt;💡Developer with eager to learn new tech, mainly into JavaScript, Dart, and Python. Loves to create tools for devs.👨‍💻 &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>microfrontend</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>Deploy your Node.js app without a hassle</title>
      <author>Chirill Ceban</author>
      <pubDate>Sun, 11 Jul 2021 13:10:23 +0000</pubDate>
      <link>https://dev.to/bitkidd/deploy-your-node-js-app-without-a-hassle-28ke</link>
      <guid>https://dev.to/bitkidd/deploy-your-node-js-app-without-a-hassle-28ke</guid>
      <description>&lt;p&gt;The process of app deployment takes some time, you have to configure the server, find all the information and be ready to handle the issues, but there is an easier way.&lt;/p&gt;

&lt;p&gt;This guide is relevant literally for any app, for Ruby and Rails, for Python and Django, for PHP and Laravel, for Go and micro-services, you can deploy easily anything, but I will use &lt;a href="https://adonisjs.com"&gt;Adonis.js&lt;/a&gt; as an example.&lt;/p&gt;

&lt;p&gt;I guess any developer knows what is Heroku, they've been de facto a standard of Platform-as-a-Service and showed the world how an app deployment should really work, easily and fast, requiring zero configuration for most cases.&lt;/p&gt;

&lt;p&gt;Heroku is not a cheap service, their prices are pretty high and aren't great for pet projects or small services with zero revenue.&lt;/p&gt;

&lt;p&gt;There are some cheaper alternatives like Render, Railway or Digital Ocean App platform, but there is a self-hosted solution that works almost like Heroku and is free of charge, you only have to bring your own server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dokku"&gt;
  &lt;/a&gt;
  Dokku
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dokku.com"&gt;&lt;strong&gt;Dokku&lt;/strong&gt;&lt;/a&gt; is the smallest PaaS implementation that allows you to build, manage and deploy your apps on your own server, that may cost you as little as &lt;strong&gt;$3.50&lt;/strong&gt; per month( I use and recommend &lt;a href="https://hetzner.cloud/?ref=l6kYYPTcviZx"&gt;Hetzner Cloud&lt;/a&gt;, it is a referral link that will give you €20 in credit).&lt;/p&gt;

&lt;p&gt;It uses heroku buildpacks and is able to deploy your app using dockerfile as well, it configures nginx as a proxy server, you can install databases and connect them to your app, you can install Let's Encrypt for SSL certificates, you can deploy monorepos, you can mount local storage, there are multiple plugins that handle most use cases and require almost zero configuration.&lt;/p&gt;

&lt;p&gt;To install Dokku, you have to allocate a server from you favorite provider, with a minimum requirement of 1 core and 1GB of RAM, then login into your new shiny server and run two commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# for latest tag check Dokku git repo&lt;/span&gt;
&lt;span class="c"&gt;# or https://dokku.com website&lt;/span&gt;

wget https://raw.githubusercontent.com/dokku/dokku/v0.24.10/bootstrap.sh
&lt;span class="nb"&gt;sudo &lt;/span&gt;&lt;span class="nv"&gt;DOKKU_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v0.24.10 bash bootstrap.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then go to your server's IP and follow the web installer process.&lt;/p&gt;

&lt;p&gt;Now you have a working self-hosted PaaS that is ready to build and deploy your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-an-app"&gt;
  &lt;/a&gt;
  Deploying an app
&lt;/h3&gt;

&lt;p&gt;As I am using &lt;a href="https://adonisjs.com/"&gt;Adonis.js&lt;/a&gt; for this guide, I initiate a new app, a web starter template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init adonis-ts-app@latest hello-world

&lt;span class="c"&gt;# If using yarn&lt;/span&gt;
yarn create adonis-ts-app hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we have to initiate git repository for this app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hello-world

&lt;span class="c"&gt;# initiate git&lt;/span&gt;
git init

&lt;span class="c"&gt;# stage all files&lt;/span&gt;
git add &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;# create first commit&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'Init commit'&lt;/span&gt;

&lt;span class="c"&gt;# add Dokku server as a remote&lt;/span&gt;
git remote add dokku dokku@&amp;lt;YOUR_SERVER_IP_ADDRESS_OR_DOMAIN&amp;gt;:hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The part &lt;code&gt;hello-world&lt;/code&gt; in git remote address corresponds to a server app name that we should create on the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
dokku apps:create hello-world
&lt;span class="nt"&gt;-----&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Creating hello-world...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Adonis.js to start we have to set some environment variables, Dokku provides an easy to use command for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on your computer&lt;/span&gt;
&lt;span class="c"&gt;# inside project folder&lt;/span&gt;
node ace generate:key
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; iGyX0deixdW7DkdJ9G9PbyyT8QaizXuK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
dokku config:set hello-world &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;APP_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;iGyX0deixdW7DkdJ9G9PbyyT8QaizXuK &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;APP_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;CACHE_VIEWS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;SESSION_DRIVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cookie
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just before the deploy it is a good idea to create a &lt;code&gt;Procfile&lt;/code&gt; and describe how our PaaS should start our app, this file is a very common configurational file, read more about it &lt;a href="https://devcenter.heroku.com/articles/procfile"&gt;here&lt;/a&gt;. Don't forget to commit it to the repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: node build/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to deploy our app for the first time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push dokku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a successful deployment Dokku will print you the address where you can access your app, if you chose port based deployments, your address will look like &lt;code&gt;http://&amp;lt;YOUR_SERVER_IP_ADDRESS&amp;gt;:&amp;lt;PORT&amp;gt;&lt;/code&gt;, if you chose hostname based deployments, it will look like this: &lt;code&gt;http://&amp;lt;APP_NAME&amp;gt;.&amp;lt;YOUR_SERVER_DOMAIN&amp;gt;&lt;/code&gt;. You can add a domain to the app later if &lt;a href="https://dokku.com/docs/configuration/domains/"&gt;needed&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-database"&gt;
  &lt;/a&gt;
  Adding database
&lt;/h3&gt;

&lt;p&gt;Dokku supports multiple databases, MySQL, PostgreSQL, MongoDB, Redis and others.&lt;br&gt;
Here I will install PostgreSQL and then link it to my app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
&lt;span class="c"&gt;# install the postgres plugin&lt;/span&gt;
&lt;span class="c"&gt;# plugin installation requires root, hence the user change&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;dokku plugin:install https://github.com/dokku/dokku-postgres.git

&lt;span class="c"&gt;# create a postgres service&lt;/span&gt;
dokku postgres:create hello-world-database

&lt;span class="c"&gt;# on the Dokku host&lt;/span&gt;
&lt;span class="c"&gt;# each official datastore offers a `link` method to link a service to any application&lt;/span&gt;
dokku postgres:link hello-world-database hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Linking adds a new environment variable to the app, &lt;code&gt;DATABASE_URL&lt;/code&gt; that is a database connection string with all the credentials we need.&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://docs.adonisjs.com/guides/database/introduction"&gt;Adonis.js&lt;/a&gt; to work with database we should install Lucid ORM and configure it properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @adonisjs/lucid@latest
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add @adonisjs/lucid

&lt;span class="c"&gt;# and then&lt;/span&gt;
node ace configure @adonisjs/lucid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation don't forget to add new database environment variables to Dokku, you can use &lt;code&gt;DATABASE_URL&lt;/code&gt; that was provided before or split it to separated values, connection string url follows a well known format, so it is not a problem to identify credentials and host address.&lt;/p&gt;

&lt;p&gt;To run database migrations on each deploy we should update our &lt;code&gt;Procfile&lt;/code&gt; by adding new values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: node build/server.js
release: node build/ace migration:run --force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit new updates and run a deploy again!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push dokku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#encrypting-connection"&gt;
  &lt;/a&gt;
  Encrypting connection
&lt;/h3&gt;

&lt;p&gt;Dokku is built on top of plugins. One of them uses Let's Encrypt to provide SSL certificates to Nginx proxy server.&lt;/p&gt;

&lt;p&gt;Installing the plugin is as simple as running a command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# on Dokku host&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To encrypt the connection of your app run &lt;code&gt;dokku letsencrypt hello-world&lt;/code&gt; and then &lt;code&gt;dokku letsencrypt:cron-job --add&lt;/code&gt; to add a  crontab job that will renew certificates when needed.&lt;/p&gt;

&lt;p&gt;That's it, your app is now served using SSL!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Dokku is a great Heroku-like tool for build and deploy automation, it is universal and can be used almost by any company. It does not support clustering and brings some Docker problems with it, but well, if you need clustering for your app and have that many requests per second, then you may also have money for Heroku or others, or even your personal DevOps engineer.&lt;/p&gt;

&lt;p&gt;You may read more about dokku command and possibilities on their &lt;a href="https://dokku.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>adonisjs</category>
      <category>adonis</category>
    </item>
    <item>
      <title>Why Functional Programmers Avoid Exceptions </title>
      <author>Jesse Warden</author>
      <pubDate>Sun, 11 Jul 2021 12:56:25 +0000</pubDate>
      <link>https://dev.to/jesterxl/why-functional-programmers-avoid-exceptions-8oe</link>
      <guid>https://dev.to/jesterxl/why-functional-programmers-avoid-exceptions-8oe</guid>
      <description>&lt;p&gt;If you’re in a hurry, here is the 60 second version:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Fn0nWij8VEU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;My &lt;a href="https://jessewarden.com/2021/06/why-i-dont-use-async-await.html"&gt;previous article&lt;/a&gt; caused a variety of consternation, imperative patriotism, and lots of nuanced follow up. It reminded me of when &lt;a href="https://www.youtube.com/watch?v=36GT2zI8lVA"&gt;Richard Feynman was asked to define how magnets work and he refused&lt;/a&gt;. The perturbed interviewer postulated it was a reasonable question in hopes to understand why Mr. Feynman wouldn’t answer it. Richard Feynman covered a variety of reasons, 2 of which were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you have to know the deeper reasons first before I can explain it&lt;/li&gt;
&lt;li&gt;I can’t cheat by using analogies that they themselves require deeper meanings to explain how _they_ work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the case of avoiding async/await keywords in JavaScript, this makes a huge assumption you know about Functional Programming, Imperative, exception handling, how various languages approach it or don’t, the challenges between dynamic and strongly typed languages, and on and on.&lt;/p&gt;

&lt;p&gt;In this article, I wanted to remedy that and focus on the deeper reasons why, specifically being pragmatic around how Functional Programmers get things done vs. the theory or why’s. This means understanding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;why pure functions are preferred&lt;/li&gt;
&lt;li&gt;how they’re easier to test&lt;/li&gt;
&lt;li&gt;why you return errors as values using Result/Either types&lt;/li&gt;
&lt;li&gt;how you compose software using them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pedantic-or-mathematical-answer"&gt;
  &lt;/a&gt;
  Pedantic or Mathematical Answer
&lt;/h2&gt;

&lt;p&gt;In investigating specifically why exceptions aren’t preferred in Functional Programming, I found out, they aren’t actually anti-functional programming. Worse, I found out many argue they do not violate pure functions or referential transparency with a lot of fascinating supporting evidence. A few argue they aren’t even side effects. It gets more confusing when you start comparing strictly typed functional languages vs. dynamic ones, or practicing FP in non-FP languages.&lt;/p&gt;

&lt;p&gt;In practice, exceptions, like side effects, seem to violate all the reasons why you use pure functions: Your code is predictable, easier to test, and results in better software. Exceptions ensure your code is unpredictable, reduces the value of the tests, and &lt;a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/"&gt;results in worse software&lt;/a&gt;. Yet that’s not &lt;a href="https://stackoverflow.com/questions/10703232/why-is-the-raising-of-an-exception-a-side-effect"&gt;what the mathematical definitions say&lt;/a&gt;. They don’t agree, nor disagree with my assertions; rather they just say that known exceptions do not violate referential transparency. Yes, there are detractors. Regardless, this really shook my faith.&lt;/p&gt;

&lt;p&gt;One could say these are pedantic; citing the true definition of referential transparency the mechanisms behind how Exceptions can or cannot negatively affect it, and thus possibly not violate pure function rules. However, this is the common problem between scientists and engineers: while scientists will give you the &lt;a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/MathematiciansAnswer"&gt;Mathematicians Answer&lt;/a&gt;, they won’t help you do your actual job.&lt;/p&gt;

&lt;p&gt;And that’s what brought me back to reality. I’m not here to debate semantics, I’m here to deliver working software. However, I will cede to nuance if someone wishes to delve into the relationships between the mathematics behind these constructs. So far, preferring mathematical style programming over Imperative or Object Oriented seems to be going much better in delivering better results even if I don’t have a 100% iron clad understanding of all the nuances of the rules.&lt;/p&gt;

&lt;p&gt;The good news, despite finding deep nuance around exceptions and their complicated relationship with the mathematical purity of FP the industry, both FP and others (i.e. Go, Rust, Lua) has basically accepted the pragmatic truth: exceptions aren’t pure, act like side effects, and aren’t helpful when writing software. We already have a solution: returning the errors as values from functions, using Result (or Either) types.&lt;/p&gt;

&lt;p&gt;Keep in mind, the above has a Haskell bias. I encourage you to google “&lt;a href="https://www.google.com/search?client=firefox-b-1-d&amp;amp;q=Exceptions+Considered+Harmful"&gt;Exceptions Considered Harmful&lt;/a&gt;” and see some of the horrors that can arise when exceptions put your stateful code (Java/C#/Python/JavaScript) into a bad state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prefer-pure-functions"&gt;
  &lt;/a&gt;
  Prefer Pure Functions
&lt;/h2&gt;

&lt;p&gt;When people say prefer pure functions it’s because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;more predictable&lt;/li&gt;
&lt;li&gt;easier to test&lt;/li&gt;
&lt;li&gt;easier to maintain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does that &lt;em&gt;mean,&lt;/em&gt; though?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#predictable"&gt;
  &lt;/a&gt;
  Predictable
&lt;/h3&gt;

&lt;p&gt;We say predictable because you call it and it returns a value. That’s it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAnOk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"foo": "bar"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAnError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you bring exceptions into it, you now have 2 possibilities: it either returns a value, or blows up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// result is never used/set&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you combine functions together into programs, the program takes a value and returns a value. That’s it.&lt;/p&gt;

&lt;p&gt;When you bring exceptions into it, you now have X * Y possibilities: the program either returns a value, or X number of functions possibly explode in Y number of ways; it depends on how you wire the functions together.&lt;/p&gt;

&lt;p&gt;This exponential complexity shows just how unpredictable code can be with exceptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-to-test"&gt;
  &lt;/a&gt;
  Easier To Test
&lt;/h3&gt;

&lt;p&gt;Easier compared to &lt;em&gt;what?&lt;/em&gt; How?&lt;/p&gt;

&lt;p&gt;Pure functions don’t have side effects, so you don’t have to setup and tear down stubs or mocks. There is no initial state to setup, nor state to reset afterwards. There is no spy that you have to assert on after you call your code.&lt;/p&gt;

&lt;p&gt;Instead, you give your function an input, and assert the output is what you expect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"foo": "bar"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#easier-to-maintain"&gt;
  &lt;/a&gt;
  Easier to Maintain
&lt;/h2&gt;

&lt;p&gt;Compared to what? What does “easier” mean? Easy for someone familiar with the code? This statement is too nebulous and full of feelings.&lt;/p&gt;

&lt;p&gt;Still, many would agree, regardless of language, that code that doesn’t have any side effects is a lot easier to deal with and change and unit test over 6 months of the code growing compared to one that has a lot of side effects that you have to account for, test, and learn about their possible exponential changes in the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-resulteither"&gt;
  &lt;/a&gt;
  Use Result/Either
&lt;/h2&gt;

&lt;p&gt;If you prefer pure functions, that means very little side effects, or they’re on the fringes of your code. But then how do you handle things that go wrong? You return if the function worked or not. If it worked, it’ll have the data inside. If it failed, it’ll have a reason why it failed. In FP languages they have a Result or Either type. In languages that don’t have this kind of type, you can emulate in a variety of ways. If the code works, you return an &lt;code&gt;Ok&lt;/code&gt; with the value in it. If the function failed, you return an &lt;code&gt;Error&lt;/code&gt; with the reason why as a string clearly written in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Many languages have embraced the Promise, also called a Future, way of doing things. Some languages have used this to also handle asynchronous operations because they can fail in 2 ways that mean the same thing: it broke or it timed out. For example, most people aren’t going to wait 10 minutes for their email to come up, so you typically will see failures within 10 to 30 seconds even though technically nothing went wrong; we just stopped trying after a set amount of time. JavaScript and Python’s versions don’t have this timing built in, but there are &lt;a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.concurrency.task.html"&gt;libraries that allow to use this behavior&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This results in pure functions that always return a value: a &lt;code&gt;Result&lt;/code&gt;. That can either be a success or failure, but it’s always a Result. If it’s a failure it won’t break your entire program, nor cause you to have to write try/catch. While &lt;code&gt;Promise&lt;/code&gt;s can substitute in for a Result in JavaScript for example, ensure you are using the Promise itself, and not the value it returns via async/await. That completely bypasses the built-in exception handling, and forces you to use try/catch again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composing-programs"&gt;
  &lt;/a&gt;
  Composing Programs
&lt;/h2&gt;

&lt;p&gt;The way you build FP programs is through combining all these pure functions together. Some can be done imperatively, sure, but most are done via some type of &lt;a href="https://fsharpforfunandprofit.com/rop/"&gt;railway oriented programming&lt;/a&gt;. There are variety of ways to do this in FP and non-FP languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(non-FP) JavaScript: The &lt;a href="https://lodash.com/docs/4.17.15#flow"&gt;flow&lt;/a&gt; function in Lodash or the Promise or even the &lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;(non-FP) Python: &lt;a href="https://pypi.org/project/PyMonad/#new-then-method"&gt;then in PyMonad&lt;/a&gt; or various &lt;a href="https://returns.readthedocs.io/en/latest/pages/railway.html"&gt;map/binds in returns&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ReScript: the &lt;a href="https://rescript-lang.org/docs/manual/latest/pipe"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;F#: the &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/symbol-and-operator-reference/"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means, in ReScript and F#, you’ll have a function, and a Result will come out. You can then see if your program worked or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;parsePeople&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;parsePeopleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- this function could be an Ok or Error&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filterHumans&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;formatNames&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;startCaseNames&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For JavaScript/Python, it’s a bit more nuanced around the types. For Python, we’ll assume you’re returning a Result in PyMonad or Returns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_people_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter_humans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_case_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#composing-javascript-via-promises"&gt;
  &lt;/a&gt;
  Composing JavaScript via Promises
&lt;/h2&gt;

&lt;p&gt;For JavaScript, unless you’re all-in on some kind of library, natively you can do this using Promise. Promise is already a type of Result: it holds a value, and if it worked, you can get it out using then, else the failure via catch. They’re also composable by default so you can create Promise chains that automatically unwrap &lt;code&gt;Promise&lt;/code&gt; values, use regular values as is, or abort to the &lt;code&gt;catch&lt;/code&gt; in case of an error. You lose that ability once you start using async await because now you’re responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exception handling&lt;/li&gt;
&lt;li&gt;pulling the value out&lt;/li&gt;
&lt;li&gt;if it’s a Promise, async/awaiting it&lt;/li&gt;
&lt;li&gt;if it’s a value, using it&lt;/li&gt;
&lt;li&gt;putting into the next function down the line&lt;/li&gt;
&lt;li&gt;handling what to do if you get an exception at each section of the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Promises, you just return a value or another Promise and it just comes out the other end ready to go. If not, you’re catch will handle any errors. This ensures whatever function calls your Promise chain itself is pure because it always returns a Promise value.&lt;/p&gt;

&lt;p&gt;2 huge assumptions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you’re always defining a catch&lt;/li&gt;
&lt;li&gt;you’re not using a Result&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#mixing-in-result"&gt;
  &lt;/a&gt;
  Mixing in Result
&lt;/h2&gt;

&lt;p&gt;If some functions aren’t asynchronous, most JavaScript programmers would think they can just return a Result type instead to keep it synchronous. There isn’t a huge penalty in speed/memory to using a Promise, but some would prefer to use a Result instead. I’d suggest to 2 things if you’re not using a library: favor a Promise over a Result. A Promise is native and basically acts like a result already.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If, however, you’d prefer to make a clear delineation between an async operation and a possible failure scenario, then you’ll have to unwrap it at the end of the promise chain, similar to Rust or Python’s dry/returns. There are many helper methods on how to do this based on what Result library you’re using. We’ll use &lt;a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.result.html"&gt;Folktale&lt;/a&gt; below. Here we’ve defined a safe wrapper around &lt;code&gt;JSON.parse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using it, it’ll come out the next Promise’ then and we can pattern match to get the error or value out and convert to a normal Promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;fetchJSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchWith&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="na"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Functional Programmers avoid exceptions because they basically act like side effects, tend to feel like they’re violating pure function rules in regards to having no return value and possibly crashing our program. If you instead favor pure functions, return a Result type when things can possibly fail. You can then use your language’s preferred way of composing functions together. Then you have pure programs that have an input and an output. This means both the functions, and the program itself, are much easier to unit test. You no longer have to write &lt;code&gt;expect(thisThing).throws(SomeExceptionType)&lt;/code&gt;. You don’t have to write try/catch/throw in your code. You just give your functions or program and input, and assert on that output.&lt;/p&gt;

&lt;p&gt;For side effects, if you can’t force them to return a meaningful value, then you can just assert they were called with your expected inputs via Sinon’s spy methods or TestDouble’s assert method. There is no longer indirection, no longer a need to use to try/catch in multiple places for &lt;em&gt;your&lt;/em&gt; code. This makes your functions and program much more predictable, especially when you combine many functions together.&lt;/p&gt;

&lt;p&gt;For native functionality in non-functional languages like JavaScript and Python, you wrap the unsafe code. In the above examples, we wrapped JSON.parse with a try/catch and have it either return a Result or Promise. In FP languages, that would already return a Result. If you’re programmatic, languages like ReScript and F# support both Result types AND pattern matching on exceptions (which I think is blasphemy).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>functional</category>
      <category>exceptions</category>
    </item>
    <item>
      <title>30days30submits (HTML, CSS, JS)</title>
      <author>Shaif Arfan</author>
      <pubDate>Sun, 11 Jul 2021 12:51:21 +0000</pubDate>
      <link>https://dev.to/shaifarfan08/30days30submits-html-css-js-39cn</link>
      <guid>https://dev.to/shaifarfan08/30days30submits-html-css-js-39cn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exwW8820--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/shaifarfan/30days30submits%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exwW8820--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/shaifarfan/30days30submits%3Fstyle%3Dsocial" alt="GitHub Repo stars"&gt;&lt;/a&gt;  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uMllJK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/youtube/channel/subscribers/UCdxaLo9ALJgXgOUDURRPGiQ%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uMllJK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/youtube/channel/subscribers/UCdxaLo9ALJgXgOUDURRPGiQ%3Fstyle%3Dsocial" alt="YouTube Channel Subscribers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#30days30submits"&gt;
  &lt;/a&gt;
  30days30submits
&lt;/h2&gt;

&lt;p&gt;Boost your HTML, CSS, JS Skills with these small to medium projects.&lt;/p&gt;

&lt;p&gt;In this challenge, I submitted 30 little to medium size projects. Sometimes I made a little website component or sometimes some JavaScript app as a submit. I did it to boost my HTML, CSS &amp;amp; JS skills. Down here you will find all the live previews and YouTube videos (how I made it). Also here is the full playlist for this #30days30submits challenge =&amp;gt; &lt;a href="https://www.youtube.com/playlist?list=PLRv_Gd5w9e7m7wokXmB9fGtGYw100UKc0"&gt;playlist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;🤙 Follow Me : &lt;a href="http://facebook.com/fb.shaifarfan08"&gt;FB&lt;/a&gt; - &lt;a href="http://instagram.com/shaifarfan08"&gt;IG&lt;/a&gt; - &lt;a href="http://twitter.com/shaifarfan08"&gt;TW&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🏦 Web Cifar : &lt;a href="https://www.youtube.com/channel/UCdxaLo9ALJgXgOUDURRPGiQ"&gt;YT&lt;/a&gt; - &lt;a href="http://facebook.com/webcifar"&gt;FB&lt;/a&gt; - &lt;a href="http://instagram.com/web_cifar"&gt;IG&lt;/a&gt; - &lt;a href="http://twitter.com/webcifar"&gt;TW&lt;/a&gt; - &lt;a href="http://webcifar.com"&gt;WEBSITE&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;day&lt;/th&gt;
&lt;th&gt;Project Name&lt;/th&gt;
&lt;th&gt;source Code/preview&lt;/th&gt;
&lt;th&gt;YouTube Video&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;day-1&lt;/td&gt;
&lt;td&gt;Custom Cursor&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMrzaB"&gt;https://codepen.io/Web_Cifar/pen/OJMrzaB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/de4W0EHMuUs"&gt;https://youtu.be/de4W0EHMuUs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-2&lt;/td&gt;
&lt;td&gt;Theme Switcher&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMrdbq"&gt;https://codepen.io/Web_Cifar/pen/OJMrdbq&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/D1yg4T37qYo"&gt;https://youtu.be/D1yg4T37qYo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-3&lt;/td&gt;
&lt;td&gt;Random Dad Jokes Generator&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/XWXOZWX"&gt;https://codepen.io/Web_Cifar/pen/XWXOZWX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/UDIfuvLEkjU"&gt;https://youtu.be/UDIfuvLEkjU&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-4&lt;/td&gt;
&lt;td&gt;Numbers API&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoZLpoG"&gt;https://codepen.io/Web_Cifar/pen/PoZLpoG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/s3LFCErzmHI"&gt;https://youtu.be/s3LFCErzmHI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-5&lt;/td&gt;
&lt;td&gt;Countdown Timer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMGPbb"&gt;https://codepen.io/Web_Cifar/pen/OJMGPbb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/_a4XCarxwr8"&gt;https://youtu.be/_a4XCarxwr8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-6&lt;/td&gt;
&lt;td&gt;Featured Section&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/WNrWxYG"&gt;https://codepen.io/Web_Cifar/pen/WNrWxYG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/L4k3_elYm2U"&gt;https://youtu.be/L4k3_elYm2U&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-7&lt;/td&gt;
&lt;td&gt;Photo gallery p-1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/wvMbwdj"&gt;https://codepen.io/Web_Cifar/pen/wvMbwdj&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/URymtcPO11A"&gt;https://youtu.be/URymtcPO11A&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-8&lt;/td&gt;
&lt;td&gt;Photo gallery p-2 [Pexels API]&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ShaifArfan/30days30submits/tree/master/day-8"&gt;https://github.com/ShaifArfan/30days30submits/tree/master/day-8&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gGBpmzLN1Hw"&gt;https://youtu.be/gGBpmzLN1Hw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-9&lt;/td&gt;
&lt;td&gt;Read More Button&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMeVxx"&gt;https://codepen.io/Web_Cifar/pen/OJMeVxx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/TvVY8c1uvG8"&gt;https://youtu.be/TvVY8c1uvG8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-10&lt;/td&gt;
&lt;td&gt;key Code Generator App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/eYJwvKV"&gt;https://codepen.io/Web_Cifar/pen/eYJwvKV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/jOLwRV6xSwA"&gt;https://youtu.be/jOLwRV6xSwA&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-11&lt;/td&gt;
&lt;td&gt;CSS animated Menu&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/eYJqdxy"&gt;https://codepen.io/Web_Cifar/pen/eYJqdxy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/q8vmz-R_3Ck"&gt;https://youtu.be/q8vmz-R_3Ck&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-12&lt;/td&gt;
&lt;td&gt;CSS Flex Gallery&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/wvMVmZN"&gt;https://codepen.io/Web_Cifar/pen/wvMVmZN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Z6IZ2NOEzmw"&gt;https://youtu.be/Z6IZ2NOEzmw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-13&lt;/td&gt;
&lt;td&gt;Analog Clock&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/LYNYmpb"&gt;https://codepen.io/Web_Cifar/pen/LYNYmpb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/6xEQ_jA5V2Y"&gt;https://youtu.be/6xEQ_jA5V2Y&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-14&lt;/td&gt;
&lt;td&gt;Digital Clock&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/MWyYaBP"&gt;https://codepen.io/Web_Cifar/pen/MWyYaBP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gmNhRyxAPpw"&gt;https://youtu.be/gmNhRyxAPpw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-15&lt;/td&gt;
&lt;td&gt;BG Color Changer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/dyMPmwY"&gt;https://codepen.io/Web_Cifar/pen/dyMPmwY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Yem8T8azZko"&gt;https://youtu.be/Yem8T8azZko&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-16&lt;/td&gt;
&lt;td&gt;Basic Tooltips&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoNqwNJ"&gt;https://codepen.io/Web_Cifar/pen/PoNqwNJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/MXRxahbJX3A"&gt;https://youtu.be/MXRxahbJX3A&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-17&lt;/td&gt;
&lt;td&gt;Scroll Down Button&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/WNwvOaE"&gt;https://codepen.io/Web_Cifar/pen/WNwvOaE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/LY1jeQGUiAI"&gt;https://youtu.be/LY1jeQGUiAI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-18&lt;/td&gt;
&lt;td&gt;Advance Tooltips&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/yLOYoPR"&gt;https://codepen.io/Web_Cifar/pen/yLOYoPR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/e_jEquJo7y8"&gt;https://youtu.be/e_jEquJo7y8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-19&lt;/td&gt;
&lt;td&gt;Full Functional Html Form&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/gOrrPpO"&gt;https://codepen.io/Web_Cifar/pen/gOrrPpO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/vc9rgFHr098"&gt;https://youtu.be/vc9rgFHr098&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-20&lt;/td&gt;
&lt;td&gt;Multi Step Form&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoNNEYY"&gt;https://codepen.io/Web_Cifar/pen/PoNNEYY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/cKTgIDkRsGc"&gt;https://youtu.be/cKTgIDkRsGc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-21&lt;/td&gt;
&lt;td&gt;CSS Loading animation&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/jOqqRPM"&gt;https://codepen.io/Web_Cifar/pen/jOqqRPM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/E_jOrp4t0N4"&gt;https://youtu.be/E_jOrp4t0N4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-22&lt;/td&gt;
&lt;td&gt;Food Recipe App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/oNxLYRY"&gt;https://codepen.io/Web_Cifar/pen/oNxLYRY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/x8EY0BlhPGk"&gt;https://youtu.be/x8EY0BlhPGk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-23&lt;/td&gt;
&lt;td&gt;Neon Light Effect&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/MWyJENV"&gt;https://codepen.io/Web_Cifar/pen/MWyJENV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/NLtUycloTnc"&gt;https://youtu.be/NLtUycloTnc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-24&lt;/td&gt;
&lt;td&gt;Speech Recognition App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/jOqBEjE"&gt;https://codepen.io/Web_Cifar/pen/jOqBEjE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/-k-PgvbktX4"&gt;https://youtu.be/-k-PgvbktX4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-25&lt;/td&gt;
&lt;td&gt;Custom Slider&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/bGpRwEr"&gt;https://codepen.io/Web_Cifar/pen/bGpRwEr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/V9TCxMMpGhI"&gt;https://youtu.be/V9TCxMMpGhI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-26&lt;/td&gt;
&lt;td&gt;Bouncing DVD logo&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/JjXrLRJ"&gt;https://codepen.io/Web_Cifar/pen/JjXrLRJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/wMIARRCox9k"&gt;https://youtu.be/wMIARRCox9k&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-27&lt;/td&gt;
&lt;td&gt;Quiz APP&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/dyMZxNg"&gt;https://codepen.io/Web_Cifar/pen/dyMZxNg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/qXXM9nVxLWk"&gt;https://youtu.be/qXXM9nVxLWk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-28&lt;/td&gt;
&lt;td&gt;Simple Calculator&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/XWdVgXr"&gt;https://codepen.io/Web_Cifar/pen/XWdVgXr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/0Vg4EiYPCUc"&gt;https://youtu.be/0Vg4EiYPCUc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-29&lt;/td&gt;
&lt;td&gt;Weather APP&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/gOrvMpR"&gt;https://codepen.io/Web_Cifar/pen/gOrvMpR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/y0iCeKUsYMk"&gt;https://youtu.be/y0iCeKUsYMk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-30&lt;/td&gt;
&lt;td&gt;CSS Dot Loaders&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/rNevXPx"&gt;https://codepen.io/Web_Cifar/pen/rNevXPx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/ENa4y_-fJAs"&gt;https://youtu.be/ENa4y_-fJAs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Adding server-side-rendering to existing vue 3 project</title>
      <author>shubhadip</author>
      <pubDate>Sun, 11 Jul 2021 12:45:58 +0000</pubDate>
      <link>https://dev.to/shubhadip/adding-server-side-rendering-to-existing-vue-3-project-53oo</link>
      <guid>https://dev.to/shubhadip/adding-server-side-rendering-to-existing-vue-3-project-53oo</guid>
      <description>&lt;p&gt;In this article we will see how to add server side rendering support to existing vue 3 project.I will be using one of my existing vue3 &amp;amp; vuex project which is available in &lt;a href="https://github.com/shubhadip/vuex-typescript"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we have to add few dependencies &amp;amp;&amp;amp; devdependencies so that our project can support ssr&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @vue/server-renderer vue@3.1.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D webpack-manifest-plugin webpack-node-externals express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: upgrading vue to latest version so that we can use onServerPrefetch lifecycle hook&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;for server-side-rendering we will have to create two different entry points(files) one, which will be used in server &amp;amp; another in client side also we will need to different build commands for server/client, lets add these two first in package.json scripts section&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"build:client": "vue-cli-service build --dest dist/client",
"build:server": "VUE_APP_SSR=true vue-cli-service build --dest dist/server",
"build:ssr": "rm -rf ./dist &amp;amp;&amp;amp; npm run build:client &amp;amp;&amp;amp; npm run build:server"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we have added a flag &lt;code&gt;VUE_APP_SSR=true&lt;/code&gt; which would help us for bundling server side and ignore any window logics as those won't work in server-side.There will be two separate directory within dist folder client &amp;amp;&amp;amp; server having separate code.&lt;/p&gt;

&lt;p&gt;With build scripts ready lets move to entry files of server side &amp;amp; client side, we will have a common &lt;code&gt;main.ts&lt;/code&gt; file which will be included in both entry files &lt;code&gt;entry-client.ts&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;entry-server.ts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets create main.ts, we have to take care of createApp &amp;amp;&amp;amp; createSSRApp for respective entry points.we can make use of flag &lt;code&gt;VUE_APP_SSR=true&lt;/code&gt; or &lt;code&gt;typeof window&lt;/code&gt; check&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isSSR = typeof window === 'undefined';
const app = (isSSR ? createSSRApp : createApp)(rootComponent)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end our file would look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createSSRApp, createApp, h } from 'vue'
import App from './App.vue'
import router from './router';
import { store } from './store'

export default function () {
  const isSSR = typeof window === 'undefined';
  const rootComponent = {
    render: () =&amp;gt; h(App),
    components: { App },
  }
const app = (isSSR ? createSSRApp : createApp)(rootComponent)
  app.use(router);
  app.use(store);
  return {
    app,
    router,
    store
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the main crux ready lets create entry-client.ts &amp;amp;&amp;amp; entry-server.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# entry-server.ts
import createApp from './main';

export default function () {

  const {
    router,
    app,
    store
  } = createApp();

  return {
    app,
    router,
    store
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In server entry file, we are just exporting app,router,store which would be used while serving via express&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# entry-client.ts
import createApp from './main'
declare let window: any;

const { app, router, store } = createApp();

(async (r, a, s) =&amp;gt; {
  const storeInitialState = window.INITIAL_DATA;

  await r.isReady();

  if (storeInitialState) {
    s.replaceState(storeInitialState);
  }

  a.mount('#app', true);
})(router, app, store);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;window.INITIAL_DATA will hold the initialData that would be prefetched in server-side and would be stored in global window object, then in clientSide we will use this data to populate our store on first load.&lt;/p&gt;

&lt;p&gt;Now,lets move to webpack config part of SSR, to work with webpack we have to create a vue.config.js file. we would include webpack-manifest-plugin,webpack-node-externals,webpack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ManifestPlugin = require("webpack-manifest-plugin");
const nodeExternals = require("webpack-node-externals");
const webpack = require('webpack');
const path = require('path');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets add config, i will be using export.chainWebpack directly to modify default webpack config provided by vue&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.chainWebpack = webpackConfig =&amp;gt; {
   if (!process.env.VUE_APP_SSR) {
    webpackConfig
      .entry("app")
      .clear()
      .add("./src/entry-client.ts");
    return;
  }

  webpackConfig
    .entry("app")
    .clear()
    .add("./src/entry-server.ts");

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;based on which build is going to run we have added different entry points, for this we will use &lt;code&gt;VUE_APP_SSR&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;Now we have to add few more code so that webpack can build server-side bundle properly.we have to set target to node &amp;amp;&amp;amp; libraryFormat to commonjs2 since this file is going to run via express&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  webpackConfig.target("node");
  webpackConfig.output.libraryTarget("commonjs2");

  webpackConfig
    .plugin("manifest")
    .use(new ManifestPlugin({ fileName: "ssr-manifest.json" }));

  webpackConfig.externals(nodeExternals({ allowlist: [/\.(css|vue)$/,] 
  }));
  webpackConfig.optimization.splitChunks(false).minimize(false);

  webpackConfig.plugins.delete("hmr");
  webpackConfig.plugins.delete("preload");
  webpackConfig.plugins.delete("prefetch");
  webpackConfig.plugins.delete("progress");
  webpackConfig.plugins.delete("friendly-errors");
  webpackConfig.plugin('limit').use(
    new webpack.optimize.LimitChunkCountPlugin({
      maxChunks: 1
    })
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can read more about this configuration on this &lt;a href="https://v3.vuejs.org/guide/ssr/build-config.html#example-configuration"&gt;SSRbuildConfig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the last part is to create an server.js file which we will run on server via express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const path = require('path');
const fs = require('fs');
const serialize = require('serialize-javascript');
const express = require('express');
const { renderToString } = require("@vue/server-renderer");
const  PORT = process.env.PORT || 4455
const manifest = require("../dist/server/ssr-manifest.json");
const appPath = path.join(__dirname, "../dist",'server', manifest["app.js"]);
const App = require(appPath).default;

const server = express();

server.use("/img", express.static(path.join(__dirname, "../dist/client", "img")));
server.use("/js", express.static(path.join(__dirname, "../dist/client", "js")));
server.use("/manifest.json", express.static(path.join(__dirname, "../dist/client", "manifest.json")));
server.use("/css", express.static(path.join(__dirname, "../dist/client", "css")));
server.use(
  "/favicon.ico",
  express.static(path.join(__dirname, "../dist/client", "favicon.ico"))
);

server.get('*', async (req, res) =&amp;gt; {
  const { app, router, store } = await App(req);

  await router.push(req.url);
  await router.isReady();

  let appContent = await renderToString(app);

  const renderState = `
    &amp;lt;script&amp;gt;
      window.INITIAL_DATA = ${serialize(store.state)}
    &amp;lt;/script&amp;gt;`;

  fs.readFile(path.join(__dirname, '../dist/client/index.html'), (err, html) =&amp;gt; {
    if (err) {
      throw err;
    }

    appContent = `&amp;lt;div id="app"&amp;gt;${appContent}&amp;lt;/div&amp;gt;`;

    html = html.toString().replace('&amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;', `${renderState}${appContent}`);
    res.setHeader('Content-Type', 'text/html');
    res.send(html);
  });
});

server.listen(PORT, ()=&amp;gt;{
  console.log(`server listening at port ${PORT}`)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we will be using above code which will intercept all request to our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const manifest = require("../dist/server/ssr-manifest.json");
const appPath = path.join(__dirname, "../dist",'server', manifest["app.js"]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#ssr-manifest.json
  "app.css": "/css/app.aaa5a7e8.css",
  "app.js": "/js/app.b8f9c779.js",
  "app.css.map": "/css/app.aaa5a7e8.css.map",
  "app.js.map": "/js/app.b8f9c779.js.map",
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is where we use manifest.json file to select appropriate  server file that would be served from express, contents of this json file is an object which has mapping for specific bundles&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await router.push(req.url);
await router.isReady();
let appContent = await renderToString(app);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;above mentioned code will be used to match url-page properly with router.push, then renderToString will output everything as string which would be served from express.&lt;/p&gt;

&lt;p&gt;In the above &lt;code&gt;server.js&lt;/code&gt; you can see &lt;code&gt;html&lt;/code&gt; variable holds the entire content that will be served from express to browser, next step would be to add support for meta-tags.&lt;/p&gt;

&lt;p&gt;After all these configuration, now our pages can be rendered from server, now we will use axios to fetch data from endpoint which can rendered from server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vue file
    const fetchInitialData = async () =&amp;gt; {
      const response = await axios('https://jsonplaceholder.typicode.com/posts')
      store.dispatch(AllActionTypes.USER_LISTS, response.data || [])
    }

    onServerPrefetch(async () =&amp;gt; {
     await fetchInitialData()
    })

    const listData = computed(() =&amp;gt; {
      return store.getters.getUserList || []
    });

    onMounted(async () =&amp;gt; {
      if(!listData.value.length){
        await fetchInitialData();
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is an example of how can we fetch data for server-side rendering, we have used &lt;code&gt;onServerPrefetch&lt;/code&gt; lifecycle method to fetch data &amp;amp;&amp;amp; for client side we are using onMounted hook incase data is not available in window from server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I have skipped few steps while explaining, all code regarding this article is present at &lt;a href="https://github.com/shubhadip/vuex-typescript"&gt;Repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resources which helped me to create this article are &lt;br&gt;
&lt;a href="https://v3.vuejs.org/guide/ssr/introduction.html#what-is-server-side-rendering-ssr"&gt;https://v3.vuejs.org/guide/ssr/introduction.html#what-is-server-side-rendering-ssr&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=XJfaAkvLXyU&amp;amp;t=1s"&gt;youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>typescript</category>
      <category>serversiderendering</category>
    </item>
    <item>
      <title>My Dev Journey: Week 10</title>
      <author>Harry York</author>
      <pubDate>Sun, 11 Jul 2021 12:45:34 +0000</pubDate>
      <link>https://dev.to/harryyork97/my-dev-journey-week-10-39n2</link>
      <guid>https://dev.to/harryyork97/my-dev-journey-week-10-39n2</guid>
      <description>&lt;p&gt;This week was the second week in the front end block of the course, and this week we spent a lot of time going further in depth with React.&lt;/p&gt;

&lt;p&gt;If you've enjoyed any of my blog series, then maybe consider following me on &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; 😁 and I'd also really appreciate if you all could check out my new &lt;a href="https://harryyork.dev/"&gt;portfolio site&lt;/a&gt; 🙏🏼 and maybe leave a few beginner project ideas in the comments to give me some inspiration!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-this-week"&gt;
  &lt;/a&gt;
  What I've learnt this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#data-fetching"&gt;
  &lt;/a&gt;
  Data fetching
&lt;/h3&gt;

&lt;p&gt;For the start of this week we used the Fetch API to make requests to endpoints to get the data back that we were going to be using in our apps. The fetch API was a good start but I prefered it when we started to use Axios, as I think it reads a lot clearer that fetch.&lt;/p&gt;

&lt;p&gt;I spent most of this first day getting base functionality added in to my app that retrieves NASA Astronomy Pictures of the Day, for specified dates in input fields.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-with-react"&gt;
  &lt;/a&gt;
  Styling with React
&lt;/h3&gt;

&lt;p&gt;Building on top of the base functionality I added a couple of extra features in like beign able to search by a date range, and then got going on styling. I wanted it to be a fairly minimal site, but to use similar tones to the NASA logo, so that it all ties in, and was pretty happy with adjusting to styling with React.&lt;/p&gt;

&lt;p&gt;One of the key principles from this lecture was on Mobile first design, and using media queries to display certain components styled in different ways because of screen sizes.&lt;/p&gt;

&lt;p&gt;Another thing we learnt but I didn't have chance to apply was the use of CSS modules, something that I'd like to apply on a side project or by refactoring the code from this two-day sprint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-routing"&gt;
  &lt;/a&gt;
  React Routing
&lt;/h3&gt;

&lt;p&gt;Routing in React was a blessing after having spent the last week with really long App files. The routing makes sense, especially after creating our own backends, it made processes much more alike.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h3&gt;

&lt;p&gt;Another issue I had with React at the start of the week was I felt like I was passing props through all over the place, which is where using Context allows me to have certain states to be seen globally across all components. This came in handy when wanting to tidy a lot of my prop chains up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-ive-found-useful-this-week"&gt;
  &lt;/a&gt;
  Resources I've found useful this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#css-tricks"&gt;
  &lt;/a&gt;
  CSS Tricks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com"&gt;CSS Tricks&lt;/a&gt; has been a great cheat-sheet style site, that has helped especially with &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;flex-box&lt;/a&gt; bits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-router"&gt;
  &lt;/a&gt;
  React Router
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React Router&lt;/a&gt; has also been great for seeing examples of setting up React Apps with Routing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#figma"&gt;
  &lt;/a&gt;
  Figma
&lt;/h3&gt;

&lt;p&gt;What's Figma? &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; is a pretty good way to quickly and collaboratively mock up the wireframes for an app and definitely helped us to start planning out what actually needed to be done first, rather than start aimlessly coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>bootcamp</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Best Design resources marketplace 2021 You Should Know</title>
      <author>UI HUT</author>
      <pubDate>Sun, 11 Jul 2021 12:45:10 +0000</pubDate>
      <link>https://dev.to/uihut/best-design-resources-marketplace-2021-you-should-know-5ff7</link>
      <guid>https://dev.to/uihut/best-design-resources-marketplace-2021-you-should-know-5ff7</guid>
      <description>&lt;p&gt;Hello Everyone!&lt;br&gt;
we are really excited to share the &lt;a href="http://www.uihut.com"&gt;www.uihut.com&lt;/a&gt; Platform with 12000+ Design Resources in this community. UI HUT is a design platform for UX/UI designers, developers, and project managers. Instead of spending your time on a variety of tasks during the design process, UI HUT allows you to focus on what you love most. From last year our team working so hard to achieve our goal. That’s really excited for us that we getting users so rapidly and our user's feedbacks inspiring us to expand our services and features.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;1000+ web Templates UI&lt;/p&gt;

&lt;p&gt;2500+ Illustration&lt;/p&gt;

&lt;p&gt;7000+ Icons&lt;/p&gt;

&lt;p&gt;500+ Mobile Screen UI&lt;/p&gt;

&lt;p&gt;100+ Web App UI&lt;/p&gt;

&lt;p&gt;We are uploading Those more design templates Everyday&lt;br&gt;
Our Website &lt;a href="http://www.uihut.com"&gt;www.uihut.com&lt;/a&gt;&lt;br&gt;
Thanks a lot, everyone for your time.&lt;/p&gt;

</description>
      <category>design</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is the difference between SQL and SQL Server (and similar tools)? 😇🎉</title>
      <author>Aashish Chaubey 💥⚡️</author>
      <pubDate>Sun, 11 Jul 2021 12:39:30 +0000</pubDate>
      <link>https://dev.to/aashish/what-is-the-difference-between-sql-and-sql-server-and-similar-tools-3n3o</link>
      <guid>https://dev.to/aashish/what-is-the-difference-between-sql-and-sql-server-and-similar-tools-3n3o</guid>
      <description>&lt;p&gt;Hey people,&lt;/p&gt;

&lt;p&gt;I am a programmer and have been one since last 3 years. I completed my B.Tech degree back in 2018 and I must admit, I was not particularly a big fan of DBMS, somehow I managed to complete the course and secure passing grades. I know it is an important subject but it never appealed me as much and therefore I never took as much interest (I always felt guilty of it). &lt;/p&gt;

&lt;p&gt;As established, it is not an epiphany for me that it is an important subject and I must get my hand dirty with it, so I decided to pursue it and complete at least 2 projects in the next couple of weeks. This way sans Big Data (I am slowly working on that too), I will have all my grounds covered as a full stack data scientist. &lt;/p&gt;

&lt;p&gt;Thats enough about me, now lets literally get to the title of this blog post. I know many beginning with SQL will have this question in mind. So here I am, explaining the basics as I learn. Please feel free to point out anything you feel should be corrected, I'll appreciate the feedback.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2mku-Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgu0twslt9hude25vops.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2mku-Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgu0twslt9hude25vops.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lets first get to know what SQL is, in brief!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;📝 Definition: SQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By definition, SQL (Structured Query Language) is a query language. It is generally used with Structured Databases, or for processing data streams in real-time in relational data stream management system to query, manipulate the relational database data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;💡 Gotcha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So basically, SQL is a language. As this is a language, and a quite popular one, there are various dialects of this language. And anyone familiar with computers or even remotely acquainted with how computer works will know a language needs some kind of environment to be executed in. &lt;/p&gt;

&lt;p&gt;It is environment that interprets the commands of the language, identifies different dialect and executes the command particular to the dialect. Let's park this environment concept for now and we will come back to it later in this post. Let's talk about SQL a little more.&lt;/p&gt;

&lt;p&gt;SQL comprises of 3 major sub-languages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Definition Language (DDL): to create and modify the structure of the database&lt;/li&gt;
&lt;li&gt;Data Manipulation Language (DML): to perform read, insert, update, and delete operations on the data of the database&lt;/li&gt;
&lt;li&gt;Data Control Language (DCL): to control the access of the data stored in the database&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;📝 Definition: SQL Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQL Server is proprietary software or an RDBMS tool that executes the SQL statements. It also provides some additional features and functionalities, so that the user can properly interact with the database and can perform all the database operations efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;💡 Gotcha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So basically, it is a database software. It uses SQL as a language to query the database.&lt;/p&gt;

&lt;p&gt;The popular ones include MySQL, SQL Server, Oracle, Informix, Postgres etc. They are mix of open source and proprietary software available to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFNo4bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmvo4zbpjfyv76adzuui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFNo4bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmvo4zbpjfyv76adzuui.png" alt="Source: SPLessons"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope that clarifies your doubt and you are good to go ahead and understand which to use where. It should also make you clear with what you are using and what are different softwares you can compare (I know I haven't been quite comprehensive with the list, but then which softwares we use actually depends on the requirement which concerns security, control features, compatibility with the server, or the source of distribution. &lt;/p&gt;

&lt;p&gt;People who know more about it, please share your opinion through the comments.&lt;/p&gt;

&lt;p&gt;Thanks - until next time!&lt;/p&gt;

</description>
      <category>sql</category>
      <category>mustknow</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>useLocal: the useState hook for a properly-synced state</title>
      <author>Lukas Klinzing</author>
      <pubDate>Sun, 11 Jul 2021 12:28:56 +0000</pubDate>
      <link>https://dev.to/theluk/uselocal-the-usestate-hook-for-a-properly-synced-state-32kp</link>
      <guid>https://dev.to/theluk/uselocal-the-usestate-hook-for-a-properly-synced-state-32kp</guid>
      <description>&lt;p&gt;As you might know, the React hook &lt;code&gt;useState&lt;/code&gt; takes one argument, which will initialize its internal state to that given value. When React 16 with Hooks got released, I found it a little bit confusing, but it perfectly makes sense.&lt;/p&gt;

&lt;p&gt;No matter what, there are still situations, where you need to update the state based on the incoming props. Usually that is done using a &lt;code&gt;useEffect&lt;/code&gt; hook, where you listen on the incoming prop to change, and then update your local state. &lt;/p&gt;

&lt;p&gt;This is a great way of handling it, because you, as the owner of the component can perfectly control, if the parent prop change is actually what you want. It could even break your component if the parent decides to update a prop during a critical state of your component. &lt;/p&gt;

&lt;p&gt;But there are also situations, where not much can happen. There are simple scenarios where you basically want to hold a local version and not propagate it up the tree until a certain condition happen. During that time, you still want to allow the parent controlling component to update the local value, if that is what it wants. &lt;/p&gt;

&lt;p&gt;Here is an example how to allow the parent controlling component set (and update, if necessary) the from and to values. It can happen that for example for whatever reason, there is another component, that can set a date range, for that, we would want that from and to can be updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RangeDatepicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFrom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyCalendarRangePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChangeFrom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setFrom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChangeTo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setTo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;the easiest implementation of such a hook (in Typscript) looks like this&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;One further improvement would be, to pass in some conditional function that checks, if it is allowed to update the local state. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can visit the gist here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/theluk/13b7a17455b599699b7d34775cbf8273"&gt;https://gist.github.com/theluk/13b7a17455b599699b7d34775cbf8273&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>usestate</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Master Git in 7 minutes</title>
      <author>Valeria</author>
      <pubDate>Sun, 11 Jul 2021 12:27:30 +0000</pubDate>
      <link>https://dev.to/valeriavg/master-git-in-7-minutes-gai</link>
      <guid>https://dev.to/valeriavg/master-git-in-7-minutes-gai</guid>
      <description>&lt;p&gt;Essentially, Git keeps tabs on text changes, but the definition is a version control system. Chances are you've already used git one way or another: it is a de-facto standard for code versioning due to it's distributed nature, as opposed to centralised Apache Subversion (SVN).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-git"&gt;
  &lt;/a&gt;
  Installing Git
&lt;/h2&gt;

&lt;p&gt;To check if you have Git installed run in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git version
&lt;span class="c"&gt;# git version 2.30.1 (Apple Git-130)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't have it, follow instructions on &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;. Mac users can install it with brew: &lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-git"&gt;
  &lt;/a&gt;
  Configuring Git
&lt;/h2&gt;

&lt;p&gt;There are just a few things we want to configure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"John Doe"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c"&gt;# your name&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email johndoe@example.com &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c"&gt;# your email&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; init.defaultbranch&lt;span class="o"&gt;=&lt;/span&gt;main &lt;span class="c"&gt;# default branch name, to be compatible with GitHub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see current global configuration with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; &lt;span class="nt"&gt;--list&lt;/span&gt;
&lt;span class="c"&gt;# Type ":q" to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git stores configuration in plain text and, if you prefer, you can edit global configuration directly in &lt;code&gt;~/.gitconfig&lt;/code&gt; or &lt;code&gt;~/.config/git/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As the command suggests, removing &lt;code&gt;--global&lt;/code&gt; would make these commands scoped to the current folder. But to test that out we need a repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-new-repository"&gt;
  &lt;/a&gt;
  Creating new repository
&lt;/h2&gt;

&lt;p&gt;A repository is just a folder with all the stuff you want to track. To create one run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;gitexample &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
&lt;span class="nb"&gt;cd &lt;/span&gt;gitexample &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
git init
&lt;span class="c"&gt;# gitexample git:(main)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a folder &lt;code&gt;.git&lt;/code&gt; inside &lt;code&gt;gitexample&lt;/code&gt; folder. That hidden &lt;code&gt;.git&lt;/code&gt; folder is what makes a repository: all local configuration and changes are stored there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-changes"&gt;
  &lt;/a&gt;
  Making changes
&lt;/h2&gt;

&lt;p&gt;Let's create something in the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello, Git"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we ran &lt;code&gt;git status&lt;/code&gt;, we'll see the newly created untracked file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git status
&lt;span class="c"&gt;# On branch main&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# No commits yet&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# Untracked files:&lt;/span&gt;
&lt;span class="c"&gt;#  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;
&lt;span class="c"&gt;#   hello.txt&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# nothing added to commit but untracked files present (use "git add" to track)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the output suggests, let add the file. It can be done directly with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="c"&gt;# Or `git add hello.txt`, if we don't want all files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check on the repository status now, you'll see that the file is added (aka &lt;em&gt;staged&lt;/em&gt;), but not yet committed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git status
&lt;span class="c"&gt;# On branch main&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# No commits yet&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class="c"&gt;#  (use "git rm --cached &amp;lt;file&amp;gt;..." to unstage)&lt;/span&gt;
&lt;span class="c"&gt;#   new file:   hello.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To record the changes, let's commit them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add hello.txt"&lt;/span&gt;
&lt;span class="c"&gt;# [main (root-commit) a07ee27] Adds hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 2 insertions(+)&lt;/span&gt;
&lt;span class="c"&gt;# create mode 100644 hello.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pro tip:  &lt;code&gt;git commit -m &amp;lt;MESSAGE&amp;gt;&lt;/code&gt; is a short hand command, you can use &lt;code&gt;git commit&lt;/code&gt; to open editor (mostly vim) and provide a detailed commit description instead.&lt;/p&gt;

&lt;p&gt;Let's check the changes with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log
&lt;span class="c"&gt;# type :q to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will show something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;commit a07ee270d6bd0419a50d1936ad89b9de0332f375 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main&lt;span class="o"&gt;)&lt;/span&gt;
Author: Your Name &amp;lt;your@email.address&amp;gt;
Date:   Sun Jul 11 11:47:16 2021 +0200

    Adds hello.txt
&lt;span class="o"&gt;(&lt;/span&gt;END&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-branches"&gt;
  &lt;/a&gt;
  Creating branches
&lt;/h2&gt;

&lt;p&gt;Having a separate version of the initial code can be useful in a lot of situation: e.g. when testing out a feature you're unsure about or to avoid code conflicts when working together. That's exactly what a git branch is: it grows from a particular point in history.&lt;/p&gt;

&lt;p&gt;To create a branch run &lt;code&gt;git branch NAME&lt;/code&gt; and to switch branch run &lt;code&gt;git checkout NAME&lt;/code&gt;. Or simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; dev &lt;span class="c"&gt;# switches to a new branch called "dev"&lt;/span&gt;
&lt;span class="c"&gt;# Switched to a new branch 'dev'&lt;/span&gt;
&lt;span class="c"&gt;# gitexample git:(dev)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's change something in the &lt;code&gt;hello.txt&lt;/code&gt; file and commit the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Hello, Git Branch"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Change hello.txt"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's switch back to main version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;cat &lt;/span&gt;hello.txt
&lt;span class="c"&gt;# Switched to branch 'main'&lt;/span&gt;
&lt;span class="c"&gt;# Hello, Git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the file contents are still the same as they were. To compare branches we can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff dev
&lt;span class="c"&gt;# diff --git a/hello.txt b/hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# index 360c923..b7aec52 100644&lt;/span&gt;
&lt;span class="c"&gt;# --- a/hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# +++ b/hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# @@ -1,3 +1 @@&lt;/span&gt;
&lt;span class="c"&gt;# Hello, Git&lt;/span&gt;
&lt;span class="c"&gt;# -&lt;/span&gt;
&lt;span class="c"&gt;# -Hello, Git Branch&lt;/span&gt;
&lt;span class="c"&gt;# (END)&lt;/span&gt;
&lt;span class="c"&gt;# type ":q" to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make changes in main branch as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Hi from Main Branch"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Change hello.txt from main"&lt;/span&gt;
&lt;span class="c"&gt;# [main 9b60c4b] Change hello.txt from main&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 2 insertions(+)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's try to combine the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge dev
&lt;span class="c"&gt;# Auto-merging hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# CONFLICT (content): Merge conflict in hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# Automatic merge failed; fix conflicts and then commit the result.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the file was changed in the same place twice we got a conflict. Look at the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;hello.txt
&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;lt; HEAD
Hello, Git

Hi from Main Branch
&lt;span class="o"&gt;=======&lt;/span&gt;
Hello, Git
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is also a tool to see changes separately:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--ours&lt;/span&gt; &lt;span class="c"&gt;# :q to close &lt;/span&gt;
git diff &lt;span class="nt"&gt;--theirs&lt;/span&gt; &lt;span class="c"&gt;#:q to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can manually edit the file and commit the changes, but let's imagine we only want one of the versions. We'll start with aborting merge:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge &lt;span class="nt"&gt;--abort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And restarting merge with "theirs" strategy, meaning that in case of conflict we'll use whatever incoming branch insists on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge &lt;span class="nt"&gt;-X&lt;/span&gt; theirs hello.txt
&lt;span class="c"&gt;# Auto-merging hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# Merge made by the 'recursive' strategy.&lt;/span&gt;
&lt;span class="c"&gt;# hello.txt | 5 +----&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 1 insertion(+), 4 deletions(-)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The opposite to this strategy is "ours". Merging both changes together will require manual editing (or use of &lt;code&gt;git mergetool&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To see list of all branches run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="c"&gt;# type :q to close&lt;/span&gt;
&lt;span class="c"&gt;#  dev&lt;/span&gt;
&lt;span class="c"&gt;# * main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, to delete the branch run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-d&lt;/span&gt; dev
&lt;span class="c"&gt;# Deleted branch dev (was 6259828).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rebasing-branches"&gt;
  &lt;/a&gt;
  Rebasing branches
&lt;/h2&gt;

&lt;p&gt;Branches "grow" from a particular point in git history, &lt;em&gt;rebase&lt;/em&gt; allows to change that point. Let's create another branch and add some changes to hello.txt once more time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; story &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Once upon a time there was a file"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;story.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git add story.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add story.txt"&lt;/span&gt;
&lt;span class="c"&gt;# Switched to a new branch 'story'&lt;/span&gt;
&lt;span class="c"&gt;# [story eb996b8] Add story.txt&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 1 insertion(+)&lt;/span&gt;
&lt;span class="c"&gt;# create mode 100644 story.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's come back to the main branch and add changes there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Other changes"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; changes.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git add changes.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add changes.txt"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To replay the changes we made in &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;story&lt;/code&gt; branch run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout story &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git rebase main
&lt;span class="c"&gt;# Successfully rebased and updated refs/heads/story.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see new file created in &lt;code&gt;main&lt;/code&gt; branch being added to &lt;code&gt;story&lt;/code&gt; branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;span class="c"&gt;# changes.txt hello.txt   story.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Word of caution: do not rebase branches that someone else might have used, e.g. the main branch. Also, keep in mind that every history manipulation on a remote repository will require forcing these changes to take effect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-repository"&gt;
  &lt;/a&gt;
  Remote repository
&lt;/h2&gt;

&lt;p&gt;If you haven't yet, create a &lt;a href="https://github.com/signup"&gt;GitHub&lt;/a&gt; account, login and create a &lt;a href="https://github.com/new"&gt;new empty repository&lt;/a&gt; (private or public).&lt;/p&gt;

&lt;p&gt;Assuming the repository name was "example" run the following command (change to your username):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin git@github.com:USERNAME/example.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can refresh the page and see files in main branch. To push all local branches to remote repository run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--all&lt;/span&gt; origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's edit something on GitHub: just click any file and the pencil icon. Add a line with any text you want and press "Commit changes".&lt;/p&gt;

&lt;p&gt;Now run this command locally to get the remote changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#managing-uncommitted-changes"&gt;
  &lt;/a&gt;
  Managing uncommitted changes
&lt;/h2&gt;

&lt;p&gt;If you want to save your local changes for later you can use &lt;code&gt;git stash&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Changes"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use following command to check, apply or discard these changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git stash list
&lt;span class="c"&gt;# stash@{0}: WIP on main: 92354c8 Update changes.txt&lt;/span&gt;
git stash pop &lt;span class="c"&gt;# to apply changes&lt;/span&gt;
git stash drop &lt;span class="c"&gt;# to drop changes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pro tip: you can use stash number, i.e. &lt;code&gt;git stash pop 0&lt;/code&gt; to apply a particular stash or &lt;code&gt;git stash drop 0&lt;/code&gt; to drop it.&lt;/p&gt;

&lt;p&gt;If you want to discard all local changes and simply restore repository to last committed changes run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git restore &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#managing-committed-changes"&gt;
  &lt;/a&gt;
  Managing committed changes
&lt;/h2&gt;

&lt;p&gt;Once you create a commit, this change is saved in local git history. As mentioned before, all changes affecting remote history would require a &lt;code&gt;git push --force&lt;/code&gt;. Keep it in mind for all following commands.&lt;/p&gt;

&lt;p&gt;Let's start with editing the last commit message :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &lt;span class="c"&gt;# type :wq to save and close&lt;/span&gt;
&lt;span class="c"&gt;# Press "i" to edit, "Esc" to stop editing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How about we reset everything to the very beginning?&lt;br&gt;
To find the ID of the very first commit run this command and scroll (with arrow down) to the very end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--abbrev-commit&lt;/span&gt;
&lt;span class="c"&gt;# commit a07ee27&lt;/span&gt;
&lt;span class="c"&gt;# Author: Your Name &amp;lt;your@email.address&amp;gt;&lt;/span&gt;
Date:   Sun Jul 11 11:47:16 2021 +0200

    Adds hello.txt
&lt;span class="o"&gt;(&lt;/span&gt;END&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# type ":q" to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run this to reset the repository, but keep all changes unstaged:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git reset &lt;span class="nt"&gt;--soft&lt;/span&gt; COMMIT &lt;span class="c"&gt;# e.g. a07ee27&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As opposite to it, you can also make a hard reset and get rid of all the changes with &lt;code&gt;git reset --hard COMMIT&lt;/code&gt;. There are several other types of reset that you can learn from &lt;a href="https://git-scm.com/docs/git-reset"&gt;git documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aliases"&gt;
  &lt;/a&gt;
  Aliases
&lt;/h2&gt;

&lt;p&gt;Most of the times you'll be using just a handful of command (checkout, add ,commit, pull, push and merge mostly), but are some things you might want to have around for "just in case".&lt;/p&gt;

&lt;p&gt;One way to store those are git aliases. To configure an alias just set it in a config. For example, one alias I use a lot is &lt;code&gt;git tree&lt;/code&gt;, it prints a nice history log in a form of a tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.tree &lt;span class="s1"&gt;'log --graph --decorate --pretty=oneline --abbrev-commit'&lt;/span&gt;
&lt;span class="c"&gt;# Try it with `git tree`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another useful alias deletes all merged branches:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.clbr &lt;span class="s1"&gt;'!git branch --merged | grep -v \* | xargs git branch -D'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it's prefixed with "!", which allows us to use any command, not only git commands.&lt;/p&gt;

&lt;p&gt;That's all for today, hope it helps in your developer journey. As always, feel free to share your thoughts and feedback in the comments. Till the next time!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>git</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Four Stages Of Full Software Testing</title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Sun, 11 Jul 2021 12:21:27 +0000</pubDate>
      <link>https://dev.to/jarjanazy/the-four-stages-of-full-software-testing-2fgp</link>
      <guid>https://dev.to/jarjanazy/the-four-stages-of-full-software-testing-2fgp</guid>
      <description>&lt;p&gt;👉Testing software is crucial to assure that it does what we expect it to do, and to catch problems as early as possible to speed up the development process.&lt;/p&gt;

&lt;p&gt;👉The process of testing can be divided into 4 stages, starting from writing code and ending with deploying to production.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#commit-stage"&gt;
  &lt;/a&gt;
  1️⃣ Commit Stage
&lt;/h2&gt;

&lt;p&gt;This includes tests that fail fast&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A total run time of 5 minutes or less is preferred.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?🤔
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Unit tests

&lt;ul&gt;
&lt;li&gt;Testing isolated units of behavior.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Controller tests

&lt;ul&gt;
&lt;li&gt;For example, Given that we send a POST request to this endpoint, it should fail because the parameters are invalid.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Database tests

&lt;ul&gt;
&lt;li&gt;For example, Given those records in the DB, this method should get them.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Coding standards tests

&lt;ul&gt;
&lt;li&gt;This test fails because at file X you have 5 empty lines.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#acceptance-stage"&gt;
  &lt;/a&gt;
  2️⃣ Acceptance Stage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?🧐
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Acceptance tests&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, When user X logs in and orders a new book, we should create a new order request and send an email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuration tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any other tests that we want to run prior to release.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#release-stage"&gt;
  &lt;/a&gt;
  3️⃣ Release Stage
&lt;/h2&gt;

&lt;p&gt;This stage comes after building the software and attaching all its components together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?👀
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Smoke test

&lt;ul&gt;
&lt;li&gt;Test the system's most important features.

&lt;ul&gt;
&lt;li&gt;Sign-in, book purchase, etc...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Canary release testing🐤

&lt;ul&gt;
&lt;li&gt;Releasing the new version of the system to places of low impact.&lt;/li&gt;
&lt;li&gt;For example, Netflix uses Canary releasing by releasing new updates to geographic locations in the world where it's 1 AM so if any failure happens, only few people experience it.🤫&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception tracking.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#product-stage"&gt;
  &lt;/a&gt;
  4️⃣ Product Stage
&lt;/h2&gt;

&lt;p&gt;This stage is executed after the system is deployed to production and is under use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?❔
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Can it scale up/down?&lt;/li&gt;
&lt;li&gt;Is it using a lot of memory/disk/CPU?&lt;/li&gt;
&lt;li&gt;What is the request response time?&lt;/li&gt;
&lt;li&gt;Do performance metrics match predications?&lt;/li&gt;
&lt;li&gt;Security.&lt;/li&gt;
&lt;li&gt;For example Netflix has teams to test those aspects and try to break the system.

&lt;ul&gt;
&lt;li&gt;Chaos monkeys, Latency monkeys, Security monkeys🐒&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#this-material-in-this-post-is-mainly-derived-from-dave-farley-amazing-video-on-testing"&gt;
  &lt;/a&gt;
  This material in this post is mainly derived from Dave Farley amazing &lt;a href="https://www.youtube.com/watch?v=z-3aSVfoyBY&amp;amp;t=761s"&gt;video&lt;/a&gt; on testing.
&lt;/h3&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
