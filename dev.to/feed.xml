<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building A Game Yahtzee</title>
      <author>Web.Developer.io</author>
      <pubDate>Thu, 20 Jan 2022 16:59:39 +0000</pubDate>
      <link>https://dev.to/developerioweb/building-a-game-yahtzee-4f9d</link>
      <guid>https://dev.to/developerioweb/building-a-game-yahtzee-4f9d</guid>
      <description>&lt;p&gt;&lt;strong&gt;This Game is a Part of the Colt Steele React Course&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yahtzee is a chance-and-strategy dice rolling game. A game is played over 13 rounds.&lt;/p&gt;

&lt;p&gt;Each round, the player rolls five 6-sided dice. They may click on any number of dice to “freeze” or “unfreeze” them (frozen dice are displayed in a different color). They may re-roll the unfrozen dice up to 2 times.&lt;/p&gt;

&lt;p&gt;Each round, they must assign their dice to any unclaimed scoring category. Each category scores differently.&lt;/p&gt;

&lt;p&gt;After 13 rounds, the game is over, and the player’s score is the total of each scoring category.&lt;/p&gt;

&lt;p&gt;The Game Look Like This 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cV8rD53j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nun566ueknsu8r8eyyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cV8rD53j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nun566ueknsu8r8eyyx.png" alt="Yahtzee" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have not Built it from the Scratch I was provided with the Starter Code (Most of the Part was Done already).&lt;/p&gt;

&lt;p&gt;As an Exercise I have to Fix The problem and Understand the App Flow.&lt;/p&gt;

&lt;p&gt;Have a Look at the Code 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Developer-io-web/Yahtzee"&gt;https://github.com/Developer-io-web/Yahtzee&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-i-have-learnt-by-doing-this-project"&gt;
  &lt;/a&gt;
  Things I have Learnt By Doing This Project
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Actually This Game only test Your Knowledge of Props , State and Function But also It Forces u to be use Your Logical Ability cuz there are many things that were hard to understand and By only seeing the code u couldn't tell what a particular function is doing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So My advice is to take Copy and pen with you when You doing any Project or Exercise to get it done fast .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I have learnt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.) &lt;code&gt;Sets&lt;/code&gt; = Set is a Collection of the Unique Value , Each value can only be appeared in the Set&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Methods of Sets &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a.) new Set() = It is used to Create New set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;//set = [1,2,3,4,5,6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can pass an Array to &lt;code&gt;new Set()&lt;/code&gt; Method.&lt;/p&gt;

&lt;p&gt;b.) add() = Adds a New element to the Set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;c.) has() = Return true if a value exists in the Set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Return True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And there is also a Set Property called size&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;size&lt;/code&gt; = Returns the Number of elements in a set&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also there are many Methods of Set But u can always use the Google whenever u are Stuck No need to Cram all these u will learn these as u start using them 😉&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2.) &lt;code&gt;For Each&lt;/code&gt; Method &lt;br&gt;
I already knew about this method but use it very rarely .&lt;br&gt;
The &lt;code&gt;forEach()&lt;/code&gt; method calls a function for &lt;br&gt;
each element in an array.&lt;/p&gt;

&lt;p&gt;For Example -&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//It will console.log the whole array.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.) &lt;code&gt;Array.from()&lt;/code&gt; Method&lt;/p&gt;

&lt;p&gt;The from() method creates a new array&lt;/p&gt;

&lt;p&gt;When applied to a string, each word gets converted to an array&lt;br&gt;
element in the new array.&lt;br&gt;
&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It Return a newly created Array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello How are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//The string will get converted to an array.  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can pass in it anything , it will Created a Array for u.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//Array is Defined but with undefined values u can fill the values later.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy Coding ☺️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Next JS – optimize blog posts</title>
      <author>Kasper Aamodt</author>
      <pubDate>Thu, 20 Jan 2022 16:38:06 +0000</pubDate>
      <link>https://dev.to/kasperaamodt/next-js-optimize-blog-posts-183m</link>
      <guid>https://dev.to/kasperaamodt/next-js-optimize-blog-posts-183m</guid>
      <description>&lt;p&gt;This website is built with Next JS and WordPress. I used WP for the blog part of the website, as there is no need to reinvent the wheel when it comes to a CMS. I worked with WP long before starting with Next JS, so it was a natural choice. &lt;/p&gt;

&lt;p&gt;Many writers, including me, use images in blogs posts. So when you import that blog post into Next, most people use dangerouslySetInnerHTML to render all the HTML. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div dangerouslySetInnerHTML={{__html: post.content}} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This usually works well, but it could be better. The problem here is that all of the images in the content will be in a standard &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; tag, which is not recommended in Next JS. In Next JS, you should use the Image component from ‘next/image’, which optimizes images to make them smaller in size, therefore reducing the page size and ultimately the loading times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;html-react-parser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, how can you fix this? Well, as the heading suggests, html-react-parser. The parser converts an HTML string into one or more React elements. We can use this package instead of dangerouslySetInnerHTML to parse the HTML from our post and replace content when it is being parsed. Here is how you do it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the parser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i html-react-parser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Import and use&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parsing the HTML string with the parse function, which is taking in the HTML string and options as parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;br&gt;
    {parse(blog.content, replaceImage)}&lt;br&gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The options I pass to the parser, to target the img tag and replace it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const replaceImage = {&lt;br&gt;
    replace: ({ name, attribs, children }) =&amp;gt; {&lt;br&gt;
        if (name === "figure" &amp;amp;&amp;amp; /wp-block-image/.test(attribs.class)) {&lt;br&gt;
            return &amp;lt;&amp;gt;{domToReact(children, replaceImage)}&amp;lt;/&amp;gt;;&lt;br&gt;
        }&lt;br&gt;
        if (name === "img") {&lt;br&gt;
            return (&lt;br&gt;
                &amp;lt;Image&lt;br&gt;
                    src={attribs.src}&lt;br&gt;
                    width={attribs.width}&lt;br&gt;
                    height={attribs.height}&lt;br&gt;
                    alt={attribs.alt ? attribs.alt : "Blog post image"}&lt;br&gt;
                /&amp;gt;&lt;br&gt;
            );&lt;br&gt;
        }&lt;br&gt;
    }&lt;br&gt;
};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now all inserted images in the blog post use the Image component.&lt;br&gt;
&lt;a href="https://gist.github.com/kasperaamodt/055c6203d8761b4500c5fb108f0e4f03"&gt;Full Gist.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, why should you do this? As stated above, it will optimize all images in posts, leading to faster load times, and ultimately, better SEO. Of course, the package itself does increase the bundle size. But the slight increase that adds, compared to the savings on image sizes, is a net saving in bundle size.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://aamodt.xyz/blog/next-js-optimize-blog-posts"&gt;aamodt.xyz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating a Gradient Component in React From Design Tokens</title>
      <author>Michael Mangialardi</author>
      <pubDate>Thu, 20 Jan 2022 16:08:45 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/creating-a-gradient-component-in-react-from-design-tokens-kll</link>
      <guid>https://dev.to/michaelmangial1/creating-a-gradient-component-in-react-from-design-tokens-kll</guid>
      <description>&lt;p&gt;If you're not familiar with &lt;a href="https://www.michaelmang.dev/blog/introduction-to-design-tokens"&gt;design tokens&lt;/a&gt;, they are simply representations of design specifications in code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eq7iWoVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q5cbu96xnlznjr6ou0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eq7iWoVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q5cbu96xnlznjr6ou0w.png" alt="Creating a Gradient Component in React From Design Tokens" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By "representations," it is meant that they are key-value pairs that represent design specifications.&lt;/p&gt;

&lt;p&gt;Generally speaking, there are two types of design tokens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;"Simple" tokens - Representations of valid &lt;em&gt;values&lt;/em&gt; of the design system. These tokens usually cover the colors, typography, spacing, etc. of the design system (i.e. &lt;code&gt;color-red-500&lt;/code&gt;, &lt;code&gt;font-bold&lt;/code&gt;, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Component" tokens - Representations of the design specs for a component/element (i.e. &lt;code&gt;component-button-background-color&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi-c4X68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk9x7g2ps2p3gysf2z4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi-c4X68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk9x7g2ps2p3gysf2z4k.png" alt="Creating a Gradient Component in React From Design Tokens" width="880" height="763"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a &lt;a href="https://www.michaelmang.dev/blog/managing-and-exporting-design-tokens-with-style-dictionary"&gt;design tokens pipeline&lt;/a&gt;, you can write out design tokens in JSON format, and then translate those "raw"/JSON design tokens into formatted tokens (JavaScript modules, CSS variables, SASS variables, etc.).&lt;/p&gt;

&lt;p&gt;With that background in mind, imagine that a design system had "simple" design tokens defining valid colors.&lt;/p&gt;

&lt;p&gt;Here's the JSON representation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json-doc"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"red-50"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFC3C2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"red-100"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFAFAD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;// ...etc&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, imagine that a design tokens pipeline formats the JSON into the following JavaScript modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;colorRed50&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#FFC3C2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;colorRed100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#FFAFAD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, let's say these tokens can be consumed in an application via an npm package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, given such a setup, how can we programmatically create gradients when given two color tokens?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ha8nvKJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zhns61di1x2xjxcik2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ha8nvKJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zhns61di1x2xjxcik2a.png" alt="Creating a Gradient Component in React From Design Tokens" width="400" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's one way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
      linear-gradient(
        45deg,
        &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,
        &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      )
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, but is there a way that we can refactor this?&lt;/p&gt;

&lt;p&gt;Well, we could create a helper function that returns the gradient when providing the &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// get-gradient.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`linear-gradient(45deg, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./get-gradient.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This refactor doesn't save in lines of code, but it does guarantee that gradients will be created the same so long as they are created through the &lt;code&gt;getGradient&lt;/code&gt; helper function.&lt;/p&gt;

&lt;p&gt;What if we refactored one step further and allowed the gradient to be applied to any child component via a wrapper component?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Gradient.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cloneElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`linear-gradient(45deg, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Gradient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AnotherComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./AnotherCompoent.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Gradient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Gradient.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Gradient&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnotherComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Gradient&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using &lt;code&gt;Children&lt;/code&gt; and &lt;code&gt;cloneElement&lt;/code&gt;, the &lt;code&gt;Gradient&lt;/code&gt; component clones the child element and applies the gradient.&lt;/p&gt;

&lt;p&gt;🎊 Awesome! Now, we have a pattern for applying a gradient via a wrapper component in React!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Acra. Features: Tokenization</title>
      <author>Cossack Labs</author>
      <pubDate>Thu, 20 Jan 2022 16:00:41 +0000</pubDate>
      <link>https://dev.to/cossacklabs/acra-features-tokenization-57fn</link>
      <guid>https://dev.to/cossacklabs/acra-features-tokenization-57fn</guid>
      <description>&lt;p&gt;Typically, encrypted data is a binary data. But in some cases, database structure suggests using the original data format (string, int). Data tokenization works for the same goal as encryption but &lt;strong&gt;allows storing data in its original format.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/cossacklabs/acra"&gt;Use Acra Community Edition for free&lt;/a&gt;. Check out &lt;a href="https://www.cossacklabs.com/acra/#pricing"&gt;Acra Enterprise Edition&lt;/a&gt; tailored for solutions with high security requirements.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tokenization"&gt;
  &lt;/a&gt;
  4️⃣ Tokenization
&lt;/h2&gt;

&lt;p&gt;💡 Acra allows configuring &lt;a href="https://docs.cossacklabs.com/acra/security-controls/tokenization/"&gt;data tokenization&lt;/a&gt; to certain database fields. Tokenization means that a sensitive data field is substituted with a token and matched to the original only when the original data field is required.&lt;/p&gt;

&lt;p&gt;Acra combines encryption and tokenization—the original data fields are encrypted and stored in a separate table/database, when the original database stores tokens instead. Thus, the &lt;strong&gt;database leakage will reveal only tokens, not the original data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwgx7ARE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr6jabggo460c1o698yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwgx7ARE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr6jabggo460c1o698yp.png" alt="Tokenization. Acra by Cossack Labs" width="828" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tokens look like plaintext data—they match the desired row type/format and length. Acra supports tokens of different formats: email, string, int, binary. &lt;/p&gt;

&lt;p&gt;💡 Tokenization is useful for encrypting data in legacy systems—no need to change database scheme or rewrite legacy applications as &lt;strong&gt;they will continue working with tokens instead of original data.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note, that data encryption, data masking, and tokenization are different security controls that address similar threats but provide different usability advantages. They all work for your sensitive data and build defense in depth on different levels. &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cryptography</category>
      <category>security</category>
      <category>encryption</category>
      <category>database</category>
    </item>
    <item>
      <title>Session Management - Fundamentals</title>
      <author>Abhinav Pandey</author>
      <pubDate>Thu, 20 Jan 2022 15:57:24 +0000</pubDate>
      <link>https://dev.to/abh1navv/session-management-fundamentals-3ijn</link>
      <guid>https://dev.to/abh1navv/session-management-fundamentals-3ijn</guid>
      <description>&lt;p&gt;
  Table of Contents
  &lt;ol&gt;
&lt;li&gt;
&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#a-simple-session-management-flow"&gt;A simple session management flow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-need-for-authentication"&gt;The need for authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-need-for-authorization"&gt;The need for authorization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-purpose-of-access-tokens"&gt;The purpose of access tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#session-expiry"&gt;Session Expiry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#access-tokens"&gt;Access Tokens&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#reference-tokens"&gt;Reference Tokens&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#authorization-flow"&gt;Authorization flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#considerations-while-using-reference-tokens"&gt;Considerations while using reference tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#value-tokens"&gt;Value Tokens&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#authorization-flow"&gt;Authorization flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#considerations-while-using-value-tokens"&gt;Considerations while using value tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Session management is the process of maintaining a session &lt;em&gt;"between a client and a server", "for a user", "for a period of time"&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-session-management-flow"&gt;
  &lt;/a&gt;
  A simple session management flow
&lt;/h3&gt;

&lt;p&gt;The process can be described as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user &lt;strong&gt;authenticates&lt;/strong&gt; with their credentials using a client application(such as a web browser).&lt;/li&gt;
&lt;li&gt;The server receives the request and creates a session for the user.&lt;/li&gt;
&lt;li&gt;The server sends an &lt;strong&gt;access token&lt;/strong&gt; to the client.&lt;/li&gt;
&lt;li&gt;For subsequent requests, the client uses the access token to request the server on behalf of the user.&lt;/li&gt;
&lt;li&gt;When the server receives the request, it checks the access token and if it is valid, the server is able to figure out the actions the user is &lt;strong&gt;authorized&lt;/strong&gt; to perform.&lt;/li&gt;
&lt;li&gt;This process continues until the user logs out or &lt;strong&gt;the session expires&lt;/strong&gt;. In that case, the access tokens are deleted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at the highlighted terms of the session management process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-need-for-authentication"&gt;
  &lt;/a&gt;
  The need for authentication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p4n6CLUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gphwdylqa2n9bmd56g4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p4n6CLUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gphwdylqa2n9bmd56g4c.png" alt="Authentication Flow" width="436" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to know &lt;strong&gt;who the user is&lt;/strong&gt;. In deeper terms, to associate the actions of the user with their identity. If I open the Twitter website and hit like on a post, Twitter should be able to associate that like with my identity.&lt;/li&gt;
&lt;li&gt;an important point to note in context of web applications is that authentication always involves a user interaction, be it just a click of a button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-need-for-authorization"&gt;
  &lt;/a&gt;
  The need for authorization
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Every user has a set of permissions. These permissions are granted to the user by the server. For example, I can like any post, but I can only delete my own posts or edit my own profile.&lt;/li&gt;
&lt;li&gt;In theory, every request a user makes to the server is validated against the permissions that the user has.&lt;/li&gt;
&lt;li&gt;In practice, a server implicitly lets all users perform a few actions but requires authorization for all other actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-purpose-of-access-tokens"&gt;
  &lt;/a&gt;
  The purpose of access tokens
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The access token is a unique identifier for the session. It can be linked to the user's identity and their permissions.&lt;/li&gt;
&lt;li&gt;Its purpose is to enable the user to perform actions on the server without having to authenticate on every request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#session-expiry"&gt;
  &lt;/a&gt;
  Session expiry
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The session expires after a period of time. This needs to be handled in the implementation of the access token.&lt;/li&gt;
&lt;li&gt;Expiry is an intuitive concept because it wouldn't make sense to have a session that lasts forever.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#access-tokens"&gt;
  &lt;/a&gt;
  Access Tokens
&lt;/h2&gt;

&lt;p&gt;Access tokens can be broadly classified into two categories:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference-tokens"&gt;
  &lt;/a&gt;
  Reference Tokens
&lt;/h3&gt;

&lt;p&gt;These are tokens that are used to identify the user and their permissions but do not hold this information themselves.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A usual implementation of reference tokens is a random string.&lt;/li&gt;
&lt;li&gt;The string should be unique for every user.&lt;/li&gt;
&lt;li&gt;It should also be long enough to be difficult to guess.&lt;/li&gt;
&lt;li&gt;It points to the user's identity and permissions in a storage. The storage can be a database, a distributed cache like Redis or in memory objects of the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#authorization-flow"&gt;
  &lt;/a&gt;
  Authorization flow
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UlaALzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l848oj51aw32h0tfzjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UlaALzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l848oj51aw32h0tfzjx.png" alt="Authorization with reference tokens" width="406" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a request to the server - the access token is sent as a header.&lt;/li&gt;
&lt;li&gt;The server verifies the access token's validity by querying the storage for it. The storage returns the permissions against that token.&lt;/li&gt;
&lt;li&gt;Checking the validity involves

&lt;ul&gt;
&lt;li&gt;checking that the token exists in the storage&lt;/li&gt;
&lt;li&gt;checking that the token is not expired.&lt;/li&gt;
&lt;li&gt;if all is well till here, the server checks the permissions of the user against what is requested in the request.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The server returns the response to the client&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#considerations-when-using-reference-tokens"&gt;
  &lt;/a&gt;
  Considerations when using Reference Tokens
&lt;/h4&gt;

&lt;p&gt;As we can see, each request requires a storage interaction. This can be a costly operation depending on the storage being used. The impact can be measured using a few parameters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput,&lt;/li&gt;
&lt;li&gt;fault tolerance,&lt;/li&gt;
&lt;li&gt;scalability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's compare these three attributes for each of the three storage types.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;In-memory storage&lt;/strong&gt; - The database stores the permissions permanently and additionally, the sessions and the permissions in effect are stored in an in-memory object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput: It's very fast to read from in-memory objects. &lt;strong&gt;Good&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;fault tolerance: If the server goes down, all sessions are lost.  &lt;strong&gt;Fairly unacceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;scalability: If servers need to be used in clusters, session created on one server does not work. This leads to the need for sticky sessions. They require a overhead in implementation and are not preferred because they can lead to a skew in server load. In short, saving data on the servers does not work in the favor of scalability &lt;strong&gt;Bad&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Databases&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput: It's not very fast to read from databases or any kind of persistent storage. This can reduce the number of requests your application can serve concurrently &lt;strong&gt;Bad&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;fault tolerance: If the database server goes down, sessions are not lost but temporarily it is not possible to create sessions or authorize users during the downtime. However, database downtime is something that can be avoided if extra care is taken to create a fault tolerant database architecture. Any large scale application is likely to plan for this.  &lt;strong&gt;Fairly acceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;scalability: A database allows the servers to scale as needed. &lt;strong&gt;Good&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis(or any other distributed cache)&lt;/strong&gt; - The database stores the permissions permanently and additionally, the sessions and the permissions in effect are stored in a distributed cache.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput: It's faster to read from Redis than databases. &lt;strong&gt;Fairly acceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;fault tolerance: If the Redis server goes down, all sessions are lost and cannot be recovered. Nor can new sessions be created during the downtime. &lt;strong&gt;Fairly unacceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;scalability: It allows the application servers to scale as needed. However, as the user activity increases, Redis will require scaling of its own infrastructure. This is completely normal in web applications. &lt;strong&gt;Fairly acceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Table to summarize this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Storage Type&lt;/th&gt;
&lt;th&gt;Request Throughput&lt;/th&gt;
&lt;th&gt;Fault Tolerance&lt;/th&gt;
&lt;th&gt;Scalability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;In-memory storage&lt;/td&gt;
&lt;td&gt;Good ✅&lt;/td&gt;
&lt;td&gt;Unacceptable 🟠&lt;/td&gt;
&lt;td&gt;Bad ❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Databases&lt;/td&gt;
&lt;td&gt;Bad ❌&lt;/td&gt;
&lt;td&gt;Acceptable🟡&lt;/td&gt;
&lt;td&gt;Good ✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;Acceptable🟡&lt;/td&gt;
&lt;td&gt;Unacceptable 🟠&lt;/td&gt;
&lt;td&gt;Acceptable 🟡&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#value-tokens"&gt;
  &lt;/a&gt;
  Value Tokens
&lt;/h3&gt;

&lt;p&gt;These are tokens that hold the user's identity and their permissions. They are stored on the client side.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They can be encrypted or encoded strings.&lt;/li&gt;
&lt;li&gt;They must contain details which uniquely identify the user, like a username or a userid.&lt;/li&gt;
&lt;li&gt;They may contain additional information such as the expiry time so that they can self-invalidate after a time.&lt;/li&gt;
&lt;li&gt;The ultimate goal of a value token is to provide authorization without needing interaction with any external storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#authorization-flow"&gt;
  &lt;/a&gt;
  Authorization flow
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVoxIMA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufk595i46uxlnw3xnz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVoxIMA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufk595i46uxlnw3xnz0.png" alt="Authorization user value tokens" width="331" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a request to the server - the access token is sent as a header. The server verifies the access token's validity by reading its content. Checking the validity involves:

&lt;ul&gt;
&lt;li&gt;decrypting/decoding the token's content.&lt;/li&gt;
&lt;li&gt;checking that the token is not expired using the expiry time in the token content.&lt;/li&gt;
&lt;li&gt;If all is well till here, the server checks the permissions of the user against what is requested. This permission information is part of the token content itself so no database queries are required.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The server returns the response to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To understand this deeper let's talk about an exact implementation of value tokens - Json Web Tokens (JWT).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jwt-structure"&gt;
  &lt;/a&gt;
  JWT Structure
&lt;/h4&gt;

&lt;p&gt;Example JWT:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;/em&gt;.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.&lt;strong&gt;TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Italic part - &lt;strong&gt;header&lt;/strong&gt; - JSON object that contains the algorithm and type of token. Base64URL encoded.&lt;/li&gt;
&lt;li&gt;Middle part - &lt;strong&gt;payload&lt;/strong&gt; - JSON object that contains the user's information, permissions and expiry time. Base64url encoded.&lt;/li&gt;
&lt;li&gt;Bold part - &lt;strong&gt;signature&lt;/strong&gt; - a string which only the server can understand.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Signature is created using the algorithm used in the header. The server uses a secret key to sign the payload and header.&lt;br&gt;
Only the server knows the key required to create or understand the signature.&lt;/p&gt;

&lt;p&gt;If you decode the same JWT on &lt;a href="//jwt.io"&gt;jwt.io&lt;/a&gt;, you can see what's inside. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c6eDrvnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0nsomt4qa2y7v6w5mm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c6eDrvnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0nsomt4qa2y7v6w5mm.png" alt="Decoded JWT" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signature creation&lt;/strong&gt;&lt;br&gt;
Signature = Algorithm((header+payload)*secretKey)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signature verification&lt;/strong&gt;&lt;br&gt;
Create another signature using the same algorithm and secret key. Compare it with the signature received in the request.&lt;br&gt;
Algorithm((header + payload)*secretKey) == Signature&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#considerations-when-using-jwts"&gt;
  &lt;/a&gt;
  Considerations when using JWTs
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Both header and payload can be encoded/decoded by anyone and read. So do not store anything sensitive like a password in it. If there is some sensitive information in the payload, encrypt it.&lt;/li&gt;
&lt;li&gt;If a JWT is leaked, the attacker can use it to access the resource as long as it is valid. This poses a question about how long the JWT should be valid. We will cover this in the next article when we talk about more advanced concepts.&lt;/li&gt;
&lt;li&gt;In contrast, a reference token works better in this scenario - The server controls it, so it can revoke it on demand if either the server or the victim are able to detect the theft.&lt;/li&gt;
&lt;li&gt;The only way to revoke a JWT is to change the secret key. This is not recommended as it will invalidate sessions for all your users. This is however easy to do and can be an option during incident response.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We looked at a simple session management flow and we looked at two types of access tokens that can be used to implement it. Both have their pros and cons and none of them is a silver bullet.&lt;br&gt;
This flow works fine for a simple web application but it lacks a few key features which can make it inadequate for critical applications.&lt;/p&gt;

&lt;p&gt;In the next article, we will talk more about security, scalability and user experience aspects of session management. &lt;br&gt;
We will also utilise an open source library &lt;a href="https://www.supertokens.io"&gt;Supertokens&lt;/a&gt; to implement an improved session management flow.&lt;/p&gt;




&lt;p&gt;Thanks for reading. Stay tuned for more on session management. If you want to connect with me, you can find me on &lt;a href="https://twitter.com/abh1navv"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>security</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I show you how to Crack a .NET Application (3 clicks)</title>
      <author>Dotnetsafer</author>
      <pubDate>Thu, 20 Jan 2022 15:55:29 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/i-show-you-how-to-crack-a-net-application-3-clicks-47ke</link>
      <guid>https://dev.to/dotnetsafer/i-show-you-how-to-crack-a-net-application-3-clicks-47ke</guid>
      <description>&lt;p&gt;⚠️&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;em&gt;This article is for educational and training orientation, we are not responsible for the misuse of the techniques and explanations mentioned in this article and / or the use of the tools mentioned / provided, also we do not assume responsibility for the actions carried out with the information of the same. Please use this information for ethical purposes.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Hello to all developers 👋, I am Juan and I am part of the &lt;a href="https://dotnetsafer.com"&gt;Dotnetsafer&lt;/a&gt; team.&lt;/p&gt;

&lt;p&gt;I do this article for a very simple reason, in our offices a co-working space) &lt;strong&gt;there are quite a few companies that develop in .NET&lt;/strong&gt;, and one day at lunch I commented what we were doing and they did not understand anything, it turns out that &lt;strong&gt;they had no idea what decompilation is.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They did not know that &lt;strong&gt;with a simple tool you could see, copy or modify its development&lt;/strong&gt; —&lt;em&gt;not in all cases you should be concerned&lt;/em&gt;— but for some of them the core of the business is the development itself and obviously it did not do much grace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have to say that this happens in all compiled languages, but I will focus on .NET which is what we master.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article &lt;strong&gt;I am going to show basic notions about de-compilation&lt;/strong&gt; and reverse engineering, if you are interested in something more complex, do not hesitate to ask us!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To carry out the practical parts we use &lt;strong&gt;&lt;a href="https://github.com/dnSpy/dnSpy"&gt;DnSpy&lt;/a&gt;&lt;/strong&gt;, but we provide you with the same tool from &lt;strong&gt;&lt;a href="https://decompiler.dotnetsafer.com"&gt;https://decompiler.dotnetsafer.com&lt;/a&gt;&lt;/strong&gt; so that you can carry out the tutorial from your browser without having to download anything ♥. (Simply to decompile drag the applications to the left part shown on the screen, the code will be displayed on the right part).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-decompilation"&gt;
  &lt;/a&gt;
  What is de-compilation
&lt;/h2&gt;

&lt;p&gt;De-compilation is the reverse of compilation (I'm going to patent this great explanation).&lt;/p&gt;

&lt;p&gt;That is, the &lt;strong&gt;COMPILATION&lt;/strong&gt; is basically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You write code&lt;/li&gt;
&lt;li&gt;You push the magic &lt;strong&gt;compile&lt;/strong&gt; button and it becomes an executable/file/.exe/dll... (Well, it should ... surely you forgot a semicolon or something like that 😪) you will also have 103 warnings ⚠, but if you don't open your eyes, you don't see them 🤭.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The process will be something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/uZef4xSKjC2Ig/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/uZef4xSKjC2Ig/giphy.gif" alt="compiling and application" width="320" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, de-compilation is the opposite, you have an executable file, .dll, .exe..., and with a tool (decompiler) you get the original source code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o72F7RrTPW6jymXew/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o72F7RrTPW6jymXew/giphy.gif" alt="decompilation" width="480" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And is it simple 🙄?&lt;br&gt;
I'd say it's easier than compiling, but let's see how it's done.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#decompiling-a-net-net-core-application"&gt;
  &lt;/a&gt;
  Decompiling a .NET / .NET Core application
&lt;/h2&gt;

&lt;p&gt;Let's decompile a simple application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYwUWnX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53imkigur6cpxjtvhc6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYwUWnX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53imkigur6cpxjtvhc6h.png" alt="decompiling .net app" width="406" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this example we will use &lt;a href="https://github.com/dnSpy/dnSpy"&gt;DnSpy&lt;/a&gt;. There are several tools and each one is good for something in particular, but DnSpy is one of the best for decompiling and debugging .NET applications.&lt;/p&gt;

&lt;p&gt;When we compile our .NET Core application, we will obtain the compiled files, in the case of &lt;strong&gt;.NET Core the ".exe" file will be the executable&lt;/strong&gt;, but it will be in charge of executing the &lt;strong&gt;".dll" that contains the code of our application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ok, let's proceed to decompile the .dll file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxu2DLZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pg8b9q3yg77i2kcuondn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxu2DLZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pg8b9q3yg77i2kcuondn.png" alt="decompiling net core" width="642" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, all we have to do is drag it to DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efHwHO8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gyazo.com/f6f97462b428dcce96850362f22f79e7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efHwHO8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gyazo.com/f6f97462b428dcce96850362f22f79e7.gif" alt="dnspy .net core" width="880" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once loaded, the original source code will be shown and we can work on it, we can analyze it, modify it, debug it, etc.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#viewing-the-source-code"&gt;
  &lt;/a&gt;
  Viewing the source code
&lt;/h3&gt;

&lt;p&gt;Once our application is decompiled, we can navigate through the source code as if it were our own project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl9W7Jox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/owqhjr292atvxicg9wgf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl9W7Jox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/owqhjr292atvxicg9wgf.png" alt="source code .net" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#debug-the-app"&gt;
  &lt;/a&gt;
  Debug the app
&lt;/h3&gt;

&lt;p&gt;This will be useful to understand how it works or to obtain some values in memory.&lt;/p&gt;

&lt;p&gt;For example, let's put a breakpoint before doing a subtraction:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwHat7Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjk9fvb2yevpnm4rukrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwHat7Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjk9fvb2yevpnm4rukrj.png" alt="dnspy breakpoint" width="496" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and then we will run the application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--soK_5mK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9sgvoo4gwzxfootsj054.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--soK_5mK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9sgvoo4gwzxfootsj054.png" alt="dnspy debug net core" width="175" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRQPfeG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqo6rwz4osf2rig455ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRQPfeG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqo6rwz4osf2rig455ev.png" alt="dnspy debug" width="816" height="732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a function that can be very useful at times, but it can also be dangerous ⚡.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#modify-the-code"&gt;
  &lt;/a&gt;
  Modify the code
&lt;/h3&gt;

&lt;p&gt;We can modify and re-compile the application without any problem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_rQG2wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8vlq5rmvh4o183y12cbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_rQG2wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8vlq5rmvh4o183y12cbc.png" alt="craking .net core app" width="540" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We can also do it using IL code, but if we do not know it it will be much more complex.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We change that simple text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysyYoMtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bpjw1v97e9vj8e1uv9go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysyYoMtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bpjw1v97e9vj8e1uv9go.png" alt="changing cil body .net core" width="471" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we compile again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9d2SlOUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foyu3kdc8nkjn4zhk6im.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9d2SlOUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foyu3kdc8nkjn4zhk6im.png" alt="compiling .net core" width="175" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to save our modified application, we will give:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hHys2eSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9kwrhlg9535qvr6tzrxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHys2eSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9kwrhlg9535qvr6tzrxl.png" alt="saving module dnspy" width="336" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will select the name of the file, its path and we will mark the following options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBjLwynk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0v27wu3zkv6wl0bpfjie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBjLwynk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0v27wu3zkv6wl0bpfjie.png" alt="metadata dnspy" width="453" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we will have our modified application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9aGbmaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r08z5shihurcgxjvq2u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9aGbmaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r08z5shihurcgxjvq2u8.png" alt="modified net core app" width="880" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, these are simple and unimportant examples, I leave to your imagination 💭 everything that could be done with these simple tools.&lt;/p&gt;

&lt;p&gt;Now we are going to see other types of applications, because &lt;strong&gt;compilation in .NET is the same, it does not matter if you use c#, vb, ASP, Xamarin, Blazor, everything works in the same way&lt;/strong&gt;, let's see then with a Blazor application.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#decompiling-a-web-application-with-blazor"&gt;
  &lt;/a&gt;
  Decompiling a web application with Blazor
&lt;/h2&gt;

&lt;p&gt;Now we have created a sample web application with Blazor, this is the application code in visual studio:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDeTUaOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fmg7z04nomjljhn01keu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDeTUaOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fmg7z04nomjljhn01keu.png" alt="blazor net core app" width="611" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically it is an application that shows the weather and we have added &lt;code&gt;Dotnetsafer&lt;/code&gt; in the middle so that we can see it later in the decompiled application, here is the web application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YcXcBlx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0tn9l7lc7j4tfl6z1f1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YcXcBlx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0tn9l7lc7j4tfl6z1f1r.png" alt="blazor webapp" width="827" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, let's get the code again.&lt;/p&gt;

&lt;p&gt;First we will use our browser (it does not matter which one), since when loading the .NET libraries to display the application, it makes a call to obtain them.&lt;/p&gt;

&lt;p&gt;We must enter inspection mode &lt;code&gt;Ctrl + Shift + C&lt;/code&gt; and go to section &lt;code&gt;Network&lt;/code&gt;, later reload the page with &lt;code&gt;Ctrl + F5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here will be the file that contains the code of our web application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWTzYU3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zc13mzocwwy8qzfz2gs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWTzYU3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zc13mzocwwy8qzfz2gs8.png" alt=".net blazor file" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also obtain all the dependencies or own .net files that are used by the application&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, we download it and open it again with DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FENiVRCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foj06la257pk9j34ggy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FENiVRCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foj06la257pk9j34ggy5.png" alt="decompiling blazor with DnSpy" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have the decompiled file we can do everything that I mentioned in the previous point.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#decompiling-a-mobile-app-with-xamarin"&gt;
  &lt;/a&gt;
  Decompiling a mobile app with Xamarin
&lt;/h2&gt;

&lt;p&gt;We raised the level of difficulty a little 🧨, but the operation is still the same.&lt;/p&gt;

&lt;p&gt;We have created a simple application for mobile devices with Xamarin, the compiled application will have the extension .APK&lt;/p&gt;

&lt;p&gt;The first thing we will do is unzip the APK, there are tools for this, but it is not necessary, for something so simple we can use &lt;a href="https://www.winrar.es/descargas"&gt;winrar&lt;/a&gt;, (yes, the program that never expires 🆓):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyySqRUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iz87jmtxtsrbbxhj6f6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyySqRUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iz87jmtxtsrbbxhj6f6u.png" alt="decompiling apk" width="627" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we will copy all the files in a folder:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psrTpRRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9a1ylqxs2jhsk3cofc7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psrTpRRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9a1ylqxs2jhsk3cofc7k.png" alt="decompiling xamarin apk" width="644" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the folder &lt;code&gt;Assemblies&lt;/code&gt; all .NET files will be found:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUQwRP_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53ndcyjpra3jqoh81tmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUQwRP_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53ndcyjpra3jqoh81tmy.png" alt=".net xamarin files" width="646" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here comes the interesting thing, these files have &lt;strong&gt;lz4 compression&lt;/strong&gt;, which will give us an error if we try to decompile it with DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdr_1AHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bw2bujqigxlxq07133d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdr_1AHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bw2bujqigxlxq07133d3.png" alt="dnspy error decompiling xamarin files" width="804" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this I bring a simple solution, a small Python script that will help us decompress all the .NET .dll files.&lt;/p&gt;

&lt;p&gt;Yes, this sounds very complex, and it seems that you must be an expert:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/rMS1sUPhv95f2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/rMS1sUPhv95f2/giphy.gif" alt="hacking .net" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it really is something very simple that we will do in less than a minute.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#decompress-xamarin-net-libraries"&gt;
  &lt;/a&gt;
  Decompress Xamarin .NET Libraries
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you don't have Python on your machine, &lt;a href="https://www.python.org/downloads/"&gt;install it previously&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once we have Python (I run it from the &lt;a href="https://code.visualstudio.com"&gt;VSCode&lt;/a&gt; terminal) we proceed:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-lz4"&gt;
  &lt;/a&gt;
  Install lz4:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HbQo7Mnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ua8pyhcf6ard0h1dx2pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HbQo7Mnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ua8pyhcf6ard0h1dx2pl.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/ua8pyhcf6ard0h1dx2pl.png" width="880" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m pip install lz4&lt;/code&gt; or simply &lt;code&gt;pip install lz4&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-of-the-decompression-script"&gt;
  &lt;/a&gt;
  Use of the decompression script
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lz4.block&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_usage_and_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: py .&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;decompressor.py target_path"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;input_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt;
    &lt;span class="n"&gt;output_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"extracted"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;output_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;header_expected_magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'XALZ'&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;xalz_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xalz_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;header_expected_magic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The input file does not contain the expected magic bytes, aborting ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;header_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;header_uncompressed_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;I'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"header index: %s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;header_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"compressed payload size: %s bytes"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"uncompressed length according to header: %s bytes"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;header_uncompressed_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;decompressed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lz4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uncompressed_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_uncompressed_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decompressed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"result written to file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".dll"&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to decompress "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;nDecompressed "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" assemblies!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The author of this script is Christian Reitter, X41 D-Sec GmbH, thank you for your article at &lt;a href="https://www.x41-dsec.de/security/news/working/research/2020/09/22/xamarin-dll-decompression/"&gt;X41 D-Sec GmbH&lt;/a&gt;, we have modified it to unzip all the files in the directory.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will copy the code into a file called &lt;code&gt;decompress.py&lt;/code&gt; and we will save it in the same path as our .dll files.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#decompress-the-files-we-need"&gt;
  &lt;/a&gt;
  Decompress the files we need:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1SMkDB_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z06xnl84dsztoghjpqqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SMkDB_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z06xnl84dsztoghjpqqw.png" alt="decompress .net xamarin files" width="880" height="109"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will do it with &lt;code&gt;py .\decompressor.py .\&lt;/code&gt;, we'll let it decompress all the .dll files in the directory.&lt;/p&gt;

&lt;p&gt;In this case I am only interested in the two files corresponding to my application.&lt;/p&gt;

&lt;p&gt;What has not been so difficult?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/102h4wsmCG2s12/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/102h4wsmCG2s12/giphy.gif" alt="hacking xamarin" width="245" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the files ready to open with DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1dT1svZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ta93uh0a1qt4in5k0tw1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1dT1svZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ta93uh0a1qt4in5k0tw1.png" alt="decompiling xamarin files with dnspy" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now again we can do everything I mentioned earlier, the procedure is always the same, only the way in which the files are compiled varies.&lt;/p&gt;

&lt;p&gt;This applies to all applications under .NET, such as games developed in Unity with C #, virtual reality applications and augmented reality.&lt;/p&gt;

&lt;p&gt;Did you like this article?&lt;/p&gt;

&lt;p&gt;It has been very simple but I consider it fine for a basic level and learn a little about these topics 😊.&lt;/p&gt;

&lt;p&gt;If you have found it interesting, do not hesitate to support it, and tell us below 👇 if you want to know something else, like let's talk about &lt;strong&gt;cracking&lt;/strong&gt;, &lt;strong&gt;injection&lt;/strong&gt; and other aspects.&lt;/p&gt;

&lt;p&gt;We could do some interesting practices or whatever you want to see around here.&lt;/p&gt;

&lt;p&gt;Thank you for reading the article ❤ and remember that in dotnetsafer we will be uploading articles about security in relation to .NET 🛡.&lt;/p&gt;

&lt;p&gt;You have the web version of Dnspy at &lt;a href="https://decompiler.dotnetsafer.com/"&gt;https://decompiler.dotnetsafer.com&lt;/a&gt; so that you can comfortably do all the tests in this article without having to download any program.&lt;/p&gt;

&lt;p&gt;Thank you for your attention, we hope you have learned a lot!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZBVhKIDgts1eHYdT7u/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZBVhKIDgts1eHYdT7u/giphy.gif" alt="goodbye" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>security</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 ways to use reduce in javascript</title>
      <author>Marco Pestrin</author>
      <pubDate>Thu, 20 Jan 2022 15:51:31 +0000</pubDate>
      <link>https://dev.to/pestrinmarco/3-ways-to-use-reduce-in-javascript-1442</link>
      <guid>https://dev.to/pestrinmarco/3-ways-to-use-reduce-in-javascript-1442</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Flat an array&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flattened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have a more complex array there is this other solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sum all numbers&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 36&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Change in an object with the number of occurrences&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Los Angeles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amsterdam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Singapore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tokyo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Singapore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/*
{
  "Los Angeles": 1,
  "London": 2,
  "Amsterdam": 1,
  "Singapore": 2,
  "Tokyo": 1
}
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>reduce</category>
      <category>javascript</category>
      <category>array</category>
    </item>
    <item>
      <title>MySQL MariaDB setup on Linux Ubuntu with SSL/TLS - 2022 - Video</title>
      <author>Tharun Shiv</author>
      <pubDate>Thu, 20 Jan 2022 15:46:14 +0000</pubDate>
      <link>https://dev.to/developertharun/mysql-mariadb-setup-on-linux-ubuntu-with-ssltls-2022-video-238f</link>
      <guid>https://dev.to/developertharun/mysql-mariadb-setup-on-linux-ubuntu-with-ssltls-2022-video-238f</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rLgzGf28_ts"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>database</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Website Without Code</title>
      <author>boomcatalyst</author>
      <pubDate>Thu, 20 Jan 2022 15:44:09 +0000</pubDate>
      <link>https://dev.to/ieeemace/create-a-website-without-code-4a91</link>
      <guid>https://dev.to/ieeemace/create-a-website-without-code-4a91</guid>
      <description>&lt;p&gt;Convert  your  designs  into  responsive,  live  websites  automatically.  Add  interactions,  motion graphics, video, audio &lt;em&gt;without writing any code&lt;/em&gt;. Connect to data and content source and build fully functioning websites, landing pages, HTML emails, product pages, or business applications easily. There are many platforms that allows you to build responsive websites without a single line of code. One such platform is &lt;a href="https://quest.ai"&gt;Quest&lt;/a&gt;&lt;br&gt;
With Quest, anyone can build what they envision without being constrained by their engineering bandwidth. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start"&gt;
  &lt;/a&gt;
  How to start
&lt;/h2&gt;

&lt;p&gt;Go to quest.ai. Then signup for free using &lt;em&gt;Build For Free&lt;/em&gt; button. Make sure to select &lt;em&gt;The new quest&lt;/em&gt; tile during sign up. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2V7QwpOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6kxxtltln733cbg2hcb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2V7QwpOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6kxxtltln733cbg2hcb.jpeg" alt="Image description" width="394" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZAE4WkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkdyzok6hgv0tz7qek90.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZAE4WkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkdyzok6hgv0tz7qek90.jpeg" alt="Image description" width="224" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After signup, you’ll be directed to a page shown below &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ILOijSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbrdwgtudojkticd34b4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ILOijSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbrdwgtudojkticd34b4.jpeg" alt="Image description" width="608" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quest is more of like a web hosting. For design of the web page, you can use either Adobe XD or &lt;em&gt;Figma.&lt;/em&gt; Select the &lt;em&gt;Quest plugin for Figma&lt;/em&gt; on top middle of the page. Now you will be directed to Figma plugin page as shown below. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;em&gt;Download&lt;/em&gt; button 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRWQL4uJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axf8nugs8ujj0ajsrhva.jpeg" alt="Image description" width="373" height="325"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and you will be directed to a page where  you  can  select  &lt;em&gt;Install&lt;/em&gt;  for installing the plugin.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will be asked to sign up to Figma. Complete the process &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XU65tij3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixvlma3pmmf1klgbvi98.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XU65tij3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixvlma3pmmf1klgbvi98.jpeg" alt="Image description" width="248" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xWlkbsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7m7kea07249xt1xfk57.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xWlkbsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7m7kea07249xt1xfk57.jpeg" alt="Image description" width="254" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After login you will be directed to a page where you can start creating your design by selecting &lt;em&gt;New design file. To learn more about how to design in Figma, use **resource&lt;/em&gt; section at the bottom of the Figma home page or &lt;em&gt;help.figma.com&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkWxjILo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hftqgn9wreef4oj9esc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkWxjILo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hftqgn9wreef4oj9esc.jpeg" alt="Image description" width="582" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After completing the design in Figma, you need to connect Figma and Quest using a plugin. For that go to plugin option on the dropdown menu and select &lt;em&gt;manage plugin&lt;/em&gt; under &lt;em&gt;plugins.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FuwbPmO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsvln9hhffrokm1y262d.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FuwbPmO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsvln9hhffrokm1y262d.jpeg" alt="Image description" width="624" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;em&gt;Browse plugin on community&lt;/em&gt; and search for &lt;em&gt;Quest&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLih2rdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc74md8ym0c9a2s1rx3i.jpeg" alt="Image description" width="370" height="233"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8zEWctd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2z6tngzy6rtn4sgvmn2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8zEWctd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2z6tngzy6rtn4sgvmn2.jpeg" alt="Image description" width="624" height="147"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go back to the design space and select Quest under plugin. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_OT7J_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxvifbr7ihrwcgo0n1ay.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_OT7J_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxvifbr7ihrwcgo0n1ay.jpeg" alt="Image description" width="620" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show up a box as shown below. Give a name for the design and select the layers that has to be imported to quest and click export. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Byoc8b8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ie0lbep6sl6aifwjh41.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Byoc8b8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ie0lbep6sl6aifwjh41.jpeg" alt="Image description" width="624" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now see you design in quest work window just by selecting &lt;em&gt;View in Quest&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SonK4vCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fykyh89ye0lbznkai8f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SonK4vCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fykyh89ye0lbznkai8f.jpeg" alt="Image description" width="624" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside Quest you can make you design adjustable to different screen sizes like laptops, tablets, smartphones etc. You can also launch your design into a custom domain if you had bought one already. &lt;/p&gt;

&lt;p&gt;To know more on how to work with &lt;em&gt;Quest&lt;/em&gt;  visit the resource section at the top of Quest homepage or visit &lt;strong&gt;&lt;a href="//www.quest.ai/docs"&gt;www.quest.ai/docs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;



&lt;pre&gt;&lt;br&gt;&lt;br&gt;
    ❤️ &lt;a href="https:ieeemace.org"&gt;Website&lt;/a&gt;  |  📷&lt;a href="https://www.instagram.com/ieeemace"&gt;Instagram &lt;/a&gt;  |  💼&lt;a href="https://in.linkedin.com/company/ieeemace"&gt;LinkedIn&lt;/a&gt;   |  🐥&lt;a href="https://twitter.com/ieeemace"&gt;Twitter&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;

</description>
    </item>
    <item>
      <title>Introduction to Amazon Managed Streaming for Apache Kafka (Amazon MSK)</title>
      <author>Adit Modi</author>
      <pubDate>Thu, 20 Jan 2022 15:32:51 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-amazon-managed-streaming-for-apache-kafka-amazon-msk-3fpe</link>
      <guid>https://dev.to/aws-builders/introduction-to-amazon-managed-streaming-for-apache-kafka-amazon-msk-3fpe</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK is a fully managed service that makes it easy for you to build and run applications that use Apache Kafka to process streaming data. Apache Kafka is an open-source platform for building real-time streaming data pipelines and applications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon MSK, you can use native Apache Kafka APIs to populate data lakes, stream changes to and from databases, and power machine learning and analytics applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WN9JMi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7qpu4gt84ewvwvh7qd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WN9JMi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7qpu4gt84ewvwvh7qd6.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Big Data Analytics Options on AWS&lt;/strong&gt; is a Series containing different articles that provides a basic introduction to different Big Data Analytics Options on AWS. Each article covers the detailed guide on how each service is used for collecting, processing, storing, and analyzing big data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache Kafka clusters are challenging to set up, scale, and manage in production. When you run Apache Kafka on your own, you need to provision servers, configure Apache Kafka manually, replace servers when they fail, orchestrate server patches and upgrades, architect the cluster for high availability, ensure data is durably stored and secured, set up monitoring and alarms, and carefully plan scaling events to support load changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK makes it easy for you to build and run production applications on Apache Kafka without needing Apache Kafka infrastructure management expertise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With a few clicks in the Amazon MSK console (sign-in required), you can create a fully managed Apache Kafka cluster that follows Apache Kafka’s deployment best practices, or you can create your own cluster using your own custom configuration. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you create your desired configuration, Amazon MSK automatically provisions, configures, and manages the operations of your Apache Kafka cluster and Apache ZooKeeper nodes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An Amazon MSK cluster is the primary Amazon MSK resource that you can create in your account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Following are the primary components that work together in MSK:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Broker nodes&lt;/strong&gt; — When creating an Amazon MSK cluster, you specify how many broker nodes you want Amazon MSK to create in each Availability Zone. Each Availability Zone has its own virtual private cloud (VPC) subnet.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ZooKeeper nodes&lt;/strong&gt; — Amazon MSK also creates the Apache ZooKeeper nodes for you. Apache ZooKeeper is an open-source server that enables highly reliable distributed coordination.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Producers, consumers, and topic creators&lt;/strong&gt; — Amazon MSK enables you to use Apache Kafka data-plane operations to create topics and to produce and consume data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cluster operations&lt;/strong&gt; — You can use the AWS Management Console, the AWS Command Line Interface (AWS CLI), or the APIs in the SDK to perform control-plane operations. For example, you can create or delete an Amazon MSK cluster, list all the clusters in an account, view the properties of a cluster, and update the number and type of brokers in a cluster.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK detects and automatically recovers from the most common failure scenarios for clusters, so that your producer and consumer applications can continue their write and read operations with minimal impact. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When Amazon MSK detects a broker failure, it mitigates the failure or replaces the unhealthy or unreachable broker with a new one. In addition, where possible, it reuses the storage from the older broker to reduce the data that Apache Kafka needs to replicate. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your availability impact is limited to the time required for Amazon MSK to complete the detection and recovery. After a recovery, your producer and consumer apps can continue to communicate with the same broker IP addresses that they used before the failure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ideal-usage-patterns"&gt;
  &lt;/a&gt;
  Ideal usage patterns
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The AWS Streaming Data Solution for Amazon MSK enables you to capture, store, process, and deliver real-time streaming data. This service helps you address real-time streaming use cases; for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capture high volume application log files&lt;/li&gt;
&lt;li&gt;Analyze website clickstreams&lt;/li&gt;
&lt;li&gt;Process database event streams&lt;/li&gt;
&lt;li&gt;Track financial transactions&lt;/li&gt;
&lt;li&gt;Aggregate social media feeds&lt;/li&gt;
&lt;li&gt;Collect IT log files&lt;/li&gt;
&lt;li&gt;Continuously deliver to a data lake&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cost-model"&gt;
  &lt;/a&gt;
  Cost model
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK has a simple “pay only for what you use” model. There are no minimum fees or upfront commitments. There are charges for the time your broker instances run, the storage used monthly, and standard data transfer fees for data in and out of the cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apache Kafka broker instance usage is billed on an hourly basis (billed at one second resolution), with varying fees depending on the size of the Apache Kafka broker instance and active brokers in your Amazon MSK clusters. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK charges for the amount of storage you provision in the cluster. This is calculated by adding up the GB per broker each hour and dividing by the number of hours in the month, resulting in a value in "GB-Month."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are no additional charges for data transfer between brokers or between Apache ZooKeeper nodes and brokers. Standard AWS data transfer charges are charged for data transferred in and out of Amazon MSK clusters. See Amazon MSK pricing for further details.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK allows you to choose the right type and number of brokers for yourcluster. You can size your cluster based on your ingestion rate, hours of retention and data output rates. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The number of partitions per broker is affected by use case and configuration. To determine the right number of brokers for your MSK cluster and understand costs, see the MSK Sizing and Pricing spreadsheet (file download). For more information about the different broker types, see Broker types.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#durability-and-availability"&gt;
  &lt;/a&gt;
  Durability and availability
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use the following recommendations so that your MSK cluster can be highly available during an update (such as when you're updating the broker type or Apache Kafka version, for example) or when Amazon MSK is replacing a broker.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that the replication factor (RF) is at least two for two-AZ clusters and at least three for three-AZ clusters. An RF of one can lead to offline partitions during a rolling update.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set minimum in-sync replicas (minISR) to at most RF-1. A minISR that is equal to the RF can prevent producing to the cluster during a rolling update. A minISR of two allows three-way replicated topics to be available when one replica is offline.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure client connection strings include multiple brokers. Having multiple brokers in a client’s connection string allows for failover when a specific broker is offline for an update.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#scalability-and-elasticity"&gt;
  &lt;/a&gt;
  Scalability and elasticity
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can increase the capacity of the cluster at any time according to your business or operational needs. You can use Amazon MSK operation to increase the number of brokers in your MSK cluster. To expand a cluster, make sure that it is in the ACTIVE state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also increase storage per broker. You can increase the amount of EBS storage per broker, but you can't decrease the storage. Storage volumes remain available during this scaling-up operation. You can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Automatic scaling&lt;/strong&gt; — You can configure Amazon Managed Streaming for Apache Kafka to automatically expand your cluster's storage in response to increased usage using Application Auto Scaling policies. Your automatic scaling policy sets the target disk utilization and the maximum scaling capacity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Manual scaling&lt;/strong&gt; — To increase storage, wait for the cluster to be in the ACTIVE state. Storage scaling has a cooldown period of at least six hours between events. Even though the operation makes additional storage available right away, the service performs optimizations on your cluster that can take up to 24 hours or more. The duration of these optimizations is proportional to your storage size.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h1&gt;

&lt;p&gt;Amazon MSK has deep AWS service integrations with Amazon EMR, AWS Lambda, Amazon Kinesis Data Analytics, and AWS Glue Streaming ETL. It also works with Kafka Connect, Mirror Maker, Kafka Streams, and a number of 3rd party frameworks like Apache Spark, Apache Storm, and so on. The producer side APIs add messages to the cluster for a topic. The consumer side APIs get messages for a topic as a stream of messages.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#antipatterns"&gt;
  &lt;/a&gt;
  Anti-patterns
&lt;/h1&gt;

&lt;p&gt;Amazon MSK has the following anti-patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ad hoc queries&lt;/strong&gt; — MSK is a stream of unbounded data. It is not used for ad hoc queries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Long-term data storage and analytics&lt;/strong&gt; — MSK is not suited for long-term data storage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Hope this guide gives you an Introduction to Amazon Managed Streaming for Apache Kafka (Amazon MSK).&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section 👇&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;👋 &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🤓 &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🐱‍💻 &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
✍️ &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me 🚀 for more content.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/big-data-analytics-options/amazon-msk.html"&gt;Reference Notes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>bigdata</category>
      <category>cloud</category>
      <category>analytics</category>
    </item>
    <item>
      <title>Spring Boot REST API authentication best practices using JWT (2022) </title>
      <author>Prafful Lachhwani</author>
      <pubDate>Thu, 20 Jan 2022 15:31:42 +0000</pubDate>
      <link>https://dev.to/prafful/spring-boot-rest-api-authentication-best-practices-using-jwt-2022-3j2d</link>
      <guid>https://dev.to/prafful/spring-boot-rest-api-authentication-best-practices-using-jwt-2022-3j2d</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-overview"&gt;
  &lt;/a&gt;
  1. Overview
&lt;/h3&gt;

&lt;p&gt;In this tutorial I will explain how you can implement production ready, token based REST API authentication using JWT (JSON Web Tokens). Further we will use these tokens to identify our acting user in a HTTP request to our API. For this tutorial we will use MongoDB to persist our user data, you can choose any database of your choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-what-is-a-jwt"&gt;
  &lt;/a&gt;
  2. What is a JWT?
&lt;/h3&gt;

&lt;p&gt;JSON Web Token(JWT) is an encoded string which we will use to identify our user in this case. A JWT consist of three parts separated by a period(&lt;code&gt;.&lt;/code&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Header&lt;/strong&gt;: It contains signing algorithm like SHA256.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Payload&lt;/strong&gt;: It contains our user data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Signature&lt;/strong&gt;: To verify the message wasn't changed along the way, making it secure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Combing all three will make our JWT look something like this &lt;code&gt;xxxxx.yyyyy.zzzzz&lt;/code&gt;. To learn more about JWT please visit - &lt;a href="https://jwt.io/"&gt;https://jwt.io/&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-project-initialization"&gt;
  &lt;/a&gt;
  3. Project Initialization
&lt;/h3&gt;

&lt;p&gt;We will start y initializing our Spring Boot project using &lt;a href="https://start.spring.io/#!type=maven-project&amp;amp;language=java&amp;amp;platformVersion=2.6.2&amp;amp;packaging=jar&amp;amp;jvmVersion=11&amp;amp;groupId=com.example&amp;amp;artifactId=api&amp;amp;name=API%20Authentication&amp;amp;description=Demo%20project%20for%20token%20based%20API%20authentication&amp;amp;packageName=com.example.api&amp;amp;dependencies=devtools,lombok,web,security,data-mongodb"&gt;Spring Initiailizr&lt;/a&gt;. For starters I have added 5 dependencies, you can tweak it a little according to your project needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KeF1Hn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642337593161/McqqZq45VO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KeF1Hn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642337593161/McqqZq45VO.png" alt="spring init.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit generate and import project in your favorite IDE. Also, don't forget to add database properties in &lt;code&gt;application.properties&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spring.data.mongodb.database=your_db_name_here
spring.data.mongodb.port=27017
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-additional-dependencies"&gt;
  &lt;/a&gt;
  4. Additional Dependencies
&lt;/h3&gt;

&lt;p&gt;You will have to add following dependencies in order to use &lt;code&gt;JWT&lt;/code&gt; in your project. &lt;code&gt;commons-lang3&lt;/code&gt; is optional, I personally use it for its various utility classes. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-maven-based-projects"&gt;
  &lt;/a&gt;
  For maven based projects:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jjwt-api&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.11.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jjwt-impl&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.11.2&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jjwt-jackson&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.11.2&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.12.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#for-gradle-based-projects"&gt;
  &lt;/a&gt;
  For gradle based projects:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies {
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2',
             'io.jsonwebtoken:jjwt-jackson:0.11.2',
             'org.apache.commons:commons-lang3:3.0'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-project-structure"&gt;
  &lt;/a&gt;
  5. Project Structure
&lt;/h3&gt;

&lt;p&gt;We will follow MVC pattern, please refer to following project structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l8ggDs_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642340863634/RWTLUi_OJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l8ggDs_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642340863634/RWTLUi_OJ.png" alt="image.png" width="479" height="785"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-configuration"&gt;
  &lt;/a&gt;
  6. Configuration
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;WebSecurityConfig.java&lt;/code&gt;, we will modify default spring security features by extending &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; class. Here we will define our HTTP request filter and a default response when the user is unauthenticated. It will act as a middleware for all our HTTP requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.config;

import com.example.api.util.JwtRequestFilter;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import java.util.HashMap;
import java.util.Map;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    private final UserDetailsService jwtUserDetailsService;
    private final JwtRequestFilter jwtRequestFilter;

    public WebSecurityConfig(UserDetailsService jwtUserDetailsService, JwtRequestFilter jwtRequestFilter) {
        this.jwtUserDetailsService = jwtUserDetailsService;
        this.jwtRequestFilter = jwtRequestFilter;
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(jwtUserDetailsService).passwordEncoder(new BCryptPasswordEncoder());
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(HttpSecurity httpSecurity) throws Exception {
        httpSecurity.csrf().disable().authorizeRequests().antMatchers("/auth/*").permitAll().anyRequest().authenticated().and().exceptionHandling().authenticationEntryPoint((request, response, authException) -&amp;gt; {
            Map&amp;lt;String, Object&amp;gt; responseMap = new HashMap&amp;lt;&amp;gt;();
            ObjectMapper mapper = new ObjectMapper();
            response.setStatus(401);
            responseMap.put("error", true);
            responseMap.put("message", "Unauthorized");
            response.setHeader("content-type", "application/json");
            String responseMsg = mapper.writeValueAsString(responseMap);
            response.getWriter().write(responseMsg);
        }).and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above &lt;code&gt;configure(HttpSecurity httpSecurity)&lt;/code&gt; method we have defined to permit all request starting  with &lt;code&gt;/auth&lt;/code&gt; route that's where we will add our Authentication Controller. If the request is unauthorized our API will throw a &lt;code&gt;401&lt;/code&gt; error message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIZdrVel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642342414144/xtiMe7v6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIZdrVel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642342414144/xtiMe7v6k.png" alt="image.png" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-request-filter"&gt;
  &lt;/a&gt;
  7. Request Filter
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;JwtRequestFilter.java&lt;/code&gt; we will define our request filter which we mentioned in our API middleware in previous chapter. For this we will extend &lt;code&gt;OncePerRequestFilter&lt;/code&gt;, Spring guarantees that it is executed only once for a given request. &lt;/p&gt;

&lt;p&gt;In this &lt;code&gt;doFilterInternal()&lt;/code&gt; method we will fetch JWT token from the request header and process it by validating and obtaining username from token's payload. Further if token is valid we will fetch user from database and add it in &lt;code&gt;SecurityContextHolder&lt;/code&gt;, we can further use it any of our service to perform various user related operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.util;

import com.example.api.service.JwtUserDetailsService;
import io.jsonwebtoken.ExpiredJwtException;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {

    private final JwtUserDetailsService jwtUserDetailsService;
    private final JwtTokenUtil jwtTokenUtil;

    public JwtRequestFilter(JwtUserDetailsService jwtUserDetailsService, JwtTokenUtil jwtTokenUtil) {
        this.jwtUserDetailsService = jwtUserDetailsService;
        this.jwtTokenUtil = jwtTokenUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {

        final String requestTokenHeader = request.getHeader("Authorization");
        if (StringUtils.startsWith(requestTokenHeader,"Bearer ")) {
            String jwtToken = requestTokenHeader.substring(7);
            try {
                String username = jwtTokenUtil.getUsernameFromToken(jwtToken);
                if (StringUtils.isNotEmpty(username)
                        &amp;amp;&amp;amp; null == SecurityContextHolder.getContext().getAuthentication()) {
                    UserDetails userDetails = jwtUserDetailsService.loadUserByUsername(username);
                    if (jwtTokenUtil.validateToken(jwtToken, userDetails)) {
                        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
                                new UsernamePasswordAuthenticationToken(
                                        userDetails, null, userDetails.getAuthorities());
                        usernamePasswordAuthenticationToken
                                .setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                        SecurityContextHolder.getContext()
                                .setAuthentication(usernamePasswordAuthenticationToken);
                    }
                }
            } catch (IllegalArgumentException e) {
                logger.error("Unable to fetch JWT Token");
            } catch (ExpiredJwtException e) {
                logger.error("JWT Token is expired");
            } catch (Exception e) {
                logger.error(e.getMessage());
            }
        } else {
            logger.warn("JWT Token does not begin with Bearer String");
        }
        chain.doFilter(request, response);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;JwtTokenUtil.java&lt;/code&gt; we will perform all JWT token related operations such as generating new token and Validating given token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.io.Serializable;
import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Component
public class JwtTokenUtil implements Serializable {

    public static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;

    Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    public String getUsernameFromToken(String token) {
        return getClaimFromToken(token, Claims::getSubject);
    }

    public Date getExpirationDateFromToken(String token) {
        return getClaimFromToken(token, Claims::getExpiration);
    }

    public &amp;lt;T&amp;gt; T getClaimFromToken(String token, Function&amp;lt;Claims, T&amp;gt; claimsResolver) {
        final Claims claims = getAllClaimsFromToken(token);
        return claimsResolver.apply(claims);
    }

    private Claims getAllClaimsFromToken(String token) {
        return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();
    }

    private Boolean isTokenExpired(String token) {
        final Date expiration = getExpirationDateFromToken(token);
        return expiration.before(new Date());
    }

    public String generateToken(UserDetails userDetails) {
        Map&amp;lt;String, Object&amp;gt; claims = new HashMap&amp;lt;&amp;gt;();
        return Jwts.builder().setClaims(claims).setSubject(userDetails.getUsername()).setIssuedAt(new Date(System.currentTimeMillis())).setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000)).signWith(key).compact();
    }

    public Boolean validateToken(String token, UserDetails userDetails) {
        final String username = getUsernameFromToken(token);
        return (username.equals(userDetails.getUsername()) &amp;amp;&amp;amp; !isTokenExpired(token));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-model-and-repository"&gt;
  &lt;/a&gt;
  8. Model and Repository
&lt;/h3&gt;

&lt;p&gt;We will use  &lt;a href="https://projectlombok.org/"&gt;Lombok framework&lt;/a&gt; here to quickly create our &lt;code&gt;User.java&lt;/code&gt; model. It is completely optional but it is my favorite way of defining a model class. Afterall life is too short to write getters and setters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.model;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

@Document("users")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class User {

    @Id
    private String userName;
    private String firstName;
    private String lastName;
    @Indexed(unique = true)
    private String email;
    private String password;
    private String role;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will write our &lt;code&gt;UserRepository.java&lt;/code&gt; interface and define a method to fetch user details from username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.repository;

import com.example.api.model.User;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;

public interface UserRepository extends MongoRepository&amp;lt;User, String&amp;gt; {

    @Query(value = "{userName:'?0'}")
    User findUserByUsername(String username);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-userdetailsservice"&gt;
  &lt;/a&gt;
  9. UserDetailsService
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;JwtUserDetailsService.java&lt;/code&gt; class we will customize default spring security way of getting user by implementing &lt;code&gt;UserDetailsService&lt;/code&gt; interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.service;

import com.example.api.repository.UserRepository;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class JwtUserDetailsService implements UserDetailsService {

    final UserRepository userRepository;

    public JwtUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        com.example.api.model.User user = userRepository.findUserByUsername(username);
        List&amp;lt;GrantedAuthority&amp;gt; authorityList = new ArrayList&amp;lt;&amp;gt;();
        authorityList.add(new SimpleGrantedAuthority("USER_ROLE"));
        return new User(user.getUserName(), user.getPassword(), authorityList);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-controllers"&gt;
  &lt;/a&gt;
  10. Controllers
&lt;/h3&gt;

&lt;p&gt;Last but not the least we will define controllers in order to communicate with our API. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;AuthenticationController.java&lt;/code&gt; will deal with user login and register. In both the routes we will generate JWT tokens and send it in response to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.controller;

import com.example.api.model.User;
import com.example.api.repository.UserRepository;
import com.example.api.service.JwtUserDetailsService;
import com.example.api.util.JwtTokenUtil;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/auth")
public class AuthenticationController {

    protected final Log logger = LogFactory.getLog(getClass());

    final UserRepository userRepository;
    final AuthenticationManager authenticationManager;
    final JwtUserDetailsService userDetailsService;
    final JwtTokenUtil jwtTokenUtil;

    public AuthenticationController(UserRepository userRepository, AuthenticationManager authenticationManager,
                                    JwtUserDetailsService userDetailsService, JwtTokenUtil jwtTokenUtil) {
        this.userRepository = userRepository;
        this.authenticationManager = authenticationManager;
        this.userDetailsService = userDetailsService;
        this.jwtTokenUtil = jwtTokenUtil;
    }

    @PostMapping("/login")
    public ResponseEntity&amp;lt;?&amp;gt; loginUser(@RequestParam("user_name") String username,
                                       @RequestParam("password") String password) {
        Map&amp;lt;String, Object&amp;gt; responseMap = new HashMap&amp;lt;&amp;gt;();
        try {
            Authentication auth = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username
                    , password));
            if (auth.isAuthenticated()) {
                logger.info("Logged In");
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                String token = jwtTokenUtil.generateToken(userDetails);
                responseMap.put("error", false);
                responseMap.put("message", "Logged In");
                responseMap.put("token", token);
                return ResponseEntity.ok(responseMap);
            } else {
                responseMap.put("error", true);
                responseMap.put("message", "Invalid Credentials");
                return ResponseEntity.status(401).body(responseMap);
            }
        } catch (DisabledException e) {
            e.printStackTrace();
            responseMap.put("error", true);
            responseMap.put("message", "User is disabled");
            return ResponseEntity.status(500).body(responseMap);
        } catch (BadCredentialsException e) {
            responseMap.put("error", true);
            responseMap.put("message", "Invalid Credentials");
            return ResponseEntity.status(401).body(responseMap);
        } catch (Exception e) {
            e.printStackTrace();
            responseMap.put("error", true);
            responseMap.put("message", "Something went wrong");
            return ResponseEntity.status(500).body(responseMap);
        }
    }

    @PostMapping("/register")
    public ResponseEntity&amp;lt;?&amp;gt; saveUser(@RequestParam("first_name") String firstName,
                                      @RequestParam("last_name") String lastName,
                                      @RequestParam("user_name") String userName, @RequestParam("email") String email
            , @RequestParam("password") String password) {
        Map&amp;lt;String, Object&amp;gt; responseMap = new HashMap&amp;lt;&amp;gt;();
        User user = new User();
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);
        user.setPassword(new BCryptPasswordEncoder().encode(password));
        user.setRole("USER");
        user.setUserName(userName);
        UserDetails userDetails = userDetailsService.loadUserByUsername(userName);
        String token = jwtTokenUtil.generateToken(userDetails);
        userRepository.save(user);
        responseMap.put("error", false);
        responseMap.put("username", userName);
        responseMap.put("message", "Account created successfully");
        responseMap.put("token", token);
        return ResponseEntity.ok(responseMap);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of response to our register request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tcwJ6NeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642347680561/609V-5XxI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tcwJ6NeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642347680561/609V-5XxI.png" alt="image.png" width="880" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can save this token from response in local storage of your client (Reactive web or Mobile app) and use this token later in protected routes of your API. If we provide invalid credentials to our login request we will get a response with error code 401:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQBsYgRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642347577674/Y9WSd7xZC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQBsYgRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642347577674/Y9WSd7xZC.png" alt="image.png" width="880" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now its time to actually use our JWT token to identify user associated to a HTTP request. Following code snippet will help you get the authenticated user anywhere in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authentication authentication = SecurityContextHolder
                .getContext().getAuthentication();
String username = authentication.getName();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For testing we will define &lt;code&gt;UserController.java&lt;/code&gt;. Here you can get the user we added  earlier during request filter in &lt;code&gt;SecurityContextHolder&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.api.controller;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/user")
public class UserController {

    @GetMapping
    public Map&amp;lt;String, Object&amp;gt; getUserName() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        Map&amp;lt;String, Object&amp;gt; userMap = new HashMap&amp;lt;&amp;gt;();
        userMap.put("username", authentication.getName());
        userMap.put("error", false);
        return userMap;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we will send the newly created JWT token in Authorization header we will get a proper response as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6DhbI3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642349417849/HrrTRjKh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6DhbI3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642349417849/HrrTRjKh1.png" alt="image.png" width="880" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-conclusion"&gt;
  &lt;/a&gt;
  11. Conclusion
&lt;/h3&gt;

&lt;p&gt;We saw how you can implement token based authentication for REST API and various amazing frameworks to make life easier. &lt;/p&gt;

&lt;p&gt;Complete code for this tutorial is commited in my &lt;a href="https://github.com/prafful98/rest-api-authentication-tutorial"&gt;Github repository&lt;/a&gt;. Don't forget to hit the star button :p&lt;/p&gt;

&lt;p&gt;Thank you for reading this post, please give your valuable feedback in comments section.&lt;/p&gt;

</description>
      <category>java</category>
      <category>mongodb</category>
      <category>spring</category>
      <category>jwt</category>
    </item>
    <item>
      <title>DotVVM for Visual Studio 2022 is now available</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Thu, 20 Jan 2022 15:30:51 +0000</pubDate>
      <link>https://dev.to/dotvvm/dotvvm-for-visual-studio-2022-is-now-available-4odd</link>
      <guid>https://dev.to/dotvvm/dotvvm-for-visual-studio-2022-is-now-available-4odd</guid>
      <description>&lt;p&gt;&lt;a href="https://www.dotvvm.com/"&gt;DotVVM&lt;/a&gt; is an ASP.NET framework that allows us to create web applications using the MVVM (Model, View, ViewModel) pattern with C# and HTML. &lt;/p&gt;

&lt;p&gt;As of this time, DotVVM is now available for &lt;a href="https://visualstudio.microsoft.com/vs/"&gt;Visual Studio 2022&lt;/a&gt; through an extension. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-to-follow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Steps to follow&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To install this extension we can perform the following steps: &lt;/p&gt;

&lt;p&gt;1.- Load Visual Studio, go to the Extensions section and select Manage Extensions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xMob4py5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkh6mxdiq39t37jnx3lq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMob4py5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkh6mxdiq39t37jnx3lq.png" alt="" width="435" height="179"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.- Search for DotVVM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiFG9q68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l87edd2kna0pvj3chuoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiFG9q68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l87edd2kna0pvj3chuoj.png" alt="" width="880" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.- Download the extension and follow the instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wm-llk9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oiwzqlsgqhgfnlg8i6h3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wm-llk9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oiwzqlsgqhgfnlg8i6h3.png" alt="" width="431" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.- Restart Visual Studio and create a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_i3bgLO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y79iyx9mus91r2imyyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_i3bgLO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y79iyx9mus91r2imyyy.png" alt="" width="523" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.- Search for DotVVM and select DotVVM Web Application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rj7goagn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrvmfvi74tdeyzpygl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rj7goagn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrvmfvi74tdeyzpygl6.png" alt="" width="769" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these steps, DotVVM is ready to be used from our Visual Studio 2022. The process is the same for Visual Studio 2019. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Additional Resources&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you want to know everything we can do with DotVVM, here are some case study articles that may be useful to you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/esdanielgomez/dotvvm-and-asp-net-core-implementing-crud-operations-l2e"&gt;DotVVM and ASP.NET: Implementing CRUD operations&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/esdanielgomez/building-a-dashboard-with-asp-net-core-and-dotvvm-349"&gt;Building a Dashboard with ASP.NET Core and DotVVM&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/esdanielgomez/working-with-web-services-through-asp-net-core-and-dotvvm-a-step-by-step-guide-2le"&gt;Working with web services through ASP.NET Core and DotVVM (A step by step guide)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks for reading&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you have any questions or ideas in mind, it will be a pleasure to be able to be in communication and together exchange knowledge with each other.&lt;/p&gt;

&lt;p&gt;See you on &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt; / &lt;a href="https://esdanielgomez.com"&gt;esDanielGomez.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>dotnet</category>
      <category>csharp</category>
      <category>html</category>
    </item>
  </channel>
</rss>
