<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Looking for an Open Source Project? Try Julia.</title>
      <author>Rizel Scarlett</author>
      <pubDate>Mon, 04 Oct 2021 22:54:01 +0000</pubDate>
      <link>https://dev.to/github/looking-for-an-open-source-project-try-julia-1jci</link>
      <guid>https://dev.to/github/looking-for-an-open-source-project-try-julia-1jci</guid>
      <description>&lt;p&gt;Happy Hacktober! 'Tis the season to contribute. If you're excited about contributing to open source, but you're not sure which project you should contribute to, we'll be posting about tips, tricks, and extraordinary projects looking for contributors all month long.&lt;/p&gt;

&lt;p&gt;Are you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Looking to contribute to an open source project this Hacktober?&lt;/li&gt;
&lt;li&gt;Curious about scientific computing, machine learning, or data science?&lt;/li&gt;
&lt;li&gt;Hoping to learn a new programming language?&lt;/li&gt;
&lt;li&gt;Interested in improving a programming language?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;strong&gt;any&lt;/strong&gt; of the above sounds like you, I suggest considering contributing to Julia.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Julia?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Julia is a general-purpose programming language. Anything that you can do with other common programming languages, such as Python, JavaScript, or Ruby, you can do with Julia. The benefit of using Julia over other programming languages is that it solves the &lt;a href="https://thebottomline.as.ucsb.edu/2018/10/julia-a-solution-to-the-two-language-programming-problem"&gt;two-language problem&lt;/a&gt;. Many popular programming languages either excel in performance or readability. With Julia, users get the best of both worlds. Julia is as fast as C, but it is as easy to read and write as Python. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Projects built with Julia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although programmers can use Julia for general-purpose programming because it can quickly process large amounts of data without writing overly verbose code, it is most popular in the scientific computing community. &lt;/p&gt;

&lt;p&gt;One impactful project written entirely in Julia is &lt;a href="https://pumas.ai/"&gt;Pumas&lt;/a&gt;, which develops accelerated pharmaceutical models, including the Moderna and Pfizer COVID-19 vaccine development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it's made&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typically, programming languages are written in or based on a previously existing language. Uniquely, Julia is not a wrapper on top of languages like C or C++. Instead, engineers &lt;strong&gt;use Julia&lt;/strong&gt; to &lt;strong&gt;write Julia!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to contribute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If Julia has piqued your interest, take a look at the&lt;a href="https://github.com/JuliaLang/julia"&gt; repository&lt;/a&gt; and &lt;a href="https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md"&gt;contributing.md&lt;/a&gt;. Currently, the repo has approximately 3.4k open issues, so get started and pick up an issue today!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reminder:&lt;/strong&gt; This &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt;, you can receive swag (or have a tree planted in your name) as a reward for making pull requests to projects participating in &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt;. Hint: JuliaLang is participating in &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; and is welcoming contributions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But, how will I contribute if I don't know the Julia language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can learn and still make a significant impact by contributing to the documentation. The &lt;a href="https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md"&gt;contributing.md&lt;/a&gt; contains instructions on how you can contribute to the documentation. &lt;/p&gt;

&lt;p&gt;Additionally, there are tons of resources available to learn Julia. Visit &lt;a href="https://julialang.org/learning/"&gt;https://julialang.org/learning/&lt;/a&gt; for a complete list of educational resources. The resources are categorized by learning style. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you're a visual learner, reading the &lt;a href="https://docs.julialang.org/en/v1/manual/getting-started/"&gt;manual&lt;/a&gt; might suffice. &lt;/li&gt;
&lt;li&gt;If you're a tactile learner, &lt;a href="https://exercism.org/tracks/julia"&gt;exercism.io&lt;/a&gt; provides 50 hands-on exercises and mentors for free. &lt;/li&gt;
&lt;li&gt;If you're an auditory learner, video tutorials are available on &lt;a href="https://www.youtube.com/user/JuliaLanguage/playlists"&gt;YouTube&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;If you want to learn more about Julia, check out our recent &lt;a href="https://www.youtube.com/watch?v=grEjpGLiHWE"&gt;Open Source Friday stream&lt;/a&gt; featuring Julia's Community Manager Logan Kilpatrick and GitHub's Director of Developer Advocacy, Brian Douglas.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>julia</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Omniauth + Devise + Rails Tutorial</title>
      <author>Daniel-Penaloza</author>
      <pubDate>Mon, 04 Oct 2021 21:39:37 +0000</pubDate>
      <link>https://dev.to/danielpenaloza/omniauth-devise-rails-tutorial-5ddi</link>
      <guid>https://dev.to/danielpenaloza/omniauth-devise-rails-tutorial-5ddi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#una-breve-introducci%C3%B3n"&gt;
  &lt;/a&gt;
  Una breve introducción.
&lt;/h1&gt;

&lt;p&gt;Que tal buen día, me presento mi nombre es Daniel o Dany para los compas. Es mi primera vez escribiendo por aquí por lo tanto pido disculpas anticipadas si encuentran alguna falta ortográfica o alguna mala dicción en el contenido que vaya a estar liberando nuevos posts de cosas que me interesen.&lt;/p&gt;

&lt;p&gt;Empiezo con toda esta idea de crear contenido en español debido a que si bien hay mucho contenido (tutoriales/herramientas/etcétera) en ingles explicando como realizar ciertas cosas o tips &amp;amp; tricks, hoy en día casi no hay contenido que pueda ser beneficioso para personas que no tengan muy buenas habilidades a la hora de leer/comprender contenido en ingles (que por cierto en esta carrera de desarrollador es algo que deberían de tener en sus metas a corto plazo). Por lo tanto espero que les agrade la información que vaya posteando por aquí.&lt;/p&gt;

&lt;p&gt;By the way, se habla English too, so if you have any question regarding the topic just let me know in the comments section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack
&lt;/h2&gt;

&lt;p&gt;Las herramientas/gemas que serán necesarias para crear esta aplicación serán las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;omniauth-google-oauth2.&lt;/li&gt;
&lt;li&gt;omniauth (en caso de tener algun error).&lt;/li&gt;
&lt;li&gt;omniauth-rails_csrf_protection&lt;/li&gt;
&lt;li&gt;devise&lt;/li&gt;
&lt;li&gt;postgresql instalado en nuestro equipo.&lt;/li&gt;
&lt;li&gt;ruby 3.0.&lt;/li&gt;
&lt;li&gt;rails 6 o mayor.&lt;/li&gt;
&lt;li&gt;Google API keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configurando-google-api-keys"&gt;
  &lt;/a&gt;
  Configurando Google API keys
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Deberemos de tener una cuenta de google cloud platform, una vez teniendo nuestra cuenta creada procederemos a dirigirnos a nuestro dashboard principal. En donde una vez situado sobre este procederemos a abrir el panel que se encuentra a la izquierda (el icono de hamburguesa) y hacer clic en la opción de &lt;strong&gt;API y Servicios.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIqff5F5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf6hdd6i379chzk6xefv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIqff5F5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf6hdd6i379chzk6xefv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Una vez situado sobre nuestro dashboard de API y Servicios procederemos a hacer clic en la opción de credenciales que se encuentra del lado izquierdo de nuestra pantalla. Posteriormente haremos clic en crear credenciales y en la opción de ID de cliente de OAuth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAQLFv2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slloms19ra6jhobrewxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAQLFv2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slloms19ra6jhobrewxb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Al momento de seleccionar esta opción deberemos de escoger un tipo de aplicación entre el listado que muestra el dropdown, que en este caso sera &lt;strong&gt;Aplicación Web&lt;/strong&gt;. Hecho esto deberemos de agregar un nombre de nuestro cliente Omniauth el cual en este caso sera &lt;strong&gt;Omniauth Integration&lt;/strong&gt;.&lt;br&gt;
Ahora es momento de situarnos en las opciones de &lt;strong&gt;orígenes autorizados de javascript - URI de re direccionamiento autorizados&lt;/strong&gt;, los cuales deberán de contener lo siguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Orígenes autorizados de javascript: &lt;a href="http://localhost:3000/"&gt;http://localhost:3000&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;URI de re-direccionamiento autorizados:&lt;a href="http://localhost:3000/users/auth/google_oauth2/callback"&gt;http://localhost:3000/users/auth/google_oauth2/callback&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acto seguido solo deberemos de hacer clic en crear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opj6kds4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv173fk02eyynywl02s2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opj6kds4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv173fk02eyynywl02s2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Realizado el punto anterior inmediatamente seremos redirigidos a nuestro dashboard de API y Servicios con una ventana emergente la cual nos brindara nuestro client id y nuestro secret key los cuales son datos que deberemos de almacenar en nuestro equipo o bien descargar el archivo JSON que se nos proporciona para tener resguardada esta información que deberá ser integrada posteriormente en nuestra aplicación.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creando-la-aplicaci%C3%B3n"&gt;
  &lt;/a&gt;
  Creando La Aplicación.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Empezaremos por crear la aplicación con el siguiente comando.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="no"&gt;OmniauthExample&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;postgresql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo que realizara este comando es crear nuestra aplicación con la base de datos postgresql, por lo que no deberías de tener problemas siempre y cuanto tengas instalado/configurado postgresql de manera correcta. En caso de no tenerlo lo puedes realizar sin problema con el gestor de base de datos por defecto en Rails (Sqlite).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Empezaremos por abrir nuestro proyecto OmniauthExample y posteriormente instalaremos las siguientes gemas.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'devise'&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'omniauth-google-oauth2'&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"omniauth-rails_csrf_protection"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ejecutaremos &lt;strong&gt;bundle install&lt;/strong&gt; para la instalación de las gemas en nuestro proyecto y con esto estaremos terminando la configuración de nuestra aplicación.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Una vez instaladas nuestras gemas de manera correcta, procederemos a configurar devise por medio de los siguientes comandos en consola.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;devise&lt;/span&gt;&lt;span class="ss"&gt;:install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En caso de querer generar las vistas por defecto de devise (que en este caso no lo haremos) y poder modificarlas en un futuro con nuestro propio estilo podemos ejecutar el siguiente comando en consola.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;devise&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Posteriormente procederemos a crear nuestro modelo User o Admin (ustedes deciden el nombre) en este caso sera User.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;devise&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto nos creara algunas cosas a tomar en cuenta como es el caso de el modelo user, la tabla users y una linea en nuestro archivo routes.rb el cual nos brindara todas nuestras acciones REST para nuestro modelo user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;devise_for :users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Dentro de este mismo archivo llamado config.rb procederemos a realizar algunos cambios los cuales serán explicados enseguida.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rails.application.routes.draw do
  root to: 'home#index'
  devise_for :users, controllers: {
                                    omniauth_callbacks: 'users/omniauth_callbacks',
                                    sessions: 'users/sessions'
                                  }
  devise_scope :user do
    get 'sign_out' =&amp;gt; 'devise/sessions#destroy'
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;la linea de &lt;strong&gt;root&lt;/strong&gt;  indica que tendremos una ruta raiz (la vista principal) por medio del controlador home y la accion index.&lt;/li&gt;
&lt;li&gt;devise_scope :user... esto lo creamos para tener un poco mas de personalizacion, de esta manera devise utiliza el scope user cuando accedemos a sign_out.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;devise_for :users... indica que tendremos el controlador omniauth_callbacks y el controlador sessions dentro de un directorio users en controllers, es decir.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwSLyiPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t701743hvgtb8dw1shnz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwSLyiPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t701743hvgtb8dw1shnz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vamos a crear un poco de código boiler plate con cada una de las clases de la siguiente manera.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# OmniauthController&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Users::OmniauthCallbacksController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Devise&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OmniauthCallbacksController&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# SessionsController&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Users::SessionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Devise&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SessionsController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_sign_out_path_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_resource_or_scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_user_session_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_sign_in_path_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_or_scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stored_location_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_or_scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# HomeController&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Acto seguido deberemos de agregar en nuestro modelo user en la sección de devise modules la característica para que la aplicación funcione con Omniauth de la siguiente manera.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;devise&lt;/span&gt; &lt;span class="ss"&gt;:database_authenticatable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:registerable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="ss"&gt;:recoverable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:rememberable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:validatable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="ss"&gt;:omniauthable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;omniauth_providers: &lt;/span&gt;&lt;span class="sx"&gt;%i[google_oauth2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Por ultimo y no menos importante deberemos de crear las bases de datos en nuestro desarrollo local con el siguiente comando y ejecutar nuestras migraciones.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Creando las bases de datos&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;
&lt;span class="c1"&gt;# Ejecutando migraciones&lt;/span&gt;
&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configurando-nuestras-keys-en-la-aplicaci%C3%B3n"&gt;
  &lt;/a&gt;
  Configurando nuestras keys en la aplicación.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Para poder configurar nuestras keys del API de google contamos con dos enfoques (en este caso solo utilizaremos uno), el primero puede ser con una gema llamada dotenv en donde una vez instalada podremos agregar las llaves a un archivo con el nombre de .env sin ningún problema. Sin embargo Rails por defecto ya tiene un archivo de configuración para guardar nuestras llaves llamado credentials.yml.enc el cual es un archivo encriptado con todas nuestras variables de entorno necesarias para nuestra aplicación. Por lo tanto para hacer uso de este (en visual studio code) lo deberemos de abrir con el siguiente comando.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;EDITOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"code --wait"&lt;/span&gt; &lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="ss"&gt;:edit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Una vez realizado lo anterior tendremos un pop-up el cual prácticamente le deberemos dar clic en ok y esto a su vez nos presentara el archivo credentials.yml.enc des-encriptando con lo cual podremos agregar nuestras keys de la siguiente manera y procederemos a salvar el archivo con sus modificaciones.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOQsXjtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qbabn0vbuiyoaxgd3hq.png" alt="Alt Text"&gt;
Con la finalidad de poder ver si nuestras credenciales fueron agregadas a nuestra aplicación solo deberemos de ejecutar el comando.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="ss"&gt;:show&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El cual nos desplegara en terminal todas las keys que hayamos agregado a este archivo. En lo personal a mi me gusta mas este approach ya que así nos evitamos de depender de dependencias externas a nuestro proyecto y se lo dejamos ya directamente a Rails para que lo maneje.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El ultimo paso de configuración que deberemos de hacer es directamente en el archivo devise.rb en la linea en donde aparezca la opción Omniauth (entre 270 - 280) y dentro de este agregaremos lo siguiente.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;omniauth&lt;/span&gt; &lt;span class="ss"&gt;:google_oauth2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;google&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:google_id_client&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;google&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:google_secret_key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;access_type: &lt;/span&gt;&lt;span class="s2"&gt;"online"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BKo2kIY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vopivt1vwjl56bs23q4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKo2kIY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vopivt1vwjl56bs23q4b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adaptando-la-funcionalidad-a-nuestra-aplicaci%C3%B3n"&gt;
  &lt;/a&gt;
  Adaptando la funcionalidad a nuestra aplicación.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hasta este momento si corremos nuestro servidor local tendremos un detalle debido a que no hemos creado ninguna vista para desplegar información, algo muy parecido a esto.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rphjZFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/colj07bm4ulsdgmu9zpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rphjZFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/colj07bm4ulsdgmu9zpx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Por lo tanto lo que debemos de hacer es crear nuestra vista index dentro del home en nuestro directorio views, es decir.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0sIBCYcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9vjs2m69jlqtu6ztqbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0sIBCYcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9vjs2m69jlqtu6ztqbv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Posteriormente deberemos de agregar algo de contenido a esta vista index, por lo que el codigo que agregaremos sera el siguiente.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;
&amp;lt;%= link_to "Login With Google", user_google_oauth2_omniauth_authorize_path, method: :post %&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Hasta ahora todo va a marchar bien sin embargo si hacemos click en el vinculo Login With Google tendremos como resultado lo siguiente en nuestro pantalla.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yFhE2Bw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j5ln2vaszixmivr07k1.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto se va a deber a que hasta el momento no hemos integrado una llamada a omniauth desde nuestra aplicación, por lo que vamos a tener que trabajar con algunas cosas que enseguida se listan.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crear una miagracion para agregar los campos provider - uid dentro de nuestra tabla users.&lt;/li&gt;
&lt;li&gt;Crear un método dentro del modelo user para que se retorne el usuario si ya fue creado en nuestra base de datos o si no en su defecto crearlo.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Crear la lógica para el controlador omniauth_callback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Empezaremos por crear nuestra migración para agregar los campos.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;migration&lt;/span&gt; &lt;span class="n"&gt;addFieldsToUser&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="ss"&gt;:string&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="ss"&gt;:string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto nos creara un archivo de migración, por lo cual debemos de ejecutar nuestras migraciones con rails db:migrate&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9pMV_cH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjoumufc48k06b07he7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9pMV_cH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjoumufc48k06b07he7s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enseguida agregaremos el siguiente código a nuestro modelo user.rb
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOLEBHee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgk1v3c3pnxko8aoet9b.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prácticamente lo que estamos haciendo aquí es retornar un usuario en base en su correo en la linea 9. En caso de no encontrarlo lo va a crear en nuestra base de datos y posteriormente retornarlo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Posteriormente deberemos de crear la lógica para nuestro controlador omniauth de la siguiente manera.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHDmJt18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhp0q1whhxu1foe78ohq.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Realizado esto reiniciaremos nuestro servidor solo con fines de empezar con todo el proceso desde el principio y nos ubicaremos en nuestra ruta principal localhost:3000. En donde al intentar hacer clic en nuestro vinculo "Login With Google" podremos ver que tendremos integrada de manera correcta la funcionalidad de Omniauth.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VOYrMpF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llez3l4f0x7k9ery8mr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VOYrMpF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llez3l4f0x7k9ery8mr8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por ultimo para atar cabos sueltos y poder visualizar que en efecto hicimos login, vamos a crear una nueva ruta en routes.rb con lo que al final nuestro archivo deberá de quedar así.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'home#index'&lt;/span&gt;
  &lt;span class="c1"&gt;# Esta es la nueva ruta que agregamos&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'omniauth_test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'home#display_omniauth'&lt;/span&gt;

  &lt;span class="n"&gt;devise_for&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;controllers: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                                    &lt;span class="ss"&gt;omniauth_callbacks: &lt;/span&gt;&lt;span class="s1"&gt;'users/omniauth_callbacks'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="ss"&gt;sessions: &lt;/span&gt;&lt;span class="s1"&gt;'users/sessions'&lt;/span&gt;
                                  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;devise_scope&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'sign_out'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'devise/sessions#destroy'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Por lo que enseguida deberemos de crear dentro de views/home el archivo display_omniaut.rb con una simple etiqueta html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;You are logged in now with google.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Con esto por fin si intentamos hacer todo el flujo al final tendremos como resultado la siguiente vista.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRCe-WOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmh9qxgowube5cragw1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRCe-WOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmh9qxgowube5cragw1y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#recomendaciones"&gt;
  &lt;/a&gt;
  Recomendaciones
&lt;/h2&gt;

&lt;p&gt;Ahora que ya tenemos la funcionalidad creada para nuestra aplicación, lo que desde mi punto de vista yo recomiendo es que realices lo siguiente.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crear un servicio para manejar las llamadas a Omniauth, de esta manera el código estará mas DRY. (esto lo puedes ver en el repo de la aplicación que acabamos de crear). Una buena guía para esto la agrego enseguida
&lt;a href="https://www.toptal.com/ruby-on-rails/rails-service-objects-tutorial"&gt;Ruby Service Objects&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ademas cabe mencionar que con esto estamos respetando uno de los principios de SOLID el cual es Single Responsability en donde una clase solo tiene que tener una responsabilidad, por lo que como pista te dejo mover toda la funcionalidad de user.rb a el servicio que vayas a crear y llamarlo desde el omniauth_callbacks_controller de la siguiente manera.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OmniauthService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'omniauth.auth'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Crear todo el proceso de login/logout junto cons sus hooks en application controller para cuando el usuario desee acceder a cierta pagina se compruebe que haya iniciado sesion.&lt;/li&gt;
&lt;li&gt;Investigar acerca de como testear con rspec o minitest segun sea tu preferencia service objects y la integracion de omniauth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#repo"&gt;
  &lt;/a&gt;
  Repo.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Daniel-Penaloza/OmniauthExample"&gt;Omniauth Example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fuentes"&gt;
  &lt;/a&gt;
  Fuentes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.toptal.com/ruby-on-rails/rails-service-objects-tutorial"&gt;Service Objects&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@sergiocortessatizabal/a-simple-way-to-set-devise-with-omniauth2-0-facebook-google-617a88999d8e"&gt;A good post about omniauth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>omniauth</category>
      <category>devise</category>
    </item>
    <item>
      <title>How to Simulate Slow Internet Connection on iOS and Android [QA Guide]</title>
      <author>Fora Soft</author>
      <pubDate>Mon, 04 Oct 2021 21:00:04 +0000</pubDate>
      <link>https://dev.to/forasoft/emulation-of-slow-connection-when-testing-ios-and-android-apps-1997</link>
      <guid>https://dev.to/forasoft/emulation-of-slow-connection-when-testing-ios-and-android-apps-1997</guid>
      <description>&lt;p&gt;When testing mobile apps, newbies QA frequently forget to check the app with an unstable Internet connection. But in many cases this is critical: connection speed directly influences user experience and workability of the main functions. It is especially true for applications where geolocation and mobile Internet are heavily in use. For example, video chats, messengers, and other &lt;a href="https://forasoft.com/projects/expertise?utm_source=devcommunity&amp;amp;utm_medium=blog&amp;amp;utm_campaign=backlink&amp;amp;utm_content=multimedia_products"&gt;multimedia products&lt;/a&gt; we specialize in.&lt;/p&gt;

&lt;p&gt;In this article, we’ll show how to spoil the Internet on a test device with no hassle. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ios"&gt;
  &lt;/a&gt;
  iOS
&lt;/h2&gt;

&lt;p&gt;Let’s start with a standard utility Network Link Conditioner for iOS apps testing. It lets the QA adjust the Internet connection as he needs.&lt;/p&gt;

&lt;p&gt;To switch on this function on iPhone, you need a Mac OS device:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/xcode/"&gt;Download and install Xcode for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open Xcode on Mac&lt;/li&gt;
&lt;li&gt;Connect iPhone to Mac&lt;/li&gt;
&lt;li&gt;Allow Mac access iPhone&lt;/li&gt;
&lt;li&gt;Open Settings on iPhone&lt;/li&gt;
&lt;li&gt;Scroll down&lt;/li&gt;
&lt;li&gt;Tap “Developer”
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D8K0hxBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yr6stblnabyhvmck8kvc.jpeg" alt="Developer mode Xcode for Mac"&gt;
&lt;/li&gt;
&lt;li&gt;Tap “Network Link Conditioner”
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgeSc4Mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5trrzg4sk88slh0o45mb.jpeg" alt="Network Link Conditioner in Developer section of iPhone settings"&gt;
&lt;/li&gt;
&lt;li&gt;Pick network preset or create your own&lt;/li&gt;
&lt;li&gt;Switch on the toggle “Enable” 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Og3b5D7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0qciskuw9cmpbcdqbs9.jpeg" alt="Enable toggle in Network Link Conditioner"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;iOS lets us choose one of pre-installed presets of connection quality – or create our own preset.&lt;/p&gt;

&lt;p&gt;For our own preset these settings are available: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GS6EdFg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o0ousbtzd24dtq7qp9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GS6EdFg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o0ousbtzd24dtq7qp9n.png" alt="Settings for preset connection quality on iPhone"&gt;&lt;/a&gt;&lt;br&gt;
Here we see that Apple took care of testing apps with different levels of connection quality and gave us almost all the needed settings.&lt;/p&gt;

&lt;p&gt;Having got acquainted with Network Link Conditioner for iOS, we’ve been sure such a feature would be on Android too. God, how much we’ve been mistaking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#android"&gt;
  &lt;/a&gt;
  Android
&lt;/h2&gt;

&lt;p&gt;It appeared to be impossible to emulate a slow or unstable connection on a real Android with the help of standard tools. Therefore, I faced 2 paths: download some apps from Google Play that emulate slow connection, or use a specifically precise adjustment of the Internet connection access point.&lt;/p&gt;

&lt;p&gt;Apps didn’t work out for me ☹ All the apps that give this function require Root access, and this breaks the concept of testing in real-world conditions.&lt;/p&gt;

&lt;p&gt;So, having left the Root access as the last resort, I decided to closer look at path #2 – adjustment of the access point.&lt;/p&gt;

&lt;p&gt;In the past, when being a student, mobile internet traffic was ending up quickly (and we needed to read, watch something while on the lesson), and we used iPhone as an access point. The idea came to mind: to mix the student experience and recently gathered knowledge.&lt;/p&gt;

&lt;p&gt;If we use Network Link Conditioner and access point made of macOS or iOS devices does not require any extra knowledge and is easy to adjust. Exactly what’s needed if we want to save time. &lt;/p&gt;

&lt;p&gt;So, to emulate bad connection on Android we need the Android device and… iPhone with Developer Tools switched on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make iPhone the access point (Settings &amp;gt; Modem regime)&lt;/li&gt;
&lt;li&gt;Adjust connection with Network Link Conditioner&lt;/li&gt;
&lt;li&gt;Connect to the access point with the Android&lt;/li&gt;
&lt;li&gt;Ready. You’re awesome 🙂&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, the ways to break the Internet we considered in this article are not the only solution. We’ll tell about more complicated options, such as Android and iOS emulators, in the next article.&lt;/p&gt;

&lt;p&gt;Thanks and see you soon!&lt;br&gt;
Always yours, &lt;br&gt;
Dima and Fora Soft QA team&lt;/p&gt;

</description>
      <category>testing</category>
      <category>ios</category>
      <category>android</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Migrating Selenium system tests to Cuprite</title>
      <author>Matouš Borák</author>
      <pubDate>Mon, 04 Oct 2021 20:58:51 +0000</pubDate>
      <link>https://dev.to/nejremeslnici/migrating-selenium-system-tests-to-cuprite-42ah</link>
      <guid>https://dev.to/nejremeslnici/migrating-selenium-system-tests-to-cuprite-42ah</guid>
      <description>&lt;p&gt;In our project, we’ve been running system tests (then called rather "Feature tests") since around 2016. &lt;a href="https://guides.rubyonrails.org/testing.html#system-testing"&gt;System tests&lt;/a&gt; use a real browser in the background and test all layers of a Rails application at once: from the database all the way up to the nuances of JavaScript loaded together with the web pages. Back then, we wrote our system tests using &lt;a href="https://github.com/teamcapybara/capybara"&gt;Capybara&lt;/a&gt; with &lt;a href="https://github.com/teampoltergeist/poltergeist"&gt;Poltergeist&lt;/a&gt;, a driver that ran a headless &lt;a href="https://phantomjs.org/"&gt;Phantom JS&lt;/a&gt; browser. Since this browser  stopped being actively developed, we migrated our test suite to the &lt;a href="https://github.com/SeleniumHQ/selenium"&gt;Selenium / Webdriver&lt;/a&gt; wrapper around Chrome browser around ~2018. Chrome was itself fine for tests automation but the Selenium API was quite limited and we had to rewrite several Poltergeist features using 3rd party gems and tools.&lt;/p&gt;

&lt;p&gt;That is why we were happy to find out that a new ruby testing driver approach is being developed. &lt;strong&gt;It is called &lt;a href="https://github.com/rubycdp/cuprite"&gt;Cuprite&lt;/a&gt;&lt;/strong&gt;, it runs the &lt;a href="https://github.com/rubycdp/ferrum"&gt;Ferrum library&lt;/a&gt; under the hood which, in turn, is an API that directly instruments the Chrome browser using the &lt;a href="https://chromedevtools.github.io/devtools-protocol/"&gt;Chrome DevTools Protocol&lt;/a&gt; (CDP). About a week ago, we finally made a serious attempt to make our system test suite run on Cuprite, with especially two questions in our minds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;would the tests run faster?&lt;/li&gt;
&lt;li&gt;would the Cuprite API be easier to use?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a little spoiler we are glad to say that &lt;strong&gt;both points turned true for us and we kind of fell in love with these wonderful pieces of software, Cuprite and Ferrum&lt;/strong&gt;. If you’d like to hear more details, read on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-migration"&gt;
  &lt;/a&gt;
  The migration
&lt;/h2&gt;

&lt;p&gt;All important parts of the basic installation process are shown in the &lt;a href="https://github.com/rubycdp/cuprite#install"&gt;Cuprite README&lt;/a&gt; and in the &lt;a href="https://github.com/rubycdp/ferrum#customization"&gt;customization section&lt;/a&gt; of the Ferrum README. Great resources and tips can also be found in &lt;a href="https://evilmartians.com/chronicles/system-of-a-test-setting-up-end-to-end-rails-testing"&gt;this article by Evil Martians&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The very lovely thing about Cuprite is that &lt;strong&gt;it very much resembles the old but good Poltergeist API&lt;/strong&gt;. The CDP protocol is much more versatile than Selenium driver and thus Cuprite allows e.g. the following things which were hard or even impossible with Selenium:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rubycdp/cuprite#url-blacklisting--whitelisting"&gt;blocking / allowing requests&lt;/a&gt; to external domains and URLs,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rubycdp/cuprite#manipulating-cookies"&gt;setting cookies&lt;/a&gt;, even before visiting the given page,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rubycdp/cuprite#request-headers"&gt;setting request headers&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rubycdp/cuprite#debugging"&gt;opening the Chrome DevTools&lt;/a&gt; with a single line of code,&lt;/li&gt;
&lt;li&gt;inspecting and/or logging all communication between the test and the Chrome browser (all CDP messages).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a lot of these features, we previously had to adopt various 3rd party gems, such as the &lt;a href="https://github.com/oesmith/puffing-billy"&gt;Puffing Billy&lt;/a&gt; proxy (for blocking domains), the &lt;a href="https://github.com/titusfortner/webdrivers"&gt;webdrivers gem&lt;/a&gt; (for auto-updating the Chrome drivers), etc. and although they certainly did a good job for us, now we were able to finally rip them off the project completely:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--elXJsOg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtf8n81pu42fmfbxontz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--elXJsOg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtf8n81pu42fmfbxontz.png" alt="Migration of Cuprite-related gems in the Gemfile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cuprite-speedup-is-real-and-can-be-helped-even-more"&gt;
  &lt;/a&gt;
  The Cuprite speed-up is real and can be helped even more
&lt;/h2&gt;

&lt;p&gt;OK, let’s talk numbers. We have ~140 system tests in our project, covering the most important use cases in our web application. Several of the test cases go through some very complex scenarios, slowing down the whole test suite run time considerably. Overall, our system tests used to run approximately 12 minutes on Selenium, while the same suite finishes in ~7 minutes under Cuprite. &lt;strong&gt;That is approximately a 40% speed-up 😲!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qmz4bfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9u3ob49wgngiobpduj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qmz4bfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9u3ob49wgngiobpduj2.png" alt="Cuprite tests are ~40% faster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not all of this can be attributed to Cuprite speed alone though as, in the end, we configured the new driver slightly differently. For example we used whitelisting of specific domains instead of blocking the others as we did on Selenium. It is now a much stronger and stricter setup that probably blocks more domains than before, speeding up the page loads. Still, &lt;strong&gt;the speed up was clear&lt;/strong&gt; and apparent since the first run of Cuprite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faster-signin-in-tests"&gt;
  &lt;/a&gt;
  Faster sign-in in tests
&lt;/h2&gt;

&lt;p&gt;And we added a few more tricks. We rewrote our sign-in helper method in a more efficient way. This was possible because &lt;strong&gt;Cuprite allows setting a cookie&lt;/strong&gt; (i.e. the session cookie) &lt;strong&gt;even prior to visiting a page&lt;/strong&gt;, unlike Selenium. Thus, we could manually generate a session token and store it both to our back-end session store as well as the session cookie. We just needed to make sure the session cookie has the same options as the real session cookie.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login_via_cookie_as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;public_session_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;set_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"session_test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="n"&gt;public_session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="ss"&gt;domain: &lt;/span&gt;&lt;span class="s2"&gt;".example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="ss"&gt;sameSite: :Lax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="ss"&gt;secure: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="ss"&gt;httpOnly: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;private_session_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Session&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SessionId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;public_session_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private_id&lt;/span&gt;
  &lt;span class="no"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;session_id: &lt;/span&gt;&lt;span class="n"&gt;private_session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lead to another noticeable speed-up of the tests suite run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-fixes-needed"&gt;
  &lt;/a&gt;
  Test fixes needed
&lt;/h2&gt;

&lt;p&gt;Initially, about 30 tests (~20%) that were OK under Selenium, failed under Cuprite. Some of the failures were easy to fix, others were more puzzling. Overall, we came to a feeling that the &lt;strong&gt;Cuprite driver was less forgiving than Selenium&lt;/strong&gt;, forcing us to be a bit more precise in our tests. &lt;/p&gt;

&lt;p&gt;For example, we filled a value of &lt;code&gt;"10 000"&lt;/code&gt; into a number input field in a test (note the whitespace). This works without issues inside Selenium but fails under Cuprite. Now, let’s show a few more types of fixes that we had to deal with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrolling-and-clicking-issues"&gt;
  &lt;/a&gt;
  Scrolling and clicking issues
&lt;/h3&gt;

&lt;p&gt;A lot of tests failed because Cuprite tried to click an element that was covered by another element on the page. Cuprite seems to &lt;strong&gt;scroll and center the element a bit less&lt;/strong&gt; (compared to Selenium) prior to clicking it.&lt;/p&gt;

&lt;p&gt;Here is a typical example – the test was trying to click on the button covered by the sticky header, as we could easily see by saving the &lt;a href="https://github.com/teamcapybara/capybara#debugging"&gt;page screenshot&lt;/a&gt; upon test failure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kx6ImFDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cm1d1eo2rxdot30fjpi4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kx6ImFDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cm1d1eo2rxdot30fjpi4.png" alt="Click failure due to covered button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The failure log message would show a &lt;code&gt;Capybara::Cuprite::MouseEventFailed&lt;/code&gt; error with details about which element was at the same position as the clicked-on element.&lt;/p&gt;

&lt;p&gt;We had to manually scroll to an element in a few tests. To further mitigate this issue in a more generic way, we also overloaded the &lt;code&gt;click_button&lt;/code&gt; method from Capybara &lt;strong&gt;to scroll and center the button on the page before clicking it&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;click_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scroll_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;align: :center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;click&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-uploads-needed-absolute-file-paths"&gt;
  &lt;/a&gt;
  File uploads needed absolute file paths
&lt;/h3&gt;

&lt;p&gt;We use &lt;a href="https://github.com/dropzone/dropzone"&gt;Dropzone JS&lt;/a&gt; to support uploading files. Under Cuprite, uploading stopped working and an &lt;strong&gt;&lt;code&gt;ERR_ACCESS_DENIED&lt;/code&gt; error&lt;/strong&gt; was shown in the JavaScript console each time a test attempted to upload a file.&lt;/p&gt;

&lt;p&gt;It took a while to debug this but in the end the issue was quite prosaic – Chrome needed absolute paths when simulating the file upload in the test. So, the fix was just along the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- attach_file("file-input", 
-             "./app/assets/images/backgrounds/brown-wood-bg_512.png")
&lt;/span&gt;&lt;span class="gi"&gt;+ attach_file("file-input", 
+             Rails.root.join("app/assets/images/backgrounds/brown-wood-bg_512.png").to_s)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are not sure if this issue is only when using Dropzone or rather related to generic file uploads in system tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ajax-fetch-issues-due-to-cuprite-being-too-fast"&gt;
  &lt;/a&gt;
  AJAX / Fetch issues due to Cuprite being ”too fast“
&lt;/h3&gt;

&lt;p&gt;Surprisingly, some more tests started failing randomly. Soon it turned out that all of them deal somehow with JavaScript sending requests to the back-end via AJAX or Fetch. Again, these tests were rather stable under Selenium and – as we investigated – the issue was that under some circumstances the Cuprite driver generated multiple Fetch requests and sent them too fast.&lt;/p&gt;

&lt;p&gt;For example, we have a few ”live search“ fields, backed by back-end Fetch requests, on some pages. The live search function was usually triggered by the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/keyup_event"&gt;keyup event&lt;/a&gt; and Cuprite was such a fast typewriter that it frequently sent multiple requests almost at once. If some of the responses got a bit late or out of sync, the front-end JavaScript code began hitting issues. We solved this by &lt;strong&gt;adopting a technique called &lt;a href="https://www.freecodecamp.org/news/javascript-debounce-example/"&gt;debouncing&lt;/a&gt;&lt;/strong&gt; and, frankly, we should have done this since the beginning. By the way, we used the &lt;a href="https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-debounce.md"&gt;&lt;code&gt;useDebounce&lt;/code&gt; module&lt;/a&gt; from the marvelous &lt;a href="https://github.com/stimulus-use/stimulus-use"&gt;Stimulus-use library&lt;/a&gt; to achieve this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-cuprite-logger"&gt;
  &lt;/a&gt;
  Custom Cuprite logger
&lt;/h2&gt;

&lt;p&gt;A lot of our migration effort went to developing a logger for some of the events that Cuprite / Ferrum handles when talking to the browser. In general, &lt;strong&gt;Cuprite offers a stream of all CDP messages&lt;/strong&gt; exchanged between the driver and the browser. To use it, one has to filter out the events that he or she is interested in.&lt;/p&gt;

&lt;p&gt;We used this feature to track two kinds of data in the log:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript errors printed in the JS console in the Chrome browser,&lt;/li&gt;
&lt;li&gt;details about the requests and responses sent to/from the server as this information sometimes greatly helps debugging tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, &lt;strong&gt;we let the test fail when a JavaScript error occurs&lt;/strong&gt;. Ferrum has a &lt;a href="https://github.com/rubycdp/ferrum#customization"&gt;&lt;code&gt;js_errors&lt;/code&gt; option&lt;/a&gt; in the driver configuration to do just that.  It works nice but we used a custom solution instead because we wanted some of the JavaScript errors to actually be ignored and we didn’t want a test failure then. In the end, we made a helper class (similar to &lt;a href="https://github.com/rubycdp/cuprite/issues/113#issuecomment-753598305"&gt;this one&lt;/a&gt;) that collected all JS errors during a test run and checked this array of errors in the &lt;code&gt;after&lt;/code&gt; block, allowing for ignoring preconfigured types of errors. Note that care must be taken about cleaning-up the state in RSpec as triggering an expectation error in the &lt;code&gt;after&lt;/code&gt; block otherwise skips all later code in the block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;catch_javascript_errors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignored_js_errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;log_records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

  &lt;span class="n"&gt;aggregate_failures&lt;/span&gt; &lt;span class="s2"&gt;"javascript errors"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;log_records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ignored_js_error?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignored_js_errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Error caught in JS console:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# this is run after each test&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;catch_javascript_errors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;error_logs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                            &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ignored_js_errors&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;ensure&lt;/span&gt;
    &lt;span class="c1"&gt;# truncate the collected JS errors&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;
    &lt;span class="c1"&gt;# clean up networking&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;wait_for_network_idle&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other CDP protocol events (namely &lt;code&gt;Network.requestWillBeSent&lt;/code&gt;, &lt;code&gt;Network.responseReceived&lt;/code&gt; and &lt;code&gt;Network.requestServedFromCache&lt;/code&gt;) served as the basis for logging all requests and their responses. We chose a custom log format that enables us to better understand what’s going on – network wise – in each test and if you’re curious, it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdBKFXWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu5iy9e46pzjzxoeaenw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdBKFXWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu5iy9e46pzjzxoeaenw.png" alt="Browser requests log in the system tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;We are indeed very happy about the migration to Cuprite.&lt;/strong&gt; Our tests are much faster, the API to handle them is simpler and the migration forced us to take a closer care while handling some special situations, benefiting not only the tests but the users visiting our site, too. Overall this feels like a great move and we heartily recommend anyone to do the same! 🤞&lt;/p&gt;

</description>
      <category>cuprite</category>
      <category>selenium</category>
      <category>rails</category>
      <category>testing</category>
    </item>
    <item>
      <title>Facebook is down, discuss...</title>
      <author>Ben Halpern</author>
      <pubDate>Mon, 04 Oct 2021 20:57:23 +0000</pubDate>
      <link>https://dev.to/ben/facebook-is-down-discuss-2elo</link>
      <guid>https://dev.to/ben/facebook-is-down-discuss-2elo</guid>
      <description>&lt;p&gt;I'm curious about what comes to mind. Whether it is software related or otherwise, what does today's outage evoke for you?&lt;/p&gt;

&lt;p&gt;What's the worst case scenario for Facebook?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>security</category>
      <category>sre</category>
    </item>
    <item>
      <title>💆‍♀️ 💆‍♂️ PostgreSQL query optimization for Gophers: It's much easier than it sounds!</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 04 Oct 2021 20:52:02 +0000</pubDate>
      <link>https://dev.to/koddr/postgresql-query-optimization-for-gophers-it-s-much-easier-than-it-sounds-24nf</link>
      <guid>https://dev.to/koddr/postgresql-query-optimization-for-gophers-it-s-much-easier-than-it-sounds-24nf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, amazing DEV people! 😉&lt;/p&gt;

&lt;p&gt;Today I will show you a wonderful query optimization technique for Postgres that I often use myself. This approach to optimization can save you from a long and tedious transfer of your project to another technology stack, such as GraphQL.&lt;/p&gt;

&lt;p&gt;Intrigued? Here we go! 👇&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-statement"&gt;Problem statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-quick-solution-to-the-problem"&gt;A quick solution to the problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optimize-this"&gt;Optimize this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h2&gt;

&lt;p&gt;We'll take query optimization as an example of a simple task for any developer. Let's imagine that we have the task of creating a new endpoint for the REST API of our project, which should return:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data on the requested project by its alias;&lt;/li&gt;
&lt;li&gt;Array of all tasks that relate to the requested project in descending order by creation date;&lt;/li&gt;
&lt;li&gt;Number of tasks (as a separate response attribute);&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here you can immediately see one quick solution — make several queries for each of the models in the database (for the project and for related tasks for that project). &lt;/p&gt;

&lt;p&gt;Well, let's look at it in more detail.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; I will give all the code samples in Go with &lt;a href="https://gofiber.io/"&gt;Fiber&lt;/a&gt; web framework, since this is my main language &amp;amp; framework for backend development at the moment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-solution-to-the-problem"&gt;
  &lt;/a&gt;
  A quick solution to the problem
&lt;/h2&gt;

&lt;p&gt;Okay, here is our controller for the endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/controllers/project_controller.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// GetProjectByAlias func for getting one project by given alias.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetProjectByAlias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Catch project alias from URL.&lt;/span&gt;
    &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"alias"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create database connection.&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenDBConnection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Get project by ID.&lt;/span&gt;
    &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetProjectByAlias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Get all tasks by project ID.&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTasksByProjectID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Return status 200 OK.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"project"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c"&gt;// &amp;lt;-- 1&lt;/span&gt;
        &lt;span class="s"&gt;"tasks_count"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// &amp;lt;-- 2&lt;/span&gt;
        &lt;span class="s"&gt;"tasks"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c"&gt;// &amp;lt;-- 3&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this controller fully meets the conditions of our task (all three points of the original problem).&lt;/p&gt;

&lt;p&gt;— It will work?&lt;br&gt;
— Yes, of course!&lt;br&gt;
— Would such code be optimal?&lt;br&gt;
— Probably not… 🤷&lt;/p&gt;

&lt;p&gt;We call alternately the functions &lt;code&gt;GetProjectByAlias&lt;/code&gt; and &lt;code&gt;GetTasksByProjectID&lt;/code&gt; which creates additional latency and wastes additional resources of both the server API and the PostgreSQL database itself.&lt;/p&gt;

&lt;p&gt;It's all because queries in DB most likely look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- For Project model:&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;projects&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;
&lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;-- For Task model:&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the Go language created for speed and efficient use of server resources, such a waste of resources is simply unacceptable for any self-respecting Go developer.&lt;/p&gt;

&lt;p&gt;Let's fix that in the next section.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimize-this"&gt;
  &lt;/a&gt;
  Optimize this
&lt;/h2&gt;

&lt;p&gt;So, how do we optimize this? Of course, by reducing the number of queries to the database. But then how do we get all the necessary tasks for the project and their number? &lt;/p&gt;

&lt;p&gt;This is helped by the wonderful built-in aggregate function &lt;a href="https://www.postgresql.org/docs/9.6/functions-aggregate.html"&gt;jsonb_agg&lt;/a&gt; that have appeared in PostgreSQL &lt;code&gt;v9.6&lt;/code&gt; and are constantly being improved from version to version.&lt;/p&gt;

&lt;p&gt;Furthermore, we will be using &lt;code&gt;COALESCE&lt;/code&gt; function with &lt;code&gt;FILTER&lt;/code&gt; condition to correctly handle an empty value when the project may have no tasks. And immediately count the number of tasks through the &lt;code&gt;COUNT&lt;/code&gt; function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note&lt;/strong&gt;: See more info about &lt;code&gt;COALESCE&lt;/code&gt; &lt;a href="https://postgrespro.com/docs/postgresql/9.5/functions-conditional#functions-coalesce-nvl-ifnull"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;COALESCE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonb_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;FILTER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'[]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;tasks_count&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;projects&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
    &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; 
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a little difficult to understand the first time, isn't it? Don't worry, you'll figure it out! Here's an explanation of what's going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Output all the data about the found project;&lt;/li&gt;
&lt;li&gt;We got only one project, which has a unique alias we are looking for;&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;LEFT JOIN&lt;/code&gt; function, we only joined the sample of tasks that have a connection to the project by ID;&lt;/li&gt;
&lt;li&gt;We grouped all the data by project ID;&lt;/li&gt;
&lt;li&gt;We did an aggregation of all obtained tasks using the aggregation function &lt;code&gt;jsonb_agg&lt;/code&gt;, filtering it all by project ID;&lt;/li&gt;
&lt;li&gt;For projects that have no tasks, we provided a display in the form of an empty list;&lt;/li&gt;
&lt;li&gt;We used the &lt;code&gt;COUNT&lt;/code&gt; function to calculate the number of tasks in the project;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we just need to prepare the output of all the data obtained from the database. Let's add the appropriate structures to the &lt;code&gt;Project&lt;/code&gt; and &lt;code&gt;Task&lt;/code&gt; models.&lt;/p&gt;

&lt;p&gt;A simplified structure with a description of each project task:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/models/task_model.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// GetProjectTasks struct to describe getting tasks list for given project.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;GetProjectTasks&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt;          &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt; &lt;span class="s"&gt;`db:"id" json:"id"`&lt;/span&gt;
    &lt;span class="n"&gt;Alias&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`db:"alias" json:"alias"`&lt;/span&gt;
    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`db:"description" json:"description"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And additional structures for the &lt;code&gt;Project&lt;/code&gt; model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/models/project_model.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// ProjectTasks struct to describe getting list of tasks for a project.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ProjectTasks&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GetProjectTasks&lt;/span&gt; &lt;span class="c"&gt;// struct from Task model&lt;/span&gt;

&lt;span class="c"&gt;// GetProject struct to describe getting one project.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;GetProject&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt;            &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;    &lt;span class="s"&gt;`db:"id" json:"id"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;    &lt;span class="s"&gt;`db:"created_at" json:"created_at"`&lt;/span&gt;
    &lt;span class="n"&gt;UpdatedAt&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;    &lt;span class="s"&gt;`db:"updated_at" json:"updated_at"`&lt;/span&gt;
    &lt;span class="n"&gt;UserID&lt;/span&gt;        &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;    &lt;span class="s"&gt;`db:"user_id" json:"user_id"`&lt;/span&gt;
    &lt;span class="n"&gt;Alias&lt;/span&gt;         &lt;span class="kt"&gt;string&lt;/span&gt;       &lt;span class="s"&gt;`db:"alias" json:"alias"`&lt;/span&gt;
    &lt;span class="n"&gt;ProjectStatus&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;          &lt;span class="s"&gt;`db:"project_status" json:"project_status"`&lt;/span&gt;
    &lt;span class="n"&gt;ProjectAttrs&lt;/span&gt;  &lt;span class="n"&gt;ProjectAttrs&lt;/span&gt; &lt;span class="s"&gt;`db:"project_attrs" json:"project_attrs"`&lt;/span&gt;

    &lt;span class="c"&gt;// Fields for JOIN tables:&lt;/span&gt;
    &lt;span class="n"&gt;TasksCount&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;          &lt;span class="s"&gt;`db:"tasks_count" json:"tasks_count"`&lt;/span&gt;
    &lt;span class="n"&gt;Tasks&lt;/span&gt;      &lt;span class="n"&gt;ProjectTasks&lt;/span&gt; &lt;span class="s"&gt;`db:"tasks" json:"tasks"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;ProjectTasks&lt;/code&gt; type needed to correctly output a list of all the tasks in the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's fix controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/controllers/project_controller.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// GetProjectByAlias func for getting one project by given alias.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetProjectByAlias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Catch project alias from URL.&lt;/span&gt;
    &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"alias"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create database connection.&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenDBConnection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Get project by ID with tasks.&lt;/span&gt;
    &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetProjectByAlias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Return status 200 OK.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"project"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c"&gt;// &amp;lt;-- 1, 2, 3&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final optimized query result for our new endpoint should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"project"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a5326b7d-eb6c-4d5e-b264-44ee15fb4375"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-21T19:58:30.939495Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"updated_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0001-01-01T00:00:00Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"9b8734f9-05c8-43ac-9cd8-d8bd15230624"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"alias"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dvc08xyufws3uwmn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"project_status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"project_attrs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Test title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Test description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tasks_count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tasks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"26035934-1ea4-42e7-9364-ef47a5b57126"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"alias"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dc3b9d2b6296"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Task one"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's how gracefully and easily we used all the power of built-in Postgres function and pure SQL to solve a database query optimization problem. &lt;/p&gt;

&lt;p&gt;Wow, how great is that? 🤗 &lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hannah Busing &lt;a href="https://unsplash.com/photos/Zyx1bK9mqmA"&gt;https://unsplash.com/photos/Zyx1bK9mqmA&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>database</category>
    </item>
    <item>
      <title>What is the future of social media?</title>
      <author>Meat Boy</author>
      <pubDate>Mon, 04 Oct 2021 20:30:46 +0000</pubDate>
      <link>https://dev.to/meatboy/what-is-the-future-of-social-media-trust-3jmg</link>
      <guid>https://dev.to/meatboy/what-is-the-future-of-social-media-trust-3jmg</guid>
      <description>&lt;p&gt;As you can see currently, Facebook, Instagram and several other services related to FB are down. A lot of services has sign-in with the Facebook feature, so people lost temporary access. Do you think people change their minds after this incident?&lt;/p&gt;

&lt;p&gt;Also, there is a lot of services that rely on Facebook. Social media agencies, automation SaaS-es for posting, ads and so on. Facebook also has a PR problem because of Facebook Files, which reveals the company, corrupt users for profit (source: the verge), knows how toxic some of its services are etc.&lt;/p&gt;

&lt;p&gt;On the other hand, it's a huge corporation full of mastermind people behind directors and CXOs with billions of dollars to spend.&lt;/p&gt;

&lt;p&gt;What is your opinion about Facebook and the overall state of social media? How do you see the future of social media?&lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>Git &amp; GitHub workflow 101 cheatsheet</title>
      <author>Arnold Ho</author>
      <pubDate>Mon, 04 Oct 2021 20:28:14 +0000</pubDate>
      <link>https://dev.to/_arnoldho/git-github-workflow-101-cheatsheet-jj</link>
      <guid>https://dev.to/_arnoldho/git-github-workflow-101-cheatsheet-jj</guid>
      <description>&lt;p&gt;In the spirit of learning in public, I am writing my own Git cheatsheet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am still new, so if I got any of the terminologies wrong, please correct me :)&lt;/p&gt;

&lt;p&gt;This cheatsheet is going to be really basic and assumes that you only make changes and commit in the master branch. In the future I will discuss more about branches.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two main ways of getting a git repo in your local machine and then pushing it onto GitHub. These are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetching a repo from GitHub, make the changes and push it back to GitHub&lt;/li&gt;
&lt;li&gt;Create a new directory locally, initialise git, track the changes and push it up to GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first way is more common, we can do it using the workflow below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &amp;lt;the SSH key &lt;span class="k"&gt;for &lt;/span&gt;your repository&amp;gt;
&lt;span class="c"&gt;# This fetches the GitHub repo to your local machine and starts the tracking process&lt;/span&gt;

&lt;span class="c"&gt;# You will now make some changes to files inside the repo&lt;/span&gt;
&lt;span class="c"&gt;# Once you're done, you wanna check what are the changes&lt;/span&gt;

git status &lt;span class="c"&gt;# git status tell you what are the modified files, as well as new files you've created&lt;/span&gt;

git add &amp;lt;file_names&amp;gt; &lt;span class="c"&gt;# git add adds the files you want to commit on the stage&lt;/span&gt;
&lt;span class="c"&gt;# you don't have to add all the files that are changed onto the stage&lt;/span&gt;
&lt;span class="c"&gt;# for example, you might actually have made a change in one of the files and you prefer the previous version, in that case you don't have to git add the change&lt;/span&gt;

&lt;span class="c"&gt;# You would probably want to check the git status again to make sure you have added all the correct files&lt;/span&gt;
git status
&lt;span class="c"&gt;# Now, you would be able to see all the tracked and untracked files. Check for any errors before committing&lt;/span&gt;

git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add meaningful commit message"&lt;/span&gt; &lt;span class="c"&gt;# this will add a commit message and take a snapshot of your repository with the change you wish to document&lt;/span&gt;
&lt;span class="c"&gt;# Once you've done that, you might want to check git status again&lt;/span&gt;

git status
&lt;span class="c"&gt;# double and triple checking is always good, now your command prompt should tell you that there is no untracked files.&lt;/span&gt;

&lt;span class="c"&gt;# This is all good for you, but if you want to collaborate with others and for others to also see the changes you've made, you'd want to push this commit to GitHub.&lt;/span&gt;
&lt;span class="c"&gt;# Assuming that you've been working on the master branch, you will do the following&lt;/span&gt;
git push origin master &lt;span class="c"&gt;# This pushes the changes in the master branch to the remote called origin, which should be your GitHub repo. Sometimes, you're branch is not master and your remote is not origin, you can use the format&lt;/span&gt;
&lt;span class="c"&gt;# git push &amp;lt;remote_name&amp;gt; &amp;lt;branch_name&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;# Now this will become a pull request ready to be merged into the main assuming that there are no conflicts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Making a repo locally and then pushing it on GitHub is less common, but we will go through it nonetheless:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# First, you want to make the folder, cd into it and then initialise version control using git&lt;/span&gt;

&lt;span class="nb"&gt;mkdir&lt;/span&gt; &amp;lt;folder_name&amp;gt; &lt;span class="c"&gt;# This creates a new folder&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;folder_name&amp;gt; &lt;span class="c"&gt;# This moves your current position into the folder&lt;/span&gt;
git init &lt;span class="c"&gt;# This initalises git. Please do this only in a folder for a specific project, don't do something like this in your user directory because you will be tracking EVERY SINGLE CHANGE in that directory.&lt;/span&gt;
&lt;span class="c"&gt;# If you track your user directory, this will soon become very messy&lt;/span&gt;

&lt;span class="c"&gt;# Once you've initalised git, you can start making changes in your repository and save them the same way you do above. So I will skip through the explantions.&lt;/span&gt;

git status
git add &amp;lt;folder_and_file_names&amp;gt;
git status
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add meaningful commit messages"&lt;/span&gt;
git status

&lt;span class="c"&gt;# Now, we want to push this onto GitHub again for collaboration.&lt;/span&gt;
&lt;span class="c"&gt;# But you might have noticed that we don't have a remote to push this to because everything we did was local.&lt;/span&gt;

&lt;span class="c"&gt;# So now, you have to go into your GitHub and create a new repo, once you've done that, you can get the SSH key of that repo.&lt;/span&gt;
&lt;span class="c"&gt;# Now you tell git the remote you're using:&lt;/span&gt;
git remote add origin &amp;lt;SSH Key of the repo you just created&amp;gt;

&lt;span class="c"&gt;# After this step, you just push your changes to the GitHub repo the same way you did before as git now knows where your remote is:&lt;/span&gt;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And these are the two ways you can work locally and then push changes onto GitHub.&lt;/p&gt;

&lt;p&gt;One useful tool is &lt;code&gt;git log&lt;/code&gt;, this basically give you a log of all the commits. It will show you important information like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who made the change&lt;/li&gt;
&lt;li&gt;When was the change made&lt;/li&gt;
&lt;li&gt;What is the change
You can then use that to debug codes or roll back to previous versions of codes. I will talk more about how to do that in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now this is it :) Hope this is useful! This only covers the basics of the basics. There are so many other powerful things git can do like creating new branches, pulling new changes from GitHub and many more. I will cover those in later blogposts.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🔗 Next.js, Universal and Nuxt.js static redirects</title>
      <author>Andrew Luca</author>
      <pubDate>Mon, 04 Oct 2021 20:25:49 +0000</pubDate>
      <link>https://dev.to/iamandrewluca/next-js-universal-and-nuxt-js-static-redirects-3cl6</link>
      <guid>https://dev.to/iamandrewluca/next-js-universal-and-nuxt-js-static-redirects-3cl6</guid>
      <description>&lt;p&gt;Frameworks like &lt;a href="https://nextjs.org/"&gt;&lt;code&gt;Next.js (React 💙)&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://nuxtjs.org/"&gt;&lt;code&gt;Nuxt.js (Vue 💚)&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://angular.io/guide/universal"&gt;&lt;code&gt;Universal (Angular ❤️)&lt;/code&gt;&lt;/a&gt; allow you to register redirects.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Next.js&lt;/strong&gt; allows you to register redirects using &lt;a href="https://nextjs.org/docs/api-reference/next.config.js/redirects"&gt;&lt;code&gt;redirects&lt;/code&gt;&lt;/a&gt; function inside &lt;code&gt;next.config.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nuxt.js&lt;/strong&gt; allows you to register redirects using &lt;a href="https://github.com/nuxt-community/redirect-module"&gt;&lt;code&gt;redirect-module&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;nuxt.config.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Universal&lt;/strong&gt; allows you to register redirects at server engine router level. e.g. &lt;a href="https://github.com/angular/universal/blob/master/modules/express-engine/README.md"&gt;&lt;code&gt;@nguniversal/express-engine&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in all the cases when your app is served, it should stay on top of a &lt;a href="https://nodejs.org/en/"&gt;&lt;code&gt;nodejs&lt;/code&gt;&lt;/a&gt; server to handle all the requests.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I want my application to be a static served application that lives only on client, without a server 😢&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, this is the single limitation of all the frameworks redirects, but don't be sad, we have a solution, that comes with it's own limitations 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/B0vFTrb0ZGDf2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/B0vFTrb0ZGDf2/giphy.gif" alt="girl hehe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#say-hello-to-html-redirections"&gt;
  &lt;/a&gt;
  Say Hello to HTML Redirections 🚀
&lt;/h2&gt;

&lt;p&gt;From what &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections#html_redirections"&gt;MDN&lt;/a&gt; says, HTML Redirections are a way to make redirects using a &lt;code&gt;meta&lt;/code&gt; tag in your HTML head when you don't have control over the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"0; URL=https://example.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all we need to know. The &lt;code&gt;0&lt;/code&gt; in the beginning of the &lt;code&gt;content&lt;/code&gt; attribute is the delay in seconds when redirect should happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RegExp is not supported, like in server redirects&lt;/li&gt;
&lt;li&gt;Status code cannot be changed&lt;/li&gt;
&lt;li&gt;A small payload delay for fetched HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking this idea, we can apply it to our frameworks, and create static HTML redirects. Taking into consideration that all frameworks have a folder where you can put your public static assets, we can create html files with our &lt;code&gt;meta&lt;/code&gt; tag for redirects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Next.js&lt;/code&gt; with &lt;code&gt;React&lt;/code&gt; uses &lt;code&gt;public&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Nuxt.js&lt;/code&gt; with &lt;code&gt;Vue&lt;/code&gt; uses &lt;code&gt;static&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Universal&lt;/code&gt; with &lt;code&gt;Angular&lt;/code&gt; uses &lt;code&gt;assets&lt;/code&gt; folder&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#real-example-nextjs"&gt;
  &lt;/a&gt;
  Real Example (Next.js)
&lt;/h2&gt;

&lt;p&gt;Let's say that on my &lt;a href="https://iamandrewluca.com/"&gt;&lt;code&gt;iamandrewluca.com&lt;/code&gt;&lt;/a&gt; website I want to have addresses that redirect to my social profiles. This is a good example in case that you want someone to fast access your social profil, or in case you change it, Just change the redirect address e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;iamandrewluca.com/dev&lt;/code&gt; ➡️ &lt;code&gt;dev.to/iamandrewluca&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;iamandrewluca.com/github&lt;/code&gt; ➡️ &lt;code&gt;github.com/iamandrewluca&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;iamandrewluca.com/twitter&lt;/code&gt; ➡️ &lt;code&gt;twitter.com/iamandrewluca&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I have to do now is to create 3 files in my &lt;code&gt;public&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public/dev.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"0; URL=https://dev.to/iamandrewluca"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;public/github.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"0; URL=https://github.com/iamandrewluca"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;public/twitter.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"0; URL=https://twitter.com/iamandrewluca"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we build our static html application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build &lt;span class="c"&gt;# build app&lt;/span&gt;
npx next &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="c"&gt;# export as static html&lt;/span&gt;
npx serve out &lt;span class="c"&gt;# serve static at http://localhost:5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if I access &lt;code&gt;http://localhost:5000/dev&lt;/code&gt; it will automatically go to &lt;code&gt;https://dev.to/iamandrewluca&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No server&lt;/li&gt;
&lt;li&gt;No JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nv0T4i0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p0vj0k45lifg90a6ths.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nv0T4i0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p0vj0k45lifg90a6ths.png" alt="sponge bob magic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check this live example on my simple website &lt;a href="https://iamandrewluca.com/"&gt;iamandrewluca.com&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  F.A.Q
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Why don't do this in javascript with &lt;code&gt;location.href&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you will do this in JavaScript you will have to wait the whole bundle of Js to load in browser then redirect, this takes time. Read also this &lt;a href="https://kentcdodds.com/blog/stop-using-client-side-route-redirects"&gt;article&lt;/a&gt; from Kent C. Dodds&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What about redirect status code?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately using this method you cannot set redirect status code, it will be a simple 200 status code, because it's a html served page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why not use hosting service &lt;code&gt;redirects&lt;/code&gt; functionality?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If your hosting service supports such thing, sure do. Should be event faster, and you can also change redirect status code&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How does browser know to open &lt;code&gt;/dev.html&lt;/code&gt; from &lt;code&gt;/dev&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is not a browser thing, also server deals with this. Most servers have a list of static files to be served by default like: &lt;code&gt;*.html&lt;/code&gt;, &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;index.php&lt;/code&gt; and others. Also instead of &lt;code&gt;public/dev.html&lt;/code&gt; you can have &lt;code&gt;public/dev/index.html&lt;/code&gt;, will have same effect. Use this in case you need nested redirects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where is &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; tag from HTML files?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Browsers automatically add these tags. Also less html, faster response.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is possible to use RegExp to catch multiple routes?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately this is not possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus 🎁 🧨 🚀
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/html-redirections"&gt;NPM Package&lt;/a&gt; that generates automatically HTML files from a JSON file!&lt;/p&gt;

&lt;p&gt;Having &lt;strong&gt;redirects.json&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"redirects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"from"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"to"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://dev.to/iamandrewluca"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"from"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/github"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"to"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/iamandrewluca"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"from"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/twitter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"to"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://twitter.com/iamandrewluca"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx redirects.json out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will generate all above files. You can add this step as a post build step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26u4lOMA8JKSnL9Uk/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26u4lOMA8JKSnL9Uk/giphy.gif" alt="sponge bob finished"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for today! Thanks for reading my blog posts!&lt;/p&gt;




&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@javiertenenbaum?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Javier Quiroga&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/turn?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>react</category>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create a temperature map with Mapbox and OpenWeatherMap</title>
      <author>Léo Leplat</author>
      <pubDate>Mon, 04 Oct 2021 20:19:52 +0000</pubDate>
      <link>https://dev.to/rylern/create-a-temperature-map-with-mapbox-and-openweathermap-2ojb</link>
      <guid>https://dev.to/rylern/create-a-temperature-map-with-mapbox-and-openweathermap-2ojb</guid>
      <description>&lt;p&gt;A temperature maps shows the current temperature in a color scale, from blue (cold) to red (hot). In this tutorial, I will show how to create a web-based temperature map using JavaScript, Mapbox, and OpenWeatherMap.&lt;/p&gt;

&lt;p&gt;To follow this tutorial, you just need some knowledge in web development (HTML, CSS, Javascript).&lt;/p&gt;

&lt;p&gt;We will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a map using Mapbox.&lt;/li&gt;
&lt;li&gt;Fetch temperature data using OpenWeatherMap.&lt;/li&gt;
&lt;li&gt;Use a custom Mapbox layer to display a color scale of the temperature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result is displayed &lt;a href="https://rylern.github.io/TemperatureMap/"&gt;here&lt;/a&gt; and the source code is accessible &lt;a href="https://github.com/Rylern/TemperatureMap"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-setting-up-the-project"&gt;
  &lt;/a&gt;
  1. Setting up the project
&lt;/h2&gt;

&lt;p&gt;The first step is to set up the web page. Since it's only a web application running on a client side, we just need a HTML and a JavaScript file.&lt;/p&gt;

&lt;p&gt;Create an empty &lt;code&gt;map.js&lt;/code&gt; file. This file will contain the map creation and the retrieval of weather data. Then, create an &lt;code&gt;index.html&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Temperature map&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"map.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just add a &lt;code&gt;map&lt;/code&gt; div that takes the entire available space. It will contain the map.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-the-map"&gt;
  &lt;/a&gt;
  2. Creating the map
&lt;/h2&gt;

&lt;p&gt;To display a map in our web page, we need a map provider. &lt;a href="https://en.wikipedia.org/wiki/List_of_online_map_services"&gt;Many exist&lt;/a&gt;, but we will use &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt; in this tutorial because it is highly customizable and free up to 50,000 map load per month (which means that 50,000 monthly requests on your web page can be made). &lt;/p&gt;

&lt;p&gt;First, create a &lt;a href="https://account.mapbox.com/auth/signup/"&gt;Mapbox account&lt;/a&gt;. Then, go to your &lt;a href="https://account.mapbox.com/"&gt;profile page&lt;/a&gt; and copy your default public token. This is used to identify yourself when requesting map data.&lt;/p&gt;

&lt;p&gt;We can now add the map on our web page. Mapbox provides SDK for different platforms (Android, iOS, Unity) so since we want to create a web application we are going to use Mapbox GL JS. This SDK can be installed via a npm module, or by simply including the JavaScript and CSS files in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of our HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Temperature map&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://api.mapbox.com/mapbox-gl-js/v2.3.0/mapbox-gl.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://api.mapbox.com/mapbox-gl-js/v2.3.0/mapbox-gl.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"map.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;map.js&lt;/code&gt; file, add the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your_mapbox_access_token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// past your default public token&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                           &lt;span class="c1"&gt;// 'map' is the id of the HTML div&lt;/span&gt;
    &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/light-v10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simplest way of creating a map. The &lt;code&gt;style&lt;/code&gt; parameter will determine how your map will look like. Mapbox provides &lt;a href="https://docs.mapbox.com/api/maps/styles/#mapbox-styles"&gt;default styles&lt;/a&gt;, but you can also create your own by using &lt;a href="https://studio.mapbox.com/"&gt;Mapbox Studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other parameters, such as the inital zoom and geographical centerpoint of the map, can be specified. You will find all available parameters on the &lt;a href="https://docs.mapbox.com/mapbox-gl-js/api/map/"&gt;API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-gathering-weather-data"&gt;
  &lt;/a&gt;
  3. Gathering weather data
&lt;/h2&gt;

&lt;p&gt;The next step is to collect data on the current weather by the mean of a weather API. &lt;a href="https://rapidapi.com/blog/access-global-weather-data-with-these-weather-apis/"&gt;Several free providers exist&lt;/a&gt;. For this tutorial, I chose to use OpenWeatherMap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://openweathermap.org/"&gt;OpenWeatherMap&lt;/a&gt; is an online service that provides among other things global weather data. To use this API, you will have to create an account and get your &lt;a href="https://home.openweathermap.org/api_keys"&gt;API key&lt;/a&gt;. The free plan includes 60 calls to the API per minute.&lt;/p&gt;

&lt;p&gt;The documentation for getting the current weather data is available &lt;a href="https://openweathermap.org/current"&gt;here&lt;/a&gt;. In this tutorial, we will fetch the current temperature in degree Celsius by geographic coordinates. Therefore, the URLs will be like: &lt;code&gt;https://api.openweathermap.org/data/2.5/weather?units=metric&amp;amp;lat=latitude&amp;amp;lon=longitude&amp;amp;appid=apiKey&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the goal of this tutorial is to create a temperature map, we want to fetch the temperature at different locations that cover the entire globe. In geography, latitude goes from -90° to 90°, and longitude from -180° to 180°. However, Mapbox uses the Web Mercator projection, which projects the poles at infinity, so we cannot see the poles. Therefore, let's define some points going from -80° to 80° for the latitude.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endingLatitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endingLongitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;// n² is the number of points&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endingLatitude&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endingLatitude&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;              &lt;span class="c1"&gt;// val will store the temperature&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each element of the &lt;code&gt;points&lt;/code&gt; array is an object with a latitude, a longitude,  and a value corresponding to the temperature for that location. We set the default temperature to 0, so now let's get the real value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endingLatitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endingLongitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endingLatitude&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endingLongitude&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Create the URLs&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.openweathermap.org/data/2.5/weather?units=metric&amp;amp;lat=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your_weather_api_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;lon=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Fetch the weather data&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weathers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="c1"&gt;// Set the temperature&lt;/span&gt;
    &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weathers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Three steps are done here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, we need to define the URLs which will be used to communicate with the weather API. We use the model URL presented above and we set the latitude and longitude of the previously defined points. Remember to set your API key available &lt;a href="https://home.openweathermap.org/api_keys"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, we perform the requests with the &lt;code&gt;fetch(url)&lt;/code&gt; function. Since it's an asynchronous operation and we need to wait for it to finish, we use the keyword &lt;code&gt;await&lt;/code&gt;. The function &lt;code&gt;Promise.all()&lt;/code&gt; is used to perform all the requests in parallel, and, with the keyword &lt;code&gt;await&lt;/code&gt;, we wait for all requests to finish. &lt;code&gt;await&lt;/code&gt; has to be inside an &lt;code&gt;async&lt;/code&gt; function, so we surround the whole code with &lt;code&gt;(async() =&amp;gt; {})();&lt;/code&gt;. If you don't understand this part, here is the equivalent code if we had only one URL to fetch:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We fetch a response from an URL, and then we store the content of the response in the &lt;code&gt;weather&lt;/code&gt; variable. These two operations are asynchronous, so we need to use &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have now a &lt;code&gt;weathers&lt;/code&gt; array containing some weather data for all our &lt;code&gt;points&lt;/code&gt;, so we just need to extract the temperature by using the &lt;a href="https://openweathermap.org/current#current_JSON"&gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have now an array of locations with associated temperatures. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-creating-the-color-scale"&gt;
  &lt;/a&gt;
  4. Creating the color scale
&lt;/h2&gt;

&lt;p&gt;We can now create the color scale by providing the array of &lt;code&gt;points&lt;/code&gt; to the map.&lt;/p&gt;

&lt;p&gt;Each element of a Mapbox map is part of a layer: there is a layer for roads, tunnels, parks, countries, for every type of label... So the color scale we want to add to the map will be implemented by a layer defined by us.&lt;/p&gt;

&lt;p&gt;Mapbox natively provides a heatmap layer. This is close to what we want, but not exactly. Take a look on these pictures:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-JsE0nI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93iabn4dbl4haydqn7xf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-JsE0nI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93iabn4dbl4haydqn7xf.png" alt="Density heatmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-t56A7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lce68hc5vl4z9dltpvtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-t56A7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lce68hc5vl4z9dltpvtr.png" alt="Average heatmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Mapbox heatmap layer can represent the &lt;strong&gt;density&lt;/strong&gt; of points in an area (like on the first picture). The color doesn't depend on the value of a point but on the density of points (actually the value can change the color but it is mainly the density that will affect the color).&lt;/p&gt;

&lt;p&gt;For our temperature map, we want a heatmap that can define a color to any location by making an &lt;strong&gt;average&lt;/strong&gt; of the values of the surroundings points (like on the second picture).&lt;/p&gt;

&lt;p&gt;I created a way of representing this type of heatmap. The project is available on GitHub &lt;a href="https://github.com/Rylern/InterpolateHeatmapLayer"&gt;here&lt;/a&gt;. Download the &lt;code&gt;interpolateHeatmapLayer.js&lt;/code&gt; file, place it in your working folder and include it before the &lt;code&gt;map.js&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"interpolateHeatmapLayer.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"map.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now call the &lt;code&gt;interpolateHeatmapLayerinterpolateHeatmapLayer.create()&lt;/code&gt; function to create the layer, and add it to the map. Here the whole script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your_mapbox_access_token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endingLatitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endingLongitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endingLatitude&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startingLatitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endingLongitude&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startingLongitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.openweathermap.org/data/2.5/weather?units=metric&amp;amp;lat=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your_weather_api_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;lon=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weathers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;

    &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weathers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;


    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/light-v10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;

    &lt;span class="c1"&gt;// When the map is loaded, create and the color scale layer&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interpolateHeatmapLayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;             &lt;span class="c1"&gt;// use our array of points&lt;/span&gt;
            &lt;span class="na"&gt;layerID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temperature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;      &lt;span class="c1"&gt;// define an ID for the layer&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The color scale layer can only be added when the map is loaded, so we add an handler to the &lt;code&gt;load&lt;/code&gt; event. The layer expects at least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An array of points, each point being an object containing a latitude &lt;code&gt;lat&lt;/code&gt;, a longitude &lt;code&gt;lon&lt;/code&gt;, and a value &lt;code&gt;val&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An ID, which is the unique Mapbox layer name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other parameters are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;opacity&lt;/code&gt;: a number between 0 and 1 describing the transparency of the color.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;minValue&lt;/code&gt;: define the value corresponding to the blue color. When it's not defined, this is the lowest temperature of &lt;code&gt;points&lt;/code&gt; which is represented by the blue color. There is also &lt;code&gt;maxValue&lt;/code&gt; for the red color.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;framebufferFactor&lt;/code&gt;: number between 0 and 1. In short, if the framebuffer factor is around 0, the computation will be faster but less accurate and the opposite if it's around 1. The default value is 0.3. Take a look at the &lt;code&gt;readme&lt;/code&gt; file of the &lt;a href="https://github.com/Rylern/InterpolateHeatmapLayer"&gt;GitHub project&lt;/a&gt; if you want to know what exactly this parameter is.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p&lt;/code&gt;: a factor affecting the computation of the color, from 0 to around 15. A high value makes the color uniform around each point. Once again, take a look at the &lt;a href="https://github.com/Rylern/InterpolateHeatmapLayer"&gt;GitHub project&lt;/a&gt; if you want to know more.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;roi&lt;/code&gt;: list of coordinates (like &lt;code&gt;points&lt;/code&gt;) defining the area of interest, aka the area where the temperature map will be present. By default, the entire world is colored.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;valueToColor&lt;/code&gt;: function defining the range of color of the temperature map. By default, a low temperature is colored blue, a medium green and a high red.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now, the temperature is represented above everything else on the map. Instead, it would be better to have the different labels above the temperature map, so we are going to use the second parameter of the &lt;a href="https://docs.mapbox.com/mapbox-gl-js/api/map/#map#addlayer"&gt;map.addLayer()&lt;/a&gt; function. The Mapbox documentation states that this parameter is the "ID of an existing layer to insert the new layer before, resulting in the new layer appearing visually beneath the existing layer". The layers are defined in the &lt;code&gt;style&lt;/code&gt; parameter of the map, so we need to find the lowest label layer of the &lt;code&gt;light-v10&lt;/code&gt; style (the one used here).&lt;/p&gt;

&lt;p&gt;To do this, go to &lt;a href="https://studio.mapbox.com"&gt;Mapbox Studio&lt;/a&gt;, create a new style, and choose the Monochrome template with the light variation. Then, go to the &lt;code&gt;Layers&lt;/code&gt; tab on the left panel. All labels appear, the first ones being the upper layers (appearing above the others on the map).  The last layer with &lt;code&gt;label&lt;/code&gt; written on it is &lt;code&gt;road-label&lt;/code&gt;. Therefore, perform the following modifications to your script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interpolateHeatmapLayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;layerID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temperature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;road-label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The temperature map is now below the labels. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-conclusion"&gt;
  &lt;/a&gt;
  5. Conclusion
&lt;/h2&gt;

&lt;p&gt;You know now how to create a temperature map with Mapbox and OpenWeatherMap. I wrote this article to provide an example of using the interpolate heatmap layer, but it can also be used for visualizing generic geographical data. &lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>temperature</category>
      <category>map</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating an Infinitely Zooming image (for ANTI-divtober 😉) </title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 04 Oct 2021 20:19:38 +0000</pubDate>
      <link>https://dev.to/inhuofficial/creating-an-infinite-loop-for-anti-divtober-2jb2</link>
      <guid>https://dev.to/inhuofficial/creating-an-infinite-loop-for-anti-divtober-2jb2</guid>
      <description>&lt;p&gt;#divtober is a time for CSS artists to come out and play. They have to create a different piece of CSS art each day to showcase their CSS artistry and skill! &lt;/p&gt;

&lt;p&gt;There are already some fantastic entries, such as this one from &lt;a class="mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvaromontoro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ekLisLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aTV3h--8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/161327/2ff05281-db58-4dcb-946a-4b679e4a266b.jpeg" alt="alvaromontoro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvaromontoro/ceiling-fan-entry-for-divtober-306p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Ceiling fan entry for divtober&lt;/h2&gt;
      &lt;h3&gt;Alvaro Montoro ・ Oct 2 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#divtober&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#art&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#antidivtober"&gt;
  &lt;/a&gt;
  "anti-divtober"?
&lt;/h2&gt;

&lt;p&gt;I don't have any skill. But I am still going to participate in my own way 😉&lt;/p&gt;

&lt;p&gt;Those of you who follow me already know I don't do CSS art or single div stuff, so I am going to join the challenge, but do &lt;strong&gt;everything except&lt;/strong&gt; create single div CSS art! 🤣&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-the-challenges"&gt;
  &lt;/a&gt;
  So what are the challenges?
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtPMmW31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAYwc-VVQAgNCNo.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5hMq5Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1429641617850339333/mow6F24g_normal.jpg" alt="Lynn Fisher profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lynn Fisher
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lynnandtonic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      October is already going to be busy busy, but let’s do this! 😅&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/divtober"&gt;#divtober&lt;/a&gt; 2021: &lt;a href="https://t.co/LjXN92wxoZ"&gt;a.singlediv.com/divtober2021/&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:52 PM - 28 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;thing to create&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Fan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Watch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Quick&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Loop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Tired&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Hungry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Toxic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Growing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Homonym&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Organised&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;Slice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Squeak&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Camouflage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;Fancy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Snow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;Stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;Shine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;Nostalgia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;Journey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;Magic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;Critter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;Loud&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;Smelly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;Dip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;Spice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;Film&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;Dots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;Fruit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;Contrast&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;Spooky&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#day-14-entry"&gt;
  &lt;/a&gt;
  Day 1-4 entry
&lt;/h2&gt;

&lt;p&gt;The first 4 days are fan, watch, quick and loop.&lt;/p&gt;

&lt;p&gt;So I did a &lt;strong&gt;fan&lt;/strong&gt;, &lt;strong&gt;watch&lt;/strong&gt;ing a concert, that is part of a &lt;strong&gt;quick&lt;/strong&gt; infinite &lt;strong&gt;loop&lt;/strong&gt; 😂🤣&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/L5eog3df//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-silly"&gt;
  &lt;/a&gt;
  You're silly
&lt;/h2&gt;

&lt;p&gt;Yeah I know!&lt;/p&gt;

&lt;p&gt;You should check out the truly skilled people at &lt;a href="https://twitter.com/hashtag/divtober?src=hashtag_click&amp;amp;f=live"&gt;https://twitter.com/hashtag/divtober?src=hashtag_click&amp;amp;f=live&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a great week everyone, keep an eye out for my next entry!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Take Chances and Push Forward.</title>
      <author>Andrew Bonacci</author>
      <pubDate>Mon, 04 Oct 2021 20:00:20 +0000</pubDate>
      <link>https://dev.to/abonacci/take-chances-and-push-forward-1lpg</link>
      <guid>https://dev.to/abonacci/take-chances-and-push-forward-1lpg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#lessons-from-the-final-frontier"&gt;
  &lt;/a&gt;
  Lessons from the final frontier…
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
I’m a big Star Trek fan. I started watching &lt;em&gt;Star Trek: The Next Generation (TNG)&lt;/em&gt; and &lt;em&gt;Star Trek: Voyager (VOY)&lt;/em&gt; with my father when I was a child in the 90s and grew to like all of the other series. I’ve always been fascinated by the life lessons and philosophy that many episodes present. However, there is one particular episode from TNG that stuck with me: it’s the episode called &lt;em&gt;Tapestry&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tapestry-of-my-life"&gt;
  &lt;/a&gt;
  “The tapestry of my life…”
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
In the episode &lt;strong&gt;Tapestry&lt;/strong&gt;, Captain Jean-Luc Picard is killed on a mission. He then awakens to find himself in a sort of “afterlife” with Q, an omnipotent being who makes appearances throughout the &lt;em&gt;Star Trek&lt;/em&gt; series. Picard expresses life regrets to Q, who then gives him a chance to restart his life and make different choices. In the alternate life, Picard no longer takes risks or chances, and subsequently experiences a dreary life unnoticed by others. Picard tells Q that he would rather die the man he was than live the life he had just seen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTUQ5i5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/icvcdpcino5163zu6qli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTUQ5i5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/icvcdpcino5163zu6qli.png" alt="404 - Not found."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#there-were-loose-threads-untidy-parts-of-me-that-id-like-to-remove-but-when-i-pulled-on-one-of-those-threads-it-had-unraveled-the-tapestry-of-my-life"&gt;
  &lt;/a&gt;
  &lt;em&gt;“There were loose threads, untidy parts of me that I’d like to remove. But when I pulled on one of those threads, it had unraveled the tapestry of my life.”&lt;/em&gt;
&lt;/h6&gt;

&lt;p&gt;&lt;br&gt;
Imagine yourself 5, 10, even 15 years from now. What would you tell your past self? Will you &lt;strong&gt;regret&lt;/strong&gt; stepping up, taking risks and chances to get noticed? Will you regret voicing your concerns or having your questions be heard? Would you have preferred to live a life of near-silence and solitude, not having reached your full potential? Had you gone back and undid some of the things that made your future self successful, you’d be unraveling the tapestry of your life.&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reach-for-the-stars"&gt;
  &lt;/a&gt;
  Reach for the stars.
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
It is imperative to take leaps if you want to push forward and have your work get recognized. It’s also important to understand that we have to face failure in order to grow, and that’s okay. We’re not here to be perfectionists. We’re here to learn and grow together. As my mentor at &lt;a href="//perpetual.education"&gt;Perpetual Education&lt;/a&gt;, &lt;strong&gt;Derek&lt;/strong&gt;, says, &lt;em&gt;“the goal isn’t to do it right the first time; the goal is to see the different ways people think about it.”&lt;/em&gt;&lt;br&gt;
&lt;br&gt;
Keep this in mind as you pursue your programming path, or whichever path you choose. Get out there and give it your best. Make mistakes and learn from others. &lt;strong&gt;You can do this.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Andrew&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>discuss</category>
      <category>motivation</category>
    </item>
  </channel>
</rss>
