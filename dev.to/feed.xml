<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Basic auth with NGINX Ingress Controller on Kubernetes</title>
      <author>Jordan Gregory</author>
      <pubDate>Fri, 21 May 2021 21:52:40 +0000</pubDate>
      <link>https://dev.to/sixgill/basic-auth-with-nginx-ingress-controller-on-kubernetes-4cof</link>
      <guid>https://dev.to/sixgill/basic-auth-with-nginx-ingress-controller-on-kubernetes-4cof</guid>
      <description>&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This particular post will not try to explain the basics of Kubernetes Ingress controllers.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;NGINX Ingress Controller&lt;/em&gt;, provided by F5 (the company that owns NGINX) is not the same thing as the &lt;em&gt;ingress-nginx&lt;/em&gt; controller (the ingress provided and maintained by the Kubernetes community).&lt;/p&gt;

&lt;p&gt;We at Sixgill don't have anything against the &lt;em&gt;ingress-nginx&lt;/em&gt; controller, but there are a number of things that the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; does that &lt;em&gt;ingress-nginx&lt;/em&gt; does not, and we needed those particular features; if you would like a breakdown of the differences, feel free to request it in the comments, but we feel like F5 did a decent job with this post:&lt;br&gt;
&lt;a href="https://www.nginx.com/blog/wait-which-nginx-ingress-controller-kubernetes-am-i-using/"&gt;Which NGINX Ingress Controller am I using?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both options are open source (but the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; has a paid support option).&lt;br&gt;
It's worth noting that the following steps can probably be performed with the &lt;em&gt;ingress-nginx&lt;/em&gt; controller as well, but we have not tested it.&lt;/p&gt;

&lt;p&gt;With that out of the way, here is what we did to enable &lt;strong&gt;BASIC AUTH&lt;/strong&gt; using the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; by F5.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#assumptions-and-necessary-prework"&gt;
  &lt;/a&gt;
  Assumptions and Necessary Pre-Work
&lt;/h2&gt;

&lt;p&gt;So, the basic assumptions are these:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a running Kubernetes cluster that you can access ... somewhere (KinD, minikube, GKE, AKS, EKS, etc...).&lt;/li&gt;
&lt;li&gt;You have the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; installed (NGINX Plus is not necessary, but enabling snippets is necessary).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do not have the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; installed, just follow the steps in the guides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/"&gt;Installation With Raw Kubernetes Manifests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-helm/"&gt;Installation with Helm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-operator/"&gt;Installation with the NGINX Ingress Controller Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only real pre-work step is that you have to have a valid &lt;code&gt;.htpasswd&lt;/code&gt; file to provide to the controller pods.&lt;/p&gt;

&lt;p&gt;In our case, we did the following in an Ubuntu container and wrote the output to a Secret which is kind of outside of the scope of this post, but the slightly more manual method is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apt-get update
apt-get &lt;span class="nb"&gt;install &lt;/span&gt;apache2-utils
htpasswd &lt;span class="nt"&gt;-c&lt;/span&gt; .htpasswd &amp;lt;my_first_user&amp;gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;The&lt;/span&gt;&lt;span class="sh"&gt; utility will ask you to input the password for the user &amp;gt;&amp;gt;

cat .htpasswd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need more than a single user, feel free to rinse//repeat the &lt;code&gt;htpasswd -c ...&lt;/code&gt; step for as many users as you need.&lt;/p&gt;

&lt;p&gt;Then, just copy the contents of that file via &lt;code&gt;cat&lt;/code&gt; for later use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-htpasswd-file-to-the-existingfuture-nginx-ingress-controller-pods"&gt;
  &lt;/a&gt;
  Adding the .htpasswd file to the existing/future &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; pods
&lt;/h2&gt;

&lt;p&gt;First, we have to add the contents of the .htpasswd file to either a ConfigMap or a Secret, and given the contents, we chose a Secret, so to do this, we created this resource:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Contents of htpasswd.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Secret&lt;/span&gt;
&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Opaque&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;span class="na"&gt;stringData&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;.htpasswd&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;&amp;lt;&amp;lt; CONTENTS OF .HTPASSWD THAT YOU COPIED FROM PRE-WORK &amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, simply apply it using &lt;code&gt;kubectl apply -f htpasswd.yaml&lt;/code&gt;, but feel free to call the file whatever you want.&lt;/p&gt;

&lt;p&gt;If you happened to save the contents of the .htpasswd to a file before hand, you could have simply run &lt;code&gt;kubectl create secret generic htpasswd -n nginx --from-file=&amp;lt;your_file&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we have to add this file the NGINX pods. To do this step, we need to get the deployment name that we have to edit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get deployments -n nginx

NAME           READY  UP-TO-DATE  AVAILABLE  AGE
nginx-ingress  1/1    1           1          15d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this, we can simple edit the resource using the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl edit deployment nginx-ingress -n nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The modifications we have to make are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;...&lt;/span&gt;
  &lt;span class="s"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-ingress&lt;/span&gt;
        &lt;span class="s"&gt;...&lt;/span&gt;
        &lt;span class="c1"&gt;# THIS IS WHAT WE NEED TO ADD TO THE CONTAINER&lt;/span&gt;
        &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/etc/apache2&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
        &lt;span class="s"&gt;...&lt;/span&gt;
      &lt;span class="c1"&gt;# AND THIS IS WHAT WE NEED TO ADD TO THE OVERALL SPEC&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;defaultMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420&lt;/span&gt;
          &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.htpasswd&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.htpasswd&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
      &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you are comfortable with patching Kubernetes resources, that would be a viable alternative to just editing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifying-your-ingress-to-use-the-work"&gt;
  &lt;/a&gt;
  Modifying your ingress to use the work
&lt;/h2&gt;

&lt;p&gt;So now, the last step is you modify your ingress to actually use everything we have done up to this point. So again, we need to get the name of your ingress and edit it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get ingresses

NAME        CLASS  HOSTS                      ADDRESS  PORTS AGE
my-ingress  nginx  my-service.whatever.myTld  1.2.3.4  80,443  15d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and edit your ingress like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl edit ingress my-ingress&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The only changes we need to make are to the annotations of the ingress, and the annotations we need to add are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;...&lt;/span&gt;
  &lt;span class="s"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;# THIS IS THE ADDITION&lt;/span&gt;
    &lt;span class="s"&gt;nginx.org/server-snippets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
      &lt;span class="s"&gt;auth_basic "my-ingress";&lt;/span&gt;
      &lt;span class="s"&gt;auth_basic_user_file /etc/apache2/.htpasswd;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you save the resource, go ahead and try to access you ingress ... and voila! you are presented with a login popup that we are all so familiar with.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>k8s</category>
      <category>nginx</category>
      <category>auth</category>
    </item>
    <item>
      <title>Create your own octocat</title>
      <author>𝙼𝚊𝚗𝚞𝚃𝚑𝚎𝙲𝚘𝚍𝚎𝚛</author>
      <pubDate>Fri, 21 May 2021 21:42:16 +0000</pubDate>
      <link>https://dev.to/manuthecoder/create-your-own-octocat-10de</link>
      <guid>https://dev.to/manuthecoder/create-your-own-octocat-10de</guid>
      <description>&lt;p&gt;If you don't know the Octocat is GitHub's mascot and logo.&lt;br&gt;
Want to make your own?&lt;br&gt;
Visit: &lt;a href="https://myoctocat.com"&gt;https://myoctocat.com&lt;/a&gt; (Official)&lt;br&gt;
Octocat library: &lt;a href="https://octodex.github.com/"&gt;https://octodex.github.com/&lt;/a&gt; (Unofficial)&lt;/p&gt;

&lt;p&gt;Share your octocat in the comments below!&lt;/p&gt;

</description>
      <category>octocat</category>
      <category>github</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Stamp Detection using Computer Vision and Python</title>
      <author>Aravind Ramalingam</author>
      <pubDate>Fri, 21 May 2021 20:38:34 +0000</pubDate>
      <link>https://dev.to/6aravind/stamp-detection-using-computer-vision-and-python-1ghg</link>
      <guid>https://dev.to/6aravind/stamp-detection-using-computer-vision-and-python-1ghg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h1&gt;

&lt;p&gt;A friend of mine reach out and asked me whether I could write a program to detect the number of Rubber stamps in an image. Apparently, these invoice receipts will be categorized based on the number of stamps on them. Initially, I thought of building a Deep Learning Segmentation model, but soon I realized that it is not worth the effort. &lt;/p&gt;

&lt;p&gt;The images are generated in a controlled environment so few computer vision algorithms should do the trick. To illustrate the computer vision algorithms used in detecting the stamps, I will be using a sample image downloaded from Google as the original image is company property. The goal is to identify two stamps in the sample image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qUvOo6Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/836aqc88lj5kycf5wn5r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qUvOo6Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/836aqc88lj5kycf5wn5r.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h1&gt;

&lt;p&gt;High level solution steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read the image.&lt;/li&gt;
&lt;li&gt;Blur &amp;amp; detect the edges.&lt;/li&gt;
&lt;li&gt;Find all contours and remove the smaller contours.&lt;/li&gt;
&lt;li&gt;Fill the area inside contours &amp;amp; Close the blobs.&lt;/li&gt;
&lt;li&gt;Filter the stamps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we start let us import the necessary packages.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#1-read-the%C2%A0image"&gt;
  &lt;/a&gt;
  1. Read the image
&lt;/h2&gt;

&lt;p&gt;Read the color image using imread function. To display the image we will use Matplotlib. Matplotlib expects the color image channels to be of the order RGB, but OpenCV reads the image as BGR, so we will write a helper function for the conversion.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmqDuCJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4alaedmpj9w673ei80cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmqDuCJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4alaedmpj9w673ei80cl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-blur-amp-detect-the-edges"&gt;
  &lt;/a&gt;
  2. Blur &amp;amp; detect the edges
&lt;/h2&gt;

&lt;p&gt;First, we need to convert the image to grayscale using &lt;a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab"&gt;cvtColor&lt;/a&gt; function. Then, we will use &lt;a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#ga9d7064d478c95d60003cf839430737ed"&gt;bilateralFilter&lt;/a&gt; to reduce noise in the image. Bilateral filter is preferred over Gaussian because it preserves the edges much better. Finally, we will use &lt;a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html"&gt;canny&lt;/a&gt; edge detector to threshold the image and detect edges. The normal canny edge detector requires two threshold parameters which is hard to tune so we will use the one from &lt;a href="https://www.pyimagesearch.com/2015/04/06/zero-parameter-automatic-canny-edge-detection-with-python-and-opencv"&gt;Zero-parameter, automatic Canny edge detection with Python and OpenCV&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Owfx6Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgfhyfclqmuvchufwrc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Owfx6Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgfhyfclqmuvchufwrc7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-find-all-contours-and-remove-the-smaller-contours"&gt;
  &lt;/a&gt;
  3. Find all contours and remove the smaller contours
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.opencv.org/3.4/d3/dc0/group__imgproc__shape.html#ga17ed9f5d79ae97bd4c7cf18403e1689a"&gt;findContours&lt;/a&gt; function can find all contours in the image. The outer most contours are good enough for our use case so we will use the retrieval mode &lt;strong&gt;RETR_EXTERNAL&lt;/strong&gt;. &lt;strong&gt;CHAIN_APPROX_NONE&lt;/strong&gt; mode is preferred as we don't want to lose any point on the contour due to approximation. To remove the unwanted smaller contours, we can filter the contours by area.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Total nr of contours found: 408&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-fill-the-area-inside-contours-amp-close-the-blobs"&gt;
  &lt;/a&gt;
  4. Fill the area inside contours &amp;amp; Close the blobs
&lt;/h2&gt;

&lt;p&gt;Instead of working on the original binary image, we will draw the top contours on a image with black background and use this as base. Any disconnect in the contours are easier to identify when fill the area inside the contours using &lt;a href="https://docs.opencv.org/3.4/d6/d6e/group__imgproc__draw.html#ga746c0625f1781f1ffc9056259103edbc"&gt;drawContours&lt;/a&gt; function.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e6s0BGLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cru5i8c1acge9zqb4epd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6s0BGLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cru5i8c1acge9zqb4epd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As suspected, the top stamp has a thin black line passing through it. We need to close this blob so that the top stamp is considered as one contour instead of two different ones. &lt;a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#ga67493776e3ad1a3df63883829375201f"&gt;Morphological Closing&lt;/a&gt; operation is perfect for achieving this.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXJj51nM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajy46hg5tkbocck3h6jo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXJj51nM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajy46hg5tkbocck3h6jo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-filter-the-stamps"&gt;
  &lt;/a&gt;
  5. Filter the stamps
&lt;/h2&gt;

&lt;p&gt;To isolate the stamp contours, we can identify all the contours from the latest binary image and filter for contours with more than 5 points as the stamp is an ellipse. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeIEcxb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p14r126berlqccbsro2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeIEcxb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p14r126berlqccbsro2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-highlight-the-identified-stamps"&gt;
  &lt;/a&gt;
  Bonus - Highlight the identified stamps
&lt;/h1&gt;

&lt;p&gt;For demo of this program, wouldn't it be cool if we can highlight only the stamped area of the image? Since we agree that it is indeed cool, let us see how we can achieve that. The steps involved are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Duplicate the original image and blur the entire image.&lt;/li&gt;
&lt;li&gt;Loop through the blurred image and for the points on or inside the image (using &lt;a href="https://docs.opencv.org/3.4/d3/dc0/group__imgproc__shape.html#ga1a539e8db2135af2566103705d7a5722"&gt;pointPolygonTest&lt;/a&gt; to check) we replace it with pixel values from the output image. We are using pixel values from the output image because we need the blue lines drawn over the stamps.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrEFlAFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdbontp5yipn7rebdc51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrEFlAFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdbontp5yipn7rebdc51.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Yep, that's it for this post. You can access this notebook from &lt;a href="https://github.com/6aravind/tidbits/blob/main/cv/Stamp%20detection%20using%20computer%20vision%20and%20python.ipynb"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>computervision</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Laravel One of Many Eloquent Relationship Example</title>
      <author>Suresh Ramani</author>
      <pubDate>Fri, 21 May 2021 20:11:39 +0000</pubDate>
      <link>https://dev.to/sureshramani/laravel-one-of-many-eloquent-relationship-example-469o</link>
      <guid>https://dev.to/sureshramani/laravel-one-of-many-eloquent-relationship-example-469o</guid>
      <description>&lt;p&gt;A new one of many Eloquent relationships is coming to Laravel 8.42 thanks to a PR contribution by Lennart Carstens-Behrens along with collaboration from Taylor Otwell is released some days ago. This one of many relationships is very useful.&lt;/p&gt;

&lt;p&gt;So what is one of many relationships is? The one-of-many relationship creates a one-to-one association from a one-to-many relationship. This quote is not enough to define this relationship. So let's see an example to understand.&lt;/p&gt;

&lt;p&gt;Many times you will see that a model may have many related models, yet you want to easily retrieve the "latest" or "oldest" related model of the relationship. For example, a User model may be related to many BrowserHistory models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://techvblogs.com/blog/one-of-many-eloquent-relationship-laravel"&gt;https://techvblogs.com/blog/one-of-many-eloquent-relationship-laravel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>How to properly create an Express server (with Typescript)</title>
      <author>Jon Webb</author>
      <pubDate>Fri, 21 May 2021 19:58:50 +0000</pubDate>
      <link>https://dev.to/joncodes/how-to-properly-create-an-express-server-with-typescript-j68</link>
      <guid>https://dev.to/joncodes/how-to-properly-create-an-express-server-with-typescript-j68</guid>
      <description>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Previous post: &lt;a href="https://jonwebb.dev/2021/05/18/start-node-project-with-typescript.html"&gt;How to start a Node project from scratch (with Typescript)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Source code: &lt;a href="https://github.com/jon-codes/baseline/tree/create-express-server-typescript"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-baseline-endraw-project"&gt;
  &lt;/a&gt;
  The &lt;code&gt;baseline&lt;/code&gt; project
&lt;/h2&gt;

&lt;p&gt;This post assumes you are following along with the &lt;code&gt;baseline&lt;/code&gt; project tutorial, but the concepts apply to any Typescript project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#node-best-practices"&gt;
  &lt;/a&gt;
  Node best practices
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h3&gt;

&lt;p&gt;We are going to use a logging library called &lt;code&gt;pino&lt;/code&gt; for our application. Using a mature logging library is recommended because it allows us to access structured log data as JSON objects. Later, we can configure it to persist log data by outputting logs to a file or an external server.&lt;/p&gt;

&lt;p&gt;Install &lt;code&gt;pino&lt;/code&gt;, along with its type definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add pino pino-pretty &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/pino
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;util&lt;/code&gt; folder in your project source directory and create the &lt;code&gt;logger.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;src/util &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;src/util/logger.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create and export a &lt;code&gt;pino&lt;/code&gt; logger instance. For now, we will use the default transport, which logs to the console. We will also enable &lt;code&gt;prettyPrint&lt;/code&gt; when we are not in a production environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/util/logger.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pino&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;prettyPrint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h3&gt;

&lt;p&gt;When your application encounters an unknown error, it should terminate. From the official &lt;a href="https://nodejs.org/api/domain.html#domain_warning_don_t_ignore_errors"&gt;Node.js documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By the very nature of how &lt;code&gt;throw&lt;/code&gt; works in JavaScript, there is almost never any way to safely "pick up where it left off", without leaking references, or creating some other sort of undefined brittle state.&lt;/p&gt;

&lt;p&gt;The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.&lt;/p&gt;

&lt;p&gt;The better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's ensure that our application catches any unsafe errors by passing them to a centralized error handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;src/util/error.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To ensure that our application issues a final log message when we crash it,&lt;br&gt;
&lt;code&gt;pino&lt;/code&gt; provides a &lt;code&gt;final&lt;/code&gt; function that we will use to issue a fatal log:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/util/error.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pino&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;final&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;finalLogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;finalLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in our main file &lt;code&gt;src/index.ts&lt;/code&gt;, let's ensure that any unhandled errors are passed to our &lt;code&gt;handle&lt;/code&gt; function. To do that, we will add listeners to the &lt;code&gt;unhandledRejection&lt;/code&gt; and &lt;code&gt;uncaughtException&lt;/code&gt; events in the Node process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unhandledRejection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uncaughtException&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our application will now issue a final log before terminating on any unhandled errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-express-endraw-app-setup"&gt;
  &lt;/a&gt;
  &lt;code&gt;express&lt;/code&gt; app setup
&lt;/h2&gt;

&lt;p&gt;(&lt;code&gt;express&lt;/code&gt;)[&lt;a href="https://expressjs.com"&gt;https://expressjs.com&lt;/a&gt;] is an extremely popular web framework for &lt;code&gt;node.js&lt;/code&gt;, and it's what we will use for the &lt;code&gt;baseline&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;In your project folder, install &lt;code&gt;express&lt;/code&gt;, along with its type definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add express &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are also going to use &lt;code&gt;pino-http&lt;/code&gt;, which is a middleware that logs https requests to your server using the &lt;code&gt;pino&lt;/code&gt; logger:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add pino-http &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/pino-http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I prefer to store the definition of my &lt;code&gt;express&lt;/code&gt; &lt;a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/projectstructre/separateexpress.md"&gt;application separately from the code that starts the HTTP server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;app.ts&lt;/code&gt; in your source folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;src/app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;app.ts&lt;/code&gt;, we will set up a basic &lt;code&gt;express&lt;/code&gt; application, register built-in middlewares for parsing JSON request bodies and encoded URLs, register the &lt;code&gt;pino-http&lt;/code&gt; middleware, and create a single healthcheck route that we can use to check the status of our server. Finally, we will export the &lt;code&gt;express&lt;/code&gt; app so that we can use it elsewhere:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pinoHttp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pino-http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pinoHttp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/health&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#server-config"&gt;
  &lt;/a&gt;
  Server config
&lt;/h2&gt;

&lt;p&gt;Our server configuration may change depending on the environment we are running it in. We may also need to use sensitive values (like database authentication credentials) that should not be exposed in our source code. For these reasons, we will store our &lt;a href="https://12factor.net/config"&gt;application configuration in the environment&lt;/a&gt; using environmental variables managed by the operating system.&lt;/p&gt;

&lt;p&gt;For development, it's convenient to use a file named &lt;code&gt;.env&lt;/code&gt;, which is not checked in to version control, to manage those variables on the fly. We will use a library called &lt;code&gt;dotenv&lt;/code&gt; to parse &lt;code&gt;.env&lt;/code&gt; files and set the corresponding environmental variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is important that our &lt;code&gt;.env&lt;/code&gt; files do not get checked into source control, since they may contain sensitive information. Let's update our &lt;code&gt;.gitignore&lt;/code&gt; file to ensure they are excluded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#.gitignore

node_modules
dist
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a &lt;code&gt;.env&lt;/code&gt; file in the project root, and populate it with a single &lt;code&gt;PORT&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .env

PORT=5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's load any &lt;code&gt;.env&lt;/code&gt; variables as the first thing we do when we run &lt;code&gt;src/index.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// error listeners ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; function exported by &lt;code&gt;dotenv&lt;/code&gt; parses our &lt;code&gt;.env&lt;/code&gt; file and sets the environmental variables accordingly so that we can use them throughout our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-and-stopping-the-server"&gt;
  &lt;/a&gt;
  Starting and stopping the server
&lt;/h2&gt;

&lt;p&gt;When our application terminates, due to external input or an internal error, there may be a number of ongoing client connections that are in the process of being resolved. Rather than abruptly terminating those connections, we want to allow any existing connections to resolve before shutting down the server gracefully.&lt;/p&gt;

&lt;p&gt;To do this, we need to store a list of ongoing connections and implement logic to ensure connections are closed before the process is allowed to end. Rather than implement that logic ourselves, we are going to use a library called &lt;code&gt;http-terminator&lt;/code&gt; that does it for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn &lt;span class="nb"&gt;install &lt;/span&gt;http-terminator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in &lt;code&gt;src/index.ts&lt;/code&gt;, we will start the server and use &lt;code&gt;http-terminator&lt;/code&gt; to gracefully close the server if a shutdown signal is received:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http-terminator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// existing code ...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`started server on :&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
      &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shutdownSignals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGINT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;shutdownSignals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; received, closing gracefully ...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we are using &lt;code&gt;process.env.PORT&lt;/code&gt; to set the port that &lt;code&gt;express&lt;/code&gt; binds to, which should be loaded from our &lt;code&gt;.env&lt;/code&gt; file. Otherwise, we use port &lt;code&gt;3000&lt;/code&gt; as a fallback.&lt;/p&gt;

&lt;p&gt;We are also registering listeners on the &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; events, which are issued when &lt;code&gt;node&lt;/code&gt; receives a signal from the environment to terminate the process. Earlier, when we implemented our error handler function, we told &lt;code&gt;node&lt;/code&gt; to issue a &lt;code&gt;SIGTERM&lt;/code&gt; event when terminating the process. This means our graceful shutdown listener will be called when closing the process from our error handling code, or when the process terminates from an external signal.&lt;/p&gt;

&lt;p&gt;Your final &lt;code&gt;src/index.ts&lt;/code&gt; should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http-terminator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unhandledRejection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uncaughtException&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`started server on :&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
      &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shutdownSignals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGINT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;shutdownSignals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; received, closing gracefully ...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-the-server"&gt;
  &lt;/a&gt;
  Testing the server
&lt;/h2&gt;

&lt;p&gt;Let's start the server using the &lt;code&gt;yarn&lt;/code&gt; scripts we set up in the &lt;a href="https://jonwebb.dev/2021/05/18/start-node-project-with-typescript.html"&gt;last post&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a log message that includes the port we set in our &lt;code&gt;.env&lt;/code&gt; file earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;1621625365575] INFO &lt;span class="o"&gt;(&lt;/span&gt;90294 on Jons-MacBook-Pro.local&lt;span class="o"&gt;)&lt;/span&gt;: started server on :5000 &lt;span class="k"&gt;in &lt;/span&gt;development mode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, using your browser, or an API testing tool like &lt;a href="https://www.postman.com"&gt;Postman&lt;/a&gt;, make a &lt;code&gt;GET&lt;/code&gt; request to the healthcheck route we implemented earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET http://localhost:5000/api/health
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response should be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OK"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now try terminating your application from the terminal by pressing &lt;code&gt;ctrl-C&lt;/code&gt;, which sends a &lt;code&gt;SIGINT&lt;/code&gt; signal to the &lt;code&gt;node&lt;/code&gt; process. You should see a log message showing that our graceful termination code is being executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;1621626736712] INFO &lt;span class="o"&gt;(&lt;/span&gt;93255 on Jons-MacBook-Pro.local&lt;span class="o"&gt;)&lt;/span&gt;: SIGINT received, closing gracefully ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#commit"&gt;
  &lt;/a&gt;
  Commit
&lt;/h2&gt;

&lt;p&gt;Go ahead and stage your changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And commit them to source control:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>node</category>
      <category>express</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>I made this GitHub theme Dev Portfolio</title>
      <author>Himanshu</author>
      <pubDate>Fri, 21 May 2021 19:31:38 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/i-made-this-github-theme-dev-portfolio-100m</link>
      <guid>https://dev.to/hima_khaitan/i-made-this-github-theme-dev-portfolio-100m</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-design-idea"&gt;
  &lt;/a&gt;
  The Design Idea
&lt;/h3&gt;

&lt;p&gt;Spitting the truth, I really came across 1000s of dev portfolio 💻 websites among which some inspired 🤓 too but that inspiration and design faded until I saw this amazing  💯 &lt;a href="http://vscode-portfolio.vercel.app/"&gt;VS-Code Themed Portfolio Website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The designs I came across before this, only confused me and made me hop on one to another but this react app gave me the idea for &lt;a href="https://github-portfolio.vercel.app/"&gt;My Dev Portfolio&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I really was excited to built this when I first got this idea. And on the future part I am yet excited to flood it with cool features and functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-themed-dev-portfolio"&gt;
  &lt;/a&gt;
  GitHub Themed Dev Portfolio
&lt;/h3&gt;

&lt;p&gt;If you're interested in exploring the project yourself, there's the link to it 👉🏻 &lt;a href="https://github-portfolio.vercel.app/"&gt;github-portfolio.vercel.app/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/github-portfolio"&gt;
        github-portfolio
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
GitHub Themed Dev Portfolio&lt;/h3&gt;
&lt;p&gt;A GitHub themed developer portfolio website built with React.js and deployed on Vercel.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/github-portfolio/blob/main/public/a.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz2kdbmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/github-portfolio/raw/main/public/a.png" alt="Dev Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Feature Roadmap&lt;/h3&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Themes and customizations
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Default Light&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Dark Dimmed&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Default Dark (default)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Interactive custom pages and tabs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For other features and themes suggestions, please open an issue.&lt;/p&gt;

&lt;h3&gt;
Running the Project&lt;/h3&gt;
&lt;p&gt;In the project directory, you can run:&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Runs the app in the development mode.&lt;br&gt;
Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt;
&lt;p&gt;The page will reload if you make edits.&lt;br&gt;
You will also see any lint errors in the console.&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm run build&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt;
It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt;
&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt;
Your app is ready to be deployed!&lt;/p&gt;

&lt;h3&gt;
Editing the Code&lt;/h3&gt;
&lt;p&gt;All Github related components can be found in the &lt;code&gt;Components&lt;/code&gt; folder. To change the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/github-portfolio"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This is a React Application which will of course have a backend in future and will lately be converted into a MERN Stack Project. 👩‍💻&lt;/p&gt;

&lt;p&gt;From Layout to Experience I have been working on to make this look and feel like the GitHub. I will be adding cool stuffs to it like themes, timeline and many more. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-need-a-help"&gt;
  &lt;/a&gt;
  I Need A Help
&lt;/h3&gt;

&lt;p&gt;As you can see that some of the pages have dummy content in it and also the application is not at all responsive at the stage when it comes to Mobile viewing.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hima_khaitan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pp9-sSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HqJ6F18c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629989/94e5c19e-ce31-4a7d-a20b-603def943e7d.jpeg" alt="hima_khaitan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hima_khaitan/i-built-this-dark-ui-25ej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Built this Dark UI&lt;/h2&gt;
      &lt;h3&gt;Himanshu ・ May 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uiweekly&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;What other features would you like to see in this project? I would highly appreciate if you leave a feedback, criticism or suggestion of any kind. 🙌🏻&lt;/p&gt;

&lt;p&gt;You can always fork this repo and the project is yet not complete. You can give a new accent to the project by applying your ideas onto it. 🤝🏻&lt;/p&gt;

&lt;p&gt;I hope you find it interesting to contribute as the project is truly Open-Source. You may star this repo for future references. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happily turning coffee into code ✅&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>githunt</category>
      <category>react</category>
    </item>
    <item>
      <title>Make HTTP GET Requests With Axios</title>
      <author>Rodrigo Rojas</author>
      <pubDate>Fri, 21 May 2021 19:23:13 +0000</pubDate>
      <link>https://dev.to/crrojas88/make-http-get-requests-with-axios-23id</link>
      <guid>https://dev.to/crrojas88/make-http-get-requests-with-axios-23id</guid>
      <description>&lt;p&gt;The most common way for frontend programs to communicate with servers is through the HTTP protocol. If you're used to vanilla JavaScript, then you're probably familiar with the &lt;code&gt;fetch()&lt;/code&gt; API which allows you to fetch resources and make HTTP requests. In this example I'm going to walk you through on how to use axios in React to make an HTTP &lt;code&gt;GET&lt;/code&gt; request. Further on I'll walk us through how to make &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and even &lt;code&gt;PUT&lt;/code&gt; requests. For now, let's stick to &lt;code&gt;GET&lt;/code&gt;. Let's GET-er-done! (ok I'll stop).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtRDXgvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96ynou2pf1kktbjf0p1n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtRDXgvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96ynou2pf1kktbjf0p1n.jpg" alt="Get er done"&gt;&lt;/a&gt;&lt;/p&gt;
Couldn't help myself



&lt;p&gt;Let's first create a &lt;code&gt;db.json&lt;/code&gt; file in the root directory of your project in order to use the &lt;a href="https://github.com/typicode/json-server"&gt;JSON Server&lt;/a&gt;. For this example, I'm using data for a phonebook app I worked on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;people&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hannah Rickard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;06-51-99-56-83&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hyun Namkoong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10987654&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Courtney Martinez&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3691215&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, install the JSON server by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json-server --port 3001 --watch db.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;json-server&lt;/code&gt; runs on port 3000 by default, but since projects created with &lt;code&gt;create-react-app&lt;/code&gt;  reserve port 3000, we need to define an alternate port.&lt;/p&gt;

&lt;p&gt;The idea will be to save future contacts to the server, which in this case means saving to the &lt;code&gt;json-server&lt;/code&gt;. The React code fetches the contacts from the server and renders them to the screen. Once a new note is added to the app, the React code will persist it to memory.&lt;/p&gt;

&lt;p&gt;Let's install axios:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPXt2Fii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ek6arjgn6y09o9zshmku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPXt2Fii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ek6arjgn6y09o9zshmku.png" alt="package.json"&gt;&lt;/a&gt;&lt;/p&gt;
Axios will now be added to the other dependencies



&lt;p&gt;Let's tweak the &lt;em&gt;scripts&lt;/em&gt; part of the &lt;code&gt;package.json&lt;/code&gt; file so we don't have to type as much bc we're lazy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sh_UUv2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oary5fl8v4ybyo39rws3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sh_UUv2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oary5fl8v4ybyo39rws3.png" alt="Scripts"&gt;&lt;/a&gt;&lt;/p&gt;
Nice and short



&lt;p&gt;Now all you have to type to start the json-server is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice! We're now ready to use axios. Open up two terminal windows, one to keep the &lt;em&gt;json-server&lt;/em&gt; running, and the other for react-app.&lt;/p&gt;

&lt;p&gt;The axios library can now be imported in just like any other library in React. With a good ol' &lt;code&gt;import&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react;
import axios from &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this example I'm gonna assume you know about &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React State Hooks&lt;/a&gt;, and if not, I'll make a mental note for another blog 😄 .&lt;/p&gt;

&lt;p&gt;However, &lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;effect hooks&lt;/a&gt; will be exceptionally useful in our case becauuuse as the doc states:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Effect Hook lets you perform side effects in function components. Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's now dive in to our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// our state hook&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPeople&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;effect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3001/people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;promise fulfilled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setPeople&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our faithful &lt;code&gt;console.log&lt;/code&gt; gives us some hints as to what is happening here by clarifying the progression of the execution. The console prints out the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render 0 people
effect
promise fulfilled
render 3 people
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The body of the function defining the component is executed &lt;strong&gt;first&lt;/strong&gt; thus printing out &lt;em&gt;render 0 people&lt;/em&gt;. Meaning data hasn't been fetched yet.&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;useEffect&lt;/code&gt; function is executed immediately after rendering.&lt;/li&gt;
&lt;li&gt;In result, &lt;em&gt;effect&lt;/em&gt; is printed followed by &lt;code&gt;axios.get&lt;/code&gt; fetching our data.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;promise fulfilled&lt;/em&gt; is registered inside our event handler for the operation and printed.&lt;/li&gt;
&lt;li&gt;Lastly, the &lt;code&gt;setPeople&lt;/code&gt; function changes our &lt;code&gt;state&lt;/code&gt; thus triggering a re-render resulting in &lt;em&gt;render 3 people&lt;/em&gt; being printed to the console. Meaning we've successfully fetched our data!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's refactor our effect hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3001/people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setPeople&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way we can now see that &lt;code&gt;useEffect()&lt;/code&gt; takes two parameters. Firstly, a function, or the effect itself. Once again, the &lt;a href="https://reactjs.org/docs/hooks-reference.html#useeffect"&gt;doc&lt;/a&gt; is our friend:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By default, effects run after every completed render, but you can choose to fire it only when certain values have changed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;According to this, the effect is always run after the component has been rendered. In our case, we only want to execute the effect with the first render.&lt;/p&gt;

&lt;p&gt;The second parameter of &lt;code&gt;useEffect()&lt;/code&gt; is used to &lt;a href="https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect"&gt;specify&lt;/a&gt; how often the effect is run. If the second parameter is an empty array &lt;code&gt;[]&lt;/code&gt;, the effect will only run with the first render.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkVPjrQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/b2c96783c3862ba02c5cf22db7e19728/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkVPjrQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/b2c96783c3862ba02c5cf22db7e19728/tenor.gif" alt="Noice gif"&gt;&lt;/a&gt;&lt;/p&gt;
You can fetch with axios now!



&lt;p&gt;Well done! We've successfully performed a GET request with axios. We'll talk about sending data to the server in another post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;Fetch API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/typicode/json-server"&gt;JSON Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;Effect Hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Web Scalability for Beginners</title>
      <author>Fikayo Adepoju</author>
      <pubDate>Fri, 21 May 2021 18:42:06 +0000</pubDate>
      <link>https://dev.to/hookdeck/web-scalability-for-beginners-2i8c</link>
      <guid>https://dev.to/hookdeck/web-scalability-for-beginners-2i8c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Almost every new application starts out its life under very simple circumstances. The beginning means few users (mostly in the hundreds, rarely thousands), low traffic, few transactions, a small amount of data to process, and oftentimes limited clients ( at first most apps have just a web portal and no mobile or desktop clients at all). However, the number of users starts to grow, traffic spikes, transactions increase across the system, and user needs might prompt the requirement of mobile, desktop, and (in rare cases) &lt;a href="https://en.wikipedia.org/wiki/Internet_of_things"&gt;IoT&lt;/a&gt; clients to be served.&lt;/p&gt;

&lt;p&gt;In this post, we take a look at the requirements that arise from growing pressure on an application. We will go over the effects of this rising pressure on the system's performance, and explore how to respond to it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-mean-for-a-system-to-scale"&gt;
  &lt;/a&gt;
  What does it mean for a system to scale?
&lt;/h1&gt;

&lt;p&gt;Scalability can be defined as a system's ability to adjust in a cost-effective manner in order to fulfill the demands of that system. This "cost" is not always monetary - it can include time investment, the amount of maintenance required (automation versus manual), as well as the human resources needed to keep the system running successfully.&lt;/p&gt;

&lt;p&gt;A system needs to be able to grow to adequately handle more users, process more data, and handle more transactions or client requests without affecting the overall user experience. A well-scaled system should also allow scaling down. Although scaling down is mostly less important than scaling up, it is important to save costs and not use more than what is required.&lt;/p&gt;

&lt;p&gt;The scaling setup should also be relatively cheap and quick to do, thus it is advised to take advantage of the work already done by cloud providers and &lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_a_service"&gt;IaaS&lt;/a&gt; platforms.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sources-of-scalability-issues"&gt;
  &lt;/a&gt;
  Sources of scalability issues
&lt;/h1&gt;

&lt;p&gt;There are so many areas in a system's infrastructure and codebase where scalability issues can arise. However, most scalability issues can be categorized into these 3 areas:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ability-to-serve-more-users"&gt;
  &lt;/a&gt;
  1) Ability to serve more users
&lt;/h2&gt;

&lt;p&gt;As users of an application increase, more pressure is put on the system to serve each user accordingly. Users operate on the software in isolation from one another, which makes it difficult for them to hear the excuse that other users are causing their experience to worsen. A properly scaled application should be ready to handle an increasing number of concurrent users using the application without affecting each user's experience.&lt;/p&gt;

&lt;p&gt;For the system's infrastructure, higher concurrency means more open connections, more active threads, more CPU context switches, and more messages being processed at the same time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYYKXkN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay9hdrq7h9jvtz3106.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYYKXkN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay9hdrq7h9jvtz3106.png" alt="Serving more users"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ability-to-process-more-data"&gt;
  &lt;/a&gt;
  2) Ability to process more data
&lt;/h2&gt;

&lt;p&gt;Imagine an invoice system that needs to calculate the gross total amount for the sales in a year for a product. At an average of a thousand sales a year, the system handles this fine. Suddenly, the product becomes popular due to a boost in ad campaigns and now the system has to process hundreds of thousands of sales in a single year. Such a scenario would put a lot of pressure on the logic in the system that has to calculate the total gross amount for a year's sales. The process would take a longer time to complete and the system could easily run out of memory and terminate the process. &lt;/p&gt;

&lt;p&gt;Also, read and write operations on the database increase and can even get worse if queries are not written to efficiently search, sort, and fetch data.&lt;/p&gt;

&lt;p&gt;Then, there is data required to be sent over the network to clients. This can easily run down the bandwidth if not effectively handled. Clients, especially mobile clients, have limited memory to store data received from servers and therefore certain clients will need specific considerations based on the amount of data they can handle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5zLEtAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/953wybrrntyrsqhf0ozh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5zLEtAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/953wybrrntyrsqhf0ozh.png" alt="Handling more data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ability-to-handle-high-interaction-rates"&gt;
  &lt;/a&gt;
  3) Ability to handle high interaction rates
&lt;/h2&gt;

&lt;p&gt;Clients of applications like e-commerce sites make a fair amount of requests to their backend servers. For some of these low-interaction sites, the difference in time between consecutive requests can be as much as 10 to 100 seconds. However, imagine an online multi-player gaming application or stock exchange application, which are types of applications that can make hundreds of requests to their backend servers within a few seconds. &lt;/p&gt;

&lt;p&gt;For the high interaction sites described above, &lt;a href="https://en.wikipedia.org/wiki/Latency_(engineering)"&gt;latency&lt;/a&gt; is a very huge factor in their performance. Such apps cannot afford microseconds of delay as users have to make quick decisions based on the real-time state of the application.&lt;/p&gt;

&lt;p&gt;Some user interactions can fire up to 5 requests to the server and as interactions increase, the server needs to be scaled to respond faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oFfY1tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqba9f6s58w3cpngiuao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oFfY1tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqba9f6s58w3cpngiuao.png" alt="High interaction rates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#different-types-of-scaling-strategies"&gt;
  &lt;/a&gt;
  Different types of scaling strategies
&lt;/h1&gt;

&lt;p&gt;Scalability is a huge topic and is covered in so many books, seminars, video courses, and articles. There are even books that are dedicated to just one scaling strategy specific to a certain scenario. To be clear, no single scaling strategy solves all scalability problems — there are as many strategies as issues themselves.&lt;/p&gt;

&lt;p&gt;There are, however, certain industry-standard scalability strategies that help solve a lot of the common, but in no way simple, scalability issues. These strategies also have varying degrees of complexity and requirements, both in terms of technology and human resources.&lt;/p&gt;

&lt;p&gt;Let's take a look at some of these strategies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increasing-hardware-capabilities"&gt;
  &lt;/a&gt;
  Increasing hardware capabilities
&lt;/h2&gt;

&lt;p&gt;This is often referred to as vertical scaling. You can scale up your servers by adding more memory to expand the amount of data the software process can hold, and increasing the number of CPU for more processing threads and distributed processing with faster context switches. You can also add more hard disk for more data space or replace hard disk drives (HDD) with solid-state drives (SSD) for faster reads and writes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvap-hc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w562q5jtsxw39ih5f9gx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvap-hc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w562q5jtsxw39ih5f9gx.png" alt="Vertical Scaling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#load-balancing"&gt;
  &lt;/a&gt;
  Load balancing
&lt;/h2&gt;

&lt;p&gt;This is often referred to as horizontal scaling, and is considered more effective for handling concurrency and network traffic issues than vertical scaling. This strategy makes use of a proxy server known as a &lt;a href="https://www.f5.com/services/resources/glossary/load-balancer"&gt;load balancer&lt;/a&gt; to distribute client requests to numerous instances of the backend service. This helps distribute traffic to multiple machines and avoid overloading a single one. Traffic can be distributed evenly (round-robin) or based on the current amount of load each instance is handling.&lt;/p&gt;

&lt;p&gt;This strategy helps DevOps engineers to quickly scale up for traffic spikes by deploying more instances of the backend, and scale down by removing instances from the server pool when traffic reduces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4VRWlzX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f66o0xi3abytgis4tzo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4VRWlzX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f66o0xi3abytgis4tzo1.png" alt="Horizontal Scaling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cdn"&gt;
  &lt;/a&gt;
  CDN
&lt;/h2&gt;

&lt;p&gt;Content delivery networks (CDNs) help solve latency issues by providing highly available and performant proxy servers for your static content. These servers are geographically distributed to serve users based on their proximity to the servers and data centers.&lt;/p&gt;

&lt;p&gt;CDNs also help with bandwidth usage, as the bandwidth for the content fetched from them does not affect that of your servers. Latency for static content is also highly reduced.&lt;/p&gt;

&lt;p&gt;CDNs are mostly operated by companies like &lt;a href="https://www.cloudflare.com"&gt;Cloudflare&lt;/a&gt; with huge data centers and wide network coverage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVA6T3OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1inu18jn7wffteh2o30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVA6T3OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1inu18jn7wffteh2o30.png" alt="Content Delivery Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynchronous-processing"&gt;
  &lt;/a&gt;
  Asynchronous processing
&lt;/h2&gt;

&lt;p&gt;Most server transactions follow a request/response synchronous process. This means that the client has to wait for the server to respond and the server also has to complete a requested task and send a response before continuing with other tasks. These days, with microservices and service-oriented architectures and the need to handle long-running tasks, the client cannot afford to (always) wait for a response from the server before performing other tasks. This has brought about the introduction of systems like &lt;a href="https://en.wikipedia.org/wiki/Message_queue"&gt;message queues&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"&gt;pub/sub systems&lt;/a&gt; to allow the clients to carry on with other activities while the server processes tasks, and also for inter-process communication between servers.&lt;/p&gt;

&lt;p&gt;This gives rise to highly responsive applications that are decoupled and can easily adjust to system demands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsdrEJEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duikav4kaxiiam5w0fxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsdrEJEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duikav4kaxiiam5w0fxq.png" alt="Asynchronous Processing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#geodns"&gt;
  &lt;/a&gt;
  GeoDNS
&lt;/h2&gt;

&lt;p&gt;Latency increases when a request has to make a lot of &lt;a href="https://en.wikipedia.org/wiki/Hop_(networking)"&gt;network hops&lt;/a&gt; around servers across the world before it reaches the server that is to process it. &lt;a href="https://en.wikipedia.org/wiki/GeoDNS"&gt;GeoDNS&lt;/a&gt; gives a spatial advantage by allowing users to communicate with the servers closest to them. &lt;/p&gt;

&lt;p&gt;With GeoDNS, you can map multiple IP addresses representing different servers to a single domain name so that users in an area are served by the server closest to them. This greatly reduces latency as few network hops need to be made and clients receive responses faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AEAAGHuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f5zt9pdzyjaq2as94ja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AEAAGHuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f5zt9pdzyjaq2as94ja.png" alt="GeoDNS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  Caching
&lt;/h2&gt;

&lt;p&gt;Caching encourages re-usability in data-intensive applications. Imagine having to make a network request to fetch your profile every time you visit your profile page on Facebook. Data such as profile information rarely changes, thus it is wise to reuse the piece of information fetched the first time it was loaded and only update it when the user makes an update to their profile.&lt;/p&gt;

&lt;p&gt;Caching helps drastically reduce the number of requests the client makes to the server and also improves speed, as cached information is faster to retrieve than trying to fetch it from the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qzAqvOk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bx344z8n4ois4zyolmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qzAqvOk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bx344z8n4ois4zyolmg.png" alt="Caching"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharding"&gt;
  &lt;/a&gt;
  Sharding
&lt;/h2&gt;

&lt;p&gt;Remember the gross amount of total sales problem described above? Sharding is one of the strategies that can help with that. &lt;/p&gt;

&lt;p&gt;Sharding allows you to split a single dataset into multiple databases and process them individually. Instead of having all sales records in a single database, you can split each month's sale into its own database, process them individually and then combine the results to arrive at your gross calculation.&lt;/p&gt;

&lt;p&gt;Distributing the data across multiple machines creates a cluster of database systems that can store larger datasets and handle more requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cnbTAWes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sapv42ps2y5crsu9n33o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cnbTAWes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sapv42ps2y5crsu9n33o.png" alt="Sharding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Scalability issues are inevitable for any software application that desires growth and most times, scalability issues arrive suddenly. Not planning for these issues can have undesired consequences, which makes it important for software companies, especially startups, to be one step ahead of scalability issues to ensure that they do not lose users they have worked so hard to get.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>scalability</category>
      <category>showdev</category>
      <category>web</category>
    </item>
    <item>
      <title>Sanitizing SQL in Rails/ActiveRecord</title>
      <author>nicklevenson</author>
      <pubDate>Fri, 21 May 2021 18:26:35 +0000</pubDate>
      <link>https://dev.to/nicklevenson/sanitizing-sql-in-rails-activerecord-2p3p</link>
      <guid>https://dev.to/nicklevenson/sanitizing-sql-in-rails-activerecord-2p3p</guid>
      <description>&lt;p&gt;ActiveRecord methods are great for easily querying your database. However, at some point you'll probably have to implement custom sql into your application if the traditional ActiveRecord methods won't get you what you need. When writing custom SQL in Rails, it is important to sanitize it, making sure there's no chance for an injection attack. Sometimes, however, you will have to interpolate Ruby variables into your SQL queries, but regular interpolation can be insecure. So what's the solution? &lt;/p&gt;

&lt;p&gt;I have recently been working on an application with a Rails backend, that essentially matches musicians with each other based on similar interests, locational range, etc. When I was working on my Rails application recently, I had to write a long custom SQL statement. I wanted to make a method that could find users based on range, similar tags, and any filters like genres or instruments (in relation to the current user). &lt;/p&gt;

&lt;p&gt;The query needed to be dynamic - the method containing the query took in arguments and those arguments would affect what the query would be looking for. Here is some pseudo code of the method I wanted to create.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def similarly_tagged_users(range: nil, instruments: nil, genres: nil)
 #NO IDS - get a list of ids of users who the current user is 
 already connected with, has rejected, or is the current user 
 themselves.

 #FILTERED RANGE IDS - see if the user applied a mile radius 
 to apply to the query
 #get a list of ids of users who are in range of the current 
 user

 #OTHER IDS TO FILTER BY - see if the user applied filters 
 (list of instruments and genres)
  #get a list of ids of users who play these instruments or 
  identify with these genres

 #these will all be arrays of ids above. 

 #write a query to sort users by tags that match the current 
 user so users with the most similar tags appear first, as 
 well as not include any of the NO IDS, filter by RANGE IDS, 
 and OTHER IDS TO FILTER BY. Limit results to only 50 users. 

end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok so we have our pseudo code. We know that we will have an array of ids of users to exclude in the query, an array of users that fit the range parameters, as well as an array of ids of users with instruments and genres that match the query. Here's where the sanitization comes in.&lt;/p&gt;

&lt;p&gt;ActiveRecord has a sanitization method called &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Sanitization/ClassMethods.html"&gt;sanitize_sql_array&lt;/a&gt;, that lets you pass an array into a SQL statement. It looks like: &lt;code&gt;sanitize_sql_array(["name=? and group_id=?", "foo'bar", 4])&lt;/code&gt;. You pass an array into the method where the first index is the SQL query you want to write with the question mark placeholder, and the following indexes are variables you can pass in. With this method, any sql injections will be escaped, so you can safely pass variables to your query. &lt;/p&gt;

&lt;p&gt;So for example, my users in range looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;range_query = range ? conn.sanitize_sql_array(["u.id IN(?)", self.users_in_range(all_users, range)]) : "true"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am checking if there is range in the parameters of the method, and if there is, returning the sanitized sql that has executed the method that returns an array of user ids that are in range of a given radius. So that variable, range_query, can be accessed and put into the custom SQL query I would write later. One thing I should note is that you have to establish a connection with the ActiveRecord base to execute these methods. You may notice before the method is 'conn'. Before I use these methods I write: &lt;code&gt;conn = ActiveRecord::Base&lt;/code&gt; so I can use conn as the base for the sanitization methods. &lt;/p&gt;

&lt;p&gt;In the end, my sql query looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sql2 = &amp;lt;&amp;lt;~SQL
      SELECT u.*, COALESCE(matching_tag_counts.n, 0) AS similarity_score
      FROM users AS u
        LEFT OUTER JOIN (
          SELECT user_id, COUNT(*) AS n
          FROM usertags
          WHERE #{conn.sanitize_sql_array(["tag_id IN(?)", self.tag_ids])}
          GROUP BY user_id
        ) AS matching_tag_counts ON u.id=matching_tag_counts.user_id
        WHERE #{conn.sanitize_sql_array(["u.id NOT IN(?)", no_ids])}
        AND #{range_query}
        AND #{genre_instrument_query}
        ORDER BY similarity_score DESC
        LIMIT 50
    SQL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how I interpolated variables that have already been sanitized (range_query and genre_instrument_query). I also interpolated the sanitize_sql_array method in a couple areas. So this is how you can safely interpolate in a custom SQL queries.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>activerecord</category>
      <category>ruby</category>
      <category>sql</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 21 May 2021 17:54:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-3lce</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-3lce</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Taking some time off ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1iYG017UokdODQc0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1iYG017UokdODQc0/giphy.gif" alt="That Friday feeling"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Back to basics: Why excellent markup is the foundation of accessible content</title>
      <author>Ashley Kolodziej</author>
      <pubDate>Fri, 21 May 2021 17:50:25 +0000</pubDate>
      <link>https://dev.to/ashleykolodziej/back-to-basics-why-excellent-markup-is-the-foundation-of-accessible-content-3kd6</link>
      <guid>https://dev.to/ashleykolodziej/back-to-basics-why-excellent-markup-is-the-foundation-of-accessible-content-3kd6</guid>
      <description>&lt;p&gt;Happy Global Accessibility Awareness day, my friends!&lt;/p&gt;

&lt;p&gt;One of the things I didn't learn until late in my career as a frontend developer was just how important HTML is to accessibility. When I first started learning to write code, HTML felt like a means to an end - something I just needed to get out of the way in order to be able to write CSS.&lt;/p&gt;

&lt;p&gt;How wrong I was.&lt;/p&gt;

&lt;p&gt;This post is for all the newbies out there who might be tempted to skip the fundamentals of HTML. Today, we're going to look at what exactly it is HTML does, and why that's so important for making your websites accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-really"&gt;
  &lt;/a&gt;
  What is HTML, really?
&lt;/h2&gt;

&lt;p&gt;HTML is a language of intent - the bridge between what you mean to say, and how the computer interprets it.&lt;/p&gt;

&lt;p&gt;Okay, I realize that sounds a little weird.  But hear me out. As a markup language, HTML is all about telling a computer how your content is structured. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-8yYuRSkSdo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-should-you-care-about-how-a-computer-understands-your-content"&gt;
  &lt;/a&gt;
  Why should you care about how a computer understands your content?
&lt;/h2&gt;

&lt;p&gt;Computers are the interface between your content and the rest of the world. This comes up in two contexts: search engine optimization, and accessibility.&lt;/p&gt;

&lt;p&gt;Search engines and screen readers are both computer-based interfaces that help people access information they might not otherwise be able to access. They do two different jobs, and are aimed at two different use cases, but fundamentally, they are the same: computers that interpret human intent in content. This is why so many best practices for accessibility also happen to coincide with good SEO practice.&lt;/p&gt;

&lt;p&gt;Using semantic HTML tags in your layout helps these tools understand your intent in organizing the content, and how to navigate it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zM1ZBY1ieuw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#think-about-what-its-like-to-navigate-a-new-neighborhood"&gt;
  &lt;/a&gt;
  Think about what it's like to navigate a new neighborhood.
&lt;/h2&gt;

&lt;p&gt;Imagine if you suddenly placed in an unfamiliar neighborhood that you've never been in, and needed to find out how to get to the nearest store to buy a drink.&lt;/p&gt;

&lt;p&gt;You might ask someone for directions.&lt;/p&gt;

&lt;p&gt;You might think about some rules you know are usually true - the sun sets in the west. Streets are normally in a grid pattern. Usually, they intersect about once every block.&lt;/p&gt;

&lt;p&gt;You might look for street signs, or traffic signals. These help you understand where you are.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-is-html-so-important-for-accessibility"&gt;
  &lt;/a&gt;
  Why is HTML so important for accessibility?
&lt;/h2&gt;

&lt;p&gt;HTML provides these types of rules and structure to make it possible to navigate content using a computer. Using a screen reader, you can ask HTML for directions - landmarks around the content. Where's the nearest &lt;code&gt;main&lt;/code&gt; content? What are some of the most important pieces of information in this &lt;code&gt;article&lt;/code&gt;, and where can I find them?&lt;/p&gt;

&lt;p&gt;HTML also has some rules that are usually true. Well-formatted HTML headings are always ordered from &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h6&lt;/code&gt;, without skipping levels. Skipping a level is kind of like when a road you thought was straight suddenly veers off into a bunch of confusing curves. It can make it difficult to understand where you are in the neighborhood, relative to where you started.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/enP0e5oS9Z8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-do-i-write-more-semantic-html"&gt;
  &lt;/a&gt;
  How do I write more semantic HTML?
&lt;/h2&gt;

&lt;p&gt;The simple answer is to always ask yourself if your &lt;em&gt;non-semantic&lt;/em&gt; HTML elements are really the best choice for your content's meaning. Could your &lt;code&gt;div&lt;/code&gt; be a &lt;code&gt;section&lt;/code&gt; instead? In some cases, you need to add HTML to style something in a purely decorative way, and that tag doesn't have any new meaning. But in many cases, &lt;code&gt;section&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt;, and other elements are much better choices.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;over 100 elements in HTML&lt;/a&gt; - it's easy to get overwhelmed. The videos above will introduce you to the most common semantic HTML elements, so if you're not sure where to start, start with those.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;I'm always happy to connect!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🐰 &lt;a href="https://twitter.com/ashleykolodziej"&gt;@ashleykolodziej on Twitter&lt;/a&gt;&lt;br&gt;
🐰 &lt;a href="https://www.youtube.com/channel/UCEH9yYZu65uFf9CEB-aH7tg"&gt;Professor K Explains on YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>html</category>
      <category>a11y</category>
    </item>
    <item>
      <title>How Much CSS Do I Need To Be Job Ready?</title>
      <author>Michael Caveney</author>
      <pubDate>Fri, 21 May 2021 17:35:27 +0000</pubDate>
      <link>https://dev.to/dylanesque/how-much-css-do-i-need-to-be-job-ready-3h0m</link>
      <guid>https://dev.to/dylanesque/how-much-css-do-i-need-to-be-job-ready-3h0m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKoJJ8r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/CSS3_logo_and_wordmark.svg/180px-CSS3_logo_and_wordmark.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKoJJ8r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/CSS3_logo_and_wordmark.svg/180px-CSS3_logo_and_wordmark.svg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS is one of the three foundational web technologies every front-end developer needs to know, and in some ways, the most difficult to learn. There are a staggering amount of &lt;a href="https://css-tricks.com/how-many-css-properties-are-there/#:~:text=520%20distinct%20property%20names%20from,reports%20and%2066%20editors'%20drafts."&gt;properties&lt;/a&gt; one can learn, and many subtleties to be aware of regarding how they interact with each other. Today, I'm going to go over the minimum CSS you need to know to be effective on the job!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-do-i-mean-by-jobready"&gt;
  &lt;/a&gt;
  What Do I Mean By Job-Ready?
&lt;/h1&gt;

&lt;p&gt;Before starting, let me clarify precisely what I mean when I say 'job-ready:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You'll understand the broad strokes of the technology in question, and know the most fundamental concepts that come up every day. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There may be gaps in your knowledge, but those will be limited to secondary concepts or syntax/other details that you'll be able to find the answer to relatively quickly and easily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You'll know exactly where to turn to find answers to problems or questions that you're running into.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the advice here won't make you a master of CSS, but you'll be effective at the day-to-day that you'll need to get started on the job.&lt;/p&gt;

&lt;p&gt;I will mention that while the mechanics that dictate how CSS works are simple, how they interact with each other in the wild can be anything BUT simple, and CSS requires a much deeper understanding of the fundamentals that HTML to be truly effective and not have to constantly be redoing previous code. This post in particular is probably going to have a lot of edits as I refine it to deliver the best information. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-you-need-to-know"&gt;
  &lt;/a&gt;
  What you need to know
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#core-mechanics-and-terminology"&gt;
  &lt;/a&gt;
  Core mechanics and terminology
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Be able to identify and explain what properties, selectors, declarations, values, and rules are. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand at a high level how specificity, inheritance, and the cascade work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model"&gt;box model&lt;/a&gt;, the different roles that margin/padding/border play, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the basic display types (block, inline, and inline-block), and the major differences in how the default versions of these display types work in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout"&gt;flow layout&lt;/a&gt; aka the default version of how layout works in CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the basics of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;positioning&lt;/a&gt; in flow layout (absolute vs relative vs sticky vs fixed vs static) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the fundamentals of stacking with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"&gt;z-index&lt;/a&gt;, and when and what elements it's applied to in that given context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understanding how &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;Flexbox&lt;/a&gt; and &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;Grid&lt;/a&gt; work is a must for modern CSS developers; you should be tangentially aware of how layout works using &lt;code&gt;float&lt;/code&gt;, but don't spend a lot of time on this since it shouldn't be the first layout tool you reach for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to remove or hide items from the DOM or the page: There is a difference between removing items from the DOM or simply making them invisible, and you should know what rules accomplish one or the other, and have an idea of some situations where one method is more desirable than the other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the different units of measurement (pixels, ems, rems, etc), and their strengths, weaknesses, optimum use cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Techniques for responsive design, including media queries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least some familiarity with transforms, animation, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to build a basic design system, and utilize CSS variables.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#extra-credit"&gt;
  &lt;/a&gt;
  Extra Credit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have some familiarity with older paradigms to make CSS more efficient, such as Sass, BEM, etc. These aren't as widely used these days, and you can delve into more detail if you need one of these technologies for a job, but it's not something you'll need for every job.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some familiarity with a CSS framework like Bootstrap can be helpful, but it would be better to be able to demonstrate fluency in writing CSS without them. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If and when you learn a front-end framework like React, some knowledge of a paradigm like Tailwind, styled-components, or Emotion would be helpful.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to Learn
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#basic-resources"&gt;
  &lt;/a&gt;
  Basic Resources
&lt;/h2&gt;

&lt;p&gt;For the absolute basics, I'm going to repeat my recommendations from my post on &lt;a href="https://dev.to/dylanesque/how-much-html-do-i-need-to-be-job-ready-11pc"&gt;getting job-ready with HTML&lt;/a&gt;, as far as basic resources for your first contact with the language go, with the caveat that you'll get less of a quality education in terms of writing solid CSS from freeCodeCamp than you would HTML.&lt;/p&gt;

&lt;p&gt;Additionally, Google's &lt;a href="https://web.dev/"&gt;web.dev&lt;/a&gt; mini learning platform has a really nice, brand-new &lt;a href="https://web.dev/learn/css/"&gt;CSS module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdjl811W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://freetutorialsudemy.com/wp-content/uploads/2020/03/images/image_03-18-2020_114249.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdjl811W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://freetutorialsudemy.com/wp-content/uploads/2020/03/images/image_03-18-2020_114249.jpg" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
For a deeper dive, I would recommend taking a look at Jonas Schmedtman's &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;Advanced CSS&lt;/a&gt; Udemy course. This course shows projects in styled with three different paradigms (old school, Flexbox, Grid) so you can see how those approaches work, and how some of the more modern ones make some techniques easier than the old way or enable layouts that would have been previously impossible. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#premium-resources"&gt;
  &lt;/a&gt;
  Premium Resources
&lt;/h2&gt;

&lt;p&gt;A small caveat about the following section: The course I'm about to talk about is in closed beta at the time of this writing, but I consider it so essential that I can't exclude it here. So with that said...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pu9iMIUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://css-for-js.dev/og-image-v2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pu9iMIUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://css-for-js.dev/og-image-v2.jpg" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The toughest thing about CSS is that the overwhelming majority of education surrounding it is "Here's this rule, this is what it does" without going into the inevitable gotchas or unexpected behavior that will pop up when you're writing CSS at any scale above the smallest possible use-case. Compared to HTML and JavaScript, it's much harder to learn how to write good CSS without a teacher that really knows that they're talking about.&lt;/p&gt;

&lt;p&gt;Josh Comeau's &lt;a href="https://css-for-js.dev/"&gt;CSS For JS Developers&lt;/a&gt; doesn't do this and instead focuses on how the core behavior behind many aspects of the language work, and will teach you tips and tricks it would take you years of trial and error writing production code to figure out. My ability to write efficient, maintainable, and scalable CSS has improved considerably as a direct result of the modules currently available to those who were able to get in on the beat (5 out of 9 total modules), and I consider this the single best CSS resource money can buy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-to-get-helpfind-reference"&gt;
  &lt;/a&gt;
  Where To Get Help/Find Reference
&lt;/h1&gt;

&lt;p&gt;In addition to the sources I mentioned in my last post (Stack Overflow and MDN), I would also recommend checking out &lt;a href="https://css-tricks.com/"&gt;CSS Tricks&lt;/a&gt;, a time-honored blog with many deep dives on various CSS subjects, including the definitive guide to Flexbox that I had linked above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h1&gt;

&lt;p&gt;CSS can be surprisingly tricky to get a firm handle on, but I hope this guide makes the path a lot easier for you. Join me next time, where I talk about getting job-ready with JavaScript!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>css</category>
    </item>
  </channel>
</rss>
