<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to choose a MongoDB shard key</title>
      <author>ChunTing Wu</author>
      <pubDate>Wed, 29 Dec 2021 06:40:36 +0000</pubDate>
      <link>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</link>
      <guid>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</guid>
      <description>&lt;p&gt;In this article, I will show you what is the ideal pattern of a MongoDB shard key. Although there is a good page on the &lt;a href="https://docs.mongodb.com/manual/core/sharding-choose-a-shard-key/"&gt;MongoDB official manual&lt;/a&gt;, it still not provides a formula to choose a shard key.&lt;/p&gt;

&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;The formula is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will explain the reason in the following sections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-scenario"&gt;
  &lt;/a&gt;
  User Scenario
&lt;/h2&gt;

&lt;p&gt;In order to well-describe the formula, I will use an example to illustrate the scenario. There is a collection within application logs, and the format is like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4df16cf0-2699-410f-a07e-ca0bc3d3e153"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"high"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Database crash"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each log has the same template, &lt;code&gt;id&lt;/code&gt; is a &lt;code&gt;UUID&lt;/code&gt;, &lt;code&gt;ts&lt;/code&gt; is an epoch, and both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;level&lt;/code&gt; are a finite enumeration. I will leverage the terminologies in the official manual to explain some incorrect designs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-cardinality-shard-key"&gt;
  &lt;/a&gt;
  Low Cardinality Shard Key
&lt;/h2&gt;

&lt;p&gt;From the mentioned example, we usually choose &lt;code&gt;type&lt;/code&gt; at first sight. Because, we always use &lt;code&gt;type&lt;/code&gt; to identify the logging scope. However, if we choose the &lt;code&gt;type&lt;/code&gt; as the shard key, it must encounter a hot-spot problem. Hot-spot problem means there is a shard size much larger than others. For example, there are 3 shards corresponding to 3 types of logs, app, web and admin, the most popular user is on app. Therefore, the shard size with app log will be very large. Furthermore, due to the low-cardinality shard key, the shards cannot be rebalanced anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ascending-shard-key"&gt;
  &lt;/a&gt;
  Ascending Shard Key
&lt;/h2&gt;

&lt;p&gt;Alright, if &lt;code&gt;type&lt;/code&gt; cannot be the shard key, how about &lt;code&gt;ts&lt;/code&gt;? We always search for the most recently logs, and &lt;code&gt;ts&lt;/code&gt; are fully uniform distributed, it should be a proper choice. Actually, no. When the shard key is an ascending data, it works at the very first time. Nevertheless, it will result in a performance impact soon. The reason is &lt;code&gt;ts&lt;/code&gt; is always ascending, so the data will always insert into the last shard. The last shard will be rebalanced frequently. Worst of all, the query pattern used to search from the last shard as well, i.e. the search will often be the rebalance period.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-shard-key"&gt;
  &lt;/a&gt;
  Random Shard Key
&lt;/h2&gt;

&lt;p&gt;Based on the previous sections, we know &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;ts&lt;/code&gt; all are not good shard key candidates. Thus, we can use &lt;code&gt;id&lt;/code&gt; as the shard key, so that we can spread the data evenly without frequent changes. This approach will work fine when the data set is limited. After the data set becomes huge, the overhead of rebalance will be very high. Because the data is random, MongoDB has to random access the data while rebalancing. On the other hand, if the data is ascending, MongoDB can retrieve the data chunks via the sequential access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;A good MongoDB shard key should be like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to prevent the random access, we choose the coarsely ascending data be the former. This pick also won't meet the problem of frequently rebalancing. And we put a search pattern on the latter to ensure the related data can be located at the same shard as much as possible. In our example, I will not only choose the shard key but also redesign our search pattern. The &lt;code&gt;ts&lt;/code&gt; is fine to address the log at the specific time; however, it is a bit inefficient for a time range query like from 3 month ago til now. Hence, I will add one more key, &lt;code&gt;month&lt;/code&gt;, in the document, so we therefore can leverage the MongoDB date type and make a proper shard key. The collection will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4df16cf0-2699-410f-a07e-ca0bc3d3e153&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;level&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database crash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// only month&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, the shard key is &lt;code&gt;{month: 1, type: 1}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The key point here is we use &lt;code&gt;month&lt;/code&gt; instead of &lt;code&gt;ts&lt;/code&gt; to avoid frequently rebalaning. The &lt;code&gt;month&lt;/code&gt; is not made just for the shard key; on the contrary, we also use it for our search pattern. Instead of calculating the relationship between timestamp and the date, we can use &lt;code&gt;getMonth&lt;/code&gt; to find results faster. For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//1 month ago&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;$gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sum up, this article provides the concepts of designing MongoDB shard key. You might not have a coarsely ascending data so, but you can refer to the concepts and find out a proper key design for your applications.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>distributedsystems</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>Stop using Array.map() everywhere 🥵</title>
      <author>Suprabha</author>
      <pubDate>Wed, 29 Dec 2021 06:38:59 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/stop-using-arraymap-everywhere-57lf</link>
      <guid>https://dev.to/suprabhasupi/stop-using-arraymap-everywhere-57lf</guid>
      <description>&lt;p&gt;&lt;span&gt;M&lt;/span&gt;ost of the time I used to see the snippet like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, we are adding &lt;code&gt;fruits&lt;/code&gt; text to the DOM in &lt;code&gt;main&lt;/code&gt; ID.&lt;br&gt;
It seems there is no issue in the above snippet, Though there is one major issue, which we will be going see today.&lt;/p&gt;

&lt;p&gt;Let's understand the issue by definition of &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt; method creates a new array populated with the results of calling a provided function on every element in the calling array.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [3, 4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Using &lt;code&gt;map()&lt;/code&gt; method means returning a new collection of an array.&lt;/p&gt;

&lt;p&gt;As discussed, &lt;code&gt;map()&lt;/code&gt; method always returns a new array, so if you don’t have any use of a new array then never use &lt;code&gt;map()&lt;/code&gt; method.&lt;br&gt;
When you just need to iterate through an array, I will always recommend using other array methods like &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;for..of&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why-do-we-care-about-it"&gt;
  &lt;/a&gt;
  Why do we care about it? 🙄
&lt;/h3&gt;

&lt;p&gt;As we know, &lt;code&gt;map()&lt;/code&gt; method always returns an array. If you just need to update DOM then storing those elements into memory form doesn't add any point.&lt;br&gt;
Of course, for a small chunk of numbers nothing is going to happen, however, if we take a larger number here then it affects the performance side as it will store the value in memory which will be redundant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-%E2%85%80"&gt;
  &lt;/a&gt;
  Summary  ⅀
&lt;/h3&gt;

&lt;p&gt;Stop using &lt;code&gt;map()&lt;/code&gt; method, if you just need to iterate through an array. &lt;br&gt;
Start using &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;for...of&lt;/code&gt; method, if you want to iterate through an array.&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ❤️&lt;br&gt;
Hope this post will be useful!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee" width="300" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        📚 &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Pardus 21'de tümü-rakam kullanıcı sorunu çözümü</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Wed, 29 Dec 2021 06:30:36 +0000</pubDate>
      <link>https://dev.to/aciklab/pardus-21de-tumu-rakam-kullanici-sorunu-cozumu-4n4d</link>
      <guid>https://dev.to/aciklab/pardus-21de-tumu-rakam-kullanici-sorunu-cozumu-4n4d</guid>
      <description>&lt;p&gt;Güncel GNU/Linux işletim sistemlerinde (Örneğin Pardus 21.x veya RHEL 8.x), all-numeric (tümü-rakam) kullanıcı adlarında oluşan problemlerden dolayı özellikle systemd servisindeki güncelleştirmeler sonucunda tümü-rakam kullanıcı oluşturulması engellenmiştir ve bir şekilde oluşturulması durumunda çeşitli işlevselliklerde hatalar oluşmaktadır.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorunun-belirlenmesi"&gt;
  &lt;/a&gt;
  Sorunun belirlenmesi
&lt;/h2&gt;

&lt;p&gt;Sorun en temel olarak sistemde kullanıcı eklenirken oluşmaktadır. "--force-badname" olarak kullanıcı eklense bile systemd üzerindeki bazı servislerde problem oluşmaya devam etmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adduser: Please enter a username matching the regular expression configured
via the NAME_REGEX configuration variable.  Use the `--force-badname'
option to relax this check or reconfigure NAME_REGEX.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#domain-ortamlar%C4%B1nda-sorunun-%C3%A7%C3%B6z%C3%BCm%C3%BC"&gt;
  &lt;/a&gt;
  Domain ortamlarında sorunun çözümü
&lt;/h2&gt;

&lt;p&gt;Sorun, tümü-rakam kullanıcı isminden dolayı olduğu için sistemin sağlıklı çalışabilmesi için kullanıcı ismi manipülasyonu gerekmektedir. Kurumsal ortamda kullanıcı ismi olarak &lt;code&gt;12345678911@aciklab.lab&lt;/code&gt; şeklinde bir isim ile problem çözülmektedir.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sssdconf-kullan%C4%B1m%C4%B1-ile-kullan%C4%B1c%C4%B1-ad%C4%B1-manip%C3%BClasyonu"&gt;
  &lt;/a&gt;
  sssd.conf kullanımı ile kullanıcı adı manipülasyonu
&lt;/h3&gt;

&lt;p&gt;Giriş yapacak kullanıcı isimleri için [domain/aciklab.lab] sekmesi altında aşağıdaki parametrenin eklenmesi gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use_fully_qualified_names = True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu satırın eklenmesi sonrasında servisin yenilenmesi gerekecektir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart sssd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCvoi4OR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0hw1lcoji9czupqid25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCvoi4OR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0hw1lcoji9czupqid25.png" alt="Image description" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lightdm-%C3%BCzerinden-kullan%C4%B1c%C4%B1-ad%C4%B1-ile-giri%C5%9F-yapmak"&gt;
  &lt;/a&gt;
  lightdm üzerinden kullanıcı adı ile giriş yapmak
&lt;/h3&gt;

&lt;p&gt;Varsayılan lightdm ayarlarında daha önce giriş yapılmamış bilgisayarlarda kullanıcı girişi sırasında sadece &lt;code&gt;12345678911&lt;/code&gt; kullanıcı adı yerine &lt;code&gt;12345678911@aciklab.lab&lt;/code&gt; kullanıcı adı ile giriş yapılması gerekmektedir. İlk giriş yaptıktan sonra tekrardan uzun isim yazmak gerekmemektedir. Bunun için &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt; içerisinde aşağıdaki satırın &lt;code&gt;true&lt;/code&gt; olmadığı netleşmelidir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeter-hide-users=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxbMj_Za--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwfx6zc2bdv3evwgo6pt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxbMj_Za--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwfx6zc2bdv3evwgo6pt.png" alt="Image description" width="674" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>posix</category>
      <category>systemd</category>
      <category>username</category>
    </item>
    <item>
      <title>Blockchain Fundamentals, Cryptocurrencies and Open Source</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:09:57 +0000</pubDate>
      <link>https://dev.to/siddharth2016/blockchain-fundamentals-cryptocurrencies-and-open-source-2235</link>
      <guid>https://dev.to/siddharth2016/blockchain-fundamentals-cryptocurrencies-and-open-source-2235</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;This article is divided into 4 sections, 1&lt;sup&gt;st&lt;/sup&gt; section is about blockchain fundamentals, 2&lt;sup&gt;nd&lt;/sup&gt; section deals with the key features of building a blockchain mobile app, 3&lt;sup&gt;rd&lt;/sup&gt; section dives into cryptocurrency wallets available for us to use and 4&lt;sup&gt;th&lt;/sup&gt; section outlines how the opensource is driving the blockchain revolution.&lt;/p&gt;

&lt;p&gt;You can jump onto any section you like to read, the order of reading these sections are not related.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blockchain-fundamentals"&gt;
  &lt;/a&gt;
  Blockchain Fundamentals
&lt;/h2&gt;

&lt;p&gt;Blockchain technology is a constantly evolving, secure and shared record-keeping system in which each user has a copy of the data, which can only be modified if all parties involved in a transaction agree. This section examines the fundamentals of blockchain technology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-blockchain-transaction"&gt;
  &lt;/a&gt;
  A Blockchain Transaction
&lt;/h3&gt;

&lt;p&gt;To understand the fundamentals of the blockchain, we need to understand how a transaction can be added to the existing blockchain. This can be done by going through a few important steps, as illustrated in the below figure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rXfGZrE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427151158/95A8tJwIo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rXfGZrE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427151158/95A8tJwIo.jpeg" alt="fig1.jpeg" width="666" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Assume that user 1 wants to send X amount of digital bitcoins to user 2. User 1 then initiates the transaction.&lt;/li&gt;
&lt;li&gt;A transaction is initiated by user 1's node by first making it and then digitally signing it with its private key. A transaction in a blockchain can reflect a range of actions.&lt;/li&gt;
&lt;li&gt;A peer-to-peer (P2P) network broadcasts the desired transaction to each individual computer (or node).&lt;/li&gt;
&lt;li&gt;Individual nodes receive the request and attempt to validate the transaction using cryptographic techniques. The miner node is the final node in the validation chain. These miner nodes are compensated in Bitcoin.&lt;/li&gt;
&lt;li&gt;The verified blocks are now added to the blockchain network. Hashing is used to connect these nodes.&lt;/li&gt;
&lt;li&gt;The approved transactions are then recorded in a public ledger. Transactions are completed and the ledger is updated after the block is added to an existing chain.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#cryptography-techniques-used-in-blockchain"&gt;
  &lt;/a&gt;
  Cryptography Techniques Used in Blockchain
&lt;/h3&gt;

&lt;p&gt;Hashing, public-private key mechanisms, and digital signatures are the key cryptographic techniques used by the blockchain community. In this case, a hash feature is implemented to offer each user the opportunity to view the blockchain in its entirety. Blockchain characteristically uses the SHA-256 hashing algorithm. Public-private key pairs are used to gain access to the information and allow transactions. Digital signatures are also used for multi-signature contracts and digital wallets on the blockchain, as well as to ratify transactions by signing them securely (offline).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-of-a-blockchain-network"&gt;
  &lt;/a&gt;
  Working of A Blockchain Network
&lt;/h3&gt;

&lt;p&gt;In a blockchain network, each node holds a complete copy of the distributed ledger. The four fields of a block in this network are the block number, the data field, the hash value, and the nonce. Miners adjust the value of nonce to make it a suitable number for hashing the value of a block. A nonce is a random whole number that is a 32-bit (4-byte) field that is changed by miners to make it an acceptable number for hashing the value of a block. In addition, the chain of blocks is generated by applying the hash of the previous block to the current block. The previous block's hash is stored in the field prior.&lt;/p&gt;

&lt;p&gt;Four zeros are used to begin the hash value. This determines whether or not a block is valid. Each new hash value is created by combining the old hash value, the new transaction block, and a nonce. The hash cash difficulty factor is determined by the number of leading zeroes required in the hash output. The difficulty is tweaked so that block production stays consistent at about one block per ten minutes. The more difficult it is to alter the blockchain, the tougher it is to overwrite the blockchain and double-spend coins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;Blockchain technology is widely accepted by a variety of businesses. It has opened up a plethora of opportunities in the areas of healthcare, finance, accountancy and the online marketplace. The adoption of blockchain technology is expected to grow manifold in the coming years, offering quite a wide range of jobs for young aspirants.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#basics-of-building-a-blockchain-app"&gt;
  &lt;/a&gt;
  Basics of Building a Blockchain App
&lt;/h2&gt;

&lt;p&gt;A blockchain stores data in such a way that it is almost impossible to alter or hack it. In this section, we will go through the key features of the blockchain, look at blockchain development platforms, and view the steps in the blockchain mobile app development process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-blockchain-apps"&gt;
  &lt;/a&gt;
  Some Blockchain Apps
&lt;/h3&gt;

&lt;p&gt;While blockchain development began with cryptocurrencies, it is no longer limited to them. Blockchain applications have now gone beyond cryptocurrency and into a variety of other sectors. As we all know, the main benefit of blockchain technology is that it ensures maximum data transparency and security, helping businesses and organisations save a significant amount of money on standard security methods.&lt;/p&gt;

&lt;p&gt;The following are some useful blockchain apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Filament:&lt;/strong&gt; This is an excellent example of a blockchain-based IoT app that uses blockchain data ledger systems to manage data processed by software and microchip hardware. Several linked devices can communicate information over the blockchain and keep in sync with the help of the app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. KYC-chain:&lt;/strong&gt; For many firms, completing Know Your Customer (KYC) documentation is a must. This simple and effective blockchain-based program streamlines the entire process of handling client documentation across administrative and criminal databases in many nations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. BurstIQ:&lt;/strong&gt; BurstIQ is healthcare software that uses Big Data and blockchain technology to allow patients and doctors to share and collaborate on vital medical information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-platforms"&gt;
  &lt;/a&gt;
  Development Platforms
&lt;/h3&gt;

&lt;p&gt;There are more than two dozen blockchain development platforms. A few of them are described below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Multichain:&lt;/strong&gt; With this powerful platform, developers can create and deploy private blockchains that can be used by a variety of businesses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Hyperledger:&lt;/strong&gt; This distributed ledger technology is used to govern the connected ecosystem of things and supply chains. This advanced blockchain platform has received a lot of acclaims.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Ethereum:&lt;/strong&gt; A versatile opensource blockchain technology, Ethereum is commonly used for decentralised apps, smart contracts and initial coin offerings (ICOs).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. EOS:&lt;/strong&gt; The EOS platform’s goal is to create a reliable smart contract function. It’s also appropriate for modern businesses’ need for highly scalable and decentralised storage and hosting.&lt;/p&gt;

&lt;p&gt;Blockchain systems are available in a wide range of sizes and shapes. Determining which platform is better and more suitable for one's application needs might be confusing. The solution is contingent on the desired capabilities and use-cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing the most appropriate platform:&lt;/strong&gt; The key to your project’s success lies in determining the platform’s character. Platforms based on cryptocurrencies as well as those based on smart contracts are available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decide whether you need smart contracts or not:&lt;/strong&gt; You need to determine if your app needs smart contracts or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selecting the consensus protocol:&lt;/strong&gt; The consensus protocol ensures that every new block added to the blockchain is the only version of the truth that all nodes in the blockchain agree on, such as proof of stake, proof of work, proof of elapsed time, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing the cryptocurrency:&lt;/strong&gt; Another challenge is determining whether or not a cryptocurrency is required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selecting between a public and private network:&lt;/strong&gt; Based on the requirement, you need to decide whether a public or a private network is needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#process-of-blockchain-mobile-app-development"&gt;
  &lt;/a&gt;
  Process of Blockchain Mobile App Development
&lt;/h3&gt;

&lt;p&gt;There are mainly five stages in the blockchain app development process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Identify the problem that the blockchain is required to solve:&lt;/strong&gt; To begin, thoroughly examine the problem description and create a full report on it. Consider whether you need to create a new app from scratch or if you can just integrate the blockchain into an existing one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Select the best platform for the app:&lt;/strong&gt; Select the most appropriate platform for your project. Determine if you need a smart contract app or a crypto-transaction app, as well as the type of network and consensus protocol you'll need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Requirement analysis:&lt;/strong&gt; Begin by doing the requirement analysis and evaluating the app idea’s requirements. Do more brainstorming around the idea and, if possible, fine-tune it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Create a blueprint of the idea:&lt;/strong&gt; Try to develop the proof of concept that will put the entire app concept into a visual structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Development of the application:&lt;/strong&gt; Develop the application employing best practices. Ensure to build a robust blockchain app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;We’ve covered the basics of blockchain in this essay — its main characteristics, as well as several development platforms and stages for developing blockchain applications. If you find the subject interesting, you can delve deeper into it. There are a variety of resources available on the Internet.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cryptocurrency-wallets"&gt;
  &lt;/a&gt;
  Cryptocurrency Wallets
&lt;/h2&gt;

&lt;p&gt;Cryptocurrencies are getting entrenched in the global financial system slowly and steadily, with certain companies using these to pay their employees too. Hesitancy with respect to their use is slowly ebbing, and you may run the risk of being behind the times if you don’t stay updated on the latest trends in this domain. This section lists the exchanges and wallets you should be aware of in case you want to buy or trade-in cryptocurrencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trends-in-cryptocurrencies"&gt;
  &lt;/a&gt;
  Trends in Cryptocurrencies
&lt;/h3&gt;

&lt;p&gt;Due to the high potential for profit, cryptocurrency trading is considered extremely lucrative, particularly among the younger population. Traditional stock market trading has a lot of restrictions and rules. There are no such limitations in the case of cryptocurrencies, and big profits can be produced immediately. The 'crypto market,' in which 'crypto users' trade various types of cryptocurrencies, is also known as the cryptocurrency industry.&lt;/p&gt;

&lt;p&gt;The price of a BitCoin (BTC) was less than one US dollar around 10 years back when it was launched. Today, its price is more than US$ 30,000. A few months ago, its price touched around US$ 60,000, proving it is a very attractive form of investment.&lt;/p&gt;

&lt;p&gt;The market capitalisation of cryptocurrencies is around 338 million US dollars, with 13,951 BitCoin ATMs located in different parts of the world, as per a report from Statista.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wallets-and-exchanges"&gt;
  &lt;/a&gt;
  Wallets and Exchanges
&lt;/h3&gt;

&lt;p&gt;Currently, there are a number of exchanges in the world that offer platforms and wallets for buying and trading cryptocurrencies. These include Web-based environments as well as apps for Android, iPhone and other mobile phone platforms. Crypto users can buy and sell different currencies that are legal tender around the world with ease on these sites.&lt;/p&gt;

&lt;p&gt;The major worldwide crypto exchanges in the world that provide wallets and Web platforms for cryptocurrency trading are listed in the below figure. In crypto exchanges, pairings refer to the pairs of cryptocurrencies that are used to buy and sell such coins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgARcKSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427259763/bIN_-rYI3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgARcKSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427259763/bIN_-rYI3.png" alt="fig2.png" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the crypto world, there are two types of exchanges and wallets — centralised and decentralised.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYI_FVp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427269884/Ao3ACLUK-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYI_FVp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427269884/Ao3ACLUK-.jpeg" alt="fig3.jpeg" width="600" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#centralized-exchanges"&gt;
  &lt;/a&gt;
  Centralized Exchanges
&lt;/h4&gt;

&lt;p&gt;The centralised exchanges and wallets are owned by companies or corporate giants, which record the complete Know Your Customer (KYC) details either through video KYC or paper-based KYC. Users can open accounts in these centralised exchanges and then trade in any cryptocurrency.&lt;/p&gt;

&lt;p&gt;The below figure lists some centralized exchanges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FBfMAa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427285675/PKkGxWZiT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FBfMAa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427285675/PKkGxWZiT.png" alt="fig4.png" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#decentralized-exchanges"&gt;
  &lt;/a&gt;
  Decentralized Exchanges
&lt;/h4&gt;

&lt;p&gt;Decentralised exchanges are platforms on which the account is opened directly without any intermediate company, and trading is done directly by the crypto users.&lt;/p&gt;

&lt;p&gt;The below figure lists some decentralized exchanges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xIZX-ZeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427313694/LmhcxQcF-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIZX-ZeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427313694/LmhcxQcF-.png" alt="fig5.png" width="880" height="746"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;The jury is out on the use of cryptocurrencies because these are sometimes used to circumvent the national money transfer system. Some governments prohibit their use in order to prevent money laundering.&lt;/p&gt;

&lt;p&gt;In order to incorporate the maximum benefits and features into a real-world scenario, the use of cryptocurrencies in any country demands legislation and procedures. The benefits to society and the corporate sector might be substantial if cryptocurrencies are used for real-time applications and e-governance.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#open-source-blockchain-revolution"&gt;
  &lt;/a&gt;
  Open Source Blockchain Revolution
&lt;/h2&gt;

&lt;p&gt;Blockchain is a disruptive technology that is changing the world in a variety of ways. Cryptocurrencies are the most obvious example. This section compares and contrasts this technique with opensource, another revolutionary technology that has transformed software development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blockchain-characteristics"&gt;
  &lt;/a&gt;
  Blockchain Characteristics
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Immutability:&lt;/strong&gt; A hallmark feature of blockchain is that it is incorruptible. Data once saved in a block cannot be changed without breaking the chain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decentralisation:&lt;/strong&gt; Blockchain does not require a central authority to maintain the ledger. All nodes in the network have a copy of the ledger that gets updated with every transaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced security:&lt;/strong&gt; Decentralisation and consensus mechanisms built into blockchain make it highly secure, as every transaction has to be verified with ‘proof of work’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributed:&lt;/strong&gt; The blockchain ledger is not a singular entity in the hands of a few; instead it is a shared entity that is accessible and maintained by everyone in the network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transparency:&lt;/strong&gt; Every addition to the blockchain requires consensus from all nodes in the peer-to-peer network. This makes every transaction transparent and public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source-characteristics"&gt;
  &lt;/a&gt;
  Open Source Characteristics
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Transparency:&lt;/strong&gt; The founding principle of open source is to make the source code of the project public. This enhances the transparency of the project, as every detail that goes into its development can be freely accessed by anyone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced security:&lt;/strong&gt; Finding security loopholes in the software is way easier when the code is non-proprietary and is publicly available. This naturally enhances the security of the software or, at the very least, can help raise public awareness about the potential security-related pitfalls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collaboration:&lt;/strong&gt; The primary purpose of open source software is to encourage other developers to collaborate and contribute to the development of the software. This makes open source development, by nature, a community experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modifiability:&lt;/strong&gt; Open source software can be modified and re-distributed to solve different problems. This is the case with Linux, as its modified ‘distributions’ are used in various different gadgets and computers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decentralisation:&lt;/strong&gt; One can argue that open source software is not inherently decentralised as making changes to the main project still requires the approval of the project moderator(s) and the owner(s). But if perceived from a different angle, given that the source code can be modified and re-distributed under proper licensing, this gives the developer the autonomy to use the software as and how desired thus making the process decentralised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#convergent-evolution"&gt;
  &lt;/a&gt;
  Convergent Evolution
&lt;/h3&gt;

&lt;p&gt;Opensource software and blockchain are two independent technologies with different themes and strategies for addressing different problems. When we compare the attributes of blockchain to open source, however, we discover certain similarities.&lt;/p&gt;

&lt;p&gt;In evolutionary biology, the term 'convergent evolution' refers to the occurrence in which animals from distinct time periods or epochs acquire similar characteristics. This can be seen in molecular biology, animal morphology, and even plant morphology. This holds true for technical breakthroughs as well. We produce new technologies every day to address a wide range of problems; nonetheless, there are underlying patterns in the motivations that drive the creation of these technologies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;Blockchain is new, but open source technology has been around for a long time. In my perspective, the rise of open source technology has had a direct impact on the birth of blockchain. Both technologies are focused on transferring power from a small number of people to a big number of people. Both strive to increase product security and transparency while also promoting fairness and collaboration. While the applications of open source and blockchain are diverse, the motives for their creation are similar. It is safe to assume that open source and blockchain share many characteristics in common and are hence the product of technological convergence.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>opensource</category>
      <category>web3</category>
    </item>
    <item>
      <title>Big Data Open Source Frameworks</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:08:46 +0000</pubDate>
      <link>https://dev.to/siddharth2016/big-data-open-source-frameworks-3app</link>
      <guid>https://dev.to/siddharth2016/big-data-open-source-frameworks-3app</guid>
      <description>&lt;p&gt;Big Data is a term used to define large scale data sets that are too complex to be manipulated with basic DBMS. Handling Big Data requires sophisticated hardware and software technologies.&lt;/p&gt;

&lt;p&gt;Just as open-source has been the primary reason for the Big Data revolution, so has it been at the forefront of developing tools to counter the challenges that we face with the data. And while there are hundreds of popular open-source projects that are focused on Big Data management, in this article, we shall focus on the top three that caught my attention.&lt;/p&gt;

&lt;p&gt;We shall discuss the Hadoop framework, the Spark analytics engine and the Kafka framework.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#is-big-data-hard-to-handle"&gt;
  &lt;/a&gt;
  Is Big Data Hard To Handle?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Almost 90% of the Big Data we produce today is unstructured and there are no predefined models that it adheres to. And there is no quick and easy way to access and analyse unstructured data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not only is Big Data unstructured, but it is also extremely complex. This means traversing through it requires advanced algorithms that are being run on top of grade-A machinery and not everyone can afford that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have multiple sources from which we accrue data and there are no clean ways to integrate disparate data from so many sources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Big Data comes big mistakes. Storing massive and complex data in a secure manner is a really daunting challenge. It is also the need of the hour. Since the beginning of the pandemic, more people are stuck at home with their computers than ever before and cybercrime and data theft have gone up by 400%.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-source-softwares"&gt;
  &lt;/a&gt;
  Open Source Softwares
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#hadoop"&gt;
  &lt;/a&gt;
  Hadoop
&lt;/h4&gt;

&lt;p&gt;Developed by the Apache Foundation, Hadoop is a framework for Big Data management. It uses distributed systems architecture, which has the ability to store and easily access vast amounts of data.&lt;/p&gt;

&lt;p&gt;While there are many different types of Big Data management solution software, what makes Hadoop stands out are 3 components, HDFS, MapReduce and YARN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HDFS (Hadoop Distributed File System)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hadoop Distributed File System (HDFS) is a powerful and dynamic tool that is efficient at handling Big Data. HDFS breaks down Big Data into blocks and the default size of each block is 128MB. This makes accessing data simple, as the HDFS only has to access the specific block of data that the user is searching for. HDFS is a resilient framework, thanks to its replication methodology. To maintain the accessibility of the data even when one of the distributed system blocks is down, HDFS replicates that block data in a three-fold fashion making it robust to avoid failures or inconsistency.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MapReduce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Storing and accessing Big Data, with all its complications and difficulties, is still the easy part. The real fun begins when we try to process Big Data. MapReduce is exactly what it sounds like, it maps the data followed by reducing it. MapReduce takes the data as input and splits it into different parts. It then maps each individual component within each part. Then the data is shuffled and sorted into clusters of homogenous data. The data is then reduced by integrating homogenous data and assigning IDs, which give the smaller final output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YARN (Yet Another Resource Negotiator)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A Hadoop environment is constrained to the number of resources it has, namely, CPUs, memory units, storage space, etc. But since Hadoop is designed to be able to run multiple processes at the same time, a mechanism for allocating resources is necessary to make sure there are no deadlocks and every task is accomplished in its desired time period. Now, YARN comes into play, when a job requires the resources to run, the application manager sends a request to the node manager to allocate the physical resources. The node manager then sends the resources to the resource manager, which assigns the physical resource to the client process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spark"&gt;
  &lt;/a&gt;
  Spark
&lt;/h4&gt;

&lt;p&gt;While HDFS, MapReduce and YARN are the three major defining components of Hadoop, the Hadoop ecosystem has more tools to offer when it comes to Big Data processing, one such tool is Apache Spark. Spark is one of the few tools in the industry that combines Big Data analytics tools with Machine Learning and AI. Spark is 100 times faster than MapReduce in processing data. Spark computations are done in memory itself, it has the ability to perform both batch processing real-time processing of data. Spark is also comparatively lightweight as most of it is written in &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Following are the Spark components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spark Core&lt;/li&gt;
&lt;li&gt;Spark SQL&lt;/li&gt;
&lt;li&gt;Spark Streaming&lt;/li&gt;
&lt;li&gt;Spark MLib&lt;/li&gt;
&lt;li&gt;Spark GraphX&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#kafka"&gt;
  &lt;/a&gt;
  Kafka
&lt;/h4&gt;

&lt;p&gt;Apache Kafka is a framework implementation of a software bus using stream processing. If you break down an information transaction on the Internet, it's essentially nothing but an exchange of information between 2 systems which we sometimes call producers and consumers. Each transaction can be thought of as integration between producer and consumer. In order to simplify complex integrations, Kafka acts as a broker between producer and consumer, which can be well integrated with Hadoop and Spark.&lt;/p&gt;

&lt;p&gt;Kafka consists of Brokers and a Zookeeper.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Broker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A broker is a Kafka server that runs in a Kafka cluster. Each broker divides a unique transaction between the producer and consumer into a topic. Now, these topics within the broker are used to consume and broadcast the messages in an asynchronous fashion.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zookeeper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to define topics and keep a metadata record of all the topics defined in the cluster, Kafka uses Zookeeper which is a replicated distributed log with a file system API built on top. It keeps a record of all the topics within all the nodes and also keeps track of which nodes are down and which are up and running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where To Go From Here?
&lt;/h3&gt;

&lt;p&gt;The tools and frameworks discussed in this article are a high-level overview of the innovation and efforts taking place in the Big Data management industry. There are many more open source tools and frameworks that can be learned and used for Big Data management.&lt;/p&gt;

&lt;p&gt;Google all the available resources and check which fits your Big Data management need to the point and become a Big Data Engineer one step at a time.&lt;/p&gt;

&lt;p&gt;Books to check out more on Big Data Engineering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3DbHhYN"&gt;Big Data Simplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3phG2CF"&gt;Big Data Analytics, Introduction to Hadoop, Spark, and Machine-Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3rvFcoE"&gt;Big Data and Analytics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>python</category>
      <category>bigdata</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Scala Vs Python Syntax Cheat Sheet</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:06:48 +0000</pubDate>
      <link>https://dev.to/siddharth2016/scala-vs-python-syntax-cheat-sheet-3d26</link>
      <guid>https://dev.to/siddharth2016/scala-vs-python-syntax-cheat-sheet-3d26</guid>
      <description>&lt;p&gt;There are about 8 million Python developers around the world and it's also the top programming language people want to learn, but why is that? Why not any other language but Python? Let me tell you, Python offers a lean learning curve, with just 2-3 days of hands-on Python anyone can start developing applications (they might not be technically sound software initially), it's syntax is one of the easiest to learn due to its plain english like code, it offers flexibility from both domains either object-oriented or functional programming (not so much FP, but it has its benefits) and it is used in almost every field of software engineering.&lt;/p&gt;

&lt;p&gt;The only drawback people face when working with Python is related to its speed of executing programs. But is there any other programming language as easy to understand and to get started to work with? Yep, there is, Scala comes to the rescue!&lt;/p&gt;

&lt;p&gt;Python faces speed issues mainly due to its interpreted nature, whereas Scala is a compiled language that offers dynamic typing as well (close to 90%), many new features in Python like pattern matching are already present in Scala since the beginning, there are awesome syntactic sugars in Scala that allows us to write even less code when compared to Python and also Scala being a functional programming language does not shy away from object-oriented programming as it is run over JVM.&lt;/p&gt;

&lt;p&gt;When it comes to the syntax of these programming languages, there are a lot of similar patterns and some differences as well, but overall they both offer a lean learning curve with endless opportunities in the software engineering world.&lt;/p&gt;

&lt;p&gt;So, let's discuss those similarities and differences in the form of a cheat sheet, which not only helps in refreshing some concepts from Python/Scala but also acts as a guide to learn Python or Scala for someone coming from the Scala or Python background respectively.&lt;/p&gt;

&lt;p&gt;This will be a to-the-point kind of article, with little to no explanation but with necessary links wherever needed.&lt;/p&gt;

&lt;p&gt;So, let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-import"&gt;
  &lt;/a&gt;
  How To Import?
&lt;/h3&gt;

&lt;p&gt;In Python importing a library can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# OR
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math.pow&lt;/span&gt;

&lt;span class="c1"&gt;# OR
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;

&lt;span class="c1"&gt;# OR
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;squareRoot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala importing a library can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math._&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math.BigInt&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;BigInt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;BigDecimal&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;BigInt&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;BInt&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-declare-variables"&gt;
  &lt;/a&gt;
  How To Declare Variables?
&lt;/h3&gt;

&lt;p&gt;Python offers dynamic typing so you don't need to declare variables beforehand like in C/C++, but you can just type out the variables and use them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;some_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scala also offers dynamic typing to some extent and infer that type during compile time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;some_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;// infers it as Int type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-define-conditionals"&gt;
  &lt;/a&gt;
  How To Define Conditionals?
&lt;/h3&gt;

&lt;p&gt;In Python and Scala defining conditionals are more or less similar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Odd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Zero"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Even"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Odd"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Zero"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Even"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important thing to note in conditionals is that in Python conditionals are referred to as statements whereas in Scala these are expressions that evaluates to something or nothing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-define-loops"&gt;
  &lt;/a&gt;
  How To Define Loops?
&lt;/h3&gt;

&lt;p&gt;In Python a simple for-loop would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same for-loop in Scala would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference in their respective working behind the scenes, in Scala, is the use of conjunction of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; methods whereas in Python it is simple iteration.&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;while&lt;/code&gt; loop in Scala, but let's not discuss that, while coding in Scala it is not encouraged to use &lt;code&gt;while&lt;/code&gt; loops.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/49552915/why-are-while-loops-not-recommended-in-scala#:~:text=The%20scala%20style%20checker%20says,%2Ddev.html%23org_scalastyle_scalariform_WhileChecker."&gt;Why are while loops not recommended in Scala?&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-write-methods"&gt;
  &lt;/a&gt;
  How To Write Methods?
&lt;/h3&gt;

&lt;p&gt;In Python, we can simply use the &lt;code&gt;def&lt;/code&gt; keyword to define functions, which are similar to methods in Scala.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# do something here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala we can define a method like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someMethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To define functions in Scala, we can use &lt;code&gt;Function&lt;/code&gt; objects or their respective syntactic sugars. To know more about functions and functional programming in Scala, do check &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-3-hep"&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-define-classes-and-objects"&gt;
  &lt;/a&gt;
  How To Define Classes and Objects?
&lt;/h3&gt;

&lt;p&gt;In Python, we can define a class using the &lt;code&gt;class&lt;/code&gt; keyword, the same keyword can be used to define a class in Scala.&lt;/p&gt;

&lt;p&gt;Whereas objects in Scala are singleton instances and similar to what we call static class in other programming languages.&lt;/p&gt;

&lt;p&gt;A class however in Scala can be instantiated using the &lt;code&gt;new&lt;/code&gt; keyword, whereas in Python calling the class directly creates an instance for that.&lt;/p&gt;

&lt;p&gt;In Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something here
&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# creates an instance of class Student
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;

&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;// creates an instance of class Student&lt;/span&gt;

&lt;span class="c1"&gt;// use Object keyword for singleton objects&lt;/span&gt;

&lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;

&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;aParticularStudent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To know more about classes and objects in Scala, I recommend checking out &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-2-39bj"&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#miscellaneous"&gt;
  &lt;/a&gt;
  Miscellaneous
&lt;/h3&gt;

&lt;p&gt;Scala offers 2 more advantages over Python, namely &lt;strong&gt;traits&lt;/strong&gt; and &lt;strong&gt;tail recursion&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Python does not offer tail recursive capabilities to its functions and suffers from stack overflow errors whenever functional programming goes wrong. To know more about why python does not offer tail recursion, you can read &lt;a href="https://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html"&gt;this&lt;/a&gt; article. However, there is a work-around as described in &lt;a href="https://chrispenner.ca/posts/python-tail-recursion"&gt;this&lt;/a&gt; article using decorators.&lt;/p&gt;

&lt;p&gt;Similarly, Python does not have concepts like traits. A trait is used to describe the quality of a class, whereas in Python you would have to do multiple inheritances to get certain qualities or have to define certain methods within the class definition. Trait allows loose coupling.&lt;/p&gt;

&lt;p&gt;How to define a trait in Scala?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;SomeQuality&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;SomeQuality&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;Well, that wraps up this simple Scala Vs Python syntax cheat sheet.&lt;/p&gt;

&lt;p&gt;What else would you add to this cheat sheet? Please let me know in the comments!&lt;/p&gt;

&lt;p&gt;If you are looking to sharpen your coding skills in Python or Scala, then do consider buying these awesome books that go in-depth to let you understand the semantics of the language.&lt;/p&gt;

&lt;p&gt;For Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3k4sVmN"&gt;Python - The Bible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3959lR9"&gt;Python - The Complete Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3hxhjqJ"&gt;Automate The Boring Stuff With Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3AcJgvc"&gt;Python Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Scala:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3C4rZ8a"&gt;Scala For The Impatient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3tAluXH"&gt;Scala Programming Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3hnZYAw"&gt;Functional Programming in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3k66Lk1"&gt;Programming Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>bigdata</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Scala For Beginners - Crash Course - Part 5</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:04:32 +0000</pubDate>
      <link>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-5-4j4o</link>
      <guid>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-5-4j4o</guid>
      <description>&lt;p&gt;Welcome to the 5&lt;sup&gt;th&lt;/sup&gt; and last part of the Scala beginners crash course, here we will go through the concepts like collections, sequences and map, flatmap, filter in the Scala programming language. This will be a short article, so if you need much more in-depth information you can check out the recommended books at the end of this article.&lt;/p&gt;

&lt;p&gt;It will be a no-nonsense, to the point kind of article (like &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt;, &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-2-39bj"&gt;part 2&lt;/a&gt;, &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-3-hep"&gt;part 3&lt;/a&gt; and &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-4-1a9b"&gt;part 4&lt;/a&gt; with all the necessary links wherever needed.&lt;/p&gt;

&lt;p&gt;Without any further ado, let's get started.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#before-we-start"&gt;
  &lt;/a&gt;
  Before We Start
&lt;/h3&gt;

&lt;p&gt;Before we start coding out, first create a new object in the &lt;code&gt;crashcourse&lt;/code&gt; package (please go through &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt; for more information on creating packages and objects).&lt;/p&gt;

&lt;p&gt;Let's name it &lt;code&gt;Collections&lt;/code&gt; like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z838gdHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531346691/e6CNxW3S3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z838gdHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531346691/e6CNxW3S3.png" alt="collections.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can start coding out the examples on this Scala application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collections"&gt;
  &lt;/a&gt;
  Collections
&lt;/h3&gt;

&lt;p&gt;Scala offers 2 sets of collections, one is mutable and the other one is immutable. Scala by default works with immutable collection objects.&lt;/p&gt;

&lt;p&gt;But, we can import mutable collection objects whenever needed like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.collection.mutable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, if we want we can see all immutable collection objects in package &lt;code&gt;scala.collections.immutable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following are some of the immutable collection objects provided in scala:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/HashSet.html"&gt;HashSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/SortedSet.html"&gt;SortedSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/Vector.html"&gt;Vector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/StringLike.html"&gt;StringLike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/Range.html"&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/List.html"&gt;List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/Stream.html"&gt;Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/Stack.html"&gt;Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/Queue.html"&gt;Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/HashMap.html"&gt;HasMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/immutable/SortedMap.html"&gt;SortedMap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similar collection objects are available in the mutable set. This &lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/mutable/index.html"&gt;link&lt;/a&gt; has all the mutable collection objects set.&lt;/p&gt;

&lt;p&gt;The commonality between mutable and immutable collection objects is that both extends trait &lt;a href="https://www.scala-lang.org/api/2.12.2/scala/collection/Traversable.html"&gt;Traversable&lt;/a&gt;. It is a base trait for all collections and offers a great variety of methods.&lt;/p&gt;

&lt;p&gt;Some of these collection objects are often sequenced in nature. Let's discuss sequences now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sequences"&gt;
  &lt;/a&gt;
  Sequences
&lt;/h3&gt;

&lt;p&gt;Sequences in scala are a general interface for data structures that have a well-defined order and can be indexed.&lt;/p&gt;

&lt;p&gt;These support various operations like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;iterator&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt; for indexing and iterating.&lt;/li&gt;
&lt;li&gt;Concatenation, appending, prepending.&lt;/li&gt;
&lt;li&gt;A lot of others - grouping, sorting, zipping, searching and slicing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how to define a sequence:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q47Sm5md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531369496/8rbrbjIYW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q47Sm5md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531369496/8rbrbjIYW.png" alt="sequence.png" width="880" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3P5rzwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531388160/8067-fcPJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3P5rzwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531388160/8067-fcPJ.png" alt="sequence2.png" width="880" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Range&lt;/code&gt; is one of the sequences available, we can define a &lt;code&gt;Range&lt;/code&gt; like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DbYyXVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531407959/iaYGwXKJ4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DbYyXVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531407959/iaYGwXKJ4.png" alt="range.png" width="880" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RylM-Pyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531425930/J_O_pCi5I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RylM-Pyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531425930/J_O_pCi5I.png" alt="range2.png" width="880" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is another type of sequence, &lt;code&gt;LinearSeq&lt;/code&gt; which is an immutable linked list with the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessing head, tail and using methods like &lt;code&gt;isEmpty&lt;/code&gt; are fast and takes &lt;code&gt;O(1)&lt;/code&gt; time.&lt;/li&gt;
&lt;li&gt;Most other operations like &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;reverse&lt;/code&gt; takes &lt;code&gt;O(n)&lt;/code&gt; time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays in scala are equivalent to java arrays, these can be manually constructed with predefined lengths. These can be mutated, have fast indexing and are interoperable with java's arrays.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UCdWkv2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531440888/_h4W3tUUF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UCdWkv2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531440888/_h4W3tUUF.png" alt="array.png" width="880" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vectors are also present in scala, these are the default implementation for immutable sequences taking constant time for indexed based read/write, with fast append/prepend, shows good performance for large size vectors and are implemented using a fixed branched trie data structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkS7eHab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531455900/knizLYOg-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkS7eHab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531455900/knizLYOg-.png" alt="vector.png" width="880" height="77"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tuples are finite ordered kinds of lists that can contain a maximum of 22 elements. A tuple value data type is defined similarly to a function like &lt;code&gt;TupleN[...]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vb-105sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531475585/fR2ZmAxRN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vb-105sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531475585/fR2ZmAxRN.png" alt="tuple.png" width="880" height="77"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is one more collection object, &lt;code&gt;Map&lt;/code&gt;, which is a key-&amp;gt;value pair data structure present in scala. Following are some ways to manipulate a map:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRtNBL2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531488699/EIud6p632.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRtNBL2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531488699/EIud6p632.png" alt="map.png" width="880" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uUViuoIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531499216/dHUHeRySj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUViuoIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531499216/dHUHeRySj.png" alt="map2.png" width="880" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More on Scala collections can be found &lt;a href="https://docs.scala-lang.org/overviews/collections/overview.html"&gt;here&lt;/a&gt; or you can check the books provided in the last section for the more detailed in-depth working of collections.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#map-flatmap-filter-and-for"&gt;
  &lt;/a&gt;
  map, flatMap, filter and for
&lt;/h3&gt;

&lt;p&gt;Finally, on the most important part of functional programming, that would become the daily need of a Scala programmer. I wanted to include these in the previous &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-4-1a9b"&gt;part&lt;/a&gt; but to show how these work I needed to show collections in scala first, now that we know enough about collections, let's move on to these functions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: For the sake of examples, I will be showing these operations on the &lt;code&gt;List&lt;/code&gt; sequence, you can try these on other collections as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, define our list collection like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diht4k0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531520453/GABMEV5EE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diht4k0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531520453/GABMEV5EE.png" alt="list.png" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is the &lt;code&gt;map&lt;/code&gt; method? It allows a certain function to be applied to all the elements present in the given sequence and evaluates to a sequence of updated values.&lt;/p&gt;

&lt;p&gt;What is the &lt;code&gt;filter&lt;/code&gt; method? It filters out the elements which do not meet a certain criterion defined as another function and evaluates to a sequence of filtered values.&lt;/p&gt;

&lt;p&gt;What is the &lt;code&gt;flatMap&lt;/code&gt; method? This is identical to the &lt;code&gt;map&lt;/code&gt; method, but the only difference is that in &lt;code&gt;flatMap&lt;/code&gt; the inner grouping of an item is removed and a sequence is generated. So, if &lt;code&gt;flatMap&lt;/code&gt; is applied to a list then the generated output will be a list of lists, changing the inner grouping of integer elements to a list and later flattening it.&lt;/p&gt;

&lt;p&gt;What is the &lt;code&gt;for&lt;/code&gt; loop in scala? Yeah, you read it right 'What is' and not 'How to', in scala, writing a &lt;code&gt;for&lt;/code&gt; loop is just a fancy way of writing a coupled &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; methods. A &lt;code&gt;for&lt;/code&gt; loop in scala can be written as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_6iGavgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531539746/H2GaxC-s3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6iGavgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531539746/H2GaxC-s3.png" alt="mapfilter.png" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ip3nSOS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531550914/FvTwmpzad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ip3nSOS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631531550914/FvTwmpzad.png" alt="mapfilter2.png" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are some important methods to remember while coding out in scala.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;Well, that wraps up part 5 and the end of this crash course.&lt;/p&gt;

&lt;p&gt;I hope it was something worth it for you as a reader and made you a scala enthusiast at the end of this course.&lt;/p&gt;

&lt;p&gt;You can pick up any of the below books to master the art of programming in scala:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3C4rZ8a"&gt;Scala For The Impatient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3tAluXH"&gt;Scala Programming Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3hnZYAw"&gt;Functional Programming in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3k66Lk1"&gt;Programming Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To keep in touch, you can follow me on here or subscribe to get the updates of the new blogs that I will write in the future or follow me on &lt;a href="https://twitter.com/chandrajidev"&gt;Twitter&lt;/a&gt; where I share my thoughts not only on programming but also on personal finance.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>bigdata</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Scala For Beginners - Crash Course - Part 4</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:01:37 +0000</pubDate>
      <link>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-4-1a9b</link>
      <guid>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-4-1a9b</guid>
      <description>&lt;p&gt;Welcome to the 4&lt;sup&gt;th&lt;/sup&gt; part of the scala beginners crash course, here we will go through the concepts like options, exception handling and pattern matching in the scala programming language. This will be a short article, so if you need much more in-depth information you can check out the recommended books at the end of this article.&lt;/p&gt;

&lt;p&gt;It will be a no-nonsense, to the point kind of article (like &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt;, &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-2-39bj"&gt;part 2&lt;/a&gt; and &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-3-hep"&gt;part 3&lt;/a&gt;) with all the necessary links wherever needed.&lt;/p&gt;

&lt;p&gt;Without further ado, let's get started.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#before-we-start"&gt;
  &lt;/a&gt;
  Before We Start
&lt;/h3&gt;

&lt;p&gt;Before we start coding out, first create a new object in the &lt;code&gt;crashcourse&lt;/code&gt; package (please go through &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt; for more information on creating packages and objects).&lt;/p&gt;

&lt;p&gt;Let's name it &lt;code&gt;OptionErrorPattern&lt;/code&gt; like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJPsaY4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925030021/nVd9E9gnC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJPsaY4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925030021/nVd9E9gnC.png" alt="optionerrorpattern.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can start coding out examples on this scala application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h3&gt;

&lt;p&gt;An option is a wrapper for a value that might be present or not.&lt;/p&gt;

&lt;p&gt;As the name suggests it evaluates to an option of 2 values, either &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;, when given an expression. In this way, when we are dealing with some unsafe APIs, we can always wrap that API calls within an &lt;code&gt;Option&lt;/code&gt; object to keep our program safe and error-free that might otherwise result in a &lt;code&gt;Null&lt;/code&gt; pointer kind of exception.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onagjSh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925018987/sB1uRqqay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onagjSh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925018987/sB1uRqqay.png" alt="option1.png" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Lb8MSTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925042862/-nK_ZfcMc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Lb8MSTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925042862/-nK_ZfcMc.png" alt="option2.png" width="880" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Some&lt;/code&gt; wraps a concrete value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;None&lt;/code&gt; is a singleton for absent values.&lt;/li&gt;
&lt;li&gt;It is better to use &lt;code&gt;Option&lt;/code&gt; in APIs that we are creating.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#handling-exceptions"&gt;
  &lt;/a&gt;
  Handling Exceptions
&lt;/h3&gt;

&lt;p&gt;In scala, exceptions are handled inside try-catch blocks, like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPCEVieE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925058053/hTqvEBrrBP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPCEVieE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925058053/hTqvEBrrBP.png" alt="trycatch1.png" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRZYE699--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925069861/Esd5kD21N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRZYE699--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925069861/Esd5kD21N.png" alt="trycatch2.png" width="880" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, it comes with its drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple/Nested try-catch blocks make the code hard to read/follow.&lt;/li&gt;
&lt;li&gt;We can not chain multiple operations prone to failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To overcome these limitations, scala introduced a &lt;code&gt;Try&lt;/code&gt; object that can act as a wrapper to wrap an error-prone expression and evaluates to either a &lt;code&gt;Success&lt;/code&gt; or a &lt;code&gt;Failure&lt;/code&gt; as a result.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Try&lt;/code&gt; is a wrapper for a computation that might fail or not. It wraps failed computations as &lt;code&gt;Failure&lt;/code&gt; and successful computations as &lt;code&gt;Success&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;Try&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt; and &lt;code&gt;Failure&lt;/code&gt; objects, we have to import these first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.util.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Success&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the above method &lt;code&gt;someErrorProneFunc&lt;/code&gt; can be used with &lt;code&gt;Try&lt;/code&gt; as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZxsxKSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925084602/6lmVG7jIU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZxsxKSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925084602/6lmVG7jIU.png" alt="try1.png" width="880" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWymzKcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925093846/jtYL6zcZR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWymzKcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925093846/jtYL6zcZR.png" alt="try2.png" width="880" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can check if a &lt;code&gt;Try&lt;/code&gt; is a &lt;code&gt;Success&lt;/code&gt; or &lt;code&gt;Failure&lt;/code&gt; using &lt;code&gt;isSuccess&lt;/code&gt; or &lt;code&gt;isFailure&lt;/code&gt; methods respectively.&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;Try&lt;/code&gt; to handle exceptions for avoiding runtime crashes due to uncaught exceptions or just to avoid an endless amount of try-catch blocks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pattern-matching"&gt;
  &lt;/a&gt;
  Pattern Matching
&lt;/h3&gt;

&lt;p&gt;Pattern matching is a mechanism for checking a value against a pattern. A successful match can also deconstruct a value into its constituent parts. It is a more powerful version of the &lt;code&gt;switch&lt;/code&gt; statement in Java and it can likewise be used in place of a series of if/else statements.&lt;/p&gt;

&lt;p&gt;A match expression has a value, the &lt;code&gt;match&lt;/code&gt; keyword, and at least one &lt;code&gt;case&lt;/code&gt; clause.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aegO8wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925111421/1pCDtmdXV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aegO8wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925111421/1pCDtmdXV.png" alt="pattern1.png" width="880" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1TGJbIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925120830/nW6vRfMZ8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1TGJbIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630925120830/nW6vRfMZ8.png" alt="pattern2.png" width="880" height="52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some important points to note on pattern matching:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is used to decompose values.&lt;/li&gt;
&lt;li&gt;Cases are matched in the order given.&lt;/li&gt;
&lt;li&gt;What if there was no case that matched the pattern, then it would result in &lt;code&gt;MatchError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pattern matching works really well with case classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;Well, that wraps up part 4 of this crash course.&lt;/p&gt;

&lt;p&gt;I know, it was a very short read, my motivation was to keep it short and simple and be able to provide ample impetus to you to explore it further. &lt;/p&gt;

&lt;p&gt;Take it as a challenge or homework, explore advanced pattern matching, how you can use &lt;code&gt;Option&lt;/code&gt; in conjunction with &lt;code&gt;Try&lt;/code&gt; (it can do wonders to the API you are working on) and in the comments, mention what you know about on these concepts.&lt;/p&gt;

&lt;p&gt;You can check these books to get more insights on these topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3C4rZ8a"&gt;Scala For The Impatient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3tAluXH"&gt;Scala Programming Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3hnZYAw"&gt;Functional Programming in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3k66Lk1"&gt;Programming Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next and last part of this crash course, we will discuss the collections available in scala and most important of all, the map, flatmap and filter methods in scala.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>bigdata</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Angular Material Theming System: Complete Guide</title>
      <author>Dharmen Shah</author>
      <pubDate>Wed, 29 Dec 2021 05:57:09 +0000</pubDate>
      <link>https://dev.to/shhdharmen/angular-material-theming-system-complete-guide-ogn</link>
      <guid>https://dev.to/shhdharmen/angular-material-theming-system-complete-guide-ogn</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In the latest releases of Angular Material, the SASS theming API has been reworked. In this article, we will learn about custom themes, modifying typography and much more using new SASS mixins.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, you will learn what Angular Material Theming is and what are some recent changes to adhere to the new module system of SASS.&lt;/p&gt;

&lt;p&gt;Then, we will set up a project with Angular Material. We will then add a custom theme in it and understand some important mixins, &lt;code&gt;core&lt;/code&gt;, &lt;code&gt;define-palette&lt;/code&gt;, &lt;code&gt;define-light-theme&lt;/code&gt; and we will apply custom theme to Angular Material components. And we will also learn how to use a pre-built theme.&lt;/p&gt;

&lt;p&gt;After setting up the theme, we will understand typography and also modify it for header tags (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, etc.) for the application.&lt;/p&gt;

&lt;p&gt;Next, we will create a dark theme using &lt;code&gt;define-dark-theme&lt;/code&gt;. We will implement lazy loading for dark theme, so that it only loads when needed.&lt;/p&gt;

&lt;p&gt;After adding support for multiple themes, we will learn how to apply Angular Material’s theming to custom components. We will take an example of an &lt;code&gt;alert&lt;/code&gt; component and apply themes to it.&lt;/p&gt;

&lt;p&gt;We will also learn about how to customize styles of Angular Material components. We will take the example of &lt;code&gt;MatButton&lt;/code&gt; and add new variants for it.&lt;/p&gt;

&lt;p&gt;And at last, we are going to learn how to update an old code-base with Angular Material version 10 to the latest version, i.e. 13. We will see how to resolve SASS errors and what major changes are made in each release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-material-ui-components"&gt;
  &lt;/a&gt;
  Angular Material UI Components
&lt;/h2&gt;

&lt;p&gt;The Angular team builds and maintains both common UI components and tools to help us build our own custom components. &lt;code&gt;@angular/material&lt;/code&gt; is &lt;a href="https://material.io/"&gt;Material Design&lt;/a&gt; UI components for Angular applications.&lt;/p&gt;

&lt;p&gt;Angular Material also provides tools that help developers build their own custom components with common interaction patterns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-materials-theming-system"&gt;
  &lt;/a&gt;
  Angular Material’s Theming System
&lt;/h2&gt;

&lt;p&gt;In Angular Material, a theme is a collection of color and typography options. Each theme includes three palettes that determine component colors: primary, accent and warn.&lt;/p&gt;

&lt;p&gt;Angular Material's theming system comes with a predefined set of rules for color and typography styles. The theming system is based on &lt;a href="https://material.io/design/material-theming/overview.html"&gt;Google's Material Design&lt;/a&gt; specification. You can also customize color and typography styles for components in your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sass-basics"&gt;
  &lt;/a&gt;
  SASS Basics
&lt;/h2&gt;

&lt;p&gt;Before moving ahead, It would be great if you have familiarity with &lt;a href="https://sass-lang.com/guide"&gt;SASS basics&lt;/a&gt;, including &lt;a href="https://sass-lang.com/documentation/variables"&gt;variables&lt;/a&gt;, &lt;a href="https://sass-lang.com/documentation/at-rules/function"&gt;functions&lt;/a&gt;, &lt;a href="https://sass-lang.com/documentation/at-rules/mixin"&gt;mixins&lt;/a&gt;, and &lt;a href="https://sass-lang.com/documentation/at-rules/use"&gt;use&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-changes-of-sass-in-angular-material"&gt;
  &lt;/a&gt;
  New changes of SASS in Angular Material
&lt;/h2&gt;

&lt;p&gt;SASS introduced a new module system, including a migration from &lt;code&gt;@import&lt;/code&gt; to &lt;code&gt;@use&lt;/code&gt; in 2019. The &lt;a href="https://sass-lang.com/documentation/at-rules/use"&gt;@use&lt;/a&gt; rule loads mixins, functions, and variables from other SASS stylesheets, and combines CSS from multiple stylesheets together. Stylesheets loaded by &lt;code&gt;@use&lt;/code&gt; are called "modules".&lt;/p&gt;

&lt;p&gt;By switching to &lt;code&gt;@use&lt;/code&gt; syntax, we can more easily determine what CSS is unused, and reduce the size of the compiled CSS output. Each module is included only once no matter how many times those styles are loaded.&lt;/p&gt;

&lt;p&gt;Angular Material v12 included a migration from &lt;code&gt;@import&lt;/code&gt; usage to &lt;code&gt;@use&lt;/code&gt; for all imports into the Angular Material SASS styles. They updated their code base for all styles with version 12. You can check out that &lt;a href="https://github.com/angular/components/releases/tag/12.0.0"&gt;particular release&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;This refactor of the theming API surface is easier to understand and read, helping developers like us take better advantage of this new module system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-project-with-angular-material"&gt;
  &lt;/a&gt;
  Setup project with Angular Material
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: While writing this article, I used Angular version 13 and the approach described in this article should also work for version 12. For older versions, you can jump to &lt;a href="#angular-update-guide"&gt;the update guide&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this section, we are going to learn how to use the new mixins and functions like &lt;code&gt;core-theme&lt;/code&gt;, &lt;code&gt;all-components-theme&lt;/code&gt;, &lt;code&gt;define-palette&lt;/code&gt;, etc. To summarize, below are main tasks which we will be doing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a custom theme&lt;/li&gt;
&lt;li&gt;Using a pre-built theme&lt;/li&gt;
&lt;li&gt;Modify typography&lt;/li&gt;
&lt;li&gt;Create a dark theme&lt;/li&gt;
&lt;li&gt;Apply Angular Material’s theme to custom component&lt;/li&gt;
&lt;li&gt;Customizing Angular Material Component Styles&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s first create a new Angular Project with SASS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng new my-app &lt;span class="nt"&gt;--style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;scss &lt;span class="nt"&gt;--defaults&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the Angular CLI's installation &lt;a href="https://material.angular.io/guide/schematics"&gt;schematic&lt;/a&gt; to set up your Angular Material project by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng add @angular/material
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ng add&lt;/code&gt; command will install Angular Material, the &lt;a href="https://material.angular.io/cdk/categories"&gt;Component Dev Kit (CDK)&lt;/a&gt;, &lt;a href="https://angular.io/guide/animations"&gt;Angular Animations&lt;/a&gt; and ask you the following questions to determine which features to include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose a prebuilt theme name, or "custom" for a custom theme: Select &lt;strong&gt;Custom&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Set up global Angular Material typography styles?: &lt;strong&gt;Yes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Set up browser animations for Angular Material?: &lt;strong&gt;Yes&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You're done! Angular Material is now configured to be used in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-custom-theme"&gt;
  &lt;/a&gt;
  Create a custom theme
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;theme file&lt;/strong&gt; is a SASS file that uses Angular Material SASS mixins to produce color and typography CSS styles.&lt;/p&gt;

&lt;p&gt;Let’s jump to &lt;code&gt;src/styles.scss&lt;/code&gt; file and have a look at our theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/styles.scss&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"@angular/material"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;core&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$my-app-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$indigo-palette&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$my-app-accent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$pink-palette&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$my-app-warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$red-palette&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$my-app-theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-light-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-primary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;accent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-accent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-warn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all-component-themes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$my-app-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s break the above code into pieces to understand more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-raw-core-endraw-mixin"&gt;
  &lt;/a&gt;
  The &lt;code&gt;core&lt;/code&gt; mixin
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;core&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing in the theme file you will notice is the &lt;code&gt;core&lt;/code&gt; mixin. Angular Material defines a mixin named &lt;code&gt;core&lt;/code&gt; that includes prerequisite styles for common features used by multiple components, such as &lt;a href="https://github.com/angular/components/blob/0d3a730631fae77ce4af49b4b9853da2a5fe09f9/src/material/core/_core.scss#L13"&gt;ripples&lt;/a&gt;. The core mixin must be included exactly once for your application, even if you define multiple themes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#defining-a-theme"&gt;
  &lt;/a&gt;
  Defining a theme
&lt;/h4&gt;

&lt;p&gt;Angular Material represents a theme as a SASS map that contains your color and typography choices. Colors are defined through a palette. &lt;/p&gt;

&lt;p&gt;A palette is a collection of colors representing a portion of color space. Each value in this collection is called a hue. In Material Design, each hue in a palette has an identifier number. These identifier numbers include 50, and then each 100 value between 100 and 900. The numbers order hues within a palette from lightest to darkest. Angular Material represents a palette as a SASS map.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-raw-definepalette-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;define-palette&lt;/code&gt; function
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$my-app-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$indigo-palette&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$my-app-accent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$pink-palette&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$my-app-warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$red-palette&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To construct a theme, 2 palettes are required: &lt;code&gt;primary&lt;/code&gt; and &lt;code&gt;accent&lt;/code&gt;, and &lt;code&gt;warn&lt;/code&gt; palette is optional.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;define-palette&lt;/code&gt; SASS function accepts a color palette, as well as four optional hue numbers. These four hues represent, in order: the "default" hue, a "lighter" hue, a "darker" hue, and a "text" hue.&lt;/p&gt;

&lt;p&gt;Components use these hues to choose the most appropriate color for different parts of themselves. For example, &lt;a href="https://github.com/angular/components/blob/0d3a730631fae77ce4af49b4b9853da2a5fe09f9/src/material/button/_button-theme.scss#L64"&gt;&lt;code&gt;MatButton&lt;/code&gt;’s theme&lt;/a&gt; uses the hues to generate font colors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/material/button/_button-theme.scss&lt;/span&gt;
&lt;span class="c1"&gt;// content reduced for brevity&lt;/span&gt;

&lt;span class="c1"&gt;// Applies a property to an mat-button element for each of the supported palettes.&lt;/span&gt;
&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;_theme-property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$accent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foreground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-primary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;theming&lt;/span&gt;&lt;span class="nc"&gt;.get-color-from-palette&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;hue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-accent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;theming&lt;/span&gt;&lt;span class="nc"&gt;.get-color-from-palette&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;accent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;hue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-warn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;theming&lt;/span&gt;&lt;span class="nc"&gt;.get-color-from-palette&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;hue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-primary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-accent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-warn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-button-disabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.mat-button-disabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"color"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$foreground&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;theming&lt;/span&gt;&lt;span class="nc"&gt;.get-color-from-palette&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;palette&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;disabled-button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get-color-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foreground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nc"&gt;.mat-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.mat-icon-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.mat-stroked-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;_theme-property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"color"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our example, we have used predefined palettes, i.e. &lt;code&gt;$indigo-palette&lt;/code&gt;, &lt;code&gt;$pink-palette&lt;/code&gt; and &lt;code&gt;$red-palette&lt;/code&gt;. You can check out other palettes at the Angular Material GitHub &lt;a href="https://github.com/angular/components/blob/master/src/material/core/theming/_palette.scss"&gt;repo’s file:&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/material/core/theming/_palette.scss&lt;/span&gt;
&lt;span class="c1"&gt;// content reduced for brevity&lt;/span&gt;

&lt;span class="nv"&gt;$red-palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ffebee&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ffcdd2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ef9a9a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#e57373&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$pink-palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fce4ec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f8bbd0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f48fb1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f06292&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$dark-primary-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#create-your-own-palette"&gt;
  &lt;/a&gt;
  Create your own palette
&lt;/h6&gt;

&lt;p&gt;You can also create your own palettes by defining a SASS map like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$indigo-palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#e8eaf6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#c5cae9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#9fa8da&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#7986cb&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;continues&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;
 &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.87&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.87&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.87&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;continues&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;
 &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#the-raw-definelighttheme-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;define-light-theme&lt;/code&gt; function
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$my-app-theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-light-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-primary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;accent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-accent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-warn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can construct a theme by calling either &lt;code&gt;define-light-theme&lt;/code&gt; or &lt;code&gt;define-dark-theme&lt;/code&gt; with the result from &lt;code&gt;define-palette&lt;/code&gt;. The choice of a light versus a dark theme determines the background and foreground colors used throughout the components.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#applying-a-theme-to-components"&gt;
  &lt;/a&gt;
  Applying a theme to components
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all-component-themes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$my-app-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Angular Material offers a "theme" mixin that emits styles for both color and typography and It’s the &lt;code&gt;all-component-themes&lt;/code&gt; mixin.&lt;/p&gt;

&lt;p&gt;You can check the source file: &lt;a href="https://github.com/angular/components/blob/97ec228ada31e55f76a7e0171c715bb0b8d07e9c/src/material/core/theming/_all-theme.scss#L40"&gt;&lt;code&gt;src/material/core/theming/_all-theme.scss&lt;/code&gt;&lt;/a&gt; to see the mixin &lt;code&gt;all-component-themes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/material/core/theming/_all-theme.scss&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;all-component-themes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$dedupe-key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'angular-material-theme'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private-check-duplicate-theme-styles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$dedupe-key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;core-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;autocomplete-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;badge-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;bottom-sheet-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;button-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// other material components' themes...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, there is a "color" mixin that emits all components' color styles and a "typography" mixin that emits all components’ typography styles. They are &lt;code&gt;all-component-colors&lt;/code&gt; and &lt;code&gt;all-component-typographies&lt;/code&gt; mixins.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;all-component-colors&lt;/code&gt; mixin is present at&lt;a href="https://github.com/angular/components/blob/97ec228ada31e55f76a7e0171c715bb0b8d07e9c/src/material/core/color/_all-color.scss#L5"&gt;&lt;code&gt;src/material/core/color/_all-color.scss&lt;/code&gt;&lt;/a&gt; has:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/material/core/color/_all-color.scss&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;all-component-colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private-is-theme-object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get-color-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;all-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all-component-themes&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;typography&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;all-components-typography&lt;/code&gt; mixin is present at &lt;a href="https://github.com/angular/components/blob/97ec228ada31e55f76a7e0171c715bb0b8d07e9c/src/material/core/typography/_all-typography.scss#L42"&gt;&lt;code&gt;src/material/core/typography/_all-typography.scss&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/material/core/typography/_all-typography.scss&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;all-component-typographies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private-is-theme-object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get-typography-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;badge-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;typography&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;typography-hierarchy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;autocomplete-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;bottom-sheet-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;button-theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// other components' typographies&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These mixins emit styles for all 35+ components in Angular Material. This will produce unnecessary CSS, except when your application is using every single component from the library. Let’s look at the &lt;code&gt;styles&lt;/code&gt; size after the &lt;code&gt;build&lt;/code&gt; command and then I’ll show you how to reduce it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qhqfqyUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pJYl4W7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhqfqyUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pJYl4W7.png" alt="showing styles bundle size" title="showing styles bundle size" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#include-only-used-components-themes"&gt;
  &lt;/a&gt;
  Include only used components’ themes
&lt;/h5&gt;

&lt;p&gt;Just like &lt;code&gt;all-component-colors&lt;/code&gt;, &lt;code&gt;all-component-typographies&lt;/code&gt; and &lt;code&gt;all-component-themes&lt;/code&gt;, each Angular Material component has a &lt;code&gt;color&lt;/code&gt;, a &lt;code&gt;typography&lt;/code&gt; and a &lt;code&gt;theme&lt;/code&gt; mixin.&lt;/p&gt;

&lt;p&gt;You can checkout &lt;code&gt;MatButton&lt;/code&gt;’s mixins at &lt;a href="https://github.com/angular/components/blob/master/src/material/button/_button-theme.scss"&gt;&lt;code&gt;src/material/button/_button-theme.scss&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/material/button/_button-theme.scss&lt;/span&gt;
&lt;span class="c1"&gt;// content reduced for brevity&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get-color-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$accent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// sets up color for buttons&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typography&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private-typography-to-2014-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get-typography-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config-or-theme&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nc"&gt;.mat-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.mat-raised-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.mat-icon-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.mat-stroked-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.mat-flat-button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.mat-fab&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.mat-mini-fab&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typography-utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typography-utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typography-utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private-legacy-get-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme-or-color-config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private-check-duplicate-theme-styles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'mat-button'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get-color-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$typography&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;theming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get-typography-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;@if&lt;/span&gt; &lt;span class="nv"&gt;$color&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;@if&lt;/span&gt; &lt;span class="nv"&gt;$typography&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$typography&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can apply the styles for each of the components used in the application by including each of their theme SASS mixins.&lt;/p&gt;

&lt;p&gt;First, we will remove &lt;code&gt;all-component-themes&lt;/code&gt; from &lt;code&gt;styles.scss&lt;/code&gt; and instead, add &lt;code&gt;core-theme&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @include mat.all-component-themes($my-app-theme); &amp;lt;-- removed&lt;/span&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;core-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$my-app-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;core-theme&lt;/code&gt; emits theme-dependent styles for common features used across multiple components, like ripples.&lt;/p&gt;

&lt;p&gt;Next, we need to add component related styles. In this example, we are only going to use &lt;a href="https://material.angular.io/components/button/overview"&gt;&lt;code&gt;MatButton&lt;/code&gt;&lt;/a&gt;, so we will add &lt;code&gt;button-theme&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;button-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$my-app-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add other components’ &lt;code&gt;theme&lt;/code&gt;’s in the same way. But, &lt;code&gt;core-theme&lt;/code&gt; is only needed once per theme. Let’s look at the &lt;code&gt;styles&lt;/code&gt; size now after build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72f0Fdxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vPVoi24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72f0Fdxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vPVoi24.png" alt="showing styles bundle size after optimizations" title="showing styles bundle size after optimizations" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how using only the needed components’ themes reduces the style's size. In our case, it was 72.31 kB earlier and it’s reduced to 23.52 kB, which is almost 58% less.&lt;/p&gt;

&lt;p&gt;For better code management, we will move theme related code into &lt;code&gt;styles/themes/_light.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/styles/themes/_light.scss&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"sass:map"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"@angular/material"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$my-app-light-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$indigo-palette&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$my-app-light-accent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$pink-palette&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$my-app-light-warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$red-palette&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$my-app-light-theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-light-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-light-primary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;accent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-light-accent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$my-app-light-warn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use the same in &lt;code&gt;styles.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// styles.scss&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"@angular/material"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"./styles/themes/light"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;core&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;core-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$my-app-light-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;button-theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$my-app-light-theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-after-creating-custom-theme"&gt;
  &lt;/a&gt;
  Output after creating custom theme
&lt;/h4&gt;

&lt;p&gt;Let’s add a &lt;code&gt;[mat-raised-button]&lt;/code&gt; in application and see how it looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-raised-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Raised&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-raised-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"accent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Accent&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-raised-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"warn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Warn&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the output should look like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQKRnDWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/9ghL1oN.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQKRnDWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/9ghL1oN.gif" alt="output after creating custom theme" title="output after creating custom theme" width="600" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-a-prebuilt-theme"&gt;
  &lt;/a&gt;
  Using a pre-built theme
&lt;/h3&gt;

&lt;p&gt;When we installed Angular Material, we selected “Custom” in theme selection. If you want any pre-built theme, you can select any theme instead of “Custom”. There are 4 pre-built themes provided:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Theme&lt;/th&gt;
&lt;th&gt;Light or dark?&lt;/th&gt;
&lt;th&gt;Palettes (primary, accent, warn)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;deeppurple-amber.css&lt;/td&gt;
&lt;td&gt;Light&lt;/td&gt;
&lt;td&gt;deep-purple, amber, red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indigo-pink.css&lt;/td&gt;
&lt;td&gt;Light&lt;/td&gt;
&lt;td&gt;indigo, pink, red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pink-bluegray.css&lt;/td&gt;
&lt;td&gt;Dark&lt;/td&gt;
&lt;td&gt;pink, bluegray, red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;purple-green.css&lt;/td&gt;
&lt;td&gt;Dark&lt;/td&gt;
&lt;td&gt;purple, green, red&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For instance, if you want to use &lt;code&gt;indigo-pink.css&lt;/code&gt;’s theme, you just need to include that file in the &lt;code&gt;styles&lt;/code&gt; array of your project’s &lt;code&gt;angular.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"styles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"./node_modules/@angular/material/prebuilt-themes/indigo-pink.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;styles&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modify-typography"&gt;
  &lt;/a&gt;
  Modify typography
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Typography is a way of arranging type to make text legible, readable, and appealing when displayed. Angular Material's theming system supports customizing the typography settings for the library's components. Additionally, Angular Material provides APIs for applying typography styles to elements in your own application.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we installed Angular Material through schematics, it set up the font asset for us in &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to support &lt;code&gt;Roboto&lt;/code&gt;, it also added some global styles in &lt;code&gt;styles.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#typography-level"&gt;
  &lt;/a&gt;
  Typography level
&lt;/h4&gt;

&lt;p&gt;In the Material theme, each set of typography is categorised in levels based on which part of the application's structure it corresponds to, such as a header. You can learn more about it at  &lt;a href="https://material.io/archive/guidelines/style/typography.html#typography-styles"&gt;typography levels from the 2014 version of the Material Design specification&lt;/a&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;CSS Class&lt;/th&gt;
&lt;th&gt;Native Element&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;display-4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.mat-display-4&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;112px, one-off header, usually at the top of the page (e.g. a hero header).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;display-3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.mat-display-3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;56px, one-off header, usually at the top of the page (e.g. a hero header).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;display-2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.mat-display-2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;45px, one-off header, usually at the top of the page (e.g. a hero header).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;display-1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.mat-display-1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;34px, one-off header, usually at the top of the page (e.g. a hero header).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;headline&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.mat-h1&lt;/code&gt; or &lt;code&gt;.mat-headline&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Section heading corresponding to the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.mat-h2&lt;/code&gt; or &lt;code&gt;.mat-title&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Section heading corresponding to the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subheading-2&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.mat-h3&lt;/code&gt; or &lt;code&gt;.mat-subheading-2&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Section heading corresponding to the &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subheading-1&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.mat-h4&lt;/code&gt; or &lt;code&gt;.mat-subheading-1&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Section heading corresponding to the &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt; tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.mat-h5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;h5&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.mat-h6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;body-1&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.mat-body&lt;/code&gt; or &lt;code&gt;.mat-body-1&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Body text&lt;/td&gt;
&lt;td&gt;Base body text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;body-2&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.mat-body-strong&lt;/code&gt; or &lt;code&gt;.mat-body-2&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;Bolder body text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;caption&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.mat-small&lt;/code&gt; or &lt;code&gt;.mat-caption&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;Smaller body and hint text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;button&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;Buttons and anchors.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;Form input fields.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#define-a-level"&gt;
  &lt;/a&gt;
  Define a level
&lt;/h5&gt;

&lt;p&gt;You can define a typography level with the &lt;code&gt;define-typography-config&lt;/code&gt; SASS function. This function accepts, in order, CSS values for &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt;, &lt;code&gt;font-weight&lt;/code&gt;, &lt;code&gt;font-family&lt;/code&gt;, and &lt;code&gt;letter-spacing&lt;/code&gt;. You can also specify the parameters by name, as demonstrated in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'@angular/material'&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$my-custom-level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;$font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#typography-config"&gt;
  &lt;/a&gt;
  Typography config
&lt;/h4&gt;

&lt;p&gt;Angular Material handles all those levels using &lt;strong&gt;typography config&lt;/strong&gt;. Angular Material represents this config as a SASS map.This map contains the styles for each level, keyed by name. You can create a typography config with the &lt;code&gt;define-typography-config&lt;/code&gt; SASS function. Every parameter for &lt;code&gt;define-typography-config&lt;/code&gt; is optional; the styles for a level will default to Material Design's baseline if unspecified.&lt;/p&gt;

&lt;p&gt;For this example, we will change the typography of headings and we will use &lt;a href="https://fonts.google.com/specimen/Work+Sans"&gt;Work Sans&lt;/a&gt; as &lt;code&gt;font-family&lt;/code&gt;. Let’s see how.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#including-font-assets"&gt;
  &lt;/a&gt;
  Including font assets
&lt;/h5&gt;

&lt;p&gt;First, we will add the font at the bottom of &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; in  &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Work+Sans:wght@300;400;500&amp;amp;display=swap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#heading-fontfamily-sass-variable"&gt;
  &lt;/a&gt;
  Heading font-family SASS variable
&lt;/h5&gt;

&lt;p&gt;Next, create a file &lt;code&gt;styles/typography/_config.scss&lt;/code&gt; and create a variable in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/styles/typography/_config.scss&lt;/span&gt;

&lt;span class="nv"&gt;$heading-font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"'Work Sans', sans-serif"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#create-config"&gt;
  &lt;/a&gt;
  Create config
&lt;/h5&gt;

&lt;p&gt;Now it’s time to create the config using &lt;code&gt;define-typography-config&lt;/code&gt; in &lt;code&gt;styles/typography/_config.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$my-app-typography&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;$display-4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;112px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$heading-font-family&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$display-3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;56px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$heading-font-family&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$display-2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$heading-font-family&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$display-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;34px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$heading-font-family&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$headline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$heading-font-family&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-typography-level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$heading-font-family&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To customize component typography for the entire application, we will pass the custom typography config to the &lt;code&gt;core&lt;/code&gt; mixin in &lt;code&gt;styles.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/styles.scss&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"@angular/material"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"./styles/themes/light"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"./styles/typography/config"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;core&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typography&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$my-app-typography&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// rest remains same&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Passing the typography config to core mixin will apply specified values to all Angular Material components. If a config is not specified, &lt;code&gt;core&lt;/code&gt; will emit the default Material Design typography styles.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#theme-specific-typography"&gt;
  &lt;/a&gt;
  Theme specific typography
&lt;/h5&gt;

&lt;p&gt;In addition to the &lt;code&gt;core&lt;/code&gt; mixin, we can specify your typography config when including any &lt;code&gt;theme&lt;/code&gt; mixin, like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$custom-theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define-light-theme&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
   &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$custom-primary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;accent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$custom-accent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;typography&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$custom-typography&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the &lt;code&gt;core&lt;/code&gt; mixin always emits typography styles, specifying a typography config to a &lt;code&gt;theme&lt;/code&gt; mixin results in duplicate typography CSS. You should only provide a typography config when applying your theme if you need to specify multiple typography styles that are conditionally applied based on your application's behavior.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-typography-styles-in-your-application"&gt;
  &lt;/a&gt;
  Using typography styles in your application
&lt;/h5&gt;

&lt;p&gt;Angular Material's native elements’ typography works if content is wrapped within the '.mat-typography&lt;code&gt;CSS class. If you check the&lt;/code&gt;index.html&lt;code&gt;file,&lt;/code&gt;mat-typography&lt;code&gt;class is added to the&lt;/code&gt;&lt;/p&gt;
&lt;code&gt;tag. It was done when we ran&lt;/code&gt;ng add @angular/material`.

&lt;p&gt;If you don’t want to wrap the whole application in a &lt;code&gt;mat-typography&lt;/code&gt; class, you can also use individual classes listed in the &lt;a href="#typography-level"&gt;levels table&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#output-after-modifying-the-typography"&gt;
  &lt;/a&gt;
  Output after modifying the typography
&lt;/h4&gt;

&lt;p&gt;Let’s temporarily modify the content of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; in &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;html&lt;br&gt;
&amp;lt;body&amp;gt;&lt;br&gt;
    &amp;lt;!-- This header will *not* be styled because it is outside&lt;/code&gt;.mat-typography` --&amp;gt;&lt;br&gt;
    &lt;/p&gt;
&lt;h1&gt;Top header (Material Typography doesn't apply here)&lt;/h1&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- This paragraph will be styled as `body-1` via the `.mat-body` CSS class applied --&amp;gt;
&amp;lt;p class="mat-body"&amp;gt;Introductory text&amp;lt;/p&amp;gt;

&amp;lt;div class="mat-typography"&amp;gt;
  &amp;lt;!-- This header will be styled as `title` because it is inside `.mat-typography` --&amp;gt;
  &amp;lt;h2&amp;gt;Inner header&amp;lt;/h2&amp;gt;

  &amp;lt;!-- This paragraph will be styled as `body-1` because it is inside `.mat-typography` --&amp;gt;
  &amp;lt;p&amp;gt;Some inner text&amp;lt;/p&amp;gt;
  &amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you look at the output, you will get an idea how typography works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8e7rJmpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8USPRGx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8e7rJmpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8USPRGx.png" alt="output after modifying typography" title="output after modifying typography" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After modifying typography, below is the content of &lt;code&gt;src/styles/typography/_config.scss&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`scss&lt;br&gt;
// src/styles/typography/_config.scss&lt;/p&gt;

&lt;p&gt;@use "@angular/material" as mat;&lt;/p&gt;

&lt;p&gt;$heading-font-family: "'Work Sans', sans-serif";&lt;br&gt;
$my-app-typography: mat.define-typography-config(&lt;br&gt;
  $display-4:&lt;br&gt;
    mat.define-typography-level(112px, $font-family: $heading-font-family),&lt;br&gt;
  $display-3:&lt;br&gt;
    mat.define-typography-level(56px, $font-family: $heading-font-family),&lt;br&gt;
  $display-2:&lt;br&gt;
    mat.define-typography-level(45px, $font-family: $heading-font-family),&lt;br&gt;
  $display-1:&lt;br&gt;
    mat.define-typography-level(34px, $font-family: $heading-font-family),&lt;br&gt;
  $headline:&lt;br&gt;
    mat.define-typography-level(24px, $font-family: $heading-font-family),&lt;br&gt;
  $title: mat.define-typography-level(20px, $font-family: $heading-font-family),&lt;br&gt;
);&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And below is the content of &lt;code&gt;style.scss&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`scss&lt;br&gt;
// src/styles.scss&lt;/p&gt;

&lt;p&gt;@use "@angular/material" as mat;&lt;/p&gt;

&lt;p&gt;@use "./styles/themes/light";&lt;br&gt;
@use "./styles/typography/config" as typography;&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt; mat.core(typography.$my-app-typography);&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt; mat.core-theme(light.$my-app-light-theme);&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt; mat.button-theme(light.$my-app-light-theme);&lt;/p&gt;

&lt;p&gt;html,&lt;br&gt;
body {&lt;br&gt;
  height: 100%;&lt;br&gt;
}&lt;br&gt;
body {&lt;br&gt;
  margin: 0;&lt;br&gt;
  font-family: Roboto, "Helvetica Neue", sans-serif;&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-a-dark-theme"&gt;
  &lt;/a&gt;
  Create a dark theme
&lt;/h3&gt;

&lt;p&gt;Now we will add a dark theme in the application. Create a new file called &lt;code&gt;dark.scss&lt;/code&gt; in the &lt;code&gt;styles/themes&lt;/code&gt; folder with the following content:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`scss&lt;br&gt;
// src/styles/themes/dark.scss&lt;/p&gt;

&lt;p&gt;@use "sass:map";&lt;br&gt;
@use "@angular/material" as mat;&lt;/p&gt;

&lt;p&gt;@use "../typography/config" as typography;&lt;br&gt;
@use "../components";&lt;/p&gt;

&lt;p&gt;$my-app-dark-primary: mat.define-palette(mat.$blue-grey-palette);&lt;br&gt;
$my-app-dark-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);&lt;br&gt;
$my-app-dark-warn: mat.define-palette(mat.$deep-orange-palette);&lt;br&gt;
$my-app-dark-theme: mat.define-dark-theme(&lt;br&gt;
  (&lt;br&gt;
    color: (&lt;br&gt;
      primary: $my-app-dark-primary,&lt;br&gt;
      accent: $my-app-dark-accent,&lt;br&gt;
      warn: $my-app-dark-warn,&lt;br&gt;
    ),&lt;br&gt;
  )&lt;br&gt;
);&lt;/p&gt;

&lt;p&gt;.dark-theme {&lt;br&gt;
  &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt; mat.core-color($my-app-dark-theme);&lt;br&gt;
  &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt; mat.button-color($my-app-dark-theme);&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice that we are using a class selector &lt;code&gt;.dark-theme&lt;/code&gt; to render a dark theme.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#avoiding-duplicated-theming-styles"&gt;
  &lt;/a&gt;
  Avoiding duplicated theming styles
&lt;/h4&gt;

&lt;p&gt;While creating &lt;code&gt;dark-theme&lt;/code&gt;, instead of &lt;code&gt;core-theme&lt;/code&gt; and &lt;code&gt;button-theme&lt;/code&gt;, which we used in the original theme, we are using &lt;code&gt;core-color&lt;/code&gt; and &lt;code&gt;button-color&lt;/code&gt;. The reason behind that is we only want to change colors in &lt;code&gt;dark-theme&lt;/code&gt; and every other style should remain the same. If we use &lt;code&gt;theme&lt;/code&gt; mixins, it would generate all the styles again, which are not required.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#changes-for-background-and-font-color"&gt;
  &lt;/a&gt;
  Changes for background and font color
&lt;/h4&gt;

&lt;p&gt;To complete the theme setup for background and font color, we will need to add class &lt;code&gt;mat-app-background&lt;/code&gt; to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag in &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;html&lt;br&gt;
&amp;lt;body class="mat-typography mat-app-background"&amp;gt;&lt;br&gt;
  &amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;br&gt;
&amp;lt;/body&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#lazy-load-dark-theme"&gt;
  &lt;/a&gt;
  Lazy load dark theme
&lt;/h4&gt;

&lt;p&gt;For our application, &lt;code&gt;dark-theme&lt;/code&gt; is an additional theme and can be loaded based on user preferences. So, instead of making it part of the default application, we will lazy load it.&lt;/p&gt;

&lt;p&gt;Let’s make changes for that in the project’s &lt;code&gt;angular.json&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;json&lt;br&gt;
"styles": [&lt;br&gt;
              "src/styles.scss",&lt;br&gt;
              {&lt;br&gt;
                "input": "src/styles/themes/dark.scss",&lt;br&gt;
                "bundleName": "dark-theme",&lt;br&gt;
                "inject": false&lt;br&gt;
              }&lt;br&gt;
            ],&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can learn more about lazy loading stylesheets at: &lt;a href="https://indepth.dev/tutorials/angular/lazy-load-stylesheets"&gt;How to exclude stylesheets from the bundle and lazy load them in Angular?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To load the &lt;code&gt;dark-theme&lt;/code&gt; based on user’s selection, we will simply implement a service called &lt;code&gt;style-manager.service.ts&lt;/code&gt; and whenever we want to change theme, we will simply call &lt;code&gt;toggleDarkTheme&lt;/code&gt; from this service:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
// style-manager.service.ts&lt;/p&gt;

&lt;p&gt;import { Injectable } from '@angular/core';&lt;/p&gt;

&lt;p&gt;@Injectable({ providedIn: 'root' })&lt;br&gt;
export class StyleManager {&lt;br&gt;
  isDark = false;&lt;/p&gt;

&lt;p&gt;toggleDarkTheme() {&lt;br&gt;
    if (this.isDark) {&lt;br&gt;
      this.removeStyle('dark-theme');&lt;br&gt;
      document.body.classList.remove('dark-theme');&lt;br&gt;
      this.isDark = false;&lt;br&gt;
    } else {&lt;br&gt;
      const href = 'dark-theme.css';&lt;br&gt;
      getLinkElementForKey('dark-theme').setAttribute('href', href);&lt;br&gt;
      document.body.classList.add('dark-theme');&lt;br&gt;
      this.isDark = true;&lt;br&gt;
    }&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;removeStyle(key: string) {&lt;br&gt;
    const existingLinkElement = getExistingLinkElementByKey(key);&lt;br&gt;
    if (existingLinkElement) {&lt;br&gt;
      document.head.removeChild(existingLinkElement);&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;function getLinkElementForKey(key: string) {&lt;br&gt;
  return getExistingLinkElementByKey(key) || createLinkElementWithKey(key);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;function getExistingLinkElementByKey(key: string) {&lt;br&gt;
  return document.head.querySelector(&lt;br&gt;
    &lt;code&gt;link[rel="stylesheet"].${getClassNameForKey(key)}&lt;/code&gt;&lt;br&gt;
  );&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;function createLinkElementWithKey(key: string) {&lt;br&gt;
  const linkEl = document.createElement('link');&lt;br&gt;
  linkEl.setAttribute('rel', 'stylesheet');&lt;br&gt;
  linkEl.classList.add(getClassNameForKey(key));&lt;br&gt;
  document.head.appendChild(linkEl);&lt;br&gt;
  return linkEl;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;function getClassNameForKey(key: string) {&lt;br&gt;
  return &lt;code&gt;style-manager-${key}&lt;/code&gt;;&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Above is a very opinionated approach, you can change it as per your need.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#output-after-creating-a-darktheme"&gt;
  &lt;/a&gt;
  Output after creating a dark-theme
&lt;/h4&gt;

&lt;p&gt;Now, let’s utilize the above service in &lt;code&gt;app.component.ts&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
// src/app/app.component.ts&lt;/p&gt;

&lt;p&gt;import { Component } from '@angular/core';&lt;br&gt;
import { StyleManager } from './shared/services/style-manager.service';&lt;/p&gt;

&lt;p&gt;@Component({&lt;br&gt;
  selector: 'app-root',&lt;br&gt;
  templateUrl: './app.component.html',&lt;br&gt;
  styleUrls: ['./app.component.scss'],&lt;br&gt;
})&lt;br&gt;
export class AppComponent {&lt;br&gt;
  title = 'my-app';&lt;br&gt;
  isDark = this.styleManager.isDark;&lt;/p&gt;

&lt;p&gt;constructor(private styleManager: StyleManager) {}&lt;/p&gt;

&lt;p&gt;toggleDarkTheme() {&lt;br&gt;
    this.styleManager.toggleDarkTheme();&lt;br&gt;
    this.isDark = !this.isDark;&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, we will add a button to toggle dark and light themes in &lt;code&gt;app.component.html&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;




  &lt;h1&gt;Angular Material Theming System: Complete Guide&lt;/h1&gt;
  
    {{ isDark ? "dark_mode" : "light_mode" }}
  
  
    Raised
    Accent
    Warn
  


&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at the output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EDqzubHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/IWf1AUt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EDqzubHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/IWf1AUt.gif" alt="output after adding dark theme" title="output after adding dark theme" width="600" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that when we change theme, it changes colors and background colors of buttons and text. And also notice that &lt;code&gt;dark-theme.css&lt;/code&gt; is only included when the user switches to the dark theme.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#apply-angular-materials-theme-to-custom-component"&gt;
  &lt;/a&gt;
  Apply Angular Material’s theme to custom component
&lt;/h3&gt;

&lt;p&gt;Let’s assume that there is an &lt;code&gt;alert&lt;/code&gt; component with the template below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;





&lt;p&gt;Success&lt;br&gt;
Success Stroked&lt;br&gt;
Success Flat&lt;br&gt;
Success Raised&lt;br&gt;
&lt;br&gt;
  check_circle&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
  check_circle&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
  check_circle&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Info&lt;br&gt;
Info Stroked&lt;br&gt;
Info Flat&lt;br&gt;
Info Raised&lt;br&gt;
&lt;br&gt;
  info&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
  info&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
  info&lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3W4EvCla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/wyLKtuW.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3W4EvCla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/wyLKtuW.gif" alt="output after adding variants for MatButton" title="output after adding variants for MatButton" width="600" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-old-project-to-latest-version-of-angular-material"&gt;
  &lt;/a&gt;
  Updating old project to latest version of Angular Material
&lt;/h2&gt;

&lt;p&gt;If your current project uses Angular Material older than version 12 and wants to update to version 13, then follow this section, else you can jump to the &lt;a href="#summary"&gt;summary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this example, we are going to take code from my series of “&lt;a href="https://indepth.dev/posts/1320/custom-theme-for-angular-material-components-series-part-1-create-a-theme"&gt;Custom Theme for Angular Material Components Series&lt;/a&gt;”. The code is available at &lt;a href="https://github.com/shhdharmen/indepth-theming-material-components"&gt;indepth-theming-material-components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;ng version&lt;/code&gt; inside the project's folder, you will notice that version &lt;code&gt;10.1&lt;/code&gt; is used. And we want to upgrade it to version &lt;code&gt;13&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-update-guide"&gt;
  &lt;/a&gt;
  Angular Update Guide
&lt;/h3&gt;

&lt;p&gt;We are going to follow guidelines from the &lt;a href="https://update.angular.io/"&gt;Angular Update Guide&lt;/a&gt;. Angular CLI does not support migrating across multiple major versions at once. So we will migrate each major version individually.&lt;/p&gt;

&lt;p&gt;Open up the terminal in the project's folder and run the commands below. After each command you will have to commit your changes, otherwise Angular CLI will not allow you to proceed further.&lt;/p&gt;

&lt;p&gt;While running any of the commands below, if you face any error like &lt;code&gt;Could not resolve dependency&lt;/code&gt; or &lt;code&gt;Conflicting peer dependency&lt;/code&gt;, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Revert the changes of &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install dependencies again with &lt;code&gt;npm i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the update command with &lt;code&gt;--force&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#version-10-to-11"&gt;
  &lt;/a&gt;
  Version 10 to 11
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#update-angular-to-version-11"&gt;
  &lt;/a&gt;
  Update Angular to version 11
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
npx @angular/cli@11 update @angular/core@11 @angular/cli@11&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#update-angular-material-to-version-11"&gt;
  &lt;/a&gt;
  Update Angular Material to version 11
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
npx @angular/cli@11 update @angular/material@11&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With this, we have updated the project to version 11. Check once by running &lt;code&gt;npm start&lt;/code&gt;. Now, we will upgrade the project to version 12.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#version-11-to-12"&gt;
  &lt;/a&gt;
  Version 11 to 12
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#update-angular-to-version-12"&gt;
  &lt;/a&gt;
  Update Angular to version 12
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
npx @angular/cli@12 update @angular/core@12 @angular/cli@12&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#update-angular-material-to-version-12"&gt;
  &lt;/a&gt;
  Update Angular Material to version 12
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
npx @angular/cli@12 update @angular/material@12&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#changes-of-version-12"&gt;
  &lt;/a&gt;
  Changes of version 12
&lt;/h5&gt;

&lt;p&gt;With the above command, you will see many changes, let’s understand what’s changed.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#migration-from-endraw-import-raw-to-endraw-use-raw-"&gt;
  &lt;/a&gt;
  Migration from &lt;code&gt;@import&lt;/code&gt; to &lt;code&gt;@use&lt;/code&gt;
&lt;/h6&gt;

&lt;p&gt;The first major change you will notice is migration from &lt;code&gt;@import&lt;/code&gt; to &lt;code&gt;@use&lt;/code&gt;. So in all &lt;code&gt;.scss&lt;/code&gt; files, below &lt;code&gt;@import&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;scss&lt;br&gt;
@import "~@angular/material/theming";&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;is changed to below &lt;code&gt;@use&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;scss&lt;br&gt;
@use "~@angular/material" as mat;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@use&lt;/code&gt; rule loads mixins, functions, and variables from other SASS stylesheets, and combines CSS from multiple stylesheets together. Stylesheets loaded by &lt;code&gt;@use&lt;/code&gt; are called "modules".&lt;/p&gt;

&lt;p&gt;The SASS team discourages the continued use of the &lt;code&gt;@import&lt;/code&gt; rule. SASS will &lt;a href="https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline"&gt;gradually phase it out&lt;/a&gt; over the next few years, and eventually remove it from the language entirely&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#api-refactors"&gt;
  &lt;/a&gt;
  API refactors
&lt;/h6&gt;

&lt;p&gt;To adhere to the above-mentioned module system, many APIs are also reworked. And they have been refactored for better developer experience. For example, &lt;code&gt;mat-get-color-config&lt;/code&gt; is changed to &lt;code&gt;mat.get-color-config&lt;/code&gt;. &lt;code&gt;mat-color&lt;/code&gt; is changed to &lt;code&gt;mat.get-color-from-palette&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#fix-errors-after-update"&gt;
  &lt;/a&gt;
  Fix errors after update
&lt;/h5&gt;

&lt;p&gt;Now if you try to run the project, it will throw errors. Let’s resolve those errors one by one.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#value-isnt-a-valid-css-value"&gt;
  &lt;/a&gt;
  Value isn’t a valid CSS value
&lt;/h6&gt;

&lt;p&gt;The first error you will see is at line 7 of &lt;code&gt;sidenav.component.scss-theme.scss&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
7 │   $config: mat-get-color-config($config-or-theme);&lt;br&gt;
  │                                 ^^^^^^^^^^^^^^^^&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To fix that, we will change &lt;code&gt;mat-get-color-config&lt;/code&gt; to &lt;code&gt;mat.get-color-config&lt;/code&gt;. And make the same change in &lt;code&gt;dialog.component.scss-theme.scss&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;scss&lt;br&gt;
$config: mat.get-color-config($config-or-theme);&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#undefined-mixin"&gt;
  &lt;/a&gt;
  Undefined mixin
&lt;/h6&gt;

&lt;p&gt;The next error you will see is at line 28:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
28 │         @include _mat-toolbar-color($val);&lt;br&gt;
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Above error is coming because within Angular Material version 12, components’ color mixins are refactored. And we can’t simply use the mixin any more. So, instead of using &lt;code&gt;MatToolbar&lt;/code&gt;’s color mixin, we will use it’s SASS code. So change above line with below 2 lines in both, &lt;code&gt;sidenav.component.scss-theme.scss&lt;/code&gt; and &lt;code&gt;dialog.component.scss-theme.scss&lt;/code&gt; files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;scss&lt;br&gt;
background-color: mat.get-color-from-palette($val);&lt;br&gt;
color: mat.get-color-from-palette($val, default-contrast);&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now your project should run fine.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#adhere-to-latest-sass-changes"&gt;
  &lt;/a&gt;
  Adhere to latest SASS changes
&lt;/h5&gt;

&lt;p&gt;As per the latest SASS changes, &lt;a href="https://sass-lang.com/documentation/modules/map"&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; module functions should be used in the new module system. For that, first we will use the &lt;code&gt;SASS:map&lt;/code&gt; module using the &lt;code&gt;@use&lt;/code&gt; rule:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;scss&lt;br&gt;
@use "sass:map";&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then, simply change all &lt;code&gt;map-get&lt;/code&gt; to &lt;code&gt;map.get&lt;/code&gt; in both, &lt;code&gt;sidenav.component.scss-theme.scss&lt;/code&gt; and &lt;code&gt;dialog.component.scss-theme.scss&lt;/code&gt; files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;scss&lt;br&gt;
$primary: map.get($config, primary);&lt;br&gt;
$accent: map.get($config, accent);&lt;br&gt;
$warn: map.get($config, warn);&lt;br&gt;
$foreground: map.get($config, foreground);&lt;br&gt;
$background: map.get($config, background);&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#version-12-to-13"&gt;
  &lt;/a&gt;
  Version 12 to 13
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#update-angular-to-version-13"&gt;
  &lt;/a&gt;
  Update Angular to version 13
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
npx @angular/cli@13 update @angular/core@13 @angular/cli@13&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#update-angular-material-to-version-12"&gt;
  &lt;/a&gt;
  Update Angular Material to version 12
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
npx @angular/cli@13 update @angular/material@13&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#removal-of-tilde"&gt;
  &lt;/a&gt;
  Removal of tilde
&lt;/h6&gt;

&lt;p&gt;After the above command, except dependencies, one major change you will notice in all &lt;code&gt;.scss&lt;/code&gt; files is the removal of &lt;code&gt;~&lt;/code&gt; (tilde) from &lt;code&gt;@use "~@angular/material" as mat;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The reason behind that is &lt;a href="https://webpack.js.org/loaders/sass-loader"&gt;SASS-loader&lt;/a&gt; has deprecated the usage of &lt;code&gt;~&lt;/code&gt; and it’s recommended that it’s removed from code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why remove it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The loader will first try to resolve &lt;code&gt;@use&lt;/code&gt; as a relative path. If it cannot be resolved, then the loader will try to resolve &lt;code&gt;@use&lt;/code&gt; inside &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we first learned about what Angular Material Theming is and it is based on &lt;a href="https://material.io/design/material-theming/overview.html"&gt;Google's Material Design&lt;/a&gt; specification. And then we understood that with Angular Material version 12, &lt;code&gt;@import&lt;/code&gt; rule migrated to &lt;code&gt;@use&lt;/code&gt; and SASS APIs were refactored for better developer experience.&lt;/p&gt;

&lt;p&gt;We started with a blank project and added Angular Material. Next, we understood the &lt;code&gt;core&lt;/code&gt; mixin, &lt;code&gt;define-palette&lt;/code&gt; function, palettes and &lt;code&gt;define-light-theme&lt;/code&gt; function and we created a custom theme. And then we applied our custom theme to first all components using &lt;code&gt;all-components-theme&lt;/code&gt; and at last we optimized it to use only &lt;code&gt;core-theme&lt;/code&gt; and &lt;code&gt;button-theme&lt;/code&gt; and reduced final styles size.&lt;/p&gt;

&lt;p&gt;We also learned how to use a pre-built theme by adding the theme's stylesheet path in the &lt;code&gt;styles&lt;/code&gt; array of &lt;code&gt;angular.json&lt;/code&gt;. For example, we can add &lt;code&gt;./node_modules/@angular/material/prebuilt-themes/indigo-pink.css&lt;/code&gt; to use the &lt;code&gt;indigo-pink&lt;/code&gt; theme in our application.&lt;/p&gt;

&lt;p&gt;Then we started with typography. We first understood typography levels and how to create one using &lt;code&gt;define-typography-level&lt;/code&gt;. Next, we learned that Angular Material handles all those levels using typography config, and Angular Material represents this configuration as a SASS map. We created a custom config using &lt;code&gt;define-typography-config&lt;/code&gt; and applied it to &lt;code&gt;core&lt;/code&gt; mixin so that custom typography is applied to the whole application.&lt;/p&gt;

&lt;p&gt;Next we created a dark theme in a separate file &lt;code&gt;themes/dark-theme.scss&lt;/code&gt;. Then we used only color mixins, i.e. &lt;code&gt;core-color&lt;/code&gt; and &lt;code&gt;button-color&lt;/code&gt;, and not theme mixing to avoid duplicate style generation. And at last, we made changes in &lt;code&gt;angular.json&lt;/code&gt; so that dark theme is loaded on demand only when needed.&lt;/p&gt;

&lt;p&gt;Then we followed a step-by-step process to add support for Angular Material’s Theming system to custom components.&lt;/p&gt;

&lt;p&gt;And at last, we learned about how to customise Angular Material’s button component, i.e. &lt;a href="https://material.angular.io/components/button/overview"&gt;&lt;code&gt;MatButton&lt;/code&gt;&lt;/a&gt;. In this, we mainly followed the approach from its source code and we added two new variants to it: &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The project which we created in this article is available on GitHub repo at &lt;a href="https://github.com/shhdharmen/angular-material-theming-system-complete-guide"&gt;angular-material-theming-system-complete-guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the new system, we also looked at how to update older Angular Material versions to the latest one by taking examples from one of the old projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;While writing this article I took references from &lt;a href="https://material.angular.io/guides"&gt;Angular Material Guides&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>material</category>
      <category>theme</category>
      <category>scss</category>
    </item>
    <item>
      <title>Scala For Beginners - Crash Course - Part 3</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 05:56:43 +0000</pubDate>
      <link>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-3-hep</link>
      <guid>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-3-hep</guid>
      <description>&lt;p&gt;Welcome to the 3&lt;sup&gt;rd&lt;/sup&gt; part of the scala beginners crash course, here we will go through the functional way of scala programming language and concepts like higher-order functions, curries and anonymous functions!&lt;/p&gt;

&lt;p&gt;It will be a no-nonsense, to the point kind of article (like &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt; and &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-2-39bj"&gt;part 2&lt;/a&gt;) with all necessary links wherever needed.&lt;/p&gt;

&lt;p&gt;Without further ado, let's get started.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-functional-programming"&gt;
  &lt;/a&gt;
  What Is Functional Programming?
&lt;/h3&gt;

&lt;p&gt;The below is an excerpt from the &lt;strong&gt;Functional Programming in Scala&lt;/strong&gt; book.&lt;/p&gt;

&lt;p&gt;Functional programming (FP) is based on a simple premise with far-reaching implications: we construct our programs using only pure functions, in other words, functions that have no side effects. What are the side effects? A function has a side effect if it does something other than simply return a result, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modifying a variable.&lt;/li&gt;
&lt;li&gt;Modifying a data structure in place.&lt;/li&gt;
&lt;li&gt;Setting a field on an object.&lt;/li&gt;
&lt;li&gt;Throwing an exception or halting with an error.&lt;/li&gt;
&lt;li&gt;Printing to the console or reading user input.&lt;/li&gt;
&lt;li&gt;Reading from or writing to a file.&lt;/li&gt;
&lt;li&gt;Drawing on the screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We discussed side-effects also in &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Functional programming is a restriction on how we write programs, but not on what programs we can express.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#before-we-start"&gt;
  &lt;/a&gt;
  Before We Start
&lt;/h3&gt;

&lt;p&gt;Before we start coding out, first create a new object in the &lt;code&gt;crashcourse&lt;/code&gt; package (please go through &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt; for more information on creating packages and objects).&lt;/p&gt;

&lt;p&gt;Let's name it &lt;code&gt;FunctionalProgramming&lt;/code&gt; like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YT9j4KMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575945646/OC1gaLVh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YT9j4KMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575945646/OC1gaLVh2.png" alt="functionalprog.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can start coding out examples on this scala application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-functions-in-scala"&gt;
  &lt;/a&gt;
  Creating Functions In Scala
&lt;/h3&gt;

&lt;p&gt;Before moving on to create functions in scala, please keep in mind that scala works on JVM and for JVM it needs classes/objects to work with, hence everything in scala will be an object, even the functions are objects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Due to scala's syntactic sugar, we can still write functions in a more functional fashion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's create a function in scala:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---wI2rhPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575959941/pcZ5h_BWX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wI2rhPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575959941/pcZ5h_BWX.png" alt="function1.png" width="880" height="119"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scala has a collection of functions namely &lt;code&gt;Function1&lt;/code&gt; to &lt;code&gt;Function22&lt;/code&gt;, which can be used out-of-the-box without any issues.&lt;/p&gt;

&lt;p&gt;A function like &lt;code&gt;Function1[String, Int]&lt;/code&gt; represents that it will take &lt;code&gt;String&lt;/code&gt; as an input and evaluates to &lt;code&gt;Int&lt;/code&gt; as an output. This function definition will be written in its &lt;code&gt;apply&lt;/code&gt; method, as &lt;code&gt;Function1&lt;/code&gt; is an object and we need to override its &lt;code&gt;apply&lt;/code&gt; method to make it callable.&lt;/p&gt;

&lt;p&gt;A simple syntactic sugar for a function like &lt;code&gt;Function2[Int, Int, Int]&lt;/code&gt; would be &lt;code&gt;(Int, Int) =&amp;gt; Int&lt;/code&gt;, which is more functional while reading the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhP3bptZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575972248/l-jeLp22Hj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhP3bptZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575972248/l-jeLp22Hj.png" alt="function2.png" width="880" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should also note that while working in IntelliJ, it tells us that the given &lt;code&gt;Function1[String, Int]&lt;/code&gt; can be converted to its respective syntactic sugar, we can do so by hovering over the yellow line and simply clicking &lt;code&gt;Replace FunctionN[A1, A1, ..., AN, R] with (A1, A1, ..., AN) =&amp;gt; R&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahBmmT2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575985895/CLRREEfBc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahBmmT2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575985895/CLRREEfBc.png" alt="function1yellow.png" width="880" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Converted to syntactic sugar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E25z0X-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575997793/1s4T2rLe-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E25z0X-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630575997793/1s4T2rLe-.png" alt="function1syntax.png" width="880" height="119"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Important points to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All scala functions are objects, that is, instances of &lt;code&gt;Function1&lt;/code&gt;, &lt;code&gt;Function2&lt;/code&gt; and so on.&lt;/li&gt;
&lt;li&gt;JVM was designed for object-oriented programming, but using it for scala function we need something like objects (like &lt;code&gt;Function1&lt;/code&gt;) to instantiate them.&lt;/li&gt;
&lt;li&gt;Functions are traits with maximum parameters to be 22.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-functions"&gt;
  &lt;/a&gt;
  Anonymous Functions
&lt;/h3&gt;

&lt;p&gt;The anonymous function is something we saw in the previous example of &lt;code&gt;Function2[Int, Int, Int]&lt;/code&gt; syntactic sugar.&lt;/p&gt;

&lt;p&gt;So, the below expression:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzZOo7R_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576036088/edN80uOpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzZOo7R_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576036088/edN80uOpx.png" alt="anonfunc.png" width="880" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;can be written as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTgTJEZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576046885/Pqc562saY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTgTJEZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576046885/Pqc562saY.png" alt="anonfunc2.png" width="880" height="79"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W91_Iaqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576059186/SLHmwCK82r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W91_Iaqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576059186/SLHmwCK82r.png" alt="anonfunc3.png" width="880" height="79"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anonymous functions are just another way of writing functions as supported by scala's compiler, behind the scenes everything is the same.&lt;/p&gt;

&lt;p&gt;More ways in which we can write anonymous functions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8NgIz7iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576079593/k_WNsN_7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NgIz7iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576079593/k_WNsN_7p.png" alt="anonfunc4.png" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: An anonymous function is also known as a function literal. A function that does not contain a name is known as an anonymous function in general.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#higherorder-functions-and-curries"&gt;
  &lt;/a&gt;
  Higher-Order Functions and Curries
&lt;/h3&gt;

&lt;p&gt;Higher-order functions have at least one of the following properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Takes one or more functions as parameters.&lt;/li&gt;
&lt;li&gt;Returns a function as a result.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In scala, a general higher-order function declaration can look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbZo7Osd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576093034/_ocWhLD0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbZo7Osd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576093034/_ocWhLD0h.png" alt="hof.png" width="880" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are called Higher-Order Functions, which essentially takes one or more functions as input and/or returns a function as output.&lt;/p&gt;

&lt;p&gt;Moving on to curries, currying means transforming a function that takes multiple arguments into a chain of calls to functions, each of which takes one argument. Each function returns another function that takes the subsequent argument.&lt;/p&gt;

&lt;p&gt;A simple curry can be like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wl87YzYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576108908/ZoNJdX16A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wl87YzYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576108908/ZoNJdX16A.png" alt="curry.png" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Functions with multiple parameter list also act as curries:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-rRQeQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576119542/o5ECg8pcP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-rRQeQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630576119542/o5ECg8pcP.png" alt="curry2.png" width="880" height="111"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;Well, that wraps up part 3 of this crash course.&lt;/p&gt;

&lt;p&gt;I highly recommend you to go through the books below to get a better and deeper understanding of functional programming:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.in/Functional-Thinking-Paradigm-Over-Syntax-ebook/dp/B00LEX6SP8?crid=2I35UGEUXLTHJ&amp;amp;dchild=1&amp;amp;keywords=functional+thinking&amp;amp;qid=1630574749&amp;amp;sprefix=functional+think%2Caps%2C317&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=chandrajidev-21&amp;amp;linkId=576c0c2c9e91856ea455b7baa167cbe1&amp;amp;language=en_IN&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-in.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00LEX6SP8&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=IN&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=chandrajidev-21&amp;amp;language=en_IN"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzPEWBP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-in.amazon-adsystem.com/e/ir%3Ft%3Dchandrajidev-21%26language%3Den_IN%26l%3Dli2%26o%3D31%26a%3DB00LEX6SP8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzPEWBP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-in.amazon-adsystem.com/e/ir%3Ft%3Dchandrajidev-21%26language%3Den_IN%26l%3Dli2%26o%3D31%26a%3DB00LEX6SP8" alt="" width="1" height="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.in/Grokking-Simplicity-software-functional-thinking-ebook/dp/B09781TWFL?dchild=1&amp;amp;keywords=functional+thinking&amp;amp;qid=1630574798&amp;amp;sr=8-2&amp;amp;linkCode=li2&amp;amp;tag=chandrajidev-21&amp;amp;linkId=54fce22f0619670582a2391a0daf4e0b&amp;amp;language=en_IN&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-in.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B09781TWFL&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=IN&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=chandrajidev-21&amp;amp;language=en_IN"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqvReJ6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-in.amazon-adsystem.com/e/ir%3Ft%3Dchandrajidev-21%26language%3Den_IN%26l%3Dli2%26o%3D31%26a%3DB09781TWFL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqvReJ6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-in.amazon-adsystem.com/e/ir%3Ft%3Dchandrajidev-21%26language%3Den_IN%26l%3Dli2%26o%3D31%26a%3DB09781TWFL" alt="" width="1" height="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.in/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653?crid=24RA56XW8MZX1&amp;amp;dchild=1&amp;amp;keywords=functional+programming+in+scala&amp;amp;qid=1630574828&amp;amp;sprefix=functional+prog%2Caps%2C322&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=chandrajidev-21&amp;amp;linkId=8928ebdaa8126f751f76a0612beeac4f&amp;amp;language=en_IN&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-in.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=1617290653&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=IN&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=chandrajidev-21&amp;amp;language=en_IN"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ey_Z0dfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-in.amazon-adsystem.com/e/ir%3Ft%3Dchandrajidev-21%26language%3Den_IN%26l%3Dli2%26o%3D31%26a%3D1617290653" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ey_Z0dfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-in.amazon-adsystem.com/e/ir%3Ft%3Dchandrajidev-21%26language%3Den_IN%26l%3Dli2%26o%3D31%26a%3D1617290653" alt="" width="1" height="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next part, we will discuss some topics specific to scala, like options, handling errors in a unique style and pattern matching (the most awesome thing in scala).&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>bigdata</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>8 Projects Beginners can build to learn React.js in 2022</title>
      <author>javinpaul</author>
      <pubDate>Wed, 29 Dec 2021 05:56:07 +0000</pubDate>
      <link>https://dev.to/javinpaul/8-projects-beginners-can-build-to-learn-reactjs-in-2022-1e3i</link>
      <guid>https://dev.to/javinpaul/8-projects-beginners-can-build-to-learn-reactjs-in-2022-1e3i</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/a-deep-dive-into-react-hooks?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKzZ5feM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/editorpage/5024256839647232/image/4718983717584896" alt="Node.js vs React.js: which to choose for your web app project" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you are self-learning React.js in 2022 and looking for React.js project ideas to learn React better and further improve your React skills then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared the best &lt;a href="https://javarevisited.blogspot.com/2020/10/top-5-websites-to-learn-react-for-free.html"&gt;&lt;strong&gt;react.js websites&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;&lt;strong&gt;courses&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/10/the-2018-react-developer-roadmap.html"&gt;&lt;strong&gt;roadmap&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://www.java67.com/2020/03/top-5-books-to-learn-reactjs-for-beginners.html"&gt;&lt;strong&gt;books&lt;/strong&gt; &lt;/a&gt; to learn Reactjs, and today, I am going to share the best React.js projects you can build to learn both React.js and React Native and if you already know React then you can also improve your React skills. &lt;/p&gt;

&lt;p&gt;These projects are mainly for beginners who are learning React.js but even intermediate developers can use these project ideas to create some fun projects.  &lt;/p&gt;

&lt;p&gt;Learning web development and new technologies is not easy and ReactJS is one of them. Just completing an online course about react doesn't make you a professional web developer until you test your knowledge by creating multiple projects so you take advantage of its features for learning purposes.&lt;/p&gt;

&lt;p&gt;If you are learning React.js, one of the most &lt;a href="https://www.java67.com/2019/01/top-10-javascript-frameworks-and-libraries-for-web-developers.html"&gt;popular JavaScript libraries&lt;/a&gt; for frontend development and you want to enhance your skills you should start building a project right now. &lt;/p&gt;

&lt;p&gt;One of the key advantages of building projects rather than doing exercises is that you get exposure to many related technologies which is key to build a real-life application.&lt;/p&gt;

&lt;p&gt;You also get to build something which people want to use and something which you can add to your resume or your GitHub portfolio and something which can proudly share with your friends, family, and prospective employers. Doing projects has many benefits.&lt;/p&gt;

&lt;p&gt;In this article, you will see many projects that you can do to learn more and master this react library, and build a good portfolio that can attract employees to hire you or showcase to your peers and maybe start your own business as a freelancer.&lt;/p&gt;

&lt;p&gt;By the way, if you are a complete beginner in React.js then I would suggest you first go through a comprehensive React course like &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-the-complete-guide-incl-redux%2F"&gt;React - The Complete Guide (incl Hooks, React Router, Redux)&lt;/a&gt;&lt;/strong&gt;  to learn React.js in a structured way instead of jumping into projects. Once you know React Fundamentals and different React concepts you can start with these projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-the-complete-guide-incl-redux%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uiEYWx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.filepicker.io/api/file/7BVwsHlgQzC4Fq1fLVq8" alt="React - The Complete Guide (incl Hooks, React Router, Redux) | Academi" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-best-reactjs-projects-for-beginners"&gt;
  &lt;/a&gt;
  8 Best React.js Projects for Beginners
&lt;/h2&gt;

&lt;p&gt;Without wasting any more of your time, here is a list of Reactjs project ideas for beginners. You can build these projects in any order but going from top to bottom is the recommended one as you will start with games, learn building logic, and then finally build a complete website using the React.js library.&lt;/p&gt;

&lt;p&gt;It's very common to get stuck while building projects so don't get disappointed or give up when you stuck. I have also mentioned resources and online courses where you can check how to build a particular project if you stuck.&lt;/p&gt;

&lt;p&gt;My online advice is don't copy-paste, instead if you stuck go through the resource and learn and then come back and do it yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-build-an-expense-tracker"&gt;
  &lt;/a&gt;
  1. Build an Expense Tracker
&lt;/h3&gt;

&lt;p&gt;This is an interesting app idea to learn REact.js where you will build a complete Expense Tracker using React Hooks &amp;amp; Context API. At bare minimum your app should allows user to add expenses, categories them and show some insights like how much expenses went towards food, education, entertainment, bills, and travel etc. &lt;/p&gt;

&lt;p&gt;If you need a resource, here is a Youtube video from Brad Traversy of TraversyMedia which will show you step by step how to build this project. &lt;/p&gt;

&lt;p&gt;In this project you  will take a vanilla JS expense tracker app and turn it into a React app using hooks (useState, useContext, useReducer) and the context API.&lt;/p&gt;

&lt;p&gt;And, if you like Brad's teaching style you can also consider joining his &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-front-to-back-2022%2F"&gt;React Front to Back 2022&lt;/a&gt; courses where he has shown another three interesting projects, a feedback app, a Github finder, and a House marketplace beginners can build to learn React.js. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-front-to-back-2022%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Equ1jvHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/XuFDcZABiDQ/maxresdefault.jpg" alt="React project for beginners Build an Expense Tracker | React Hooks &amp;amp;amp; Context API - YouTube" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way you should try to build the project yourself before jumping into this resource that's a better way to learn, only see the course after you built the project or when you get stuck. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-build-movie-search-engine"&gt;
  &lt;/a&gt;
  2. Build Movie Search Engine
&lt;/h3&gt;

&lt;p&gt;This is another awesome project idea for building a complete web application using React.js. You can build a Netflix style movie clone using ReactJS. &lt;/p&gt;

&lt;p&gt;At bare minimum this project will show the top 10 movies for the week and also allows you to search movie from backend database. &lt;/p&gt;

&lt;p&gt;If you need a resource, this &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-movie-search-engine%2F"&gt;Build Movie Search Engine Using ReactJS&lt;/a&gt; Udemy course will teach you how to build a movie search engine using React.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-movie-search-engine%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INXm52ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-media-1.freecodecamp.org/images/kbYsxsxb2D7mBhdlEmUrpMhRmOcQoR79vtT1" alt="How to build a movie search app using React Hooks" width="800" height="473"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-instagram-clone-using-reactjs"&gt;
  &lt;/a&gt;
  3. Instagram clone using React.js
&lt;/h3&gt;

&lt;p&gt;A lot of us use social media and we are very familiar with web apps like Twitter, TikTok, Instagram and Facebook and one way you can leverage that knowledge and passion is to build their clone using React.js in 2022 to learn React better. &lt;/p&gt;

&lt;p&gt;In particular, you can build Instagram clone in React which allows user to upload photos and video's, follow other user, allow them to tag photo and video and then show them in newsfeed. You can add as many feature you want but at bare minimum you should have these features. &lt;/p&gt;

&lt;p&gt;If you need a course to guide you then &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcss-grid-with-react%2F"&gt;React Instagram Clone - CSS Grid Mastery&lt;/a&gt; course on Udemy is a great resource. This course will teach you how to build an Image Gallery app like Instagram with React, React Router and styled-components, mastering CSS Grid with over 100 examples! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcss-grid-with-react%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fL6L1Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ohl7culypmfnexyc8aj.png" alt="how to create Instagram clone using React.js " width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you need another resource, freeCodecamp also have a free course on Youtube to show you how to build an Instagram app, you can watch it here&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mDgEqoQUBgk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-building-tic-tac-toe-in-react"&gt;
  &lt;/a&gt;
  4. Building Tic Tac Toe in React
&lt;/h3&gt;

&lt;p&gt;In this project, you will build a Tic Tac Toe game with three rows and columns as usually with two players start making X and O and the first who complete a line vertically or horizontally wins and they need to prevent each other from doing that otherwise one of them will win the game.&lt;/p&gt;

&lt;p&gt;This project actually exists as a Free course on udemy called &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-clarified-building-a-game-in-react%2F"&gt;&lt;strong&gt;Building a Game in React&lt;/strong&gt;&lt;/a&gt; showing you step by step how to implement this using react and with some basic HTML/CSS JavaScript code, so if you found it a little bit hard so and check that course for more info.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-clarified-building-a-game-in-react%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wwayj4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-3Uq_AgFTzdI/YHKBRu7jbPI/AAAAAAAAnD8/vHnHaqmIH_o7JEnZZk5wpbuFtsJ4Cv39ACLcBGAsYHQ/w412-h232/Tic%252BTac%252BToe%252Bin%252BReact%252B-%252BFree%252BUdemy%252BCourse%252Band%252BProjects.png" alt="how to build Tic Tac Toe in React - Free Projects" width="412" height="232"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-build-react-js-based-web-application"&gt;
  &lt;/a&gt;
  5. Build React JS based Web Application
&lt;/h3&gt;

&lt;p&gt;You will have to create a react js single web application with a front that seems like a blog website and should be also mobile-friendly and adding some features like a mobile menu and the main thing here is the ability to navigate through pages without refreshing the browser.&lt;/p&gt;

&lt;p&gt;This Free course on udemy is based project known as &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fbuild-your-first-react-js-application%2F"&gt;&lt;strong&gt;Build your first React JS Application&lt;/strong&gt;&lt;/a&gt; where shows you how to create your own react js web application and is well mobile-friendly with features like the navigation menu and more so you can take it as a reference if you get stuck with that project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fbuild-your-first-react-js-application%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c0drpqLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-AUGzHyqK63I/YHKBysQEU6I/AAAAAAAAnEM/NWvIahXllnYgNUC5V3bYVGfUPYkdtJZ0wCLcBGAsYHQ/w373-h210/first%252BReact%252Bweb%252Bapplication%252Bfor%252Bbeginners%252B-%252Budemy%252Bfree%252Bcourse.png" alt="" width="373" height="210"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-build-a-crypto-currency-tracker-app-using-react-native"&gt;
  &lt;/a&gt;
  6. Build a Crypto Currency Tracker App using React Native
&lt;/h3&gt;

&lt;p&gt;In this project, you will create a cryptocurrency tracker app e that runs on your phone with some features like how much is the price of a particular cryptocurrency in real-time.&lt;/p&gt;

&lt;p&gt;The idea is great and you can actually put this app into App Store or Google PlayStore as React Native allows you to create cross-platform apps. You can use React.js, React Native, and Firebase to build the course, where Firebase can be used to build the backend.&lt;/p&gt;

&lt;p&gt;If you get stuck then you can &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fultimate-react-native-with-firebase%2F"&gt;watch this free Udemy course&lt;/a&gt;&lt;/strong&gt; to get some idea about how to build a Crypto Currency Tracker app using React and React Native.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fultimate-react-native-with-firebase%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2KTSxiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-kAd2mt86xe4/YHKdyWDvq2I/AAAAAAAAnEw/cn7DBJJDsbkLyajfWpndqPQfWFbK4DMUQCLcBGAsYHQ/w416-h250/image.png" alt="" width="416" height="249"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-building-a-react-form"&gt;
  &lt;/a&gt;
  7. Building a React Form
&lt;/h3&gt;

&lt;p&gt;In this project, you have to create a simple sign up form utilizing react and should be containing fields like the username email password with some features like when the user enters different things in the email field it tells him an invalid email or the password doesn't match it will tell him that.&lt;/p&gt;

&lt;p&gt;The project is aimed to be for beginners who start learning the react library but if you found some troubles completing this project then feel free to refer to this course called &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-forms-crash-course%2F"&gt;React Forms&lt;/a&gt;&lt;/strong&gt; on udemy to get some help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-forms-crash-course%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DyqPwf9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-QBXh0wT9i48/X4vLGSumJ3I/AAAAAAAAj3I/ePcIpcOgmHkB2rHm7VGTwEZ0qx1Ro5mpwCLcBGAsYHQ/w400-h225/image.png" alt="best reactjs projects for beginners" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-build-a-website-using-reactjs-and-hooks"&gt;
  &lt;/a&gt;
  8. Build a Website using React.js and Hooks
&lt;/h3&gt;

&lt;p&gt;The last project is to create a simple website which the react library is aimed to do but you need to add some HTML/CSS JavaScript code into your web pages and adding some components with pictures and make it a little bit modern and have a nice interface.&lt;/p&gt;

&lt;p&gt;As usual, every project that I suggest does have an online course that already has the solution for your problem and this guided project on Coursera called &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fbuild-first-react-website"&gt;&lt;strong&gt;Build Your First React Website&lt;/strong&gt;&lt;/a&gt; has the solution for your project if you get stuck at some point while creating it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fbuild-first-react-website"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atbeMRdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/--092bRmYIho/YHKchJRvUuI/AAAAAAAAnEg/qWI_Hp6lHbs2CJm0r4NoSrU-w9Z4IbGJwCLcBGAsYHQ/w388-h204/image.png" alt="" width="388" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;best Reactjs projects for beginners&lt;/strong&gt;. The resources provided in this article will differently make you a react developer and will get you some experience that you can rely on it if you want to apply for a job or start your own business as a freelance developer.&lt;/p&gt;

&lt;p&gt;And, if you have fun creating projects and you want more for purposes like rich your portfolio with projects as an experience to get hired or anything checks out this course on Udemy &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-react-js-course%2F"&gt;&lt;strong&gt;Complete React JS web developer&lt;/strong&gt;&lt;/a&gt; that will help you building 10 real-world projects and some of them are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Blog application&lt;/li&gt;
&lt;li&gt; Course sales application&lt;/li&gt;
&lt;li&gt; Reddit API&lt;/li&gt;
&lt;li&gt; Timer application&lt;/li&gt;
&lt;li&gt; React application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This course is not free but it's completely worth your money. It's also very affordable and you can buy in just $10 on Udemy sales which happen every now and then.&lt;/p&gt;

&lt;p&gt;Other *&lt;em&gt;React.js and Web development articles *&lt;/em&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-online-courses-to-learn-web-development.html"&gt;Top 5 Courses to learn Web Development in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-pluralsight-courses-to-learn-React.js.html"&gt;Top 10 React Courses from Pluralsight&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-react-js-c14edbd3b35f"&gt;10 Free React.js courses to learn Hooks and Context API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/09/top-5-online-courses-to-learn-gatsby-in.html"&gt;Top 5 Gatsby Courses for React Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/04/10-free-angular-and-react-courses-for.html"&gt;10 Free Angular and React Courses for Developers &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/12-free-courses-to-learn-javascript-and-es6-for-beginners-and-experienced-developers-aa35874c9a32"&gt;12 Free JavaScript Courses for Web developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/02/the-2019-web-developer-roadmap.html"&gt;The 2022 Web Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/5-react-native-courses-to-learn-mobile-development-using-JavaScript.html"&gt;5 Courses to Learn React Native in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/better-programming/my-5-favorite-courses-to-learn-web-development-in-2019-a5e74167f8b2"&gt;My favorite course to learn Web Development&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-3-courses-to-learn-sveltejs-in-2020.html"&gt;3 Best Svelete.js Courses for Beginners in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2019/01/top-10-javascript-frameworks-and-libraries-for-web-developers.html"&gt;10 JavaScript Framework Fullstack Developer should know&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-angular-framework-in-2020-bb62148c73d3"&gt;10 Free Angular Courses for Beginners to learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-python-for-web-development-in-2020-best-of-lot-efe11fb6d212"&gt;Top 10 Courses to learn Python for Web Development&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-online-courses-to-learn-javascript-in-2020-af5ed0801645"&gt;10 best Courses to learn JavaScript in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-typescript-in-depth-58439e1ce729"&gt;7 Best Courses to learn TypeScript for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you like these &lt;em&gt;best Reacjts projects for beginners&lt;/em&gt; then please share them with your friends and colleagues. If you have any questions or feedback, please drop a note.&lt;/p&gt;

&lt;p&gt;All the best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you just want to do one thing at this moment to kickstart your React.js  journey, just go and join &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-redux%2F"&gt;The Modern React with Redux [2021 Update]&lt;/a&gt;&lt;/strong&gt; course by Stephen Grider on Udemy. You will learn React.js quickly and never regret your decision.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>coding</category>
    </item>
    <item>
      <title>Scala For Beginners - Crash Course - Part 2</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 05:52:25 +0000</pubDate>
      <link>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-2-39bj</link>
      <guid>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-2-39bj</guid>
      <description>&lt;p&gt;Welcome to the 2&lt;sup&gt;nd&lt;/sup&gt; part of scala beginners crash course, here we will go through the object-oriented way of scala programming language and concepts like anonymous class, case classes and traits!&lt;/p&gt;

&lt;p&gt;It will be a no-nonsense, to the point kind of article (like &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt;) with all necessary links wherever needed.&lt;/p&gt;

&lt;p&gt;Without further ado, let's get started.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#before-we-start"&gt;
  &lt;/a&gt;
  Before We Start
&lt;/h3&gt;

&lt;p&gt;Before we start coding out, first create a new object in &lt;code&gt;crashcourse&lt;/code&gt; package (please go through &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj"&gt;part 1&lt;/a&gt; for more information on creating packages and objects).&lt;/p&gt;

&lt;p&gt;Let's name it &lt;code&gt;ClassAndObject&lt;/code&gt; like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpt-67kA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428192859/oxQvO6f-0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpt-67kA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428192859/oxQvO6f-0.png" alt="classandobject.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can start coding out examples on this scala application.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#classes-and-objects"&gt;
  &lt;/a&gt;
  Classes And Objects
&lt;/h3&gt;

&lt;p&gt;In scala, to define a class we use the &lt;code&gt;class&lt;/code&gt; keyword:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--io2sP9Pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428208513/-YBKewovA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--io2sP9Pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428208513/-YBKewovA.png" alt="classkeyword.png" width="880" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can directly use the &lt;code&gt;Student&lt;/code&gt; class later in the program. That's it! that's how we can create a class in scala.&lt;/p&gt;

&lt;p&gt;It is different from writing &lt;code&gt;object Student&lt;/code&gt; as it is not instantiated right away, we have just defined it and are not using it anywhere. To instantiate a class we can use the &lt;code&gt;new&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Iqij2ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428230819/rKcOjejYv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Iqij2ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428230819/rKcOjejYv.png" alt="newkeyword.png" width="880" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A class can have parameters, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-nM-sG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428242656/aO-thvn6J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-nM-sG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428242656/aO-thvn6J.png" alt="classargs.png" width="880" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Class parameters are not class fields, which means we can not use these parameters with instantiated objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make class parameters as class fields, we have to use the &lt;code&gt;val&lt;/code&gt; keyword along with the name of the parameter, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-e11mJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428319579/tsxrdzViI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-e11mJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428319579/tsxrdzViI.png" alt="valclassargs.png" width="880" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use class parameters within the class code block by using the &lt;code&gt;this&lt;/code&gt; keyword if value name conflict occurs, like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AeL0tDiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428339539/wdMAz_16a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AeL0tDiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428339539/wdMAz_16a.png" alt="usingthis.png" width="880" height="192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If value name conflict does not occur, then the class method by default (implicitly) uses the &lt;code&gt;this&lt;/code&gt; operator on class parameters values.&lt;/p&gt;

&lt;p&gt;Some other important concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Overloading occurs with only different signature methods. More on overloading in scala &lt;a href="https://www.geeksforgeeks.org/method-overloading-in-scala/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Auxiliary constructor are generally used for default parameters. More on auxiliary constructor &lt;a href="https://www.geeksforgeeks.org/scala-auxiliary-constructor/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instances are fixed, whenever we want to do something with the given class, say creating/updating something, then we would need to instantiate a new class, it is the clause of immutability, useful in functional programming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conceptually, scala does not provide class level functionality, like a static class. However, scala provides something called an &lt;code&gt;object&lt;/code&gt;, using which we can obtain class level functionalities.&lt;/p&gt;

&lt;p&gt;Scala objects are singleton instances by definition. We can create an object like the below code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5NqvgMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428399034/tswQeZPm90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5NqvgMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428399034/tswQeZPm90.png" alt="object.png" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can create an object with the same name as that of a class in the same scope, creating such an object/class is called companion object/class, known as companions.&lt;/p&gt;

&lt;p&gt;Companions can be used to make a factory method in objects, that can help instantiate a class in a certain way. Using companions does not require using the &lt;code&gt;new&lt;/code&gt; keyword to instantiate a scala class, we can define a method named &lt;code&gt;apply&lt;/code&gt; within the object to handle instantiation.&lt;/p&gt;

&lt;p&gt;We can create a companion like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idA7gt4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428637173/s90e0_FRe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idA7gt4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428637173/s90e0_FRe.png" alt="companion.png" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, that's about it on classes and objects in scala. You can check out official docs on scala classes &lt;a href="https://docs.scala-lang.org/tour/classes.html"&gt;here&lt;/a&gt; and on objects &lt;a href="https://docs.scala-lang.org/tour/singleton-objects.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-and-case-classes"&gt;
  &lt;/a&gt;
  Anonymous And Case Classes
&lt;/h3&gt;

&lt;p&gt;To create an anonymous class we can directly define the class like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCYNIDnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428653602/AuZMDeqQt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCYNIDnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428653602/AuZMDeqQt.png" alt="anonclass.png" width="880" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Things to remember when creating an anonymous class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass proper parameters whenever required.&lt;/li&gt;
&lt;li&gt;Anonymous class declaration works for abstract as well as for non-abstract classes. It works for traits as well.
&amp;gt; Note: We will discuss abstract classes and traits in the next section.&lt;/li&gt;
&lt;li&gt;Useful for on-spot declaration in some scenarios.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the &lt;code&gt;case&lt;/code&gt; keyword in front of the &lt;code&gt;class&lt;/code&gt; keyword will make it a case class, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gJ4VubN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428673599/WBzmt4Qjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gJ4VubN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428673599/WBzmt4Qjo.png" alt="caseclass.png" width="880" height="52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case classes promote class parameters to fields, it has a predefined &lt;code&gt;toString&lt;/code&gt; method that evaluates to a representation that is understandable.&lt;/p&gt;

&lt;p&gt;Equality and hashcodes are implemented out-of-the-box with a handy &lt;code&gt;copy&lt;/code&gt; method to copy instances. Case classes come with their companion objects predefined.&lt;/p&gt;

&lt;p&gt;Things to remember when creating a case class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Case class is a quick lightweight data structure with little boilerplate.&lt;/li&gt;
&lt;li&gt;Case classes are serializable and used with the Akka framework.&lt;/li&gt;
&lt;li&gt;Case classes have extractor patterns that can be used in pattern matching.&lt;/li&gt;
&lt;li&gt;Case objects are the same as case classes but don't get companion objects as they themselves are objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, that's about it on anonymous class and case class in scala.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inheritance-abstract-class-and-traits"&gt;
  &lt;/a&gt;
  Inheritance, Abstract Class And Traits
&lt;/h3&gt;

&lt;p&gt;Scala offers single level inheritance. Inheriting a class inherits public methods and protected methods can be used within the child class.&lt;/p&gt;

&lt;p&gt;Inheritance example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5NS3S_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428695980/LGFCROTuq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5NS3S_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428695980/LGFCROTuq.png" alt="inheritance.png" width="880" height="52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Important notes on inheritance overriding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To override methods, use the &lt;code&gt;override&lt;/code&gt; keyword. Override works for &lt;code&gt;val&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;def&lt;/code&gt; or anything within in the class.&lt;/li&gt;
&lt;li&gt;To prevent override, we have to use the &lt;code&gt;final&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;Put a &lt;code&gt;final&lt;/code&gt; keyword before &lt;code&gt;class&lt;/code&gt; to altogether prevent the inheritance of a class.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;sealed&lt;/code&gt; keyword to restrict inheritance in different scopes of the program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moving on to abstract classes in scala, we have to use the &lt;code&gt;abstract&lt;/code&gt; keyword to make an abstract class and an abstract class cannot be instantiated, however, we can create an anonymous class using the &lt;code&gt;new&lt;/code&gt; keyword and defining all the methods within that anonymous code block.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPMG0AWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428722924/REIHImy5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPMG0AWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428722924/REIHImy5p.png" alt="abstractclass.png" width="880" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traits are similar to interfaces in java. They are also used to declare undefined or unimplemented methods. We have to use the &lt;code&gt;trait&lt;/code&gt; keyword to define traits in scala.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4Z2qvKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428738822/-Gt2CDPkh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4Z2qvKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630428738822/-Gt2CDPkh.png" alt="trait.png" width="880" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Important points to note for abstract classes and traits in scala:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abstract class can have both abstract and non-abstract methods. It is the same for traits.&lt;/li&gt;
&lt;li&gt;Traits does not have constructor parameters.&lt;/li&gt;
&lt;li&gt;Classes can inherit multiple traits, but not multiple classes.&lt;/li&gt;
&lt;li&gt;Traits are used to define the behaviour of a class.&lt;/li&gt;
&lt;li&gt;Abstract class is the type of thing itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you see &lt;code&gt;???&lt;/code&gt; in abstract/trait methods, it means that method is not implemented and evaluates to &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, that's about it on inheritance, abstract class and traits in scala.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#external-links"&gt;
  &lt;/a&gt;
  External Links
&lt;/h3&gt;

&lt;p&gt;Below are some of the external links you can go through to get a more in-depth understanding of object-oriented programming in scala.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/scala/oop-intro#:~:text=Scala%20is%20a%20hybrid%20between,encapsulation%2C%20inheritance%2C%20and%20polymorphism"&gt;Object Oriented Programming in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scala-exercises.org/scala_tutorial/object_oriented_programming"&gt;Scala Exercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;Well, that wraps up part 2 of this crash course.&lt;/p&gt;

&lt;p&gt;In the next part, we will discuss functions, HOFs, curries and much more related to functional programming in scala.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>opensource</category>
      <category>bigdata</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
