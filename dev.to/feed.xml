<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Build a Skeleton Layout in React</title>
      <author>Kyle Luke</author>
      <pubDate>Wed, 27 Jan 2021 03:16:18 +0000</pubDate>
      <link>https://dev.to/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb</link>
      <guid>https://dev.to/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb</guid>
      <description>&lt;p&gt;The use of a Skeleton Layout for asynchronous content is becoming more and more popular across mobile and web apps alike. Google, Facebook, LinkedIn, Youtube and many more use a skeleton layout to display what the content and layout might look like, before it loads. Using one in your own project is a nice styling effect for your users, and also might just improve the SEO of your project in the near future by reducing "&lt;a href="https://dev.to/ben/fixing-cumulative-layout-shift-41ja"&gt;cumulative layout shift&lt;/a&gt;". This post shows you how easy it is to add a skeleton layout that updates after asynchronous content is loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKvEPLBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2As7uxK77a0FY43NLe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKvEPLBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2As7uxK77a0FY43NLe.png" alt="LinkedIn Skeleton Layout Example from: https://uxdesign.cc/what-you-should-know-about-skeleton-screens-a820c45a571a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#isloaded-state" class="anchor"&gt;
  &lt;/a&gt;
  isLoaded State
&lt;/h3&gt;

&lt;p&gt;React allows for us to set state from &lt;code&gt;isLoaded: false&lt;/code&gt; to &lt;code&gt;isLoaded: true&lt;/code&gt; when an asynchronous function has completed. This will be the basis for which set of content we will display. We will create two CSS classes for our content based on the isLoaded state: &lt;code&gt;.loading&lt;/code&gt; and &lt;code&gt;.loaded&lt;/code&gt;. We will then do an if statement that will return the JSX for the &lt;code&gt;.loaded&lt;/code&gt; content, IF &lt;code&gt;isLoaded = true&lt;/code&gt;. If &lt;code&gt;isLoaded = false&lt;/code&gt;, the app will return the JSX for the &lt;code&gt;.loading&lt;/code&gt; content, which will be out skeleton layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// JSX
class App extends React.Component {
  constructor(props){
    super(props);

    this.state = {
      isLoaded: false,
      asyncData: []
    }
  };

render(){

    asyncFunction = () =&amp;gt; {
        // Async function fetches asyncData, and upon fetch updates state from `isLoaded:false` to `isLoaded:true`
    }

    if(this.state.isLoaded===true){
        // If state.isLoaded=true, component will render complete layout and async content
          return(
            &amp;lt;&amp;gt;
              &amp;lt;LayoutContent className="loaded" /&amp;gt;
            &amp;lt;/&amp;gt;
          );
        } 

    return(
      // While state.isLoaded=false, component will only render skeleton layout
        &amp;lt;&amp;gt;
            &amp;lt;LayoutContent className="loading" /&amp;gt;
        &amp;lt;/&amp;gt;
    );
};
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;The CSS we need to style will include our two classes: &lt;code&gt;.loading&lt;/code&gt; and &lt;code&gt;.loaded&lt;/code&gt;. This gives you a little freedom for how you would like your skeleton layout to look, but I chose an &lt;a href="https://dev.to/stackfindover/youtube-loading-animation-using-html-and-css-44c2"&gt;animated approach from StackFindOver&lt;/a&gt; for the styling for the CodePen example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Skeleton Layout styles and animation
.loading {
    position: relative;
    background: #cccccc;
}
.loading:after {
    content: "";
    display: block;
    position: absolute;
    top:0;
    width: 100%;
    height: 100%;
    transform: translateX(-100px);
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    animation: loading 0.8s infinite;
}
@keyframes loading {
    100% {
        transform: translateX(100%);
    }
}

// Loaded styling
.loaded {
    // Styles
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Some additional things to note when it comes to CSS styling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Width and Height of components should be defined to reduce content jumping&lt;/li&gt;
&lt;li&gt;Consider using CSS Flexbox for responsive components with max-width/height defined&lt;/li&gt;
&lt;li&gt;If component sizes vary based on content consider adding an "overflow-y: scroll" property&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example-application" class="anchor"&gt;
  &lt;/a&gt;
  Example Application
&lt;/h3&gt;

&lt;p&gt;Feel free to steal some of the code from this &lt;a href="https://codepen.io/lukekyl/pen/NWRZZoW"&gt;CodePen example&lt;/a&gt;, but note you will likely need to adjust some of the styling to fit your own application. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lukekyl/embed/NWRZZoW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Skeleton layouts not only give your application a fun and useful loading screen as asynchronous content loads, but also might just improve you application's SEO and user experience. Hopefully this blog post and the example gives you some ideas on how to apply a skeleton layout in your own project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you used a Skeleton Layout in your project?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Comment if you have used a similar method, or have suggestions for improvements!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 built-in Next.js features you absolutely should check out</title>
      <author>James Wallis</author>
      <pubDate>Tue, 26 Jan 2021 23:42:27 +0000</pubDate>
      <link>https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e</link>
      <guid>https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Recently I've been using &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; both at work and on after-work projects. Next.js is React framework that enables functionality such as server-side rendering and generating static websites. It has become my go-to technology when I'm building a frontend application, overtaking plain old React. &lt;/p&gt;

&lt;p&gt;With Next.js you get many things out of the box such as built-in routing, automatic code splitting and it will even decide whether your app can be statically rendered or needs to be rendered server-side on every request - all of this without any configuration. In fact, when creating a new React application I default to using &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;&lt;code&gt;create-next-app&lt;/code&gt;&lt;/a&gt; as opposed to &lt;a href="https://github.com/facebook/create-react-app"&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During my time developing with Next.js I discovered a few features which are easy to miss when you're just getting started. Some of these features helped me solve some problems I was having with my application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-you-should-check-out" class="anchor"&gt;
  &lt;/a&gt;
  Features you should check out 🤩
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Export your Next.js application into &lt;a href="https://nextjs.org/docs/advanced-features/static-html-export"&gt;static HTML using &lt;code&gt;next export&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. &lt;br&gt;
Giving you the ability to run it without a running Node.js server while still being able to make data-fetching requests at build time using &lt;code&gt;getStaticProps&lt;/code&gt;. This feature bridges the gap between Next.js and its longtime alternative &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; which is exclusively a static site generator.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've used &lt;code&gt;next export&lt;/code&gt; to host a Next.js site on GitHub Pages (although with issues that were solved with the subsequent feature).&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;next.config.js&lt;/code&gt; &lt;a href="https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix"&gt;&lt;code&gt;assetPrefix&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/api-reference/next.config.js/basepath"&gt;&lt;code&gt;basePath&lt;/code&gt;&lt;/a&gt; options&lt;/strong&gt;. &lt;br&gt;
On its own &lt;code&gt;assetPrefix&lt;/code&gt; allows you to prefix all URLs to assets, like images, so that you can use assets hosted on a CDN. While &lt;code&gt;basePath&lt;/code&gt; provides the ability to host the app on the subpath of a domain such as &lt;code&gt;https://domain.com/app-on-this-subpath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba"&gt;In the past I've utilised &lt;code&gt;next export&lt;/code&gt;, &lt;code&gt;assetPrefix&lt;/code&gt; and &lt;code&gt;basePath&lt;/code&gt; together to host a Next.js app on GitHub Pages&lt;/a&gt; - without &lt;code&gt;assetPrefix&lt;/code&gt; and &lt;code&gt;basePath&lt;/code&gt; you are unable to host a Next.js project on GitHub pages (without a custom domain) as it puts them on a subpath.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration"&gt;Incremental Static Regeneration&lt;/a&gt;&lt;/strong&gt;. &lt;br&gt;
A feature of &lt;code&gt;getStaticProps&lt;/code&gt; which allows you to regenerate a static page while your app is running. It works by triggering a page rebuild in the background, which fetches updated page data, and replaces the existing HTML page with the newly generated one once the build has completed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I haven't tried this feature but will in the future as it is a better alternative to completely rebuilding a static Next.js application each time data that it relies on changes.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;Internationalized (i18n) routing&lt;/a&gt;&lt;/strong&gt;. &lt;br&gt;
If you're building a website that will be available in different countries, this feature is a game-changer. It makes supporting multiple languages simpler by enabling you to provide a list of supported locales which Next.js can read and automatically set up routing to ensure that users see the correct locale for their country. You can assign a default locale that will be used when no matching locale is detected for a user. Next.js supports both domain routing (&lt;code&gt;example.com&lt;/code&gt;, &lt;code&gt;example.fr&lt;/code&gt;) and subpath routing (&lt;code&gt;example.com/en&lt;/code&gt;, &lt;code&gt;example.com/fr&lt;/code&gt;) meaning it doesn't restrict how you plan to host your application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If I ever decide to make my website multi-lingual or work on a global project, this is a feature I will definitely be using.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://nextjs.org/docs/advanced-features/measuring-performance"&gt;Measuring Performance - &lt;code&gt;reportWebVitals&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
Next.js contains a built-in relayer allowing you to analyse and measure the performance of your application. To activate this you use the built-in function &lt;code&gt;reportWebVitals&lt;/code&gt;. Next.js calls &lt;code&gt;reportWebVitals&lt;/code&gt; with a single &lt;code&gt;metrics&lt;/code&gt; parameter, an object containing various properties such as an &lt;code&gt;id&lt;/code&gt;, the &lt;code&gt;startTime&lt;/code&gt; of a metric and a &lt;code&gt;value&lt;/code&gt; which can be the duration of a metric. This function will be called when running on the client-side. In development, you can simply log out the values to easily measure the performance of your application. In production, however, &lt;a href="https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics"&gt;you can use this function to send the &lt;code&gt;metrics&lt;/code&gt; to your own analytical service&lt;/a&gt;. They supply an example of this for use with Google Analytics.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I also haven't used &lt;code&gt;reportWebVitals&lt;/code&gt; but in the future I'll add it to &lt;a href="https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1"&gt;my Google Analytics article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using the following function should provide more accurate metrics than plain Google Analytics usage:&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use `window.gtag` if you initialized Google Analytics as this example:&lt;/span&gt;
  &lt;span class="c1"&gt;// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gtag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;event_category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web-vital&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Web Vitals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js custom metric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CLS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// values must be integers&lt;/span&gt;
    &lt;span class="na"&gt;event_label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// id unique to current page load&lt;/span&gt;
    &lt;span class="na"&gt;non_interaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// avoids affecting bounce rate.&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus" class="anchor"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The incredible amount of examples available in the Next.js GitHub repository&lt;/strong&gt;.&lt;br&gt;
If you haven't already stumbled onto them, the &lt;a href="https://github.com/vercel/next.js/tree/canary/examples"&gt;Next.js GitHub repository contains an examples directory&lt;/a&gt; that is full of examples. These show you how to use technologies such as &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss"&gt;Tailwind CSS&lt;/a&gt;, &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/with-typescript"&gt;TypeScript&lt;/a&gt; and various CMSs such as &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/cms-contentful"&gt;Contentful&lt;/a&gt; with Next.js. You can use &lt;code&gt;create-next-app&lt;/code&gt; to download an example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When I am incorporating new technology into an existing Next.js application, the example directory is the first place I check for guidance on how to integrate it.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;These are just a few of the features that Next.js includes that can automatically improve your application without having to install any external dependencies.&lt;/p&gt;

&lt;p&gt;If you liked this article, hit the like button. Something I can do better? Leave a comment!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Lessons Learned From Singing Opera</title>
      <author>Akira</author>
      <pubDate>Tue, 26 Jan 2021 20:35:41 +0000</pubDate>
      <link>https://dev.to/akiramakes/lessons-learned-from-singing-opera-4gg3</link>
      <guid>https://dev.to/akiramakes/lessons-learned-from-singing-opera-4gg3</guid>
      <description>&lt;p&gt;You learn a lot being a high-performance oriented classical musician. Here are some lessons I learned along the way, especially in how I needed to practice so methodically to have any hope of making progress, which may be helpful to people as they learn to code. &lt;/p&gt;

&lt;p&gt;1) Isolate small, difficult sections&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are having difficulty in a section of music, you don't go back and practice the entire piece over and over again. you isolate the measure (which is a very tiny segment!) of music you are most struggling with and practice that. You work smaller and smaller even until you can play it without getting it wrong. The same goes for coding. If you're struggling with a leetcode exercise, are you struggling with arrays? Objects? Maybe control flow? Go back and practice some &lt;em&gt;short&lt;/em&gt; exercises focused on that one thing you are struggling with until you absolutely cannot get them wrong. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) Practice until you can't get it wrong. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't practice a section of music until you get it right. Practice it until you can't get it wrong. The same goes for difficult concepts in code. Don't just do an array exercise until you're like "oh, ok I got one right, I guess I understand arrays now." Do array exercises until you literally can do them in your sleep. That's not to say you need to memorize every array method ever, but you should understand in-depth how arrays work. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3) Simple and good is better than complex and a trainwreck. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When singers audition, there is a lot of temptation to do a big, showy, frilly piece; however, those pieces can be exceptionally difficult and not necessarily showcase the singer in the best light. It's better to do a simple piece in the audition, but executed flawlessly, than a showy piece with lots of mistakes. Same with code, I think, is that its better to have solid, amazing basics and stretch from there in your work (of course, balancing this with pushing yourself forward is important), rather than biting off huge chunks of very complex projects that are way beyond your skillset and will ultimately lead you to get discouraged.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4) At the end of the day, you're telling a story.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I think this one is the most ethereal tip, but in classical music, as obsessive as it is on technical perfection (and I'm not kidding when I say perfection),  your job is to tell a story through the sound of your voice and your technical chops serve that end. I think the same thing in code is important; keeping in mind that working code is better than perfect and that if you can't serve the end-user with your work, then something is off.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And yes, you can hear me sing; in a live performance of &lt;a href="https://www.youtube.com/watch?v=Oi_o3rdtXXI"&gt;Poulenc's Gloria&lt;/a&gt;:) &lt;/p&gt;

</description>
      <category>programming</category>
      <category>music</category>
      <category>javascript</category>
      <category>fullstack</category>
    </item>
    <item>
      <title>Light theme.. Swoosh! Dark Theme</title>
      <author>Temitope Ayodele</author>
      <pubDate>Tue, 26 Jan 2021 19:31:48 +0000</pubDate>
      <link>https://dev.to/temmietope/light-theme-swoosh-dark-theme-54pn</link>
      <guid>https://dev.to/temmietope/light-theme-swoosh-dark-theme-54pn</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally written on &lt;a href="https://temmie.me/blog/light-theme-swoosh-dark-theme"&gt;my blog&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Many people prefer to read on a dark screen, while others prefer the light mode. Giving users the ability to switch between these two modes is a great user experience feature. It is pretty easy to implement this in your code, and in this article, I will work you through how to do this in React using &lt;code&gt;styled-components&lt;/code&gt;. I used this method to implement this on my &lt;a href="//temmie.me"&gt;portfolio website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To begin install &lt;code&gt;styled-components&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install styled-components
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can check out &lt;a href="https://styled-components.com/"&gt;documentation of styled-components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will now create some components&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-theme-component" class="anchor"&gt;
  &lt;/a&gt;
  1. Theme Component
&lt;/h3&gt;

&lt;p&gt;This component will contain your preferred colors for dark mode and light mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fffffe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#094067&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#5f6c7b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3da9fc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#094067&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fffffe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#d8eefe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3da9fc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-wrapping-the-app-with-themeprovider" class="anchor"&gt;
  &lt;/a&gt;
  2. Wrapping the app with ThemeProvider
&lt;/h3&gt;

&lt;p&gt;To make this theme available to all pages, the component(in our case, App.js) is wrapped in the &lt;code&gt;ThemeProvider&lt;/code&gt;. This way, all styled-components within the ThemeProvider has access to the provided theme, no matter how deep.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///STYLED-COMPONENTS&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Awesome&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Lorem&lt;/span&gt; &lt;span class="nx"&gt;ipsum&lt;/span&gt; &lt;span class="nx"&gt;dolor&lt;/span&gt; &lt;span class="nx"&gt;sit&lt;/span&gt; &lt;span class="nx"&gt;amet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;consectetur&lt;/span&gt; &lt;span class="nx"&gt;adipiscing&lt;/span&gt; &lt;span class="nx"&gt;elit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Fusce&lt;/span&gt; &lt;span class="nx"&gt;vel&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above snippet, we wrapped the component with the ThemeProvider and passed the lightTheme to the theme prop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-global-stylesheet" class="anchor"&gt;
  &lt;/a&gt;
  3. Create Global Stylesheet
&lt;/h3&gt;

&lt;p&gt;With styled components, you can specify global styles that spans across your application. You do this by importing &lt;code&gt;createGlobalStyle&lt;/code&gt; from styled-components. Now that our app is wrapped withing the &lt;code&gt;ThemeProvider&lt;/code&gt;, every component within it now has access to the theme.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// GlobalStyles.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="s2"&gt;`
  body {
    background: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    font-family: Roboto, sans-serif;
    transition: all 0.4s linear;
  }
  `&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-accessing-the-theme-prop-for-styledcomponents" class="anchor"&gt;
  &lt;/a&gt;
  4. Accessing the theme prop for styled-components
&lt;/h3&gt;

&lt;p&gt;We can also go ahead to defined colors on our styled-components using the theme props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// styles.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  width: 100%;
  height: 100vh;
  text-align: center;
  padding: 2%;
  box-sizing: border-box;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 2rem;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 1.2rem;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  border: none;
  padding: 0.7rem 1rem;
  background: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  border-radius: 5px;
  font-weight: 700;
  font-size: 1rem;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#toggle-between-light-mode-and-darkmode" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TOGGLE BETWEEN LIGHT MODE AND DARKMODE&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To toggle between the two modes, we can use a custom hook, called the &lt;strong&gt;useDarkMode.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useDarkMode.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComponentMounted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;setComponentMounted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setMode&lt;/code&gt; saves the user's preferred theme in localStorage. This ensures that when the user selects a theme, the preferred choice persists even after the user leaves the app. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toggleTheme&lt;/code&gt; function toggles between light theme and dark theme&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useEffect&lt;/code&gt; lifecycle hook checks on component mounting if there is a previuosly stored theme in the localStorage, if yes, the theme is set to that value. If there isn't the theme is set to light (or dark if you please)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Next we import this custom hook to the App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./GlobalStyles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useDarkMode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//New&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;componentMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="c1"&gt;//..New&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Awesome&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Lorem&lt;/span&gt; &lt;span class="nx"&gt;ipsum&lt;/span&gt; &lt;span class="nx"&gt;dolor&lt;/span&gt; &lt;span class="nx"&gt;sit&lt;/span&gt; &lt;span class="nx"&gt;amet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;consectetur&lt;/span&gt; &lt;span class="nx"&gt;adipiscing&lt;/span&gt; &lt;span class="nx"&gt;elit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Fusce&lt;/span&gt; &lt;span class="nx"&gt;vel&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above snippet, we imported the useDarkMode custom hook which returns the theme, the toggle functionallity and the componentMounted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we confirm that the component has mounted using the useEffect lifecycle hook. If it hasn't, we render an empty div. &lt;/li&gt;
&lt;li&gt;We add the toggleTheme functionality to the button, which toggles the theme onClick(light and dark mode), &lt;/li&gt;
&lt;li&gt;then in the ThemeProvider, we dynamically render lightTheme or darkTheme based on the theme returned by the useDarkMode hook.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is all! We can now easily toggle between the light mode and the darkmode. Below is the codesandbox for the full code.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/broken-lake-fht2j"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Learning JavaScript is HARD!</title>
      <author>Ashley RNDLL</author>
      <pubDate>Tue, 26 Jan 2021 18:59:37 +0000</pubDate>
      <link>https://dev.to/xoshly/learning-javascript-is-hard-1b9f</link>
      <guid>https://dev.to/xoshly/learning-javascript-is-hard-1b9f</guid>
      <description>&lt;p&gt;When I first started to teach myself JavaScript, it was truly a breaking point for me. I cried, I whined and gave up a thousand times. Only to pick it back up every time. &lt;/p&gt;

&lt;p&gt;I used/ currently reviewing the entire course of JavaScript on FreeCodeCamp and I think that it is one of the toughest self-learning course out there. The challenges are just that... challenging and very intimidating. I stopped following FCC's course because I thought that it was too hard so I switched to other platforms (CodeCademy, W3 Schools, YouTube, etc.) to find something that was... easier. &lt;/p&gt;

&lt;p&gt;But by switching from one platform to another only confused the crap out of me. And I found myself going back to FCC over and over again until I finally finished the certification. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is where I (bleeped) up.&lt;/strong&gt; Whenever I found myself in a pickle on the challenges, I would just get the answer from the forum and apply it to the problem and move on to the next. &lt;em&gt;I didn't learn a damn thing LOL.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-here-are-my-tips-on-learning-javascript" class="anchor"&gt;
  &lt;/a&gt;
  So here are my tips on learning JavaScript:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1) Take your time.&lt;/strong&gt; Don't rush the learning process.&lt;br&gt;
&lt;strong&gt;2) Always jot down notes.&lt;/strong&gt; Don't you ever in your precious life copy and paste your notes. Trust me. &lt;br&gt;
&lt;strong&gt;3) Always check what you are doing by testing everything out.&lt;/strong&gt; Utilize console.log() to make sure that you are always on the right track.&lt;br&gt;
&lt;strong&gt;4) Play around with different inputs to see the outputs.&lt;/strong&gt; This is what I like to call: Cause and Effect Game. Change the values around to see what the outcome will be. Change the increments into decrements and see what happens. &lt;br&gt;
&lt;strong&gt;5) Don't be afraid to mess up.&lt;/strong&gt; It's gonna happen. You can't be perfect all of the damn time. LOL. Learn from it and keep it moving. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-think-that-these-steps-can-be-applied-to-any-language-that-you-are-learning-just-remember-you-got-this-" class="anchor"&gt;
  &lt;/a&gt;
  I think that these steps can be applied to any language that you are learning. Just remember, YOU GOT THIS!!! :)
&lt;/h4&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>selflearning</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 26 Jan 2021 18:44:24 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1meo</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1meo</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-and-mern" class="anchor"&gt;
  &lt;/a&gt;
  Watch and MERN
&lt;/h3&gt;

&lt;p&gt;In this first installment in &lt;a class="comment-mentioned-user" href="https://dev.to/shubham1710"&gt;@shubham1710&lt;/a&gt;
’s new series on the MERN stack (MongoDB, Express, React and Node), you’ll get a tutorial worth saving if you want more full-stack experience!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shubham1710" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnP-JH9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_ysxMlOx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530291/218ccc1b-9fe9-45dc-b25d-1fef824edc79.jpg" alt="shubham1710 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shubham1710/build-an-e-commerce-website-with-mern-stack-part-1-setting-up-the-project-1l2d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build an E-Commerce website with MERN Stack - Part 1 (Setting Up the Project)&lt;/h2&gt;
      &lt;h3&gt;Kumar Shubham ・ Jan 23 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#accessibility-should-be-at-the-heart-of-everything-we-do" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility should be at the heart of everything we do
&lt;/h3&gt;

&lt;p&gt;“Building accessible websites shows that you care about disabled people. It's a small change that makes a difference.” - &lt;a class="comment-mentioned-user" href="https://dev.to/alenanik"&gt;@alenanik&lt;/a&gt;
 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alenanik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WP8EhbGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--i3zBUTgY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/135491/54c8854e-48fb-4e49-9379-526061ad7edc.jpg" alt="alenanik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alenanik/inclusive-components-making-modals-accessible-1hn9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;✨ Inclusive components: making modals accessible 🧑‍🦯&lt;/h2&gt;
      &lt;h3&gt;Alena Nik ・ Jan 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#inclusive&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#a-worthwhile-walk-in-the-jurrasic-park" class="anchor"&gt;
  &lt;/a&gt;
  A worthwhile walk in the (Jurrasic) park
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/misslorsx"&gt;@misslorsx&lt;/a&gt;
 shares an incredibly honest and motivating look at the first few weeks and months of their new web development job.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/misslorsx" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OJNXFg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VDCOgSFa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/438488/ba014472-f69b-4281-9d74-14e0e3dc13e7.jpeg" alt="misslorsx image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/misslorsx/my-top-tips-for-your-first-3-months-in-a-new-tech-role-an-honest-article-1l7e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My top tips for your first 3 months in a new tech role: An HONEST article. &lt;/h2&gt;
      &lt;h3&gt;Laura Jane ・ Jan 21 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#a-fulfilling-manageable-2021" class="anchor"&gt;
  &lt;/a&gt;
  A fulfilling, manageable 2021
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/patferraggi"&gt;@patferraggi&lt;/a&gt;
 is setting some realistic, yet ambitious goals for 2021. If you’ve been trying to think about what &lt;em&gt;you&lt;/em&gt; want to accomplish this year, Patricio’s framework is a great place to get inspiration.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/patferraggi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaLQ97SP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--duT1SVI6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/257973/8ec7581b-807e-448d-8d3a-d69b7126fcaf.jpg" alt="patferraggi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/patferraggi/planning-my-career-development-for-2021-52oo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Planning my career development for 2021&lt;/h2&gt;
      &lt;h3&gt;Patricio Ferraggi ・ Jan 19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#building-a-more-accessible-whitehousegov" class="anchor"&gt;
  &lt;/a&gt;
  Building a more accessible whitehouse.gov
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/ritaxcorreia"&gt;@ritaxcorreia&lt;/a&gt;
 wrote an awesome case study on Whitehouse.gov’s new web accessibility stance under the new administration in the United States. Check it out! &lt;em&gt;P.S. This post is not intended to be political.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ritaxcorreia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5OL8dAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NWvMJSKJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/407623/c2f3e3d1-d1d8-4c68-8fd6-58275a106900.jpg" alt="ritaxcorreia image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ritaxcorreia/web-accessibility-improvements-on-the-white-house-website-5bgk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Web Accessibility: Improvements on the White House Website&lt;/h2&gt;
      &lt;h3&gt;Rita Correia ・ Jan 21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#your-guide-to-the-document-object-model" class="anchor"&gt;
  &lt;/a&gt;
  Your guide to the Document Object Model
&lt;/h3&gt;

&lt;p&gt;“DOM is there so we can play with elements within JavaScript directly; we don't need any intermediate in between HTML and JS.” &lt;/p&gt;

&lt;p&gt;Just one of the many pearls of wisdom in this DOM-focused post by &lt;a class="comment-mentioned-user" href="https://dev.to/whoadarshpandya"&gt;@whoadarshpandya&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whoadarshpandya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubPjO8rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GwVLcyHI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/424116/7c4c1404-b5e5-4c2b-b74b-db9adf5daf49.jpeg" alt="whoadarshpandya image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whoadarshpandya/enough-javascript-to-get-you-started-14-understanding-dom-1m6c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Enough JavaScript to get you Started : #14 Understanding DOM&lt;/h2&gt;
      &lt;h3&gt;Adarsh Pandya ・ Jan 20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#recreating-the-style-of-cyberpunk-2077" class="anchor"&gt;
  &lt;/a&gt;
  Recreating the style of Cyberpunk 2077
&lt;/h3&gt;

&lt;p&gt;… Well, the parts of Cyberpunk 2077 you’d &lt;em&gt;want&lt;/em&gt; to recreate! &lt;a class="comment-mentioned-user" href="https://dev.to/jh3y"&gt;@jh3y&lt;/a&gt;
 takes a look at the striking visual style of this explosive game.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jh3y" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--waa_7ngq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Be0q_Hkr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/288872/9f557ca6-9b98-4a65-87c5-ca8eee1028d3.jpg" alt="jh3y image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jh3y/css-cyberpunk-2077-buttons-taking-your-css-to-night-city-43l0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS Cyberpunk 2077 Buttons - Taking your CSS to Night City&lt;/h2&gt;
      &lt;h3&gt;Jhey Tompkins ・ Jan 22 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Html Parser - How to scan HTML files for missing assets and broken links </title>
      <author>Sm0ke</author>
      <pubDate>Tue, 26 Jan 2021 17:46:49 +0000</pubDate>
      <link>https://dev.to/sm0ke/html-parser-how-to-scan-html-files-for-missing-assets-and-broken-links-2mke</link>
      <guid>https://dev.to/sm0ke/html-parser-how-to-scan-html-files-for-missing-assets-and-broken-links-2mke</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;The article presents a simple, open-source tool that I'm using to statically analyze HTML files for missing assets and broken links, before using the files in real projects. This &lt;strong&gt;Html Parser&lt;/strong&gt; is basically a Python3 wrapper over Beautiful Soup, the popular OSS parsing library for HTML files and XMLs. The source code can be found on Github released under EULA License. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Open-Source - can be also used for eLearning &lt;/li&gt;
&lt;li&gt;Works with directories - all HTML files are scanned&lt;/li&gt;
&lt;li&gt;Detects missing assets (JS, CSS, images ) for each page&lt;/li&gt;
&lt;li&gt;Detects broken links and suggest the right path&lt;/li&gt;
&lt;li&gt;Acceptable execution time - 100 Pages processed &amp;lt;1min&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! TL;DR;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/developer-tools"&gt;Html Parser&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/developer-tools/blob/master/check-assets-output.txt"&gt;Sample Output&lt;/a&gt; - captured from a real project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/developer-tools/blob/master/LICENSE.md"&gt;EULA License&lt;/a&gt; - free for solo-developers, small companies, startUps, and NGOs&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwsXCIxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/html-parser/master/media/html-parser-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwsXCIxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/html-parser/master/media/html-parser-intro.gif" alt="Html Parser - Developer Tool crafted by AppSeed, animated presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To use the tool we need to specify two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The folder where HTML files are saved&lt;/li&gt;
&lt;li&gt;The assets folder - parent Directory for all JS, CSS, Images ..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have provided this simple setup, we can call the scripts in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python ./check-assets.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#html-parser-the-relevant-parts" class="anchor"&gt;
  &lt;/a&gt;
  HTML Parser - The Relevant Parts
&lt;/h2&gt;

&lt;p&gt;To scan and correlate the information, the tool uses a few structures to save and reuse the relevant information and also perform simple operations over detected HTML files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hot it works&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;define a map where the key is the file name&lt;/li&gt;
&lt;li&gt;associate a data structure to each file where the relevant information is stored and updated&lt;/li&gt;
&lt;li&gt;Each HTML file is scanned for assets and links&lt;/li&gt;
&lt;li&gt;Validate the information for each file and save the missing assets for each by looking on the disk &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#html-parser-source-code" class="anchor"&gt;
  &lt;/a&gt;
  HTML Parser - Source Code
&lt;/h2&gt;

&lt;p&gt;The relevant functions and code chunks are below. If something relevant is missing, feel free to ask for it in the comments section:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Read files from a directory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;FILES_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;FILES_LIST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FILES_LIST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;The structure/class to save the information for each file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TMPL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# constructor
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All CSS Files
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All JS Files
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All Images
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# All Links
&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# used to report missing assets
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# used to report missing assets
&lt;/span&gt;
    &lt;span class="c1"&gt;# Used to have a string representation 
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' some other info'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Initiate Beautiful Soup object&lt;/strong&gt; for each file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="n"&gt;minified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmlmin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;file_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;aFile&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;remove_empty_space&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Scan each file for Links and assets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The results are injected into associated structures for each file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# BS object is constructed and available for queries  
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;FULL_PATH&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Scan for CSS files
&lt;/span&gt;&lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# # Scan for JS files
&lt;/span&gt;&lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Links and images are scanned in the same way using simple helpers. &lt;br&gt;
Once the information is saved, we can traverse the DOM using BS objects and perform mutations over elements. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#html-parser-sample-output" class="anchor"&gt;
  &lt;/a&gt;
  HTML Parser - Sample output
&lt;/h2&gt;

&lt;p&gt;To visualize a real production output, please access a sample file saved into the public repository: &lt;a href="https://github.com/app-generator/developer-tools/blob/master/check-assets-output.txt"&gt;check assets - output&lt;/a&gt;&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; PS &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; python.exe .&lt;span class="se"&gt;\c&lt;/span&gt;heck-assets.py

 Files &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'apps-calendar.html'&lt;/span&gt;, &lt;span class="s1"&gt;'index.html'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

 &lt;span class="k"&gt;*****&lt;/span&gt; &lt;span class="k"&gt;*****&lt;/span&gt; &lt;span class="k"&gt;*****&lt;/span&gt;

 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; apps-calendar.html | files &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt; remaining
 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index.html | files &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; remaining
 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; apps-calendar.html
 ERR - Missing Asset -&amp;gt; /static/assets/css/classic-horizontal/style-ERROR.css
 ERR - Missing Asset -&amp;gt; /static/assets/images/logo-mini-ERROR.svg
 PROCESSING &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index.html
 ERR - Missing Asset -&amp;gt; /static/assets/images/favicon-ERROR.png
    |
    |- apps-calendar.html
    |    |
    |    |--- CSS: 6 file&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
    |          | /static/assets/vendors/mdi/css/materialdesignicons.min.css
    |          | /static/assets/vendors/css/vendor.bundle.base.css
    |          | /static/assets/vendors/fullcalendar/fullcalendar.min.css
    |          | /static/assets/css/classic-horizontal/style.css
    |          | /static/assets/css/classic-horizontal/style-ERROR.css
    |          | /static/assets/images/favicon.png
    |     
...

Pages with errors: 2
    |
    |- apps-calendar.html
    |    |     | /static/assets/css/classic-horizontal/style-ERROR.css
    |    |     | /static/assets/images/logo-mini-ERROR.svg
    |
    |- index.html
    |    |     | /static/assets/images/favicon-ERROR.png
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The tool can be easily extended to LIVE websites using the existing core. In case any of you find it useful, feel free to suggest features in the comments section or push a PR on Github. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thank you! - For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;Beautiful Soup&lt;/a&gt; - the official docs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; - for more tools and starters&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Btw, my (nick) name is &lt;strong&gt;Sm0ke&lt;/strong&gt; and I'm pretty active also on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>devtools</category>
    </item>
    <item>
      <title>What is Async Await ?</title>
      <author>RAJAT MEHRA</author>
      <pubDate>Tue, 26 Jan 2021 17:09:08 +0000</pubDate>
      <link>https://dev.to/rajatmehra05/what-is-async-await-127p</link>
      <guid>https://dev.to/rajatmehra05/what-is-async-await-127p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TcYDJ1ha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.slidesharecdn.com/keralajs-september-2018-180924120356/95/a-beginners-guide-to-asynchronous-javascript-using-memes-16-638.jpg%3Fcb%3D1537790847" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcYDJ1ha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.slidesharecdn.com/keralajs-september-2018-180924120356/95/a-beginners-guide-to-asynchronous-javascript-using-memes-16-638.jpg%3Fcb%3D1537790847" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of us as developers use these keywords in our daily lives while coding, so I thought to give it a brief from my own understanding. I hope you find this post useful by the end of this post. Let's go!😊 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-async-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Async ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Let's understand with a basic example from our real world. &lt;br&gt;
Most of us have ordered food online via Zomato, Swiggy, etc or did online shopping from several apps in market.&lt;br&gt;
Assuming we ordered any food item, say Chicken Biryani(it's my fav, you can assume your fav food 😁).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1. Order Chicken Biryani from app.&lt;/li&gt;
&lt;li&gt;Step 2. Complete all formalities(filling details).&lt;/li&gt;
&lt;li&gt;Step 3. Ah, Chicken Biryani arrives.😉&lt;/li&gt;
&lt;li&gt;Step 4. Eat it now alone. (don't share)😁&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here when you order a food item, a promise is returned to you i.e. whether the food is ordered successfully or rejected(issue sometimes).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;async&lt;/code&gt; can be placed before a function. When you put &lt;code&gt;async&lt;/code&gt; before a function, it simply means that the function will return a promise. A resolved promise can have values wrapped inside it automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, this function returns a resolved promise with the result of &lt;code&gt;hello&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-async" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Async&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You don't need to add complex multithreading if you add &lt;code&gt;async&lt;/code&gt;.&lt;br&gt;
Async function gives the freedom of writing clear-cut and concise syntax.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simpler code than multithreading&lt;/li&gt;
&lt;li&gt;Debugging is easier&lt;/li&gt;
&lt;li&gt;Easy to scale&lt;/li&gt;
&lt;li&gt;Callback hell can be avoided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d0KJNif---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.slidesharecdn.com/keralajs-september-2018-180924120356/95/a-beginners-guide-to-asynchronous-javascript-using-memes-10-638.jpg%3Fcb%3D1537790847" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d0KJNif---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.slidesharecdn.com/keralajs-september-2018-180924120356/95/a-beginners-guide-to-asynchronous-javascript-using-memes-10-638.jpg%3Fcb%3D1537790847" alt="Callback hell"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-the-need-of-async-await-when-promises-can-do-the-same-job" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why the need of async await when Promises can do the same job?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;async/await&lt;/code&gt; simply provides a synchronous feel to asynchronous code. We can say that &lt;code&gt;async&lt;/code&gt; works as syntactical sugar for promises.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Async/Await&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Promises&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promiseGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;asyncGreeting&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;promiseGreeting&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For simple queries and data manipulation, Promises can be simple, but if you run into scenarios where there's complex data manipulation and whatnot involved, it's easier to understand what's going on if the code simply looks as though it's synchronous, thats why &lt;code&gt;async/await&lt;/code&gt; come handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-await" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Await?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;await&lt;/code&gt; keyword is used only inside an &lt;code&gt;async&lt;/code&gt; function. &lt;code&gt;await&lt;/code&gt; makes asynchronous functions halt/pause and returns whatever the async function returns when it is done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// wait until the promise resolves&lt;/span&gt;

 &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "success!"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;await&lt;/code&gt; literally suspends the function execution until the promise settles, and then resumes it with the promise result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-asyncawait" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Advantages of Async/Await&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Makes non-blocking API look like blocking&lt;/li&gt;
&lt;li&gt;Clean and linear(understandable) syntax&lt;/li&gt;
&lt;li&gt;Easier to debug&lt;/li&gt;
&lt;li&gt;Maintainable code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thats it!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I just tried to give you a little jist of what &lt;code&gt;async/await&lt;/code&gt; functions are. You can refer to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;docs&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;I hope you find this post useful and informative. Share your feedback on comments section. If you have queries, reach out to me on &lt;a href="https://www.linkedin.com/in/rajat-mehra-1a0349a9/"&gt;linkedin&lt;/a&gt; , &lt;a href="https://www.instagram.com/frontend_ryan"&gt;instagram&lt;/a&gt;, &lt;a href="https://github.com/rajat-mehra05"&gt;github&lt;/a&gt;, &lt;a href="https://twitter.com/_rajat_mehra_"&gt;twitter&lt;/a&gt;. 😀&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>JavaScript Event Listeners for Beginners</title>
      <author>Mark "niteCoda" Freeman</author>
      <pubDate>Tue, 26 Jan 2021 14:33:12 +0000</pubDate>
      <link>https://dev.to/pugcondoin/javascript-event-listeners-for-beginners-2bm9</link>
      <guid>https://dev.to/pugcondoin/javascript-event-listeners-for-beginners-2bm9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-events-and-listeners" class="anchor"&gt;
  &lt;/a&gt;
  What Are Events and Listeners?
&lt;/h1&gt;

&lt;p&gt;Visitors to our websites, and users of our applications, are continuously interacting with elements of the Document Object Module (DOM), whether they realise it or not. &lt;/p&gt;

&lt;p&gt;When these interactions occur, the elements themselves emit &lt;strong&gt;event actions&lt;/strong&gt;. As JavaScript developers, we're able to listen for these events using the JavaScript method for &lt;strong&gt;event listeners&lt;/strong&gt; and then handle them with appropriate and well-timed responses. Assuming that's our our aim, and it certainly should be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-we-listen-for-element-events" class="anchor"&gt;
  &lt;/a&gt;
  Why Should We Listen for Element Events?
&lt;/h2&gt;

&lt;p&gt;Responding to user activity can greatly &lt;strong&gt;enhance user experience&lt;/strong&gt; and interactivity leading to &lt;strong&gt;improved engagement&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-events-exactly" class="anchor"&gt;
  &lt;/a&gt;
  What are Events Exactly?
&lt;/h3&gt;

&lt;p&gt;Events vary according to element type, most are obvious but some not so. They include, for example; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mouse&lt;/strong&gt; events:- such as mouseover, mousedown, mouseup and click; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keyboard&lt;/strong&gt; events:- such as keydown and keyup; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Form&lt;/strong&gt; events:- such as focus and submit; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Window&lt;/strong&gt; events:- such as scroll and resize; &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;to name but a few&lt;/em&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#a-detailed-explanation-to-writing-your-first-simple-event-listener" class="anchor"&gt;
  &lt;/a&gt;
  A detailed explanation to writing your first simple event listener:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-target-the-element-and-declare-a-new-variable" class="anchor"&gt;
  &lt;/a&gt;
  Step 1 - Target the element and declare a new variable.
&lt;/h4&gt;

&lt;p&gt;The very first step in preparing our code for listening and handling events, is to declare a variable for the element that will be emitting the event we're interested in. In the following simple example, that element is a button with the class &lt;code&gt;click-me&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We'll declare a variable with an intuitive name; &lt;code&gt;clickMe&lt;/code&gt; and use the button's class of &lt;code&gt;click-me&lt;/code&gt; to select the element from within the document, using the JavaScript method &lt;code&gt;.querySelector()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const clickMe = document.querySelector('.click-me');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-call-the-raw-clickme-endraw-variable-that-weve-just-declared-for-the-button" class="anchor"&gt;
  &lt;/a&gt;
  2. Call the &lt;code&gt;click-me&lt;/code&gt; variable that we've just declared for the button:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;click-me
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-next-we-attach-to-that-variable-the-javascript-method-for-event-listening-raw-addeventlistener-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  3. Next, we attach to that variable, the JavaScript method for event listening &lt;code&gt;.addEventListener()&lt;/code&gt;.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;click-me.addEventListener();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The event listener takes in two parameters, comma-separated, inside the parenthesis:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;- The first is the emit event which sets up the listener. In this example we'll listen for a &lt;strong&gt;click&lt;/strong&gt; event. &lt;/li&gt;
&lt;li&gt;- The second, a function that will be called to action when the specified event occurs. This function is known as a &lt;strong&gt;callback function&lt;/strong&gt; and in this example, it has no name and so, is anonymous.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#4-add-the-event-parameters" class="anchor"&gt;
  &lt;/a&gt;
  4. Add the event Parameters
&lt;/h4&gt;

&lt;p&gt;Our Parameters in this case are &lt;code&gt;click&lt;/code&gt;, and an empty function &lt;code&gt;function()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;click-me.addEventListener('click', function());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-add-a-code-block" class="anchor"&gt;
  &lt;/a&gt;
  5. Add a code block:
&lt;/h4&gt;

&lt;p&gt;Next We'll open up a code block &lt;code&gt;{ }&lt;/code&gt; which will contain the code for the action we wish to take place in &lt;strong&gt;response&lt;/strong&gt; to the event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;click-me.addEventListener('click', function() {  });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6-add-a-callback-response" class="anchor"&gt;
  &lt;/a&gt;
  6. Add a callback response
&lt;/h4&gt;

&lt;p&gt;Inside the code block, we'll simply output an appropriate message to the console using &lt;code&gt;console.log();&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clickMe.addEventListener('click', function() {
  console.log(`the button with class 'click-me' button was clicked`);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our event listener is now complete with response and feedback.&lt;/p&gt;

&lt;p&gt;This simple event listener will execute a log to the console every time the button is clicked. It will also work if the user focuses the button using tab, and presses the enter key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-way-to-remember-event-listeners" class="anchor"&gt;
  &lt;/a&gt;
  A simple way to remember event listeners
&lt;/h2&gt;

&lt;p&gt;If all of this seems too much to remember at first, a simple way to remember the role and key ingredients of an event listener is this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Get&lt;/strong&gt; &lt;code&gt;click-me&lt;/code&gt; button&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Listen&lt;/strong&gt; &lt;code&gt;click&lt;/code&gt; event&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do&lt;/strong&gt; &lt;code&gt;console.log&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully, this will help you along your own path towards JavaScript mastery.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>👨‍🔬️ Top 10 Data Scientist Skills Required in the Career</title>
      <author>Mikhail Raevskiy</author>
      <pubDate>Tue, 26 Jan 2021 14:27:06 +0000</pubDate>
      <link>https://dev.to/mikhailraevskiy/top-10-data-scientist-skills-required-in-the-career-65e</link>
      <guid>https://dev.to/mikhailraevskiy/top-10-data-scientist-skills-required-in-the-career-65e</guid>
      <description>&lt;p&gt;In this article, I describe how to master a profession from scratch and focus specifically on the key skills required to become a Data Scientist.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hard-skills" class="anchor"&gt;
  &lt;/a&gt;
  💻Hard Skills💻
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-mathematical-base" class="anchor"&gt;
  &lt;/a&gt;
  1. Mathematical base
&lt;/h2&gt;

&lt;p&gt;Knowledge of machine learning techniques is an integral part of the Data Scientist job. Working with machine learning algorithms requires an understanding of the basics of calculus (for example, partial differential equations ), linear algebra, statistics (including &lt;a href="https://medium.com/@raevskymichail/bayes-theorem-what-s-all-the-fuss-about-4d8ce5bb3068"&gt;&lt;strong&gt;Bayesian theory&lt;/strong&gt;&lt;/a&gt;), and probability theory. Knowledge of statistics helps the Data Scientist to critically assess the significance of data. The mathematical base is also important in developing new solutions, optimizing and adjusting the methods of existing analytical models.&lt;/p&gt;

&lt;p&gt;Online courses in the following areas of mathematics with high student ratings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/statistics-fundamentals-with-python?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Statistics Fundamentals with Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/data-scientist-with-python?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Data Scientist with Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy/courses/foundations-of-probability-in-python"&gt;Foundations of Probability in Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/courses/linear-algebra-for-data-science-in-r?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Linear Algebra for Data Science in R&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/machine-learning-fundamentals-with-python?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Machine Learning Fundamentals with Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-programming" class="anchor"&gt;
  &lt;/a&gt;
  2. Programming
&lt;/h2&gt;

&lt;p&gt;Collecting, cleaning, processing, and organizing data are also important skills of a Data Scientist. For these tasks and the implementation of the machine learning models themselves, the programming languages ​​Python and R are used. How to get started with Python, I discussed in the article “&lt;a href="https://medium.com/python-in-plain-english/i-want-to-learn-how-to-program-in-python-where-to-begin-6c51ffe87ba3?source=your_stories_page---------------------------"&gt;I Want to Learn How to Program in Python. Where to Begin?&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python courses&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/python-programming?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Python Programming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/machine-learning-scientist-with-python?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Machine Learning Scientist with Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/deep-learning-in-python?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Deep Learning in Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/data-scientist-with-python?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Data Scientist with Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.google.com/edu/python/"&gt;Google's Python Class&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;R courses&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/courses/free-introduction-to-r?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Introduction to R&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/data-scientist-with-r?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Data Scientist with R&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/machine-learning-scientist-with-r?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Machine Learning Scientist with R&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-working-with-databases" class="anchor"&gt;
  &lt;/a&gt;
  3. Working with databases
&lt;/h2&gt;

&lt;p&gt;Most Data Scientist tasks require programming skills using the SQL query language. Despite the fact that &lt;strong&gt;NoSQL&lt;/strong&gt; and &lt;a href="https://hadoop.apache.org/"&gt;&lt;strong&gt;Hadoop&lt;/strong&gt;&lt;/a&gt; are also an important part of Data Science, &lt;strong&gt;SQL&lt;/strong&gt; databases are still the main way of storing data. The Data Scientist must be able to produce complex queries in SQL.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Call me crazy, but I want to teach SQL to every data professional of any kind. I’m talking about people from HR, IT, sales, marketing, finance, vendors, and so on. If your goal is to make the most of your data-driven work, the Excel + SQL combination allows you to do amazing things. If your goal is to move into analytics (for example, as a business analyst), you definitely need SQL skills […] Why not start learning SQL this weekend?&lt;/em&gt;&lt;br&gt;
 &lt;a href="https://www.linkedin.com/posts/davelanger_analytics-datascience-data-activity-6704756947012460545-Asde"&gt;*David Langer&lt;/a&gt; , Vice President of &lt;a href="https://www.schedulicity.com/"&gt;Schedulicity&lt;/a&gt; Analytics*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Related courses I found to be essential for Data Science specialist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/tracks/sql-fundamentals?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Fundamentals of Structured Query Language (SQL)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/learn/sql-for-data-science"&gt;SQL for Data Science&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-data-preprocessing" class="anchor"&gt;
  &lt;/a&gt;
  4. Data preprocessing
&lt;/h2&gt;

&lt;p&gt;Data Scientist also prepares data for analysis. Often data in business projects is not structured (videos, images, tweets) and not ready for analysis. It is imperative to understand and know how to prepare the database to obtain the desired results without losing information. During the &lt;a href="https://en.wikipedia.org/wiki/Exploratory_data_analysis"&gt;&lt;strong&gt;Exploratory Data Analysis (EDA)&lt;/strong&gt;&lt;/a&gt; phase, it becomes clear what data problems need to be addressed and how the database needs to be transformed to build analytical models.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/lecture/data-science-methodology/data-preparation-concepts-F8xBI"&gt;Data Science Methodology. Data Preparation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/learn/exploratory-data-analysis"&gt;Exploratory Data Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CQ8PYCE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AMiUtiFzQl219iRCb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CQ8PYCE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AMiUtiFzQl219iRCb.png" alt="Source: [Udacy](https://blog.udacity.com/2014/11/data-science-job-skills.html)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-algorithms" class="anchor"&gt;
  &lt;/a&gt;
  5. Algorithms
&lt;/h2&gt;

&lt;p&gt;To work on creating machine learning projects, you will need knowledge of classic machine learning algorithms such as &lt;em&gt;linear and logistic regression, decision tree, support vector machine&lt;/em&gt;. The following courses will help you understand the intricacies of machine learning algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stepik.org/course/217/promo"&gt;Algorithms: theory and practice. Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/learn/machine-learning-classification-algorithms"&gt;Machine Learning Algorithms: Supervised Learning Tip to Tail&lt;/a&gt; (eng.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-skills-specific-to-the-selected-field-of-analysis" class="anchor"&gt;
  &lt;/a&gt;
  6. Skills specific to the selected field of analysis
&lt;/h2&gt;

&lt;p&gt;After gaining basic knowledge, you will need specific skills for your chosen field of work. For example, deep learning is a class of machine learning algorithms based on artificial neural networks. These techniques are commonly used to create more complex applications such as object recognition and generation algorithms, image processing, and computer vision. So it is a good idea to be aware of new state-of-the-art algorithms and solutions in different areas of both machine and deep learning.&lt;/p&gt;

&lt;p&gt;Some useful resources here are:&lt;/p&gt;

&lt;p&gt;▶ &lt;a href="https://medium.com/deep-learning-digest"&gt;&lt;strong&gt;Deep Learning Digest&lt;/strong&gt;&lt;br&gt;
*A weekly digest of the new state-of-the-art (SOTA) Deep Learning approaches and solutions*medium.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▶ &lt;a href="https://medium.com/ai-in-plain-english"&gt;&lt;strong&gt;AI In Plain English&lt;/strong&gt;&lt;br&gt;
*Where Artificial Intelligence, Machine Learning, Data Science and Big Data get together.*medium.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#soft-skills" class="anchor"&gt;
  &lt;/a&gt;
  🔊 Soft Skills 🔊
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#7-ability-to-convey-your-idea" class="anchor"&gt;
  &lt;/a&gt;
  7. Ability to convey your idea
&lt;/h2&gt;

&lt;p&gt;&amp;lt;!--  --&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MEDgtjpycYg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The Data Scientist must be able to communicate the message to a wide audience. This is especially important in the business area, where project customers may not have technical skills and terminology. Presentation of the results will require the skills of presenting information, the ability to convey the idea in simple language. Participate in Data Science conferences and &lt;a href="https://www.meetup.com/topics/data-science/"&gt;online meetups&lt;/a&gt;. This is an opportunity not only to improve communication skills and small-talk with colleagues but also to get feedback.&lt;/p&gt;

&lt;p&gt;Courses on Principles of a Successful Presentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/specializations/pwc-analytics"&gt;Data Analysis and Presentation Skills: the PwC Approach Specialization&lt;/a&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/learn/communicating-business-analytics-results"&gt;Communicating Business Analytics Results&lt;/a&gt; — course by University of Colorado;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/comet-ml/a-data-scientists-guide-to-communicating-results-c79a5ef3e9f1"&gt;A Data Scientist’s Guide to Communicating Results&lt;/a&gt; is a guide to mastering effective presentation skills.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-teamwork" class="anchor"&gt;
  &lt;/a&gt;
  8. Teamwork
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dE2RaKfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/10944/0%2AlR8anrCQGvxrDK_a" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dE2RaKfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/10944/0%2AlR8anrCQGvxrDK_a" alt="Photo by [Dylan Gillis](https://unsplash.com/@dylandgillis?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Data Scientist profession involves teamwork on projects. This requires communication skills and a clear vision of their own role in the team. The successful outcome of a collective project directly depends on the effective interaction of the participants. The ability to hear a different opinion and make a joint decision is also important for team participation in Data Science &lt;a href="https://www.kaggle.com/competitions"&gt;Kaggle&lt;/a&gt; competitions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Data Science is a team sport, and those who say “hitters are the best!” Are likely to face rebellion from the rest of the team. Every team member is valuable! If everyone plays their part well, then the business will continue to derive value from data.&lt;/em&gt;&lt;br&gt;
 &lt;a href="https://www.linkedin.com/in/koopingshung/detail/recent-activity/shares/"&gt;*Ku Ping-Shung&lt;/a&gt; , Co-Founder / Director of &lt;a href="https://www.datasciencerex.com/"&gt;Data Science Rex&lt;/a&gt; Workshop*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Successful teamwork comes with experience, and to master the intricacies, check out the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://amzn.to/3sNxe8p"&gt;The 17 Indisputable Laws of Teamwork&lt;/a&gt; by John Maxwell — my personal handbook, highly recommend taking a look;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://amzn.to/2NkcGUH"&gt;Peopleware: Productive Projects and Teams&lt;/a&gt; by Tom DeMarco and Timothy Lister — one of the favorite books of mine and team leads I worked with&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.edx.org/course/working-in-teams-a-practical-guide"&gt;Working in Teams: A Practical Guide&lt;/a&gt; — a course on the intricacies of teamwork and conflict resolution;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-ability-to-see-the-commercial-side-of-the-issue" class="anchor"&gt;
  &lt;/a&gt;
  9. Ability to see the commercial side of the issue
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0bacF0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/9958/0%2AwpdC07byWkiM9wA1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0bacF0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/9958/0%2AwpdC07byWkiM9wA1" alt="Photo by [Micheile Henderson](https://unsplash.com/@micheile?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A key Data Scientist skill for working in a business environment is the ability to find cost-effective solutions with minimal resource costs. Companies that use Data Science for profit, need for specialists who understand how to implement business ideas with data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As organizations begin to fully capitalize on internal information assets and explore the integration of hundreds of third-party data sources, the Data Scientist’s role will continue to grow.&lt;/em&gt;&lt;br&gt;
 &lt;a href="https://www.linkedin.com/in/gregoryboyd/detail/recent-activity/"&gt;*Greg Boyd&lt;/a&gt; , director of the consulting firm &lt;a href="https://www.protiviti.com/US-en"&gt;Protiviti&lt;/a&gt;*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;About the features of Data Science for business applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.datacamp.com/courses/data-science-for-business-leaders?tap_a=5644-dce66f&amp;amp;tap_s=1300193-398dc4&amp;amp;utm_medium=affiliate&amp;amp;utm_source=mikhailraevskiy"&gt;Data Science for Business&lt;/a&gt; — an interactive course from DataCamp;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://towardsdatascience.com/a-guide-to-becoming-business-oriented-data-scientist-51da5c829ffa"&gt;A Guide to becoming Business-Oriented Data Scientist&lt;/a&gt; is a guide to the intricacies of Data Science in business applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-critical-thinking" class="anchor"&gt;
  &lt;/a&gt;
  10. Critical thinking
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tw0rLlUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11520/0%2AN4QkHGNved4AsDpT" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tw0rLlUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11520/0%2AN4QkHGNved4AsDpT" alt="Photo by [bruce mars](https://unsplash.com/@brucemars?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The skill of critical thinking helps to find approaches and solutions to problems that others do not see. Data Scientist critical thinking is about seeing all sides of a problem, considering data sources, and showing curiosity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Data Scientist must understand the business problem, be able to model and focus on what matters to solve it, not what is outsider and can be ignored. This skill, more than anything else, determines the success of the Data Scientist.&lt;/em&gt;&lt;br&gt;
 &lt;a href="https://www.linkedin.com/in/anandsrao/detail/recent-activity/"&gt;*Anand Rao&lt;/a&gt; , Head of Global Artificial Intelligence and Innovation in Data and Analytics, &lt;a href="https://www.pwc.com/"&gt;PwC&lt;/a&gt;*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#outcome" class="anchor"&gt;
  &lt;/a&gt;
  Outcome
&lt;/h2&gt;

&lt;p&gt;If you are looking to build a career as a Data Scientist, get started now. This area is constantly expanding and needs new specialists. To master the essential Data Scientist skills from scratch, enroll in the free online Data Science courses mentioned here, and become a professional ✨Data Scientist✨.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-more" class="anchor"&gt;
  &lt;/a&gt;
  Read More
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you found this article helpful, click the💚 or 👏 button below or share the article on Facebook so your friends can benefit from it too.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://slidetosubscribe.com/raevskymichail/"&gt;https://slidetosubscribe.com/raevskymichail/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about &lt;strong&gt;Data Science&lt;/strong&gt; and &lt;strong&gt;Machine Learning&lt;/strong&gt; in my other stories:&lt;/p&gt;

&lt;p&gt;▶&lt;a href="https://medium.com/@raevskymichail/top-11-python-libraries-for-data-science-you-must-know-1312b178c9bf"&gt;&lt;strong&gt;Top 11 Python Libraries for Data Science You Must Know 🔝&lt;/strong&gt;&lt;br&gt;
*One of the reasons Python is so valuable to Data Science is its huge collection of data analysis and visualization…*medium.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▶&lt;a href="https://medium.com/python-in-plain-english/top-4-python-libraries-for-interpreted-machine-learning-da1f431ad813"&gt;&lt;strong&gt;Top 4 Python Libraries for Interpreted Machine Learning&lt;/strong&gt;&lt;br&gt;
*Want to achieve a better explanation of machine learning models? Need a good visualization? Use these Python libraries.*medium.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▶&lt;a href="https://medium.com/@raevskymichail/%EF%B8%8F-how-netflix-data-science-interviews-goes-99cf2589c31"&gt;&lt;strong&gt;📽️ How Netflix Data Science Interviews Goes?&lt;/strong&gt;&lt;br&gt;
*Do you want to work for a cool, young, and famous company? Then you are on Netflix! We tell you what you need to know…*medium.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>career</category>
      <category>python</category>
      <category>analytics</category>
    </item>
    <item>
      <title>Truly Protected React Routes</title>
      <author>Daggala Gudmundsdottir</author>
      <pubDate>Tue, 26 Jan 2021 14:02:15 +0000</pubDate>
      <link>https://dev.to/daggala/truly-protected-react-routes-b8a</link>
      <guid>https://dev.to/daggala/truly-protected-react-routes-b8a</guid>
      <description>&lt;p&gt;Are you in doubt that your React routes are really protected ? There are lots of tutorials out there that talk about “secured routes”, “protected routes”, “private routes” or “restricted routes”. It’s pretty misleading because even though you have protected routes, &lt;strong&gt;it is possible&lt;/strong&gt; to get past your login page and get access to all the code in your protected routes.&lt;/p&gt;

&lt;p&gt;Perhaps people are telling you that it isn’t worth going for server side rendering (SSR) in order to truly protect the graphic content of your website. Maybe they’re saying that securing the backend should be enough because that will prevent you from displaying any sensitive data to fake-logged-in users. But &lt;strong&gt;WHAT IF&lt;/strong&gt; you still want more security and you want to block all access? After all, you don’t want your competitors to hack into your admin dashboard, to see how you’re progressing or stealing your ideas.&lt;/p&gt;

&lt;p&gt;This article will answer the following questions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#secure"&gt;what's not secure about protecting routes in the client?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why"&gt;why do we protect routes in the client?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when"&gt;in which case do I want to have truly protected routes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#protected"&gt;how to truly protect routes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="secure"&gt;What's not secure about protecting routes in the client?&lt;/h2&gt;

&lt;p&gt;In React there is nothing such as truly private routes as it's a single page application (SPA) which means that all the code is served to the browser.&lt;/p&gt;

&lt;p&gt;This is typically how we protect routes in the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrivateRoutes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; : &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PublicRoutes&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this code here above, you can't guarantee that the user won't tweak your javascript, change &lt;code&gt;isLoggedIn&lt;/code&gt; to value true and pretend to be an authenticated user.&lt;/p&gt;

&lt;p&gt;Let's see how we can get access to ALL the code of your application. Here's a &lt;a href="https://codesandbox.io/s/hacking-past-react-login-page-t4hzj?file=/src/App.js"&gt;sandbox example&lt;/a&gt; where I've made a typical login system with protected routes. Notice that I lazy loaded two components: "PrivatePage" and the "LoginPage". Then I used the "classic" way of importing "AnotherPrivatePage" even though that component is not being used (this is on purpose).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AnotherPrivatePage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AnotherPrivatePage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrivatePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./PrivatePage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./LoginPage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAuthenticated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrivatePage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoginPage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Suspense&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can either follow the article or test yourself by opening up the sandbox example, and opening page in new window by clicking on the two squares in the upper right corner (the icon can vary between browsers):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_bzXeuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/7f28fdcbf8b0a686cafd119239f7094d/fc2a6/screenshot_codesandbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_bzXeuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/7f28fdcbf8b0a686cafd119239f7094d/fc2a6/screenshot_codesandbox.png" alt="codesandbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to devtools by right clicking, choose "Inspect" (if you're in Chrome). Then go to "Sources".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPSgpdyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/d332e1fcb9cc600109662e184a1397e0/47218/source_chrome.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPSgpdyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/d332e1fcb9cc600109662e184a1397e0/47218/source_chrome.png" alt="source_chrome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here above you can see that we have two components loaded to the browser, "LoginPage" because isAuthenticated = false. We also have "AnotherPrivatePage" because if you don't lazy load, we can very easily access that component as well. The "hacker" doesn't even have to hack to look around and read the code and maybe see some static data.&lt;/p&gt;

&lt;p&gt;It needs a bit more effort to get hold of the other component "PrivatePage.js" as it's lazy loaded. There are lots of ways to do that, but here's one:&lt;br&gt;
Install React dev tools if you don't have it already, go to ⚛️Components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev-WeMTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/04d0a228ac045b4e133ee99cbc574f2f/fcda8/devtools1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev-WeMTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/04d0a228ac045b4e133ee99cbc574f2f/fcda8/devtools1.png" alt="devtools1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on "App" and change hook's state to true:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hrVT6Okn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/0baf76bf063776cf34280137ec575050/fcda8/devtools2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hrVT6Okn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/0baf76bf063776cf34280137ec575050/fcda8/devtools2.png" alt="devtools2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you'll see how we get access to the "PrivatePage", the last component we didn't have loaded in of our application and was supposed to be protected. There are of course lots of other ways to hack React. To increase security you could for example disable access to devtools in production but there's most often some other way to get around things.&lt;/p&gt;

&lt;h2 id="why"&gt;But why do we then protect our routes in the front end?&lt;/h2&gt;

&lt;p&gt;You can protect your components/graphics on a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;component level&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;route level&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either way, the main reason for why we're protecting those graphics is just to make the user experience nicer. The reason why we do it on a route level is just to make our code more organized by avoiding duplications.&lt;/p&gt;

&lt;p&gt;How are protected routes nicer for the user ? Imagine, the user has already visited our page. Next time he visits, he'll tap the url of your website and his browser autocompletes the website url without adding /login to the end of the URL. He goes straight to &lt;a href="http://www.somewebsite.com"&gt;http://www.somewebsite.com&lt;/a&gt;, but he's not authenticated anymore (let's say that he logged out the last time or his authorization token has expired). And because he's not logged in anymore the user will see the page without any content and no possibility to interact with anything that has to do with server data. It would be nicer for the user to have no direct access to the private pages and instead automatically land on the login page.&lt;/p&gt;

&lt;h2 id="when"&gt;But is it so important to have truly protected routes?&lt;/h2&gt;

&lt;p&gt;In the worst case scenario, the user can hack its way with javscript to your private routes and will see some empty tables, graphs, or messages that tell you that there is no data etc. And without content, your website will look like nothing, might even be ugly or at least it will be unusable. Well that's not so serious, we could even say that our hacker deserves that! 😈. But you have to make sure that there is no possibility for the hacker to access sensitive data 🔓 You should not leave any sensitive static data in your client and ensure that all your API endpoints are secure and make the server throw 401 if the user is not really authenticated and authorized.&lt;/p&gt;

&lt;p&gt;But is that really enough? Like I said above you might have built an admin dashboard for your company. Even without access to sensitive data, your competitor could possibly deduce where your company is heading by reading any static texts in your app, or by trying to make sense of your graphics, even though they're missing the content. Apart from that, truly securing the private part of your app adds an extra layer of security to your app, which can only be positive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dw0fbUt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/e1e5545adcbdbd635e7dd96b90f755e5/1c72d/gandalf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dw0fbUt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/e1e5545adcbdbd635e7dd96b90f755e5/1c72d/gandalf.jpg" alt="gandalf"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2 id="protected"&gt;How to make truly secured routes?

&lt;/h2&gt;
&lt;p&gt;There are several ways to achieve this. You could use SSR to solve this problem or you could stay with 100% SPA and serve your application in two parts. I've an example of the how to achieve the latter solution. There are lots of ways to do this and here I have an example of this using Express server in Node.js that serves two different SPAs, one containing the login page and the other containing the app itself. You can see this project &lt;a href="https://github.com/daggala/secured-routes"&gt;here on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you clone that project and run it, you should be aware that it takes pretty much time. Instead you can also just follow the article and check out the code.&lt;/p&gt;

&lt;p&gt;If you run the project and go to devtools, you'll see in "sources" that you only have the login page loaded to the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sa0E8G0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/3abc06b3ca12f34a548220de040c717c/fcda8/unauthenticated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sa0E8G0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/3abc06b3ca12f34a548220de040c717c/fcda8/unauthenticated.png" alt="unauthenticated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here there's no possibility to access the authenticated part of the application because it won't be served to the browser &lt;strong&gt;unless&lt;/strong&gt; you provide the correct auth inputs in username and password thanks to this code in server.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/protected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signedCookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;privatePage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/build`&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;privatePage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/build/index.html`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can try to log in, username: &lt;code&gt;admin&lt;/code&gt; and password: &lt;code&gt;123&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;and voilà:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdSgsMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/014c6e05e4f53841532255d3f1e47b64/fcda8/authenticated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdSgsMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daggala.com/static/014c6e05e4f53841532255d3f1e47b64/fcda8/authenticated.png" alt="authenticated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we're logged in and now we have the authenticated part of the application loaded in the browser and as a side effect, the login page is no more loaded in the browser.&lt;/p&gt;

&lt;p&gt;I hope this article has been useful for boosting the security of some of your websites that might use some extra layer of restriction! If you found this article helpful, don't hesitate to leave a comment or share it with others. Same of course if you have something that you would like to point out :) &lt;/p&gt;

</description>
      <category>react</category>
      <category>security</category>
    </item>
    <item>
      <title>How to: sticky top nav-bar (HTML + CSS)</title>
      <author>Akash Deshpande</author>
      <pubDate>Tue, 26 Jan 2021 13:29:08 +0000</pubDate>
      <link>https://dev.to/akashd1995/how-to-sticky-top-nav-bar-html-css-454j</link>
      <guid>https://dev.to/akashd1995/how-to-sticky-top-nav-bar-html-css-454j</guid>
      <description>&lt;p&gt;A common CSS newbie issue we face is, how to code a sticky top bar. This could be the nav-bar, a quick contact bar, quick access bar, etc. Let's assume we want to build a top nav-bar. So the requirements are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nav bar should be on top&lt;/li&gt;
&lt;li&gt;It should stick to the top of the page&lt;/li&gt;
&lt;li&gt;It should scroll with the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we begin, there are some things you should know, they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of HTML&lt;/li&gt;
&lt;li&gt;Basic knowledge of CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Excited to learn? Let's jump in!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-basic-code-block" class="anchor"&gt;
  &lt;/a&gt;
  1. Basic code block
&lt;/h3&gt;

&lt;p&gt;To make a sticky nav-bar, let's build a nav-bar first. We will use &lt;code&gt;header&lt;/code&gt; tag for this. For the rest of the content, we will use &lt;code&gt;main&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;header&amp;gt;
  &amp;lt;/header&amp;gt;

  &amp;lt;main&amp;gt;
  &amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-lets-customize-a-bit-with-css" class="anchor"&gt;
  &lt;/a&gt;
  2. Let's customize a bit with CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* CSS */
/* imports */
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;900&amp;amp;display=swap');

body{
  padding: 0;
  margin: 0;
  font-family: "Lato", sans-serif;
}

header {
  height: 80px;
  background-color: #eee;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code above, we've added styling for body, header and main. We've also imported Lato font (because I love sans-serif fonts 😁).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#body-tag" class="anchor"&gt;
  &lt;/a&gt;
  Body tag
&lt;/h4&gt;

&lt;p&gt;We remove margin and padding on &lt;code&gt;body&lt;/code&gt; because when an element takes full width, default padding and margin of body interferes with the full width of the element, in this case, &lt;code&gt;header&lt;/code&gt; tag. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#header-tag" class="anchor"&gt;
  &lt;/a&gt;
  Header tag
&lt;/h4&gt;

&lt;p&gt;We add a static height of 80px to the &lt;code&gt;header&lt;/code&gt;, and change its color to #eee to differentiate it with rest of the content.&lt;/p&gt;

&lt;p&gt;Let's add some content to the header/nav-bar. Generally, nav-bar has a logo and some nav-links. Logo would have an image of some sort, but for ease of the tutorial, we will just replace it with text.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html-part" class="anchor"&gt;
  &lt;/a&gt;
  HTML Part:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class="logo"&amp;gt;
    Logo
  &amp;lt;/div&amp;gt;
  &amp;lt;ul class="nav-links"&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="https://akashdeshpande.hashnode.dev/"&amp;gt;Blog&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="https://www.twitter.com/akashd1995"&amp;gt;Contact&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;main&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#css-part" class="anchor"&gt;
  &lt;/a&gt;
  CSS Part:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* imports */
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;900&amp;amp;display=swap');

body{
  padding: 0;
  margin: 0;
  font-family: "Lato", sans-serif;
}

header {
  /* general styling */
  height: 80px;
  background-color: #eee;

  /* display part */
  display: flex;
  align-items: center;
  padding: 0 32px;
  justify-content: space-between;
}

.logo {
  font-size: 32px;
  font-weight: 900;
  color: #333;
}

.nav-links li {
  list-style: none;
  display: inline;
  padding-left: 32px;
}

.nav-links li a {
  color: #333;
  text-decoration: none;
}

.nav-links li a:hover {
  color: #ccc;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So far, we've added Logo, nav-links and customized them, so that they are in one line and horizontal.&lt;br&gt;
Important part here is the CSS display part in &lt;code&gt;header&lt;/code&gt;. We've used &lt;code&gt;display: flex&lt;/code&gt; and &lt;code&gt;justify-content: space-between&lt;/code&gt;. This places the logo and nav-links at the start and end of the container (header in this case) respectively. If you have not learned CSS flexbox so far, no worries, but it sure is a good thing to have in your skill set.&lt;/p&gt;

&lt;p&gt;If we add more content to the page, the nav-bar will scroll with the page, we want it to stick to the top at all times. We will do this in the next part. The next part is important, it contains the magic ingredient that makes it all work.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-add-the-magic-ingredient" class="anchor"&gt;
  &lt;/a&gt;
  3. Add the magic ingredient
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Add this to header CSS */
position: fixed;
width: 100%;
box-sizing: border-box;
top: 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Adding &lt;code&gt;position: fixed&lt;/code&gt; to &lt;code&gt;header&lt;/code&gt;'s CSS makes the &lt;code&gt;header&lt;/code&gt; stick to the top. We are basically done at this point, but it doesn't look good. The &lt;code&gt;header&lt;/code&gt;'s width has shrunk, so we will add &lt;code&gt;width: 100%&lt;/code&gt;. With this code addition, comes another issue, the width of &lt;code&gt;header&lt;/code&gt; goes outside the page. We could technically fix this by adjusting the width %, but we have a better solution. Adding &lt;code&gt;box-sizing: border-box&lt;/code&gt; to the CSS limits the width of header to 100% of the viewport, so it spans the whole width of the screen. A precautionary measure we could take here, although it won't be necessary, would be to add &lt;code&gt;top: 0&lt;/code&gt;. This is just so that our nav-bar stays at the top of the page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-fix-code" class="anchor"&gt;
  &lt;/a&gt;
  4. Fix code
&lt;/h3&gt;

&lt;p&gt;We've completed the main step, so what remains? It is the issues we brought with our code. Let's solve those.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#main-tag" class="anchor"&gt;
  &lt;/a&gt;
  Main tag
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; tag contains the rest of the page. When we put &lt;code&gt;position: absolute&lt;/code&gt; to &lt;code&gt;header&lt;/code&gt;'s CSS, the &lt;code&gt;main&lt;/code&gt; now takes up the whole page. This means that &lt;code&gt;main&lt;/code&gt; will also include the area behind the nav-bar. Since that area won't be visible, we will add &lt;code&gt;padding-top: 80px&lt;/code&gt;, the same as the height of the header to &lt;code&gt;main&lt;/code&gt;'s CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main {
  padding-top: 80px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-done" class="anchor"&gt;
  &lt;/a&gt;
  5. Done!
&lt;/h3&gt;

&lt;p&gt;We have successfully completed our sticky top nav-bar! If you'd like to see it in action,  &lt;a href="https://codepen.io/akashdeshpande/pen/PoGrNGJ"&gt;see the codepen here.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/akashdeshpande/embed/PoGrNGJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>navigation</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
