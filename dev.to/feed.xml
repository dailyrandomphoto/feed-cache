<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Great chat with Devon on his new podcast DEVCODER TV</title>
      <author>sheriffderek</author>
      <pubDate>Sun, 16 Jan 2022 00:55:07 +0000</pubDate>
      <link>https://dev.to/sheriffderek/great-chat-with-devon-on-his-new-podcast-devcoder-tv-31id</link>
      <guid>https://dev.to/sheriffderek/great-chat-with-devon-on-his-new-podcast-devcoder-tv-31id</guid>
      <description>&lt;p&gt;I've been following Devon's journey for a while while I lurk around Career Karma.&lt;/p&gt;

&lt;p&gt;When I heard he was starting a podcast, I reached out - and guess what! I got to be the first guest.&lt;/p&gt;

&lt;p&gt;It was really nice to finally meet the real human and not just the avatar - and I think we had a great talk / and that you'd like it.&lt;/p&gt;

&lt;p&gt;@sherifferek Talks with Devon Curtis on DEVCODER TV: &lt;a href="https://anchor.fm/dev-codertv/episodes/Episode-1-Derek-Wood---The-Mindset-of-Becoming-a-Developer-e1d0gnv"&gt;The Mindset of Becoming a Developer&lt;/a&gt; Listen here!&lt;/p&gt;

&lt;p&gt;: )&lt;/p&gt;

</description>
    </item>
    <item>
      <title>We made a website to  easily share links between our devices.</title>
      <author>AnxinYang</author>
      <pubDate>Sat, 15 Jan 2022 23:31:25 +0000</pubDate>
      <link>https://dev.to/anxinyang/we-made-a-website-to-easily-share-links-between-our-devices-5h93</link>
      <guid>https://dev.to/anxinyang/we-made-a-website-to-easily-share-links-between-our-devices-5h93</guid>
      <description>&lt;p&gt;My partner and I made a website to make us easily share links between our devices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkshared.io/"&gt;https://www.linkshared.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;Many times when we found something interesting and wanted to share a link from one's phone or laptop to her desktop so we can both watch it on the big screen, we had to send the link by email, or sent to her phone via some app and she had to copy the link from her phone to the PC, Or we have to download some apps, etc.. The process was really annoying.&lt;/p&gt;

&lt;p&gt;Therefore, we decided to make a website that can allow people share link by simply visit our webpage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works:
&lt;/h2&gt;

&lt;p&gt;This webpage will hold the shared link for 2 minutes, for now, and people can share the link via a share code so other people can access the shared text.&lt;/p&gt;

&lt;p&gt;Steps are very simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Share your text on the website.&lt;/li&gt;
&lt;li&gt;Use the share code to get your text on other devices. If the text contains a URL, website will detect it and extract the link for you.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-we-made-it-amp-costs"&gt;
  &lt;/a&gt;
  How we made it &amp;amp; Costs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We used NextJS to implement both the frontend and backend API.&lt;/li&gt;
&lt;li&gt;We opened a free Redislabs account so we can host our cache.&lt;/li&gt;
&lt;li&gt;We used the free hosting service provide by Vercel.&lt;/li&gt;
&lt;li&gt;We brought a domain name on Vercel for $70/yr.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-a-two-minutes-limit"&gt;
  &lt;/a&gt;
  Why a two minutes limit?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We don't want to make a cloud storage.&lt;/li&gt;
&lt;li&gt;We don't want to pay for a cloud storage.&lt;/li&gt;
&lt;li&gt;In most use cases, this webpage just works like clipboard, so no long term storage is needed.&lt;/li&gt;
&lt;li&gt;We don't want to pay for a cloud storage.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;Please feel free to leave your comment!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>utility</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The State of Copy-Pasting in JavaScript</title>
      <author>Slava Knyazev</author>
      <pubDate>Sat, 15 Jan 2022 22:55:34 +0000</pubDate>
      <link>https://dev.to/knyzorg/the-state-of-copy-pasting-in-javascript-bnp</link>
      <guid>https://dev.to/knyzorg/the-state-of-copy-pasting-in-javascript-bnp</guid>
      <description>&lt;p&gt;I recently did some work on &lt;a href="https://github.com/telesoho/vscode-markdown-paste-image"&gt;a VS Code extension&lt;/a&gt; whose purpose is to handle rich pastes. It prompted me to survey different copy-pasting libraries and the state of the NPM ecosystem as a whole.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-clipboards-work"&gt;
  &lt;/a&gt;
  How do clipboards work?
&lt;/h2&gt;

&lt;p&gt;Clipboards across different operating systems work essentially the same. For this reason, we will stick to looking at a single one -- Windows.&lt;/p&gt;

&lt;p&gt;A common misconception about how clipboards work is that they contain a single piece of data, such as text or an image. In reality, clipboards hold all the ways target software can represent the data.&lt;/p&gt;

&lt;p&gt;Consider if I copy the following &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_headers"&gt;webpage&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBKpbGQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/headings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBKpbGQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/headings.png" alt="Headings" width="248" height="275"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;HTML headings as rendered by Firefox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When pasting it into Microsoft Word, it appears formatted as rich content:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAIqBY51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/rich-word.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAIqBY51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/rich-word.png" alt="Microsoft Word" width="349" height="391"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Microsoft Word displays rich content exactly as Firefox does&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When pasting it into Notepad++, it appears as plain text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLKO-g9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/notepad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLKO-g9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/notepad.png" alt="Notepad++" width="287" height="167"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Notepad++ does not handle rich content&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pasting different content types depending on the software is possible because Firefox provides multiple representations of the rendered content to the clipboard.&lt;/p&gt;

&lt;p&gt;Let's see what types the clipboard is holding using Powershell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$dataObj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.Clipboard&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;GetDataObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;foreach&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fmt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$dataObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetFormats&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Output: ##&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;System.String&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;UnicodeText&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;Chromium&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Custom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MIME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Locale&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;OEMText&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can look inside some of the clipboard types using Powershell, mainly &lt;code&gt;HTML Format&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt; with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Get Text&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.Clipboard&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;GetText&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.TextDataFormat&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Output: ##&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;3&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;5&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;6&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Get HTML Format&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.Clipboard&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;GetText&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.TextDataFormat&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Output: ##&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Version:0.9&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;StartHTML:00000174&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;EndHTML:00000410&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;StartFragment:00000208&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;EndFragment:00000374&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;SourceURL:https://www.w3schools.com/tags/tryit.asp&lt;/span&gt;&lt;span class="nf"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;tryhtml_headers&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--StartFragment&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;2&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;3&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;5&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h5&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h6&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;6&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h6&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--EndFragment&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way to approach clipboards as a consumer is to consume the clipboard formats you know how to, prioritizing some over others. For example, Microsoft Word will prioritize pasting &lt;code&gt;HTML Format&lt;/code&gt; formats over &lt;code&gt;Text&lt;/code&gt; formats by default.&lt;/p&gt;

&lt;p&gt;While Powershell has some built-in parsers, implementing the format specification for every type of content is a lot of work. Are there libraries that can help us with this?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copypasting-in-the-npm-ecosystem"&gt;
  &lt;/a&gt;
  Copy-Pasting in the NPM Ecosystem
&lt;/h2&gt;

&lt;p&gt;The simplest clipboard library would let us query the clipboard directly for binary data. This approach would require us to a parser per format per operating system. While such libraries deserve a place in this world, they are not helpful for most applications. Most applications want to handle copying and pasting only for text, rich text, images, and sometimes files. Let's go through the different clipboard management libraries and see how they fare.&lt;/p&gt;

&lt;p&gt;We are looking for a library that has the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pure JS, with native bindings&lt;/li&gt;
&lt;li&gt;Cross-Platform Support

&lt;ul&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;MacOS&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Copy to clipboard

&lt;ul&gt;
&lt;li&gt;Plain Text&lt;/li&gt;
&lt;li&gt;Rich Text&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Paste from clipboard

&lt;ul&gt;
&lt;li&gt;Plain Text&lt;/li&gt;
&lt;li&gt;Rich Text&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a table I made from the collected NPM packages, featuring the most popular clipboard-related libraries on NPM:&lt;/p&gt;

&lt;p&gt;Note: This table does not include browser-based copy-paste.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;
  Features / Libraries
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.npmjs.com/package/clipboardy"&gt;clipboardy&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.npmjs.com/package/copy-paste"&gt;copy-paste&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.npmjs.com/package/clipboard-cli"&gt;clipboard-cli&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a href="https://www.npmjs.com/package/node-clipboard-wd"&gt;node-clipboard-wd&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.electronjs.org/docs/latest/api/clipboard"&gt;Electron&lt;/a&gt; (Not a library)
  &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Pure JS
  &lt;/th&gt;
  &lt;td&gt;
  Uses system utilties
  &lt;/td&gt;
  &lt;td&gt;
  Uses system utilties
  &lt;/td&gt;
  &lt;td&gt;
  Uses system utilties
  &lt;/td&gt;
  &lt;td&gt;
  Chromium binary
  &lt;/td&gt;
  &lt;td&gt;
  Uses native bindings
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Cross-Platform Support
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Windows
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Linux
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  MacOS
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Copy to Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Paste from Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Honorable mention: &lt;a href="https://www.npmjs.com/package/save-clipboard-image"&gt;save-clipboard-image&lt;/a&gt;, uses AppleScript to save an image from clipboard to a file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Before writing this post, I was unaware that the result would be this. It appears that all of NPM's clipboard libraries work the same way: they call built-in executables on their host operating system and return the data. Interestingly, none of them handle images, rich text, or files despite no reason they couldn't deal with them the same way.&lt;/p&gt;

&lt;p&gt;The only exceptions to this pattern are Electron and &lt;a href="https://github.com/knyzorg/node-clipboard-wd"&gt;&lt;code&gt;node-clipboard-wd&lt;/code&gt;&lt;/a&gt;. The former is a framework unsuitable for usage as a library. The latter was written by myself last week as an experiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-we-go-from-here"&gt;
  &lt;/a&gt;
  Where do we go from here?
&lt;/h2&gt;

&lt;p&gt;Software developers have crossed the clipboard bridge in other environments before. In fact, NodeJS developers have &lt;em&gt;already&lt;/em&gt; crossed it in Electron, which uses native bindings under the hood. There is no reason we couldn't do the same using a more lightweight C++ library.&lt;/p&gt;

&lt;p&gt;I find &lt;a href="https://github.com/dacap/clip"&gt;clip&lt;/a&gt; particularly promising in this regard, and I've been looking into writing a NodeJS wrapper around it. For posterity, here is a table of possible native libraries that I have found so far:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;
  Features / Libraries
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://github.com/dacap/clip"&gt;clip&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://crates.io/crates/arboard"&gt;arboard&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a href="https://github.com/golang-design/clipboard" rel="nofollow"&gt;clipboard&lt;/a&gt;
  &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Cross-Platform Support
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Windows
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Linux
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  MacOS
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Copy to Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Paste from Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;  
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;  
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt; 
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Linux üzerinde Intel 6. nesil işlemcilerdeki titreme sorunu</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Sat, 15 Jan 2022 22:48:18 +0000</pubDate>
      <link>https://dev.to/aciklab/linux-uzerinde-intel-6-nesil-islemcilerdeki-titreme-sorunu-1fjf</link>
      <guid>https://dev.to/aciklab/linux-uzerinde-intel-6-nesil-islemcilerdeki-titreme-sorunu-1fjf</guid>
      <description>&lt;p&gt;Intel 6. nesil işlemcilerin (Skylake) entegre ekran kartlarında "Screen Flickering" adı verilen ekranda hafif bir titreme sorunu bulunmakta. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sorun-%C3%A7%C3%B6z%C3%BCm%C3%BC"&gt;
  &lt;/a&gt;
  Sorun çözümü
&lt;/h1&gt;

&lt;p&gt;Bu sorunu gidermenin en önemli yollarından birisi X11 üzerinde ekran kartı ayarlarının düzenlenmesi olarak görülmekte.&lt;/p&gt;

&lt;p&gt;Sisteminizde yetkili kullanıcı olarak &lt;strong&gt;/usr/share/X11/xorg.conf.d/20-intel.conf&lt;/strong&gt; dosyası oluşturup içeriğini aşağıdaki gibi yapabilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Section "Device"
    Identifier "Intel Graphics"
    Driver "intel"
    Option "AccelMethod" "sna"
    Option "TearFree" "true"
    Option "DRI" "3"
EndSection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha sonrasında X11 servisini yeniden başlatmak veya daha doğrusu olarak sistemi yeniden başlatmak gerekecektir.&lt;/p&gt;

</description>
      <category>intel</category>
      <category>skylake</category>
      <category>flickering</category>
      <category>titreme</category>
    </item>
    <item>
      <title>How to Install Docker On Windows OS</title>
      <author>Kern Designs</author>
      <pubDate>Sat, 15 Jan 2022 22:22:51 +0000</pubDate>
      <link>https://dev.to/kerndesigns/how-to-install-docker-on-windows-os-ke0</link>
      <guid>https://dev.to/kerndesigns/how-to-install-docker-on-windows-os-ke0</guid>
      <description>&lt;p&gt;So you're getting started in web components. Maybe someone you know told you to work in docker. What does that mean? How do you even install it? What should you do with it? I'm going to walk you through an install with Windows 10. Then we'll talk about what to do with docker.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-container-based-system"&gt;
  &lt;/a&gt;
  What is a container based system?
&lt;/h1&gt;

&lt;p&gt;Before you even install and try to run docker, you should probably understand what it is. Docker is a light-weight way of running a program through containers and microservices. Monolith Server Architecture is a thing of the past because we traditionally hosted resources in one environment. This made it versatile, but also heavy and very difficult to update changes. Microservices are used to split up tasks into specific operations. In the picture below, you can see all the small microservices one interface may be running on multiple machines. The whole functionality of a backend is now in thousands of containers all over the world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ieTRRTV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8r2lb7qu155x1fndu3q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ieTRRTV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8r2lb7qu155x1fndu3q.png" alt="Monolith example" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now for the most important question...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-a-container-based-system"&gt;
  &lt;/a&gt;
  Why a container based system?
&lt;/h1&gt;

&lt;p&gt;I could list some classic tech bull about "[insert new technology] is the future". The honest answer is docker is the best tool to run an app in any environment. This is because of the microservice architecture. You can have exactly same setup everywhere and quickly move the whole infrastructure. Containers can be spun up very quickly, which changes the way we look at tech.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-download-docker"&gt;
  &lt;/a&gt;
  1: Download Docker
&lt;/h2&gt;

&lt;p&gt;You can use this &lt;a href="https://www.docker.com/products/docker-desktop"&gt;link&lt;/a&gt; to download the desktop app. Like any other download once that is complete you should open it up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-open-docker"&gt;
  &lt;/a&gt;
  2: Open Docker
&lt;/h2&gt;

&lt;p&gt;Upon opening it you're probably gonna have a ton of issues. Don't stress, its normal. As soon as it boots it will most likely tell you that you need to do things with the Linux kernel. It's unlikely you already have it and you need it in order to give docker the tooling that it needs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-download-the-linux-kernel"&gt;
  &lt;/a&gt;
  3: Download the Linux kernel
&lt;/h2&gt;

&lt;p&gt;You should click the &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package"&gt;link&lt;/a&gt; that it sends you in order to start the download.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-restart-and-open"&gt;
  &lt;/a&gt;
  4: Restart and open
&lt;/h2&gt;

&lt;p&gt;It should be walking you through this but after you download the Linux kernel, restart your computer. When you reboot you can open docker. If you did this right, you'll find a tutorial waiting for you. You are more then welcome to use theirs but after that I would try to finish this tutorial to really get a handle on the useful things docker can help with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-the-docker-github-crossover"&gt;
  &lt;/a&gt;
  5: The Docker GitHub Crossover
&lt;/h2&gt;

&lt;p&gt;Marvel: 'Infinity War' Is The Most Ambitious Crossover Event In History&lt;br&gt;
Me: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_-evUco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j76tww2eo7xg7rljz0al.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_-evUco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j76tww2eo7xg7rljz0al.png" alt="Docker and GitHub" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In all seriousness docker is perfect for running your projects, but how does that happen? Patrick McDowell explains this in his &lt;a href="https://developer.okta.com/blog/2018/09/27/test-your-github-repositories-with-docker-in-five-minutes"&gt;article&lt;/a&gt; with a really helpful diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZenp-rv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg13qs07jcqpye0hlbi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZenp-rv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg13qs07jcqpye0hlbi2.png" alt="Docker and GitHub examples" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-create-a-dev-environment"&gt;
  &lt;/a&gt;
  6: Create a Dev Environment
&lt;/h2&gt;

&lt;p&gt;To get started, open a new dev environment. You can find them under the Dev Environment tab on the left. Your screen should look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LF5gAhMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xzg283ouhfwj45pk51h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LF5gAhMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xzg283ouhfwj45pk51h.png" alt="Dev Environment Tab" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-link-your-repository"&gt;
  &lt;/a&gt;
  7: Link your repository
&lt;/h2&gt;

&lt;p&gt;Once you hit get started you can follow the directions to set it up. I am going to clone an already existing repository to get it running locally on my computer. Choose your repository and open it on GitHub. Below you can see how to get the link. Choose the green Code dropdown, click the SSH tab, and copy the link. You may have to set up an SSH key if you haven't or use the HTTPS link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_zzFsqfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqjhycra7qx0tm88veka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_zzFsqfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqjhycra7qx0tm88veka.png" alt="GitHub Cloning Example" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On docker, input that link. You can see the example below. It may take a minute for docker to prepare it but trust me its much faster than other clones. You should get a success screen afterwards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kzdWC-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39anrdefwo8iczjkquo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kzdWC-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39anrdefwo8iczjkquo7.png" alt="Docker screen with repo link" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-start-coding"&gt;
  &lt;/a&gt;
  8: Start Coding
&lt;/h2&gt;

&lt;p&gt;Now you should be all good to go and you can open this in VS Code. You may be prompted to add some extensions in in order to do this. No big deal, it should be helpful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIeHvoWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dsgv4ybqsd5qq5f6ezb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIeHvoWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dsgv4ybqsd5qq5f6ezb.png" alt="Success Message" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBNgfVP2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my5cc5l6ann5b62zxjz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBNgfVP2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my5cc5l6ann5b62zxjz5.png" alt="Extension" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats you have successfully connected to a container! Keep coding!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Views in Comet</title>
      <author>David Ortinau</author>
      <pubDate>Sat, 15 Jan 2022 22:02:13 +0000</pubDate>
      <link>https://dev.to/davidortinau/views-in-comet-3cb6</link>
      <guid>https://dev.to/davidortinau/views-in-comet-3cb6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Comet is a .NET experiment inspired by Flutter and Swift UI for building cross-platform apps with C#.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dotnet"&gt;
        dotnet
      &lt;/a&gt; / &lt;a href="https://github.com/dotnet/Comet"&gt;
        Comet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Comet is an MVU UIToolkit written in C#
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;All UI in Comet is a &lt;code&gt;View&lt;/code&gt;, which makes things really simple, right? Other toolkits may split them into controls, layouts, components, widgets, etc. That makes sense since some are best used for containing and organizing, others best for accepting user input, and others for creating beautiful UI. &lt;/p&gt;

&lt;p&gt;Let's take a tour of what's available today in Comet and how you can quickly start composing your UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#container-views"&gt;
  &lt;/a&gt;
  Container Views
&lt;/h2&gt;

&lt;p&gt;The layouts in Comet extend from &lt;code&gt;ContainerView&lt;/code&gt; which itself is a &lt;code&gt;View&lt;/code&gt;. These managed views arrange and space child views on the screen, and all adapt to whatever size and density the app runs on. The current layout views include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HStack, VStack, ZStack&lt;/strong&gt; - these views will display children horizontally, vertically, or in z-order&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Grid, HGrid, VGrid&lt;/strong&gt; - these views use a powerful column/row system to arrange child views&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ScrollView&lt;/strong&gt; - simply contains a single view that scrolls within the visible viewport&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stack family of views are super simple. You add your children inside them, and set some spacing. Here's the basic content of the Comet template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;VStack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;

            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Increment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()=&amp;gt;{&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;              
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Each view will accept the minimal set of constructor arguments to be useful. Keeping things simple and efficient is the name of the game. Notice the &lt;code&gt;VStack&lt;/code&gt; above doesn't require any constructor arguments. Optionally you can include &lt;code&gt;VStack(HorizontalAlignment alignment = HorizontalAlignment.Center, float? spacing = null)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In C# the children of a view are within the curly braces, comma delimited. The children of our &lt;code&gt;VStack&lt;/code&gt; are a &lt;code&gt;Text&lt;/code&gt; and a &lt;code&gt;Button&lt;/code&gt;. The order is what determines what appears at the top of the screen moving down the screen.&lt;/p&gt;

&lt;p&gt;As you can imagine &lt;code&gt;HStack&lt;/code&gt; does exactly the same only on the horizontal axis. The only different here will be if you're device is configured for a right-to-left (RTL) region. In that case the content will flow from the right instead of the default which is from the left. For this reason, our alignment options use the terms "Start" and "End" instead.&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;ZStack&lt;/code&gt; is a bit different. The first child in a &lt;code&gt;ZStack&lt;/code&gt; will be at the "back" or closest to the parent view surface. The subsequent views will all stack up on top of that view.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ZStack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ShapeView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrangeRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transparent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ShapeView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RoundedRectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Stroke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Brown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lineWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromHex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#101010"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnAVYDSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he56sezs5stbiodnsgqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnAVYDSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he56sezs5stbiodnsgqh.png" alt="Image description" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default children are aligned to the center of &lt;code&gt;ZStack&lt;/code&gt;. To change alignment, the children's &lt;code&gt;Frame&lt;/code&gt; takes an alignment argument with many options:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TopLeading&lt;/td&gt;
&lt;td&gt;Top&lt;/td&gt;
&lt;td&gt;TopTrailing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Leading&lt;/td&gt;
&lt;td&gt;Center&lt;/td&gt;
&lt;td&gt;Trailing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BottomLeading&lt;/td&gt;
&lt;td&gt;Bottom&lt;/td&gt;
&lt;td&gt;BottomTrailing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In order to move this &lt;code&gt;ZStack&lt;/code&gt; as a group around the screen, I can surround it with another view such as &lt;code&gt;Grid&lt;/code&gt; and then use the &lt;code&gt;Alignment&lt;/code&gt; property to move the stack without disturbing the 2 shapes stacked and centered.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ZStack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ShapeView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrangeRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transparent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ShapeView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RoundedRectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Stroke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Brown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lineWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromHex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#101010"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#the-spacer"&gt;
  &lt;/a&gt;
  The Spacer
&lt;/h3&gt;

&lt;p&gt;One of my favorite parts of layout in Comet is being able to use &lt;code&gt;Spacer&lt;/code&gt; to boss around the other elements shoving them into the spacing and position I want. This nifty view can take up a specific amount of space by setting the &lt;code&gt;Frame&lt;/code&gt; just like any other view, and by default it will expand to fill the space available. &lt;/p&gt;

&lt;p&gt;Look at the example of this simple counter. This will display in a vertical view starting from the top of the screen.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;VStack&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(()=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"Count is &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LineBreakMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LineBreakMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WordWrap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HorizontalTextAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Margin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Spacer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Increment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;76&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrangeRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RoundedBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Margin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If I now add &lt;code&gt;new Spacer()&lt;/code&gt; before the &lt;code&gt;Text&lt;/code&gt; it will fill the available space and push the content to the bottom of the view:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82Uv6Jcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yog6z8xoagd0mabet81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82Uv6Jcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yog6z8xoagd0mabet81.png" alt="Image description" width="880" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I put a bookend spacer at the end of the &lt;code&gt;VStack&lt;/code&gt;, then my content is centered in the view. 😃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DraHnWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd4uozp10zklf5bkk1qx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DraHnWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd4uozp10zklf5bkk1qx.png" alt="Image description" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to complete the story, if I put a spacer in the middle of the elements, they will space evenly. Another way to do this is to use the spacing property on stacks, but I find &lt;code&gt;Spacer&lt;/code&gt; to be a powerful way to achieve a variety of results.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#grids"&gt;
  &lt;/a&gt;
  Grids
&lt;/h3&gt;

&lt;p&gt;The other major category of layout-base views are the grid family. Anyone with web and css experience has probably use a grid system before, and this may feel quite familiar. Starting with a &lt;code&gt;Grid&lt;/code&gt; you define the number of columns and rows you want by providing sizing. Column and row indexing are 0 based, so beware the off-by-one gremlin.&lt;/p&gt;

&lt;p&gt;Here is a 3x3 Grid with &lt;code&gt;Buttons&lt;/code&gt; across the middle. I'm using the fill methods just to make the spacing and sizing obvious.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]{&lt;/span&gt; &lt;span class="m"&gt;140&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]{&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;defaultRowHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromArgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#1d1d1d"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CeYGxTNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/031m8702ewkncsufknyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CeYGxTNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/031m8702ewkncsufknyo.png" alt="Image description" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Grid&lt;/code&gt; is similar to &lt;code&gt;ZStack&lt;/code&gt; in that the z-index (or depth) of the views are determined by their order in the body. &lt;/p&gt;

&lt;p&gt;Of course, you can span views across columns and rows as well. Here I'll add another &lt;code&gt;Button&lt;/code&gt; to the end of the &lt;code&gt;Grid&lt;/code&gt; and span it across three columns:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkGreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colSpan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uqwl6PXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcq3pdwmsjpg2zg6dwu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uqwl6PXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcq3pdwmsjpg2zg6dwu3.png" alt="Image description" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for some power-ups! James Clancey recently added &lt;code&gt;HGrid&lt;/code&gt; and &lt;code&gt;VGrid&lt;/code&gt; as well as a few helpers. The concept here is that you want to just provide a set of child views and have them displayed uniformly. To do this you can provide the number of cross-axis cells to render, and just add views. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pSxqg8jb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny8kqif09ru3j8u9mkre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pSxqg8jb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny8kqif09ru3j8u9mkre.png" alt="Image description" width="880" height="601"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;VGrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromArgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#1d1d1d"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Oof, despite not needing to declare the size of columns and rows, and not needing to specify the Cell for each view, that's a long block of repetitive code. 😖 Let me make that shorter while adding more content.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;VGrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkRed&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightSlateGray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillHorizontal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FillVertical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromArgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#1d1d1d"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Voilà! You can do the same with &lt;code&gt;Grid&lt;/code&gt;, and take advantage of some helpers like &lt;code&gt;NextColumn()&lt;/code&gt; (it bumps the view to the next column).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#basic-ui-controls"&gt;
  &lt;/a&gt;
  Basic UI Controls
&lt;/h2&gt;

&lt;p&gt;Whether you're building a CRUD app or something more creative, you need a basic set of views to take user input and enable interaction. Comet ships today with:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ActivityIndicator&lt;/td&gt;
&lt;td&gt;Button&lt;/td&gt;
&lt;td&gt;CheckBox&lt;/td&gt;
&lt;td&gt;DatePicker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;IndicatorView&lt;/td&gt;
&lt;td&gt;ListView&lt;/td&gt;
&lt;td&gt;ProgressBar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RadioButton&lt;/td&gt;
&lt;td&gt;Section&lt;/td&gt;
&lt;td&gt;SectionedListView&lt;/td&gt;
&lt;td&gt;SecureField&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShapeView&lt;/td&gt;
&lt;td&gt;Slider&lt;/td&gt;
&lt;td&gt;Stepper&lt;/td&gt;
&lt;td&gt;TabView&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;TextEditor&lt;/td&gt;
&lt;td&gt;TextField&lt;/td&gt;
&lt;td&gt;Toggle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Within a &lt;code&gt;ShapeView&lt;/code&gt; you can draw &lt;a href="https://github.com/dotnet/Comet/tree/dev/src/Comet/Shapes"&gt;shapes&lt;/a&gt;:  Capsule, Circle, Ellipse, Path, Pill, Rectangle, and RoundedRectangle.&lt;/p&gt;

&lt;p&gt;Views support features such as shape clipping, setting borders (stroke), and shadows. &lt;/p&gt;

&lt;p&gt;For colors you have your choice of solid paint, linear and radial gradient paint, and more provided by &lt;a href="https://github.com/dotnet/Microsoft.Maui.Graphics"&gt;Microsoft.Maui.Graphics&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dotnet"&gt;
        dotnet
      &lt;/a&gt; / &lt;a href="https://github.com/dotnet/Microsoft.Maui.Graphics"&gt;
        Microsoft.Maui.Graphics
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You've likely picked up on this from the previous examples, as I already know you're an astute developer since you are here with me looking at Comet: to begin customizing a view, Comet provides a fluent syntax that builds upon the base established in the constructor. Chain together your customizations like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LineBreakMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LineBreakMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WordWrap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HorizontalTextAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Margin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Increment"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;76&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrangeRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RoundedBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Margin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example the &lt;code&gt;Text&lt;/code&gt; has a foreground color of white, a size of 64, enables word wrapping, centers the text, and spaces the view from the edges of the parent view. I don't need to "read" the &lt;code&gt;Button&lt;/code&gt; code to you, however I would like to call your attention to &lt;code&gt;Frame&lt;/code&gt;. This gives a view an explicit size, which on most any platform is a great idea to provide if you know the size in order to optimize layout performance.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/davidortinau"&gt;
        davidortinau
      &lt;/a&gt; / &lt;a href="https://github.com/davidortinau/FancyCounter"&gt;
        FancyCounter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#random-tips"&gt;
  &lt;/a&gt;
  Random Tips
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;While hot reloading put all your code in a single file to reduce the need to restart the app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can comment out a single line in the chain while editing without breaking the app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide size in &lt;code&gt;Frame&lt;/code&gt; if you know it to improve layout performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compose views into reusable functions &lt;a href="https://github.com/davidortinau/HangulClock/blob/main/Comet/src/HangulClock/MainPage.cs#L29-L40"&gt;like my &lt;code&gt;HangulText&lt;/code&gt; view&lt;/a&gt; in order to create a template for a common style of control.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have fun and share your experiences on Twitter (I'm &lt;a href="https://twitter.com/davidortinau"&gt;@davidortinau&lt;/a&gt;), GitHub, or with your 🦔.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>dotnet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>An Innovative Idea for Holding State in CSS</title>
      <author>Jane Ori</author>
      <pubDate>Sat, 15 Jan 2022 21:16:03 +0000</pubDate>
      <link>https://dev.to/janeori/an-innovative-idea-for-holding-state-in-css-23gh</link>
      <guid>https://dev.to/janeori/an-innovative-idea-for-holding-state-in-css-23gh</guid>
      <description>&lt;p&gt;When it comes to CSS and HTML, application state falls into these categories:&lt;br&gt;
&lt;strong&gt;cascade state&lt;/strong&gt;: classes/checkbox state/other dom&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DI-6Q2Nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggpsz9m92dc5p3gk43az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DI-6Q2Nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggpsz9m92dc5p3gk43az.png" alt="screenshot of html and css producing a static state" width="880" height="195"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;pseudo state&lt;/strong&gt;: based on current user interaction&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDFC_NfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh0ighr17we4ykcgrc19.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDFC_NfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh0ighr17we4ykcgrc19.gif" alt="gif showing HTML and CSS with a user interacting to trigger a temporary hover state" width="880" height="204"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;animation state&lt;/strong&gt;: pre-determined series, triggered by cascade and/or pseudo state&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkOR7rXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hf7ek1sq3prnn86ltgs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkOR7rXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hf7ek1sq3prnn86ltgs.gif" alt="gif showing a CSS animation triggered by clicking a checkbox" width="880" height="301"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;transition state&lt;/strong&gt;: easing between the cascade and/or pseudo states when they change&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9aI4vczR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64f3a40mgxrbrt3wnnzl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9aI4vczR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64f3a40mgxrbrt3wnnzl.gif" alt="gif showing CSS transition triggered by hover" width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the building blocks for all UX that can be combined in an infinite number of ways&lt;sup&gt;[1]&lt;/sup&gt;. These are all intertwined of course, and we can split hairs on how I've referred to them, but ultimately though; Either our state is &lt;em&gt;static&lt;/em&gt; - derived from the current DOM, or it's &lt;em&gt;temporary&lt;/em&gt; - derived from the user's current interaction.&lt;/p&gt;

&lt;p&gt;[1] except that animation state cannot be combined with animation state due to &lt;a href="https://www.w3.org/TR/css-variables-1/#animation-tainted"&gt;animation-tainting&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"But wait, there's more!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;- &lt;a class="mentioned-user" href="https://dev.to/rockstarwind"&gt;@rockstarwind&lt;/a&gt;, probably&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-new-static-state-stored-in-css-not-dom"&gt;
  &lt;/a&gt;
  The new static state, stored in CSS (not DOM!)
&lt;/h2&gt;

&lt;p&gt;Earlier this week, &lt;a class="mentioned-user" href="https://dev.to/rockstarwind"&gt;@rockstarwind&lt;/a&gt; posted an idea on their twitter that &lt;a href="https://twitter.com/RockStarwind/status/1481565710350524416"&gt;demonstrates a new technique for remembering temporary interactions&lt;/a&gt; without DOM needing to be the source of that memory (like it is with the :checked state of a checkbox).&lt;br&gt;
They go on to show a reduced example in a codepen with excellent comments to learn from:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/RockStarwind/embed/YzrROPP?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Neat!&lt;/p&gt;

&lt;p&gt;Let's break down the idea and play with it a bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#register-the-onebit-memory-cell"&gt;
  &lt;/a&gt;
  Register the one-bit memory cell
&lt;/h3&gt;

&lt;p&gt;Following their work, this is what we have to do first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this &lt;code&gt;memory&lt;/code&gt; animation sets the custom property &lt;code&gt;--cell&lt;/code&gt; as a &lt;a href="https://github.com/propjockey/css-sweeper#css-is-a-programming-language-thanks-to-the-space-toggle-trick"&gt;Space Toggle&lt;/a&gt; which has two states, off 'initial' and on ' '.&lt;/p&gt;




&lt;p&gt;
  The TL;DR of Space Toggles
  &lt;p&gt;You can concatenate CSS custom properties like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--val1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--val2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--val1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--val2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--result&lt;/code&gt; is effectively &lt;code&gt;2px solid red&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you concatenate a space:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--result&lt;/code&gt; is effectively just &lt;code&gt;green&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you concatenate initial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;cyan&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--result&lt;/code&gt; is invalidated and var(--result, fallback) will use the fallback instead. (color is set to cyan in this example)&lt;/p&gt;

&lt;p&gt;So in effect, a space toggle is is a one bit variable we can use to derive two completely different states from reading it with &lt;code&gt;var()&lt;/code&gt; wherever and as often as we want.&lt;/p&gt;



&lt;br&gt;
&lt;/p&gt;




&lt;p&gt;Note: Animating custom properties is part of the Houdini spec, so this &lt;a href="https://ishoudinireadyyet.com/"&gt;may not work in firefox&lt;/a&gt; for a while.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initialize-the-memory"&gt;
  &lt;/a&gt;
  Initialize the memory
&lt;/h3&gt;

&lt;p&gt;All we have to do here is apply the keyframes to an element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* keyframes reference */&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-fill-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-play-state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* must be paused at first */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the shorthand animation property, that looks more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="m"&gt;1ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;.demo&lt;/code&gt; elements have a &lt;code&gt;--cell&lt;/code&gt; property explicitly set to &lt;code&gt;initial&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-properties-to-use-the-space-toggle"&gt;
  &lt;/a&gt;
  Set up properties to use the space toggle
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--bg-if-cell-is-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rebeccapurple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-if-cell-is-on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="py"&gt;--color-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color-on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In English, if the cell is off, the background is &lt;code&gt;hotpink&lt;/code&gt; and color is &lt;code&gt;black&lt;/code&gt;. If the cell is on, the background is &lt;code&gt;rebeccapurple&lt;/code&gt; and color is &lt;code&gt;white&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flipping-the-bit"&gt;
  &lt;/a&gt;
  Flipping the bit
&lt;/h3&gt;

&lt;p&gt;Next, they use the &lt;code&gt;:active&lt;/code&gt; pseudo state from a &lt;code&gt;button&lt;/code&gt; to un-pause the animation. Theoretically we could use any pseudo state, like :hover.&lt;/p&gt;

&lt;p&gt;Let's test&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/b01b6646ba7d22e501fb3513f9a5cf1e?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;click 'rerun' in the bottom right corner if needed!&lt;/p&gt;

&lt;p&gt;Great! If the user's pointer enters the document, CSS flips state and the background becomes rebeccapurple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unflipping-the-bit"&gt;
  &lt;/a&gt;
  Un-flipping the bit
&lt;/h3&gt;

&lt;p&gt;To return to the initial state, the easiest way is what they've shown, set &lt;code&gt;animation: none;&lt;/code&gt; on our element when a selector matches.&lt;br&gt;
This changes &lt;code&gt;--cell&lt;/code&gt; back to &lt;code&gt;initial&lt;/code&gt; &lt;em&gt;implicitly&lt;/em&gt; because when a custom property is not set (nor &lt;a href="https://drafts.css-houdini.org/css-properties-values-api/#supported-names"&gt;registered with a specific syntax&lt;/a&gt;), it is initial.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-rest-of-the-owl"&gt;
  &lt;/a&gt;
  The rest of the owl
&lt;/h2&gt;

&lt;p&gt;We can use this technique to do something fun like 100% CSS etch-a-sketch:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/mdBvjgg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Delightful!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remembering-is-so-much-more-a-psychotic-activity-than-forgetting"&gt;
  &lt;/a&gt;
  "Remembering is so much more a psychotic activity than forgetting"
&lt;/h2&gt;

&lt;p&gt;I've only been friends with RockStarwind for a couple years but they are continually sharing innovative ideas and awesome demos in the CSS space. Definitely give them a &lt;a href="https://twitter.com/RockStarwind"&gt;follow on Twitter&lt;/a&gt; so you don't have to remember to check manually. ;)&lt;/p&gt;

&lt;p&gt;If you enjoyed my first article, please consider following me here and &lt;a href="https://twitter.com/Jane0ri"&gt;on twitter&lt;/a&gt; as well!&lt;/p&gt;

&lt;p&gt;💜&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prior-art"&gt;
  &lt;/a&gt;
  Prior art!
&lt;/h2&gt;

&lt;p&gt;After tweeting, I learned about someone already using this idea in a really really interesting way! Check it out!&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LJCyCmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1429627823019409414/4ZvRwzPt_normal.jpg" alt="Lillian Kodi profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lillian Kodi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lilliankodi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/Jane0ri"&gt;@Jane0ri&lt;/a&gt; &lt;a href="https://twitter.com/RockStarwind"&gt;@RockStarwind&lt;/a&gt; This is major aspect of how my morse code translator works, but instead of being an instantaneous state change, the main animation of each layer records how long the previous sibling was :active&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/QUlTVPp2Eq"&gt;twitter.com/LillianKodi/st…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:37 PM - 15 Jan 2022
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Lillian Kodi
          &lt;/span&gt;
          @LillianKodi
        &lt;/div&gt;
        Translate Morse Code with HTML &amp;amp; CSS

@CodePen #HTML #CSS

https://t.co/WCM6F4Pdy8
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1482467007798951939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1482467007798951939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1482467007798951939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
and her demo:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/lillian-kodi/embed/NWgWQKR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
HOW COOL IS THAT?!

</description>
      <category>css</category>
      <category>statemachines</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Sunnyside Landing Page using HTML CSS JS</title>
      <author>Sadee</author>
      <pubDate>Sat, 15 Jan 2022 21:14:54 +0000</pubDate>
      <link>https://dev.to/codewithsadee/sunnyside-landing-page-using-html-css-js-26aa</link>
      <guid>https://dev.to/codewithsadee/sunnyside-landing-page-using-html-css-js-26aa</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZATT0Gbfz0c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to make sunnyside landing page using html css and javascript&lt;/p&gt;

&lt;p&gt;In this video, I will show you how to create (mobile-first responsive) sunnyside landing page using html css and javascript.&lt;/p&gt;




&lt;p&gt;HI 👋&lt;br&gt;
I'm Sadee (webdev)&lt;br&gt;
In this channel I make videos about Complete Responsive website.&lt;br&gt;
You can checkout my channel 👇&lt;/p&gt;

&lt;p&gt;📺 My Channel : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
🔔 Subscribe : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g?sub_confirmation=1"&gt;subscribe now&lt;/a&gt;&lt;br&gt;
🕐 New Videos Every Week&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1jm3UHodIVONbOiUkGqc38TDPoXLipqUm/view?usp=sharing"&gt;All Images&lt;/a&gt;&lt;br&gt;
&lt;a href="https://drive.google.com/file/d/1slD2cPRLpp7SeO7RLzmfEILYLnlh_2CT/view?usp=sharing"&gt;Text&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Barlow?query=barlow"&gt;Font - Barlow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Fraunces?query=fraun"&gt;Font - Fraunces&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/source-code-page-61209046?utm_medium=clipboard_copy&amp;amp;utm_source=copy_to_clipboard&amp;amp;utm_campaign=postshare"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#timestamps"&gt;
  &lt;/a&gt;
  ⏱️ Timestamps
&lt;/h2&gt;

&lt;p&gt;0:00 - Demo&lt;br&gt;
2:13 - File structure&lt;br&gt;
2:37 - Html initial&lt;br&gt;
2:54 - Css variable &amp;amp; reset&lt;br&gt;
4:38 - Header section&lt;br&gt;
10:58 - Home section&lt;br&gt;
14:38 - About section&lt;br&gt;
19:44 - Service section&lt;br&gt;
24:06 - Testimonials section&lt;br&gt;
28:20 - Projects section&lt;br&gt;
30:40 - Footer&lt;br&gt;
34:17 - Media queries&lt;br&gt;
42:21 - Javascript&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  💜 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;https://www.buymeacoffee.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>class_eval vs. instance_eval in Ruby</title>
      <author>Akshay Khot</author>
      <pubDate>Sat, 15 Jan 2022 20:19:49 +0000</pubDate>
      <link>https://dev.to/software_writer/classeval-vs-instanceeval-in-ruby-2i35</link>
      <guid>https://dev.to/software_writer/classeval-vs-instanceeval-in-ruby-2i35</guid>
      <description>&lt;p&gt;This post explains the difference between &lt;code&gt;class_eval&lt;/code&gt; and &lt;code&gt;instance_eval&lt;/code&gt; methods in Ruby. If you keep getting confused between them when reading or writing Ruby code, it should clarify things a little. &lt;/p&gt;

&lt;p&gt;Consider the &lt;code&gt;Greeting&lt;/code&gt; class, which forms the basis of other examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukeg0_Pn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o2pjo8jrib0tcfyh0yb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukeg0_Pn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o2pjo8jrib0tcfyh0yb.png" alt="Greeting Class" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#classeval"&gt;
  &lt;/a&gt;
  class_eval
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;class_eval&lt;/code&gt; evaluates the string or block in the context of the class, allowing you to reopen the class and define additional behavior on it.&lt;/p&gt;

&lt;p&gt;Creating a method inside the block defines an instance method on the class. All &lt;code&gt;Greeting&lt;/code&gt; instances can call &lt;code&gt;greet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKI2J7AJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xragij0uzt7omvi2eaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKI2J7AJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xragij0uzt7omvi2eaz.png" alt="Class class_eval" width="880" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the same as explicitly defining the &lt;code&gt;greet&lt;/code&gt; method in the &lt;code&gt;Greeting&lt;/code&gt; class. The above code is equivalent to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqlQAxlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy5euaineszckns41qm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqlQAxlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy5euaineszckns41qm3.png" alt="Greeting instance" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first benefit of &lt;code&gt;class_eval&lt;/code&gt; is that you can call it on a variable pointing to a class, allowing you to add behavior to a class dynamically.&lt;/li&gt;
&lt;li&gt;When using &lt;code&gt;class_eval&lt;/code&gt;, the code will fail immediately, if the class doesn't exist (or if you misspelled the class name). So you can't &lt;strong&gt;&lt;em&gt;accidentally&lt;/em&gt;&lt;/strong&gt; add code to a class that doesn't exist. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;class_eval&lt;/code&gt; method is only available on classes (modules, to be precise). You can't call it on instances, i.e. &lt;code&gt;instance_name.class_eval&lt;/code&gt; doesn't exist. Ruby throws the error &lt;code&gt;undefined_method class_eval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5-24DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsbsf89i3x87hger8ovc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5-24DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsbsf89i3x87hger8ovc.png" alt="Instance class_eval" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instanceeval"&gt;
  &lt;/a&gt;
  instance_eval
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;instance_eval&lt;/code&gt; evaluates the code in the context of the receiving object. When you call it on a class, e.g. &lt;code&gt;ClassName.instance_eval&lt;/code&gt;, the receiving object is the class, which is an instance of &lt;code&gt;Class&lt;/code&gt;.  For example, &lt;code&gt;Greeting&lt;/code&gt; is an instance of &lt;code&gt;Class&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;043&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you create a method inside the block, it defines a class method. It's associated with the class object but not visible to instances of that class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0iKTqLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urnmxmyzsprjkcwau05q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0iKTqLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urnmxmyzsprjkcwau05q.png" alt="Class instance_eval" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When the code is executing, the variable &lt;code&gt;self&lt;/code&gt; is set to the receiving object to set the context, giving the code access to the object's instance variables and private methods. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, calling &lt;code&gt;instance_eval&lt;/code&gt; on an instance, e.g. &lt;code&gt;instance_name.instance_eval&lt;/code&gt; defines a method on that specific instance. No other instances of the class can access that method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G5v0KPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1dowkh5rbcbd6ejtvbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G5v0KPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1dowkh5rbcbd6ejtvbx.png" alt="Instance instance_eval" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;class_eval&lt;/code&gt;  evaluates the string or block in the context of the class, allowing you to reopen the class and define additional behavior on it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;instance_eval&lt;/code&gt; evaluates the string or block in the context of the receiver object, allowing you to run code as if we were inside a method of this object, giving access to its private methods. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQzzSkZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p1hai1bjeq40fhmq8qr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQzzSkZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p1hai1bjeq40fhmq8qr.png" alt="Difference in class_eval vs. instance_eval" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>metaprogramming</category>
    </item>
    <item>
      <title>[PT-BR] - RSPEC &amp; RUBY - DO GO HORSE AO TDD</title>
      <author>Paulo Castro</author>
      <pubDate>Sat, 15 Jan 2022 20:09:52 +0000</pubDate>
      <link>https://dev.to/cyytrus/pt-br-rspec-ruby-do-go-horse-ao-tdd-10fh</link>
      <guid>https://dev.to/cyytrus/pt-br-rspec-ruby-do-go-horse-ao-tdd-10fh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pr%C3%B3logo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Prólogo&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;O que você irá ler abaixo são apenas alguns dos vários motivos para se usar testes, especialmente desenvolver guiado por testes.&lt;/p&gt;

&lt;p&gt;Como um desenvolvedor iniciante, sempre questionei internamente os porquês dos testes, mesmo com todos ao meu redor dizendo sua importância e valor, nunca havia posto em prática as técnicas necessárias para executar bons testes e/ou desenvolver algo totalmente guiado por eles, antes a vida era bem simples, era só montar no cavalo e escrever tudo às cegas, sem planejamento, sem pensar, o belo &lt;strong&gt;e não ideal&lt;/strong&gt; eXtreme Go Horse. No entanto, com isso me vi perdendo produtividade, testar tudo de um código "na unha" se tornou cansativo demais, brechas e bugs apareciam com facilidade, foi nesse momento em que me dei conta, com a seguinte frase passando pela minha cabeça: "Se eu tivesse os testes escritos, tudo seria mais tranquilo". Dessa forma, com esse pensamento, tomei vergonha na cara e entrei a fundo naquilo que chamam de Test Driven Development, ou melhor, TDD.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sobre-o-tdd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Sobre o TDD:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Test Driven Development, ou comumente conhecido como TDD, é uma técnica de desenvolvimento em que o desenvolvedor primeiro pensa nas funções e/ou comportamentos do seu código, escreve os testes para só posteriormente escrever as linhas de código propriamente ditas. Sua importância se dá pela previsibilidade das funções definidas pelo teste, em que você arquiteta todo o código sabendo exatamente o que deve(ria) ser retornado. Desse modo, o TDD é formado pelos seguintes passos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;(RED)&lt;/strong&gt; Escrever um teste que falhe: Ao escrever o teste, ele obviamente irá falhar a priori, pois você não tem código nenhum para fazer o que o teste espera que seja feito.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;(GREEN)&lt;/strong&gt; Fazer o código funcionar: Ao escrever o código, o desenvolvedor deve fazer o possível para que o teste seja aceito, não importando como.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;(REFACTOR)&lt;/strong&gt; Eliminar a redundância: Após garantir o funcionamento do código, o desenvolvedor deverá aplicar ao máximo as boas práticas da linguagem, buscando sempre o equilíbrio entre legibilidade e qualidade.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conhecendo-o-rspec"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conhecendo o RSpec:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Não vou entrar a fundo na instalação e afins pois esse não é o foco da postagem, mas &lt;a href="https://github.com/rspec/rspec-rails"&gt;aqui&lt;/a&gt; e &lt;a href="https://rspec.info/"&gt;aqui&lt;/a&gt; você encontrará tudo o que é preciso para entender e utilizar o RSpec com Ruby e Rails.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;RSpec&lt;/strong&gt; é uma ferramenta (&lt;em&gt;gem&lt;/em&gt;) de testes para códigos na linguagem &lt;strong&gt;Ruby&lt;/strong&gt;, sendo uma das mais famosas e geralmente acompanhado de outras &lt;strong&gt;gems&lt;/strong&gt; que amplificam sua utilidade, tais como: &lt;em&gt;Capybara&lt;/em&gt;, &lt;em&gt;Cocumber&lt;/em&gt; e &lt;em&gt;Factorybot&lt;/em&gt; (antigo FactoryGirl).&lt;/p&gt;

&lt;p&gt;Sua sintaxe simples e muito semelhante com a lingua inglesa auxília no entendimento e escrita de testes, geralmente com suas descrições feitas na terceira pessoa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;ArticlesController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#index'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns a success response'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/articles'&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_http_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#entendendo-o-c%C3%B3digo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Entendendo o código:&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;.describe:&lt;/em&gt;&lt;/strong&gt; Utiliza-se &lt;em&gt;describe&lt;/em&gt; para descrever as &lt;em&gt;classes&lt;/em&gt;, &lt;em&gt;módulos&lt;/em&gt; ou &lt;em&gt;métodos&lt;/em&gt; em que irão ser feitos os testes. Nesse caso o que está sendo descrito acima é a classe &lt;strong&gt;&lt;em&gt;ArticlesController.&lt;/em&gt;&lt;/strong&gt; e a chamada &lt;strong&gt;&lt;em&gt;index&lt;/em&gt;&lt;/strong&gt; da rota &lt;strong&gt;&lt;em&gt;/articles&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;it:&lt;/em&gt;&lt;/strong&gt; Utiliza-se &lt;em&gt;it&lt;/em&gt; para descrever o que será testado (descrito na terceira pessoa). Nesse caso &lt;em&gt;'Returns a success response'&lt;/em&gt; implica na requisição de &lt;strong&gt;&lt;em&gt;get '/articles'&lt;/em&gt;&lt;/strong&gt; retornar uma resposta "Sucesso", ou melhor, o &lt;strong&gt;status HTTP 200 (OK)&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O próximo passo, sob o viés do TDD, você deverá rodar o comando &lt;code&gt;rspec&lt;/code&gt; no seu terminal para iniciar o teste, que obviamente falhará, na maioria dos casos, a falha do teste te dará um norte sobre o que deve ser feito.&lt;/p&gt;

&lt;p&gt;Após isso, será iniciada a linha de pensamento para o código ser aceito pelo teste, nesse caso:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exemplo do teste feito em uma API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deverá existir um &lt;em&gt;Model&lt;/em&gt; e um &lt;em&gt;Controller&lt;/em&gt; para articles, juntamente com um Serializer (JSON API gem) para definir os atributos e organizá-los e um método index para renderizar o arquivo em formato .json&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;#./app/models/article.rb&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

    &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:recent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;created_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ./app/controllers/articles_controller.rb&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticlesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
      &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;recent&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;status: :ok&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serializer&lt;/span&gt;
      &lt;span class="no"&gt;ArticleSerializer&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ./serializers/article_serializer.rb&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleSerializer&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;JSONAPI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
    &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:slug&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;O código deverá ter uma rota definida para o controller articles juntamente com o método index.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:articles&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:index&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fazendo isso e rodando novamente &lt;code&gt;rspec&lt;/code&gt; é esperado que o teste passe.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h1&gt;

&lt;p&gt;Seguindo dois dos três passos do TDD, consegue-se chegar a um código que terá sempre testes que podem indicar seu funcionamento digitando um simples comando no terminal, o que por sua vez é muito útil caso o desenvolvedor queira seguir o terceiro passo do TDD e refatorar, melhorar e adicionar novas funcionalidades para sua aplicação / API. &lt;/p&gt;

&lt;p&gt;Sob essa ótica, o aumento da produtividade e qualidade de código será apenas questão de tempo, conforme o desenvolvedor aprende mais de suas ferramentas de teste, suas nuances e novas técnicas. &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>tdd</category>
      <category>testing</category>
    </item>
    <item>
      <title>Here's how I made a simple Chrome Extension to close all open tabs</title>
      <author>Midhun</author>
      <pubDate>Sat, 15 Jan 2022 20:02:19 +0000</pubDate>
      <link>https://dev.to/midhunz/how-to-create-a-simple-chrome-extension-ijk</link>
      <guid>https://dev.to/midhunz/how-to-create-a-simple-chrome-extension-ijk</guid>
      <description>&lt;p&gt;Extensions are software programs, built on web technologies (such as HTML, CSS, and JavaScript) that enable users to customize the Chrome browsing experience.&lt;br&gt;
Chrome Extensions are fairly easy to create, and they can really enhance your browser’s capabilities and solve repetitive tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Architecture overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6caAjnp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkfzvpbfeen846b8ozjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6caAjnp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkfzvpbfeen846b8ozjd.png" alt="Image description" width="776" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;popup.&lt;/strong&gt;&lt;br&gt;
Extension UI pages&lt;br&gt;
&lt;strong&gt;background.js&lt;/strong&gt;&lt;br&gt;
The background script is the extension’s event handler; it contains listeners for browser events that are important to the extension&lt;br&gt;
&lt;strong&gt;contentscript.js&lt;/strong&gt;&lt;br&gt;
Extensions that read or write to web pages utilize a content script&lt;br&gt;
&lt;strong&gt;Let’s build your Chrome extension now.&lt;/strong&gt;&lt;br&gt;
Let’s make a Chrome extension to quickly close all open tabs and open a brand new one. It will take less than 10 lines of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9CFEC6Zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w72e2q143mso07wtipdd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CFEC6Zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w72e2q143mso07wtipdd.gif" alt="Image description" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By clicking the extension icon, we close all open tabs. When you click on the extension, the application should read all open tabs and remove them as well as create a new tab.&lt;br&gt;
We do not need any user interface for this example, and we are not changing or reading from user browser tabs. Therefore, there is no requirement for a content script for a chrome extension. We simply listen for clicks on the extension icon. For this, we need a background.js file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/midhunz/close-all-tabs"&gt;Source Github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step 1:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create A New Directory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open terminal, make a new directory called “close-all-tabs” and open your favorite text editor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mkdir close-all-tabs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order for Chrome to load your plugin, the extension files need to be pointed to a folder on your computer. In this directory, you can add all of the files you need for your extension.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Create a file called manifest.json in the newly created folder.&lt;br&gt;
The manifest.json file contains information about the extension. It is written in JSON format.V3 is used in this example&lt;br&gt;
You can read more about what it contains in Google Chrome developer documentation: Manifest File Format&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{&lt;br&gt;
    "manifest_version": 3,&lt;br&gt;
    "name": "Close All Tabs",&lt;br&gt;
    "description": "Close all open tabs and create an empty tab",&lt;br&gt;
    "version": "0.0.1",&lt;br&gt;
    "icons": {&lt;br&gt;
        "48": "icons/48.png",&lt;br&gt;
        "128": "icons/128.png"&lt;br&gt;
    },&lt;br&gt;
    "background": {&lt;br&gt;
        "service_worker": "background.js"&lt;br&gt;
    },&lt;br&gt;
    "action": {}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Create a background.js&lt;/strong&gt;&lt;br&gt;
it contains listeners for browser events that are important to the extension. It lies dormant until an event is fired then performs the instructed logic. An effective background script is only loaded when it is needed and unloaded when it goes idle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;// toolbar button event listener&lt;br&gt;
chrome.action.onClicked.addListener(function (thisTab) {&lt;br&gt;
    chrome.tabs.create({}, function (newTab) {&lt;br&gt;
        let querying = chrome.tabs.query({}, function (tabs) {&lt;br&gt;
for (let tab of tabs) {&lt;br&gt;
                if (tab.id !== newTab.id) chrome.tabs.remove(tab.id);&lt;br&gt;
            }&lt;br&gt;
});&lt;br&gt;
    });&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;br&gt;
Create a folder called icons and keep our extension icon in 3 different sizes in it&lt;br&gt;
manifest.json&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"icons": {&lt;br&gt;
        "16": "icons/16.png",&lt;br&gt;
        "48": "icons/48.png",&lt;br&gt;
        "128": "icons/128.png"&lt;br&gt;
    },&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;br&gt;
Load Extention to chrome&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9WAeYD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2h9eo0d9xzf9qz0kac8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9WAeYD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2h9eo0d9xzf9qz0kac8f.png" alt="Image description" width="880" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;1. Go to chrome://extensions in your browser&lt;/li&gt;
&lt;li&gt;To enable Developer mode, check the box in the top right-hand corner, as shown above:&lt;/li&gt;
&lt;li&gt;To load an unpacked extension, click Load unpacked extension to bring up the file selection dialog.&lt;/li&gt;
&lt;li&gt;The extension will be loaded and active as soon as it is valid! A message will appear at the top of the page if it is invalid. Please correct the error and try again.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYdu-bQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1shakxgje3pa2tdsjj9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYdu-bQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1shakxgje3pa2tdsjj9y.png" alt="Image description" width="880" height="595"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s now time to test our chrome extension&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnGf1GnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05tp6lqa2yj6a508cjj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnGf1GnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05tp6lqa2yj6a508cjj9.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pin Extension to browser&lt;/li&gt;
&lt;li&gt;Open multiples tabs&lt;/li&gt;
&lt;li&gt;Click on the extension&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/midhunz/close-all-tabs"&gt;close-all-tabs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More resources&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/"&gt;Google official starter guide — build a browse action chrome extension&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/reference/"&gt;Chrome Platform API Reference&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/mv3/overview/"&gt;Chrome Extension Architectural Overview&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>SQL Basics (Zero to Hero)- Part 01</title>
      <author>Suresh Ayyanna</author>
      <pubDate>Sat, 15 Jan 2022 19:24:52 +0000</pubDate>
      <link>https://dev.to/sureshayyanna/sql-basics-zero-to-hero-part-01-53mi</link>
      <guid>https://dev.to/sureshayyanna/sql-basics-zero-to-hero-part-01-53mi</guid>
      <description>&lt;p&gt;&lt;strong&gt;SQL - Structured Query Language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A table is a collection of related data entries and it consists of columns and rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Eg: SELECT * FROM Customers;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt; It will retrieve all records data from customer table.&lt;/p&gt;

&lt;p&gt;Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most Important SQL Commands&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL SELECT Statement&lt;/strong&gt;&lt;br&gt;
The SELECT statement is used to select data from a database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--&amp;gt; SELECT column1, column2,...  FROM table_name;
--&amp;gt; SELECT * FROM table_name;
--&amp;gt; SELECT DISTINCT column1 FROM table_name        #Unique values
--&amp;gt; SELECT COUNT(DISTINCT Country) FROM Customers;  #Gives count

SELECT column1, column2, ...
FROM table_name
WHERE condition;

SELECT * FROM Customers
WHERE Country='India' OR Country='USA';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL ORDER BY Keyword&lt;/strong&gt;&lt;br&gt;
ORDER BY keyword is used to sort the result-set in ascending or descending order.&lt;br&gt;
The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Syntax:
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

Example:
SELECT * FROM Customers
ORDER BY Country DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL INSERT INTO Statement&lt;/strong&gt;&lt;br&gt;
The INSERT INTO statement is used to insert new records in a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
Example:
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Suresh', 'Bengaluru', 'India');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A field with a NULL value is a field with no value.&lt;/p&gt;

&lt;p&gt;If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_names
FROM table_name
WHERE column_name IS NULL;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL UPDATE Statement&lt;/strong&gt;&lt;br&gt;
The UPDATE statement is used to modify the existing records in a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Here, WHERE clause that determines how many records will be updated.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL DELETE Statement&lt;/strong&gt;&lt;br&gt;
The DELETE statement is used to delete existing records in a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM table_name WHERE condition;

DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM table_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL MIN() and MAX() Functions&lt;/strong&gt;&lt;br&gt;
The MIN() function returns the smallest value of the selected column.&lt;/p&gt;

&lt;p&gt;The MAX() function returns the largest value of the selected column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT MIN(column_name) FROM table_name WHERE condition;

SELECT MAX(column_name) FROM table_nameWHERE condition;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL COUNT(), AVG() and SUM() Functions&lt;/strong&gt;&lt;br&gt;
The COUNT() function returns the number of rows that matches a specified criterion.&lt;br&gt;
The AVG() function returns the average value of a numeric column. &lt;br&gt;
The SUM() function returns the total sum of a numeric column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT COUNT(column_name) FROM table_name WHERE condition;
SELECT AVG(column_name)   FROM table_name WHERE condition;
SELECT SUM(column_name)   FROM table_name WHERE condition;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL LIKE Operator&lt;/strong&gt;&lt;br&gt;
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.&lt;/p&gt;

&lt;p&gt;There are two wildcards often used in conjunction with the LIKE operator:&lt;/p&gt;

&lt;p&gt;The percent sign (%) represents zero, one, or multiple characters&lt;br&gt;
 The underscore sign (_) represents one, single character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column1, column2 FROM table_name
WHERE columnN LIKE pattern;

Example:
WHERE CustomerName LIKE 'a%'--&amp;gt;Finds any values that start with "a"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL IN Operator&lt;/strong&gt;&lt;br&gt;
The IN operator allows you to specify multiple values in a WHERE clause.&lt;/p&gt;

&lt;p&gt;The IN operator is a shorthand for multiple OR conditions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL BETWEEN Operator&lt;/strong&gt;&lt;br&gt;
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.&lt;/p&gt;

&lt;p&gt;The BETWEEN operator is inclusive: begin and end values are included.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

Example:
SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL GROUP BY Statement&lt;/strong&gt;&lt;br&gt;
The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".&lt;/p&gt;

&lt;p&gt;The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL HAVING Clause&lt;/strong&gt;&lt;br&gt;
The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**Comments**
Single line comments start with --.
Multi-line comments start with /* and end with */.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>testing</category>
      <category>database</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
