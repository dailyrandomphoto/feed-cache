<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn the useReducer hook in 5 minutes with simple example [video]</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 20 Jul 2021 08:49:42 +0000</pubDate>
      <link>https://dev.to/thenerdydev/learn-the-usereducer-hook-in-5-minutes-with-simple-example-video-4hjn</link>
      <guid>https://dev.to/thenerdydev/learn-the-usereducer-hook-in-5-minutes-with-simple-example-video-4hjn</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, let us understand the &lt;strong&gt;useReducer hook in React.js&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%9C%8F-code-for-the-video"&gt;
  &lt;/a&gt;
  ✏ &lt;strong&gt;CODE&lt;/strong&gt; for the video:
&lt;/h1&gt;

&lt;p&gt;Let us understand the first code down below. Here we are using the &lt;strong&gt;useReducer&lt;/strong&gt; hook to setup a state for our counter with a default initial value of 0 to begin with. Also we have our &lt;strong&gt;counterReducer&lt;/strong&gt; function, which by default gets the state implicitly passed to it by React and the second argument is the value, so something that we dispatch from our two buttons. &lt;/p&gt;

&lt;p&gt;So we have two buttons, one for &lt;strong&gt;INCREMENT&lt;/strong&gt; and other one for &lt;strong&gt;DECREMENT&lt;/strong&gt;. So the first button &lt;em&gt;increments&lt;/em&gt; the value of counter by 1 whereas the second button &lt;em&gt;decrements&lt;/em&gt; the value of counter by 1.&lt;br&gt;
Now we can improve this by write a more &lt;strong&gt;declarative&lt;/strong&gt; code to achieve this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Decrement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here is the second code snippet. Here instead of &lt;em&gt;dispatching a value we are dispatching an action with the type property&lt;/em&gt;. So we are just declaring and hence &lt;strong&gt;decoupling&lt;/strong&gt; our state updating logic from the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Decrement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So for &lt;strong&gt;detailed&lt;/strong&gt; understanding, please check the complete video that explains the above example. &lt;/p&gt;

&lt;p&gt;📺 &lt;strong&gt;VIDEO&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AAfZjoE2eCk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading !&lt;/p&gt;

&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;br&gt;
👉🏻 Follow me on Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt; &lt;br&gt;
👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A First Look at How To Set Up React 18 Alpha with Snowpack and Vercel</title>
      <author>deji adesoga</author>
      <pubDate>Tue, 20 Jul 2021 08:01:19 +0000</pubDate>
      <link>https://dev.to/desoga/a-first-look-at-how-to-set-up-react-18-alpha-with-snowpack-and-vercel-3fd5</link>
      <guid>https://dev.to/desoga/a-first-look-at-how-to-set-up-react-18-alpha-with-snowpack-and-vercel-3fd5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#if-you-prefer-watching-a-video"&gt;
  &lt;/a&gt;
  If you prefer watching a video...
&lt;/h2&gt;

&lt;h6&gt;
  &lt;a href="#be-sure-to-subscribe-to-the-official-code-angle-youtube-channel-for-more-videos"&gt;
  &lt;/a&gt;
  Be sure to Subscribe to the Official &lt;a href="https://www.youtube.com/c/TheCodeAngle/videos"&gt;Code Angle&lt;/a&gt; Youtube Channel for more videos.
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=enqRAjGox2Q" title="How to setup and Deploy React 18 Alpha using Snowpack and Vercel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-X7nJ0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626749625/react18.png" alt="Alternate Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Talk is cheap. Show me the code&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;― Linus Torvalds&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Installation and Setup of React using Snowpack&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Folder Restructure&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;code overview&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Running the app&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Deployment Process Using Vercel&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Earlier this month the React Team released some updates concerning the release of React 18. These updates include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Work has begun on the React 18 release, which will be the next major version.&lt;/li&gt;
&lt;li&gt;  A working group has been created to prepare the community for the gradual adoption of new features.&lt;/li&gt;
&lt;li&gt;  An Alpha version has already been published for library authors to try and provide valuable feedback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The purpose of this tutorial is to set up the React 18 Alpha version using SnowPack, a lightning-fast frontend build tool, designed for the modern web. Then we deploy on &lt;strong&gt;Vercel&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-and-setup-of-react-18-alpha-using-snowpack"&gt;
  &lt;/a&gt;
  Installation and Setup of React 18 Alpha using Snowpack
&lt;/h2&gt;

&lt;p&gt;First, you need to have &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; installed, once that is done then you can now install &lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt;. You can use the command below to install Snowpack.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install snowpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is installed, then you can head to a directory where you want to put your new project.&lt;/p&gt;

&lt;p&gt;Now run the following command in your terminal to create a new directory called &lt;strong&gt;&lt;em&gt;react-snowpack.&lt;/em&gt;&lt;/strong&gt; This will automatically generate a minimal boilerplate template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-snowpack-app react-snowpack --template @snowpack/app-template-minimal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now head to the new directory with the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-snowpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once inside this directory, we can finally install the React 18 Alpha version by running the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react@alpha react-dom@alpha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is done, you can check your package.json file to confirm &lt;strong&gt;&lt;em&gt;React 18 Alpha&lt;/em&gt;&lt;/strong&gt; has been installed. It should look something like what we have below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^18.0.0-alpha-cb8afda18-20210708"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^18.0.0-alpha-cb8afda18-20210708"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#folder-restructure"&gt;
  &lt;/a&gt;
  Folder Restructure
&lt;/h2&gt;

&lt;p&gt;React makes use of a templating language called &lt;strong&gt;JSX&lt;/strong&gt;. &lt;strong&gt;JSX&lt;/strong&gt; stands for JavaScript XML. It is an inline markup that looks like &lt;strong&gt;HTML&lt;/strong&gt; that gets transformed to &lt;strong&gt;JavaScript&lt;/strong&gt; at runtime*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;The First step towards the folder restructure is to rename the &lt;strong&gt;&lt;em&gt;index.js&lt;/em&gt;&lt;/strong&gt; file with a &lt;strong&gt;jsx&lt;/strong&gt; extension like so, &lt;strong&gt;&lt;em&gt;index.jsx.&lt;/em&gt;&lt;/strong&gt; Doing this will allow &lt;strong&gt;&lt;em&gt;Snowpack&lt;/em&gt;&lt;/strong&gt; to know that we are running a React project.&lt;/p&gt;

&lt;p&gt;Next up we create an &lt;strong&gt;src&lt;/strong&gt; and &lt;strong&gt;public&lt;/strong&gt; folder. Once this is done, we move the &lt;strong&gt;&lt;em&gt;index.jsx&lt;/em&gt;&lt;/strong&gt; file inside the &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; folder, still inside the &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; folder, we will create a new file called &lt;strong&gt;&lt;em&gt;app.jsx&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;
Both the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;index.css&lt;/em&gt;&lt;/strong&gt; file will also be moved into the &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;In the end, we should have the folder structure below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; public
  &amp;gt; index.css
  &amp;gt; index.html
&amp;gt; src
  &amp;gt; App.jsx
  &amp;gt; index.jsx
.gitignore
 package-lock.json
 package.json
 snowpack.config.mjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-overview"&gt;
  &lt;/a&gt;
  Code Overview
&lt;/h2&gt;

&lt;p&gt;We are going to have code modification in four files(&lt;strong&gt;&lt;em&gt;index.html, App.jsx, index.jsx and snowpack.config.mjs&lt;/em&gt;&lt;/strong&gt;) before we start up the app and deploy it on Vercel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Starter Snowpack App"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/index.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Starter Snowpack App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/dist/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index.html code, three things have to be noted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt; which we will refer to in the index.jsx file.&lt;/li&gt;
&lt;li&gt;  In the script tag, we have a type called module to enable snowpack to know we will be making use of ES6 syntax.&lt;/li&gt;
&lt;li&gt;  Also in the script tag, we have an src attribute to signify the path of our deployment directory which will be configured in the &lt;strong&gt;&lt;em&gt;snowpack.config.mjs&lt;/em&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#appjsx"&gt;
  &lt;/a&gt;
  App.jsx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
          &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://res.cloudinary.com/dz4tt9omp/image/upload/v1625528354/react.png"&lt;/span&gt;
          &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React 18 Alpha Setup Deployed on Vercel with SnowPack&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above in the &lt;strong&gt;&lt;em&gt;app.jsx&lt;/em&gt;&lt;/strong&gt; file, we generate a simple &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; boilerplate template using a functional component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexjsx"&gt;
  &lt;/a&gt;
  index.jsx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;index.jsx&lt;/em&gt;&lt;/strong&gt; file, we did three things to enable us startup the app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, we import &lt;strong&gt;React, ReactDOM&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;App.jsx&lt;/em&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;  Then we created a variable to get the id in the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;  Finally we made use of the new createRoot API in &lt;strong&gt;React 18&lt;/strong&gt; to render the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#snowpackconfigmjs"&gt;
  &lt;/a&gt;
  snowpack.config.mjs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;snowpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;SnowpackUserConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;    &lt;span class="na"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt; ... &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;
  &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt; Enable an SPA Fallback in development: &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;
    &lt;span class="c1"&gt;// {"match": "routes", "src": ".\*", "dest": "/index.html"},&lt;/span&gt;
  &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="na"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bundle&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;// "bundle": true,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;packageOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;devOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every Snowpack app makes use of the &lt;strong&gt;&lt;em&gt;snowpack.config.mjs&lt;/em&gt;&lt;/strong&gt; file for any configurations like the deployment process. In this project, we will only edit the mount object by adding the &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; key.&lt;/p&gt;

&lt;p&gt;These serve as a pointer to the path where our deployment folder will be built when we run the build command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-application"&gt;
  &lt;/a&gt;
  Running the Application
&lt;/h2&gt;

&lt;p&gt;Now with all our files saved, we can head back to our terminal and run the start command &lt;code&gt;npm run start&lt;/code&gt;, which will produce the page below in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" alt="page preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our &lt;strong&gt;&lt;em&gt;React 18 alpha&lt;/em&gt;&lt;/strong&gt; app is successfully up and running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-process-using-vercel"&gt;
  &lt;/a&gt;
  Deployment Process using Vercel
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vercel enables developers to host websites and web services that deploy instantly and scale automatically all without any configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-Vercel&lt;/strong&gt; Documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first step to take towards deployment is to run the command below at the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a &lt;strong&gt;build&lt;/strong&gt; directory. Inside the &lt;strong&gt;build&lt;/strong&gt; directory is a &lt;strong&gt;&lt;em&gt;dist&lt;/em&gt;&lt;/strong&gt; folder that contains the code we will push to &lt;strong&gt;Vercel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next up we do the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1). Install Vercel &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do this we run the command&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;npm i -g vercel&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2). Login into Vercel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After installing Vercel globally on your machine. Type &lt;code&gt;vercel&lt;/code&gt; in the terminal. This will prompt you to log into your account if you are not already logged in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3).  Project Setup and Deployment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpyDmCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626647529/react-snoww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpyDmCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626647529/react-snoww.png" alt="prompt terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To summarize the prompt question in the image above, the following questions will be asked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Set up and deploy — &lt;strong&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;(It's a new application).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  Which scope do you want to deploy to? &lt;em&gt;- Select the name of your account.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  Found project "desoga10/snowpack-react". Link to it? - &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt; (Because we want to deploy as a different project).*&lt;/li&gt;
&lt;li&gt;  Link to a different existing project? - &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;(Because we are creating a new project).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  What’s your project's name? &lt;em&gt;(react-snoww).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  In which directory is your code created? ./build (It's in the build folder we generated with the &lt;strong&gt;&lt;em&gt;npm run build&lt;/em&gt;&lt;/strong&gt; command).&lt;/li&gt;
&lt;li&gt;   Want to override the settings? &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;(To prevent Vercel from making changes to or default settings ).&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vercel will now build the application, installing all dependencies in the process. When the installation is done, an inspect link will be available in the terminal. With this link, we can access the Vercel dashboard to see our deployed app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MC-GKSna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626648623/vercel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MC-GKSna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626648623/vercel.png" alt="project dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4).  Open the Deployed Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now visit the newly deployed project by clicking on the “visit” button on your dashboard shown in the image above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" alt="live project image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can find the deployed code in my &lt;a href="https://github.com/desoga10/react-snow"&gt;GitHub&lt;/a&gt; account.&lt;/p&gt;

&lt;p&gt;I create &lt;a href="https://www.youtube.com/TheCodeAngle"&gt;Youtube&lt;/a&gt; tutorials too, make sure to subscribe, thank you.&lt;/p&gt;

</description>
      <category>react</category>
      <category>vercel</category>
      <category>snowpack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I developed my first fullstack (MERN) project!</title>
      <author>Ajithmadhan</author>
      <pubDate>Tue, 20 Jul 2021 08:00:28 +0000</pubDate>
      <link>https://dev.to/ajithmadhan11/how-i-developed-my-first-fullstack-mern-project-39ic</link>
      <guid>https://dev.to/ajithmadhan11/how-i-developed-my-first-fullstack-mern-project-39ic</guid>
      <description>&lt;p&gt;Learning a new Technology is not only watching tutorials and cloning the templates from the tutor's repository, always try to built your own project without sticking to the tutorials &lt;strong&gt;explore and read documentations&lt;/strong&gt;,&lt;strong&gt;Design you own Schemas&lt;/strong&gt;,&lt;strong&gt;Write custom Apis&lt;/strong&gt;,etc... In this blog I will walkthrough my step by step process in developing my first MERN stack project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-amp-design"&gt;
  &lt;/a&gt;
  Plan &amp;amp; Design
&lt;/h2&gt;

&lt;p&gt;Always have a design/plan of the architecture that you have planned to build.In this project I have adopted the MVC architecture and done a initial design of &lt;strong&gt;Models&lt;/strong&gt; , &lt;strong&gt;Controllers&lt;/strong&gt; and even &lt;strong&gt;Routes&lt;/strong&gt; and &lt;strong&gt;middlewares&lt;/strong&gt; for backend. Below is the screenshot of my initial backend design.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adnIr2I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwhgei4jguass8wxap1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adnIr2I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwhgei4jguass8wxap1h.png" alt="MVC design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For frontend,design your VIEW part of the application using any tools like figma ,adobe xd etc...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdQPryd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhcmki2oz9lw3ms8ue6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdQPryd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhcmki2oz9lw3ms8ue6.png" alt="Figma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execute"&gt;
  &lt;/a&gt;
  Execute
&lt;/h3&gt;

&lt;p&gt;I started with writing my schemas for database I used the &lt;strong&gt;Nosql&lt;/strong&gt; db &lt;strong&gt;Mongo&lt;/strong&gt; and I had 4 &lt;strong&gt;MODELS&lt;/strong&gt; in my application.&lt;br&gt;
After that I started an &lt;strong&gt;EXPRESS SERVER&lt;/strong&gt; in localhost and connected my Db with it and once my app is up and running I started with my backend controllers and wrote APIs for my application corresponding to the routes that I designed initially.&lt;br&gt;
My backend File Structure,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBVL6O0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdkv0mpnr9mauule9p0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBVL6O0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdkv0mpnr9mauule9p0n.png" alt="File Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test"&gt;
  &lt;/a&gt;
  Test
&lt;/h2&gt;

&lt;p&gt;Side by Side while writing Apis make sure you test them, so that it won't be any problem at last.&lt;br&gt;
I prefer using &lt;strong&gt;Postman&lt;/strong&gt; for testing my Apis&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Pf1uTXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur2wvcvufxxlyfkel1a4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Pf1uTXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur2wvcvufxxlyfkel1a4.png" alt="Post man"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-frontend"&gt;
  &lt;/a&gt;
  Designing frontend
&lt;/h2&gt;

&lt;p&gt;Once all backend stuffs are done and tested I moved to frontend.&lt;br&gt;
By referring my figma design I stated to design my frontend using REACT (jsx).For a fresher like me it is not a easy task to design the frontend.I used my &lt;strong&gt;local server&lt;/strong&gt; for my backend and used my custom Apis for the frontend and for state management I used &lt;strong&gt;REDUX&lt;/strong&gt; for checking the Auth status of a user.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKKh1N-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcmgfc51b896c4h815hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKKh1N-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcmgfc51b896c4h815hg.png" alt="frontend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-and-technologies-that-i-used-in-this-project"&gt;
  &lt;/a&gt;
  Tools and Technologies that I used in this project
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Frontend&lt;/strong&gt; - Reactjs,Material Ui Redux(state management)&lt;br&gt;
&lt;strong&gt;Backend&lt;/strong&gt; - Nodejs,Expressjs&lt;br&gt;
&lt;strong&gt;Database&lt;/strong&gt; - Mongodb&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt; - Coggle.it , Figma ,Postman ,Robo3T&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Repository link&lt;/strong&gt; - &lt;a href="https://github.com/ajithMadhan11/hashfeed-frontend"&gt;Hashfeed-Frontend&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Backend Repository link&lt;/strong&gt; - &lt;a href="https://github.com/ajithMadhan11/Hashfeed-backend"&gt;Hashfeed-Backend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And that's how I developed my first MVP of my app and will be still engaged in this project and will be adding more features to it&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stop-sticking-to-tutorials-and-start-your-own-project-your-learning-curve-will-grow-exponentially"&gt;
  &lt;/a&gt;
  Stop sticking to tutorials and start your own project, your learning curve will grow exponentially
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>mongodb</category>
      <category>express</category>
    </item>
    <item>
      <title>How to debug Node.js using the builtin debugger</title>
      <author>Siddharth</author>
      <pubDate>Tue, 20 Jul 2021 07:35:41 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/debug-nodejs-natively-35ba</link>
      <guid>https://dev.to/siddharthshyniben/debug-nodejs-natively-35ba</guid>
      <description>&lt;p&gt;It's about time you stop &lt;code&gt;console.log&lt;/code&gt;ing to debug code.&lt;br&gt;
Here, I'll show you how to use the builtin Node.js debugger.&lt;/p&gt;

&lt;p&gt;Most of you might be using your IDEs debugger to debug code, but did you know that &lt;strong&gt;Node.js has a built in debugger&lt;/strong&gt;? It's simple, but extremely powerful. Here, I'll show you how to use the builtin debugger.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You need to have Node.js installed, obviously. You also need to know JavaScript because you can't debug without writing code.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h3&gt;

&lt;p&gt;For this example, we will be debugging this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1123, 435, 8712, 843&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; NaN&lt;/span&gt;
&lt;span class="c1"&gt;// Why?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've been coding for a while, I'm pretty sure you already have spotted the mistake, but just assume that you haven't&lt;/p&gt;

&lt;p&gt;You can copy and paste this code to a new file if you want to follow along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-with-nodejs"&gt;
  &lt;/a&gt;
  Debugging with Node.js
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;You can run the debugger by running &lt;code&gt;node --inspect file.js&lt;/code&gt;. This opens a WebSocket connection to something like &lt;code&gt;ws://127.0.0.1:9229/uuid-here&lt;/code&gt;. Now, clients can connect to this debugger and debug code. You can even build your own clients!&lt;/p&gt;

&lt;p&gt;Node.js has a built in client which we can use by running &lt;br&gt;
&lt;code&gt;node inspect file.js&lt;/code&gt; (notice it's a &lt;em&gt;command&lt;/em&gt;, not an &lt;em&gt;option&lt;/em&gt; now). You can install the latest standalone version of this command by installing &lt;a href="https://github.com/nodejs/node-inspect"&gt;node-inspect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;node inspect file.js&lt;/code&gt;, you should get some output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;inspect&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Debugger&lt;/span&gt; &lt;span class="nx"&gt;listening&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:9229/d7d8aec2-819b-411a-abdd-900b6b90dbfc&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;help&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//nodejs.org/en/docs/inspector&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Debugger&lt;/span&gt; &lt;span class="nx"&gt;attached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Break&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1123, 435, 8712, 843&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get a special debug prompt which is used to run commands. You can check out the &lt;a href="https://nodejs.org/api/debugger.html"&gt;reference&lt;/a&gt;, but I'll show you some commands here.&lt;/p&gt;

&lt;p&gt;These commands are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cont&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;: Continue execution&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;next&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;: Step next&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;step&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;: Step in&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;out&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;: Step out&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pause&lt;/code&gt;: Pause running code (like pause button in Developer Tools)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we can now jump to the next line by typing &lt;code&gt;n&lt;/code&gt; and hitting enter. We'll then get output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1123, 435, 8712, 843&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the debugger has jumped to the next line. If your terminal supports colors, you will see the &lt;code&gt;0&lt;/code&gt; has been highlighted as it is the next step.&lt;/p&gt;

&lt;p&gt;Hit next again. You'll get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;debugging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; 
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how the debugger skipped an empty line for us.&lt;/p&gt;

&lt;p&gt;Now, we're reaching the important parts. Let's &lt;code&gt;watch&lt;/code&gt; our important variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;res&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this is an important line, we can &lt;code&gt;step&lt;/code&gt; instead of going to the next line. So type &lt;code&gt;s&lt;/code&gt; and hit enter, and you'll get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="nx"&gt;Watchers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; 
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see watched variables at the top. &lt;code&gt;res&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; is &lt;code&gt;'1123'&lt;/code&gt;. We can easily understand that &lt;code&gt;number + string = NaN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That was a pretty basic introduction to debugging Node.js. There's much more to learn. You can check out the &lt;a href="https://nodejs.org/api/debugger.html"&gt;docs&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;See you soon 👋!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>debugging</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>CSS + BEM Methodology = 🤘 </title>
      <author>Mohit Tanwani⚡</author>
      <pubDate>Tue, 20 Jul 2021 07:33:24 +0000</pubDate>
      <link>https://dev.to/tanwanimohit/css-bem-methodology-690</link>
      <guid>https://dev.to/tanwanimohit/css-bem-methodology-690</guid>
      <description>&lt;p&gt;We all follow naming conventions in programming languages, don't we? Now, what about CSS? Is there any need of naming convention in that? Of course! Maybe not in a small project, but when you start working on large projects you should organize your code properly so that anyone can easily get the gist of the functionality by just looking into the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Great codebases don't need comments. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-bem"&gt;
  &lt;/a&gt;
  What is BEM?
&lt;/h2&gt;

&lt;p&gt;BEM stands for Block Element Modifier. It is a Methodology that every web developer should follow. This makes development easy and enforces re-usability.&lt;br&gt;
Enough of the theory Let's understand this by an example 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kVp4Tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gerr6bcmhu28kmbgzqii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kVp4Tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gerr6bcmhu28kmbgzqii.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Here We can say,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Form = Block(An Independent meaningful entity)&lt;/li&gt;
&lt;li&gt;Input, Link, Button = Element(Part of Black, Which has no standalone meaning)&lt;/li&gt;
&lt;li&gt;Button types (primary/secondary) = Modifier(Represent state of Block or Element.) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#bem-methodology"&gt;
  &lt;/a&gt;
  BEM Methodology
&lt;/h2&gt;

&lt;p&gt;Let's continue with the above example. This is how you will name your CCS classes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#for-block"&gt;
  &lt;/a&gt;
  For Block:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form {
   // Your CSS
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#for-element"&gt;
  &lt;/a&gt;
  For Element:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form__input {
   // Your CSS
}
.form__button {
   // Your CSS
}
.form__link {
   // Your CSS
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#for-modifier"&gt;
  &lt;/a&gt;
  For Modifier:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form__button--primary {
   background: "blue";
}
.form__button--secondary {
   background: "green";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE: When using modifiers you will put all the common styles in &lt;code&gt;form__button&lt;/code&gt; so that you don't repeat them again&lt;/strong&gt;&lt;br&gt;
And here is how your HTML will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form class="form"&amp;gt;
   &amp;lt;input type="email" class="form__input" placeholder="Email"&amp;gt;
   &amp;lt;input type="email" class="form__input" placeholder="Email"&amp;gt;
   &amp;lt;button class="form__button form__button--primary"&amp;gt;Login&amp;lt;/button&amp;gt;
   &amp;lt;button class="form__button form__button--secondary"&amp;gt;Signup&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! I know it looks like an overhead but trusts me it will help you a lot in many different ways.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Host your images on Google Drive for free [Step By Step].</title>
      <author>Narottam04</author>
      <pubDate>Tue, 20 Jul 2021 07:25:03 +0000</pubDate>
      <link>https://dev.to/narottam04/host-your-images-on-google-drive-for-free-step-by-step-25m1</link>
      <guid>https://dev.to/narottam04/host-your-images-on-google-drive-for-free-step-by-step-25m1</guid>
      <description>&lt;p&gt;When you want to share a photo or gallery with friends, family, or even on the entire internet, an image hosting site is the best way to upload, store, and share your files. However, there are many image hosting sites, all with different features, some are free and some are paid, with free ones there is a risk of security and with paid ones, the problem is you have to pay money monthly. In this article, we will be hosting our images on good old trustable Google Drive.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/5wWf7GMbT1ZUGTDdTqM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5wWf7GMbT1ZUGTDdTqM/giphy.gif" alt="https://media.giphy.com/media/5wWf7GMbT1ZUGTDdTqM/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-1-open-google-drive-and-get-the-link-of-the-image"&gt;
  &lt;/a&gt;
  Step 1: Open Google drive and get the link of the image.
&lt;/h2&gt;



&lt;p&gt;First, log into your Google account and open Google Drive. Navigate to the image you want to host&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgXwvKjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1xKUD3LuvNQfQ89E1VqpDh9-qVUSmHDoy" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgXwvKjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1xKUD3LuvNQfQ89E1VqpDh9-qVUSmHDoy" alt="google drive" title="google drive"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;As an eg. I will be hosting my Instagram post 2.png which is stored on my google drive.&lt;/p&gt;



&lt;p&gt;PS: if you want to learn more about web development consider following my Instagram @_webdrip&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-2-get-the-sharable-link"&gt;
  &lt;/a&gt;
  Step 2: Get the sharable link
&lt;/h2&gt;



&lt;p&gt;Right-click on the image you want to host, and click on &lt;strong&gt;'Get Link'&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfbiBvCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZJkm9liESDRwlpRDCh7Xg0spseTS7Nx8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfbiBvCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZJkm9liESDRwlpRDCh7Xg0spseTS7Nx8" alt="drive" title="drive"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Change the &lt;strong&gt;'Restricted'&lt;/strong&gt; option to &lt;strong&gt;'Anyone with link'.&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j62CXLBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1rH5_jwOz3qdoLTX8dkzTTmeaLPcU6yJn" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j62CXLBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1rH5_jwOz3qdoLTX8dkzTTmeaLPcU6yJn" alt="link" title="link"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-3-copy-the-link"&gt;
  &lt;/a&gt;
  Step 3: Copy the link
&lt;/h2&gt;



&lt;p&gt;Copy the link by clicking &lt;strong&gt;'Copy Link&lt;/strong&gt;' button or by selecting the link and pressing &lt;strong&gt;'CTRL + C'&lt;/strong&gt; on your keyboard&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--50h5_bmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1nzH17fhEPk9r0Rd4u7w8rpmra-HZeKS_" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50h5_bmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1nzH17fhEPk9r0Rd4u7w8rpmra-HZeKS_" alt="copy link" title="copy link"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-4-go-to%C2%A0hostdriveimagepagesdev"&gt;
  &lt;/a&gt;
  Step 4: Go to &lt;a href="https://hostdriveimage.pages.dev/"&gt;hostdriveimage.pages.dev&lt;/a&gt;
&lt;/h2&gt;



&lt;p&gt;Now go to this website &lt;a href="https://hostdriveimage.pages.dev/"&gt;https://hostdriveimage.pages.dev/&lt;/a&gt; and paste the image link that you have copied from the drive and click on the 'generate' button.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3-ZGRm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DStz-HiSiTA2YlLVelcDpJxwwcIdTdnA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3-ZGRm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DStz-HiSiTA2YlLVelcDpJxwwcIdTdnA" alt="website" title="website"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-check-if-it-is-working"&gt;
  &lt;/a&gt;
  Step 5: Check if it is working
&lt;/h2&gt;



&lt;p&gt;Voila! if you have followed the steps properly your image will be hosted and will be live to be shared on the internet or with your friends.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eI0CBbBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DYxzoxX8vsWonFmu7rsLlMXaivB1vqSI" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eI0CBbBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DYxzoxX8vsWonFmu7rsLlMXaivB1vqSI" alt="final link" title="final link"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;To check the image I have hosted click on this link: &lt;a href="https://drive.google.com/uc?id=1MVHhp5WBHwhR1k-S0V52lajFs3Q4GPaa"&gt;&lt;/a&gt;&lt;a href="https://drive.google.com/uc?id=1MVHhp5WBHwhR1k-S0V52lajFs3Q4GPaa"&gt;https://drive.google.com/uc?id=1MVHhp5WBHwhR1k-S0V52lajFs3Q4GPaa&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTIRCC_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1f04-CXNoX3kXMU4LmH7pBn9LTqnKk3M9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTIRCC_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1f04-CXNoX3kXMU4LmH7pBn9LTqnKk3M9" alt="hosted image" title="hosted image"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;If you any doubts feel free to comment down below, would love to help you.&lt;/p&gt;



&lt;p&gt;PS: All the images on my blog website &lt;a href="https://blog.webdrip.in/"&gt;https://blog.webdrip.in/&lt;/a&gt; are hosted on google drive, Do give a visit!&lt;/p&gt;

</description>
      <category>tutorial</category>
    </item>
    <item>
      <title>How do we browse on internet? </title>
      <author>Narottam04</author>
      <pubDate>Tue, 20 Jul 2021 07:20:11 +0000</pubDate>
      <link>https://dev.to/narottam04/how-do-we-browse-on-internet-1234</link>
      <guid>https://dev.to/narottam04/how-do-we-browse-on-internet-1234</guid>
      <description>&lt;p&gt;When you type &lt;a href="http://youtube.com/"&gt;youtube.com&lt;/a&gt; into your browser (Chrome, Internet Explorer, Firefox, etc.), the browser makes an HTTP request. HTTP stands for HyperText Transfer Protocol, it is responsible for communication between web servers and clients.&lt;/p&gt;



&lt;p&gt;HTTP is a protocol( a set of rules or procedures for transmitting data between electronic devices) for browsers and servers to talk to each other. Humans, too, have protocols for talking to each other. Consider that when you meet someone, you often greet him or her with a handshake. Browsers and servers also greet and acknowledge each other according to HTTP.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/2HtWpp60NQ9CU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2HtWpp60NQ9CU/giphy.gif" alt="https://media.giphy.com/media/2HtWpp60NQ9CU/giphy.gif" title="Shake Hands"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Whenever you submit a form or click a button on the website you are using HTTP and going through the request and response cycle. Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). The messages sent by the client, usually a Web browser, are called requests, and the messages sent by the server as an answer are called responses.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVajEO4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1Vy4KDMqoGd_Dn8X2087JFOxNDqhJJQaq" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVajEO4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1Vy4KDMqoGd_Dn8X2087JFOxNDqhJJQaq" alt="how we search on internet" title="browser search"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;HTTP is stateless, which means that every request is completely independent eg. when you reload the page on the website or navigate to different pages on the website it doesn't remember anything about previous requests/response cycle, you can visualize this as transactions.&lt;/p&gt;



&lt;p&gt;We can use local storage, cookies, sessions to enhances user experiences but HTTP at its core is stateless.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Mb9TkJc357aDUo8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Mb9TkJc357aDUo8/giphy.gif" alt="https://media.giphy.com/media/3o6Mb9TkJc357aDUo8/giphy.gif" title="I don't remember"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#https"&gt;
  &lt;/a&gt;
  HTTPS
&lt;/h2&gt;



&lt;p&gt;HTTPS stands for Hyper Text Transfer Protocol Secure. Data sent back and forth through HTTPS is encrypted with SSL/TLS (SSL stands for Secure Sockets Layer, TLS stands for Transport Security Layer). Anytime the user is sending sensitive information it should be always through HTTPS eg. contact information/contact form, credit card detail, social security number. You can add HTTPS&lt;/p&gt;



&lt;p&gt;by installing an SSL certificate on your web host.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmdnxP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1MrSjryRACaoDjCC6svmKE84CwqyQecy-" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmdnxP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1MrSjryRACaoDjCC6svmKE84CwqyQecy-" alt="https" title="https"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#http-request-methods"&gt;
  &lt;/a&gt;
  HTTP Request Methods
&lt;/h2&gt;



&lt;p&gt;So when you type &lt;a href="https://www.youtube.com/"&gt;https://www.youtube.com/&lt;/a&gt; on the browser, you are sending a message from the client (your browser) to the server, the server receives the message and responds by sending the webpage to us.&lt;/p&gt;



&lt;p&gt;The request sent by the browser looks like something as shown below&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HTTP/1.1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Host:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;www.youtube.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;When a request is made to a server, it has some method attached to it, like GET in the above example. We are going to see 4 such methods but you can find more on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;MDN Docs&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#get"&gt;
  &lt;/a&gt;
  GET
&lt;/h2&gt;



&lt;p&gt;A get request is used when you need to fetch data from the server. eg. loading a HTML page, loading assets like CSS, JS, XML page etc.&lt;/p&gt;



&lt;p&gt;When you visit a webpage you make a GET request to a server by HTTP.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#post"&gt;
  &lt;/a&gt;
  POST
&lt;/h2&gt;



&lt;p&gt;A POST request is used when you are adding data to the server. eg. When you submit a contact form on the website or when you post a blog, You are sending data to the server and it will store data in your database.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#put"&gt;
  &lt;/a&gt;
  PUT
&lt;/h2&gt;



&lt;p&gt;A PUT request is used when you want to update data that is already on the server. eg. change the text, image of the blog post.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  DELETE
&lt;/h2&gt;



&lt;p&gt;A DELETE request delete data from the server.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#http-status-code"&gt;
  &lt;/a&gt;
  HTTP Status Code
&lt;/h2&gt;



&lt;p&gt;The response sent by the server when you request for youtube.com is shown below.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;HTTP/1.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OK&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application/binary&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;These unusual numbers send by the server are called as status code which tells the status of the request as it is 200 OK you will get &lt;a href="http://youtube.com/"&gt;the youtube.com&lt;/a&gt; homepage. Other common status codes are as follows.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZilognMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1dZVkp3BwKeSiB8z4m5l3wxSL3-utrodQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZilognMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1dZVkp3BwKeSiB8z4m5l3wxSL3-utrodQ" alt="status code" title="status code"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#common-status-codes"&gt;
  &lt;/a&gt;
  Common Status Codes
&lt;/h2&gt;



&lt;p&gt;200 - OK&lt;/p&gt;

&lt;p&gt;201 - OK created&lt;/p&gt;

&lt;p&gt;301 - Moved to new URL&lt;/p&gt;

&lt;p&gt;304 - Not modified(Cached version)&lt;/p&gt;

&lt;p&gt;400 - Bad Request&lt;/p&gt;

&lt;p&gt;401 - Unauthorized&lt;/p&gt;

&lt;p&gt;404 - Not found&lt;/p&gt;

&lt;p&gt;418 - I'm a teapot (April fools joke in 1998)&lt;/p&gt;

&lt;p&gt;500 - Internal Server Error&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#http-header-files"&gt;
  &lt;/a&gt;
  HTTP Header Files
&lt;/h2&gt;



&lt;p&gt;The response given by the server is in two parts i.e. header and a body.&lt;/p&gt;



&lt;p&gt;The header gives a status of the request, server name on which it is running, with detail about the content that has been requested as shown below.&lt;/p&gt;



&lt;p&gt;The body is a response that is gonna be an HTML page that you are trying to load, data that is sent from the server to the website, etc.&lt;/p&gt;



&lt;p&gt;There are three types of header, general, response, request.&lt;/p&gt;



&lt;p&gt;You can read more about HTTP header files on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers"&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#ip"&gt;
  &lt;/a&gt;
  IP
&lt;/h2&gt;



&lt;p&gt;So we learned, how the server and client respond to each other through HTTP but how the message sent by the client will be sent to the browser and vice versa. It is done through IP (internet protocol), every phone, laptop, and desktop in the world has a unique address and that unique address is called an IP address. In the real world, you can think of it as an address of a famous place or shop in your city, it will be always unique.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxR__2Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1La1YhOQEtEf-kTR3pPAhGUTbZda4u82u" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxR__2Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1La1YhOQEtEf-kTR3pPAhGUTbZda4u82u" alt="IP" title="IP"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;An IP address is a set of numbers and has 4 parts, and each part can take a value from 0 to 255(8bit).&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mf"&gt;255.255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#dhcp"&gt;
  &lt;/a&gt;
  DHCP
&lt;/h2&gt;



&lt;p&gt;Back in the day, to get internet on your computer, your internet service provider had to provide you IP address manually. This was not scalable as it requires extra work. So we have a protocol called DHCP (Dynamic Host Configuration Protocol) so when you boot your laptop or mobile phone, if it has support for that protocol it will automatically assign IP addresses and other communication parameters to devices connected to the network using a client-server architecture.&lt;/p&gt;



&lt;p&gt;You can read more about DHCP on &lt;a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoblmPLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1GR1OSuiJNELcciAzBI5UzjnJt8OBxNPn" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoblmPLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1GR1OSuiJNELcciAzBI5UzjnJt8OBxNPn" alt="dhcp" title="dhcp"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#dns"&gt;
  &lt;/a&gt;
  DNS
&lt;/h2&gt;



&lt;p&gt;DNS (Domain Name System) will convert the domain name of the website to an IP address, it is necessary because we know the website by their name but the internet knows from their IP addresses.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGKolzsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1LQNF0wSbd_H-aN7dT9hThqpo0FK09ZB6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGKolzsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1LQNF0wSbd_H-aN7dT9hThqpo0FK09ZB6" alt="dns" title="dns"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;If you want to look up the IP addresses of a website you can do that by opening the command prompt and typing as shown below&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;nslookup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;google.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can copy that address and on your browser type http://[ip address] you will be redirected to &lt;a href="http://google.com/"&gt;google.com&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You can read more about it on &lt;a href="https://en.wikipedia.org/wiki/Domain_Name_System"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#router"&gt;
  &lt;/a&gt;
  Router
&lt;/h2&gt;



&lt;p&gt;Let's say you type &lt;a href="http://google.com"&gt;google.com&lt;/a&gt; on the browser you are sending an envelope i.e. a request with ip address of the server in this case it will be google.com and your own ip address so that server can send the response to you. But how this request will get to google datacenter which might be far away from your home. The answer is it is done through millions of router around the globe.&lt;/p&gt;



&lt;p&gt;If you are using the internet in your house you might have one too, its sole purpose is to take data from your house to the internet and to send the response from the server back to your laptop, mobile or desktop, etc.&lt;/p&gt;



&lt;p&gt;You can check the route of the website from your command prompt by typing as shown below.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;traceroute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;google.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;if that doesn't work type 'tracert' instead of traceroute.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#tcp"&gt;
  &lt;/a&gt;
  TCP
&lt;/h2&gt;



&lt;p&gt;Now we have figured out how we can get the IP address of the server and the client and how we send them using routers all across the world. But how does the server know which data to send back to you? The data you have requested might be a webpage, voicemail, image, video, etc. For this, We need another protocol on our request envelope which we send to the server, it is called TCP (Transmission Control Protocol). TCP is a number that corresponds to a number which is a service that you want to send or access on your computer.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#22-ssh"&gt;
  &lt;/a&gt;
  22 SSH
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#53-dns"&gt;
  &lt;/a&gt;
  53 DNS
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#80-http"&gt;
  &lt;/a&gt;
  80 HTTP
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#443-https"&gt;
  &lt;/a&gt;
  443 HTTPS
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#587-smtp"&gt;
  &lt;/a&gt;
  587 SMTP
&lt;/h3&gt;



&lt;p&gt;when we access the webpage we use 80 or 443 TCP protocol.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;You can test this by typing &lt;a href="http://google.com/"&gt;http://google.com:80/&lt;/a&gt; or &lt;a href="https://google.com/"&gt;https://google.com:443/&lt;/a&gt; it will redirect you to &lt;a href="http://google.com/"&gt;google.com&lt;/a&gt; page.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;You can also test it on the command line as shown below&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;https://www.google.com:443/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
It should return with 200 OK Status code and with content type as text/html and with other stuff.&lt;/p&gt;



&lt;p&gt;You can read more about TCP on &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#tcpip"&gt;
  &lt;/a&gt;
  TCP/IP
&lt;/h2&gt;



&lt;p&gt;When you request a video or a high-quality image from the internet, it will not send you a whole image or video at once but with pieces of information using TCP/IP protocol. IP ensures every computer on the internet that speaks this protocol has an address, TCP ensures delivery of the data to the users.&lt;/p&gt;



&lt;p&gt;You can read more about TCP/IP in &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HTTP/1.1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Host:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;www.youtube.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more such insights, checkout my blog website blog.webdrip.in&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mf"&gt;255.255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create a simple Facebook and Instagram AR filter</title>
      <author>mrunankpawar</author>
      <pubDate>Tue, 20 Jul 2021 07:02:58 +0000</pubDate>
      <link>https://dev.to/mrunankpawar/create-a-simple-facebook-and-instagram-ar-filter-36fm</link>
      <guid>https://dev.to/mrunankpawar/create-a-simple-facebook-and-instagram-ar-filter-36fm</guid>
      <description>&lt;p&gt;Hello folks!&lt;/p&gt;

&lt;p&gt;We all are using social media and have used various AR Filters which are available on Facebook and Instagram. Well, what if I tell you that we can create our own AR Filter and publish it so that everyone can use it.&lt;/p&gt;

&lt;p&gt;This blog post will go through all the steps needed to create a simple AR Filter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-sparkar-studio-and-sparkar-player"&gt;
  &lt;/a&gt;
  Step 1: Install SparkAR Studio and SparkAR player
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spark AR Studio: Spark AR Studio is the place where we will be creating the effect&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spark AR Player: Spark AR Player is the place where we will be testing our effect (Android and iOS)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-2-keep-your-assets-ready"&gt;
  &lt;/a&gt;
  Step 2: Keep your assets ready
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I recommend that all the images you want in your effect must be ready in one folder so that it will be easy to just add those images as material later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can create the assets with the help of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Photoshop&lt;/li&gt;
&lt;li&gt;AR Library &lt;/li&gt;
&lt;li&gt;Canva&lt;/li&gt;
&lt;li&gt;Any editing app you wish to use&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-3-open-spark-ar-studio"&gt;
  &lt;/a&gt;
  Step 3: Open Spark AR studio
&lt;/h3&gt;

&lt;p&gt;Create a blank project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5W9VyOsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626447809765/dChEYZNau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5W9VyOsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626447809765/dChEYZNau.png" alt="Home.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how our working environment looks like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-add-a-face-tracker"&gt;
  &lt;/a&gt;
  Step 4: Add a face tracker
&lt;/h3&gt;

&lt;p&gt;By adding a Face Tracker to your effect you can track the face movement of the user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right-click in the scene panel and add a Face tracker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qvSm937--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626489712243/uya9_OPdq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qvSm937--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626489712243/uya9_OPdq.png" alt="facetracker.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-planes"&gt;
  &lt;/a&gt;
  Step 5: Add planes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Once again right-click in the scenes panel and add a plane to your project.&lt;/li&gt;
&lt;li&gt;And drag it under the face-tracker. This will sync the plane with your face movement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GSZ0dBUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626489820677/7N4kYxwP1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GSZ0dBUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626489820677/7N4kYxwP1.png" alt="plane.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-add-material-to-the-plane"&gt;
  &lt;/a&gt;
  Step 6: Add material to the plane.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Click on the plane in the scenes panel&lt;/li&gt;
&lt;li&gt;Now add material to your plane. (on the right side).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zx1DsgEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490011689/2c6XHJqed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zx1DsgEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490011689/2c6XHJqed.png" alt="material.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Try to rename the materials such that you will be able to understand them later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-7-adding-texture-to-the-material"&gt;
  &lt;/a&gt;
  Step 7: Adding texture to the material.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;On the right side you will be able to see the texture. &lt;/li&gt;
&lt;li&gt;Select your assets from the drop-down or by choosing the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FbLBm11P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490153731/EGV9x7T0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FbLBm11P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490153731/EGV9x7T0c.png" alt="texture.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-8-adjustments"&gt;
  &lt;/a&gt;
  Step 8: Adjustments
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can adjust the position of the plane by playing around with the x, y, and z axes.&lt;/li&gt;
&lt;li&gt;You can also perform image transformations by changing the values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5P9ugopw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490644124/UiJTSnJCvF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5P9ugopw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490644124/UiJTSnJCvF.png" alt="adjustments.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-9-testing"&gt;
  &lt;/a&gt;
  Step 9: Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Now, we are ready with our filter and it's time for testing.&lt;/li&gt;
&lt;li&gt;You can test it using Spark AR Player.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U-jxfr9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490706686/0ZqI8JHly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-jxfr9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490706686/0ZqI8JHly.png" alt="test.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-10-publish-your-effect"&gt;
  &lt;/a&gt;
  Step 10: Publish your effect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now it's time for the world to use your AR Filter. &lt;/li&gt;
&lt;li&gt;Click on the Publish button.&lt;/li&gt;
&lt;li&gt;You have to provide the required details for publishing the filter and you're done from your side.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wrj4MgWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490844243/TX6gtFD-y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wrj4MgWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626490844243/TX6gtFD-y.png" alt="publish.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Keep a small AR Filter demo video and also a logo for your AR Filter ready before clicking the Publish button&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#congratulations-you-can-now-create-and-publish-your-own-ar-filters"&gt;
  &lt;/a&gt;
  Congratulations, you can now create and publish your own AR Filters.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you.
&lt;/h4&gt;

</description>
      <category>arfilter</category>
      <category>sparkar</category>
      <category>augmentedreality</category>
      <category>facebook</category>
    </item>
    <item>
      <title>Best 5 Startup Ideas For Developers And Programmers</title>
      <author>motivatedman</author>
      <pubDate>Tue, 20 Jul 2021 06:44:57 +0000</pubDate>
      <link>https://dev.to/motivatedman/best-5-startup-ideas-for-developers-and-programmers-4a37</link>
      <guid>https://dev.to/motivatedman/best-5-startup-ideas-for-developers-and-programmers-4a37</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Zhz5pUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svpekucq94nezyq4sc1f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Zhz5pUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svpekucq94nezyq4sc1f.jpg" alt="startup ideas for developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can't survive without cash so everyone has to struggle for it. Some go for jobs, and some do business but everyone has to work somehow. Developers have two options, either to go for a job or choose to start a business.&lt;/p&gt;

&lt;p&gt;Starting a business should be ones’ ultimate goal and one can start working on it anytime. Even kids, there are &lt;a href="https://sturdybusiness.com/businesses-for-kids/"&gt;some practical businesses for kids&lt;/a&gt; that they can start in the early ages. But, I am never against doing jobs.&lt;/p&gt;

&lt;p&gt;Because a job is a place where you learn and grow. If you're a new developer who hasn't worked with companies then it's far better to work for them because they will teach you in a year that you will learn in a decade yourself.&lt;/p&gt;

&lt;p&gt;But if you're done with doing jobs, and now you have realized that you should give yourself a chance to start your startup, then here are some &lt;em&gt;easy-to-start startup&lt;/em&gt; &lt;em&gt;ideas&lt;/em&gt; for you.&lt;/p&gt;

&lt;p&gt;Before we get started, let me guide you on a significant business tip. According to &lt;a href="https://sturdybusiness.com/primary-reasons-new-businesses-fail/"&gt;SturdyBusiness&lt;/a&gt;, 45% of the new businesses fail in the first 4 years, and the &lt;em&gt;primary reason&lt;/em&gt; for the failure is &lt;em&gt;lack of knowledge&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once you are ready to start your business, it's far better to learn to start an online business from an expert. There could be many things to consider even before you start your business.&lt;/p&gt;

&lt;p&gt;Let's explore easy-to-start startup ideas for developers/programmers now.&lt;/p&gt;

&lt;h2&gt;Start a software house&lt;/h2&gt;

&lt;p&gt;If you can create software, then it's a great opportunity for you to &lt;a href="https://www.wikihow.com/Start-a-Software-Company"&gt;start a software company&lt;/a&gt;. The advantage is that you alone can start with even at your home, it will be a sole proprietorship company. Later on, once you're getting more offers, you can hire others to join you.&lt;/p&gt;

&lt;p&gt;You should keep in mind that great things take time, and hence, it will take a little time to grow and get clients organically, but if you do it properly, you will become a leading company in your industry.&lt;/p&gt;

&lt;h2&gt;Create a cryptocurrency&lt;/h2&gt;

&lt;p&gt;Many things have changed with time. Years ago, &lt;em&gt;Gold&lt;/em&gt; and &lt;em&gt;Silver&lt;/em&gt; had been currencies of the world, and later on, paper currency replaced it. Now the &lt;a href="https://en.wikipedia.org/wiki/Cryptocurrency"&gt;cryptocurrency&lt;/a&gt; market has become the world's largest company in terms of investments.&lt;/p&gt;

&lt;p&gt;That means people have realized that &lt;strong&gt;Crypto&lt;/strong&gt; is the future currency of earth.&lt;/p&gt;

&lt;p&gt;If you are a developer, you have a great chance to create a cryptocurrency for yourself or for someone else. It won’t take much time to understand how to do it. A friend of mine created it easily.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;But, creating it for others could be a great option because in crypto - it's not only introducing a currency, surely you can do that easily - but many other things. You can’t handle everything alone until you have separate investments for your company.&lt;/p&gt;

&lt;p&gt;So there are two options, either to find people who could market your currency, and give it security, etc or do it for companies, both methods work.&lt;/p&gt;

&lt;h2&gt;Technical writer&lt;/h2&gt;

&lt;p&gt;If you're a developer and you are good at writing naturally. It's a great opportunity to become a technical writer. Technical writers are those who help people understand complex programs and software.&lt;/p&gt;

&lt;p&gt;It’s not over yet.&lt;/p&gt;

&lt;p&gt;Companies spend billions of dollars on content marketing each year so you could be an asset for companies, as a co-worker. You can start a marketing company where you shall produce content for them.&lt;/p&gt;

&lt;p&gt;On the other hand, technical writers are in high demand on freelancing platforms, it’s great to start with. Once you work with some companies, surely you could build long-lasting relationships with companies that will help you grow your business massively.&lt;/p&gt;

&lt;h2&gt;Start your own blog&lt;/h2&gt;

&lt;p&gt;Frankly speaking, it's one of the best businesses that I believe everyone can start easily. I don't want to exaggerate that as you will start your blog today, you will start earning from it. But it's a fact that sooner or later, you will find a reason to quit your job.&lt;/p&gt;

&lt;p&gt;The reason behind my strong belief is that as you keep working on your blog, it becomes your long-lasting asset that never ends.&lt;/p&gt;

&lt;p&gt;I recently received an email from an Asian blogger, who is generating $10,000 dollars a month from his blog. That’s a huge amount.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before you give it a shot&lt;/strong&gt;, please, keep in mind, as becoming a developer or programmer, took your time learning it, blogging has also its basics to learn.&lt;/p&gt;

&lt;p&gt;Don't get in it without learning the basics of it. &lt;/p&gt;

&lt;p&gt;For example, every blogger needs to understand SEO (search engine optimization), surely, it won't be harder for you because you're already good at many things. But other than technical SEO, On-Page SEO has its significance.&lt;/p&gt;

&lt;p&gt;On-page will take your week to become master of it, so if you go for it, it won’t stop you keep growing.&lt;/p&gt;

&lt;h2&gt;YouTube vLog&lt;/h2&gt;

&lt;p&gt;Back in 2005, &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; was started as an entertainment platform. No one knew that it would become the biggest visual search engine in the world with the largest database.&lt;/p&gt;

&lt;p&gt;Now people Youtube many things, especially technical things. So as you're good at technical things, you can start your channel where you can discuss software, and many other complex stuff.&lt;/p&gt;

&lt;p&gt;Even &lt;a href="https://dev.to/motivatedman/how-to-choose-a-laptop-for-your-web-development-business-3c0j"&gt;laptops&lt;/a&gt; affiliates are one of the best affiliates that you can start on your channel. You can review &lt;a href="https://500laptops.com/"&gt;the best laptops&lt;/a&gt; on your channel, and it will soon be getting traffic. This can bring you a lot of money by monetizing your content.&lt;/p&gt;

&lt;p&gt;Top 3 ways to earn from Youtube videos are, Adsense, and affiliate links, or sponsored videos.&lt;/p&gt;

&lt;p&gt;But once again, Youtube has also its pattern to rank videos for search queries. Once you're ready to jump in, give it a little time to understand the basic things.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>devjournal</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Writing a JavaScript Code</title>
      <author>niksin</author>
      <pubDate>Tue, 20 Jul 2021 06:34:15 +0000</pubDate>
      <link>https://dev.to/stuffsuggested/writing-a-javascript-code-209o</link>
      <guid>https://dev.to/stuffsuggested/writing-a-javascript-code-209o</guid>
      <description>&lt;p&gt;We are used to writing JavaScript code for a long time. But we are not updated enough to use an optimized way of coding for JavaScript. With the optimized method of coding, we can be on top of the things which is related to optimized code. With Shorthand methods, lots of things become easy for developers, Like Error tracking, Code management, line of Codes, etc.&lt;/p&gt;

&lt;p&gt;Here the list of javascript shorthands&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Javascript Shorthand for if with multiple OR(||) conditions&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for if with multiple And(&amp;amp;&amp;amp;) conditions&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for checking null, undefined, and empty values of variable&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for switch case to select from multiple options&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for functions for single line function&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for conditionally calling functions &lt;/li&gt;
&lt;li&gt;Javascript Shorthand for To set the default to a variable using if&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for if…else statements&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for traditional for loops to fetch a value from array&lt;/li&gt;
&lt;li&gt;Javascript Shorthand for typecasting, Converting string to number&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-shorthand-for-if-with-multiple-or-conditions"&gt;
  &lt;/a&gt;
  1. Shorthand for if with multiple OR(||) conditions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (car === 'audi' || car === 'BMW' || car === 'Tesla') {
    //code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a traditional way, we used to write code in the above pattern. but instead of using multiple OR conditions we can simply use an array and includes. Check out the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (['audi', 'BMW', 'Tesla', 'grapes'].includes(car)) {
   //code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-shorthand-for-if-with-multiple-andampamp-conditions"&gt;
  &lt;/a&gt;
  2. Shorthand for if with multiple And(&amp;amp;&amp;amp;) conditions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(obj &amp;amp;&amp;amp; obj.tele &amp;amp;&amp;amp; obj.tele.stdcode) {
    console.log(obj.tele .stdcode)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use optional chaining (?.) to replace this snippet.&lt;br&gt;
console.log(obj?.tele?.stdcode);&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-shorthand-for-checking-null-undefined-and-empty-values-of-variable"&gt;
  &lt;/a&gt;
  3. Shorthand for checking null, undefined, and empty values of variable
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (name !== null || name !== undefined || name !== '') {
    let second = name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The simple way to do it is...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const second = name || '';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-shorthand-for-switch-case-to-select-from-multiple-options"&gt;
  &lt;/a&gt;
  4. Shorthand for switch case to select from multiple options
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (number) {
  case 1:
     return 'Case one';
  case 2:
     return 'Case two';
  default:
     return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a map/ object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const data = {
  1: 'Case one',
  2: 'Case two'
};
//Access it using
data[num]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-shorthand-for-functions-for-single-line-function"&gt;
  &lt;/a&gt;
  5. Shorthand for functions for single line function
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; function example(value) {

  return 2 * value;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the arrow function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const example = (value) =&amp;gt; 2 * value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-shorthand-for-conditionally-calling-functions"&gt;
  &lt;/a&gt;
  6. Shorthand for conditionally calling functions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function height() {
    console.log('height');
}
function width() {
    console.log('width');
}
if(type === 'heigth') {
    height();
} else {
    width();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; (type === 'heigth' ? height : width)()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-shorthand-for-to-set-the-default-to-a-variable-using-if"&gt;
  &lt;/a&gt;
  7. Shorthand for To set the default to a variable using if
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(amount === null) {
    amount = 0;
}
if(value === undefined) {
    value = 0;
}
console.log(amount); //0
console.log(value); //0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just Write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(amount || 0); //0

console.log(value || 0); //0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-shorthand-for-ifelse-statements"&gt;
  &lt;/a&gt;
  9. Shorthand for if…else statements
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let label;
if (amt &amp;gt; 0) {
    label = 'profit';
} else {
    label = 'loss';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace it with a ternary operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const label = amt &amp;gt; 0 ? 'profit' : 'loss';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-shorthand-for-traditional-for-loops-to-fetch-a-value-from-array"&gt;
  &lt;/a&gt;
  10. Shorthand for traditional for loops to fetch a value from array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arr = [1, 2, 3];
for(let i=0; i&amp;lt;arr.length; i++) {
    console.log(arr[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace for with forEach&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arr = [1, 2, 3];
arr.forEach((val) =&amp;gt; console.log(val));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#11-shorthand-for-typecasting-converting-string-to-number"&gt;
  &lt;/a&gt;
  11. Shorthand for typecasting, Converting string to number
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const num1 = parseInt("100");
const num2 =  parseFloat("11.11");
simply use + operator

const num1 = +"100";
const num2 =  +"11.11";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Css Selectors for Input Ranges</title>
      <author>Stacksjar</author>
      <pubDate>Tue, 20 Jul 2021 06:22:28 +0000</pubDate>
      <link>https://dev.to/stacksjar/css-selectors-for-input-ranges-4obb</link>
      <guid>https://dev.to/stacksjar/css-selectors-for-input-ranges-4obb</guid>
      <description>&lt;p&gt;In this post we are going to check Css Selectors for input ranges. This selectors would not be known by many of us.&lt;/p&gt;

&lt;p&gt;We all use input elements in our projects and must be aware of input type="number" this defines a field for entering number.&lt;/p&gt;

&lt;p&gt;This allows in restricting user to enter any other character other than numbers. When we use the tag input and give its type attribute value of "number" as below&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="number"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This input box comes with the 2 buttons on the right side which we can use to increase or decrease the number entered in the input.&lt;/p&gt;

&lt;p&gt;We can set the min and max values for the number to be entered in the input as below&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="number" min="2" max="5"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will restrict the user to enter only numbers that are between 2 and 5 as we have specified in the min and max attributes of the input.&lt;/p&gt;

&lt;p&gt;Now we can use the CSS Selector to detect if the user has not entered between the specified min and max values and apply css for the same.&lt;/p&gt;

&lt;p&gt;//html&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="number" min="2" max="5"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;//css&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;input:in-range {&lt;br&gt;
  border: 1px solid green;&lt;br&gt;
}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;input:out-of-range {&lt;br&gt;
border: 1px solid red;&lt;br&gt;
}﻿&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The above css code will check all the values entered in the Input Box, If the number entered in the input box is not between the range specified by min and max values it changes the color of input box to red.&lt;/p&gt;

&lt;p&gt;If the number entered is between the min and max values it will change the input box's color to green.&lt;/p&gt;

&lt;p&gt;This was the usage of in-range and out-of-range css selectors, hope you find this usefull.&lt;/p&gt;

&lt;p&gt;Checkout Complete Article Here: &lt;a href="https://stacksjar.com/post/css-selectors-for-input-ranges"&gt;Psuedo Selectors for Inputs in Css&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>ux</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I Recreated my VSCode Theme 🔥</title>
      <author>Shaan Alam</author>
      <pubDate>Tue, 20 Jul 2021 06:03:49 +0000</pubDate>
      <link>https://dev.to/shaan71845/i-recreated-my-vscode-theme-33p6</link>
      <guid>https://dev.to/shaan71845/i-recreated-my-vscode-theme-33p6</guid>
      <description>&lt;p&gt;Hi guys!&lt;br&gt;
So, couple of months back I wrote a blog "I created a VSCode theme" describing about the VS Code theme called "Martian Night" that I made. Fast forward to present, I am here to announce that I recreated my VS Code theme. But wait, what do I mean by "recreate" ?&lt;br&gt;
Actually the thing is I wanted to update my theme, but for some reasons I was unable to release an update on the marketplace, so I had to unpublish the previous one and again publish the new one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-this-theme"&gt;
  &lt;/a&gt;
  What's new in this Theme??
&lt;/h2&gt;

&lt;p&gt;There are lot of things which are new in this theme. Previously I had used only 2-3 colours for the syntax, but now I tried to introduce more colours to the syntax. Also, I introduced three variants of the theme - Normal, &lt;strong&gt;Bold&lt;/strong&gt;, &amp;amp; &lt;em&gt;italics&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#normal"&gt;
  &lt;/a&gt;
  Normal
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-khXeKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n53p01mo7a8ss65fiyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-khXeKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n53p01mo7a8ss65fiyo.png" alt="Normal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bold"&gt;
  &lt;/a&gt;
  Bold
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atA7F42V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u55v8lerydbphwmowbjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atA7F42V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u55v8lerydbphwmowbjo.png" alt="Bold"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#italics"&gt;
  &lt;/a&gt;
  Italics
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--58KyZFDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxi06tdpobkvvph8v8as.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58KyZFDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxi06tdpobkvvph8v8as.png" alt="Italics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I changed the previous boring logo into something new!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqOEy8kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34pu2kz5j21wj5qhmkac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqOEy8kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34pu2kz5j21wj5qhmkac.png" alt="Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-i-upgrade"&gt;
  &lt;/a&gt;
  Why did I upgrade?
&lt;/h2&gt;

&lt;p&gt;The previous one had a lot of issues like lack of colours, high contrast colours and no italics or bold fonts used. This is because I was pretty new to creating VS code theme that time, so I decided to improve my theme, hence I created this one!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-try-it"&gt;
  &lt;/a&gt;
  How can you try it?
&lt;/h2&gt;

&lt;p&gt;Below are some relevant links for you to try!!&lt;/p&gt;

&lt;p&gt;Install it from here (Marketplace) - &lt;a href="https://marketplace.visualstudio.com/items?itemName=shaanalam718.martian-night"&gt;https://marketplace.visualstudio.com/items?itemName=shaanalam718.martian-night&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub Repo - &lt;a href="https://github.com/shaan71845/martian-night-vscode-theme"&gt;https://github.com/shaan71845/martian-night-vscode-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a ⭐on the repo!!&lt;br&gt;
Feedbacks and comments are appreciated!!&lt;br&gt;
Thank you!!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codepen</category>
    </item>
  </channel>
</rss>
