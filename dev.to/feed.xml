<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to add blog posts to github readme?</title>
      <author>Chloe</author>
      <pubDate>Fri, 14 Jan 2022 23:16:12 +0000</pubDate>
      <link>https://dev.to/cguttweb/how-to-add-blog-posts-to-github-readme-k39</link>
      <guid>https://dev.to/cguttweb/how-to-add-blog-posts-to-github-readme-k39</guid>
      <description>&lt;p&gt;Hey so I have setup a Github Readme file however I would like to be able if possible to add my latest blog posts it seems asa though it is possibly could someone point me in the right directionm on how to do this?&lt;/p&gt;

&lt;p&gt;My site is built with Nuxt if that makes a difference but I do have feed setup I assume I need to reference that?&lt;/p&gt;

&lt;p&gt;Any help much appreciated. Thanks!&lt;/p&gt;

</description>
      <category>github</category>
      <category>nuxt</category>
      <category>vue</category>
      <category>markdown</category>
    </item>
    <item>
      <title>How to install Tailwind CSS via Visual Studio Code using NPM</title>
      <author>Seth</author>
      <pubDate>Fri, 14 Jan 2022 22:41:56 +0000</pubDate>
      <link>https://dev.to/seth_king/how-to-install-tailwind-css-via-visual-studio-code-using-npm-445a</link>
      <guid>https://dev.to/seth_king/how-to-install-tailwind-css-via-visual-studio-code-using-npm-445a</guid>
      <description>&lt;p&gt;Tailwind CSS lets you leverage utility classes to build &lt;strong&gt;your own&lt;/strong&gt; components. This means you can reference Tailwind CSS classes directly in HTML.&lt;/p&gt;

&lt;p&gt;Yup, you heard that right. You no longer need to create your own CSS. This will save you plenty of development time, so you can focus on other parts of your project. &lt;/p&gt;

&lt;p&gt;To begin, create a new folder on your desktop and open the folder in &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started
&lt;/h2&gt;

&lt;p&gt;If you have Visual Studio Code, pull up the terminal. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qrgsVwr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cpn7tvjeqzy5kic4xmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrgsVwr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cpn7tvjeqzy5kic4xmm.png" alt="Image description" width="880" height="775"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then type in npm -v. This command is necessary to see which version of npm you are running. If you don't have it installed, you'll have an error message. &lt;em&gt;If you didn't download npm, don't worry. It's pretty easy, just search for it on Google.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now go ahead and also install node.js. To make sure it's there, run npm -v again in the terminal. If you see your version, it's running and installed properly. If not, you're out of luck. &lt;/p&gt;

&lt;p&gt;Nows our time for real trickery - type in npm install -d tailwindcss@latest postcss@latest autoprefixer@latest in your console.  &lt;/p&gt;

&lt;p&gt;You should see a lot of GET requests and 200 messages (which mean everything worked fine) roll in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfvuMgMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31zuxo7fxlwm8kv8epj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfvuMgMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31zuxo7fxlwm8kv8epj2.png" alt="Image description" width="778" height="340"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reviewing-your-folders"&gt;
  &lt;/a&gt;
  Reviewing your folders
&lt;/h2&gt;

&lt;p&gt;After installing Tailwind CSS, you should see your folder has 3 files: node-modules, package-lock.json, package.json. In my case they are in the  tailwind folder, that I set up. For the sake of this exercise, I also pulled in a Linktree clone I was working on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91VsNYgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejng4ebflppnbwx6k4ht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91VsNYgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejng4ebflppnbwx6k4ht.png" alt="Image description" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The node-modules is a modules package. It's not really something I'm that well versed with, but it seems necessary to include (or so I hear). The package.json folder has the dependencies we download, as well as their file version. &lt;/p&gt;

&lt;p&gt;At this point, we will add a configuration file to the package.json file. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#add-a-configuration-file-to-the-packagejson-file"&gt;
  &lt;/a&gt;
  Add a configuration file to the package.json file.
&lt;/h2&gt;

&lt;p&gt;In the terminal, write down "npx tailwindcss init".  It's something that has to happen eventually (or so I'm told), so it's better to get it out the way now. You'll then see a tailwind.config.js file pop up in your folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sS2GHrqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kgti5v8qjfay9ob0n1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sS2GHrqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kgti5v8qjfay9ob0n1h.png" alt="Image description" width="880" height="656"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now create a style.css file int the tailwind folder (it's fine if you call it something different). In this file, we will add some Tailwind directives. Type in:&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/tailwind"&gt;@tailwind&lt;/a&gt; base;&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/tailwind"&gt;@tailwind&lt;/a&gt; components;&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/tailwind"&gt;@tailwind&lt;/a&gt; utilities;&lt;/p&gt;

&lt;p&gt;These directives are pulled from the &lt;strong&gt;node_modules &amp;gt; Tailwind CSS folders.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ik5tM9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f148cun27irhm9yf0arf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ik5tM9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f148cun27irhm9yf0arf.png" alt="Image description" width="880" height="713"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#switch-to-packagejson-folder"&gt;
  &lt;/a&gt;
  Switch to package.json folder
&lt;/h2&gt;

&lt;p&gt;Below is curly braces of the dependencies, add a comma and then in double qoutes add:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"scripts": {&lt;br&gt;
    "build-css": "tailwindcss build style.css -o css/style.css"&lt;br&gt;
  }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It's a simple key-value pair. build-css is the key, the value is tailwindcss. Build refers to what we want to build i.e our style.css file that we got. the -o specifies the output file. The final portion  css/style/css tells the computer where we will store it.&lt;/p&gt;

&lt;p&gt;Now in the console type in the script. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run build-css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This tells it to run the build-css key-value. Now you will see a new folder built with CSS file inside. I'll end our lesson here, as you've set everything up correctly. Now the fun part begins - building! &lt;/p&gt;




</description>
    </item>
    <item>
      <title>Form Handling With API Tutorial</title>
      <author>Abanoub George</author>
      <pubDate>Fri, 14 Jan 2022 21:59:49 +0000</pubDate>
      <link>https://dev.to/abanoubgeorge/form-handling-with-api-tutorial-45lc</link>
      <guid>https://dev.to/abanoubgeorge/form-handling-with-api-tutorial-45lc</guid>
      <description>&lt;p&gt;The Vue CLI is an awesome tool to kick-start your Vue projects. But by default — and rightly so — it comes with very little in the way of styling. Follow along and I’ll show you how to Create a Form With API using JSON Server on Vue&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-set-up-the-vue-project"&gt;
  &lt;/a&gt;
  Getting set up the Vue Project
&lt;/h3&gt;

&lt;p&gt;In order to show every step from start to finish, I’m going to create a new project from scratch. If you already have a project (that you set up with Vue CLI 3), you can skip this section.&lt;/p&gt;

&lt;p&gt;If you don’t already have Vue CLI version 3, &lt;a href="https://cli.vuejs.org/guide/installation.html"&gt;install it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the app is created, move into the directory and serve the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your new Vue app is available at &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUzOY3Dp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvbxsu8a9q0e11bazc23.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUzOY3Dp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvbxsu8a9q0e11bazc23.PNG" alt="Image description" width="880" height="785"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-set-up-the-json-server-for-api"&gt;
  &lt;/a&gt;
  Getting set up the JSON Server for API
&lt;/h3&gt;

&lt;p&gt;JSON Server Creating demo APIs For Your Project&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check the JSON Server [&lt;a href="https://www.npmjs.com/package/json-server"&gt;https://www.npmjs.com/package/json-server&lt;/a&gt;]&lt;br&gt;
we can use JSON Server and run it by following steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Install it &lt;code&gt;npm i json-server&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; in you Project will create the new folder and add the db.json like we did in this project
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlMnpnqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86qpz30e8jgebq8dyc83.PNG" alt="Image description" width="245" height="113"&gt;
&lt;/li&gt;
&lt;li&gt;last step we just need to run the JSON Server 
&lt;code&gt;json-server --watch Backend/db.json&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KT1olsIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrcv5glgrrj32qnxznyb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KT1olsIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrcv5glgrrj32qnxznyb.PNG" alt="Image description" width="583" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-bootstrap-styles"&gt;
  &lt;/a&gt;
  Adding Bootstrap styles
&lt;/h3&gt;

&lt;p&gt;I’m going to add a Bootstrap component to the app&lt;br&gt;
Still inside the &lt;code&gt;vue-form-api&lt;/code&gt; directory, install Bootstrap and its &lt;a href="https://getbootstrap.com/docs/4.0/getting-started/javascript/#dependencies"&gt;dependencies&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="nx"&gt;jquery&lt;/span&gt; &lt;span class="nx"&gt;popper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: If you’re not going to use Bootstrap’s JavaScript, and only going to use its styles, don’t worry about installing &lt;strong&gt;jQuery&lt;/strong&gt; or &lt;strong&gt;Popper.js.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, import it into the main script by adding these lines to the top of &lt;code&gt;vue-form-api/src/main.js:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap/dist/css/bootstrap.min.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Again, if you only want the styles, and not the JavaScript functionality, just leave off the first line and only include the CSS.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: we will clear the Project from unused files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#add-html-form-using-bootstrap-form-and-add-a-small-table"&gt;
  &lt;/a&gt;
  Add Html Form using Bootstrap Form and add a small table
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            &amp;lt;!-- Title --&amp;gt;
            &amp;lt;h1 class=" text-info border-bottom py-2 "&amp;gt;Vue Form API&amp;lt;/h1&amp;gt;
            &amp;lt;!-- Form --&amp;gt;
              &amp;lt;form class="row g-3  p-3 shadow mt-4 rounded"&amp;gt;
                &amp;lt;!-- First Name --&amp;gt;
                &amp;lt;div class="col-md-6"&amp;gt;
                  &amp;lt;label for="inputFirstName" class="form-label"&amp;gt;First Name&amp;lt;/label&amp;gt;
                  &amp;lt;input required type="text" class="form-control" id="inputFirstName"&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;!-- Last Name --&amp;gt;
                &amp;lt;div class="col-md-6"&amp;gt;
                  &amp;lt;label for="inputLastName" class="form-label"&amp;gt;Last Name&amp;lt;/label&amp;gt;
                  &amp;lt;input required type="text" class="form-control" id="inputLastName"&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;!-- Email  --&amp;gt;
                &amp;lt;div class="col-md-6"&amp;gt;
                  &amp;lt;label for="inputEmail" class="form-label"&amp;gt;Email&amp;lt;/label&amp;gt;
                  &amp;lt;input  required type="email" class="form-control" id="inputEmail"&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;!-- Password --&amp;gt;
                &amp;lt;div class="col-md-6"&amp;gt;
                  &amp;lt;label for="inputPassword" class="form-label"&amp;gt;Password&amp;lt;/label&amp;gt;
                  &amp;lt;input required type="password" class="form-control" id="inputPassword"&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;!-- Address --&amp;gt;
                &amp;lt;div class="col-12"&amp;gt;
                  &amp;lt;label for="inputAddress" class="form-label"&amp;gt;Address&amp;lt;/label&amp;gt;
                  &amp;lt;input  required type="text" class="form-control" id="inputAddress" placeholder="1234 Main St"&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="col-12 text-center"&amp;gt;
                  &amp;lt;button type="submit" class="btn btn-primary "&amp;gt;Submit&amp;lt;/button&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="col-md-6"&amp;gt;
            &amp;lt;!-- List User Information --&amp;gt;
            &amp;lt;div class="user-info "&amp;gt;
              &amp;lt;h1 class=" text-info border-bottom py-2"&amp;gt;Users List&amp;lt;/h1&amp;gt;
                  &amp;lt;table class="table table-striped table-dark mt-4 "&amp;gt;
                    &amp;lt;thead&amp;gt;
                      &amp;lt;tr&amp;gt;
                        &amp;lt;th scope="col"&amp;gt;Full Name&amp;lt;/th&amp;gt;
                        &amp;lt;th scope="col"&amp;gt;Email&amp;lt;/th&amp;gt;
                        &amp;lt;th scope="col"&amp;gt;password&amp;lt;/th&amp;gt;
                        &amp;lt;th scope="col"&amp;gt;address&amp;lt;/th&amp;gt;
                      &amp;lt;/tr&amp;gt;
                    &amp;lt;/thead&amp;gt;
                    &amp;lt;tbody&amp;gt;
                      &amp;lt;tr &amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
                      &amp;lt;/tr&amp;gt;
                    &amp;lt;/tbody&amp;gt;
                  &amp;lt;/table&amp;gt;
            &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#store-the-data"&gt;
  &lt;/a&gt;
  Store the Data
&lt;/h2&gt;

&lt;p&gt;we will create the object that has all data from inputs we will store &lt;br&gt;
 it in &lt;code&gt;userInfo&lt;/code&gt; Object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-will-use-raw-vmodel-endraw-to-bind-the-value-form-inputs"&gt;
  &lt;/a&gt;
  We Will Use &lt;code&gt;v-model&lt;/code&gt; to bind the value form inputs
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;v-model&lt;/code&gt; is the two-way data binding in Vue.js bind the value from inputs &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPklbhiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mq24o9e1ik5fuv4l48n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPklbhiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mq24o9e1ik5fuv4l48n.PNG" alt="Image description" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: we use the v-model like &lt;code&gt;v-model="userInfo.firstName"&lt;/code&gt; &lt;code&gt;userInfo.firstName&lt;/code&gt; write the userInfo as the main object and access the keys from this object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#add-function-to-get-all-data"&gt;
  &lt;/a&gt;
  Add Function to get all Data
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="c1"&gt;// we will send the Data from Here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;add function &lt;code&gt;addUser&lt;/code&gt; in methods to get all data from the userInfo Object and Send it to API &lt;/li&gt;
&lt;li&gt;add the Function &lt;code&gt;addUser&lt;/code&gt; in Form to handle the Function
Note : &lt;code&gt;@submit.prevent="addUser()"&lt;/code&gt; use the prevent To stop this behavior,&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-services-folder-and-add-our-calling-api-function"&gt;
  &lt;/a&gt;
  Create Services Folder and Add our Calling API Function
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;we create a new folder &lt;code&gt;Services&lt;/code&gt; then add the file &lt;code&gt;Users.services.js&lt;/code&gt;   &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00YkoA67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p28u2d783gbfcm4ac26d.PNG" alt="Image description" width="359" height="178"&gt;
&lt;/li&gt;
&lt;li&gt;install the Axios Library 
Axios is a Javascript library used to make HTTP 
&lt;code&gt;npm i axios&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#import-and-make-variable"&gt;
  &lt;/a&gt;
  Import and make Variable
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Import Axios to use&lt;/li&gt;
&lt;li&gt;Add base Url when we call the API each time did not need to write it we will store it in Variable&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#we-will-add-class-and-functions"&gt;
  &lt;/a&gt;
  We will Add Class and Functions
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Add a javascript Class to contain our Functions &lt;code&gt;UsersManageServices&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add the First function to Get all Users to form API &lt;code&gt;getAllUsersServices&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add Second function to Add New to API&lt;code&gt;addUsersServices&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Users Information Class&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UsersManageServices&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="c1"&gt;// Create a Function for get All Users&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getAllUsersServices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Add New User&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;addUsersServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UsersManageServices&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#import-our-services-in-our-raw-appvue-endraw-"&gt;
  &lt;/a&gt;
  Import our Services in our &lt;code&gt;App.vue&lt;/code&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Import &lt;code&gt;UsersManageServices&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import Users Services&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UsersManageServices&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/Services/Users.services&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add new variable in data Object to store the Data from API
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// it will be an empty Array for now&lt;/span&gt;
    &lt;span class="nx"&gt;AllUsers&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;You Remember our Object &lt;code&gt;userInfo&lt;/code&gt; who store your data from Inputs
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// it will be our Object to send the Data to API&lt;/span&gt;
     &lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;in our &lt;code&gt;methods&lt;/code&gt; we will add a Function to add a new User
&amp;gt; we already have &lt;code&gt;UsersManageServices&lt;/code&gt; Class then we need to access the &lt;code&gt;addUsersServices&lt;/code&gt; function and send our &lt;code&gt;userInfo&lt;/code&gt; 
Object as Parameter
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;UsersManageServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUsersServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Added Success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbKvbRxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trxmfzj597ingxqos6ps.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbKvbRxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trxmfzj597ingxqos6ps.PNG" alt="Image description" width="859" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xIBsyGIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2baz7dryr0enc8xojmwo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIBsyGIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2baz7dryr0enc8xojmwo.PNG" alt="Image description" width="570" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then we need to list your users to table so we will add a Function to list the users 
&amp;gt; we already have &lt;code&gt;UsersManageServices&lt;/code&gt; Class then we need to access the &lt;code&gt;getAllUsersServices&lt;/code&gt; function to get the users and store it in  &lt;code&gt;AllUsers&lt;/code&gt; our empty Array
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// Get All User &lt;/span&gt;
    &lt;span class="nx"&gt;getAllUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;UsersManageServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllUsersServices&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AllUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;we have the data stored in &lt;code&gt;AllUsers&lt;/code&gt; will add it to our table
&amp;gt; we will check first if our Array has a data or not &lt;code&gt;v-if=" AllUsers"&lt;/code&gt; then use the &lt;code&gt;v-for&lt;/code&gt; to loop in our Array of Object to show the data , 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0n4hwI2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abs5pckl16g9do718i7u.png" alt="Image description" width="693" height="397"&gt;
our Table will be like That
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxsiZItq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7ucl0pc9cs1rs5hy5qw.png" alt="Image description" width="880" height="297"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#finally-the-form-and-user-information-will-be-like"&gt;
  &lt;/a&gt;
  Finally the Form and User Information will be like
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uj0mDZMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llqy7puyq793vjzqdxnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uj0mDZMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llqy7puyq793vjzqdxnk.png" alt="Image description" width="880" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-can-find-the-code-in-github-httpsgithubcomabanoub2017vueformapi"&gt;
  &lt;/a&gt;
  You can find the Code in [Github] 😍(&lt;a href="https://github.com/abanoub2017/vue-form-api"&gt;https://github.com/abanoub2017/vue-form-api&lt;/a&gt;)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#you-can-follow-me-in-linkedin-httpswwwlinkedincominabanoubgeorge9235b1160"&gt;
  &lt;/a&gt;
  You can Follow Me in [Linkedin] 😍(&lt;a href="https://www.linkedin.com/in/abanoub-george-9235b1160/"&gt;https://www.linkedin.com/in/abanoub-george-9235b1160/&lt;/a&gt;)
&lt;/h4&gt;

&lt;p&gt;And that’s it! I hope you enjoyed 😍&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>bootstrap</category>
      <category>api</category>
    </item>
    <item>
      <title>The World Of React Events</title>
      <author>Web.Developer.io</author>
      <pubDate>Fri, 14 Jan 2022 20:18:38 +0000</pubDate>
      <link>https://dev.to/developerioweb/the-world-of-react-events-59ej</link>
      <guid>https://dev.to/developerioweb/the-world-of-react-events-59ej</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Event occur when a user or the browser manipulate a page.&lt;/p&gt;

&lt;p&gt;For Ex →&lt;br&gt;
&lt;strong&gt;&lt;code&gt;Page Loading&lt;/code&gt; , &lt;code&gt;clicking a Button&lt;/code&gt; , &lt;code&gt;Pressing any Key&lt;/code&gt; , &lt;code&gt;Closing a window&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These all are the events.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We as a developer use these Events to manipulate things in the site.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the Case of React Events, they  are not actually the &lt;code&gt;DOM Events&lt;/code&gt; they are called &lt;code&gt;Synthetic Events&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Synthetic Events&lt;/code&gt; → These are the Wrappers that React uses to standardise event functionality across browser.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what is the need of Synthetic Events ??&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Actually Events are not the part of Core JavaScript , they come from each browser’s JavaScript API , means Each browser will handle them differently.&lt;/li&gt;
&lt;li&gt;So in React we have the Synthetic Events which makes the consistency across all the browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;So we have many types of the Synthetic Events including keyboard events, form events , mouse events etc.&lt;/p&gt;

&lt;p&gt;Some of them are :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;
&lt;span class="nx"&gt;onContextMenu&lt;/span&gt;
&lt;span class="nx"&gt;onDoubleClick&lt;/span&gt;
&lt;span class="nx"&gt;onDrag&lt;/span&gt;
&lt;span class="nx"&gt;onDragEnd&lt;/span&gt;
&lt;span class="nx"&gt;onDragEnter&lt;/span&gt;
&lt;span class="nx"&gt;onDragExit&lt;/span&gt;
&lt;span class="nx"&gt;onDragLeave&lt;/span&gt;
&lt;span class="nx"&gt;onDragOver&lt;/span&gt;
&lt;span class="nx"&gt;onDragStart&lt;/span&gt;
&lt;span class="nx"&gt;onDrop&lt;/span&gt;
&lt;span class="nx"&gt;onMouseDown&lt;/span&gt;
&lt;span class="nx"&gt;onMouseEnter&lt;/span&gt;
&lt;span class="nx"&gt;onMouseLeave&lt;/span&gt;
&lt;span class="nx"&gt;onMouseMove&lt;/span&gt;
&lt;span class="nx"&gt;onMouseOut&lt;/span&gt;
&lt;span class="nx"&gt;onMouseOver&lt;/span&gt;
&lt;span class="nx"&gt;onMouseUp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For more visit this link :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/events.html"&gt;SyntheticEvent - React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example →&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7Qt_pEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5a3ck3kbfxdx1yh1hmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7Qt_pEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5a3ck3kbfxdx1yh1hmz.png" alt="React Events" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;when ever u try to hover on the &lt;code&gt;Smily&lt;/code&gt; It will log a Proverb and if try to copy the text it will give u an alert&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CopyDemo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CopyDemo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Messenger&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Messenger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Messenger&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CopyDemo&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;CopyDemo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CopyDemo&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleCopy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleCopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;handleCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stop Copying Me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;31px auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Try to Copy the Text Below 👇&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onCopy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleCopy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    lorem ipsum dolor sit amet, consectetur adipiscing elit.lorem ipsum dolor sit amet lorem ipsum dolor sit amet, consectetur adipiscing elit.lorem ipsum dolor sit amet lorem ipsum dolor sit amet, consectetur adipiscing elit.lorem ipsum dolor sit amet lorem ipsum dolor sit amet, consectetur adipiscing elit.lorem ipsum dolor sit amet lorem ipsum dolor sit amet, consectetur adipiscing elit.lorem ipsum dolor sit amet lorem ipsum dolor sit amet, consectetur adipiscing elit.lorem ipsum dolor sit amet
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CopyDemo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Messenger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Messenger&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleMouseEnter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleMouseEnter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;handleMouseEnter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All good things come to an end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; A journey of a thousand miles begins with a single step&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Actions speak louder than words&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;  An apple a day keeps the doctor away&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Proverbs 👇&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;  &lt;span class="na"&gt;onMouseEnter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleMouseEnter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;30px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;🙂&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Messenger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-events-demo-cox8i"&gt;React-Events DEMO&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-binding"&gt;
  &lt;/a&gt;
  Method Binding
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8X0OBlTW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryju8cvuk3yqkankflk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8X0OBlTW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryju8cvuk3yqkankflk3.png" alt="This Keyword" width="880" height="214"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Messenger2&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All good things come to an end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; A journey of a thousand miles begins with a single step&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Actions speak louder than words&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;  An apple a day keeps the doctor away&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;handleMouseEnter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THIS IS:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined 😭&lt;/span&gt;
        &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Proverbs 👇&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;  &lt;span class="na"&gt;onMouseEnter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleMouseEnter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;30px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;🙂&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If u try to run this , it will give an &lt;code&gt;TypeError&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also if we console.log the value of &lt;code&gt;this&lt;/code&gt; we will see the value of undefined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZioLic5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oklm64dhrihzo8gihh58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZioLic5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oklm64dhrihzo8gihh58.png" alt="THIS" width="454" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ways to fix this problem →&lt;br&gt;
1)  &lt;code&gt;Use Inline BInd&lt;/code&gt; →&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_3CD6ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lnijsyfxhrot1az7lrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_3CD6ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lnijsyfxhrot1az7lrp.png" alt="Inline Binding" width="880" height="217"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New Function is Created on every render.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQErQOtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lye4rkvlozgoydap16ei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQErQOtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lye4rkvlozgoydap16ei.png" alt="Function" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Like above we have Created a Function handleClick and bind it using inline-bind but when we check if they are equal or not so it return false , So this means that a New Function is created when it renders.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2 . &lt;code&gt;Arrow Function&lt;/code&gt; →&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phaqHvZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tibdut4w7zpyon7b4oup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phaqHvZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tibdut4w7zpyon7b4oup.png" alt="Arrow Function" width="880" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros →&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No mention of Bind!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons →&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intent less clear&lt;/li&gt;
&lt;li&gt;new function created on every render.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3 . &lt;code&gt;In the Constructor&lt;/code&gt; →&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fSmNsOhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hakdmmm6w8gnavyekkwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fSmNsOhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hakdmmm6w8gnavyekkwp.png" alt="Constructor" width="880" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Only need to bind once!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4 . Bonus One →&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is : &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;This will also used to bind.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#method-binding-with-arguments-%E2%86%92"&gt;
  &lt;/a&gt;
  Method Binding with Arguments →
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In the previous example our &lt;code&gt;this.handleClick&lt;/code&gt; didn’t take any argument.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To Pass the Argument we can write like this :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;argument_name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argument_name&lt;/span&gt;&lt;span class="p"&gt;)}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we are using the Arrow function we have to  use the Curly braces while calling the function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-functions-to-the-child-component-%E2%86%92"&gt;
  &lt;/a&gt;
  Passing Functions to the child Component →
&lt;/h3&gt;

&lt;p&gt;Children are often not stateful, but they need to tell parent to change the state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But how can we send the data back to the parent Component??&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-flow"&gt;
  &lt;/a&gt;
  Data Flow
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A parent Component defines the Function.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The function is passed as a prop to a child component.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The child component invokes the prop.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The parent function is called, usually setting new state.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The parent component is re-rendered along with its children.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;One way to pass the Function →&lt;br&gt;
we have to make something like this whenever we click on the cross button the corresponding Number should Disappear.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HqIr-m_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jba9vhmm5wvx3i64qsn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HqIr-m_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jba9vhmm5wvx3i64qsn2.png" alt="Project" width="411" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Numlist.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NumberItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./NumberItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NumberList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;st&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NumberItem&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NumberList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this we have passed the &lt;code&gt;remove&lt;/code&gt; function as props to the NumItem Component .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NumItem.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NumberItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;X&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NumberItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code works fine but as we remove the elements the &lt;strong&gt;&lt;code&gt;Numlist&lt;/code&gt; Component get Re-rendered and we are binding the method remove inline , So every time the component get rendered new function created.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To solve this we have to bind the method in the Constructor.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BetterNumberItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./BetterNumberitems&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BetterNumberList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
        &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;st&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BetterNumberItem&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BetterNumberList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BetterNumberItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRemove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRemove&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;handleRemove&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRemove&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;X&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BetterNumberItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Earlier we are passing the argument to the remove method but now we aren’t so if we just try to console.log what is passed to remove we got the events.&lt;/p&gt;

&lt;p&gt;So we call handleRemove function and in that we call the remove function and pass the argument to it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/numlist-jo1jm"&gt;NumList&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUYrhWyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x51fkq0j6yie6i2n1yah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUYrhWyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x51fkq0j6yie6i2n1yah.png" alt="Binding" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#naming-convention-%E2%86%92"&gt;
  &lt;/a&gt;
  Naming Convention →
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIsN-8Y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahuprgoflahpb6jeqiss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIsN-8Y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahuprgoflahpb6jeqiss.png" alt="Naming Convention" width="880" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-and-keys"&gt;
  &lt;/a&gt;
  List and keys
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZHo3-T0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojcj7zpe1gok570uv0wq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZHo3-T0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojcj7zpe1gok570uv0wq.png" alt="Keys" width="880" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RI_jUqs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lm2thrpz8vj75glsubp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RI_jUqs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lm2thrpz8vj75glsubp.png" alt="React" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGiiFXv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq26pfn7yn8yvv19je94.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGiiFXv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq26pfn7yn8yvv19je94.png" alt="Last Resort" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and I have also learnt how to write the Functional Component&lt;br&gt;
 Day 10 Completed!!🥳&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (January 14, 2022): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Fri, 14 Jan 2022 19:39:20 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-january-14-2022-latest-mongodb-tutorials-events-podcasts-streams-1519</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-january-14-2022-latest-mongodb-tutorials-events-podcasts-streams-1519</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  👋 Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome back to the MongoDB $weeklyUpdate! Happy 2022! 🎉&lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(We're changing it up a bit and will be releasing these every Friday (instead of Monday). In this way, you'll always get the latest content and updates!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%8E%99-last-call-to-submit-your-sessions-for-mongodb-world-2022"&gt;
  &lt;/a&gt;
  🎙 Last Call to Submit Your Sessions for MongoDB World 2022!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uh0xtGXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mongodb.com/community/forums/uploads/default/optimized/3X/a/d/ad8ea33e6f0560796e2066388d92bb949bd7ab49_2_1035x541.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uh0xtGXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mongodb.com/community/forums/uploads/default/optimized/3X/a/d/ad8ea33e6f0560796e2066388d92bb949bd7ab49_2_1035x541.jpeg" alt="MongoDB World Call for Speakers banner" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MongoDB World is where the world’s fastest-growing data community comes to connect, explore, and learn. We’re looking for speakers who can inspire attendees by introducing them to new technologies, ideas, and solutions.&lt;/p&gt;

&lt;p&gt;Whether you want to do a 30 minute conference session, a 75 minutes deep dive tutorial, or a 10 minute lightning talk - we want to hear your talk ideas. If you have a great idea but don’t feel ready for the stage, we've got you covered! We offer speaker workshops, one-on-one coaching sessions, and more.&lt;br&gt;
&lt;strong&gt;Call for speakers closes January 18, 2022&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/world-2022-call-for-speakers"&gt;Submit Your Talk!&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  🎓 Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bringing-your-data-to-your-wrist-with-the-mongodb-data-api-and-fitbit"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/atlas_data_api_and_fitbit/"&gt;Bringing Your Data to Your Wrist with the MongoDB Data API and Fitbit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/john-page/"&gt;John Page&lt;/a&gt; &lt;br&gt;
In this article, we will see how to call the Data API from a smartwatch application to retrieve a document that contains data to display.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#introducing-the-mongodb-analyzer-for-net"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/introducing-mongodb-analyzer-dotnet/"&gt;Introducing the MongoDB Analyzer for .NET&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gfe80irq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exu8z25ikv22ws60bnxu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gfe80irq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exu8z25ikv22ws60bnxu.gif" alt="GIF - Accessing the tooltip for a LINQ expression" width="880" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/adriennetacke"&gt;Adrienne Tacke&lt;/a&gt;&lt;br&gt;
Say hello to the MongoDB Analyzer for .NET. This tool translates your C# queries to their MongoDB Query API equivalent and warns you of unsupported expressions and invalid queries at compile time, right in Visual Studio.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#kafka-to-mongodb-atlas-end-to-end-tutorial"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/kafka-mongodb-atlas-tutorial/"&gt;Kafka to MongoDB Atlas End to End Tutorial&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/pavel-duchovny/"&gt;Pavel Duchovny&lt;/a&gt; &lt;br&gt;
In this article, we will provide a simple step-by-step guide on how to connect a remote Kafka cluster—in this case, a Confluent Cloud service—with a MongoDB Atlas cluster.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  📺 MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;br&gt;
How we built Mongo World, a Game Built with Unity and MongoDB Realm&lt;br&gt;
&lt;iframe src="https://player.twitch.tv/?video=1255999546&amp;amp;parent=dev.to&amp;amp;autoplay=false" height="399" width="710"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;🍿 &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  🎙 Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe src="https://open.spotify.com/embed/episode/5Q8tbQcTcxxM1fWGU3GkBq" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 96 - &lt;a href="https://open.spotify.com/episode/5mRaLAaVoG4kgxRge9d968?si=aalAbiVgRzO9cIo7fOzVhw"&gt;Christmas Lights and Webcams with the MongoDB Data API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 95 - &lt;a href="https://open.spotify.com/episode/4liGrDKAKoa6A5yycob8Xt?si=ez5tyGRKSsGB4JrDTG5OGQ"&gt;Life at MongoDB: Exploring Cloud Support with Mark Kirpichnikov and Jon Fanti&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 94 - &lt;a href="https://open.spotify.com/episode/3JjNwmufWxFrRjyOYD9RdK?si=l9hcQ0TjThql9mBaHWF7mA"&gt;DevOps, IaC, Terraform and MongoDB with John Fahl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; 😊)&lt;/p&gt;




&lt;p&gt;💡 These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; first! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>dotnet</category>
      <category>programming</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 55: Better Thue Interpreter in Crystal</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Fri, 14 Jan 2022 19:37:40 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-55-better-thue-interpreter-in-crystal-3obp</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-55-better-thue-interpreter-in-crystal-3obp</guid>
      <description>&lt;p&gt;When I started the series I said that some of the episodes will be about creating a new programming language, but so far it's just been RPN calculators.&lt;/p&gt;

&lt;p&gt;So let's create a better Thue! &lt;a href="https://taw.hashnode.dev/100-languages-speedrun-episode-43-thue"&gt;I made an episode about Thue&lt;/a&gt;(&lt;a href="https://dev.to/taw/100-languages-speedrun-episode-43-thue-143i"&gt;https://dev.to/taw/100-languages-speedrun-episode-43-thue-143i&lt;/a&gt;), so read that for some background.&lt;/p&gt;

&lt;p&gt;Thue is a fun esoteric language, but suffers from two annoying issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;newline handling requires special weird rules&lt;/li&gt;
&lt;li&gt;a lot of nearly identical rules needed to be copied and pasted as there are no wildcard matches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll be using &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-49-crystal-50da"&gt;Crystal to code the interpreter&lt;/a&gt;(&lt;a href="https://taw.hashnode.dev/100-languages-speedrun-episode-49-crystal"&gt;https://taw.hashnode.dev/100-languages-speedrun-episode-49-crystal&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-interpreter"&gt;
  &lt;/a&gt;
  Basic Interpreter
&lt;/h3&gt;

&lt;p&gt;Before I start adding new features, let's write a base interpreter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThueRule&lt;/span&gt;
  &lt;span class="n"&gt;getter&lt;/span&gt; &lt;span class="ss"&gt;:left&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"~"&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'~'&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;":::"&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;STDIN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;not_nil!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"Rule&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;::=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThueProgram&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="no"&gt;ThueRule&lt;/span&gt;
    &lt;span class="vi"&gt;@initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
      &lt;span class="c1"&gt;# Ignoring invalid rules, they are sometimes used as comments&lt;/span&gt;
      &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/\A(.*)::=(.*)\z/&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
      &lt;span class="vi"&gt;@rules&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ThueRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vg"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="vi"&gt;@initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_match&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="n"&gt;matches_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="vi"&gt;@rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;match_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;match_idx&lt;/span&gt;
        &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match_idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;matches_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;rule: &lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;idx: &lt;/span&gt;&lt;span class="n"&gt;match_idx&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
    &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@initial&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_match&lt;/span&gt;
      &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rule&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"DEBUG"&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt;
        &lt;span class="no"&gt;STDERR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Applying rule &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; at &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="no"&gt;STDERR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Usage: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;file.thue&amp;gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;prog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ThueProgram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Crystal doesn't handle SIGPIPE well and we want to support:&lt;/span&gt;
&lt;span class="c1"&gt;# crystal thue.cr examples/fizzbuzz.thue | head -n 100&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Error&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;os_error&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EPIPE&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ThueRule&lt;/code&gt; represents a Thue rule like &lt;code&gt;a::=b&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ThueRule&lt;/code&gt; knows how to apply itself to a string at certain position, so it handles input and output itself&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ThueProgram&lt;/code&gt; is defined as a collection of rules and initial state&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ThueProgram#load&lt;/code&gt; knows how to read itself from Thue file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ThueProgram#random_match&lt;/code&gt; picks a random rule at random index according to fair algorithm, without building the whole list in memory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ThueProgram#run&lt;/code&gt; runs the program, starting from initial state&lt;/li&gt;
&lt;li&gt;if we run it without passing Thue file name, we print short message and exit&lt;/li&gt;
&lt;li&gt;if STDOUT gets closed, we catch an exception and check if it's the right error, then exit quietly. &lt;a href="https://github.com/crystal-lang/crystal/issues/9065"&gt;Crystal lacks any good way to quit on SIGPIPE&lt;/a&gt; the way Ruby's &lt;code&gt;trap("PIPE", "EXIT")&lt;/code&gt; does it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can confirm the program is working on a few test programs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue.cr examples/fizzbuzz.thue | head -n 10
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
$ crystal thue.cr examples/many_dice2.thue
6,4,2
$ DEBUG=1 crystal thue.cr examples/hello.thue
Applying rule Rule&amp;lt;_::=~Hello, World!&amp;gt; at 0 to "_"
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#better-newline-handling"&gt;
  &lt;/a&gt;
  Better newline handling
&lt;/h3&gt;

&lt;p&gt;The first issue with Thue I want to address is newline handling. A printing rule cannot print newlines, except the &lt;code&gt;~&lt;/code&gt; rule which prints just the newline. It makes Thue I/O unnecessarily annoying. The easy way to fix it is by supporting escape codes in Rules. &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt; are all we need for now. But since we're fixing things we might just as well add one extra escape code &lt;code&gt;\s&lt;/code&gt; for space. This is mainly because sometimes Thue code needs space at end of the line, and a lot of editors strip that automatically.&lt;/p&gt;

&lt;p&gt;This only required rewriting &lt;code&gt;ThueRule&lt;/code&gt; a little. I also added some more output triggered by &lt;code&gt;ENV["DEBUG"]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThueRule&lt;/span&gt;
  &lt;span class="vi"&gt;@left&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;
  &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;
  &lt;span class="n"&gt;getter&lt;/span&gt; &lt;span class="ss"&gt;:left&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_backslashes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_backslashes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"~"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'~'&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;":::"&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;STDIN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;not_nil!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"Rule&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;::=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_backslashes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\\./&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'n'&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how nice this is now. We can start with this dice rolling program in improved Thue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_::=~How many dice do you want to roll (0-9)?\n
&amp;lt;A::=:::
&amp;lt;B::=~Here are your rolls:\n
0::=B
1::=B@
2::=B@@
3::=B@@@
4::=B@@@@
5::=B@@@@@
6::=B@@@@@@
7::=B@@@@@@@
8::=B@@@@@@@@
9::=B@@@@@@@@@
^@::=^%
%::=~1\n
%::=~2\n
%::=~3\n
%::=~4\n
%::=~5\n
%::=~6\n
^$::=~Thank you for playing ThueDice!\n
::=
^&amp;lt;&amp;lt;_A$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_nl.cr examples_nl/many_dice.thue
How many dice do you want to roll (0-9)?
4
Here are your rolls:
2
5
6
3
Thank you for playing ThueDice!
$ crystal thue_nl.cr examples_nl/many_dice.thue
How many dice do you want to roll (0-9)?
1
Here are your rolls:
4
Thank you for playing ThueDice!
$ crystal thue_nl.cr examples_nl/many_dice.thue
How many dice do you want to roll (0-9)?
9
Here are your rolls:
3
6
6
2
3
6
3
3
1
Thank you for playing ThueDice!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also see the new debug output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ DEBUG=1 crystal thue_nl.cr examples_nl/many_dice.thue
Rule&amp;lt;"_"::="~How many dice do you want to roll (0-9)?\n"&amp;gt;
Rule&amp;lt;"&amp;lt;A"::=":::"&amp;gt;
Rule&amp;lt;"&amp;lt;B"::="~Here are your rolls:\n"&amp;gt;
Rule&amp;lt;"0"::="B"&amp;gt;
Rule&amp;lt;"1"::="B@"&amp;gt;
Rule&amp;lt;"2"::="B@@"&amp;gt;
Rule&amp;lt;"3"::="B@@@"&amp;gt;
Rule&amp;lt;"4"::="B@@@@"&amp;gt;
Rule&amp;lt;"5"::="B@@@@@"&amp;gt;
Rule&amp;lt;"6"::="B@@@@@@"&amp;gt;
Rule&amp;lt;"7"::="B@@@@@@@"&amp;gt;
Rule&amp;lt;"8"::="B@@@@@@@@"&amp;gt;
Rule&amp;lt;"9"::="B@@@@@@@@@"&amp;gt;
Rule&amp;lt;"^@"::="^%"&amp;gt;
Rule&amp;lt;"%"::="~1\n"&amp;gt;
Rule&amp;lt;"%"::="~2\n"&amp;gt;
Rule&amp;lt;"%"::="~3\n"&amp;gt;
Rule&amp;lt;"%"::="~4\n"&amp;gt;
Rule&amp;lt;"%"::="~5\n"&amp;gt;
Rule&amp;lt;"%"::="~6\n"&amp;gt;
Rule&amp;lt;"^$"::="~Thank you for playing ThueDice!\n"&amp;gt;
Applying rule Rule&amp;lt;"_"::="~How many dice do you want to roll (0-9)?\n"&amp;gt; at 3 to "^&amp;lt;&amp;lt;_A$"
How many dice do you want to roll (0-9)?
Applying rule Rule&amp;lt;"&amp;lt;A"::=":::"&amp;gt; at 2 to "^&amp;lt;&amp;lt;A$"
2
Applying rule Rule&amp;lt;"2"::="B@@"&amp;gt; at 2 to "^&amp;lt;2$"
Applying rule Rule&amp;lt;"&amp;lt;B"::="~Here are your rolls:\n"&amp;gt; at 1 to "^&amp;lt;B@@$"
Here are your rolls:
Applying rule Rule&amp;lt;"^@"::="^%"&amp;gt; at 0 to "^@@$"
Applying rule Rule&amp;lt;"%"::="~4\n"&amp;gt; at 1 to "^%@$"
4
Applying rule Rule&amp;lt;"^@"::="^%"&amp;gt; at 0 to "^@$"
Applying rule Rule&amp;lt;"%"::="~5\n"&amp;gt; at 1 to "^%$"
5
Applying rule Rule&amp;lt;"^$"::="~Thank you for playing ThueDice!\n"&amp;gt; at 0 to "^$"
Thank you for playing ThueDice!
No more matchesn. Final state: ""
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interestingly this kind of debug output is much more difficult in the original Thue, as we'd be printing debug information between line contents and its newline.&lt;/p&gt;

&lt;p&gt;And of course we can now have correct Hello, World! that prints that final newline&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_::=~Hello, World!\n
::=
_
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_nl.cr examples_nl/hello.thue
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also fix the program to say hello to someone, these are updated rules, the other 166 are the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!&amp;lt;::=~Hello,\s
^*$::=~!\n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_nl.cr examples_nl/hello2.thue
Alexander
Hello, Alexander!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#designing-a-better-thue"&gt;
  &lt;/a&gt;
  Designing a better Thue
&lt;/h3&gt;

&lt;p&gt;Now we face much bigger issue. Thue programs need crazy amount of repetition as every letter we pass needs its own rule. So for example the program that asks for your name (letters only), has rules like these 52 times each, once for every lowercase and uppercase letter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a&amp;lt;::=&amp;lt;a
^*a::=^*&amp;gt;a
&amp;gt;a::=~a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;FizzBuzz program likewise had rules like these, multiplied for every digit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0✅::=✅0
🍙0::=0🍙
🖨0::=0🖨📄0
📄0::=~0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There were also 10 rules for adding 1 to a digit, which aren't quite the same, but there's a lot of redundancy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0🧲::=✅1
1🧲::=✅2
2🧲::=✅3
3🧲::=✅4
4🧲::=✅5
5🧲::=✅6
6🧲::=✅7
7🧲::=✅8
8🧲::=✅9
9🧲::=🧲0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'd really like to deal with this copypasta. The most obvious idea is to allow character ranges like &lt;code&gt;[0-9]&lt;/code&gt; or &lt;code&gt;[a-zA-Z]&lt;/code&gt;. But then would we also have to do parentheses &lt;code&gt;()&lt;/code&gt; and backreferences &lt;code&gt;\1&lt;/code&gt; so we get rules like these?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;([a-zA-Z])&amp;lt;::=&amp;lt;\1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So I had a different idea. The only thing we really need to match is character classes, so why not do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[a-zA-Z]&amp;lt;::=&amp;lt;[a-zA-Z]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing it like that has nice additional benefit that we can do shifted character classes very neatly, like these rules for addition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[0-8]🧲::=✅[1-9]
9🧲::=🧲0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also repeat the same class multiple times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🖨[0-9]::=[0-9]🖨📄[0-9]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This supports any N-to-N, and N-to-1 mapping. If you have something more complicated, then you'll need to be creative and use multiple rules. I think this is great common ground, where you don't get any crazy additional powers, but it also saves you from pointless copy&amp;amp;paste programming.&lt;/p&gt;

&lt;p&gt;And to make it really clear, all such rules are expanded into their regular form. So &lt;code&gt;🖨[0-9]::=[0-9]🖨📄[0-9]&lt;/code&gt; actually becomes 10 regular Thue rules (well regular plus fixed newline handling).&lt;/p&gt;

&lt;p&gt;An extra feature that I didn't really think about, is that you could have a range on the right side only, which in effect means random choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-programs-in-better-thue"&gt;
  &lt;/a&gt;
  Some programs in Better Thue
&lt;/h3&gt;

&lt;p&gt;Before I show the whole interpreter, let's just go through a few programs, as they're much more concise.&lt;/p&gt;

&lt;p&gt;Here's the dice rolling program, it has 6 rules of what &lt;code&gt;ROLL&lt;/code&gt; can turn into:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;^roll::=^ROLL
^,::=^COMMA
^$::=~
ROLL::=~[1-6]
COMMA::=~,
::=
^roll,roll,roll$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_rx.cr examples_rx/many_dice2.thue
1,5,3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loop uses triple range rule (&lt;code&gt;🖨[0-9]::=[0-9]🖨📄[0-9]&lt;/code&gt;) and different range rule (&lt;code&gt;[0-8]🧲::=✅[1-9]&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# rules for adding one to a digit ::=
# only 9 is special ::=
[0-8]🧲::=✅[1-9]
9🧲::=🧲0
# if extra carry arrived, add leading 1 ::=
^🧲::=^✅1
# we're done, so just let ✅ pass through ::=
[0-9]✅::=✅[0-9]
# print the result ::=
# first activate each letter with 📄, but leave a copy behind ::=
^✅::=^🖨
🖨[0-9]::=[0-9]🖨📄[0-9]
# now print the activated letter ::=
📄[0-9]::=~[0-9]
# once printing finished, switch to increment mode 🧲
🖨$::=🏁🧲$
🏁::=~
::=
^🖨1$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_rx.cr examples_rx/addone.thue
419
420
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hello says hello to you. It's the program that benefited the most:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_::=:::
# let the &amp;lt; pass through to the left ::=
[a-zA-Z]&amp;lt;::=&amp;lt;[a-zA-Z]
# if &amp;lt; reached ^ then we are ready to start printing ::=
# we need this step so it waits for user input before it starts to print ::=
^&amp;lt;::=^*!&amp;lt;
!&amp;lt;::=~Hello,\s
# activate print letter command ::=
^*[a-zA-Z]::=^*&amp;gt;[a-zA-Z]
# execute print letter ::=
&amp;gt;[a-zA-Z]::=~[a-zA-Z]
# we're done, print exclamation mark and newline ::=
^*$::=~!\n
::=
^_&amp;lt;$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_rx.cr examples_rx/hello2.thue
Bitcoinella
Hello, Bitcoinella!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loop loops forever:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# rules for adding one to a digit ::=
# only 9 is special ::=
[0-8]🧲::=✅[1-9]
9🧲::=🧲0
# if extra carry arrived, add leading 1 ::=
^🧲::=^✅1
# we're done, so just let ✅ pass through ::=
[0-9]✅::=✅[0-9]
# print the result ::=
# first activate each letter with 📄, but leave a copy behind ::=
^✅::=^🖨
🖨[0-9]::=[0-9]🖨📄[0-9]
# now print the activated letter ::=
📄[0-9]::=~[0-9]
# once printing finished, switch to increment mode 🧲
🖨$::=🏁🧲$
🏁::=~
::=
^🖨1$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_rx.cr examples_rx/loop.thue | head -n 20
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And FizzBuzz obviously FizzBuzzes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# rules for adding one to a digit ::=
# only 9 is special ::=
[0-8]🧲::=✅[1-9]
9🧲::=🧲0
# if number ended but extra carry arrived, add leading 1 ::=
^🧲::=^✅1
,🧲::=,✅1
# If we reach a comma that means another number starts ::=
# we also want to increment it so switch back to 🧲 mode ::=
,✅::=🧲,
# we're done, so just let ✅ pass through ::=
[0-9]✅::=✅[0-9]
# start the printer ::=
# it's simpler to look at both counter at once ::=
# we reset the counters, then start printer in proper mode ::=
^✅::=^📆
📆1,1,::=1,1,🖨
📆2,1,::=2,1,🖨
📆3,1,::=0,1,🍙📄F
📆1,2,::=1,2,🖨
📆2,2,::=2,2,🖨
📆3,2,::=0,2,🍙📄F
📆1,3,::=1,3,🖨
📆2,3,::=2,3,🖨
📆3,3,::=0,3,🍙📄F
📆1,4,::=1,4,🖨
📆2,4,::=2,4,🖨
📆3,4,::=0,4,🍙📄F
📆1,5,::=1,0,🍙📄B
📆2,5,::=2,0,🍙📄B
📆3,5,::=0,0,🍙📄X
# if we have 📄F, 📄B, or 📄X, we just print that ::=
# then we pass 🍙 to the right without printing number ::=
📄F::=~Fizz
📄B::=~Buzz
📄X::=~FizzBuzz
🍙[0-9]::=[0-9]🍙
# print the result if we're in number print mode ::=
# first activate each letter with 📄, but leave a copy behind ::=
🖨[0-9]::=[0-9]🖨📄[0-9]
# now print the activated letter ::=
📄[0-9]::=~[0-9]
# once printing finished, switch to increment mode 🧲
🖨$::=🏁🧲$
🍙$::=🏁🧲$
🏁::=~
::=
^0,0,0🧲$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ crystal thue_rx.cr examples_rx/fizzbuzz.thue | head -n 20
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For FizzBuzz it looks like the list of 15 remainders combinations could use some more complex regexps to be made more readable, but I guess that's a puzzle you'll need to solve yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-source-code"&gt;
  &lt;/a&gt;
  Final Source Code
&lt;/h3&gt;

&lt;p&gt;Here's the final source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThueRule&lt;/span&gt;
  &lt;span class="n"&gt;getter&lt;/span&gt; &lt;span class="ss"&gt;:left&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"~"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'~'&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;":::"&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;STDIN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;not_nil!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@right&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;replacement&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"Rule&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;::=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThueSideParser&lt;/span&gt;
  &lt;span class="n"&gt;getter&lt;/span&gt; &lt;span class="ss"&gt;:results&lt;/span&gt;
  &lt;span class="vi"&gt;@toparse&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="vi"&gt;@toparse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chars&lt;/span&gt;
    &lt;span class="n"&gt;parse&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;
    &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'['&lt;/span&gt;
        &lt;span class="n"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_range&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="vi"&gt;@results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="vi"&gt;@results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;
          &lt;span class="vi"&gt;@results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"Sizes of character classes mismatch in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_character&lt;/span&gt;
        &lt;span class="vi"&gt;@results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="vi"&gt;@results&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_character&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'\\'&lt;/span&gt;
      &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"Unmatched &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eos?&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'n'&lt;/span&gt;
        &lt;span class="s1"&gt;'\n'&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'s'&lt;/span&gt;
        &lt;span class="s1"&gt;' '&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_range&lt;/span&gt;
    &lt;span class="n"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="no"&gt;Char&lt;/span&gt;
    &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
    &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"Character range never closed in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eos?&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
        &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_character&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"Character range never closed in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eos?&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt;
        &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_character&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"Invalid character range in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eos?&lt;/span&gt;
    &lt;span class="vi"&gt;@toparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThueRuleParser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/\A(.*)::=(.*)\z/&lt;/span&gt;
      &lt;span class="vi"&gt;@valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="vi"&gt;@left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;
      &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="vi"&gt;@left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
      &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
      &lt;span class="vi"&gt;@valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid_rule?&lt;/span&gt;
    &lt;span class="vi"&gt;@valid&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;empty_rule?&lt;/span&gt;
    &lt;span class="vi"&gt;@valid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;
    &lt;span class="n"&gt;lefts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ThueSideParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@left&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;results&lt;/span&gt;
    &lt;span class="n"&gt;rights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ThueSideParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@right&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;results&lt;/span&gt;

    &lt;span class="c1"&gt;# Support N-to-1 and 1-to-N rules&lt;/span&gt;
    &lt;span class="n"&gt;lefts&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;rights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lefts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;rights&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;lefts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;lefts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"Mismatched side of rule &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@str&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;lefts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rights&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;ThueRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThueProgram&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="no"&gt;ThueRule&lt;/span&gt;
    &lt;span class="vi"&gt;@initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
      &lt;span class="c1"&gt;# Ignoring invalid rules, they are sometimes used as comments&lt;/span&gt;
      &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ThueRuleParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid_rule?&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty_rule?&lt;/span&gt;
      &lt;span class="vi"&gt;@rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="vi"&gt;@initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_match&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="n"&gt;matches_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="vi"&gt;@rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;match_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;match_idx&lt;/span&gt;
        &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match_idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;matches_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;rule: &lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;idx: &lt;/span&gt;&lt;span class="n"&gt;match_idx&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@initial&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;
      &lt;span class="vi"&gt;@rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;STDERR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_match&lt;/span&gt;
      &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rule&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;
        &lt;span class="no"&gt;STDERR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Applying rule &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; at &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;
      &lt;span class="no"&gt;STDERR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"No more matches. Final state: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="no"&gt;STDERR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Usage: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;file.thue&amp;gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;prog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ThueProgram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Crystal doesn't handle SIGPIPE well and we want to support:&lt;/span&gt;
&lt;span class="c1"&gt;# crystal thue.cr examples/fizzbuzz.thue | head -n 100&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"DEBUG"&lt;/span&gt;&lt;span class="p"&gt;]?)&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Error&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;os_error&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EPIPE&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;The biggest issue with this interpreter is that every step checks every rule, so it's O(number of rules) * O(state size).&lt;/p&gt;

&lt;p&gt;It would be fairly straightforward to compile list of states into a finite automaton without backtracking, even if specifics (uniformly random match) are a bit different from the usual matching algorithm, so it's technically not a DFA or an NFA.&lt;/p&gt;

&lt;p&gt;Overall I think this language is a much better Thue than the original Thue. Writing actually programs would be just as much of a challenge, but amount of copying and pasting is dramatically lower.&lt;/p&gt;

&lt;p&gt;Another Thue with regexps language is &lt;a href="https://github.com/serprex/Rue"&gt;Rue&lt;/a&gt;, but it supports unlimited regexps, and that makes some coding challenges pretty much trivial.&lt;/p&gt;

&lt;p&gt;As for coding it all in Crystal, it was generally a positive experience. The code contains very few pointless type annotations, and I didn't need to torture it into a different shape than I wanted just to make the type checker happy. I mostly chose it over Ruby, as I wanted to do the very fast finite automaton, but in the end I didn't quite get there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-55-crystal-thue"&gt;Code for the Better Thue Interpreter in Crystal episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>thue</category>
      <category>crystal</category>
      <category>ruby</category>
    </item>
    <item>
      <title>The story behind JS: how async works</title>
      <author>Saksham</author>
      <pubDate>Fri, 14 Jan 2022 19:18:16 +0000</pubDate>
      <link>https://dev.to/sakshamak/the-story-behind-js-how-async-works-2jea</link>
      <guid>https://dev.to/sakshamak/the-story-behind-js-how-async-works-2jea</guid>
      <description>&lt;p&gt;We all know that JS is a single-threaded non-blocking asynchronous concurrent language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what does this actually mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s find out: &lt;/p&gt;

&lt;p&gt;Suppose we have a function that calls another function that calls one more function, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;finalFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addDigits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addDigits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;finalFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We all know that &lt;code&gt;finalFunc&lt;/code&gt; will call &lt;code&gt;callAdd&lt;/code&gt;, callAdd will call &lt;code&gt;add&lt;/code&gt;, and add will return the sum of these two numbers and we will get &lt;code&gt;7&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;But what’s happening behind the scenes?&lt;br&gt;
&lt;a href="https://i.giphy.com/media/xT0xemn9kAM4F52NFK/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT0xemn9kAM4F52NFK/giphy-downsized.gif" alt="gif" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, there is a thing called &lt;strong&gt;call stack&lt;/strong&gt; in JavaScript which is a type of data structure that records basically where we are currently in our program. &lt;/p&gt;

&lt;p&gt;It looks something like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qiDyLXBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186131751/yzMLLABof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qiDyLXBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186131751/yzMLLABof.png" alt="image.png" width="283" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in here, this is how our program runs:&lt;/p&gt;

&lt;p&gt;lets take a look at our code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;finalFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addDigits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addDigits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;finalFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here when we called the &lt;code&gt;finalFunc&lt;/code&gt; function, it was recorded in the call stack, and inside that we called another function which was then called and got recorded in the call stack again, which called the &lt;code&gt;add&lt;/code&gt; function and it gets recorded as we can see in our diagram. &lt;/p&gt;

&lt;p&gt;The return statement then gets executed and the function is removed from the call stack. &lt;br&gt;
then the return statement of &lt;code&gt;callAdd&lt;/code&gt; function gets executed and it gets removed from the stack and then the &lt;code&gt;finalFunc&lt;/code&gt; then calls the &lt;code&gt;console.log&lt;/code&gt; function and it gets executed and then the &lt;code&gt;finalFunc&lt;/code&gt; is removed from the call stack and the program ends.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBYKZP4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186480797/CCUSBkmil.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBYKZP4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186480797/CCUSBkmil.gif" alt="ezgif.com-gif-maker (1).gif" width="600" height="330"&gt;&lt;/a&gt;&lt;br&gt;
So this is how our program actually runs inside JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correction: The code in this video is a bit incorrect, the actual code is the one written above.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#waiting-for-callbacks-and-settimeout"&gt;
  &lt;/a&gt;
  Waiting for Callbacks and SetTimeout
&lt;/h3&gt;

&lt;p&gt;Let us assume that callbacks and setTimeout are synchronous and we call them in our program. Then what do you think will happen? &lt;br&gt;
The call stack waits until the processing of the current is done. So, yes, the call stack will have to wait till the timeout ends. Till then we won't be able to do any task. &lt;/p&gt;

&lt;p&gt;And suppose there is one callback that never returns. Then what?&lt;br&gt;
Your code will be stuck forever. That’s why being asynchronous is important.&lt;/p&gt;

&lt;p&gt;We did the normal function call in JS. But now let's try setTimeout in our program. FYI setTimeout and callbacks are not part of the JS engine. They are part of browser API.&lt;/p&gt;

&lt;p&gt;And now setTimeouts are something that waits to perform a particular action. But as we said JavaScript is a non-blocking language. Then where does this waiting go?&lt;/p&gt;

&lt;p&gt;So what happens behind the scenes, in the case of timeouts, is that when a timeout is called it is shifted to a special place called &lt;strong&gt;callback queue&lt;/strong&gt; or &lt;strong&gt;task queue.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The role of the callback queue is to hold the timeouts when they are complete and send it to the call stack when it's empty.&lt;/p&gt;

&lt;p&gt;But who checks if the call stack is empty or not?&lt;/p&gt;

&lt;p&gt;This is where the event loop comes into play. The event loop keeps on checking if the queue and call stack are empty or not, if the task queue is not empty it checks if the call stack is empty or not, if the call stack is empty then it sends the timeouts to call stack one by one.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callAdd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;callAdd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;callAdd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Output: &lt;/span&gt;
&lt;span class="c1"&gt;//5&lt;/span&gt;
&lt;span class="c1"&gt;// callAdd&lt;/span&gt;
&lt;span class="c1"&gt;//hello world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how a browser looks and as we can see that JS engine is not the only thing that is present in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ae5L1sI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186905759/dMOJi-w-7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ae5L1sI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186905759/dMOJi-w-7.png" alt="image.png" width="490" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we look at the above code, initially the call stack is empty, when the code starts running, first the console.log() function will come in the call stack and it will call the add function. The add function will execute and is removed from the stack, then console.log is executed and removed from the stack.&lt;/p&gt;

&lt;p&gt;Next comes the settimeout, function that comes to the call stack but then it is moved to the browserAPI section and waits till the timer is up, and is moved to the task queue, till then callAdd function is called to the call stack, and is executed, then console.log function is called inside the call stack and is executed and removed and then callAdd function is removed.&lt;/p&gt;

&lt;p&gt;And in between that the event loop keeps on checking if the call stack is empty or not, now as our call stack is empty, the event loop sends the setTimeout function from the task queue to the call stack which then calls the console.log() function which executes and removed from the call stack and finally setTimeout is removed from the stack and the program ends.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuBaMVDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186965937/q3XU5KFX4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuBaMVDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642186965937/q3XU5KFX4.gif" alt="ezgif.com-gif-maker.gif" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you must be wondering what this microtask queue is?&lt;br&gt;
Well, it's exactly the same as a callback queue except that all the callbacks functions are stored here and the Microtask queue has a &lt;strong&gt;higher priority&lt;/strong&gt; over the callback queue. which means that if there is anything inside the microtask queue it doesn't matter if the callback queue is full. &lt;/p&gt;

&lt;p&gt;Until the microtask queue is not empty callback queue will not run.&lt;/p&gt;

&lt;p&gt;If we made a callback function, then that is stored in the browser api till it gets resolved, it is then sent to the microtask queue and the event loop waits till the call stack is empty and then sends the callback function to the call stack and it executes.&lt;/p&gt;

&lt;p&gt;So this was all about how async JS works. And yes, JS doesn’t like to wait so thanks to the event loop and the queues for the hard work.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Programmatically Rendering PDFs from HTML using Chrome and Puppeteer</title>
      <author>Stout Systems</author>
      <pubDate>Fri, 14 Jan 2022 19:03:27 +0000</pubDate>
      <link>https://dev.to/stoutsystems/programmatically-rendering-pdfs-from-html-using-chrome-and-puppeteer-31e2</link>
      <guid>https://dev.to/stoutsystems/programmatically-rendering-pdfs-from-html-using-chrome-and-puppeteer-31e2</guid>
      <description>&lt;p&gt;I've been a web developer for a long time, and one concept that always comes up is turning HTML into a PDF. It's a pretty natural request; HTML is a nice display oriented format and has great layout and styling abilities. Plus, for a web app, I probably already have code written to produce the exact content I want. I just need to turn that content into a read-only, portable PDF for downloading or attaching to an email, without forcing the user to print to pdf manually.&lt;/p&gt;

&lt;p&gt;I've used numerous technologies for doing that conversion, including &lt;a href="https://www.websupergoo.com/abcpdf-1.aspx"&gt;WebSuperGoo's ABCpdf.net&lt;/a&gt;, and &lt;a href="https://github.com/webgio/Rotativa"&gt;Rotativa's free library&lt;/a&gt;. (&lt;a href="https://www.stoutsystems.com/creating-pdfs-from-asp-net-mvc-applications-with-rotativa/"&gt;We even have an article on how to use it.&lt;/a&gt;) The latter is still in use on some of my projects, but it—and its newer .Net Core version—is based on &lt;a href="https://wkhtmltopdf.org/"&gt;wkhtmltopdf.exe&lt;/a&gt;, which is a problem. More about that later.&lt;/p&gt;

&lt;p&gt;Most of these tools work by using a browser to render the HTML and create the PDF document. The browser engine already knows how to render HTML (and use CSS and JavaScript), so why reinvent the wheel?&lt;/p&gt;

&lt;p&gt;The issue with wkhtmltopdf—and any tool that uses it—is that it's based on the WebKit rendering engine used by Safari. If you haven't heard, &lt;a href="https://www.safari-is-the-new-ie.com/"&gt;WebKit is the new Internet Explorer&lt;/a&gt; in terms of holding back standards adoption and preventing us from having nice things. Okay, yes, that's bombastic hyperbole, but I've honestly run into more than my fair share of styling and layout issues in which wkhtmltopdf just won't render like all other browsers will. Maybe that's a function of wkthtmltopdf, rather than WebKit itself, but still, my problem remains in search of a solution.&lt;/p&gt;

&lt;p&gt;The latest solution I've found is &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt;. It's a Node.Js package that manipulates a headless (i.e. no browser window) version of Chrome. Chrome updates frequently, supports good standards, and renders well. The PDF output from Puppeteer matches pretty exactly with the output you would get using Chrome to print to a PDF manually.&lt;/p&gt;

&lt;p&gt;Puppeteer supports great options like headers and footers (with template content for "Page N of X"), control of print margins, printing background images, different page sizes, and more. Since you are rendering in a real browser, you can even use JavaScript to generate dynamic content as needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-details"&gt;
  &lt;/a&gt;
  Implementation Details
&lt;/h2&gt;

&lt;p&gt;Step one is to generate your HTML. There are two ways to do this; you can point Puppeteer at a URL or at a local (temp) file with HTML. The former might be convenient, but only if your web application allows anonymous access to the URL you want to print. That's not usually the case for me, so I often end up with the local file route. The only catch there is to make sure any resources like CSS files or images you reference are publicly accessible—and that your HTML has the full URLs for them (or a  element in the head to specify the base URL for relative requests).&lt;/p&gt;

&lt;p&gt;Step two is to call Puppeteer and tell it what to print, what options, and where to put the output PDF.&lt;/p&gt;

&lt;p&gt;Step three is simply to wait for Puppeteer to finish rendering, grab the bytes of the file and send it to the response pipeline. Clean up your temp files, and voila!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-gory-aspnet-details"&gt;
  &lt;/a&gt;
  The Gory ASP.Net details
&lt;/h2&gt;

&lt;p&gt;Step two above was leaving a lot unsaid! How do I actually call a Node.Js package from my Asp.Net web application? Here are the steps I took, which are about the same for Asp.Net or Asp.Net Core (though a little easier in the latter).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Node.JS on the webserver. You'll be running a node "application" there now, so you'll need it. You'll also need it on your development machine, but you might already have it since it's a part of a lot of build tool chains now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a folder in your project and on the server that will host the new node scripts.&lt;br&gt;
This folder should be outside of the web application; it doesn't need to be served by your web server, so it shouldn't be web accessible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use npm to install Puppeteer and any other packages you need in that folder (separate from any npm packages you use elsewhere in your project). I do this on my dev machine. Then I copy the package.json (and package-lock.json) to the server folder and "npm install" there. I don't deploy the node_modules folder, though I guess you could, instead of deploying package.json. Be aware that the modules needed for Chrome are 200+MB, so you don't want them in your source repository!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a simple JavaScript file that exports a function that runs Puppeteer with whatever inputs you want.&lt;br&gt;
The Puppeteer project has some samples that can serve as a starting point for this code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now the tricky part is calling that script from ASP.Net!&lt;br&gt;
I used &lt;a href="https://www.nuget.org/packages/Microsoft.AspNetCore.NodeServices/"&gt;AspNetCore.NodeServices&lt;/a&gt; to manage the Node.js executable instance. Despite the name, older versions of that library run fine under Asp.Net (non-core), though it has an embarrassing number of dependencies. (Annoying, but worth it in my case.) If you are using this from Asp.Net Core it's pretty straightforward. From the older Asp.net platform you'll need to jump through some small hoops to setup dependency injection, but they aren't too difficult (aside from your learning curve if you aren't familiar), and don't need to impact the rest of your codebase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That library has a nice simple method to invoke your script and wait for it to finish. One gotcha is that your script function should take a "callback" function as the first argument. The function should call this with either an error or the success results like so:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;//AddNumbers.js&lt;/p&gt;

&lt;p&gt;module.exports = async (callback, a, b) =&amp;gt; {&lt;/p&gt;

&lt;p&gt;var rv = (parseInt(a,10) + parseInt(b,10)).toString();&lt;/p&gt;

&lt;p&gt;callback(null /&lt;em&gt;error&lt;/em&gt;/, rv  /&lt;em&gt;success&lt;/em&gt;/);&lt;/p&gt;

&lt;p&gt;};&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I find needing to install node.js on the server and the concept of having a separate node.js "application" deployed and running on the server, separate from my web application, to be a strange architecture.&lt;/p&gt;

&lt;p&gt;It's not that much worse than wkhtmltopdf solutions though, since they also need a large separate application to be deployed to the server. Those solutions just hide the complexity better through wrapper libraries.&lt;/p&gt;

&lt;p&gt;Even if more complex, the results of this Node.js/Puppeteer/Chrome solution are worth it! I can use modern layouts and CSS (e.g. flexbox) to create PDFs that look as good as the browser. And PDF generation speed is fast! Since Chrome updates frequently, I expect that this will be a solution I can support for years to come.&lt;/p&gt;

&lt;p&gt;_This is a technical/business article catered to developers, hiring/project managers, and other technical staff looking to improve their skills. &lt;a href="https://www.stoutsystems.com/signup"&gt;Sign up&lt;/a&gt; to receive our articles in your email inbox.&lt;/p&gt;

&lt;p&gt;If you're looking for a job in the tech industry, &lt;a href="https://www.stoutsystems.com/jobs"&gt;visit our job board&lt;/a&gt; to see if you qualify for some of our positions. If you're looking to hire technical talent for your company, please &lt;a href="https://www.stoutsystems.com/connect/"&gt;contact us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.stoutsystems.com/"&gt;Stout Systems&lt;/a&gt; is the software consulting and staffing company Fueled by the Most Powerful Technology Available: Human Intelligence®. We were founded in 1993 and are based in Ann Arbor, Michigan. We have clients across the U.S. in domains including engineering, scientific, manufacturing, education, marketing, entertainment, small business and robotics. We provide expert level software, Web and embedded systems development consulting and staffing services along with direct-hire technical recruiting and placements._&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Augmented Reality Trends of 2022: A Vision of Immersion</title>
      <author>Andrew Makarov</author>
      <pubDate>Fri, 14 Jan 2022 18:57:17 +0000</pubDate>
      <link>https://dev.to/andrewmobi/10-augmented-reality-trends-of-2022-a-vision-of-immersion-42j3</link>
      <guid>https://dev.to/andrewmobi/10-augmented-reality-trends-of-2022-a-vision-of-immersion-42j3</guid>
      <description>&lt;p&gt;Augmented reality technology has proven to be one of the top innovations opening up new growth points for businesses around the world. Analysts predict that the AR market will reach &lt;a href="https://www.statista.com/statistics/591181/global-augmented-virtual-reality-market-size/"&gt;$198 billion in 2025&lt;/a&gt;. This year, the number of mobile AR users is expected to reach 3.5 billion.&lt;/p&gt;

&lt;p&gt;With a large market to tap into, providing AR experiences can be a competitive edge in many industries. The improving technology also stands to allow for greater efficiency in the workplace. Let’s take a look at some of the augmented reality trends driving innovation in 2022. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-1-mobile-augmented-reality-is-evolving"&gt;
  &lt;/a&gt;
  Trend #1: Mobile Augmented Reality Is Evolving
&lt;/h2&gt;

&lt;p&gt;Mobile augmented reality has many clear advantages that make it the center of much of the technology’s attention. Many users already own an AR capable smartphone, so there’s no need for them to go out of their way to get an expensive and bulky headset. Mobile devices, by their nature, are very portable and easy to bring into nearly any space. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzsPBkTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b0d2rb3n9p1k2pcbees.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzsPBkTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b0d2rb3n9p1k2pcbees.png" alt="Mobile AR 2020-2021: ARKit + ARCore" width="880" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apple-arkit-5"&gt;
  &lt;/a&gt;
  APPLE ARKIT 5
&lt;/h3&gt;

&lt;p&gt;The latest version of Apple’s open source mobile augmented reality development toolset, &lt;a href="https://developer.apple.com/augmented-reality/arkit/"&gt;ARKit 5&lt;/a&gt;, offers significant improvements from ARKit 4. Some of the most important enhancements include expanded support for location anchors, improved motion tracking, and greater face tracking in the ultra wide camera on the 5th generation iPad Pro. App Clip Codes also enable AR experiences that can be activated through a quick scan. &lt;/p&gt;

&lt;p&gt;Location anchors have seen improvements since they were introduced in ARKit 4. Location anchors enable enhanced AR-based navigation solutions. This allows app developers to place virtual objects with specific latitude, longitude, and altitude on the screen relative to the positions of real world objects. For example, location anchors could display a three dimensional icon or text in space next to an iconic building. Support for this feature has been expanded to London and other cities in the United States in ARKit 5. &lt;/p&gt;

&lt;p&gt;Expanded face tracking now supports all devices with the A12 Bionic chip and later, even without TrueDepth Camera, like iPhone SE, so you can reach even more users. Also face tracking is now supported by the Ultra Wide camera in the latest iPad Pro (5th generation).&lt;/p&gt;

&lt;p&gt;This feature allows for tracking of up to three faces at once. &lt;/p&gt;

&lt;p&gt;App Clip Codes are useful QR code-like images that can be scanned to start up a lightweight portion of an app. Integrating this feature with ARKit allows for augmented reality experiences to be started up from anywhere without having to download additional software. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Business owners looking to build apps that utilize &lt;a href="https://mobidev.biz/blog/arkit-guide-augmented-reality-app-development-ios"&gt;ARKit may find our ARKit Development Guide&lt;/a&gt; useful for getting an overview of how they can achieve their goals.&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arcore"&gt;
  &lt;/a&gt;
  ARCORE
&lt;/h3&gt;

&lt;p&gt;The Android equivalent of ARKit, ARCore provides the open source native tool set needed for developers to create augmented reality apps on Android devices. It is generally seen as being a bit of a different challenge than ARKit due to the fact that special attention should be paid to the wide variety of hardware that exists on devices running Android. Because of this, certain features may not be compatible with all Android devices. &lt;/p&gt;

&lt;p&gt;This past year, Google introduced a few new features for ARCore such as recording and playback APIs. These enable developers to record video footage with AR metadata. By using depth and IMU motion sensor data, developers can recreate the same environment as in the video and use it for further testing. This opens up the opportunity for developers to more easily test specific environments with their software. &lt;/p&gt;

&lt;p&gt;Recording and playback API isn’t just useful for developers, but for users as well. This technology makes it possible for users to record video and then apply AR effects later on since video can contain environmental metadata. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arkit-vs-arcore"&gt;
  &lt;/a&gt;
  ARKIT VS ARCORE
&lt;/h3&gt;

&lt;p&gt;The battle between ARKit and ARCore isn’t as clear cut as you might think. ARKit appears to have the best compatibility between software and hardware, as Apple is responsible for all aspects of their devices. However, not every user in the market owns an iPhone or iPad. ARCore is just as important to focus on due to user accessibility. Although support is not guaranteed for every Android device due to variation in hardware, including as many users as possible is important for remaining competitive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PtbPEvun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axuwwp1ct76z4q8qvd34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PtbPEvun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axuwwp1ct76z4q8qvd34.png" alt="Comparison of ARKit and ARCore features in 2022" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of actual performance, the technology behind these two frameworks is almost the same. For example, for applications like scene detection, the two technologies use the same methods, differing most significantly in hardware. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’d like to learn more about technologies and platforms for AR applications, read the MobiDev Experts’ Guide to &lt;a href="https://mobidev.biz/blog/augmented-reality-development-guide"&gt;Developing Augmented Reality&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-2-powering-indoor-and-outdoor-navigation"&gt;
  &lt;/a&gt;
  Trend #2: Powering Indoor and Outdoor Navigation
&lt;/h2&gt;

&lt;p&gt;In 2022, &lt;a href="https://mobidev.biz/blog/augmented-reality-indoor-navigation-app-developement-arkit"&gt;AR navigation&lt;/a&gt; has become more fluid and achievable than ever before. Most importantly, the rise of technologies like Bluetooth Low Energy (BLE) antennas, Wi-Fi RTT and ultra wideband (UWB) make indoor navigation much more viable than in previous years. One of the most useful applications of this technology is for displaying AR directions in large indoor locations like distribution centers, shopping malls, and airports. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch the demo below to find out how MobiDev implemented mobile AR for navigation of the corporate campus.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VmROm6nbElA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Something that shouldn’t be overlooked is this technology’s potential to be used by both consumer and business users. Just as a guest in a store may use AR indoor navigation to find the product they’re looking for, a distribution center worker may use it to find a particular item in their warehouse. Although comfortable and affordable glasses with AR capability aren’t quite here yet, the capacity for the business applications of AR in distribution centers, stores, and other sectors is there. One of the leading device manufacturers, Zebra, has ARCore-capable mobile enterprise devices such as the TC52, TC57, and TC77. These are essentially Android-powered smartphones with barcode scanners intended for business use. &lt;/p&gt;

&lt;p&gt;With indoor navigation, buy online pick up in store (BOPIS) services can be made much more efficient. Team members tasked to ‘pick’ the items in the store for order fulfillment can use AR directions to directly navigate to find the item as opposed to following coordinate directions to find the item. This eliminates time spent looking through many similar items and finding the correct aisle and section of the store. All the team member has to do is hold up their device and see the directions on screen. &lt;/p&gt;

&lt;p&gt;There are some limitations that need to be taken into account, such as items that have been misplaced around the store. If they have been moved by guests or incorrectly logged into the system, the team member might use AR navigation on their device to arrive at an empty spot on a shelf. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-3-healthcare-and-augmented-reality"&gt;
  &lt;/a&gt;
  Trend #3: Healthcare and Augmented Reality
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://www2.deloitte.com/global/en/pages/life-sciences-and-healthcare/articles/global-health-care-sector-outlook.html"&gt;Deloitte Research&lt;/a&gt;, augmented reality and AI will transform the traditional healthcare business model by offering AR/MR-enabled hands-free solutions and IA-based diagnostic tools. For example, Microsoft Hololens 2 can provide information to the surgeon while allowing them to use both of their hands during the procedure. &lt;/p&gt;

&lt;p&gt;With the continued restrictions associated with Covid-19, the use of augmented reality solutions is becoming increasingly important to address issues such as the complexity of remote patient support and the increased burden on hospitals. This includes both telesurgery solutions and mental health apps that are helping people to maintain psychological balance during these difficult times.&lt;/p&gt;

&lt;p&gt;AR technology can also improve telemedicine solutions that are on the rise right now. Features such as drawing and annotating on the 3D screen can make communication between doctors and patients much easier and clearer. Remote assistance tools can also help clinicians support their patients while reducing downtime.&lt;/p&gt;

&lt;p&gt;Combining with &lt;a href="https://mobidev.biz/blog/5-essential-machine-learning-techniques"&gt;machine learning algorithms&lt;/a&gt;, AR technology can become an efficient option for disease detection. Back in 2020, Google announced the development of an AR-based microscope for the Department of Defense (DoD) to improve the accuracy of cancer diagnosis and treatment. Such a hybrid device uses a camera to capture images in real time, which are then processed using computer diagnostics to immediately display results and diagnose diseases at an early stage.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.researchdive.com/covid-19-insights/218/global-augmented-reality-ar-in-healthcare-market"&gt;Research Dive&lt;/a&gt;, the global augmented reality (AR) in the healthcare market is expected to generate $1,918.6 million by 2026.&lt;/p&gt;

&lt;p&gt;Learn how AR and other innovative technologies are being used in healthcare by reading &lt;a href="https://mobidev.biz/blog/technology-trends-healthcare-digital-transformation"&gt;Health Technology Trends and Digital Innovation in 2022&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-4-augmented-reality-shopping-experiences"&gt;
  &lt;/a&gt;
  Trend #4: Augmented Reality Shopping Experiences
&lt;/h2&gt;

&lt;p&gt;Augmented reality has numerous opportunities in the &lt;a href="https://mobidev.biz/blog/augmented-reality-marketing-sales"&gt;retail sector&lt;/a&gt;. One of these opportunities that is currently being realized is store mapping. With augmented reality, on-screen directions can help a user navigate the layout of the store to find the item that they need. Dent Reality is one of the companies developing AR mapping systems for stores. All the user has to do is hold their phone up and follow the augmented reality directions through the aisles to their destination: the item they’re looking for. &lt;/p&gt;

&lt;p&gt;However, AR in retail doesn’t stop at navigation in 2022. In fact, it can help users shop in stores and from home. For example, AR-based marketing materials can not only improve the engagement of your audience but also increase the likelihood of purchases. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At MobiDev, we’ve created a demo that shows how a solution like augmented reality business cards can influence purchasing decisions by interactively presenting information about your products and services.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/u8njnXc7ziY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Augmented reality is also very useful for helping customers ‘test’ products before purchasing. Stores like Ikea and Target have already rolled out apps that allow users to use AR to see how furniture will fit in their homes. Many stores like Target, Sephora, and others are also using virtual try-on solutions to allow guests to test products like makeup, glasses, and even other types of clothing like shoes. Most importantly, this can be done in store or at home. As AR technology matures, the &lt;a href="https://instasize.com/blog/5-fundamentals-to-boost-your-customer-focus"&gt;comfort of consumers&lt;/a&gt; will only increase.&lt;/p&gt;

&lt;p&gt;As mobile &lt;a href="https://mobidev.biz/blog/ar-ai-technologies-virtual-fitting-room-development"&gt;virtual fitting room technology&lt;/a&gt; improves, so do in-store smart mirrors. In 2011, Topshop used virtual mirrors powered by Xbox Kinect 3D cameras. It was a great proof of concept that preceded more advanced use-cases today with better graphics and processing. According to &lt;a href="https://www.fortunebusinessinsights.com/press-release/virtual-fitting-room-vfr-market-9531#:~:text=The%20global%20virtual%20fitting%20room%20market%20size%20is,as%20gamification%2C%20product%20information%2C%20content%2C%20and%20augmented%20environments."&gt;Fortune Business Insights&lt;/a&gt;, the virtual fitting room market size was valued at $3.5 billion in 2021. It is expected to grow to $12.97 billion by 2028.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-5-augmented-reality-and-remote-assistance"&gt;
  &lt;/a&gt;
  Trend #5: Augmented Reality and Remote Assistance
&lt;/h2&gt;

&lt;p&gt;Augmented reality can greatly improve user experiences with assistance and learning. According to &lt;a href="https://resources.owllabs.com/state-of-remote-work/2020"&gt;Owl Labs&lt;/a&gt;, in 2020 nearly 70% of workers in the U.S. working full time, &lt;a href="https://www.sweetprocess.com/work-from-home/"&gt;work from home&lt;/a&gt;. With video conferencing being the lifeblood of telework, various problems emerge. How can we compensate for the lost context and benefits of meeting in the ‘real world?’ &lt;/p&gt;

&lt;p&gt;When we use video conferencing, we lose an entire dimension of context, moving into two dimensional space instead of three. This can negatively impact jobs like IT technical support. Teleconferencing is limited, only allowing IT specialists to make suggestions so that the user can fix the problem on their own before they choose to send their device into the office for repairs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ar-in-action-3d-video-call-assistance"&gt;
  &lt;/a&gt;
  AR IN ACTION: 3D VIDEO CALL ASSISTANCE
&lt;/h3&gt;

&lt;p&gt;Augmented reality software can help at least partially restore that lost dimension of space back into the conversation. AR can allow IT technicians to give guidance to users with 3D on-screen directions. As the user holds their smartphone camera up to their computer in need of service, the IT technician can draw over the screen to direct the customer to certain points of interest. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We developed a solution that does just that. You can see it in action in the video below.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/11NiyGoKOrk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Experiences like this can be constructed with WebRTC. This allows for both parties to connect to one another and see the same AR experience via a peer-to-peer connection. This is essential to make sure that the video is sent in real time without causing debilitating server load. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ar-in-action-virtual-manuals"&gt;
  &lt;/a&gt;
  AR IN ACTION: VIRTUAL MANUALS
&lt;/h3&gt;

&lt;p&gt;As a slight departure from telework, virtual manuals are a compelling technology used in various industries to improve user satisfaction and understanding of products. It also has many applications in education. With object recognition, AR guides can identify objects and inform the user about their functions. This can make for effective guides for products like consumer electronics, vehicle interiors, and more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The MobiDev demo below demonstrates this technology in action with a coffee machine. The AR guide in the video gives more context about the coffee machine’s capabilities and provides additional instructions all on the user’s smartphone.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6ceN7YgSEdU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-6-augmented-reality-in-automotive-industries"&gt;
  &lt;/a&gt;
  Trend #6: Augmented Reality in Automotive Industries
&lt;/h2&gt;

&lt;p&gt;AR technology has had profound impacts on vehicle safety and usability. Tesla Motors has demonstrated the possibilities of AR for the road. Although they haven’t implemented it as many might imagine with headsets, they have used almost identical technologies to make it possible. With the Full Self-Driving Beta now on the road and used by many consumers, drivers can see how the vehicle’s advanced suite of cameras consistently analyze the world around them using object detection and scene analysis. The results of this powerful system can be seen on the display of the vehicle, showcasing the car’s position in space relative to the many obstacles around it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heads-up-display"&gt;
  &lt;/a&gt;
  HEADS UP DISPLAY
&lt;/h3&gt;

&lt;p&gt;However, AR has other possible applications for drivers. It could help provide drivers with a heads up display (HUD) via a headset to give them safety information without obstructing their field of vision. With eye tracking, this kind of system and similar non-headset based solutions can help keep drivers focused on the road with auditory reminders. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://varjo.com/testimonial/xr-test-drive-with-volvo/"&gt;Volvo Varjo XR-1 headset&lt;/a&gt; is used for a proof of concept AR driver’s education system that can help drivers learn to respond defensively to obstacles that appear on the road without having the risk of the object actually being present. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automotive-sales"&gt;
  &lt;/a&gt;
  AUTOMOTIVE SALES
&lt;/h3&gt;

&lt;p&gt;Just like in other contexts, AR is an effective sales tool that can help sell cars even while the user is at home. Similar to how one can spawn IKEA furniture in their living room with AR, one can also generate a 3D model of a car in their driveway with their smartphone. The consumer can inspect the size and details of the vehicle, and even watch it move around. Perhaps most strikingly, it’s possible for the user to change the color of the vehicle to see which color they would prefer when purchasing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-7-ar-glasses-future-or-fiction"&gt;
  &lt;/a&gt;
  Trend #7: AR Glasses, Future or Fiction?
&lt;/h2&gt;

&lt;p&gt;Augmented reality glasses and headsets have an interesting reputation. Although they are widely seen as the future of AR technology and have been tested and utilized in real world applications, they haven’t quite made the mainstream just yet. If they’ve made a landing point anywhere, it has been for enterprise and business solutions.&lt;/p&gt;

&lt;p&gt;Although &lt;a href="https://mobidev.biz/blog/microsoft-hololens-demo"&gt;Microsoft’s HoloLens 2&lt;/a&gt; mixed reality headset is not priced or marketed for consumers, it is in use with the military and with medical practitioners for surgeries and training. The Synthetic Training Environment (STE) used by the US Army uses AR and VR to help immerse soldiers and simulate various scenarios. Australian aircraft technicians are now using Microsoft HoloLens with Boeing-developed software to maintain aircrafts. &lt;/p&gt;

&lt;p&gt;Check the video below to see the HoloLens in action!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vnVZhIRvyp0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;However, these headsets are far too bulky to be used by non-enterprise users, and the failure of Google Glass for consumers showed that we are a long way off from lightweight, comfortable to wear ‘AR glasses’. However, Google Glass launched eight years ago. Are we any closer now? &lt;/p&gt;

&lt;p&gt;Google Glass Enterprise Edition 2 is in use by various businesses like DHL for order fulfillment. There are also plenty of rumors about AR glasses being made by companies like Apple but there isn’t much word on a comfortable to use, affordable and ‘normal’ looking pair of glasses that will take the consumer market by storm. That being said, ARtillery Intelligence expects that the market for this technology will grow from $822 million to $13.4 billion by 2024. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-8-the-metaverse-live-events-and-social-upheaval"&gt;
  &lt;/a&gt;
  Trend #8: The Metaverse, Live Events, and Social Upheaval
&lt;/h2&gt;

&lt;p&gt;Facebook may have taken the Internet by storm with its rebrand to Meta, but the concept of the Metaverse and upheaval of digital communication with extended reality space has been around for some time. The term originated in Neal Stephenson’s 1992 Snow Crash science fiction novel, perhaps speculating the eventual result of how large corporations take more and more control over the lives of consumers. &lt;/p&gt;

&lt;p&gt;It’s important to be cautious of the effects of this shift in the market toward increasingly digital and virtual reality spaces, but ultimately the benefits of this technology can be profoundly helpful and provide businesses competitive advantages in many industries. Although the metaverse is very focused on VR spaces, the movement will likely transform &lt;a href="https://mobidev.biz/blog/how-to-create-augmented-reality-app-for-business-cost-process-flow"&gt;AR’s use in business&lt;/a&gt; and consumer contexts as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arpowered-meetings"&gt;
  &lt;/a&gt;
  AR-POWERED MEETINGS
&lt;/h3&gt;

&lt;p&gt;One of the main pitches that Meta offered with its rebranding was the use of ‘metaverse’ technology to improve the way that we work through teleconferencing and hybrid meetings. The ultimate goal of this is to break down the barriers of traditional &lt;a href="https://biz30.timedoctor.com/how-to-use-zoom/"&gt;Zoom video conferencing&lt;/a&gt; and bring the third dimension back into the conversation, as well as human expression and inclusiveness. Microsoft Mesh is a project with HoloLens that helps enable hybrid meetings that enable VR and AR features. Users can see other teleconferencing users in 3D space by viewing their cartoon avatar or a floating box with their video camera. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-ar-better-accessibility-to-ar-features-comes-with-compromise"&gt;
  &lt;/a&gt;
  WEB AR: BETTER ACCESSIBILITY TO AR FEATURES COMES WITH COMPROMISE
&lt;/h3&gt;

&lt;p&gt;One particular trend in enabling better access to AR features is Web AR. This has been used for various purposes like virtual career fairs, &lt;a href="https://mobidev.biz/blog/augmented-reality-demo-marketing-brand-promotion"&gt;animated business cards&lt;/a&gt;, and sporting events. By powering an AR experience completely within a mobile device’s browser, the user doesn’t need to download any external applications.&lt;/p&gt;

&lt;p&gt;However, this comes at a great cost. Web AR does not have access to the full scope of the device’s capabilities. This means that the quality and use-cases of web AR are very limited. For more advanced use of AR, we recommend you consider a native approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--53sX54WV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07ppery3k64a22tw5jlx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--53sX54WV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07ppery3k64a22tw5jlx.png" alt="AR-compitable Devices and Active Users 2020-2021" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Although there are hundreds of millions of WebAR capable mobile devices out there, very few users actively use these experiences.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-9-ar-in-education"&gt;
  &lt;/a&gt;
  Trend #9: AR In Education
&lt;/h2&gt;

&lt;p&gt;We’ve already touched on AR in education a little bit in this article with AR guides. With educational institutions being hit hard by the COVID-19 pandemic, momentum for innovation in this space has increased. Teams like Wikitude have created apps like &lt;a href="https://www.wikitude.com/showcase/teaching-programming-with-ar/"&gt;Ai.R-Cord&lt;/a&gt; with the objective of helping elementary school students learn concepts with AR experiences and this is not the only example. &lt;/p&gt;

&lt;p&gt;AR in education simplifies the perception of information and leverages technology to enable teachers to demonstrate virtual examples and gamify the learning process. This increases student engagement and speeds up the process of mastering the materials. For example, the Chem101 AR app helps students understand complex compounds in chemistry. Using special cards, students can virtually modify molecular structures and receive real-time information about them. &lt;/p&gt;

&lt;p&gt;Augmented reality based apps can also give students access to unique learning environments that are difficult or even dangerous to experience in real life without proper preparation. For example, some apps help medical students learn more about human anatomy through AR visualization and 3D models, and even allow them to simulate surgeries.&lt;/p&gt;

&lt;p&gt;In addition to classroom teaching, AR can also be used in employee training. This technology allows you to train your employees in a safe environment with less cost and higher efficiency. AR apps give an employee the opportunity not only to read about how something works, but to learn how to do it by making actions. Siemens and Japan Airlines have already resorted to this practice. &lt;/p&gt;

&lt;p&gt;AR has every chance of increasing its presence in the education market in the coming  years. Compared to VR, augmented reality offers more cost-effective options with the same benefits. All students need is an Internet connection, a smartphone or tablet, and augmented reality applications. There is no need to buy expensive equipment like a virtual reality headset. According to Statista, 83.96% of the world’s population owns a smartphone, which provides a favorable environment for adopting an AR experience. &lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.factmr.com/report/ar-in-education-market"&gt;Fact.MR forecasts&lt;/a&gt;, AR in the education market is projected to witness exponential growth over the coming years, reaching $85 Bn by 2031.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trend-10-improving-mobile-ar-hardware-amp-lidar"&gt;
  &lt;/a&gt;
  Trend #10: Improving Mobile AR Hardware &amp;amp; LiDAR
&lt;/h2&gt;

&lt;p&gt;One popular trend in the augmented reality industry is improving hardware for mobile devices. In particular, Apple’s famous LiDAR sensor on its iPhone 12 Pro, 12 Pro Max, 13 Pro, and 13 Pro Max smartphones as well as iPad Pro. By using infrared lasers, smartphones like Apple’s can determine the depth of scenes with more precision than ever before. This can make analysis of scenes for AR experiences better than ever.&lt;/p&gt;

&lt;p&gt;Some Android phones use this technology as well with flash-based scannerless LiDAR. Samsung’s DepthVision uses a single flash of infrared light to analyze the depth of the scene. Once that’s done, a 3D map of the scene can be created. On the other hand, Apple offers a scanning LiDAR system. This uses time of flight (TOF) and continuously scans an area over time with various IR pulses in different areas of the scene. &lt;/p&gt;

&lt;p&gt;The aforementioned Apple and Android devices are relatively comparable in their performance in delivering AR experiences to users. However, at the moment, it’s important to consider accessibility. LiDAR hardware is only available on higher end Apple products and Android devices, meaning that the vast majority of AR consumers will only have access to a certain level of quality. Developing applications with this in mind is critical to relevancy in 2022.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-augmented-reality"&gt;
  &lt;/a&gt;
  Future of Augmented Reality
&lt;/h3&gt;

&lt;p&gt;With the AR industry continuing to climb in market value, augmented reality’s potential cannot be denied. Importantly, it’s clear that AR’s influence extends far beyond just gaming. It now extends to many different industries as demonstrated by the following chart: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KaCgKBTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4kg4rif9h3q25qk59gc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KaCgKBTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4kg4rif9h3q25qk59gc.png" alt="Future of Augmented Reality: Expected revenue by Industry by 2025" width="720" height="840"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although gaming still has the highest share of industry revenue and will remain a relevant driver of AR, practical uses like in healthcare, engineering, and sales will continue to gain traction. &lt;/p&gt;

&lt;p&gt;Real estate and corporate campus navigation will benefit from AR solutions as well. The growing trend of the ‘metaverse’ will also help accelerate hybridization of telework and virtual meetings with AR technologies. &lt;/p&gt;

&lt;p&gt;If you have ideas about how to implement the above trends in your business, we’ll be happy to assist you with this task. For over 12 years, MobiDev has been helping businesses around the world discover the benefits of innovative technologies such as AR. With over 400 engineers on board, our team can provide the highest level of software development services for companies of all sizes and business domains. Being recognized as one of the top AR development providers by Clutch and GoodFirms, MobiDev has unique expertise in applying augmented reality in existing projects and creating new products based on this technology.&lt;/p&gt;

</description>
      <category>ar</category>
      <category>mobile</category>
      <category>virtual</category>
      <category>metaverse</category>
    </item>
    <item>
      <title>Optimize Your Webserver by Installing a Single NGINX Module</title>
      <author>Slava Knyazev</author>
      <pubDate>Fri, 14 Jan 2022 18:54:41 +0000</pubDate>
      <link>https://dev.to/knyzorg/optimize-your-webserver-by-installing-a-single-nginx-module-5dga</link>
      <guid>https://dev.to/knyzorg/optimize-your-webserver-by-installing-a-single-nginx-module-5dga</guid>
      <description>&lt;p&gt;In 2012, Google released version 1.0 of their &lt;a href="https://www.modpagespeed.com/"&gt;PageSpeed modules&lt;/a&gt; for NGINX and Apache. It has gone largely unnoticed since then. The short of PageSpeed is that if you add it to your web server, you can configure it to optimize anything passing through it using techniques such as minification, format conversion, and even injecting scripts to lazy-load images. You can read more about what it does on &lt;a href="https://developers.google.com/speed/pagespeed/module"&gt;the official site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It sounded great in theory, but how properly install it with NGINX wasn't obvious. While Google does publish &lt;a href="https://www.modpagespeed.com/doc/build_ngx_pagespeed_from_source"&gt;scripts&lt;/a&gt; to help with the installation, it requires a non-trivial depth of knowledge to do right. After struggling with it for many hours, I wrote a guide for personal future reference.&lt;/p&gt;

&lt;p&gt;I recently returned to those notes to entirely automate the process using GitHub Actions. The work is open-source and available on &lt;a href="https://github.com/knyzorg/nginx-pagespeed"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Run the following as root on a Debian-based machine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;su
apt-key adv &lt;span class="nt"&gt;--keyserver&lt;/span&gt; keyserver.ubuntu.com &lt;span class="nt"&gt;--recv-keys&lt;/span&gt; 8028BE1819F3E4A0
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb https://nginx-pagespeed.knyz.org/dist/ /"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /etc/apt/sources.list.d/nginx-pagespeed.list
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Package: *"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /etc/apt/preferences.d/99nginx-pagespeed
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Pin: origin http://nginx-pagespeed.knyz.org/"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/apt/preferences.d/99nginx-pagespeed
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Pin-Priority: 900"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/apt/preferences.d/99nginx-pagespeed
apt update
apt &lt;span class="nb"&gt;install &lt;/span&gt;nginx-full &lt;span class="c"&gt;# If NGINX is already installed, an `apt upgrade` works too&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pagespeed on;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /etc/nginx/conf.d/pagespeed.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pagespeed FileCachePath &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;/var/cache/pagespeed/&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/nginx/conf.d/pagespeed.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pagespeed FileCacheSizeKb 102400;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/nginx/conf.d/pagespeed.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pagespeed FileCacheCleanIntervalMs 3600000;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/nginx/conf.d/pagespeed.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pagespeed FileCacheInodeLimit 500000;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/nginx/conf.d/pagespeed.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pagespeed RewriteLevel CoreFilters;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/nginx/conf.d/pagespeed.conf
systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The installation process is explained more thoroughly on the GitHub page if you're curious.&lt;/p&gt;

&lt;p&gt;Once that is done, you will have an active NGINX + PageSpeed installation that will receive the same updates as upstream NGINX. You can learn more about individual filters that you can enable in the &lt;a href="https://www.modpagespeed.com/doc/config_filters"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally shared on my &lt;a href="https://www.bbss.dev/posts/pagespeed/"&gt;Building Better Software Slower&lt;/a&gt; blog&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>linux</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Top Tips to Secure Your Vue Application</title>
      <author>Lauren Del Signore Fazio</author>
      <pubDate>Fri, 14 Jan 2022 18:53:46 +0000</pubDate>
      <link>https://dev.to/grapecity/top-tips-to-secure-your-vue-application-3jb2</link>
      <guid>https://dev.to/grapecity/top-tips-to-secure-your-vue-application-3jb2</guid>
      <description>&lt;p&gt;The global influx of digital transformation is creating pressure on infrastructure. All the while, threat actors are continually improving their attack techniques. If there is a vulnerability to be found, it will be exploited. This is why many teams are shifting security to the left, even going as far as evolving their development methodology from DevOps to DevSecOps.&lt;/p&gt;

&lt;p&gt;Developers still have remaining concerns, most of which focus on release time. However, you should not need to compromise fast releases in favor of security.&lt;/p&gt;

&lt;p&gt;In this article, you will learn about four methods that can enable you to secure your Vue apps quickly. These are simple security practices that should not interrupt your workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-overview-of-the-vue-framework"&gt;
  &lt;/a&gt;
  An Overview of the Vue Framework
&lt;/h3&gt;

&lt;p&gt;Vue is a progressive framework for building web user interfaces. It's an adoptable, non-monolithic framework that integrates with other frameworks, such as React and Angular. While Vue is only focused on the view layer, it can quickly build Single-Page Applications (SPAs). &lt;/p&gt;

&lt;p&gt;With Vue 3, it is now written in and has full support for TypeScript. There's no need to worry about including any additional tooling and assisting to prevent potential runtime errors as our applications grow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-ways-to-secure-your-vue-application"&gt;
  &lt;/a&gt;
  4 Ways to Secure Your Vue Application
&lt;/h3&gt;

&lt;p&gt;Review the following best practices to learn how to secure applications running on Vue. These best practices will help you prevent attacks like cross-site scripting (XSS) and cross-site request forgery (CSRF), which can be a low-profile, automated attack or part of an &lt;a href="https://www.cynet.com/network-attacks/advanced-persistent-threat-apt-attacks/"&gt;advanced persistent threat&lt;/a&gt; used as the first step in a more extensive attack campaign.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HptgQSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/wijmo/20211207-top-tips-to-secure-your-vue-application/lock-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HptgQSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/wijmo/20211207-top-tips-to-secure-your-vue-application/lock-image.png" alt="security" width="800" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-prevent-crosssite-scripting-xss"&gt;
  &lt;/a&gt;
  1. Prevent Cross-Site Scripting (XSS)
&lt;/h4&gt;

&lt;p&gt;Cross-Site Scripting (XSS) attacks are a type of code injection, and one of the most common types of XSS attacks is a DOM-based attack. The attacker aims to inject hostile code into a DOM element on your website to perform malicious attacks when users land on the web page, such as stealing user data. To prevent this, developers need to sanitize untrusted inputs in several places:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML (Binding inner HTML)&lt;/li&gt;
&lt;li&gt;Style (CSS)&lt;/li&gt;
&lt;li&gt;Attributes (Binding values)&lt;/li&gt;
&lt;li&gt;Resources (Referring files)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sanitizing data is done best before displaying the data to the user screen. It cleanses the original data to prevent exploiting any security holes in your application.&lt;/p&gt;

&lt;p&gt;You always want to convert untrusted values provided by external users into trusted values. The &lt;a href="https://www.npmjs.com/package/vue-sanitize"&gt;vue-sanitize library&lt;/a&gt;, available on NPM, makes it easy to whitelist and sanitize user input values on your server. &lt;/p&gt;

&lt;p&gt;It sanitizes HTML and prevents XSS attacks by consuming a string of dirty HTML. It then removes anything considered dangerous HTML, while allowing any HTML tags you've whitelisted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import VueSanitize from "vue-sanitize";
Vue.use(VueSanitize);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you'd like to whitelist tags and options, it's effortless to accomplish (see below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;defaultOptions = {
    allowedTags: ['a', 'b'],
    allowedAttributes: {
        'a': ['href']
    }
}
Vue.use(VueSanitize, defaultOptions);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;VueSanitize will then take the values that users pass along and sanitize the HTML—keeping anything that we've whitelisted, preventing code injection, and XSS attacks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-avoid-customizing-vue-libraries"&gt;
  &lt;/a&gt;
  2. Avoid Customizing Vue Libraries
&lt;/h4&gt;

&lt;p&gt;As tempting as it may be to customize Vue libraries to fit your needs, doing so will make you reliant on the current version of Vue that you're using. You will find it challenging to upgrade to later versions of Vue and may miss out on critical security fixes and features. &lt;/p&gt;

&lt;p&gt;The best way to make improvements and fixes to Vue libraries is to share your changes with the community via a pull request. This will allow other developers to review your changes and consider adding them to the next Vue version.&lt;/p&gt;

&lt;p&gt;You should also keep any NPM packages that you're using in your Vue application up-to-date. This action will ensure that any security issues that have been addressed or improvements that have been made are included in your application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-avoid-risky-vue-api-endpoints"&gt;
  &lt;/a&gt;
  3. Avoid Risky Vue API Endpoints
&lt;/h4&gt;

&lt;p&gt;A key advantage of Vue is that it can save developers the need to edit the browser's DOM to render components manually; however, that doesn't mean that there won't be times where developers need direct access to DOM elements. In these cases, Vue provides users with escape hatches, such as &lt;strong&gt;findDOMNode&lt;/strong&gt; and &lt;strong&gt;ref&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using something like the ref to gain access to a DOM element is very simple (see below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div id="account"&amp;gt;
        &amp;lt;user-component ref="user" /&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;template&amp;gt;

&amp;lt;script&amp;gt;
import UserComponent from "/components/UserComponent";

export default {
    name: "user-component",
    components: {
        UserComponent
    },
    mounted() {
        this.$refs.user.$refs.userName.focus();
    }
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have a reference to the DOM element of our user component and its API, which we can use the application to manipulate the DOM elements directly, instead of going through Vue to do so. However, this can leave your application open to XSS vulnerabilities. To prevent malicious agents from taking advantage of your application, there are a few steps that you can take to secure it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid directly outputting the HTML code, instead of outputting text&lt;/li&gt;
&lt;li&gt;Sanitize your data by using the VueSanitize library&lt;/li&gt;
&lt;li&gt;Use proper APIs to generate HTML nodes safely&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#4-httplevel-vulnerabilities"&gt;
  &lt;/a&gt;
  4. HTTP-Level Vulnerabilities
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#crosssite-request-forgery-csrf"&gt;
  &lt;/a&gt;
  Cross-Site Request Forgery (CSRF):
&lt;/h5&gt;

&lt;p&gt;CSRF is an attack where a user trusted by an application sends unauthorized, malicious commands. One example of a CSRF would be when a user wants to delete their account on your website. To delete their account, they need to be signed in to your website. &lt;/p&gt;

&lt;p&gt;To validate the authentication of the delete request, the session is stored in the browser via a cookie. However, this leaves a CSRF vulnerability on your site. Users need to send a delete request to the server with the cookie present in the browser.&lt;/p&gt;

&lt;p&gt;A common way to mitigate this threat is to have the application server send a random authentication token included in a cookie. The client reads the cookie and adds a custom request header with the same token in all subsequent requests. This makes it possible to reject a request made by an attacker who does not possess the authentication token.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#crosssite-script-inclusion-xsii"&gt;
  &lt;/a&gt;
  Cross-Site Script Inclusion (XSII)
&lt;/h5&gt;

&lt;p&gt;XSSI is an attack that allows an attacker's website to read data from your application's JSON API. It exploits a vulnerability on old browsers that overrides native JavaScript object constructors. &lt;/p&gt;

&lt;p&gt;It can then provide an API URL using a &lt;strong&gt;script&lt;/strong&gt; tag, meaning that you are including someone else's code in your program. You don't have any control over what is in that code and you don't have any control over the server's security on which it is hosted.&lt;/p&gt;

&lt;p&gt;The server can mitigate this attack by making all JSON responses non-executable. For example, this can be done by prefixing them with the string ")]}',\n" and then using code to remove it before parsing the data. An attacker cannot do so since script inclusion is always the entire script.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-security"&gt;
  &lt;/a&gt;
  Vue Security
&lt;/h3&gt;

&lt;p&gt;Security is a crucial concern that should be addressed, not only by security professionals, but also by developers. The simple practice of writing secure code can help prevent the exploitation of bugs and errors. &lt;/p&gt;

&lt;p&gt;While there's no such thing as "perfect", and there will always be more fixes to make, patches to release, and urgent matters to respond to, adopting a secure code mindset can help you avoid unnecessary risks.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A recipe sharing web app with Django and React</title>
      <author>Hannah</author>
      <pubDate>Fri, 14 Jan 2022 18:51:39 +0000</pubDate>
      <link>https://dev.to/earthcomfy/a-recipe-sharing-web-app-with-django-and-react-1n40</link>
      <guid>https://dev.to/earthcomfy/a-recipe-sharing-web-app-with-django-and-react-1n40</guid>
      <description>&lt;p&gt;Hello everyone. I've built a recipe sharing app using Django rest framework and React.js. This application has taught me a lot and wanted to share it with you guys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-technologies-used-for-the-project"&gt;
  &lt;/a&gt;
  Main technologies used for the project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Django, Django rest framework&lt;/li&gt;
&lt;li&gt;React.js, Redux, TailwindCSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-of-the-features"&gt;
  &lt;/a&gt;
  Some of the features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JWT based user registration and login.&lt;/li&gt;
&lt;li&gt;CRUD endpoints for recipes.&lt;/li&gt;
&lt;li&gt;Like and bookmark feature.&lt;/li&gt;
&lt;li&gt;Unit testing on the backend.&lt;/li&gt;
&lt;li&gt;Documentation of the API using &lt;code&gt;drf_spectacular&lt;/code&gt; which supports OAS3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt; There are some things to be fixed on the frontend and other features will be added soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshots-and-gifs"&gt;
  &lt;/a&gt;
  Screenshots and GIFs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5IJOx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca5plg2vrlur6r7g251d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5IJOx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca5plg2vrlur6r7g251d.gif" alt="Landing Page" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FO5zWPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve8combnqx7sylmzs2th.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FO5zWPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve8combnqx7sylmzs2th.gif" alt="Login Page" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKST8qaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axc2ktealdpkmxkqtof4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKST8qaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axc2ktealdpkmxkqtof4.gif" alt="Quick View" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-jmdrjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llhuseqbqmh0sml5ke7w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-jmdrjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llhuseqbqmh0sml5ke7w.gif" alt="Recipe Form" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The frontend and backend are hosted separately on &lt;strong&gt;Netlify&lt;/strong&gt; and &lt;strong&gt;Heroku&lt;/strong&gt; respectively. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://mesob-recipe.netlify.app/"&gt;https://mesob-recipe.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can test the endpoints here: &lt;a href="https://recipe-backend-api.herokuapp.com/"&gt;https://recipe-backend-api.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like the project, give it a star on GitHub.&lt;/p&gt;

&lt;p&gt;Link to GitHub repo: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Backend:&lt;/strong&gt; &lt;a href="https://github.com/earthcomfy/recipe-api"&gt;https://github.com/earthcomfy/recipe-api&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Frontend:&lt;/strong&gt; &lt;a href="https://github.com/earthcomfy/react-recipe-app"&gt;https://github.com/earthcomfy/react-recipe-app&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you guys would like to see a tutorial on how some of the features are done, especially on the integration of Django and React, let me know in the comments section down below. I'll make sure to write a detailed article about the topic.&lt;/p&gt;

&lt;p&gt;Any suggestions and feedbacks are welcome. &lt;/p&gt;

&lt;p&gt;Thanks for your time.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>django</category>
      <category>react</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
